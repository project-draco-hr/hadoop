{
  hdfs.mkdirs(dir);
  hdfs.allowSnapshot(dir.toString());
  hdfs.createSnapshot(dir,"s0");
  Path sub1=new Path(dir,"sub1");
  Path sub1file1=new Path(sub1,"sub1file1");
  Path sub1file2=new Path(sub1,"sub1file2");
  DFSTestUtil.createFile(hdfs,sub1file1,BLOCKSIZE,REPLICATION,seed);
  DFSTestUtil.createFile(hdfs,sub1file2,BLOCKSIZE,REPLICATION,seed);
  hdfs.createSnapshot(dir,"s1");
  Path sub2=new Path(dir,"sub2");
  Path sub2file1=new Path(sub2,"sub2file1");
  Path sub2file2=new Path(sub2,"sub2file2");
  DFSTestUtil.createFile(hdfs,sub2file1,BLOCKSIZE,REPLICATION,seed);
  DFSTestUtil.createFile(hdfs,sub2file2,BLOCKSIZE,REPLICATION,seed);
  hdfs.setReplication(sub1file1,(short)(REPLICATION - 1));
  hdfs.delete(sub1file2,true);
  hdfs.createSnapshot(dir,"s2");
  hdfs.setOwner(sub2,"dr.who","unknown");
  hdfs.delete(sub2file2,true);
  StringBuffer fsnStrBefore=fsn.getFSDirectory().rootDir.dumpTreeRecursively();
  SaveNamespaceContext context=new SaveNamespaceContext(fsn,txid,new Canceler());
  FSImageFormat.Saver saver=new FSImageFormat.Saver(context);
  FSImageCompression compression=FSImageCompression.createCompression(conf);
  File dstFile=getStorageFile(testDir,txid);
  fsn.readLock();
  try {
    saver.save(dstFile,compression);
  }
  finally {
    fsn.readUnlock();
  }
  cluster.shutdown();
  cluster=new MiniDFSCluster.Builder(conf).format(true).numDataNodes(REPLICATION).build();
  cluster.waitActive();
  fsn=cluster.getNamesystem();
  hdfs=cluster.getFileSystem();
  FSImageFormat.Loader loader=new FSImageFormat.Loader(conf,fsn);
  fsn.writeLock();
  try {
    loader.load(dstFile);
  }
  finally {
    fsn.writeUnlock();
  }
  StringBuffer fsnStrAfter=fsn.getFSDirectory().rootDir.dumpTreeRecursively();
  System.out.println(fsnStrBefore.toString());
  System.out.println("\n" + fsnStrAfter.toString());
  assertEquals(fsnStrBefore.toString(),fsnStrAfter.toString());
}
