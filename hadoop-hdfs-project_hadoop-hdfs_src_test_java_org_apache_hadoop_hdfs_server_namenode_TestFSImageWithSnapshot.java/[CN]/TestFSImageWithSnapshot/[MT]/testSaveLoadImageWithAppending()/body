{
  Path sub1=new Path(dir,"sub1");
  Path sub1file1=new Path(sub1,"sub1file1");
  Path sub1file2=new Path(sub1,"sub1file2");
  DFSTestUtil.createFile(hdfs,sub1file1,BLOCKSIZE,REPLICATION,seed);
  DFSTestUtil.createFile(hdfs,sub1file2,BLOCKSIZE,REPLICATION,seed);
  hdfs.allowSnapshot(dir.toString());
  hdfs.createSnapshot(dir,"s0");
  HdfsDataOutputStream out=appendFileWithoutClosing(sub1file1,BLOCKSIZE);
  out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
  DFSTestUtil.appendFile(hdfs,sub1file2,BLOCKSIZE);
  hdfs.createSnapshot(dir,"s1");
  out.close();
  out=appendFileWithoutClosing(sub1file1,BLOCKSIZE);
  out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
  hdfs.createSnapshot(dir,"s2");
  out.close();
  out=appendFileWithoutClosing(sub1file1,BLOCKSIZE);
  out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
  File fsnBefore=dumpTree2File("before");
  File imageFile=saveFSImageToTempFile();
  out.close();
  cluster.shutdown();
  cluster=new MiniDFSCluster.Builder(conf).format(true).numDataNodes(REPLICATION).build();
  cluster.waitActive();
  fsn=cluster.getNamesystem();
  hdfs=cluster.getFileSystem();
  loadFSImageFromTempFile(imageFile);
  File fsnAfter=dumpTree2File("after");
  SnapshotTestHelper.compareDumpedTreeInFile(fsnBefore,fsnAfter,true);
}
