{
  StringBuffer sb=new StringBuffer();
  sb.append("<queuePlacementPolicy>");
  sb.append("  <rule name='nestedUserQueue'>");
  sb.append("       <rule name='primaryGroup' create='false'/>");
  sb.append("  </rule>");
  sb.append("  <rule name='default' />");
  sb.append("</queuePlacementPolicy>");
  QueuePlacementPolicy policy=parse(sb.toString());
  assertEquals("root.default",policy.assignAppToQueue("root.default","user1"));
  configuredQueues.get(FSQueueType.PARENT).add("root.user1group");
  policy=parse(sb.toString());
  assertEquals("root.user1group.user1",policy.assignAppToQueue("root.default","user1"));
  sb=new StringBuffer();
  sb.append("<queuePlacementPolicy>");
  sb.append("  <rule name='nestedUserQueue' create='false'>");
  sb.append("       <rule name='primaryGroup' create='false'/>");
  sb.append("  </rule>");
  sb.append("  <rule name='default' />");
  sb.append("</queuePlacementPolicy>");
  assertEquals("root.default",policy.assignAppToQueue("root.default","user2"));
  configuredQueues.get(FSQueueType.PARENT).add("root.user2group");
  configuredQueues.get(FSQueueType.LEAF).add("root.user2group.user2");
  policy=parse(sb.toString());
  assertEquals("root.user2group.user2",policy.assignAppToQueue("root.default","user2"));
}
