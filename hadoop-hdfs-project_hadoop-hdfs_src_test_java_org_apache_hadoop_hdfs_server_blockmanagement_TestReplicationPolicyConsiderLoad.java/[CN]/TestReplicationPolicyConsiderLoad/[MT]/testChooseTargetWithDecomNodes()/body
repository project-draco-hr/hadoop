{
  namenode.getNamesystem().writeLock();
  try {
    dnManager.getHeartbeatManager().updateHeartbeat(dataNodes[3],BlockManagerTestUtil.getStorageReportsForDatanode(dataNodes[3]),dataNodes[3].getCacheCapacity(),dataNodes[3].getCacheUsed(),2,0,null);
    dnManager.getHeartbeatManager().updateHeartbeat(dataNodes[4],BlockManagerTestUtil.getStorageReportsForDatanode(dataNodes[4]),dataNodes[4].getCacheCapacity(),dataNodes[4].getCacheUsed(),4,0,null);
    dnManager.getHeartbeatManager().updateHeartbeat(dataNodes[5],BlockManagerTestUtil.getStorageReportsForDatanode(dataNodes[5]),dataNodes[5].getCacheCapacity(),dataNodes[5].getCacheUsed(),4,0,null);
    final int load=2 + 4 + 4;
    assertEquals((double)load / 6,dnManager.getFSClusterStats().getInServiceXceiverAverage(),EPSILON);
    for (int i=0; i < 3; i++) {
      DatanodeDescriptor d=dataNodes[i];
      dnManager.getDecomManager().startDecommission(d);
      d.setDecommissioned();
    }
    assertEquals((double)load / 3,dnManager.getFSClusterStats().getInServiceXceiverAverage(),EPSILON);
    DatanodeDescriptor writerDn=dataNodes[0];
    DatanodeStorageInfo[] targets=namenode.getNamesystem().getBlockManager().getBlockPlacementPolicy().chooseTarget("testFile.txt",3,writerDn,new ArrayList<DatanodeStorageInfo>(),false,null,1024,TestBlockStoragePolicy.DEFAULT_STORAGE_POLICY,null);
    assertEquals(3,targets.length);
    Set<DatanodeStorageInfo> targetSet=new HashSet<>(Arrays.asList(targets));
    for (int i=3; i < storages.length; i++) {
      assertTrue(targetSet.contains(storages[i]));
    }
  }
  finally {
    dataNodes[0].stopDecommission();
    dataNodes[1].stopDecommission();
    dataNodes[2].stopDecommission();
    namenode.getNamesystem().writeUnlock();
  }
  NameNode.LOG.info("Done working on it");
}
