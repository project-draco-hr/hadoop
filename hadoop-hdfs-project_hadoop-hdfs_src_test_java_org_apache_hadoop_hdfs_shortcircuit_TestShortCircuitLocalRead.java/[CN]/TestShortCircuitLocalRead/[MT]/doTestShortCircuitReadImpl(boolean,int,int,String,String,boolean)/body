{
  Configuration conf=new Configuration();
  conf.setBoolean(HdfsClientConfigKeys.Read.ShortCircuit.KEY,true);
  conf.setBoolean(HdfsClientConfigKeys.Read.ShortCircuit.SKIP_CHECKSUM_KEY,ignoreChecksum);
  conf.set(HdfsClientConfigKeys.DFS_CLIENT_CONTEXT,UUID.randomUUID().toString());
  conf.set(DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY,new File(sockDir.getDir(),"TestShortCircuitLocalRead._PORT.sock").getAbsolutePath());
  if (shortCircuitUser != null) {
    conf.set(DFSConfigKeys.DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY,shortCircuitUser);
    conf.setBoolean(HdfsClientConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL,true);
  }
  if (simulatedStorage) {
    SimulatedFSDataset.setFactory(conf);
  }
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build();
  FileSystem fs=cluster.getFileSystem();
  try {
    Path path=new Path("/");
    assertTrue("/ should be a directory",fs.getFileStatus(path).isDirectory());
    byte[] fileData=AppendTestUtil.randomBytes(seed,size);
    Path file1=fs.makeQualified(new Path("filelocal.dat"));
    FSDataOutputStream stm=createFile(fs,file1,1);
    stm.write(fileData);
    stm.close();
    URI uri=cluster.getURI();
    checkFileContent(uri,file1,fileData,readOffset,readingUser,conf,legacyShortCircuitFails);
    checkFileContentDirect(uri,file1,fileData,readOffset,readingUser,conf,legacyShortCircuitFails);
  }
  finally {
    fs.close();
    cluster.shutdown();
  }
}
