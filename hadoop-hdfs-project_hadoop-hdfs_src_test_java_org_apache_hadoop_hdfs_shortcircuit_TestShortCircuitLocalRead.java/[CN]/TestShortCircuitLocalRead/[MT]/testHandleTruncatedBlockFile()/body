{
  MiniDFSCluster cluster=null;
  HdfsConfiguration conf=new HdfsConfiguration();
  conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY,true);
  conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY,false);
  conf.set(DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY,"/tmp/testHandleTruncatedBlockFile._PORT");
  conf.set(DFSConfigKeys.DFS_CHECKSUM_TYPE_KEY,"CRC32C");
  final Path TEST_PATH=new Path("/a");
  final Path TEST_PATH2=new Path("/b");
  final long RANDOM_SEED=4567L;
  final long RANDOM_SEED2=4568L;
  FSDataInputStream fsIn=null;
  final int TEST_LENGTH=3456;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
    FileSystem fs=cluster.getFileSystem();
    DFSTestUtil.createFile(fs,TEST_PATH,TEST_LENGTH,(short)1,RANDOM_SEED);
    DFSTestUtil.createFile(fs,TEST_PATH2,TEST_LENGTH,(short)1,RANDOM_SEED2);
    fsIn=cluster.getFileSystem().open(TEST_PATH2);
    byte original[]=new byte[TEST_LENGTH];
    IOUtils.readFully(fsIn,original,0,TEST_LENGTH);
    fsIn.close();
    fsIn=null;
    try {
      DFSTestUtil.waitReplication(fs,TEST_PATH,(short)1);
    }
 catch (    InterruptedException e) {
      Assert.fail("unexpected InterruptedException during " + "waitReplication: " + e);
    }
catch (    TimeoutException e) {
      Assert.fail("unexpected TimeoutException during " + "waitReplication: " + e);
    }
    ExtendedBlock block=DFSTestUtil.getFirstBlock(fs,TEST_PATH);
    File dataFile=MiniDFSCluster.getBlockFile(0,block);
    cluster.shutdown();
    cluster=null;
    RandomAccessFile raf=null;
    try {
      raf=new RandomAccessFile(dataFile,"rw");
      raf.setLength(0);
    }
  finally {
      if (raf != null)       raf.close();
    }
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).format(false).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    fsIn=fs.open(TEST_PATH);
    try {
      byte buf[]=new byte[100];
      fsIn.seek(2000);
      fsIn.readFully(buf,0,buf.length);
      Assert.fail("shouldn't be able to read from corrupt 0-length " + "block file.");
    }
 catch (    IOException e) {
      DFSClient.LOG.error("caught exception ",e);
    }
    fsIn.close();
    fsIn=null;
    fsIn=fs.open(TEST_PATH2);
    byte buf[]=new byte[original.length];
    fsIn.readFully(buf,0,buf.length);
    TestBlockReaderLocal.assertArrayRegionsEqual(original,0,buf,0,original.length);
    fsIn.close();
    fsIn=null;
  }
  finally {
    if (fsIn != null)     fsIn.close();
    if (cluster != null)     cluster.shutdown();
  }
}
