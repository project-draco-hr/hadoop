{
  final Summation[] parts=new Summation[nParts];
  final long steps=(E.limit - E.value) / E.delta + 1;
  long prevN=N.value;
  long prevE=E.value;
  for (int i=1; i < parts.length; i++) {
    final long k=(i * steps) / parts.length;
    final long currN=N.skip(k);
    final long currE=E.skip(k);
    parts[i - 1]=new Summation(new ArithmeticProgression(N.symbol,prevN,N.delta,currN),new ArithmeticProgression(E.symbol,prevE,E.delta,currE));
    prevN=currN;
    prevE=currE;
  }
  parts[parts.length - 1]=new Summation(new ArithmeticProgression(N.symbol,prevN,N.delta,N.limit),new ArithmeticProgression(E.symbol,prevE,E.delta,E.limit));
  return parts;
}
