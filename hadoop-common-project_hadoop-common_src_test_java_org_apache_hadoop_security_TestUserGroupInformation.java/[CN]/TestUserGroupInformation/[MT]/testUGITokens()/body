{
  UserGroupInformation ugi=UserGroupInformation.createUserForTesting("TheDoctor",new String[]{"TheTARDIS"});
  Token<T> t1=mock(Token.class);
  when(t1.getService()).thenReturn(new Text("t1"));
  Token<T> t2=mock(Token.class);
  when(t2.getService()).thenReturn(new Text("t2"));
  ugi.addToken(t1);
  ugi.addToken(t2);
  Collection<Token<? extends TokenIdentifier>> z=ugi.getTokens();
  assertTrue(z.contains(t1));
  assertTrue(z.contains(t2));
  assertEquals(2,z.size());
  try {
    z.remove(t1);
    fail("Shouldn't be able to modify token collection from UGI");
  }
 catch (  UnsupportedOperationException uoe) {
  }
  Collection<Token<? extends TokenIdentifier>> otherSet=ugi.doAs(new PrivilegedExceptionAction<Collection<Token<?>>>(){
    @Override public Collection<Token<?>> run() throws IOException {
      return UserGroupInformation.getCurrentUser().getTokens();
    }
  }
);
  assertTrue(otherSet.contains(t1));
  assertTrue(otherSet.contains(t2));
}
