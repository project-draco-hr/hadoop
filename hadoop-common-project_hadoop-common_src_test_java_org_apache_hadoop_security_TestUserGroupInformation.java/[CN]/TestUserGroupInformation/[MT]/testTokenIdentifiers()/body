{
  UserGroupInformation ugi=UserGroupInformation.createUserForTesting("TheDoctor",new String[]{"TheTARDIS"});
  TokenIdentifier t1=mock(TokenIdentifier.class);
  TokenIdentifier t2=mock(TokenIdentifier.class);
  ugi.addTokenIdentifier(t1);
  ugi.addTokenIdentifier(t2);
  Collection<TokenIdentifier> z=ugi.getTokenIdentifiers();
  assertTrue(z.contains(t1));
  assertTrue(z.contains(t2));
  assertEquals(2,z.size());
  Collection<TokenIdentifier> otherSet=ugi.doAs(new PrivilegedExceptionAction<Collection<TokenIdentifier>>(){
    @Override public Collection<TokenIdentifier> run() throws IOException {
      return UserGroupInformation.getCurrentUser().getTokenIdentifiers();
    }
  }
);
  assertTrue(otherSet.contains(t1));
  assertTrue(otherSet.contains(t2));
  assertEquals(2,otherSet.size());
}
