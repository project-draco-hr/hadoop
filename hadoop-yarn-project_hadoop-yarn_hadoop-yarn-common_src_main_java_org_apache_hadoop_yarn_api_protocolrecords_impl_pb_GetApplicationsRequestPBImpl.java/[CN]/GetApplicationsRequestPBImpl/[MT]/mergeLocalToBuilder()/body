{
  if (applicationTypes != null && !applicationTypes.isEmpty()) {
    builder.clearApplicationTypes();
    builder.addAllApplicationTypes(applicationTypes);
  }
  if (applicationStates != null && !applicationStates.isEmpty()) {
    builder.clearApplicationStates();
    builder.addAllApplicationStates(Iterables.transform(applicationStates,new Function<YarnApplicationState,YarnApplicationStateProto>(){
      @Override public YarnApplicationStateProto apply(      YarnApplicationState input){
        return ProtoUtils.convertToProtoFormat(input);
      }
    }
));
  }
  if (applicationTags != null && !applicationTags.isEmpty()) {
    builder.clearApplicationTags();
    builder.addAllApplicationTags(this.applicationTags);
  }
  if (scope != null) {
    builder.setScope(ProtoUtils.convertToProtoFormat(scope));
  }
  if (start != null) {
    builder.setStartBegin(start.getMinimumLong());
    builder.setStartEnd(start.getMaximumLong());
  }
  if (finish != null) {
    builder.setFinishBegin(finish.getMinimumLong());
    builder.setFinishEnd(finish.getMaximumLong());
  }
  if (limit != Long.MAX_VALUE) {
    builder.setLimit(limit);
  }
  if (users != null && !users.isEmpty()) {
    builder.clearUsers();
    builder.addAllUsers(users);
  }
  if (queues != null && !queues.isEmpty()) {
    builder.clearQueues();
    builder.addAllQueues(queues);
  }
}
