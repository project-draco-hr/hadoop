{
  MiniDFSCluster cluster=null;
  try {
    Configuration conf=new Configuration();
    conf.set(DFSConfigKeys.DFS_ENCRYPT_DATA_TRANSFER_CIPHER_SUITES_KEY,"AES/CTR/NoPadding");
    cluster=new MiniDFSCluster.Builder(conf).build();
    FileSystem fs=getFileSystem(conf);
    writeTestDataToFile(fs);
    assertEquals(PLAIN_TEXT,DFSTestUtil.readFile(fs,TEST_PATH));
    FileChecksum checksum=fs.getFileChecksum(TEST_PATH);
    fs.close();
    cluster.shutdown();
    setEncryptionConfigKeys(conf);
    cluster=new MiniDFSCluster.Builder(conf).manageDataDfsDirs(false).manageNameDfsDirs(false).format(false).startupOption(StartupOption.REGULAR).build();
    fs=getFileSystem(conf);
    LogCapturer logs=GenericTestUtils.LogCapturer.captureLogs(LogFactory.getLog(SaslDataTransferServer.class));
    LogCapturer logs1=GenericTestUtils.LogCapturer.captureLogs(LogFactory.getLog(DataTransferSaslUtil.class));
    try {
      assertEquals(PLAIN_TEXT,DFSTestUtil.readFile(fs,TEST_PATH));
      assertEquals(checksum,fs.getFileChecksum(TEST_PATH));
    }
  finally {
      logs.stopCapturing();
      logs1.stopCapturing();
    }
    fs.close();
    if (resolverClazz == null) {
      GenericTestUtils.assertMatches(logs.getOutput(),"Server using cipher suite");
      GenericTestUtils.assertMatches(logs1.getOutput(),"Creating IOStreamPair of CryptoInputStream and CryptoOutputStream.");
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
