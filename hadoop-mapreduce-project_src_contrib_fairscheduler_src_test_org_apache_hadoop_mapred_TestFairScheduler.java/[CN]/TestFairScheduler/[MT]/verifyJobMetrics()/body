{
  MetricsContext ctx=MetricsUtil.getContext("fairscheduler");
  Collection<OutputRecord> records=ctx.getAllRecords().get("jobs");
  System.out.println("Checking job metrics...");
  Map<String,OutputRecord> byJobIdAndType=new HashMap<String,OutputRecord>();
  for (  OutputRecord rec : records) {
    String jobId=(String)rec.getTag("name");
    String type=(String)rec.getTag("taskType");
    assertNotNull(jobId);
    assertNotNull(type);
    byJobIdAndType.put(jobId + "_" + type,rec);
    System.out.println("Got " + type + " metrics for job: "+ jobId);
  }
  assertEquals(scheduler.infos.size() * 2,byJobIdAndType.size());
  for (  Map.Entry<JobInProgress,JobInfo> entry : scheduler.infos.entrySet()) {
    JobInfo info=entry.getValue();
    String jobId=entry.getKey().getJobID().toString();
    OutputRecord mapMetrics=byJobIdAndType.get(jobId + "_MAP");
    assertNotNull("Job " + jobId + " should have map metrics",mapMetrics);
    verifySchedulableMetrics(info.mapSchedulable,mapMetrics);
    OutputRecord reduceMetrics=byJobIdAndType.get(jobId + "_REDUCE");
    assertNotNull("Job " + jobId + " should have reduce metrics",reduceMetrics);
    verifySchedulableMetrics(info.reduceSchedulable,reduceMetrics);
  }
}
