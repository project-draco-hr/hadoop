{
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<pool name=\"poolA\">");
  out.println("<maxRunningJobs>1</maxRunningJobs>");
  out.println("</pool>");
  out.println("<user name=\"user1\">");
  out.println("<maxRunningJobs>1</maxRunningJobs>");
  out.println("</user>");
  out.println("<user name=\"user2\">");
  out.println("<maxRunningJobs>10</maxRunningJobs>");
  out.println("</user>");
  out.println("<userMaxJobsDefault>2</userMaxJobsDefault>");
  out.println("</allocations>");
  out.close();
  scheduler.getPoolManager().reloadAllocs();
  JobInProgress job1=submitJob(JobStatus.RUNNING,10,10);
  job1.getJobConf().set(JobContext.USER_NAME,"user1");
  JobInfo info1=scheduler.infos.get(job1);
  advanceTime(10);
  JobInProgress job2=submitJob(JobStatus.RUNNING,10,10);
  job2.getJobConf().set(JobContext.USER_NAME,"user1");
  JobInfo info2=scheduler.infos.get(job2);
  advanceTime(10);
  JobInProgress job3=submitJob(JobStatus.RUNNING,10,10);
  job3.getJobConf().set(JobContext.USER_NAME,"user2");
  JobInfo info3=scheduler.infos.get(job3);
  advanceTime(10);
  JobInProgress job4=submitJob(JobStatus.RUNNING,10,10);
  job4.getJobConf().set(JobContext.USER_NAME,"user2");
  JobInfo info4=scheduler.infos.get(job4);
  advanceTime(10);
  JobInProgress job5=submitJob(JobStatus.RUNNING,10,10);
  job5.getJobConf().set(JobContext.USER_NAME,"user2");
  JobInfo info5=scheduler.infos.get(job5);
  advanceTime(10);
  JobInProgress job6=submitJob(JobStatus.RUNNING,10,10);
  job6.getJobConf().set(JobContext.USER_NAME,"user3");
  JobInfo info6=scheduler.infos.get(job6);
  advanceTime(10);
  JobInProgress job7=submitJob(JobStatus.RUNNING,10,10);
  job7.getJobConf().set(JobContext.USER_NAME,"user3");
  JobInfo info7=scheduler.infos.get(job7);
  advanceTime(10);
  JobInProgress job8=submitJob(JobStatus.RUNNING,10,10);
  job8.getJobConf().set(JobContext.USER_NAME,"user3");
  JobInfo info8=scheduler.infos.get(job8);
  advanceTime(10);
  JobInProgress job9=submitJob(JobStatus.RUNNING,10,10,"poolA");
  job9.getJobConf().set(JobContext.USER_NAME,"user4");
  JobInfo info9=scheduler.infos.get(job9);
  advanceTime(10);
  JobInProgress job10=submitJob(JobStatus.RUNNING,10,10,"poolA");
  job10.getJobConf().set(JobContext.USER_NAME,"user4");
  JobInfo info10=scheduler.infos.get(job10);
  advanceTime(10);
  assertEquals(0.33,info1.mapSchedulable.getFairShare(),0.1);
  assertEquals(0.33,info1.reduceSchedulable.getFairShare(),0.1);
  assertEquals(0.0,info2.mapSchedulable.getFairShare());
  assertEquals(0.0,info2.reduceSchedulable.getFairShare());
  assertEquals(0.33,info3.mapSchedulable.getFairShare(),0.1);
  assertEquals(0.33,info3.reduceSchedulable.getFairShare(),0.1);
  assertEquals(0.33,info4.mapSchedulable.getFairShare(),0.1);
  assertEquals(0.33,info4.reduceSchedulable.getFairShare(),0.1);
  assertEquals(0.33,info5.mapSchedulable.getFairShare(),0.1);
  assertEquals(0.33,info5.reduceSchedulable.getFairShare(),0.1);
  assertEquals(0.33,info6.mapSchedulable.getFairShare(),0.1);
  assertEquals(0.33,info6.reduceSchedulable.getFairShare(),0.1);
  assertEquals(0.33,info7.mapSchedulable.getFairShare(),0.1);
  assertEquals(0.33,info7.reduceSchedulable.getFairShare(),0.1);
  assertEquals(0.0,info8.mapSchedulable.getFairShare());
  assertEquals(0.0,info8.reduceSchedulable.getFairShare());
  assertEquals(2.0,info9.mapSchedulable.getFairShare(),0.1);
  assertEquals(2.0,info9.reduceSchedulable.getFairShare(),0.1);
  assertEquals(0.0,info10.mapSchedulable.getFairShare());
  assertEquals(0.0,info10.reduceSchedulable.getFairShare());
}
