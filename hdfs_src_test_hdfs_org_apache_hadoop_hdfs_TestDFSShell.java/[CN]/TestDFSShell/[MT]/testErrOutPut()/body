{
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=null;
  PrintStream bak=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
    FileSystem srcFs=cluster.getFileSystem();
    Path root=new Path("/nonexistentfile");
    bak=System.err;
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    PrintStream tmp=new PrintStream(out);
    System.setErr(tmp);
    String[] argv=new String[2];
    argv[0]="-cat";
    argv[1]=root.toUri().getPath();
    int ret=ToolRunner.run(new FsShell(),argv);
    assertEquals(" -cat returned 1 ",1,ret);
    String returned=out.toString();
    assertTrue("cat does not print exceptions ",(returned.lastIndexOf("Exception") == -1));
    out.reset();
    argv[0]="-rm";
    argv[1]=root.toString();
    FsShell shell=new FsShell();
    shell.setConf(conf);
    ret=ToolRunner.run(shell,argv);
    assertEquals(" -rm returned 1 ",1,ret);
    returned=out.toString();
    out.reset();
    assertTrue("rm prints reasonable error ",(returned.lastIndexOf("No such file or directory") != -1));
    argv[0]="-rmr";
    argv[1]=root.toString();
    ret=ToolRunner.run(shell,argv);
    assertEquals(" -rmr returned 1",1,ret);
    returned=out.toString();
    assertTrue("rmr prints reasonable error ",(returned.lastIndexOf("No such file or directory") != -1));
    out.reset();
    argv[0]="-du";
    argv[1]="/nonexistentfile";
    ret=ToolRunner.run(shell,argv);
    returned=out.toString();
    assertTrue(" -du prints reasonable error ",(returned.lastIndexOf("No such file or directory") != -1));
    out.reset();
    argv[0]="-dus";
    argv[1]="/nonexistentfile";
    ret=ToolRunner.run(shell,argv);
    returned=out.toString();
    assertTrue(" -dus prints reasonable error",(returned.lastIndexOf("No such file or directory") != -1));
    out.reset();
    argv[0]="-ls";
    argv[1]="/nonexistenfile";
    ret=ToolRunner.run(shell,argv);
    returned=out.toString();
    assertTrue(" -ls does not return Found 0 items",(returned.lastIndexOf("Found 0") == -1));
    out.reset();
    argv[0]="-ls";
    argv[1]="/nonexistentfile";
    ret=ToolRunner.run(shell,argv);
    assertEquals(" -lsr should fail ",1,ret);
    out.reset();
    srcFs.mkdirs(new Path("/testdir"));
    argv[0]="-ls";
    argv[1]="/testdir";
    ret=ToolRunner.run(shell,argv);
    returned=out.toString();
    assertTrue(" -ls does not print out anything ",(returned.lastIndexOf("Found 0") == -1));
    out.reset();
    argv[0]="-ls";
    argv[1]="/user/nonxistant/*";
    ret=ToolRunner.run(shell,argv);
    assertEquals(" -ls on nonexistent glob returns 1",1,ret);
    out.reset();
    argv[0]="-mkdir";
    argv[1]="/testdir";
    ret=ToolRunner.run(shell,argv);
    returned=out.toString();
    assertEquals(" -mkdir returned 1 ",1,ret);
    assertTrue(" -mkdir returned File exists",(returned.lastIndexOf("File exists") != -1));
    Path testFile=new Path("/testfile");
    OutputStream outtmp=srcFs.create(testFile);
    outtmp.write(testFile.toString().getBytes());
    outtmp.close();
    out.reset();
    argv[0]="-mkdir";
    argv[1]="/testfile";
    ret=ToolRunner.run(shell,argv);
    returned=out.toString();
    assertEquals(" -mkdir returned 1",1,ret);
    assertTrue(" -mkdir returned this is a file ",(returned.lastIndexOf("not a directory") != -1));
    out.reset();
    argv=new String[3];
    argv[0]="-mv";
    argv[1]="/testfile";
    argv[2]="file";
    ret=ToolRunner.run(shell,argv);
    assertEquals("mv failed to rename",1,ret);
    out.reset();
    argv=new String[3];
    argv[0]="-mv";
    argv[1]="/testfile";
    argv[2]="/testfiletest";
    ret=ToolRunner.run(shell,argv);
    returned=out.toString();
    assertTrue("no output from rename",(returned.lastIndexOf("Renamed") == -1));
    out.reset();
    argv[0]="-mv";
    argv[1]="/testfile";
    argv[2]="/testfiletmp";
    ret=ToolRunner.run(shell,argv);
    returned=out.toString();
    assertTrue(" unix like output",(returned.lastIndexOf("No such file or") != -1));
    out.reset();
    argv=new String[1];
    argv[0]="-du";
    srcFs.mkdirs(srcFs.getHomeDirectory());
    ret=ToolRunner.run(shell,argv);
    returned=out.toString();
    assertEquals(" no error ",0,ret);
    assertTrue("empty path specified",(returned.lastIndexOf("empty string") == -1));
  }
  finally {
    if (bak != null) {
      System.setErr(bak);
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
