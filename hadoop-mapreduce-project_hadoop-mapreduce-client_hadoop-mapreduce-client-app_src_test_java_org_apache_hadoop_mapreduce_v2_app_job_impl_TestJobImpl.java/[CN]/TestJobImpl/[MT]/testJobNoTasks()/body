{
  Configuration conf=new Configuration();
  conf.setInt(MRJobConfig.NUM_REDUCES,0);
  conf.set(MRJobConfig.MR_AM_STAGING_DIR,stagingDir);
  conf.set(MRJobConfig.WORKFLOW_ID,"testId");
  conf.set(MRJobConfig.WORKFLOW_NAME,"testName");
  conf.set(MRJobConfig.WORKFLOW_NODE_NAME,"testNodeName");
  conf.set(MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING + "key1","value1");
  conf.set(MRJobConfig.WORKFLOW_ADJACENCY_PREFIX_STRING + "key2","value2");
  AsyncDispatcher dispatcher=new AsyncDispatcher();
  dispatcher.init(conf);
  dispatcher.start();
  OutputCommitter committer=mock(OutputCommitter.class);
  CommitterEventHandler commitHandler=createCommitterEventHandler(dispatcher,committer);
  commitHandler.init(conf);
  commitHandler.start();
  JobSubmittedEventHandler jseHandler=new JobSubmittedEventHandler("testId","testName","testNodeName","\"key2\"=\"value2\" \"key1\"=\"value1\" ");
  dispatcher.register(EventType.class,jseHandler);
  JobImpl job=createStubbedJob(conf,dispatcher,0);
  job.handle(new JobEvent(job.getID(),JobEventType.JOB_INIT));
  assertJobState(job,JobStateInternal.INITED);
  job.handle(new JobEvent(job.getID(),JobEventType.JOB_START));
  assertJobState(job,JobStateInternal.SUCCEEDED);
  dispatcher.stop();
  commitHandler.stop();
  try {
    Assert.assertTrue(jseHandler.getAssertValue());
  }
 catch (  InterruptedException e) {
    Assert.fail("Workflow related attributes are not tested properly");
  }
}
