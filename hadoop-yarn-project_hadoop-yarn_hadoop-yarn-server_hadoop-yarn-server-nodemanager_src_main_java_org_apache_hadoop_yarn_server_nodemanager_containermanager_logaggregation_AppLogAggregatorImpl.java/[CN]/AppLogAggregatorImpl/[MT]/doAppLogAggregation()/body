{
  ContainerId containerId;
  while (!this.appFinishing.get()) {
    try {
      containerId=this.pendingContainers.poll();
      if (containerId == null) {
        Thread.sleep(THREAD_SLEEP_TIME);
      }
 else {
        uploadLogsForContainer(containerId);
      }
    }
 catch (    InterruptedException e) {
      LOG.warn("PendingContainers queue is interrupted");
      this.appFinishing.set(true);
    }
  }
  while ((containerId=this.pendingContainers.poll()) != null) {
    uploadLogsForContainer(containerId);
  }
  List<String> rootLogDirs=dirsHandler.getLogDirs();
  Path[] localAppLogDirs=new Path[rootLogDirs.size()];
  int index=0;
  for (  String rootLogDir : rootLogDirs) {
    localAppLogDirs[index]=new Path(rootLogDir,this.applicationId);
    index++;
  }
  this.delService.delete(this.userUgi.getShortUserName(),null,localAppLogDirs);
  if (this.writer != null) {
    this.writer.closeWriter();
    LOG.info("Finished aggregate log-file for app " + this.applicationId);
  }
  try {
    userUgi.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        FileSystem remoteFS=FileSystem.get(conf);
        remoteFS.rename(remoteNodeTmpLogFileForApp,remoteNodeLogFileForApp);
        return null;
      }
    }
);
  }
 catch (  Exception e) {
    LOG.error("Failed to move temporary log file to final location: [" + remoteNodeTmpLogFileForApp + "] to ["+ remoteNodeLogFileForApp+ "]",e);
  }
  this.dispatcher.getEventHandler().handle(new ApplicationEvent(this.appId,ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED));
  this.appAggregationFinished.set(true);
}
