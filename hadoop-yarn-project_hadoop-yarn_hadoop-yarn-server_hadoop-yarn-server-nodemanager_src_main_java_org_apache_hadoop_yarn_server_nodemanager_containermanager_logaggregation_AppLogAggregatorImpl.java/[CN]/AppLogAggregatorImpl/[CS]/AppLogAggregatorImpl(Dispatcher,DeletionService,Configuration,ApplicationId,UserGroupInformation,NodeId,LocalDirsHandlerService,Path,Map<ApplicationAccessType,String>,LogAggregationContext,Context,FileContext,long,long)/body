{
  this.dispatcher=dispatcher;
  this.conf=conf;
  this.delService=deletionService;
  this.appId=appId;
  this.applicationId=ConverterUtils.toString(appId);
  this.userUgi=userUgi;
  this.dirsHandler=dirsHandler;
  this.remoteNodeLogFileForApp=remoteNodeLogFileForApp;
  this.remoteNodeTmpLogFileForApp=getRemoteNodeTmpLogFileForApp();
  this.pendingContainers=new LinkedBlockingQueue<ContainerId>();
  this.appAcls=appAcls;
  this.lfs=lfs;
  this.logAggregationContext=logAggregationContext;
  this.context=context;
  this.nodeId=nodeId;
  int configuredRentionSize=conf.getInt(NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP,DEFAULT_NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP);
  if (configuredRentionSize <= 0) {
    this.retentionSize=DEFAULT_NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP;
  }
 else {
    this.retentionSize=configuredRentionSize;
  }
  this.rollingMonitorInterval=rollingMonitorInterval;
  this.logAggregationInRolling=this.rollingMonitorInterval <= 0 || this.logAggregationContext == null || this.logAggregationContext.getRolledLogsIncludePattern() == null || this.logAggregationContext.getRolledLogsIncludePattern().isEmpty() ? false : true;
  this.logAggPolicy=getLogAggPolicy(conf);
  this.recoveredLogInitedTime=recoveredLogInitedTime;
}
