{
  this.dispatcher=dispatcher;
  this.conf=conf;
  this.delService=deletionService;
  this.appId=appId;
  this.applicationId=ConverterUtils.toString(appId);
  this.userUgi=userUgi;
  this.dirsHandler=dirsHandler;
  this.remoteNodeLogFileForApp=remoteNodeLogFileForApp;
  this.remoteNodeTmpLogFileForApp=getRemoteNodeTmpLogFileForApp();
  this.retentionPolicy=retentionPolicy;
  this.pendingContainers=new LinkedBlockingQueue<ContainerId>();
  this.appAcls=appAcls;
  this.lfs=lfs;
  this.logAggregationContext=logAggregationContext;
  this.context=context;
  this.nodeId=nodeId;
  int configuredRentionSize=conf.getInt(NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP,DEFAULT_NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP);
  if (configuredRentionSize <= 0) {
    this.retentionSize=DEFAULT_NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP;
  }
 else {
    this.retentionSize=configuredRentionSize;
  }
  long configuredRollingMonitorInterval=conf.getLong(YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS);
  boolean debug_mode=conf.getBoolean(NM_LOG_AGGREGATION_DEBUG_ENABLED,DEFAULT_NM_LOG_AGGREGATION_DEBUG_ENABLED);
  if (configuredRollingMonitorInterval > 0 && configuredRollingMonitorInterval < NM_LOG_AGGREGATION_MIN_ROLL_MONITORING_INTERVAL_SECONDS) {
    if (debug_mode) {
      this.rollingMonitorInterval=configuredRollingMonitorInterval;
    }
 else {
      LOG.warn("rollingMonitorIntervall should be more than or equal to " + NM_LOG_AGGREGATION_MIN_ROLL_MONITORING_INTERVAL_SECONDS + " seconds. Using "+ NM_LOG_AGGREGATION_MIN_ROLL_MONITORING_INTERVAL_SECONDS+ " seconds instead.");
      this.rollingMonitorInterval=NM_LOG_AGGREGATION_MIN_ROLL_MONITORING_INTERVAL_SECONDS;
    }
  }
 else {
    if (configuredRollingMonitorInterval <= 0) {
      LOG.warn("rollingMonitorInterval is set as " + configuredRollingMonitorInterval + ". "+ "The log rolling mornitoring interval is disabled. "+ "The logs will be aggregated after this application is finished.");
    }
 else {
      LOG.warn("rollingMonitorInterval is set as " + configuredRollingMonitorInterval + ". "+ "The logs will be aggregated every "+ configuredRollingMonitorInterval+ " seconds");
    }
    this.rollingMonitorInterval=configuredRollingMonitorInterval;
  }
  this.logAggregationInRolling=this.rollingMonitorInterval <= 0 || this.logAggregationContext == null || this.logAggregationContext.getRolledLogsIncludePattern() == null || this.logAggregationContext.getRolledLogsIncludePattern().isEmpty() ? false : true;
}
