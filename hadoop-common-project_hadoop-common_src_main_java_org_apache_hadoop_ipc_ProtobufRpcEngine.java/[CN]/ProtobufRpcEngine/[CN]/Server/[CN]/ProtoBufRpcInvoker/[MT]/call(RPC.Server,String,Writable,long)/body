{
  RpcRequestWritable request=(RpcRequestWritable)writableRequest;
  HadoopRpcRequestProto rpcRequest=request.message;
  String methodName=rpcRequest.getMethodName();
  String declaringClassProtoName=rpcRequest.getDeclaringClassProtocolName();
  long clientVersion=rpcRequest.getClientProtocolVersion();
  if (server.verbose)   LOG.info("Call: connectionProtocolName=" + connectionProtocolName + ", method="+ methodName);
  ProtoClassProtoImpl protocolImpl=getProtocolImpl(server,declaringClassProtoName,clientVersion);
  BlockingService service=(BlockingService)protocolImpl.protocolImpl;
  MethodDescriptor methodDescriptor=service.getDescriptorForType().findMethodByName(methodName);
  if (methodDescriptor == null) {
    String msg="Unknown method " + methodName + " called on "+ connectionProtocolName+ " protocol.";
    LOG.warn(msg);
    throw new RpcServerException(msg);
  }
  Message prototype=service.getRequestPrototype(methodDescriptor);
  Message param=prototype.newBuilderForType().mergeFrom(rpcRequest.getRequest()).build();
  Message result;
  try {
    long startTime=System.currentTimeMillis();
    server.rpcDetailedMetrics.init(protocolImpl.protocolClass);
    result=service.callBlockingMethod(methodDescriptor,null,param);
    int processingTime=(int)(System.currentTimeMillis() - startTime);
    int qTime=(int)(startTime - receiveTime);
    if (LOG.isDebugEnabled()) {
      LOG.info("Served: " + methodName + " queueTime= "+ qTime+ " procesingTime= "+ processingTime);
    }
    server.rpcMetrics.addRpcQueueTime(qTime);
    server.rpcMetrics.addRpcProcessingTime(processingTime);
    server.rpcDetailedMetrics.addProcessingTime(methodName,processingTime);
  }
 catch (  ServiceException e) {
    throw (Exception)e.getCause();
  }
catch (  Exception e) {
    throw e;
  }
  return new RpcResponseWritable(result);
}
