{
  RpcWritable.Buffer request=(RpcWritable.Buffer)writableRequest;
  RequestHeaderProto rpcRequest=request.getValue(RequestHeaderProto.getDefaultInstance());
  String methodName=rpcRequest.getMethodName();
  String declaringClassProtoName=rpcRequest.getDeclaringClassProtocolName();
  long clientVersion=rpcRequest.getClientProtocolVersion();
  if (server.verbose)   LOG.info("Call: connectionProtocolName=" + connectionProtocolName + ", method="+ methodName);
  ProtoClassProtoImpl protocolImpl=getProtocolImpl(server,declaringClassProtoName,clientVersion);
  BlockingService service=(BlockingService)protocolImpl.protocolImpl;
  MethodDescriptor methodDescriptor=service.getDescriptorForType().findMethodByName(methodName);
  if (methodDescriptor == null) {
    String msg="Unknown method " + methodName + " called on "+ connectionProtocolName+ " protocol.";
    LOG.warn(msg);
    throw new RpcNoSuchMethodException(msg);
  }
  Message prototype=service.getRequestPrototype(methodDescriptor);
  Message param=request.getValue(prototype);
  Message result;
  long startTime=Time.now();
  int qTime=(int)(startTime - receiveTime);
  Exception exception=null;
  try {
    server.rpcDetailedMetrics.init(protocolImpl.protocolClass);
    result=service.callBlockingMethod(methodDescriptor,null,param);
  }
 catch (  ServiceException e) {
    exception=(Exception)e.getCause();
    throw (Exception)e.getCause();
  }
catch (  Exception e) {
    exception=e;
    throw e;
  }
 finally {
    int processingTime=(int)(Time.now() - startTime);
    if (LOG.isDebugEnabled()) {
      String msg="Served: " + methodName + " queueTime= "+ qTime+ " procesingTime= "+ processingTime;
      if (exception != null) {
        msg+=" exception= " + exception.getClass().getSimpleName();
      }
      LOG.debug(msg);
    }
    String detailedMetricsName=(exception == null) ? methodName : exception.getClass().getSimpleName();
    server.updateMetrics(detailedMetricsName,qTime,processingTime);
  }
  return RpcWritable.wrap(result);
}
