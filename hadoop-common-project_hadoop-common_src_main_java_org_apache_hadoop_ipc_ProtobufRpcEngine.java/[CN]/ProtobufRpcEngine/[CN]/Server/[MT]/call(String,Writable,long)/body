{
  RpcRequestWritable request=(RpcRequestWritable)writableRequest;
  HadoopRpcRequestProto rpcRequest=request.message;
  String methodName=rpcRequest.getMethodName();
  if (verbose)   LOG.info("Call: protocol=" + protocol + ", method="+ methodName);
  MethodDescriptor methodDescriptor=service.getDescriptorForType().findMethodByName(methodName);
  if (methodDescriptor == null) {
    String msg="Unknown method " + methodName + " called on "+ protocol+ " protocol.";
    LOG.warn(msg);
    return handleException(new RpcServerException(msg));
  }
  Message prototype=service.getRequestPrototype(methodDescriptor);
  Message param=prototype.newBuilderForType().mergeFrom(rpcRequest.getRequest()).build();
  Message result;
  try {
    result=service.callBlockingMethod(methodDescriptor,null,param);
  }
 catch (  ServiceException e) {
    Throwable cause=e.getCause();
    return handleException(cause != null ? cause : e);
  }
catch (  Exception e) {
    return handleException(e);
  }
  HadoopRpcResponseProto response=constructProtoSpecificRpcSuccessResponse(result);
  return new RpcResponseWritable(response);
}
