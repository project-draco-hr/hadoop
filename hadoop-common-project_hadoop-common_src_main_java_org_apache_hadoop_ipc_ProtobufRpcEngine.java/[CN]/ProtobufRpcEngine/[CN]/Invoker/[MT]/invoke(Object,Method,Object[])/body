{
  long startTime=0;
  if (LOG.isDebugEnabled()) {
    startTime=Time.now();
  }
  HadoopRpcRequestProto rpcRequest=constructRpcRequest(method,args);
  RpcResponseWritable val=null;
  if (LOG.isTraceEnabled()) {
    LOG.trace(Thread.currentThread().getId() + ": Call -> " + remoteId+ ": "+ method.getName()+ " {"+ TextFormat.shortDebugString((Message)args[1])+ "}");
  }
  try {
    val=(RpcResponseWritable)client.call(RPC.RpcKind.RPC_PROTOCOL_BUFFER,new RpcRequestWritable(rpcRequest),remoteId);
  }
 catch (  Throwable e) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(Thread.currentThread().getId() + ": Exception <- " + remoteId+ ": "+ method.getName()+ " {"+ e+ "}");
    }
    throw new ServiceException(e);
  }
  if (LOG.isDebugEnabled()) {
    long callTime=Time.now() - startTime;
    LOG.debug("Call: " + method.getName() + " took "+ callTime+ "ms");
  }
  Message prototype=null;
  try {
    prototype=getReturnProtoType(method);
  }
 catch (  Exception e) {
    throw new ServiceException(e);
  }
  Message returnMessage;
  try {
    returnMessage=prototype.newBuilderForType().mergeFrom(val.responseMessage).build();
    if (LOG.isTraceEnabled()) {
      LOG.trace(Thread.currentThread().getId() + ": Response <- " + remoteId+ ": "+ method.getName()+ " {"+ TextFormat.shortDebugString(returnMessage)+ "}");
    }
  }
 catch (  Throwable e) {
    throw new ServiceException(e);
  }
  return returnMessage;
}
