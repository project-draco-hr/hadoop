{
  long startTime=0;
  if (LOG.isDebugEnabled()) {
    startTime=Time.now();
  }
  if (args.length != 2) {
    throw new ServiceException("Too many parameters for request. Method: [" + method.getName() + "]"+ ", Expected: 2, Actual: "+ args.length);
  }
  if (args[1] == null) {
    throw new ServiceException("null param while calling Method: [" + method.getName() + "]");
  }
  Tracer tracer=Tracer.curThreadTracer();
  TraceScope traceScope=null;
  if (tracer != null) {
    traceScope=tracer.newScope(RpcClientUtil.methodToTraceString(method));
  }
  RequestHeaderProto rpcRequestHeader=constructRpcRequestHeader(method);
  if (LOG.isTraceEnabled()) {
    LOG.trace(Thread.currentThread().getId() + ": Call -> " + remoteId+ ": "+ method.getName()+ " {"+ TextFormat.shortDebugString((Message)args[1])+ "}");
  }
  Message theRequest=(Message)args[1];
  final RpcResponseWrapper val;
  try {
    val=(RpcResponseWrapper)client.call(RPC.RpcKind.RPC_PROTOCOL_BUFFER,new RpcRequestWrapper(rpcRequestHeader,theRequest),remoteId,fallbackToSimpleAuth);
  }
 catch (  Throwable e) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(Thread.currentThread().getId() + ": Exception <- " + remoteId+ ": "+ method.getName()+ " {"+ e+ "}");
    }
    if (traceScope != null) {
      traceScope.addTimelineAnnotation("Call got exception: " + e.toString());
    }
    throw new ServiceException(e);
  }
 finally {
    if (traceScope != null)     traceScope.close();
  }
  if (LOG.isDebugEnabled()) {
    long callTime=Time.now() - startTime;
    LOG.debug("Call: " + method.getName() + " took "+ callTime+ "ms");
  }
  if (Client.isAsynchronousMode()) {
    final AsyncGet<RpcResponseWrapper,IOException> arr=Client.getAsyncRpcResponse();
    final AsyncGet<Message,Exception> asyncGet=new AsyncGet<Message,Exception>(){
      @Override public Message get(      long timeout,      TimeUnit unit) throws Exception {
        return getReturnMessage(method,arr.get(timeout,unit));
      }
      @Override public boolean isDone(){
        return arr.isDone();
      }
    }
;
    ASYNC_RETURN_MESSAGE.set(asyncGet);
    return null;
  }
 else {
    return getReturnMessage(method,val);
  }
}
