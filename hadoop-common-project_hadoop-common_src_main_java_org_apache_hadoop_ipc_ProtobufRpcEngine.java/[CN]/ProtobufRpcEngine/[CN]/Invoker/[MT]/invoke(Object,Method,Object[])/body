{
  long startTime=0;
  if (LOG.isDebugEnabled()) {
    startTime=Time.now();
  }
  if (args.length != 2) {
    throw new ServiceException("Too many parameters for request. Method: [" + method.getName() + "]"+ ", Expected: 2, Actual: "+ args.length);
  }
  if (args[1] == null) {
    throw new ServiceException("null param while calling Method: [" + method.getName() + "]");
  }
  TraceScope traceScope=null;
  if (Trace.isTracing()) {
    traceScope=Trace.startSpan(RpcClientUtil.methodToTraceString(method));
  }
  RequestHeaderProto rpcRequestHeader=constructRpcRequestHeader(method);
  if (LOG.isTraceEnabled()) {
    LOG.trace(Thread.currentThread().getId() + ": Call -> " + remoteId+ ": "+ method.getName()+ " {"+ TextFormat.shortDebugString((Message)args[1])+ "}");
  }
  Message theRequest=(Message)args[1];
  final RpcResponseWrapper val;
  try {
    val=(RpcResponseWrapper)client.call(RPC.RpcKind.RPC_PROTOCOL_BUFFER,new RpcRequestWrapper(rpcRequestHeader,theRequest),remoteId,fallbackToSimpleAuth);
  }
 catch (  Throwable e) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(Thread.currentThread().getId() + ": Exception <- " + remoteId+ ": "+ method.getName()+ " {"+ e+ "}");
    }
    if (Trace.isTracing()) {
      traceScope.getSpan().addTimelineAnnotation("Call got exception: " + e.getMessage());
    }
    throw new ServiceException(e);
  }
 finally {
    if (traceScope != null)     traceScope.close();
  }
  if (LOG.isDebugEnabled()) {
    long callTime=Time.now() - startTime;
    LOG.debug("Call: " + method.getName() + " took "+ callTime+ "ms");
  }
  Message prototype=null;
  try {
    prototype=getReturnProtoType(method);
  }
 catch (  Exception e) {
    throw new ServiceException(e);
  }
  Message returnMessage;
  try {
    returnMessage=prototype.newBuilderForType().mergeFrom(val.theResponseRead).build();
    if (LOG.isTraceEnabled()) {
      LOG.trace(Thread.currentThread().getId() + ": Response <- " + remoteId+ ": "+ method.getName()+ " {"+ TextFormat.shortDebugString(returnMessage)+ "}");
    }
  }
 catch (  Throwable e) {
    throw new ServiceException(e);
  }
  return returnMessage;
}
