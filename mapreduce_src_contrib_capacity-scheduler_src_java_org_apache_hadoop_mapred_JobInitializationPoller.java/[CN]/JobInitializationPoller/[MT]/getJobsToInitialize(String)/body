{
  QueueInfo qi=jobQueues.get(queue);
  ArrayList<JobInProgress> jobsToInitialize=new ArrayList<JobInProgress>();
  int maximumUsersAllowedToInitialize;
  int maxJobsPerUserAllowedToInitialize;
synchronized (qi) {
    maximumUsersAllowedToInitialize=qi.maxUsersAllowedToInitialize;
    maxJobsPerUserAllowedToInitialize=qi.maxJobsPerUserToInitialize;
  }
  int maxJobsPerQueueToInitialize=maximumUsersAllowedToInitialize * maxJobsPerUserAllowedToInitialize;
  int countOfJobsInitialized=0;
  HashMap<String,Integer> userJobsInitialized=new HashMap<String,Integer>();
  Collection<JobInProgress> jobs=jobQueueManager.getJobQueue(queue).getWaitingJobs();
  for (  JobInProgress job : jobs) {
    String user=job.getProfile().getUser();
    int numberOfJobs=userJobsInitialized.get(user) == null ? 0 : userJobsInitialized.get(user);
    if (initializedJobs.containsKey(job.getJobID())) {
      userJobsInitialized.put(user,Integer.valueOf(numberOfJobs + 1));
      countOfJobsInitialized++;
      continue;
    }
    boolean isUserPresent=userJobsInitialized.containsKey(user);
    if (!isUserPresent && userJobsInitialized.size() < maximumUsersAllowedToInitialize) {
      userJobsInitialized.put(user,Integer.valueOf(numberOfJobs + 1));
      jobsToInitialize.add(job);
      initializedJobs.put(job.getJobID(),job);
      countOfJobsInitialized++;
    }
 else     if (isUserPresent && numberOfJobs < maxJobsPerUserAllowedToInitialize) {
      userJobsInitialized.put(user,Integer.valueOf(numberOfJobs + 1));
      jobsToInitialize.add(job);
      initializedJobs.put(job.getJobID(),job);
      countOfJobsInitialized++;
    }
    if (countOfJobsInitialized > maxJobsPerQueueToInitialize) {
      break;
    }
  }
  return jobsToInitialize;
}
