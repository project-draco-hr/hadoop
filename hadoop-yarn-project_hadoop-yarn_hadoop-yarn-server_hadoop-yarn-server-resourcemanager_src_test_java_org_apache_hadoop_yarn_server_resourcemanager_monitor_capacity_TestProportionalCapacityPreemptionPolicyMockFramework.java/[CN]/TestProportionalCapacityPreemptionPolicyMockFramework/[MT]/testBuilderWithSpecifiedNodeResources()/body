{
  String labelsConfig="=200,true;" + "red=100,false;" + "blue=200,true";
  String nodesConfig="n1=red res=100;" + "n2=blue;" + "n3= res=30";
  String queuesConfig="root(=[200 200 100 100 100],red=[100 100 100 100 90],blue=[200 200 200 200 80]);" + "-a(=[100 200 100 100 50],red=[0 0 0 0 40],blue=[200 200 200 200 30]);" + "--a1(=[50 100 50 100 40],red=[0 0 0 0 20],blue=[100 200 200 0]);"+ "--a2(=[50 200 50 0 10],red=[0 0 0 0 20],blue=[100 200 0 200]);"+ "-b(=[100 200 0 0],red=[100 100 100 100],blue=[0 0 0 0])";
  String appsConfig="a1\t" + "(1,1,n3,red,50,false);" + "a1\t"+ "(2,1,n2,,50,true)(2,1,n2,,50,false)"+ "(2,1,n2,blue,50,true)(2,1,n2,blue,50,true);"+ "a2\t"+ "(1,1,n3,red,50,false);"+ "b\t"+ "(1,1,n1,red,100,false);";
  buildEnv(labelsConfig,nodesConfig,queuesConfig,appsConfig);
  Assert.assertEquals(3,this.cs.getAllNodes().size());
  SchedulerNode node1=cs.getSchedulerNode(NodeId.newInstance("n1",1));
  Assert.assertEquals(100,node1.getTotalResource().getMemorySize());
  Assert.assertEquals(100,node1.getCopiedListOfRunningContainers().size());
  Assert.assertNull(node1.getReservedContainer());
  SchedulerNode node2=cs.getSchedulerNode(NodeId.newInstance("n2",1));
  Assert.assertEquals(0,node2.getTotalResource().getMemorySize());
  Assert.assertEquals(50,node2.getCopiedListOfRunningContainers().size());
  Assert.assertNotNull(node2.getReservedContainer());
  SchedulerNode node3=cs.getSchedulerNode(NodeId.newInstance("n3",1));
  Assert.assertEquals(30,node3.getTotalResource().getMemorySize());
  Assert.assertEquals(100,node3.getCopiedListOfRunningContainers().size());
  Assert.assertNull(node3.getReservedContainer());
}
