{
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
  a.setMaxCapacity(1.0f);
  final String user_0="user_0";
  final String user_1="user_1";
  final String user_2="user_2";
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,a.getActiveUsersManager(),spyRMContext);
  a.submitApplicationAttempt(app_0,user_0);
  final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
  FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,a,a.getActiveUsersManager(),spyRMContext);
  a.submitApplicationAttempt(app_1,user_0);
  final ApplicationAttemptId appAttemptId_2=TestUtils.getMockApplicationAttemptId(2,0);
  FiCaSchedulerApp app_2=new FiCaSchedulerApp(appAttemptId_2,user_1,a,a.getActiveUsersManager(),spyRMContext);
  a.submitApplicationAttempt(app_2,user_1);
  final ApplicationAttemptId appAttemptId_3=TestUtils.getMockApplicationAttemptId(3,0);
  FiCaSchedulerApp app_3=new FiCaSchedulerApp(appAttemptId_3,user_2,a,a.getActiveUsersManager(),spyRMContext);
  a.submitApplicationAttempt(app_3,user_2);
  String host_0="127.0.0.1";
  FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
  final int numNodes=1;
  Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  Priority priority=TestUtils.createMockPriority(1);
  app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,10,true,priority,recordFactory)));
  app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,10,true,priority,recordFactory)));
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource));
  assertEquals(1 * GB,a.getUsedResources().getMemory());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource));
  assertEquals(2 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  a.setUserLimit(25);
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource));
  assertEquals(2 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  app_2.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,3 * GB,1,true,priority,recordFactory)));
  app_3.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
  a.setUserLimitFactor(10);
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource));
  assertEquals(5 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(3 * GB,app_2.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_3.getCurrentConsumption().getMemory());
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource));
  assertEquals(6 * GB,a.getUsedResources().getMemory());
  assertEquals(3 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(3 * GB,app_2.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_3.getCurrentConsumption().getMemory());
  a.setMaxCapacity(0.5f);
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource));
  assertEquals(6 * GB,a.getUsedResources().getMemory());
  assertEquals(3 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(3 * GB,app_2.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_3.getCurrentConsumption().getMemory());
  a.setMaxCapacity(1.0f);
  a.setUserLimitFactor(1);
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource));
  assertEquals(7 * GB,a.getUsedResources().getMemory());
  assertEquals(3 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(3 * GB,app_2.getCurrentConsumption().getMemory());
  assertEquals(1 * GB,app_3.getCurrentConsumption().getMemory());
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource));
  assertEquals(8 * GB,a.getUsedResources().getMemory());
  assertEquals(3 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(3 * GB,app_2.getCurrentConsumption().getMemory());
  assertEquals(2 * GB,app_3.getCurrentConsumption().getMemory());
  for (  RMContainer rmContainer : app_0.getLiveContainers()) {
    a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
  }
  assertEquals(5 * GB,a.getUsedResources().getMemory());
  assertEquals(0 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(3 * GB,app_2.getCurrentConsumption().getMemory());
  assertEquals(2 * GB,app_3.getCurrentConsumption().getMemory());
  for (  RMContainer rmContainer : app_2.getLiveContainers()) {
    a.completedContainer(clusterResource,app_2,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
  }
  assertEquals(2 * GB,a.getUsedResources().getMemory());
  assertEquals(0 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_2.getCurrentConsumption().getMemory());
  assertEquals(2 * GB,app_3.getCurrentConsumption().getMemory());
  for (  RMContainer rmContainer : app_3.getLiveContainers()) {
    a.completedContainer(clusterResource,app_3,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
  }
  assertEquals(0 * GB,a.getUsedResources().getMemory());
  assertEquals(0 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_2.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_3.getCurrentConsumption().getMemory());
}
