{
  Resource res=Resource.newInstance(10 * 1024,10);
  CapacityScheduler scheduler=mock(CapacityScheduler.class);
  when(scheduler.getClusterResource()).thenReturn(res);
  when(scheduler.getResourceCalculator()).thenReturn(new DefaultResourceCalculator());
  ApplicationAttemptId appAttId=createAppAttemptId(0,0);
  RMContext rmContext=mock(RMContext.class);
  when(rmContext.getEpoch()).thenReturn(3L);
  when(rmContext.getScheduler()).thenReturn(scheduler);
  when(rmContext.getRMApps()).thenReturn(new ConcurrentHashMap<ApplicationId,RMApp>());
  RMNodeLabelsManager nlm=mock(RMNodeLabelsManager.class);
  when(nlm.getResourceByLabel(any(),any())).thenReturn(res);
  when(rmContext.getNodeLabelManager()).thenReturn(nlm);
  Queue queue=createQueue("test",null,1.0f,1.0f);
  final String user="user1";
  FiCaSchedulerApp app=new FiCaSchedulerApp(appAttId,user,queue,queue.getActiveUsersManager(),rmContext);
  Resource requestedResource=Resource.newInstance(1536,2);
  app.getAppAttemptResourceUsage().incUsed(requestedResource);
  assertEquals(15.0f,app.getResourceUsageReport().getQueueUsagePercentage(),0.01f);
  assertEquals(15.0f,app.getResourceUsageReport().getClusterUsagePercentage(),0.01f);
  queue=createQueue("test2",null,0.5f,0.5f);
  app=new FiCaSchedulerApp(appAttId,user,queue,queue.getActiveUsersManager(),rmContext);
  app.getAppAttemptResourceUsage().incUsed(requestedResource);
  assertEquals(30.0f,app.getResourceUsageReport().getQueueUsagePercentage(),0.01f);
  assertEquals(15.0f,app.getResourceUsageReport().getClusterUsagePercentage(),0.01f);
  AbstractCSQueue qChild=createQueue("test2.1",queue,0.5f,0.25f);
  app=new FiCaSchedulerApp(appAttId,user,qChild,qChild.getActiveUsersManager(),rmContext);
  app.getAppAttemptResourceUsage().incUsed(requestedResource);
  assertEquals(60.0f,app.getResourceUsageReport().getQueueUsagePercentage(),0.01f);
  assertEquals(15.0f,app.getResourceUsageReport().getClusterUsagePercentage(),0.01f);
}
