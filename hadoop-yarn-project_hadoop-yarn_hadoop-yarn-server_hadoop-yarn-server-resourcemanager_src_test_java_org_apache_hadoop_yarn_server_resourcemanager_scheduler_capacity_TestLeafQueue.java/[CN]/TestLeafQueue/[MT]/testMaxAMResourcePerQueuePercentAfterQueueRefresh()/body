{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  Resource clusterResource=Resources.createResource(100 * 16 * GB,100 * 32);
  CapacitySchedulerContext csContext=mockCSContext(csConf,clusterResource);
  when(csContext.getRMContext()).thenReturn(rmContext);
  csConf.setFloat(CapacitySchedulerConfiguration.MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT,0.1f);
  ParentQueue root=new ParentQueue(csContext,CapacitySchedulerConfiguration.ROOT,null,null);
  csConf.setCapacity(CapacitySchedulerConfiguration.ROOT + "." + A,80);
  LeafQueue a=new LeafQueue(csContext,A,root,null);
  assertEquals(0.1f,a.getMaxAMResourcePerQueuePercent(),1e-3f);
  assertEquals(160,a.getMaximumActiveApplications());
  csConf.setFloat(CapacitySchedulerConfiguration.MAXIMUM_APPLICATION_MASTERS_RESOURCE_PERCENT,0.2f);
  LeafQueue newA=new LeafQueue(csContext,A,root,null);
  a.reinitialize(newA,clusterResource);
  assertEquals(0.2f,a.getMaxAMResourcePerQueuePercent(),1e-3f);
  assertEquals(320,a.getMaximumActiveApplications());
  Resource newClusterResource=Resources.createResource(100 * 20 * GB,100 * 32);
  a.updateClusterResource(newClusterResource);
  assertEquals(400,a.getMaximumActiveApplications());
}
