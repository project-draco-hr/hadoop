{
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
  a.setMaxCapacity(1.0f);
  final String user_0="user_0";
  final String user_1="user_1";
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
  a.submitApplicationAttempt(app_0,user_0);
  final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
  FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_1,a,mock(ActiveUsersManager.class),spyRMContext);
  a.submitApplicationAttempt(app_1,user_1);
  String host_0="127.0.0.1";
  FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,4 * GB);
  final int numNodes=2;
  Resource clusterResource=Resources.createResource(numNodes * (4 * GB),numNodes * 16);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  Priority priority=TestUtils.createMockPriority(1);
  app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
  app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,4 * GB,1,true,priority,recordFactory)));
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(1 * GB,a.getUsedResources().getMemorySize());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(1 * GB,a.getMetrics().getAllocatedMB());
  assertEquals(0 * GB,a.getMetrics().getAvailableMB());
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(2 * GB,a.getUsedResources().getMemorySize());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(2 * GB,a.getMetrics().getAllocatedMB());
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(6 * GB,a.getUsedResources().getMemorySize());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(4 * GB,app_1.getCurrentReservation().getMemorySize());
  assertEquals(2 * GB,node_0.getAllocatedResource().getMemorySize());
  assertEquals(4 * GB,a.getMetrics().getReservedMB());
  assertEquals(2 * GB,a.getMetrics().getAllocatedMB());
  RMContainer rmContainer=app_0.getLiveContainers().iterator().next();
  a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(5 * GB,a.getUsedResources().getMemorySize());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(4 * GB,app_1.getCurrentReservation().getMemorySize());
  assertEquals(1 * GB,node_0.getAllocatedResource().getMemorySize());
  assertEquals(4 * GB,a.getMetrics().getReservedMB());
  assertEquals(1 * GB,a.getMetrics().getAllocatedMB());
  rmContainer=app_0.getLiveContainers().iterator().next();
  a.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(4 * GB,a.getUsedResources().getMemorySize());
  assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(4 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentReservation().getMemorySize());
  assertEquals(4 * GB,node_0.getAllocatedResource().getMemorySize());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(4 * GB,a.getMetrics().getAllocatedMB());
}
