{
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
  a.setMaxCapacity(1.0f);
  a.setUserLimitFactor(10);
  final String user_0="user_0";
  final String user_1="user_1";
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),rmContext);
  a.submitApplication(app_0,user_0,A);
  final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
  FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_1,a,mock(ActiveUsersManager.class),rmContext);
  a.submitApplication(app_1,user_1,A);
  String host_0="127.0.0.1";
  FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,4 * GB);
  String host_1="127.0.0.2";
  FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,DEFAULT_RACK,0,4 * GB);
  final int numNodes=3;
  Resource clusterResource=Resources.createResource(numNodes * (4 * GB),numNodes * 16);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(4 * GB,16));
  when(a.getMaximumAllocation()).thenReturn(Resources.createResource(4 * GB,16));
  when(a.getMinimumAllocationFactor()).thenReturn(0.25f);
  Priority priority=TestUtils.createMockPriority(1);
  app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)),null,null);
  app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,4 * GB,1,true,priority,recordFactory)),null,null);
  a.assignContainers(clusterResource,node_0);
  assertEquals(1 * GB,a.getUsedResources().getMemory());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  a.assignContainers(clusterResource,node_0);
  assertEquals(2 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  a.assignContainers(clusterResource,node_0);
  assertEquals(6 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentReservation().getMemory());
  assertEquals(2 * GB,node_0.getUsedResource().getMemory());
  a.completedContainer(clusterResource,app_0,node_0,app_0.getLiveContainers().iterator().next(),null,RMContainerEventType.KILL,null);
  a.assignContainers(clusterResource,node_0);
  assertEquals(5 * GB,a.getUsedResources().getMemory());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentReservation().getMemory());
  assertEquals(1 * GB,node_0.getUsedResource().getMemory());
  assertEquals(1,app_1.getReReservations(priority));
  a.assignContainers(clusterResource,node_0);
  assertEquals(5 * GB,a.getUsedResources().getMemory());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentReservation().getMemory());
  assertEquals(1 * GB,node_0.getUsedResource().getMemory());
  assertEquals(2,app_1.getReReservations(priority));
  a.assignContainers(clusterResource,node_1);
  assertEquals(9 * GB,a.getUsedResources().getMemory());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentReservation().getMemory());
  assertEquals(4 * GB,node_1.getUsedResource().getMemory());
  assertEquals(2,app_1.getReReservations(priority));
  a.completedContainer(clusterResource,app_0,node_0,app_0.getLiveContainers().iterator().next(),null,RMContainerEventType.KILL,null);
  CSAssignment assignment=a.assignContainers(clusterResource,node_0);
  assertEquals(8 * GB,a.getUsedResources().getMemory());
  assertEquals(0 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentReservation().getMemory());
  assertEquals(0 * GB,node_0.getUsedResource().getMemory());
  assertEquals(4 * GB,assignment.getExcessReservation().getContainer().getResource().getMemory());
}
