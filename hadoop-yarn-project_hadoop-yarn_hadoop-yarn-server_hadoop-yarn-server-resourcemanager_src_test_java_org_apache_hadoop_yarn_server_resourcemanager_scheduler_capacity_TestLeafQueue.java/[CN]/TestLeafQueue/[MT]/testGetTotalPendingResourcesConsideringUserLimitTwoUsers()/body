{
  LeafQueue e=stubLeafQueue((LeafQueue)queues.get(E));
  e.setMaxCapacity(1.0f);
  e.setUserLimit(1000);
  final String user_0="user_0";
  final String user_1="user_1";
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,e,mock(ActiveUsersManager.class),spyRMContext);
  e.submitApplicationAttempt(app_0,user_0);
  final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
  FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_0,e,mock(ActiveUsersManager.class),spyRMContext);
  e.submitApplicationAttempt(app_1,user_0);
  final ApplicationAttemptId appAttemptId_2=TestUtils.getMockApplicationAttemptId(2,0);
  FiCaSchedulerApp app_2=new FiCaSchedulerApp(appAttemptId_2,user_1,e,mock(ActiveUsersManager.class),spyRMContext);
  e.submitApplicationAttempt(app_2,user_1);
  final ApplicationAttemptId appAttemptId_3=TestUtils.getMockApplicationAttemptId(3,0);
  FiCaSchedulerApp app_3=new FiCaSchedulerApp(appAttemptId_3,user_1,e,mock(ActiveUsersManager.class),spyRMContext);
  e.submitApplicationAttempt(app_3,user_1);
  String host_0="127.0.0.1";
  FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,100 * GB);
  final int numNodes=1;
  Resource clusterResource=Resources.createResource(numNodes * (100 * GB),numNodes * 128);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  Priority priority=TestUtils.createMockPriority(1);
  app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory)));
  app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
  priority=TestUtils.createMockPriority(1);
  app_2.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority,recordFactory)));
  app_3.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory)));
  assertEquals(2 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,RMNodeLabelsManager.NO_LABEL).getMemorySize());
  assertEquals(0 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_2.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
  e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(1 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,RMNodeLabelsManager.NO_LABEL).getMemorySize());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_2.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
  e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(1 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,RMNodeLabelsManager.NO_LABEL).getMemorySize());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_2.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
  e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,RMNodeLabelsManager.NO_LABEL).getMemorySize());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(1 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(1 * GB,app_2.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
  e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,RMNodeLabelsManager.NO_LABEL).getMemorySize());
  long app_0_consumption=app_0.getCurrentConsumption().getMemorySize();
  assertEquals(1 * GB,app_0_consumption);
  long app_1_consumption=app_1.getCurrentConsumption().getMemorySize();
  assertEquals(1 * GB,app_1_consumption);
  long app_2_consumption=app_2.getCurrentConsumption().getMemorySize();
  assertEquals(2 * GB,app_2_consumption);
  long app_3_consumption=app_3.getCurrentConsumption().getMemorySize();
  assertEquals(0 * GB,app_3_consumption);
  e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,RMNodeLabelsManager.NO_LABEL).getMemorySize());
  assertEquals(app_0_consumption,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(app_1_consumption,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(app_2_consumption,app_2.getCurrentConsumption().getMemorySize());
  assertEquals(app_3_consumption,app_3.getCurrentConsumption().getMemorySize());
  e.setUserLimitFactor(10.0f);
  e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(1 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,RMNodeLabelsManager.NO_LABEL).getMemorySize());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(2 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(2 * GB,app_2.getCurrentConsumption().getMemorySize());
  assertEquals(0 * GB,app_3.getCurrentConsumption().getMemorySize());
  e.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(0 * GB,e.getTotalPendingResourcesConsideringUserLimit(clusterResource,RMNodeLabelsManager.NO_LABEL).getMemorySize());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemorySize());
  assertEquals(2 * GB,app_1.getCurrentConsumption().getMemorySize());
  assertEquals(2 * GB,app_2.getCurrentConsumption().getMemorySize());
  assertEquals(1 * GB,app_3.getCurrentConsumption().getMemorySize());
  for (  RMContainer rmContainer : app_0.getLiveContainers()) {
    e.completedContainer(clusterResource,app_0,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
  }
  for (  RMContainer rmContainer : app_1.getLiveContainers()) {
    e.completedContainer(clusterResource,app_1,node_0,rmContainer,ContainerStatus.newInstance(rmContainer.getContainerId(),ContainerState.COMPLETE,"",ContainerExitStatus.KILLED_BY_RESOURCEMANAGER),RMContainerEventType.KILL,null,true);
  }
}
