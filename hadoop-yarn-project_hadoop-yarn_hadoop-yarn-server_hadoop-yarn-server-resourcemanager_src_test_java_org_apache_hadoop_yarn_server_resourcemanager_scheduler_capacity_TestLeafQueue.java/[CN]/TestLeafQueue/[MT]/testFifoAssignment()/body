{
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
  a.setOrderingPolicy(new FifoOrderingPolicy<FiCaSchedulerApp>());
  String host_0_0="127.0.0.1";
  String rack_0="rack_0";
  FiCaSchedulerNode node_0_0=TestUtils.getMockNode(host_0_0,rack_0,0,16 * GB);
  final int numNodes=4;
  Resource clusterResource=Resources.createResource(numNodes * (16 * GB),numNodes * 16);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  String user_0="user_0";
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0=spy(new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext));
  a.submitApplicationAttempt(app_0,user_0);
  final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
  FiCaSchedulerApp app_1=spy(new FiCaSchedulerApp(appAttemptId_1,user_0,a,mock(ActiveUsersManager.class),spyRMContext));
  a.submitApplicationAttempt(app_1,user_0);
  Priority priority=TestUtils.createMockPriority(1);
  List<ResourceRequest> app_0_requests_0=new ArrayList<ResourceRequest>();
  List<ResourceRequest> app_1_requests_0=new ArrayList<ResourceRequest>();
  app_0_requests_0.clear();
  app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,priority,recordFactory));
  app_0.updateResourceRequests(app_0_requests_0);
  app_1_requests_0.clear();
  app_1_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
  app_1.updateResourceRequests(app_1_requests_0);
  a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  Assert.assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  Assert.assertEquals(1 * GB,app_1.getCurrentConsumption().getMemory());
  app_0_requests_0.clear();
  app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
  app_0.updateResourceRequests(app_0_requests_0);
  app_1_requests_0.clear();
  app_1_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
  app_1.updateResourceRequests(app_1_requests_0);
  a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  Assert.assertEquals(3 * GB,app_0.getCurrentConsumption().getMemory());
  Assert.assertEquals(1 * GB,app_1.getCurrentConsumption().getMemory());
  a.assignContainers(clusterResource,node_0_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  Assert.assertEquals(2 * GB,app_1.getCurrentConsumption().getMemory());
}
