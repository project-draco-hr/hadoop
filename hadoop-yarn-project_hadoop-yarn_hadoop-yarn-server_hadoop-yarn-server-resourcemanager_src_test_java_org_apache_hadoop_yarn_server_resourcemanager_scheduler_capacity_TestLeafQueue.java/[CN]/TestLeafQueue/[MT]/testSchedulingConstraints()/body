{
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
  String user_0="user_0";
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0=spy(new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext));
  a.submitApplicationAttempt(app_0,user_0);
  String host_0_0="127.0.0.1";
  String rack_0="rack_0";
  FiCaSchedulerNode node_0_0=TestUtils.getMockNode(host_0_0,rack_0,0,8 * GB);
  String host_0_1="127.0.0.2";
  FiCaSchedulerNode node_0_1=TestUtils.getMockNode(host_0_1,rack_0,0,8 * GB);
  String host_1_0="127.0.0.3";
  String rack_1="rack_1";
  FiCaSchedulerNode node_1_0=TestUtils.getMockNode(host_1_0,rack_1,0,8 * GB);
  final int numNodes=3;
  Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  Priority priority=TestUtils.createMockPriority(1);
  List<ResourceRequest> app_0_requests_0=new ArrayList<ResourceRequest>();
  app_0_requests_0.add(TestUtils.createResourceRequest(host_0_0,1 * GB,1,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(host_0_1,1 * GB,1,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(rack_0,1 * GB,1,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(host_1_0,1 * GB,1,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,1,true,priority,recordFactory));
  app_0.updateResourceRequests(app_0_requests_0);
  app_0_requests_0.clear();
  app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
  app_0.updateResourceRequests(app_0_requests_0);
  a.assignContainers(clusterResource,node_0_0,false);
  verify(app_0).allocate(eq(NodeType.NODE_LOCAL),eq(node_0_0),any(Priority.class),any(ResourceRequest.class),any(Container.class));
  assertEquals(0,app_0.getSchedulingOpportunities(priority));
  assertEquals(0,app_0.getTotalRequiredResources(priority));
  a.assignContainers(clusterResource,node_1_0,false);
  verify(app_0,never()).allocate(any(NodeType.class),eq(node_1_0),any(Priority.class),any(ResourceRequest.class),any(Container.class));
  assertEquals(0,app_0.getSchedulingOpportunities(priority));
  assertEquals(0,app_0.getTotalRequiredResources(priority));
  app_0_requests_0.clear();
  app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory));
  app_0.updateResourceRequests(app_0_requests_0);
  a.assignContainers(clusterResource,node_0_1,false);
  verify(app_0,never()).allocate(any(NodeType.class),eq(node_1_0),any(Priority.class),any(ResourceRequest.class),any(Container.class));
  assertEquals(1,app_0.getSchedulingOpportunities(priority));
  assertEquals(1,app_0.getTotalRequiredResources(priority));
  a.assignContainers(clusterResource,node_1_0,false);
  verify(app_0).allocate(eq(NodeType.NODE_LOCAL),eq(node_1_0),any(Priority.class),any(ResourceRequest.class),any(Container.class));
  assertEquals(0,app_0.getSchedulingOpportunities(priority));
  assertEquals(0,app_0.getTotalRequiredResources(priority));
}
