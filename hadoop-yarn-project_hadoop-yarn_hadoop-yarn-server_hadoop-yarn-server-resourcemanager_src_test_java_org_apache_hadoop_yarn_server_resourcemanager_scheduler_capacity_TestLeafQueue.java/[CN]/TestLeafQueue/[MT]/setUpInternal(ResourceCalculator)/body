{
  CapacityScheduler spyCs=new CapacityScheduler();
  queues=new HashMap<String,CSQueue>();
  cs=spy(spyCs);
  rmContext=TestUtils.getMockRMContext();
  spyRMContext=spy(rmContext);
  ConcurrentMap<ApplicationId,RMApp> spyApps=spy(new ConcurrentHashMap<ApplicationId,RMApp>());
  RMApp rmApp=mock(RMApp.class);
  when(rmApp.getRMAppAttempt((ApplicationAttemptId)Matchers.any())).thenReturn(null);
  amResourceRequest=mock(ResourceRequest.class);
  when(amResourceRequest.getCapability()).thenReturn(Resources.createResource(0,0));
  when(rmApp.getAMResourceRequest()).thenReturn(amResourceRequest);
  Mockito.doReturn(rmApp).when(spyApps).get((ApplicationId)Matchers.any());
  when(spyRMContext.getRMApps()).thenReturn(spyApps);
  csConf=new CapacitySchedulerConfiguration();
  csConf.setBoolean("yarn.scheduler.capacity.user-metrics.enable",true);
  csConf.setBoolean("yarn.scheduler.capacity.reservations-continue-look-all-nodes",false);
  final String newRoot="root" + System.currentTimeMillis();
  setupQueueConfiguration(csConf,newRoot);
  YarnConfiguration conf=new YarnConfiguration();
  cs.setConf(conf);
  csContext=mock(CapacitySchedulerContext.class);
  when(csContext.getConfiguration()).thenReturn(csConf);
  when(csContext.getConf()).thenReturn(conf);
  when(csContext.getMinimumResourceCapability()).thenReturn(Resources.createResource(GB,1));
  when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(16 * GB,32));
  when(csContext.getClusterResource()).thenReturn(Resources.createResource(100 * 16 * GB,100 * 32));
  when(csContext.getNonPartitionedQueueComparator()).thenReturn(CapacityScheduler.nonPartitionedQueueComparator);
  when(csContext.getResourceCalculator()).thenReturn(resourceCalculator);
  when(csContext.getPreemptionManager()).thenReturn(new PreemptionManager());
  when(csContext.getResourceCalculator()).thenReturn(rC);
  when(csContext.getRMContext()).thenReturn(rmContext);
  RMContainerTokenSecretManager containerTokenSecretManager=new RMContainerTokenSecretManager(conf);
  containerTokenSecretManager.rollMasterKey();
  when(csContext.getContainerTokenSecretManager()).thenReturn(containerTokenSecretManager);
  root=CapacityScheduler.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,queues,queues,TestUtils.spyHook);
  ResourceUsage queueResUsage=root.getQueueResourceUsage();
  when(csContext.getClusterResourceUsage()).thenReturn(queueResUsage);
  cs.setRMContext(spyRMContext);
  cs.init(csConf);
  cs.start();
  when(spyRMContext.getScheduler()).thenReturn(cs);
  when(spyRMContext.getYarnConfiguration()).thenReturn(new YarnConfiguration());
  when(cs.getNumClusterNodes()).thenReturn(3);
}
