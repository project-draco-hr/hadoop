{
  CSAssignment assign;
  setUpWithDominantResourceCalculator();
  LeafQueue b=stubLeafQueue((LeafQueue)queues.get(E));
  final String user0="user_0";
  final ApplicationAttemptId appAttemptId0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app0=new FiCaSchedulerApp(appAttemptId0,user0,b,b.getActiveUsersManager(),spyRMContext);
  b.submitApplicationAttempt(app0,user0);
  String host0="127.0.0.1";
  FiCaSchedulerNode node0=TestUtils.getMockNode(host0,DEFAULT_RACK,0,80 * GB,100);
  int numNodes=1000;
  Resource clusterResource=Resources.createResource(numNodes * (80 * GB),numNodes * 100);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  b.setUserLimit(50);
  b.setUserLimitFactor(1000000);
  b.setMaxCapacity(1.0f);
  b.setAbsoluteCapacity(0.00001f);
  Priority priority=TestUtils.createMockPriority(1);
  app0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,20 * GB,29,1,true,priority,recordFactory,RMNodeLabelsManager.NO_LABEL)));
  assign=b.assignContainers(clusterResource,node0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  app0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,10 * GB,29,2,true,priority,recordFactory,RMNodeLabelsManager.NO_LABEL)));
  assign=b.assignContainers(clusterResource,node0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertTrue("Still within limits, should assign",assign.getResource().getMemorySize() > 0);
}
