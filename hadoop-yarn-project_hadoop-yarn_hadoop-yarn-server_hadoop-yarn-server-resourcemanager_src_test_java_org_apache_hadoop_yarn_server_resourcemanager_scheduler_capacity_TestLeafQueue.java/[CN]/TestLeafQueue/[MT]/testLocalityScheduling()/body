{
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(B));
  String user_0="user_0";
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
  a.submitApplicationAttempt(app_0,user_0);
  String host_0="127.0.0.1";
  String rack_0="rack_0";
  FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,rack_0,0,8 * GB);
  String host_1="127.0.0.2";
  String rack_1="rack_1";
  FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,rack_1,0,8 * GB);
  String host_2="127.0.0.3";
  String rack_2="rack_2";
  FiCaSchedulerNode node_2=TestUtils.getMockNode(host_2,rack_2,0,8 * GB);
  final int numNodes=3;
  Resource clusterResource=Resources.createResource(numNodes * (8 * GB),numNodes * 16);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  Priority priority=TestUtils.createMockPriority(1);
  List<ResourceRequest> app_0_requests_0=new ArrayList<ResourceRequest>();
  app_0_requests_0.add(TestUtils.createResourceRequest(host_0,1 * GB,1,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(rack_0,1 * GB,1,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(host_1,1 * GB,1,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,1,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,3,true,priority,recordFactory));
  app_0.updateResourceRequests(app_0_requests_0);
  CSAssignment assignment=null;
  SchedulerRequestKey schedulerKey=toSchedulerKey(priority);
  assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  verifyNoContainerAllocated(assignment);
  assertEquals(1,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(3,app_0.getTotalRequiredResources(schedulerKey));
  assertEquals(NodeType.NODE_LOCAL,assignment.getType());
  assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  verifyNoContainerAllocated(assignment);
  assertEquals(2,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(3,app_0.getTotalRequiredResources(schedulerKey));
  assertEquals(NodeType.NODE_LOCAL,assignment.getType());
  assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  verifyNoContainerAllocated(assignment);
  assertEquals(3,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(3,app_0.getTotalRequiredResources(schedulerKey));
  assertEquals(NodeType.NODE_LOCAL,assignment.getType());
  assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  verifyContainerAllocated(assignment,NodeType.OFF_SWITCH);
  assertEquals(4,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(2,app_0.getTotalRequiredResources(schedulerKey));
  assignment=a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  verifyContainerAllocated(assignment,NodeType.NODE_LOCAL);
  assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(1,app_0.getTotalRequiredResources(schedulerKey));
  assignment=a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  verifyContainerAllocated(assignment,NodeType.NODE_LOCAL);
  assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(0,app_0.getTotalRequiredResources(schedulerKey));
  assertEquals(NodeType.NODE_LOCAL,assignment.getType());
  app_0_requests_0.clear();
  app_0_requests_0.add(TestUtils.createResourceRequest(host_1,1 * GB,1,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(rack_1,1 * GB,3,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,4,true,priority,recordFactory));
  app_0.updateResourceRequests(app_0_requests_0);
  assertEquals(4,app_0.getTotalRequiredResources(schedulerKey));
  String host_3="127.0.0.4";
  FiCaSchedulerNode node_3=TestUtils.getMockNode(host_3,rack_1,0,8 * GB);
  doReturn(true).when(a).getRackLocalityFullReset();
  doReturn(1).when(a).getNodeLocalityDelay();
  assignment=a.assignContainers(clusterResource,node_3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(1,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(4,app_0.getTotalRequiredResources(schedulerKey));
  assignment=a.assignContainers(clusterResource,node_3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  verifyContainerAllocated(assignment,NodeType.RACK_LOCAL);
  assertEquals(0,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(3,app_0.getTotalRequiredResources(schedulerKey));
  assignment=a.assignContainers(clusterResource,node_3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(1,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(3,app_0.getTotalRequiredResources(schedulerKey));
  doReturn(false).when(a).getRackLocalityFullReset();
  assignment=a.assignContainers(clusterResource,node_3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  verifyContainerAllocated(assignment,NodeType.RACK_LOCAL);
  assertEquals(2,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(2,app_0.getTotalRequiredResources(schedulerKey));
  assignment=a.assignContainers(clusterResource,node_3,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  verifyContainerAllocated(assignment,NodeType.RACK_LOCAL);
  assertEquals(3,app_0.getSchedulingOpportunities(schedulerKey));
  assertEquals(1,app_0.getTotalRequiredResources(schedulerKey));
  app_0.resetSchedulingOpportunities(schedulerKey);
  app_0_requests_0.clear();
  app_0_requests_0.add(TestUtils.createResourceRequest(host_0,1 * GB,100,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(rack_0,1 * GB,100,true,priority,recordFactory));
  app_0_requests_0.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,100,true,priority,recordFactory));
  app_0.updateResourceRequests(app_0_requests_0);
  for (int i=0; i < numNodes; i++) {
    assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    verifyNoContainerAllocated(assignment);
    assertEquals(i + 1,app_0.getSchedulingOpportunities(schedulerKey));
  }
  assignment=a.assignContainers(clusterResource,node_2,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  verifyContainerAllocated(assignment,NodeType.OFF_SWITCH);
  assertEquals(numNodes + 1,app_0.getSchedulingOpportunities(schedulerKey));
}
