{
  if (queueNode == null) {
    return null;
  }
  String name="";
  Queue newQueue=new Queue();
  Map<String,AccessControlList> acls=new HashMap<String,AccessControlList>();
  NodeList fields=queueNode.getChildNodes();
  validate(queueNode);
  List<Element> subQueues=new ArrayList<Element>();
  String submitKey="";
  String adminKey="";
  for (int j=0; j < fields.getLength(); j++) {
    Node fieldNode=fields.item(j);
    if (!(fieldNode instanceof Element)) {
      continue;
    }
    Element field=(Element)fieldNode;
    if (QUEUE_NAME_TAG.equals(field.getTagName())) {
      String nameValue=field.getTextContent();
      if (field.getTextContent() == null || field.getTextContent().trim().equals("") || field.getTextContent().contains(NAME_SEPARATOR)) {
        throw new RuntimeException("Improper queue name : " + nameValue);
      }
      if (!parent.equals("")) {
        name+=parent + NAME_SEPARATOR;
      }
      name+=nameValue;
      newQueue.setName(name);
      submitKey=toFullPropertyName(name,QueueACL.SUBMIT_JOB.getAclName());
      adminKey=toFullPropertyName(name,QueueACL.ADMINISTER_JOBS.getAclName());
    }
    if (QUEUE_TAG.equals(field.getTagName()) && field.hasChildNodes()) {
      subQueues.add(field);
    }
    if (isAclsEnabled()) {
      if (ACL_SUBMIT_JOB_TAG.equals(field.getTagName())) {
        acls.put(submitKey,new AccessControlList(field.getTextContent()));
      }
      if (ACL_ADMINISTER_JOB_TAG.equals(field.getTagName())) {
        acls.put(adminKey,new AccessControlList(field.getTextContent()));
      }
    }
    if (PROPERTIES_TAG.equals(field.getTagName())) {
      Properties properties=populateProperties(field);
      newQueue.setProperties(properties);
    }
    if (STATE_TAG.equals(field.getTagName())) {
      String state=field.getTextContent();
      newQueue.setState(QueueState.getState(state));
    }
  }
  if (!acls.containsKey(submitKey)) {
    acls.put(submitKey,new AccessControlList(" "));
  }
  if (!acls.containsKey(adminKey)) {
    acls.put(adminKey,new AccessControlList(" "));
  }
  newQueue.setAcls(acls);
  for (  Element field : subQueues) {
    newQueue.addChild(createHierarchy(newQueue.getName(),field));
  }
  return newQueue;
}
