{
  JobConf conf=new JobConf();
  RecordReader<FloatWritable,NullWritable> rReader=new Reader();
  File fCommand=getFileCommand("org.apache.hadoop.mapred.pipes.PipeApplicationStub");
  TestTaskReporter reporter=new TestTaskReporter();
  File[] psw=cleanTokenPasswordFile();
  try {
    conf.set(MRJobConfig.TASK_ATTEMPT_ID,taskName);
    conf.set(MRJobConfig.CACHE_LOCALFILES,fCommand.getAbsolutePath());
    Token<ApplicationTokenIdentifier> token=new Token<ApplicationTokenIdentifier>("user".getBytes(),"password".getBytes(),new Text("kind"),new Text("service"));
    TokenCache.setJobToken(token,conf.getCredentials());
    FakeCollector output=new FakeCollector(new Counters.Counter(),new Progress());
    FileSystem fs=new RawLocalFileSystem();
    fs.setConf(conf);
    Writer<IntWritable,Text> wr=new Writer<IntWritable,Text>(conf,fs,new Path(workSpace.getAbsolutePath() + File.separator + "outfile"),IntWritable.class,Text.class,null,null);
    output.setWriter(wr);
    conf.set(Submitter.PRESERVE_COMMANDFILE,"true");
    Application<WritableComparable<IntWritable>,Writable,IntWritable,Text> application=new Application<WritableComparable<IntWritable>,Writable,IntWritable,Text>(conf,rReader,output,reporter,IntWritable.class,Text.class);
    application.getDownlink().flush();
    application.getDownlink().mapItem(new IntWritable(3),new Text("txt"));
    application.getDownlink().flush();
    application.waitForFinish();
    wr.close();
    String stdOut=readStdOut(conf);
    assertTrue(stdOut.contains("key:3"));
    assertTrue(stdOut.contains("value:txt"));
    assertEquals(1.0,reporter.getProgress(),0.01);
    assertNotNull(reporter.getCounter("group","name"));
    assertEquals(reporter.getStatus(),"PROGRESS");
    stdOut=readFile(new File(workSpace.getAbsolutePath() + File.separator + "outfile"));
    assertEquals(0.55f,rReader.getProgress(),0.001);
    application.getDownlink().close();
    Entry<IntWritable,Text> entry=output.getCollect().entrySet().iterator().next();
    assertEquals(123,entry.getKey().get());
    assertEquals("value",entry.getValue().toString());
    try {
      application.abort(new Throwable());
      fail();
    }
 catch (    IOException e) {
      assertEquals("pipe child exception",e.getMessage());
    }
  }
  finally {
    if (psw != null) {
      for (      File file : psw) {
        file.deleteOnExit();
      }
    }
  }
}
