{
  JobConf conf=new JobConf();
  File[] psw=cleanTokenPasswordFile();
  System.setProperty("test.build.data","target/tmp/build/TEST_SUBMITTER_MAPPER/data");
  conf.set("hadoop.log.dir","target/tmp");
  Submitter.setIsJavaMapper(conf,false);
  Submitter.setIsJavaReducer(conf,false);
  Submitter.setKeepCommandFile(conf,false);
  Submitter.setIsJavaRecordReader(conf,false);
  Submitter.setIsJavaRecordWriter(conf,false);
  PipesPartitioner<IntWritable,Text> partitioner=new PipesPartitioner<IntWritable,Text>();
  partitioner.configure(conf);
  Submitter.setJavaPartitioner(conf,partitioner.getClass());
  assertEquals(PipesPartitioner.class,(Submitter.getJavaPartitioner(conf)));
  SecurityManager securityManager=System.getSecurityManager();
  PrintStream oldps=System.out;
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  ExitUtil.disableSystemExit();
  try {
    System.setOut(new PrintStream(out));
    Submitter.main(new String[0]);
    fail();
  }
 catch (  ExitUtil.ExitException e) {
    assertTrue(out.toString().contains(""));
    assertTrue(out.toString().contains("bin/hadoop pipes"));
    assertTrue(out.toString().contains("[-input <path>] // Input directory"));
    assertTrue(out.toString().contains("[-output <path>] // Output directory"));
    assertTrue(out.toString().contains("[-jar <jar file> // jar filename"));
    assertTrue(out.toString().contains("[-inputformat <class>] // InputFormat class"));
    assertTrue(out.toString().contains("[-map <class>] // Java Map class"));
    assertTrue(out.toString().contains("[-partitioner <class>] // Java Partitioner"));
    assertTrue(out.toString().contains("[-reduce <class>] // Java Reduce class"));
    assertTrue(out.toString().contains("[-writer <class>] // Java RecordWriter"));
    assertTrue(out.toString().contains("[-program <executable>] // executable URI"));
    assertTrue(out.toString().contains("[-reduces <num>] // number of reduces"));
    assertTrue(out.toString().contains("[-lazyOutput <true/false>] // createOutputLazily"));
    assertTrue(out.toString().contains("-conf <configuration file>     specify an application configuration file"));
    assertTrue(out.toString().contains("-D <property=value>            use value for given property"));
    assertTrue(out.toString().contains("-fs <local|namenode:port>      specify a namenode"));
    assertTrue(out.toString().contains("-jt <local|resourcemanager:port>    specify a ResourceManager"));
    assertTrue(out.toString().contains("-files <comma separated list of files>    specify comma separated files to be copied to the map reduce cluster"));
    assertTrue(out.toString().contains("-libjars <comma separated list of jars>    specify comma separated jar files to include in the classpath."));
    assertTrue(out.toString().contains("-archives <comma separated list of archives>    specify comma separated archives to be unarchived on the compute machines."));
  }
 finally {
    System.setOut(oldps);
    System.setSecurityManager(securityManager);
    if (psw != null) {
      for (      File file : psw) {
        file.deleteOnExit();
      }
    }
  }
  try {
    File fCommand=getFileCommand(null);
    String[] args=new String[22];
    File input=new File(workSpace + File.separator + "input");
    if (!input.exists()) {
      Assert.assertTrue(input.createNewFile());
    }
    File outPut=new File(workSpace + File.separator + "output");
    FileUtil.fullyDelete(outPut);
    args[0]="-input";
    args[1]=input.getAbsolutePath();
    args[2]="-output";
    args[3]=outPut.getAbsolutePath();
    args[4]="-inputformat";
    args[5]="org.apache.hadoop.mapred.TextInputFormat";
    args[6]="-map";
    args[7]="org.apache.hadoop.mapred.lib.IdentityMapper";
    args[8]="-partitioner";
    args[9]="org.apache.hadoop.mapred.pipes.PipesPartitioner";
    args[10]="-reduce";
    args[11]="org.apache.hadoop.mapred.lib.IdentityReducer";
    args[12]="-writer";
    args[13]="org.apache.hadoop.mapred.TextOutputFormat";
    args[14]="-program";
    args[15]=fCommand.getAbsolutePath();
    args[16]="-reduces";
    args[17]="2";
    args[18]="-lazyOutput";
    args[19]="lazyOutput";
    args[20]="-jobconf";
    args[21]="mapreduce.pipes.isjavarecordwriter=false,mapreduce.pipes.isjavarecordreader=false";
    Submitter.main(args);
    fail();
  }
 catch (  ExitUtil.ExitException e) {
    assertEquals(e.status,0);
  }
 finally {
    System.setOut(oldps);
    System.setSecurityManager(securityManager);
  }
}
