{
  fs.delete(p,true);
  conf.setInt(TTConfig.TT_INDEX_CACHE,1);
  final int partsPerMap=1000;
  final int bytesPerFile=partsPerMap * 24;
  final IndexCache cache=new IndexCache(conf);
  final Path racy=new Path(p,"racyIndex");
  final String user=UserGroupInformation.getCurrentUser().getShortUserName();
  writeFile(fs,racy,bytesPerFile,partsPerMap);
  Thread[] getInfoThreads=new Thread[50];
  for (int i=0; i < 50; i++) {
    getInfoThreads[i]=new Thread(){
      @Override public void run(){
        try {
          cache.getIndexInformation("racyIndex",partsPerMap,racy,user);
          cache.removeMap("racyIndex");
        }
 catch (        Exception e) {
        }
      }
    }
;
  }
  for (int i=0; i < 50; i++) {
    getInfoThreads[i].start();
  }
  final Thread mainTestThread=Thread.currentThread();
  Thread timeoutThread=new Thread(){
    @Override public void run(){
      try {
        Thread.sleep(15000);
        mainTestThread.interrupt();
      }
 catch (      InterruptedException ie) {
      }
    }
  }
;
  for (int i=0; i < 50; i++) {
    try {
      getInfoThreads[i].join();
    }
 catch (    InterruptedException ie) {
      fail("Unexpectedly long delay during concurrent cache entry creations");
    }
  }
  timeoutThread.interrupt();
}
