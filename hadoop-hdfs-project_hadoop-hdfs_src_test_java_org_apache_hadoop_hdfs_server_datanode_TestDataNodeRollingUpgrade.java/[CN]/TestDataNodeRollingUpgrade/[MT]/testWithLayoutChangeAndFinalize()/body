{
  final long seed=0x600DF00D;
  try {
    startCluster();
    Path[] paths=new Path[3];
    File[] blockFiles=new File[3];
    for (int i=0; i < 2; ++i) {
      paths[i]=new Path("/" + GenericTestUtils.getMethodName() + "."+ i+ ".dat");
      DFSTestUtil.createFile(fs,paths[i],BLOCK_SIZE,(short)2,seed);
    }
    startRollingUpgrade();
    blockFiles[0]=getBlockForFile(paths[0],true);
    File trashFile0=getTrashFileForBlock(blockFiles[0],false);
    deleteAndEnsureInTrash(paths[0],blockFiles[0],trashFile0);
    LOG.info("Shutting down the Datanode");
    MiniDFSCluster.DataNodeProperties dnprop=cluster.stopDataNode(0);
    DFSTestUtil.addDataNodeLayoutVersion(DataNodeLayoutVersion.CURRENT_LAYOUT_VERSION - 1,"Test Layout for TestDataNodeRollingUpgrade");
    LOG.info("Restarting the DataNode");
    cluster.restartDataNode(dnprop,true);
    cluster.waitActive();
    dn0=cluster.getDataNodes().get(0);
    LOG.info("The DN has been restarted");
    assertFalse(trashFile0.exists());
    assertFalse(dn0.getStorage().getBPStorage(blockPoolId).isTrashAllowed(blockFiles[0]));
    assertTrue(isBlockFileInPrevious(blockFiles[0]));
    assertFalse(isTrashRootPresent());
    blockFiles[1]=getBlockForFile(paths[1],true);
    fs.delete(paths[1],false);
    assertTrue(isBlockFileInPrevious(blockFiles[1]));
    assertFalse(isTrashRootPresent());
    finalizeRollingUpgrade();
    assertFalse(isTrashRootPresent());
    assertFalse(isBlockFileInPrevious(blockFiles[0]));
    assertFalse(isBlockFileInPrevious(blockFiles[1]));
  }
  finally {
    shutdownCluster();
  }
}
