{
  xmlFilename=new String("core-default.xml");
  configurationClasses=new Class[]{CommonConfigurationKeys.class,CommonConfigurationKeysPublic.class,LocalConfigKeys.class,FtpConfigKeys.class,SshFenceByTcpPort.class,LdapGroupsMapping.class,ZKFailoverController.class,SSLFactory.class,CompositeGroupsMapping.class};
  xmlPropsToSkipCompare=new HashSet<String>();
  xmlPrefixToSkipCompare=new HashSet<String>();
  configurationPropsToSkipCompare=new HashSet<String>();
  errorIfMissingConfigProps=true;
  errorIfMissingXmlProps=false;
  xmlPropsToSkipCompare.add("fs.ftp.password.localhost");
  xmlPropsToSkipCompare.add("fs.ftp.user.localhost");
  xmlPropsToSkipCompare.add("fs.s3.block.size");
  xmlPropsToSkipCompare.add("hadoop.tmp.dir");
  xmlPropsToSkipCompare.add("nfs3.mountd.port");
  xmlPropsToSkipCompare.add("nfs3.server.port");
  xmlPropsToSkipCompare.add("test.fs.s3.name");
  xmlPropsToSkipCompare.add("test.fs.s3n.name");
  xmlPrefixToSkipCompare.add("fs.s3.");
  xmlPrefixToSkipCompare.add("fs.s3a.");
  xmlPrefixToSkipCompare.add("fs.s3n.");
  xmlPrefixToSkipCompare.add("s3.");
  xmlPrefixToSkipCompare.add("s3native.");
  configurationPropsToSkipCompare.add(CommonConfigurationKeysPublic.IO_SORT_MB_KEY);
  configurationPropsToSkipCompare.add(CommonConfigurationKeysPublic.IO_SORT_FACTOR_KEY);
  configurationPropsToSkipCompare.add("dr.who");
  xmlPropsToSkipCompare.add("io.seqfile.lazydecompress");
  xmlPropsToSkipCompare.add("io.seqfile.sorter.recordlimit");
  xmlPropsToSkipCompare.add("io.bytes.per.checksum");
  xmlPropsToSkipCompare.add("hadoop.http.filter.initializers");
  xmlPrefixToSkipCompare.add(HttpCrossOriginFilterInitializer.PREFIX);
  xmlPrefixToSkipCompare.add("fs.AbstractFileSystem.");
  xmlPrefixToSkipCompare.add("dfs.ha.fencing.ssh.");
  xmlPrefixToSkipCompare.add("hadoop.registry.");
  xmlPrefixToSkipCompare.add("hadoop.http.authentication.");
  xmlPropsToSkipCompare.add(KMSClientProvider.AUTH_RETRY);
  xmlPropsToSkipCompare.add("hadoop.workaround.non.threadsafe.getpwuid");
  xmlPropsToSkipCompare.add("dfs.ha.fencing.methods");
  xmlPrefixToSkipCompare.add(CommonConfigurationKeysPublic.HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX);
  xmlPropsToSkipCompare.add("hadoop.common.configuration.version");
  xmlPropsToSkipCompare.add("fs.har.impl.disable.cache");
  xmlPropsToSkipCompare.add("fs.swift.impl");
  xmlPropsToSkipCompare.add("hadoop.htrace.span.receiver.classes");
  xmlPropsToSkipCompare.add("ha.zookeeper.parent-znode");
  xmlPropsToSkipCompare.add("ha.zookeeper.session-timeout.ms");
  xmlPrefixToSkipCompare.add(CommonConfigurationKeys.FS_CLIENT_HTRACE_PREFIX);
  xmlPropsToSkipCompare.add("hadoop.kerberos.kinit.command");
  xmlPropsToSkipCompare.add("hadoop.rpc.socket.factory.class.ClientProtocol");
  xmlPropsToSkipCompare.add("hadoop.ssl.enabled");
  xmlPropsToSkipCompare.add("io.compression.codec.bzip2.library");
  xmlPropsToSkipCompare.add("io.seqfile.local.dir");
}
