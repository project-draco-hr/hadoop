{
  final DfsClientConf conf=dfsClient.getConf();
  ArrayList<Future<ByteBuffer>> futures=new ArrayList<Future<ByteBuffer>>();
  CompletionService<ByteBuffer> hedgedService=new ExecutorCompletionService<ByteBuffer>(dfsClient.getHedgedReadsThreadPool());
  ArrayList<DatanodeInfo> ignored=new ArrayList<DatanodeInfo>();
  ByteBuffer bb=null;
  int len=(int)(end - start + 1);
  int hedgedReadId=0;
  block=refreshLocatedBlock(block);
  while (true) {
    hedgedReadOpsLoopNumForTesting++;
    DNAddrPair chosenNode=null;
    if (futures.isEmpty()) {
      chosenNode=chooseDataNode(block,ignored);
      bb=ByteBuffer.wrap(buf,offset,len);
      Callable<ByteBuffer> getFromDataNodeCallable=getFromOneDataNode(chosenNode,block,start,end,bb,corruptedBlockMap,hedgedReadId++);
      Future<ByteBuffer> firstRequest=hedgedService.submit(getFromDataNodeCallable);
      futures.add(firstRequest);
      try {
        Future<ByteBuffer> future=hedgedService.poll(conf.getHedgedReadThresholdMillis(),TimeUnit.MILLISECONDS);
        if (future != null) {
          future.get();
          return;
        }
        DFSClient.LOG.debug("Waited {}ms to read from {}; spawning hedged " + "read",conf.getHedgedReadThresholdMillis(),chosenNode.info);
        ignored.add(chosenNode.info);
        dfsClient.getHedgedReadMetrics().incHedgedReadOps();
        continue;
      }
 catch (      InterruptedException e) {
      }
catch (      ExecutionException e) {
      }
    }
 else {
      try {
        chosenNode=getBestNodeDNAddrPair(block,ignored);
        if (chosenNode == null) {
          chosenNode=chooseDataNode(block,ignored);
        }
        bb=ByteBuffer.allocate(len);
        Callable<ByteBuffer> getFromDataNodeCallable=getFromOneDataNode(chosenNode,block,start,end,bb,corruptedBlockMap,hedgedReadId++);
        Future<ByteBuffer> oneMoreRequest=hedgedService.submit(getFromDataNodeCallable);
        futures.add(oneMoreRequest);
      }
 catch (      IOException ioe) {
        DFSClient.LOG.debug("Failed getting node for hedged read: {}",ioe.getMessage());
      }
      try {
        ByteBuffer result=getFirstToComplete(hedgedService,futures);
        cancelAll(futures);
        if (result.array() != buf) {
          dfsClient.getHedgedReadMetrics().incHedgedReadWins();
          System.arraycopy(result.array(),result.position(),buf,offset,len);
        }
 else {
          dfsClient.getHedgedReadMetrics().incHedgedReadOps();
        }
        return;
      }
 catch (      InterruptedException ie) {
      }
      if (chosenNode != null && chosenNode.info != null) {
        ignored.add(chosenNode.info);
      }
    }
  }
}
