{
  final long curPos=pos;
  final long curEnd=blockEnd;
  final long blockStartInFile=currentLocatedBlock.getStartOffset();
  final long blockPos=curPos - blockStartInFile;
  long length63;
  if ((curPos + maxLength) <= (curEnd + 1)) {
    length63=maxLength;
  }
 else {
    length63=1 + curEnd - curPos;
    if (length63 <= 0) {
      DFSClient.LOG.debug("Unable to perform a zero-copy read from offset {}" + " of {}; {} bytes left in block. blockPos={}; curPos={};" + "curEnd={}",curPos,src,length63,blockPos,curPos,curEnd);
      return null;
    }
    DFSClient.LOG.debug("Reducing read length from {} to {} to avoid going " + "more than one byte past the end of the block.  blockPos={}; " + " curPos={}; curEnd={}",maxLength,length63,blockPos,curPos,curEnd);
  }
  int length;
  if (blockPos + length63 <= Integer.MAX_VALUE) {
    length=(int)length63;
  }
 else {
    long length31=Integer.MAX_VALUE - blockPos;
    if (length31 <= 0) {
      DFSClient.LOG.debug("Unable to perform a zero-copy read from offset {} " + " of {}; 31-bit MappedByteBuffer limit exceeded.  blockPos={}, " + "curEnd={}",curPos,src,blockPos,curEnd);
      return null;
    }
    length=(int)length31;
    DFSClient.LOG.debug("Reducing read length from {} to {} to avoid 31-bit " + "limit.  blockPos={}; curPos={}; curEnd={}",maxLength,length,blockPos,curPos,curEnd);
  }
  final ClientMmap clientMmap=blockReader.getClientMmap(opts);
  if (clientMmap == null) {
    DFSClient.LOG.debug("unable to perform a zero-copy read from offset {} of" + " {}; BlockReader#getClientMmap returned null.",curPos,src);
    return null;
  }
  boolean success=false;
  ByteBuffer buffer;
  try {
    seek(curPos + length);
    buffer=clientMmap.getMappedByteBuffer().asReadOnlyBuffer();
    buffer.position((int)blockPos);
    buffer.limit((int)(blockPos + length));
    getExtendedReadBuffers().put(buffer,clientMmap);
    readStatistics.addZeroCopyBytes(length);
    DFSClient.LOG.debug("readZeroCopy read {} bytes from offset {} via the " + "zero-copy read path.  blockEnd = {}",length,curPos,blockEnd);
    success=true;
  }
  finally {
    if (!success) {
      IOUtils.closeQuietly(clientMmap);
    }
  }
  return buffer;
}
