{
  final String path=request.getPathInfo() != null ? request.getPathInfo() : "/";
  final String filename=JspHelper.validatePath(path);
  if (filename == null) {
    response.setContentType("text/plain");
    PrintWriter out=response.getWriter();
    out.print("Invalid input");
    return;
  }
  Enumeration<String> reqRanges=request.getHeaders("Range");
  if (reqRanges != null && !reqRanges.hasMoreElements()) {
    reqRanges=null;
  }
  DFSClient dfs;
  try {
    dfs=getDFSClient(request);
  }
 catch (  InterruptedException e) {
    response.sendError(400,e.getMessage());
    return;
  }
  DFSInputStream in=null;
  OutputStream out=null;
  try {
    in=dfs.open(filename);
    out=response.getOutputStream();
    final long fileLen=in.getFileLength();
    if (reqRanges != null) {
      List<InclusiveByteRange> ranges=InclusiveByteRange.satisfiableRanges(reqRanges,fileLen);
      StreamFile.sendPartialData(in,out,response,fileLen,ranges);
    }
 else {
      response.setHeader("Content-Disposition","attachment; filename=\"" + filename + "\"");
      response.setContentType("application/octet-stream");
      response.setHeader(CONTENT_LENGTH,"" + fileLen);
      StreamFile.copyFromOffset(in,out,0L,fileLen);
    }
    in.close();
    in=null;
    out.close();
    out=null;
    dfs.close();
    dfs=null;
  }
 catch (  IOException ioe) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("response.isCommitted()=" + response.isCommitted(),ioe);
    }
    throw ioe;
  }
 finally {
    IOUtils.cleanup(LOG,in);
    IOUtils.cleanup(LOG,out);
    IOUtils.cleanup(LOG,dfs);
  }
}
