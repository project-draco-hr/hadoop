{
  zkHostPort=conf.get(YarnConfiguration.ZK_RM_STATE_STORE_ADDRESS);
  if (zkHostPort == null) {
    throw new YarnRuntimeException("No server address specified for " + "zookeeper state store for Resource Manager recovery. " + YarnConfiguration.ZK_RM_STATE_STORE_ADDRESS + " is not configured.");
  }
  numRetries=conf.getInt(YarnConfiguration.ZK_RM_STATE_STORE_NUM_RETRIES,YarnConfiguration.DEFAULT_ZK_RM_STATE_STORE_NUM_RETRIES);
  znodeWorkingPath=conf.get(YarnConfiguration.ZK_RM_STATE_STORE_PARENT_PATH,YarnConfiguration.DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH);
  zkSessionTimeout=conf.getInt(YarnConfiguration.ZK_RM_STATE_STORE_TIMEOUT_MS,YarnConfiguration.DEFAULT_ZK_RM_STATE_STORE_TIMEOUT_MS);
  String zkAclConf=conf.get(YarnConfiguration.ZK_RM_STATE_STORE_ACL,YarnConfiguration.DEFAULT_ZK_RM_STATE_STORE_ACL);
  zkAclConf=ZKUtil.resolveConfIndirection(zkAclConf);
  try {
    zkAcl=ZKUtil.parseACLs(zkAclConf);
  }
 catch (  ZKUtil.BadAclFormatException bafe) {
    LOG.error("Invalid format for " + YarnConfiguration.ZK_RM_STATE_STORE_ACL);
    throw bafe;
  }
  zkRootNodePath=znodeWorkingPath + "/" + ROOT_ZNODE_NAME;
  rmDTSecretManagerRoot=zkRootNodePath + "/" + RM_DT_SECRET_MANAGER_ROOT;
  rmAppRoot=zkRootNodePath + "/" + RM_APP_ROOT;
  fencingNodePath=zkRootNodePath + "/" + FENCING_LOCK;
  createFencingNodePathOp=Op.create(fencingNodePath,new byte[0],zkAcl,CreateMode.PERSISTENT);
  deleteFencingNodePathOp=Op.delete(fencingNodePath,-1);
  if (HAUtil.isHAEnabled(conf)) {
    String zkRootNodeAclConf=HAUtil.getConfValueForRMInstance(YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL,conf);
    if (zkRootNodeAclConf != null) {
      zkRootNodeAclConf=ZKUtil.resolveConfIndirection(zkRootNodeAclConf);
      try {
        zkRootNodeAcl=ZKUtil.parseACLs(zkRootNodeAclConf);
      }
 catch (      ZKUtil.BadAclFormatException bafe) {
        LOG.error("Invalid format for " + YarnConfiguration.ZK_RM_STATE_STORE_ROOT_NODE_ACL);
        throw bafe;
      }
    }
 else {
      useDefaultFencingScheme=true;
      zkRootNodeAcl=constructZkRootNodeACL(conf,zkAcl);
    }
  }
}
