{
  checkStatus("/");
  createFile("/a",1);
  createFile("/b",1);
  mkdirs("/dir");
  checkFile(new Path("/a"));
  checkFile(new Path("/b"));
  checkStatus("/");
  createFile("/dir/.a.crc",1);
  createFile("/dir/b",1);
  mkdirs("/dir/dir1");
  checkFile(new Path("/dir/.a.crc"));
  checkFile(new Path("/dir/b"));
  checkStatus("/dir");
  checkStatus("/nonexistent");
  checkStatus("/nonexistent/a");
  final String username=UserGroupInformation.getCurrentUser().getShortUserName() + "1";
  final HftpFileSystem hftp2=cluster.getHftpFileSystemAs(username,CONF,0,"somegroup");
{
    final Path nonexistent=new Path("/nonexistent");
    try {
      hftp2.getFileStatus(nonexistent);
      Assert.fail();
    }
 catch (    IOException ioe) {
      FileSystem.LOG.info("GOOD: getting an exception",ioe);
    }
  }
{
    final Path dir=new Path("/dir");
    fs.setPermission(dir,new FsPermission((short)0));
    try {
      hftp2.getFileStatus(new Path(dir,"a"));
      Assert.fail();
    }
 catch (    IOException ioe) {
      FileSystem.LOG.info("GOOD: getting an exception",ioe);
    }
  }
}
