{
  JobStory job=getNextJobFromTrace();
  while (job != null && (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS || job.getSubmissionTime() < 0 || job.getNumberMaps() == 0)) {
    if (LOG.isDebugEnabled()) {
      List<String> reason=new ArrayList<String>();
      if (job.getOutcome() != Pre21JobHistoryConstants.Values.SUCCESS) {
        reason.add("STATE (" + job.getOutcome().name() + ")");
      }
      if (job.getSubmissionTime() < 0) {
        reason.add("SUBMISSION-TIME (" + job.getSubmissionTime() + ")");
      }
      if (job.getNumberMaps() == 0) {
        reason.add("ZERO-MAPS-JOB");
      }
      if (reason.size() == 0) {
        reason.add("N/A");
      }
      LOG.debug("Ignoring job " + job.getJobID() + " from the input trace."+ " Reason: "+ StringUtils.join(reason,","));
    }
    job=getNextJobFromTrace();
  }
  return null == job ? null : new FilterJobStory(job){
    @Override public TaskInfo getTaskInfo(    TaskType taskType,    int taskNumber){
      TaskInfo info=this.job.getTaskInfo(taskType,taskNumber);
      if (info != null) {
        info=new MinTaskInfo(info);
      }
 else {
        info=new MinTaskInfo(new TaskInfo(0,0,0,0,0));
      }
      return info;
    }
  }
;
}
