{
  Configuration conf=getConfig();
  YarnRPC rpc=YarnRPC.create(conf);
  InetSocketAddress masterServiceAddress=conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS,YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);
  this.server=rpc.getServer(AMRMProtocol.class,this,masterServiceAddress,conf,this.rmContext.getApplicationTokenSecretManager(),conf.getInt(YarnConfiguration.RM_SCHEDULER_CLIENT_THREAD_COUNT,YarnConfiguration.DEFAULT_RM_SCHEDULER_CLIENT_THREAD_COUNT));
  if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,false)) {
    refreshServiceAcls(conf,new RMPolicyProvider());
  }
  this.server.start();
  this.bindAddress=NetUtils.createSocketAddr(masterServiceAddress.getHostName(),this.server.getPort());
  if (getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,false)) {
    String resolvedAddress=this.server.getListenerAddress().getHostName() + ":" + this.server.getListenerAddress().getPort();
    conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS,resolvedAddress);
  }
  super.start();
}
