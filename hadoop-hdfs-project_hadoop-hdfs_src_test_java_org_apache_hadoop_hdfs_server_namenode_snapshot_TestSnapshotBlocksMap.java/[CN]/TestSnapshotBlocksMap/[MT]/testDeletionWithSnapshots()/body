{
  Path file0=new Path(sub1,"file0");
  Path file1=new Path(sub1,"file1");
  Path sub2=new Path(sub1,"sub2");
  Path file2=new Path(sub2,"file2");
  Path file3=new Path(sub1,"file3");
  Path file4=new Path(sub1,"file4");
  Path file5=new Path(sub1,"file5");
  DFSTestUtil.createFile(hdfs,file0,4 * BLOCKSIZE,REPLICATION,seed);
  DFSTestUtil.createFile(hdfs,file1,2 * BLOCKSIZE,REPLICATION,seed);
  DFSTestUtil.createFile(hdfs,file2,3 * BLOCKSIZE,REPLICATION,seed);
{
    final INodeFile f2=assertBlockCollection(file2.toString(),3,fsdir,blockmanager);
    BlockInfo[] blocks=f2.getBlocks();
    hdfs.delete(sub2,true);
    for (    BlockInfo b : blocks) {
      assertNull(blockmanager.getBlockCollection(b));
    }
  }
  final String[] snapshots={"s0","s1","s2"};
  DFSTestUtil.createFile(hdfs,file3,5 * BLOCKSIZE,REPLICATION,seed);
  SnapshotTestHelper.createSnapshot(hdfs,sub1,snapshots[0]);
  DFSTestUtil.createFile(hdfs,file4,1 * BLOCKSIZE,REPLICATION,seed);
  SnapshotTestHelper.createSnapshot(hdfs,sub1,snapshots[1]);
  DFSTestUtil.createFile(hdfs,file5,7 * BLOCKSIZE,REPLICATION,seed);
  SnapshotTestHelper.createSnapshot(hdfs,sub1,snapshots[2]);
{
    INodeFile f1=assertBlockCollection(file1.toString(),2,fsdir,blockmanager);
    Assert.assertSame(INodeFile.class,f1.getClass());
    hdfs.setReplication(file1,(short)2);
    f1=assertBlockCollection(file1.toString(),2,fsdir,blockmanager);
    Assert.assertSame(INodeFileWithSnapshot.class,f1.getClass());
  }
  final INodeFile f0=assertBlockCollection(file0.toString(),4,fsdir,blockmanager);
  BlockInfo[] blocks0=f0.getBlocks();
  Path snapshotFile0=SnapshotTestHelper.getSnapshotPath(sub1,"s0",file0.getName());
  assertBlockCollection(snapshotFile0.toString(),4,fsdir,blockmanager);
  hdfs.delete(file0,true);
  for (  BlockInfo b : blocks0) {
    assertNotNull(blockmanager.getBlockCollection(b));
  }
  assertBlockCollection(snapshotFile0.toString(),4,fsdir,blockmanager);
  String s1f0=SnapshotTestHelper.getSnapshotPath(sub1,"s1",file0.getName()).toString();
  assertBlockCollection(s1f0,4,fsdir,blockmanager);
  hdfs.deleteSnapshot(sub1,"s1");
  for (  BlockInfo b : blocks0) {
    assertNotNull(blockmanager.getBlockCollection(b));
  }
  assertBlockCollection(snapshotFile0.toString(),4,fsdir,blockmanager);
  try {
    INodeFile.valueOf(fsdir.getINode(s1f0),s1f0);
    fail("Expect FileNotFoundException when identifying the INode in a deleted Snapshot");
  }
 catch (  IOException e) {
    assertExceptionContains("File does not exist: " + s1f0,e);
  }
}
