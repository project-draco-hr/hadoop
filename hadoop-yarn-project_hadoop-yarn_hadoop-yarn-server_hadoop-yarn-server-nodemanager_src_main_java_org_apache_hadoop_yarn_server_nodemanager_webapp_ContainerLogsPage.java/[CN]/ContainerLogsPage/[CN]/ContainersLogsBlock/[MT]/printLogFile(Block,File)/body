{
  long start=$("start").isEmpty() ? -4 * 1024 : Long.parseLong($("start"));
  start=start < 0 ? logFile.length() + start : start;
  start=start < 0 ? 0 : start;
  long end=$("end").isEmpty() ? logFile.length() : Long.parseLong($("end"));
  end=end < 0 ? logFile.length() + end : end;
  end=end < 0 ? logFile.length() : end;
  if (start > end) {
    html.h1("Invalid start and end values. Start: [" + start + "]"+ ", end["+ end+ "]");
    return;
  }
 else {
    FileInputStream logByteStream=null;
    try {
      logByteStream=ContainerLogsUtils.openLogFileForRead($(CONTAINER_ID),logFile,nmContext);
    }
 catch (    IOException ex) {
      html.h1(ex.getMessage());
      return;
    }
    try {
      long toRead=end - start;
      if (toRead < logFile.length()) {
        html.p()._("Showing " + toRead + " bytes. Click ").a(url("containerlogs",$(CONTAINER_ID),$(APP_OWNER),logFile.getName(),"?start=0"),"here")._(" for full log")._();
      }
      IOUtils.skipFully(logByteStream,start);
      InputStreamReader reader=new InputStreamReader(logByteStream);
      int bufferSize=65536;
      char[] cbuf=new char[bufferSize];
      int len=0;
      int currentToRead=toRead > bufferSize ? bufferSize : (int)toRead;
      PRE<Hamlet> pre=html.pre();
      while ((len=reader.read(cbuf,0,currentToRead)) > 0 && toRead > 0) {
        pre._(new String(cbuf,0,len));
        toRead=toRead - len;
        currentToRead=toRead > bufferSize ? bufferSize : (int)toRead;
      }
      pre._();
      reader.close();
    }
 catch (    IOException e) {
      LOG.error("Exception reading log file " + logFile.getAbsolutePath(),e);
      html.h1("Exception reading log file. It might be because log " + "file was aggregated : " + logFile.getName());
    }
 finally {
      if (logByteStream != null) {
        try {
          logByteStream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}
