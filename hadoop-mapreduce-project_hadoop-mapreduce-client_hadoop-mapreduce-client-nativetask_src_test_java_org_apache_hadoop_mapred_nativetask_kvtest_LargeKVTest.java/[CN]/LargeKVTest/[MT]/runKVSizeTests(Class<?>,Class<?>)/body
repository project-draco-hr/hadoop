{
  if (!keyClass.equals(Text.class) && !valueClass.equals(Text.class)) {
    return;
  }
  final int deafultKVSizeMaximum=1 << 22;
  final int kvSizeMaximum=normalConf.getInt(TestConstants.NATIVETASK_KVSIZE_MAX_LARGEKV_TEST,deafultKVSizeMaximum);
  final FileSystem fs=FileSystem.get(normalConf);
  for (int i=65536; i <= kvSizeMaximum; i*=4) {
    int min=i / 4;
    int max=i;
    nativeConf.set(TestConstants.NATIVETASK_KVSIZE_MIN,String.valueOf(min));
    nativeConf.set(TestConstants.NATIVETASK_KVSIZE_MAX,String.valueOf(max));
    normalConf.set(TestConstants.NATIVETASK_KVSIZE_MIN,String.valueOf(min));
    normalConf.set(TestConstants.NATIVETASK_KVSIZE_MAX,String.valueOf(max));
    LOG.info("===KV Size Test: min size: " + min + ", max size: "+ max+ ", keyClass: "+ keyClass.getName()+ ", valueClass: "+ valueClass.getName());
    final String inputPath=TestConstants.NATIVETASK_KVTEST_INPUTDIR + "/LargeKV/" + keyClass.getName()+ "/"+ valueClass.getName();
    final String nativeOutputPath=TestConstants.NATIVETASK_KVTEST_NATIVE_OUTPUTDIR + "/LargeKV/" + keyClass.getName()+ "/"+ valueClass.getName();
    fs.delete(new Path(nativeOutputPath),true);
    final KVJob nativeJob=new KVJob("Test Large Value Size:" + String.valueOf(i),nativeConf,keyClass,valueClass,inputPath,nativeOutputPath);
    assertTrue("job should complete successfully",nativeJob.runJob());
    final String normalOutputPath=TestConstants.NATIVETASK_KVTEST_NORMAL_OUTPUTDIR + "/LargeKV/" + keyClass.getName()+ "/"+ valueClass.getName();
    fs.delete(new Path(normalOutputPath),true);
    final KVJob normalJob=new KVJob("Test Large Key Size:" + String.valueOf(i),normalConf,keyClass,valueClass,inputPath,normalOutputPath);
    assertTrue("job should complete successfully",normalJob.runJob());
    final boolean compareRet=ResultVerifier.verify(normalOutputPath,nativeOutputPath);
    final String reason="keytype: " + keyClass.getName() + ", valuetype: "+ valueClass.getName()+ ", failed with "+ (keyClass.equals(Text.class) ? "key" : "value")+ ", min size: "+ min+ ", max size: "+ max+ ", normal out: "+ normalOutputPath+ ", native Out: "+ nativeOutputPath;
    assertEquals(reason,true,compareRet);
    ResultVerifier.verifyCounters(normalJob.job,nativeJob.job);
  }
  fs.close();
}
