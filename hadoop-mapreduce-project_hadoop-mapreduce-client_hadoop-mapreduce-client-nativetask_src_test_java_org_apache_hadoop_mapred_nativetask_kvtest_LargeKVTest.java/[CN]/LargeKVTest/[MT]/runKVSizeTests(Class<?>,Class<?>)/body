{
  if (!keyClass.equals(Text.class) && !valueClass.equals(Text.class)) {
    return;
  }
  final int deafult_KVSize_Maximum=1 << 22;
  final int KVSize_Maximu=normalConf.getInt(TestConstants.NATIVETASK_KVSIZE_MAX_LARGEKV_TEST,deafult_KVSize_Maximum);
  for (int i=65536; i <= KVSize_Maximu; i*=4) {
    int min=i / 4;
    int max=i;
    nativeConf.set(TestConstants.NATIVETASK_KVSIZE_MIN,String.valueOf(min));
    nativeConf.set(TestConstants.NATIVETASK_KVSIZE_MAX,String.valueOf(max));
    normalConf.set(TestConstants.NATIVETASK_KVSIZE_MIN,String.valueOf(min));
    normalConf.set(TestConstants.NATIVETASK_KVSIZE_MAX,String.valueOf(max));
    LOG.info("===KV Size Test: min size: " + min + ", max size: "+ max+ ", keyClass: "+ keyClass.getName()+ ", valueClass: "+ valueClass.getName());
    final String nativeOutPut=runNativeLargeKVTest("Test Large Value Size:" + String.valueOf(i),keyClass,valueClass,nativeConf);
    final String normalOutPut=this.runNormalLargeKVTest("Test Large Key Size:" + String.valueOf(i),keyClass,valueClass,normalConf);
    final boolean compareRet=ResultVerifier.verify(normalOutPut,nativeOutPut);
    final String reason="keytype: " + keyClass.getName() + ", valuetype: "+ valueClass.getName()+ ", failed with "+ (keyClass.equals(Text.class) ? "key" : "value")+ ", min size: "+ min+ ", max size: "+ max+ ", normal out: "+ normalOutPut+ ", native Out: "+ nativeOutPut;
    assertEquals(reason,true,compareRet);
  }
}
