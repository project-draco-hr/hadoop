{
  final int utf8Len=readVInt(din);
  final byte[] bytes=new byte[utf8Len];
  din.readFully(bytes);
  int len=0;
  StringBuilder sb=new StringBuilder(utf8Len);
  while (len < utf8Len) {
    int cpt=0;
    final int b1=bytes[len++] & 0xFF;
    if (b1 <= 0x7F) {
      cpt=b1;
    }
 else     if ((b1 & B11111) == B11110) {
      int b2=bytes[len++] & 0xFF;
      checkB10(b2);
      int b3=bytes[len++] & 0xFF;
      checkB10(b3);
      int b4=bytes[len++] & 0xFF;
      checkB10(b4);
      cpt=utf8ToCodePoint(b1,b2,b3,b4);
    }
 else     if ((b1 & B1111) == B1110) {
      int b2=bytes[len++] & 0xFF;
      checkB10(b2);
      int b3=bytes[len++] & 0xFF;
      checkB10(b3);
      cpt=utf8ToCodePoint(b1,b2,b3);
    }
 else     if ((b1 & B111) == B110) {
      int b2=bytes[len++] & 0xFF;
      checkB10(b2);
      cpt=utf8ToCodePoint(b1,b2);
    }
 else {
      throw new IOException("Invalid UTF-8 byte " + Integer.toHexString(b1) + " at offset "+ (len - 1)+ " in length of "+ utf8Len);
    }
    if (!isValidCodePoint(cpt)) {
      throw new IOException("Illegal Unicode Codepoint " + Integer.toHexString(cpt) + " in stream.");
    }
    sb.appendCodePoint(cpt);
  }
  return sb.toString();
}
