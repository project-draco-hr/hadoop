{
  final Configuration conf=new HdfsConfiguration();
  conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,0);
  MiniDFSCluster cluster=null;
  FSDataOutputStream stream=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    FileSystem fs=cluster.getFileSystem();
    File editLog=new File(FSImageTestUtil.getNameNodeCurrentDirs(cluster,0).get(0),NNStorage.getInProgressEditsFileName(1));
    EnumMap<FSEditLogOpCodes,Holder<Integer>> counts;
    Path p1=new Path("/block-boundaries");
    writeAndAppend(fs,p1,BLOCK_SIZE,BLOCK_SIZE);
    counts=FSImageTestUtil.countEditLogOpTypes(editLog);
    assertEquals(2,(int)counts.get(FSEditLogOpCodes.OP_ADD).held);
    assertEquals(2,(int)counts.get(FSEditLogOpCodes.OP_ADD_BLOCK).held);
    assertEquals(2,(int)counts.get(FSEditLogOpCodes.OP_CLOSE).held);
    Path p2=new Path("/not-block-boundaries");
    writeAndAppend(fs,p2,BLOCK_SIZE / 2,BLOCK_SIZE);
    counts=FSImageTestUtil.countEditLogOpTypes(editLog);
    assertEquals(2 + 2,(int)counts.get(FSEditLogOpCodes.OP_ADD).held);
    assertEquals(1,(int)counts.get(FSEditLogOpCodes.OP_UPDATE_BLOCKS).held);
    assertEquals(2 + 2,(int)counts.get(FSEditLogOpCodes.OP_ADD_BLOCK).held);
    assertEquals(2 + 2,(int)counts.get(FSEditLogOpCodes.OP_CLOSE).held);
    cluster.restartNameNode();
    AppendTestUtil.check(fs,p1,2 * BLOCK_SIZE);
    AppendTestUtil.check(fs,p2,3 * BLOCK_SIZE / 2);
  }
  finally {
    IOUtils.closeStream(stream);
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
