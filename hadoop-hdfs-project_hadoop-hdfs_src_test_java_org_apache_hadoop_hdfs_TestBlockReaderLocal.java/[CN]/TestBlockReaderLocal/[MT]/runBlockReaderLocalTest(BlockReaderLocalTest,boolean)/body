{
  MiniDFSCluster cluster=null;
  HdfsConfiguration conf=new HdfsConfiguration();
  conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY,!checksum);
  conf.set(DFSConfigKeys.DFS_CHECKSUM_TYPE_KEY,"CRC32C");
  FileInputStream dataIn=null, checkIn=null;
  final Path TEST_PATH=new Path("/a");
  final long RANDOM_SEED=4567L;
  BlockReaderLocal blockReaderLocal=null;
  FSDataInputStream fsIn=null;
  byte original[]=new byte[BlockReaderLocalTest.TEST_LENGTH];
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
    FileSystem fs=cluster.getFileSystem();
    DFSTestUtil.createFile(fs,TEST_PATH,BlockReaderLocalTest.TEST_LENGTH,(short)1,RANDOM_SEED);
    try {
      DFSTestUtil.waitReplication(fs,TEST_PATH,(short)1);
    }
 catch (    InterruptedException e) {
      Assert.fail("unexpected InterruptedException during " + "waitReplication: " + e);
    }
catch (    TimeoutException e) {
      Assert.fail("unexpected TimeoutException during " + "waitReplication: " + e);
    }
    fsIn=fs.open(TEST_PATH);
    IOUtils.readFully(fsIn,original,0,BlockReaderLocalTest.TEST_LENGTH);
    fsIn.close();
    fsIn=null;
    ExtendedBlock block=DFSTestUtil.getFirstBlock(fs,TEST_PATH);
    File dataFile=MiniDFSCluster.getBlockFile(0,block);
    File metaFile=MiniDFSCluster.getBlockMetadataFile(0,block);
    DatanodeID datanodeID=cluster.getDataNodes().get(0).getDatanodeId();
    cluster.shutdown();
    cluster=null;
    test.setup(dataFile,checksum);
    dataIn=new FileInputStream(dataFile);
    checkIn=new FileInputStream(metaFile);
    blockReaderLocal=new BlockReaderLocal(new DFSClient.Conf(conf),TEST_PATH.getName(),block,0,-1,dataIn,checkIn,datanodeID,checksum,null);
    dataIn=null;
    checkIn=null;
    test.doTest(blockReaderLocal,original);
  }
  finally {
    if (fsIn != null)     fsIn.close();
    if (cluster != null)     cluster.shutdown();
    if (dataIn != null)     dataIn.close();
    if (checkIn != null)     checkIn.close();
    if (blockReaderLocal != null)     blockReaderLocal.close();
  }
}
