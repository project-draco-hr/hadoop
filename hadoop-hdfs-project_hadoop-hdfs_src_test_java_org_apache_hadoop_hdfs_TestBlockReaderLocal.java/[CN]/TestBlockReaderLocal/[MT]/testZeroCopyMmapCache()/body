{
  HdfsConfiguration conf=initZeroCopyTest();
  MiniDFSCluster cluster=null;
  final Path TEST_PATH=new Path("/a");
  final int TEST_FILE_LENGTH=16385;
  final int RANDOM_SEED=23453;
  FSDataInputStream fsIn=null;
  ZeroCopyCursor zcursor[]={null,null,null,null,null};
  DistributedFileSystem fs=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    DFSTestUtil.createFile(fs,TEST_PATH,TEST_FILE_LENGTH,(short)1,RANDOM_SEED);
    try {
      DFSTestUtil.waitReplication(fs,TEST_PATH,(short)1);
    }
 catch (    InterruptedException e) {
      Assert.fail("unexpected InterruptedException during " + "waitReplication: " + e);
    }
catch (    TimeoutException e) {
      Assert.fail("unexpected TimeoutException during " + "waitReplication: " + e);
    }
    fsIn=fs.open(TEST_PATH);
    byte original[]=new byte[TEST_FILE_LENGTH];
    IOUtils.readFully(fsIn,original,0,TEST_FILE_LENGTH);
    fsIn.close();
    fsIn=fs.open(TEST_PATH);
    for (int i=0; i < zcursor.length; i++) {
      zcursor[i]=fsIn.createZeroCopyCursor();
      zcursor[i].setAllowShortReads(false);
    }
    ClientMmapManager mmapManager=fs.getClient().getMmapManager();
    CountingVisitor countingVisitor=new CountingVisitor();
    mmapManager.visitMmaps(countingVisitor);
    Assert.assertEquals(0,countingVisitor.count);
    mmapManager.visitEvictable(countingVisitor);
    Assert.assertEquals(0,countingVisitor.count);
    zcursor[0].read(4096);
    fsIn.seek(0);
    zcursor[1].read(4096);
    mmapManager.visitMmaps(countingVisitor);
    Assert.assertEquals(1,countingVisitor.count);
    countingVisitor.reset();
    mmapManager.visitEvictable(countingVisitor);
    Assert.assertEquals(0,countingVisitor.count);
    countingVisitor.reset();
    final ExtendedBlock firstBlock=DFSTestUtil.getFirstBlock(fs,TEST_PATH);
    mmapManager.visitMmaps(new ClientMmapManager.ClientMmapVisitor(){
      @Override public void accept(      ClientMmap mmap){
        Assert.assertEquals(firstBlock,mmap.getBlock());
      }
    }
);
    zcursor[2].read(4096);
    zcursor[3].read(4096);
    try {
      zcursor[4].read(4096);
      Assert.fail("expected UnsupportedOperationException");
    }
 catch (    UnsupportedOperationException e) {
    }
    mmapManager.visitMmaps(countingVisitor);
    Assert.assertEquals(3,countingVisitor.count);
    countingVisitor.reset();
    mmapManager.visitEvictable(countingVisitor);
    Assert.assertEquals(0,countingVisitor.count);
    for (int i=0; i < zcursor.length; i++) {
      IOUtils.closeStream(zcursor[i]);
    }
    while (true) {
      countingVisitor.reset();
      mmapManager.visitEvictable(countingVisitor);
      if (0 == countingVisitor.count) {
        break;
      }
    }
    countingVisitor.reset();
    mmapManager.visitMmaps(countingVisitor);
    Assert.assertEquals(0,countingVisitor.count);
  }
  finally {
    if (fsIn != null)     fsIn.close();
    if (fs != null)     fs.close();
    if (cluster != null)     cluster.shutdown();
  }
}
