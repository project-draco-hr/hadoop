{
  LOG.info("\n\nRunning test for malice user");
  ResourceManager resourceManager=yarnCluster.getResourceManager();
  final YarnRPC yarnRPC=YarnRPC.create(conf);
  final ApplicationId appID=resourceManager.getClientRMService().getNewApplication(Records.newRecord(GetNewApplicationRequest.class)).getApplicationId();
  AMRMProtocol scheduler=submitAndRegisterApplication(resourceManager,yarnRPC,appID);
  final Container allocatedContainer=requestAndGetContainer(scheduler,appID);
  final ContainerId containerID=allocatedContainer.getId();
  UserGroupInformation unauthorizedUser=UserGroupInformation.createRemoteUser(containerID.toString());
  ContainerToken containerToken=allocatedContainer.getContainerToken();
  byte[] identifierBytes=containerToken.getIdentifier().array();
  DataInputBuffer di=new DataInputBuffer();
  di.reset(identifierBytes,identifierBytes.length);
  final ContainerTokenIdentifier tokenId=new ContainerTokenIdentifier();
  tokenId.readFields(di);
  Token<ContainerTokenIdentifier> token=new Token<ContainerTokenIdentifier>(identifierBytes,containerToken.getPassword().array(),new Text(containerToken.getKind()),new Text(containerToken.getService()));
  unauthorizedUser.addToken(token);
  ContainerManager client=unauthorizedUser.doAs(new PrivilegedAction<ContainerManager>(){
    @Override public ContainerManager run(){
      ContainerManager client=(ContainerManager)yarnRPC.getProxy(ContainerManager.class,NetUtils.createSocketAddr(allocatedContainer.getNodeId().toString()),conf);
      LOG.info("Going to contact NM:  unauthorized request");
      callWithIllegalContainerID(client,tokenId,allocatedContainer);
      callWithIllegalResource(client,tokenId,allocatedContainer);
      callWithIllegalUserName(client,tokenId,allocatedContainer);
      return client;
    }
  }
);
  RPC.stopProxy(client);
  unauthorizedUser=UserGroupInformation.createRemoteUser(containerID.toString());
  RMContainerTokenSecretManager containerTokenSecreteManager=resourceManager.getRMContainerTokenSecretManager();
  final ContainerTokenIdentifier newTokenId=new ContainerTokenIdentifier(tokenId.getContainerID(),tokenId.getNmHostAddress(),tokenId.getApplicationSubmitter(),tokenId.getResource(),System.currentTimeMillis() - 1,containerTokenSecreteManager.getCurrentKey().getKeyId());
  final byte[] passowrd=containerTokenSecreteManager.createPassword(newTokenId);
  token=new Token<ContainerTokenIdentifier>(newTokenId.getBytes(),passowrd,new Text(containerToken.getKind()),new Text(containerToken.getService()));
  unauthorizedUser.addToken(token);
  unauthorizedUser.doAs(new PrivilegedAction<Void>(){
    @Override public Void run(){
      ContainerManager client=(ContainerManager)yarnRPC.getProxy(ContainerManager.class,NetUtils.createSocketAddr(allocatedContainer.getNodeId().toString()),conf);
      LOG.info("Going to contact NM with expired token");
      ContainerLaunchContext context=createContainerLaunchContextForTest(newTokenId);
      StartContainerRequest request=Records.newRecord(StartContainerRequest.class);
      request.setContainerLaunchContext(context);
      allocatedContainer.setContainerToken(BuilderUtils.newContainerToken(allocatedContainer.getNodeId(),passowrd,newTokenId));
      request.setContainer(allocatedContainer);
      try {
        client.startContainer(request);
        fail("Connection initiation with expired " + "token is expected to fail.");
      }
 catch (      Throwable t) {
        LOG.info("Got exception : ",t);
        Assert.assertTrue(t.getMessage().contains("This token is expired. current time is"));
      }
      StopContainerRequest stopRequest=Records.newRecord(StopContainerRequest.class);
      stopRequest.setContainerId(newTokenId.getContainerID());
      try {
        client.stopContainer(stopRequest);
      }
 catch (      Throwable t) {
        fail("Stop Container call should have succeeded");
      }
      return null;
    }
  }
);
  KillApplicationRequest request=Records.newRecord(KillApplicationRequest.class);
  request.setApplicationId(appID);
  resourceManager.getClientRMService().forceKillApplication(request);
}
