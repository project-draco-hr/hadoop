{
  NMTokenSecretManagerInRM nmTokenSecretManagerRM=yarnCluster.getResourceManager().getRMContext().getNMTokenSecretManager();
  NMTokenSecretManagerInNM nmTokenSecretManagerNM=yarnCluster.getNodeManager(0).getNMContext().getNMTokenSecretManager();
  RMContainerTokenSecretManager containerTokenSecretManager=yarnCluster.getResourceManager().getRMContext().getContainerTokenSecretManager();
  NodeManager nm=yarnCluster.getNodeManager(0);
  waitForNMToReceiveNMTokenKey(nmTokenSecretManagerNM,nm);
  Assert.assertEquals(nmTokenSecretManagerNM.getCurrentKey().getKeyId(),nmTokenSecretManagerRM.getCurrentKey().getKeyId());
  YarnRPC rpc=YarnRPC.create(conf);
  String user="test";
  Resource r=Resource.newInstance(1024,1);
  ApplicationId appId=ApplicationId.newInstance(1,1);
  ApplicationAttemptId validAppAttemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId validContainerId=ContainerId.newInstance(validAppAttemptId,0);
  NodeId validNode=yarnCluster.getNodeManager(0).getNMContext().getNodeId();
  NodeId invalidNode=NodeId.newInstance("InvalidHost",1234);
  org.apache.hadoop.yarn.api.records.Token validNMToken=nmTokenSecretManagerRM.createNMToken(validAppAttemptId,validNode,user);
  org.apache.hadoop.yarn.api.records.Token validContainerToken=containerTokenSecretManager.createContainerToken(validContainerId,validNode,user,r,Priority.newInstance(10),1234);
  ContainerTokenIdentifier identifier=BuilderUtils.newContainerTokenIdentifier(validContainerToken);
  Assert.assertEquals(Priority.newInstance(10),identifier.getPriority());
  Assert.assertEquals(1234,identifier.getCreationTime());
  StringBuilder sb;
  NMTokenSecretManagerInRM tempManager=new NMTokenSecretManagerInRM(conf);
  tempManager.rollMasterKey();
  do {
    tempManager.rollMasterKey();
    tempManager.activateNextMasterKey();
  }
 while (tempManager.getCurrentKey().getKeyId() == nmTokenSecretManagerRM.getCurrentKey().getKeyId());
  if (UserGroupInformation.isSecurityEnabled()) {
    sb=new StringBuilder("Client cannot authenticate via:[TOKEN]");
  }
 else {
    sb=new StringBuilder("SIMPLE authentication is not enabled.  Available:[TOKEN]");
  }
  String errorMsg=testStartContainer(rpc,validAppAttemptId,validNode,validContainerToken,null,true);
  Assert.assertTrue(errorMsg.contains(sb.toString()));
  org.apache.hadoop.yarn.api.records.Token invalidNMToken=tempManager.createNMToken(validAppAttemptId,validNode,user);
  sb=new StringBuilder("Given NMToken for application : ");
  sb.append(validAppAttemptId.toString()).append(" seems to have been generated illegally.");
  Assert.assertTrue(sb.toString().contains(testStartContainer(rpc,validAppAttemptId,validNode,validContainerToken,invalidNMToken,true)));
  invalidNMToken=nmTokenSecretManagerRM.createNMToken(validAppAttemptId,invalidNode,user);
  sb=new StringBuilder("Given NMToken for application : ");
  sb.append(validAppAttemptId).append(" is not valid for current node manager.expected : ").append(validNode.toString()).append(" found : ").append(invalidNode.toString());
  Assert.assertTrue(sb.toString().contains(testStartContainer(rpc,validAppAttemptId,validNode,validContainerToken,invalidNMToken,true)));
  conf.setInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,4 * 60 * 1000);
  validContainerToken=containerTokenSecretManager.createContainerToken(validContainerId,validNode,user,r,Priority.newInstance(0),0);
  Assert.assertTrue(testStartContainer(rpc,validAppAttemptId,validNode,validContainerToken,validNMToken,false).isEmpty());
  Assert.assertTrue(nmTokenSecretManagerNM.isAppAttemptNMTokenKeyPresent(validAppAttemptId));
  ApplicationAttemptId validAppAttemptId2=ApplicationAttemptId.newInstance(appId,2);
  ContainerId validContainerId2=ContainerId.newInstance(validAppAttemptId2,0);
  org.apache.hadoop.yarn.api.records.Token validContainerToken2=containerTokenSecretManager.createContainerToken(validContainerId2,validNode,user,r,Priority.newInstance(0),0);
  org.apache.hadoop.yarn.api.records.Token validNMToken2=nmTokenSecretManagerRM.createNMToken(validAppAttemptId2,validNode,user);
  NMTokenIdentifier newIdentifier=new NMTokenIdentifier();
  byte[] tokenIdentifierContent=validNMToken2.getIdentifier().array();
  DataInputBuffer dib=new DataInputBuffer();
  dib.reset(tokenIdentifierContent,tokenIdentifierContent.length);
  newIdentifier.readFields(dib);
  NMTokenIdentifierNewForTest newVersionIdentifier=new NMTokenIdentifierNewForTest(newIdentifier,"message");
  Assert.assertEquals("The ApplicationAttemptId is changed after set to " + "newVersionIdentifier",validAppAttemptId2.getAttemptId(),newVersionIdentifier.getApplicationAttemptId().getAttemptId());
  Assert.assertEquals("The message is changed after set to newVersionIdentifier","message",newVersionIdentifier.getMessage());
  Assert.assertEquals("The NodeId is changed after set to newVersionIdentifier",validNode,newVersionIdentifier.getNodeId());
  org.apache.hadoop.yarn.api.records.Token newVersionedNMToken=BaseNMTokenSecretManager.newInstance(nmTokenSecretManagerRM.retrievePassword(newVersionIdentifier),newVersionIdentifier);
  Assert.assertTrue(testStartContainer(rpc,validAppAttemptId2,validNode,validContainerToken2,newVersionedNMToken,false).isEmpty());
  Assert.assertTrue(nmTokenSecretManagerNM.isAppAttemptNMTokenKeyPresent(validAppAttemptId2));
  waitForContainerToFinishOnNM(validContainerId);
  sb=new StringBuilder("Attempt to relaunch the same container with id ");
  sb.append(validContainerId);
  Assert.assertTrue(testStartContainer(rpc,validAppAttemptId,validNode,validContainerToken,validNMToken,true).contains(sb.toString()));
  testStopContainer(rpc,validAppAttemptId,validNode,validContainerId,validNMToken,false);
  rollNMTokenMasterKey(nmTokenSecretManagerRM,nmTokenSecretManagerNM);
  rollNMTokenMasterKey(nmTokenSecretManagerRM,nmTokenSecretManagerNM);
  sb=new StringBuilder("Container ");
  sb.append(validContainerId);
  sb.append(" was recently stopped on node manager");
  Assert.assertTrue(testGetContainer(rpc,validAppAttemptId,validNode,validContainerId,validNMToken,true).contains(sb.toString()));
  nm.getNodeStatusUpdater().clearFinishedContainersFromCache();
  sb=new StringBuilder("Container ");
  sb.append(validContainerId.toString());
  sb.append(" is not handled by this NodeManager");
  Assert.assertTrue(testGetContainer(rpc,validAppAttemptId,validNode,validContainerId,validNMToken,false).contains(sb.toString()));
  ApplicationAttemptId attempt2=ApplicationAttemptId.newInstance(appId,2);
  Token attempt1NMToken=nmTokenSecretManagerRM.createNMToken(validAppAttemptId,validNode,user);
  org.apache.hadoop.yarn.api.records.Token newContainerToken=containerTokenSecretManager.createContainerToken(ContainerId.newInstance(attempt2,1),validNode,user,r,Priority.newInstance(0),0);
  Assert.assertTrue(testStartContainer(rpc,attempt2,validNode,newContainerToken,attempt1NMToken,false).isEmpty());
}
