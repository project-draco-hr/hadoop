{
  addQueues(QUEUES);
  setSpending("queue1",1.0f);
  setSpending("queue2",2.0f);
  setBudgets(QUEUES,new float[]{1000.0f,1000.0f});
  scheduler.allocations.setUsage("queue1",0,1);
  scheduler.allocations.setUsage("queue2",0,1);
  timer.runTask();
  Map<String,PriorityScheduler.QueueQuota> queueQuota=((PriorityScheduler)scheduler.scheduler).getQueueQuota(100,10,PriorityScheduler.MAP);
  PriorityScheduler.QueueQuota quota1=queueQuota.get("queue1");
  PriorityScheduler.QueueQuota quota2=queueQuota.get("queue2");
  quota1.map_used=10;
  quota2.map_used=90;
  ((PriorityScheduler)scheduler.scheduler).markIdle(queueQuota);
  timer.runTask();
  Collection<BudgetQueue> budgetQueues=scheduler.allocations.store.getQueues();
  assertNotNull(budgetQueues);
  assertEquals(2,budgetQueues.size());
  BudgetQueue queue1Budget=null;
  BudgetQueue queue2Budget=null;
  for (  BudgetQueue queue : budgetQueues) {
    if (queue.name.equals("queue1")) {
      queue1Budget=queue;
    }
 else {
      queue2Budget=queue;
    }
  }
  assertNotNull(queue1Budget);
  assertNotNull(queue2Budget);
  assertEquals("Budget incorrect",990.0f,queue1Budget.budget,0.1f);
  assertEquals("Budget incorrect",866.0f,queue2Budget.budget,0.1f);
}
