{
  Configuration conf=new Configuration();
  FileSystem lfs=FileSystem.getLocal(conf);
  Path rootTempDir=new Path(System.getProperty("test.build.data","/tmp"));
  Path tempDir=new Path(rootTempDir,"testNodeNameStateWithHostNameOnly");
  tempDir=lfs.makeQualified(tempDir);
  lfs.delete(tempDir,true);
  conf.set(StatePool.DIR_CONFIG,tempDir.toString());
  conf.setBoolean(StatePool.PERSIST_CONFIG,true);
  StatePool pool=new StatePool();
  NodeNameState nState=new NodeNameState();
  String test1="abc123";
  String test2="xyz789";
  WordList hostNameState=new WordList("hostname");
  hostNameState.add(test1);
  hostNameState.add(test2);
  nState.setHostNameState(hostNameState);
  try {
    pool.initialize(conf);
    pool.addState(getClass(),nState);
    pool.persist();
    pool=new StatePool();
    conf.setBoolean(StatePool.RELOAD_CONFIG,true);
    pool.initialize(conf);
    State state=pool.getState(getClass());
    assertNotNull("Missing state!",state);
    assertEquals("Incorrect state class!",NodeNameState.class,state.getClass());
    NodeNameState newNState=(NodeNameState)state;
    WordList newStateWordList=newNState.getHostNameState();
    assertTrue("Node state failed to store on reload",newStateWordList.contains(test1));
    assertEquals("Node state index on reload failed",0,newStateWordList.indexOf(test1));
    assertTrue("Node state failed to store on reload",newStateWordList.contains(test2));
    assertEquals("Node state index on reload failed",1,newStateWordList.indexOf(test2));
  }
  finally {
    lfs.delete(tempDir,true);
  }
}
