{
  Configuration conf=new Configuration();
  conf.setInt(TTConfig.TT_MAP_SLOTS,1);
  conf.setInt(TTConfig.TT_REDUCE_SLOTS,1);
  MiniDFSCluster dfsCluster=null;
  MiniMRCluster mrCluster=null;
  FileSystem lfs=FileSystem.getLocal(conf);
  Path rootTempDir=new Path(System.getProperty("test.build.data","/tmp"));
  Path tempDir=new Path(rootTempDir,"testRumenAnonymization");
  tempDir=lfs.makeQualified(tempDir);
  lfs.delete(tempDir,true);
  try {
    dfsCluster=new MiniDFSCluster(conf,1,true,null);
    String[] racks=new String[]{"/rack123.myorg.com","/rack456.myorg.com"};
    String[] hosts=new String[]{"host1230.myorg.com","host4560.myorg.com"};
    mrCluster=new MiniMRCluster(2,dfsCluster.getFileSystem().getUri().toString(),1,racks,hosts,new JobConf(conf));
    Path inDir=new Path("secret-input");
    Path outDir=new Path("secret-output");
    JobConf jConf=mrCluster.createJobConf();
    jConf.set("user-secret-code","abracadabra");
    jConf.setJobName("top-secret");
    Job job=MapReduceTestUtil.createJob(jConf,inDir,outDir,2,2);
    job.waitForCompletion(false);
    assertTrue("Job failed",job.isSuccessful());
    JobID id=job.getJobID();
    Cluster cluster=new Cluster(jConf);
    String user=cluster.getAllJobStatuses()[0].getUsername();
    Path jhPath=new Path(mrCluster.getJobTrackerRunner().getJobTracker().getJobHistoryDir());
    Path inputLogPath=JobHistory.getJobHistoryFile(jhPath,id,user);
    Path inputConfPath=JobHistory.getConfFile(jhPath,id);
    FileSystem fs=inputLogPath.getFileSystem(jConf);
    for (int i=0; i < 100; ++i) {
      if (fs.exists(inputLogPath)) {
        break;
      }
      TimeUnit.MILLISECONDS.wait(100);
    }
    assertTrue("Missing job history file",fs.exists(inputLogPath));
    Path goldTraceFilename=new Path(tempDir,"trace.json");
    Path goldTopologyFilename=new Path(tempDir,"topology.json");
    String[] args=new String[]{goldTraceFilename.toString(),goldTopologyFilename.toString(),inputLogPath.toString(),inputConfPath.toString()};
    Tool analyzer=new TraceBuilder();
    int result=ToolRunner.run(analyzer,args);
    assertEquals("Non-zero exit",0,result);
    Path anonymizedTraceFilename=new Path(tempDir,"trace-anonymized.json");
    Path anonymizedClusterTopologyFilename=new Path(tempDir,"topology-anonymized.json");
    args=new String[]{"-trace",goldTraceFilename.toString(),anonymizedTraceFilename.toString(),"-topology",goldTopologyFilename.toString(),anonymizedClusterTopologyFilename.toString()};
    Tool anonymizer=new Anonymizer();
    result=ToolRunner.run(anonymizer,args);
    assertEquals("Non-zero exit",0,result);
    JobTraceReader reader=new JobTraceReader(anonymizedTraceFilename,conf);
    LoggedJob anonymizedJob=reader.getNext();
    reader.close();
    String currentUser=UserGroupInformation.getCurrentUser().getUserName();
    assertFalse("Username not anonymized!",currentUser.equals(anonymizedJob.getUser().getValue()));
    assertEquals("JobID mismatch!",id.toString(),anonymizedJob.getJobID().toString());
    assertFalse("Queuename mismatch!","default".equals(anonymizedJob.getQueue().getValue()));
    assertFalse("Jobname mismatch!","top-secret".equals(anonymizedJob.getJobName().getValue()));
    for (    Map.Entry<Object,Object> entry : anonymizedJob.getJobProperties().getValue().entrySet()) {
      assertFalse("User sensitive configuration key not anonymized",entry.getKey().toString().equals("user-secret-code"));
      assertFalse("User sensitive data not anonymized",entry.getValue().toString().contains(currentUser));
      assertFalse("User sensitive data not anonymized",entry.getValue().toString().contains("secret"));
    }
    testTasks(anonymizedJob.getMapTasks(),id,TaskType.MAP);
    testTasks(anonymizedJob.getReduceTasks(),id,TaskType.REDUCE);
    testTasks(anonymizedJob.getOtherTasks(),id,null);
    ClusterTopologyReader cReader=new ClusterTopologyReader(anonymizedClusterTopologyFilename,conf);
    LoggedNetworkTopology loggedNetworkTopology=cReader.get();
    testClusterTopology(loggedNetworkTopology,0,"myorg");
  }
  finally {
    if (mrCluster != null) {
      mrCluster.shutdown();
    }
    if (dfsCluster != null) {
      dfsCluster.formatDataNodeDirs();
      dfsCluster.shutdown();
    }
    lfs.delete(tempDir,true);
  }
}
