{
  Configuration conf=new Configuration();
  FileSystem lfs=FileSystem.getLocal(conf);
  Path rootTempDir=new Path(System.getProperty("test.build.data","/tmp"));
  Path tempDir=new Path(rootTempDir,"testNodeNameWithRackNamesOnly");
  tempDir=lfs.makeQualified(tempDir);
  lfs.delete(tempDir,true);
  conf.set(StatePool.DIR_CONFIG,tempDir.toString());
  conf.setBoolean(StatePool.PERSIST_CONFIG,true);
  StatePool pool=new StatePool();
  NodeNameState nState=new NodeNameState();
  String test1="rack1";
  String test2="rack2";
  WordList rackNameState=new WordList("racknames");
  rackNameState.add(test1);
  rackNameState.add(test2);
  nState.setRackNameState(rackNameState);
  try {
    pool.initialize(conf);
    pool.addState(getClass(),nState);
    pool.persist();
    pool=new StatePool();
    conf.setBoolean(StatePool.RELOAD_CONFIG,true);
    pool.initialize(conf);
    State state=pool.getState(getClass());
    assertNotNull("Missing state!",state);
    assertEquals("Incorrect state class!",NodeNameState.class,state.getClass());
    NodeNameState newNState=(NodeNameState)state;
    WordList newFileWordList=newNState.getRackNameState();
    assertTrue("File state failed on reload",newFileWordList.contains(test1));
    assertEquals("File state indexing on reload failed",0,newFileWordList.indexOf(test1));
    assertTrue("File state failed on reload",newFileWordList.contains(test2));
    assertEquals("File state indexing on reload failed",1,newFileWordList.indexOf(test2));
  }
  finally {
    lfs.delete(tempDir,true);
  }
}
