{
  final int TEST_LEN=15;
  for (int i=0; i < TEST_TIMES; i++) {
    int[] z=randGFPoly(RAND.nextInt(TEST_LEN - 1) + 1);
    int[] x=new int[z.length];
    Set<Integer> s=new HashSet<Integer>();
    while (s.size() != z.length) {
      s.add(randGF());
    }
    int t=0;
    for (    int v : s) {
      x[t++]=v;
    }
    int[] y=new int[x.length];
    for (int j=0; j < x.length; j++) {
      y[j]=0;
      for (int k=0; k < x.length; k++) {
        y[j]=GF.add(y[j],GF.multiply(GF.power(x[k],j),z[k]));
      }
    }
    GF.solveVandermondeSystem(x,y);
    assertTrue("Solving Vandermonde system failed",java.util.Arrays.equals(y,z));
  }
}
