{
  String line=readCountedLine();
  if (line == null) {
    return null;
  }
  while (line.indexOf('\f') > 0) {
    line=line.substring(line.indexOf('\f'));
  }
  if (line.length() != 0 && line.charAt(0) == '\f') {
    String subjectLine=readCountedLine();
    if (subjectLine != null && subjectLine.length() != 0 && apparentConfFileHeader(line) && apparentXMLFileStart(subjectLine)) {
      StringBuilder sb=new StringBuilder();
      while (subjectLine != null && subjectLine.indexOf('\f') > 0) {
        subjectLine=subjectLine.substring(subjectLine.indexOf('\f'));
      }
      while (subjectLine != null && (subjectLine.length() == 0 || subjectLine.charAt(0) != '\f')) {
        sb.append(subjectLine);
        subjectLine=readCountedLine();
      }
      if (subjectLine != null) {
        unreadCountedLine(subjectLine);
      }
      return new Pair<String,String>(line,sb.toString());
    }
    return readBalancedLine();
  }
  String endlineString=(version == 0 ? " " : " .");
  if (line.length() < endlineString.length()) {
    return new Pair<String,String>(null,line);
  }
  if (!endlineString.equals(line.substring(line.length() - endlineString.length()))) {
    StringBuilder sb=new StringBuilder(line);
    String addedLine;
    do {
      addedLine=readCountedLine();
      if (addedLine == null) {
        return new Pair<String,String>(null,sb.toString());
      }
      while (addedLine.indexOf('\f') > 0) {
        addedLine=addedLine.substring(addedLine.indexOf('\f'));
      }
      if (addedLine.length() > 0 && addedLine.charAt(0) == '\f') {
        unreadCountedLine(addedLine);
        return new Pair<String,String>(null,sb.toString());
      }
      sb.append("\n");
      sb.append(addedLine);
    }
 while (!endlineString.equals(addedLine.substring(addedLine.length() - endlineString.length())));
    line=sb.toString();
  }
  return new Pair<String,String>(null,line);
}
