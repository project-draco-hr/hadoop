{
  FairScheduler scheduler=(FairScheduler)rm.getResourceScheduler();
  QueueManager queueManager=scheduler.getQueueManager();
  queueManager.getLeafQueue("root.q.subqueue1",true);
  queueManager.getLeafQueue("root.q.subqueue2",true);
  WebResource r=resource();
  ClientResponse response=r.path("ws").path("v1").path("cluster").path("scheduler").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  JSONObject json=response.getEntity(JSONObject.class);
  JSONArray subQueueInfo=json.getJSONObject("scheduler").getJSONObject("schedulerInfo").getJSONObject("rootQueue").getJSONObject("childQueues").getJSONArray("queue").getJSONObject(1).getJSONObject("childQueues").getJSONArray("queue");
  assertEquals(2,subQueueInfo.length());
  try {
    subQueueInfo.getJSONObject(1).getJSONObject("childQueues");
    fail("FairSchedulerQueueInfo should omit field 'childQueues'" + "if child queue is empty.");
  }
 catch (  JSONException je) {
    assertEquals("JSONObject[\"childQueues\"] not found.",je.getMessage());
  }
}
