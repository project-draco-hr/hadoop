{
  Map<String,String[]> pmap=request.getParameterMap();
  try {
    ServletContext context=getServletContext();
    final FSImage nnImage=NameNodeHttpServer.getFsImageFromContext(context);
    final TransferFsImage ff=new TransferFsImage(pmap,request,response);
    final Configuration conf=(Configuration)getServletContext().getAttribute(JspHelper.CURRENT_CONF);
    if (UserGroupInformation.isSecurityEnabled() && !isValidRequestor(request.getRemoteUser(),conf)) {
      response.sendError(HttpServletResponse.SC_FORBIDDEN,"Only Namenode and Secondary Namenode may access this servlet");
      LOG.warn("Received non-NN/SNN request for image or edits from " + request.getRemoteHost());
      return;
    }
    UserGroupInformation.getCurrentUser().doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        if (ff.getImage()) {
          response.setHeader(TransferFsImage.CONTENT_LENGTH,String.valueOf(nnImage.getStorage().getFsImageName().length()));
          TransferFsImage.getFileServer(response.getOutputStream(),nnImage.getStorage().getFsImageName(),getThrottler(conf));
        }
 else         if (ff.getEdit()) {
          response.setHeader(TransferFsImage.CONTENT_LENGTH,String.valueOf(nnImage.getStorage().getFsEditName().length()));
          TransferFsImage.getFileServer(response.getOutputStream(),nnImage.getStorage().getFsEditName(),getThrottler(conf));
        }
 else         if (ff.putImage()) {
          nnImage.validateCheckpointUpload(ff.getToken());
          nnImage.newImageDigest=ff.getNewChecksum();
          MD5Hash downloadImageDigest=reloginIfNecessary().doAs(new PrivilegedExceptionAction<MD5Hash>(){
            @Override public MD5Hash run() throws Exception {
              return TransferFsImage.getFileClient(ff.getInfoServer(),"getimage=1",nnImage.getStorage().getFsImageNameCheckpoint(),true);
            }
          }
);
          if (!nnImage.newImageDigest.equals(downloadImageDigest)) {
            throw new IOException("The downloaded image is corrupt," + " expecting a checksum " + nnImage.newImageDigest + " but received a checksum "+ downloadImageDigest);
          }
          nnImage.checkpointUploadDone();
        }
        return null;
      }
      private UserGroupInformation reloginIfNecessary() throws IOException {
        return UserGroupInformation.loginUserFromKeytabAndReturnUGI(SecurityUtil.getServerPrincipal(conf.get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY),NameNode.getAddress(conf).getHostName()),conf.get(DFSConfigKeys.DFS_NAMENODE_KEYTAB_FILE_KEY));
      }
    }
);
  }
 catch (  Exception ie) {
    String errMsg="GetImage failed. " + StringUtils.stringifyException(ie);
    response.sendError(HttpServletResponse.SC_GONE,errMsg);
    throw new IOException(errMsg);
  }
 finally {
    response.getOutputStream().close();
  }
}
