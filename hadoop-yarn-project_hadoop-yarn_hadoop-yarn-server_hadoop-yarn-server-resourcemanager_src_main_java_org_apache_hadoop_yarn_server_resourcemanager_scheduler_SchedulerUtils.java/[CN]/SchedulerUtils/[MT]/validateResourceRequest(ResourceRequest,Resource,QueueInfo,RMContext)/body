{
  if (resReq.getCapability().getMemory() < 0 || resReq.getCapability().getMemory() > maximumResource.getMemory()) {
    throw new InvalidResourceRequestException("Invalid resource request" + ", requested memory < 0" + ", or requested memory > max configured"+ ", requestedMemory=" + resReq.getCapability().getMemory() + ", maxMemory="+ maximumResource.getMemory());
  }
  if (resReq.getCapability().getVirtualCores() < 0 || resReq.getCapability().getVirtualCores() > maximumResource.getVirtualCores()) {
    throw new InvalidResourceRequestException("Invalid resource request" + ", requested virtual cores < 0" + ", or requested virtual cores > max configured"+ ", requestedVirtualCores=" + resReq.getCapability().getVirtualCores() + ", maxVirtualCores="+ maximumResource.getVirtualCores());
  }
  String labelExp=resReq.getNodeLabelExpression();
  if (!ResourceRequest.ANY.equals(resReq.getResourceName()) && labelExp != null && !labelExp.trim().isEmpty()) {
    throw new InvalidLabelResourceRequestException("Invalid resource request, queue=" + queueInfo.getQueueName() + " specified node label expression in a "+ "resource request has resource name = "+ resReq.getResourceName());
  }
  if (labelExp != null && labelExp.contains("&&")) {
    throw new InvalidLabelResourceRequestException("Invailid resource request, queue=" + queueInfo.getQueueName() + " specified more than one node label "+ "in a node label expression, node label expression = "+ labelExp);
  }
  if (labelExp != null && !labelExp.trim().isEmpty() && queueInfo != null) {
    if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),labelExp,rmContext)) {
      throw new InvalidLabelResourceRequestException("Invalid resource request" + ", queue=" + queueInfo.getQueueName() + " doesn't have permission to access all labels "+ "in resource request. labelExpression of resource request="+ labelExp+ ". Queue labels="+ (queueInfo.getAccessibleNodeLabels() == null ? "" : StringUtils.join(queueInfo.getAccessibleNodeLabels().iterator(),',')));
    }
 else {
      checkQueueLabelInLabelManager(labelExp,rmContext);
    }
  }
}
