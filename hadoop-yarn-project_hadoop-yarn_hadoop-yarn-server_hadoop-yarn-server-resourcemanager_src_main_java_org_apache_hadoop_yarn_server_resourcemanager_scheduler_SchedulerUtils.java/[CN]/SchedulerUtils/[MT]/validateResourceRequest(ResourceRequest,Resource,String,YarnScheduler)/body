{
  if (resReq.getCapability().getMemory() < 0 || resReq.getCapability().getMemory() > maximumResource.getMemory()) {
    throw new InvalidResourceRequestException("Invalid resource request" + ", requested memory < 0" + ", or requested memory > max configured"+ ", requestedMemory=" + resReq.getCapability().getMemory() + ", maxMemory="+ maximumResource.getMemory());
  }
  if (resReq.getCapability().getVirtualCores() < 0 || resReq.getCapability().getVirtualCores() > maximumResource.getVirtualCores()) {
    throw new InvalidResourceRequestException("Invalid resource request" + ", requested virtual cores < 0" + ", or requested virtual cores > max configured"+ ", requestedVirtualCores=" + resReq.getCapability().getVirtualCores() + ", maxVirtualCores="+ maximumResource.getVirtualCores());
  }
  QueueInfo queueInfo=null;
  try {
    queueInfo=scheduler.getQueueInfo(queueName,false,false);
  }
 catch (  IOException e) {
  }
  String labelExp=resReq.getNodeLabelExpression();
  if (labelExp == null && queueInfo != null) {
    labelExp=queueInfo.getDefaultNodeLabelExpression();
    resReq.setNodeLabelExpression(labelExp);
  }
  if (labelExp != null && !labelExp.trim().isEmpty() && queueInfo != null) {
    if (!checkQueueLabelExpression(queueInfo.getAccessibleNodeLabels(),labelExp)) {
      throw new InvalidResourceRequestException("Invalid resource request" + ", queue=" + queueInfo.getQueueName() + " doesn't have permission to access all labels "+ "in resource request. labelExpression of resource request="+ labelExp+ ". Queue labels="+ (queueInfo.getAccessibleNodeLabels() == null ? "" : StringUtils.join(queueInfo.getAccessibleNodeLabels().iterator(),',')));
    }
  }
}
