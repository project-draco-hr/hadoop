{
  OpenFileCtx openFileCtx=openFileMap.get(fileHandle);
  if (openFileCtx == null) {
    LOG.info("No opened stream for fileId:" + fileHandle.getFileId() + " commitOffset="+ commitOffset);
    return true;
  }
  long timeout=30 * 1000;
  long startCommit=System.currentTimeMillis();
  while (true) {
    int ret=openFileCtx.checkCommit(commitOffset);
    if (ret == OpenFileCtx.COMMIT_FINISHED) {
      return true;
    }
 else     if (ret == OpenFileCtx.COMMIT_INACTIVE_CTX) {
      LOG.info("Inactive stream, fileId=" + fileHandle.getFileId() + " commitOffset="+ commitOffset);
      return true;
    }
 else     if (ret == OpenFileCtx.COMMIT_INACTIVE_WITH_PENDING_WRITE) {
      LOG.info("Inactive stream with pending writes, fileId=" + fileHandle.getFileId() + " commitOffset="+ commitOffset);
      return false;
    }
    assert(ret == OpenFileCtx.COMMIT_WAIT || ret == OpenFileCtx.COMMIT_ERROR);
    if (ret == OpenFileCtx.COMMIT_ERROR) {
      return false;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Not committed yet, wait., fileId=" + fileHandle.getFileId() + " commitOffset="+ commitOffset);
    }
    if (System.currentTimeMillis() - startCommit > timeout) {
      return false;
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      LOG.info("Commit is interrupted, fileId=" + fileHandle.getFileId() + " commitOffset="+ commitOffset);
      return false;
    }
  }
}
