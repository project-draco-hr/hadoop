{
  Configuration conf=new Configuration();
  conf.setInt("dfs.blocksize",blockSize);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  DistributedFileSystem dfs=cluster.getFileSystem();
  try {
    dfs.mkdirs(new Path("/foo/dir"));
    String file="/foo/dir/file";
    Path filePath=new Path(file);
    NameNode nn=cluster.getNameNode();
    FSNamesystem fsn=NameNodeAdapter.getNamesystem(nn);
    BlockManager bm=fsn.getBlockManager();
    FSDataOutputStream out=dfs.create(filePath);
    byte[] oldData=AppendTestUtil.randomBytes(seed,fileSize);
    try {
      out.write(oldData);
    }
  finally {
      out.close();
    }
    LocatedBlocks oldBlocks=NameNodeAdapter.getBlockLocations(nn,file,0,fileSize);
    assertBlocks(bm,oldBlocks,true);
    out=dfs.create(filePath,true);
    byte[] newData=AppendTestUtil.randomBytes(seed,fileSize);
    try {
      out.write(newData);
    }
  finally {
      out.close();
    }
    dfs.deleteOnExit(filePath);
    LocatedBlocks newBlocks=NameNodeAdapter.getBlockLocations(nn,file,0,fileSize);
    assertBlocks(bm,newBlocks,true);
    assertBlocks(bm,oldBlocks,false);
    FSDataInputStream in=dfs.open(filePath);
    byte[] result=null;
    try {
      result=readAll(in);
    }
  finally {
      in.close();
    }
    Assert.assertArrayEquals(newData,result);
    cluster.restartNameNode();
    nn=cluster.getNameNode();
    in=dfs.open(filePath);
    try {
      result=readAll(in);
    }
  finally {
      in.close();
    }
    Assert.assertArrayEquals(newData,result);
    NameNodeAdapter.enterSafeMode(nn,false);
    NameNodeAdapter.saveNamespace(nn);
    cluster.restartNameNode();
    nn=cluster.getNameNode();
    in=dfs.open(filePath);
    try {
      result=readAll(in);
    }
  finally {
      in.close();
    }
    Assert.assertArrayEquals(newData,result);
  }
  finally {
    if (dfs != null) {
      dfs.close();
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
