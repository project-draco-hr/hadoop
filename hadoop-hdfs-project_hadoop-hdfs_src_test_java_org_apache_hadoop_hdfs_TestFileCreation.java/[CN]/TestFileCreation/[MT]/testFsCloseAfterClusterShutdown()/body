{
  System.out.println("test testFsCloseAfterClusterShutdown start");
  final int DATANODE_NUM=3;
  Configuration conf=new HdfsConfiguration();
  conf.setInt(DFS_NAMENODE_REPLICATION_MIN_KEY,3);
  conf.setBoolean("ipc.client.ping",false);
  conf.setInt("ipc.ping.interval",10000);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build();
  DistributedFileSystem dfs=null;
  try {
    cluster.waitActive();
    dfs=cluster.getFileSystem();
    final String f=DIR + "testFsCloseAfterClusterShutdown";
    final Path fpath=new Path(f);
    FSDataOutputStream out=TestFileCreation.createFile(dfs,fpath,DATANODE_NUM);
    out.write("something_test".getBytes());
    out.hflush();
    cluster.stopDataNode(2);
    boolean hasException=false;
    try {
      out.close();
      System.out.println("testFsCloseAfterClusterShutdown: Error here");
    }
 catch (    IOException e) {
      hasException=true;
    }
    assertTrue("Failed to close file after cluster shutdown",hasException);
  }
  finally {
    System.out.println("testFsCloseAfterClusterShutdown successful");
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
