{
  numReduces=0;
  numMaps=0;
  final Map<TaskId,Task> tasks=job.getTasks();
  if (tasks == null) {
    return;
  }
  for (  Task task : tasks.values()) {
switch (task.getType()) {
case MAP:
switch (task.getState()) {
case RUNNING:
        ++this.mapsRunning;
      break;
case SCHEDULED:
    ++this.mapsPending;
  break;
}
break;
case REDUCE:
switch (task.getState()) {
case RUNNING:
++this.reducesRunning;
break;
case SCHEDULED:
++this.reducesPending;
break;
}
break;
}
Map<TaskAttemptId,TaskAttempt> attempts=task.getAttempts();
int newAttempts, running, successful, failed, killed;
for (TaskAttempt attempt : attempts.values()) {
newAttempts=0;
running=0;
successful=0;
failed=0;
killed=0;
if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {
++newAttempts;
}
 else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {
++running;
}
 else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt.getState())) {
++successful;
}
 else if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {
++failed;
}
 else if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {
++killed;
}
switch (task.getType()) {
case MAP:
this.newMapAttempts+=newAttempts;
this.runningMapAttempts+=running;
this.successfulMapAttempts+=successful;
this.failedMapAttempts+=failed;
this.killedMapAttempts+=killed;
break;
case REDUCE:
this.newReduceAttempts+=newAttempts;
this.runningReduceAttempts+=running;
this.successfulReduceAttempts+=successful;
this.failedReduceAttempts+=failed;
this.killedReduceAttempts+=killed;
break;
}
}
}
}
