{
  AccessControlList acl=protocolToAcl.get(protocol);
  if (acl == null) {
    throw new AuthorizationException("Protocol " + protocol + " is not known.");
  }
  KerberosInfo krbInfo=protocol.getAnnotation(KerberosInfo.class);
  String clientPrincipal=null;
  if (krbInfo != null) {
    String clientKey=krbInfo.clientPrincipal();
    if (clientKey != null && !clientKey.equals("")) {
      if (hostname == null) {
        throw new AuthorizationException("Can't authorize client when client hostname is null");
      }
      try {
        clientPrincipal=SecurityUtil.getServerPrincipal(conf.get(clientKey),hostname);
      }
 catch (      IOException e) {
        throw (AuthorizationException)new AuthorizationException("Can't figure out Kerberos principal name for connection from " + hostname + " for user="+ user+ " protocol="+ protocol).initCause(e);
      }
    }
  }
  String shortName=clientPrincipal;
  if (clientPrincipal != null) {
    try {
      shortName=new KerberosName(clientPrincipal).getShortName();
    }
 catch (    IOException e) {
      LOG.warn("couldn't get short name from " + clientPrincipal,e);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("for protocol authorization compare (" + clientPrincipal + "): "+ shortName+ " with "+ user.getShortUserName());
  }
  if ((shortName != null && !shortName.equals(user.getShortUserName())) || !acl.isUserAllowed(user)) {
    AUDITLOG.warn(AUTHZ_FAILED_FOR + user + " for protocol="+ protocol);
    throw new AuthorizationException("User " + user + " is not authorized for protocol "+ protocol);
  }
  AUDITLOG.info(AUTHZ_SUCCESSFULL_FOR + user + " for protocol="+ protocol);
}
