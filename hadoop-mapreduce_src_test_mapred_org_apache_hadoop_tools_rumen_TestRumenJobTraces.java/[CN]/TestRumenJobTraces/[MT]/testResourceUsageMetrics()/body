{
  final long cpuUsage=100;
  final long pMemUsage=200;
  final long vMemUsage=300;
  final long heapUsage=400;
  ResourceUsageMetrics metrics=new ResourceUsageMetrics();
  metrics.setCumulativeCpuUsage(cpuUsage);
  metrics.setPhysicalMemoryUsage(pMemUsage);
  metrics.setVirtualMemoryUsage(vMemUsage);
  metrics.setHeapUsage(heapUsage);
  assertEquals("Cpu usage values mismatch via set",cpuUsage,metrics.getCumulativeCpuUsage());
  assertEquals("Physical memory usage values mismatch via set",pMemUsage,metrics.getPhysicalMemoryUsage());
  assertEquals("Virtual memory usage values mismatch via set",vMemUsage,metrics.getVirtualMemoryUsage());
  assertEquals("Heap usage values mismatch via set",heapUsage,metrics.getHeapUsage());
  testResourceUsageMetricViaDeepCompare(metrics,cpuUsage,vMemUsage,pMemUsage,heapUsage,true);
  testResourceUsageMetricViaDeepCompare(metrics,0,vMemUsage,pMemUsage,heapUsage,false);
  testResourceUsageMetricViaDeepCompare(metrics,cpuUsage,vMemUsage,0,heapUsage,false);
  testResourceUsageMetricViaDeepCompare(metrics,cpuUsage,0,pMemUsage,heapUsage,false);
  testResourceUsageMetricViaDeepCompare(metrics,cpuUsage,vMemUsage,pMemUsage,0,false);
  ResourceUsageMetrics metrics2=new ResourceUsageMetrics(){
    @Override public int size(){
      return -1;
    }
  }
;
  metrics2.setCumulativeCpuUsage(cpuUsage);
  metrics2.setPhysicalMemoryUsage(pMemUsage);
  metrics2.setVirtualMemoryUsage(vMemUsage);
  metrics2.setHeapUsage(heapUsage);
  testResourceUsageMetricViaDeepCompare(metrics2,cpuUsage,vMemUsage,pMemUsage,heapUsage,false);
}
