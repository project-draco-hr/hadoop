{
  MemoryRMStateStore memStore=new MemoryRMStateStore(){
    volatile boolean wait=true;
    @Override public void serviceStop() throws Exception {
      wait=false;
      super.serviceStop();
    }
    @Override protected void handleStoreEvent(    RMStateStoreEvent event){
      while (wait)       ;
      super.handleStoreEvent(event);
    }
  }
;
  memStore.init(conf);
  final MockRM rm1=createMockRM(conf,memStore);
  rm1.start();
  final ArrayList<RMApp> appList=new ArrayList<RMApp>();
  final int NUM_APPS=5;
  for (int i=0; i < NUM_APPS; i++) {
    RMApp app=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null,"MAPREDUCE",false);
    appList.add(app);
    rm1.waitForState(app.getApplicationId(),RMAppState.NEW_SAVING);
  }
  Map<ApplicationId,ApplicationState> rmAppState=memStore.getState().getApplicationState();
  Assert.assertTrue(rmAppState.size() == 0);
  rm1.stop();
  for (  RMApp app : appList) {
    ApplicationState appState=rmAppState.get(app.getApplicationId());
    Assert.assertNotNull(appState);
    Assert.assertEquals(0,appState.getAttemptCount());
    Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),app.getApplicationSubmissionContext().getApplicationId());
  }
  Assert.assertTrue(rmAppState.size() == NUM_APPS);
}
