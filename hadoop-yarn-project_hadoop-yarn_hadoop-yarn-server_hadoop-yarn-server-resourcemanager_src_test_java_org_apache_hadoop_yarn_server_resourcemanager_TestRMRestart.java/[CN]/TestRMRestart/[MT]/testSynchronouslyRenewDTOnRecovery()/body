{
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm1=new MockRM(conf,memStore);
  rm1.start();
  final MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app0=rm1.submitApp(200);
  final MockAM am0=MockRM.launchAndRegisterAM(app0,rm1,nm1);
  MockRM rm2=new MockRM(conf,memStore){
    @Override protected ResourceTrackerService createResourceTrackerService(){
      return new ResourceTrackerService(this.rmContext,this.nodesListManager,this.nmLivelinessMonitor,this.rmContext.getContainerTokenSecretManager(),this.rmContext.getNMTokenSecretManager()){
        @Override protected void serviceStart() throws Exception {
          super.serviceStart();
          nm1.setResourceTrackerService(getResourceTrackerService());
          NMContainerStatus status=TestRMRestart.createNMContainerStatus(am0.getApplicationAttemptId(),1,ContainerState.COMPLETE);
          nm1.registerNode(Arrays.asList(status));
        }
      }
;
    }
  }
;
  rm2.start();
  RMApp loadedApp0=rm2.getRMContext().getRMApps().get(app0.getApplicationId());
  int timeoutSecs=0;
  while (loadedApp0.getAppAttempts().size() != 2 && timeoutSecs++ < 40) {
    Thread.sleep(200);
  }
  MockAM am1=MockRM.launchAndRegisterAM(loadedApp0,rm2,nm1);
  MockRM.finishAMAndVerifyAppState(loadedApp0,rm2,nm1,am1);
}
