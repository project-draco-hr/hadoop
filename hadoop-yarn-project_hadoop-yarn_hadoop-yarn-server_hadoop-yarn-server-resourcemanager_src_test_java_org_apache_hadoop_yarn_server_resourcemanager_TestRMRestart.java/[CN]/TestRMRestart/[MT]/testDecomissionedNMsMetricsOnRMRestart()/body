{
  YarnConfiguration conf=new YarnConfiguration();
  conf.set(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,hostFile.getAbsolutePath());
  writeToHostsFile("");
  final DrainDispatcher dispatcher=new DrainDispatcher();
  MockRM rm1=new MockRM(conf){
    @Override protected Dispatcher createDispatcher(){
      return dispatcher;
    }
  }
;
  rm1.start();
  MockNM nm1=rm1.registerNode("localhost:1234",8000);
  MockNM nm2=rm1.registerNode("host2:1234",8000);
  Assert.assertEquals(0,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
  String ip=NetUtils.normalizeHostName("localhost");
  writeToHostsFile("host2",ip);
  rm1.getNodesListManager().refreshNodes(conf);
  NodeHeartbeatResponse nodeHeartbeat=nm1.nodeHeartbeat(true);
  Assert.assertTrue(NodeAction.SHUTDOWN.equals(nodeHeartbeat.getNodeAction()));
  nodeHeartbeat=nm2.nodeHeartbeat(true);
  Assert.assertTrue("The decommisioned metrics are not updated",NodeAction.SHUTDOWN.equals(nodeHeartbeat.getNodeAction()));
  dispatcher.await();
  Assert.assertEquals(2,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
  rm1.stop();
  Assert.assertEquals(0,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
  MockRM rm2=new MockRM(conf);
  rm2.start();
  Assert.assertEquals(2,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
  rm2.stop();
}
