{
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  RMState rmState=memStore.getState();
  Map<ApplicationId,ApplicationStateData> rmAppState=rmState.getApplicationState();
  MockRM rm1=createMockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app1=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",1,null);
  RMApp app2=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null);
  ApplicationStateData appState=rmAppState.get(app1.getApplicationId());
  Assert.assertNotNull(appState);
  Assert.assertEquals(0,appState.getAttemptCount());
  Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),app1.getApplicationSubmissionContext().getApplicationId());
  nm1.nodeHeartbeat(true);
  RMAppAttempt attempt=app1.getCurrentAppAttempt();
  ApplicationAttemptId attemptId1=attempt.getAppAttemptId();
  rm1.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
  Assert.assertEquals(1,appState.getAttemptCount());
  ApplicationAttemptStateData attemptState=appState.getAttempt(attemptId1);
  Assert.assertNotNull(attemptState);
  Assert.assertEquals(BuilderUtils.newContainerId(attemptId1,1),attemptState.getMasterContainer().getId());
  conf.setInt(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS,3000);
  MockRM rm2=createMockRM(conf,memStore);
  rm2.start();
  Assert.assertEquals(2,rm2.getRMContext().getRMApps().get(app2.getApplicationId()).getMaxAppAttempts());
  Assert.assertEquals(2,rm2.getRMContext().getRMApps().size());
  rm2.waitForState(app1.getApplicationId(),RMAppState.FAILED);
  rm2.waitForState(app2.getApplicationId(),RMAppState.ACCEPTED);
  Assert.assertEquals(RMAppState.FAILED,rmAppState.get(app1.getApplicationId()).getState());
  Assert.assertNull(rmAppState.get(app2.getApplicationId()).getState());
}
