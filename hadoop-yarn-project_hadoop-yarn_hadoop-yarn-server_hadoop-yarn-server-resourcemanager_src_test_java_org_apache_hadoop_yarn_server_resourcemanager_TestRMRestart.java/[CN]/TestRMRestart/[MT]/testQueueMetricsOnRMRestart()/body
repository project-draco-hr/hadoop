{
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  QueueMetrics qm1=rm1.getResourceScheduler().getRootQueueMetrics();
  resetQueueMetrics(qm1);
  assertQueueMetrics(qm1,0,0,0,0);
  RMApp app1=rm1.submitApp(200);
  assertQueueMetrics(qm1,1,1,0,0);
  nm1.nodeHeartbeat(true);
  RMAppAttempt attempt1=app1.getCurrentAppAttempt();
  ApplicationAttemptId attemptId1=attempt1.getAppAttemptId();
  rm1.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
  MockAM am1=rm1.sendAMLaunched(attempt1.getAppAttemptId());
  am1.registerAppAttempt();
  am1.allocate("127.0.0.1",1000,1,new ArrayList<ContainerId>());
  nm1.nodeHeartbeat(true);
  List<Container> conts=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
  while (conts.size() == 0) {
    nm1.nodeHeartbeat(true);
    conts.addAll(am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
    Thread.sleep(500);
  }
  assertQueueMetrics(qm1,1,0,1,0);
  MockRM rm2=new MockRM(conf,memStore);
  rm2.start();
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  QueueMetrics qm2=rm2.getResourceScheduler().getRootQueueMetrics();
  resetQueueMetrics(qm2);
  assertQueueMetrics(qm2,0,0,0,0);
  RMApp loadedApp1=rm2.getRMContext().getRMApps().get(app1.getApplicationId());
  am1.setAMRMProtocol(rm2.getApplicationMasterService());
  am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>());
  nm1.nodeHeartbeat(true);
  nm1=new MockNM("127.0.0.1:1234",15120,rm2.getResourceTrackerService());
  List<ContainerStatus> containerStatuses=new ArrayList<ContainerStatus>();
  ContainerStatus containerStatus=BuilderUtils.newContainerStatus(BuilderUtils.newContainerId(loadedApp1.getCurrentAppAttempt().getAppAttemptId(),1),ContainerState.COMPLETE,"Killed AM container",143);
  containerStatuses.add(containerStatus);
  nm1.registerNode(containerStatuses);
  int timeoutSecs=0;
  while (loadedApp1.getAppAttempts().size() != 2 && timeoutSecs++ < 40) {
    ;
    Thread.sleep(200);
  }
  assertQueueMetrics(qm2,1,1,0,0);
  nm1.nodeHeartbeat(true);
  attempt1=loadedApp1.getCurrentAppAttempt();
  attemptId1=attempt1.getAppAttemptId();
  rm2.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
  assertQueueMetrics(qm2,1,0,1,0);
  am1=rm2.sendAMLaunched(attempt1.getAppAttemptId());
  am1.registerAppAttempt();
  am1.allocate("127.0.0.1",1000,3,new ArrayList<ContainerId>());
  nm1.nodeHeartbeat(true);
  conts=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
  while (conts.size() == 0) {
    nm1.nodeHeartbeat(true);
    conts.addAll(am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
    Thread.sleep(500);
  }
  finishApplicationMaster(loadedApp1,rm2,nm1,am1);
  assertQueueMetrics(qm2,1,0,0,1);
  rm2.stop();
  rm1.stop();
}
