{
  Configuration conf=new Configuration();
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
  if (!getSchedulerType().equals(SchedulerType.CAPACITY)) {
    return;
  }
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  int CONTAINER_MEMORY=1024;
  RMApp app0=rm1.submitApp(CONTAINER_MEMORY);
  MockAM am0=MockRM.launchAM(app0,rm1,nm1);
  nm1.nodeHeartbeat(am0.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  am0.waitForState(RMAppAttemptState.FAILED);
  for (int i=0; i < 4; i++) {
    am0=MockRM.launchAM(app0,rm1,nm1);
    am0.registerAppAttempt();
    CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
    FiCaSchedulerApp schedulerAppAttempt=cs.getSchedulerApplications().get(app0.getApplicationId()).getCurrentAppAttempt();
    cs.killPreemptedContainer(schedulerAppAttempt.getRMContainer(app0.getCurrentAppAttempt().getMasterContainer().getId()));
  }
  am0=MockRM.launchAM(app0,rm1,nm1);
  am0.registerAppAttempt();
  rm1.killApp(app0.getApplicationId());
  rm1.waitForState(app0.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.KILLED);
  MockRM rm2=null;
  try {
    rm2=new MockRM(conf,memStore);
    rm2.start();
    Assert.assertTrue("RM start successfully",true);
  }
 catch (  Exception e) {
    LOG.debug("Exception on start",e);
    Assert.fail("RM should start with out any issue");
  }
 finally {
    rm1.stop();
  }
}
