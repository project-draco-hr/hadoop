{
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  RMState rmState=memStore.getState();
  Map<ApplicationId,ApplicationState> rmAppState=rmState.getApplicationState();
  MockRM rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app0=rm1.submitApp(200);
  MockAM am0=launchAM(app0,rm1,nm1);
  nm1.nodeHeartbeat(am0.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  am0.waitForState(RMAppAttemptState.FAILED);
  ApplicationState appState=rmAppState.get(app0.getApplicationId());
  Assert.assertEquals(RMAppAttemptState.FAILED,appState.getAttempt(am0.getApplicationAttemptId()).getState());
  Assert.assertNull(rmAppState.get(app0.getApplicationId()).getState());
  rm1.waitForState(app0.getApplicationId(),RMAppState.ACCEPTED);
  MockRM rm2=new MockRM(conf,memStore);
  rm2.start();
  RMApp recoveredApp=rm2.getRMContext().getRMApps().get(app0.getApplicationId());
  Assert.assertEquals(RMAppAttemptState.FAILED,recoveredApp.getAppAttempts().get(am0.getApplicationAttemptId()).getAppAttemptState());
  rm1.stop();
  rm2.stop();
}
