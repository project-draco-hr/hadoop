{
  File nodeLabelFsStoreDir=new File("target",this.getClass().getSimpleName() + "-testRMRestartNodeMapping");
  if (nodeLabelFsStoreDir.exists()) {
    FileUtils.deleteDirectory(nodeLabelFsStoreDir);
  }
  nodeLabelFsStoreDir.deleteOnExit();
  String nodeLabelFsStoreDirURI=nodeLabelFsStoreDir.toURI().toString();
  conf.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,nodeLabelFsStoreDirURI);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
  MockRM rm1=new MockRM(conf,memStore){
    @Override protected RMNodeLabelsManager createNodeLabelManager(){
      RMNodeLabelsManager mgr=new RMNodeLabelsManager();
      mgr.init(getConfig());
      return mgr;
    }
  }
;
  rm1.init(conf);
  rm1.start();
  RMNodeLabelsManager nodeLabelManager=rm1.getRMContext().getNodeLabelManager();
  Set<String> clusterNodeLabels=new HashSet<String>();
  clusterNodeLabels.add("x");
  clusterNodeLabels.add("y");
  nodeLabelManager.addToCluserNodeLabelsWithDefaultExclusivity(clusterNodeLabels);
  NodeId n1=NodeId.newInstance("h1",1234);
  NodeId n2=NodeId.newInstance("h1",1235);
  NodeId nihost=NodeId.newInstance("h1",0);
  nodeLabelManager.replaceLabelsOnNode(ImmutableMap.of(n1,toSet("x")));
  nodeLabelManager.replaceLabelsOnNode(ImmutableMap.of(n2,toSet("x")));
  nodeLabelManager.replaceLabelsOnNode(ImmutableMap.of(nihost,toSet("y")));
  nodeLabelManager.replaceLabelsOnNode(ImmutableMap.of(n1,toSet("x")));
  MockRM rm2=null;
  for (int i=0; i < 2; i++) {
    rm2=new MockRM(conf,memStore){
      @Override protected RMNodeLabelsManager createNodeLabelManager(){
        RMNodeLabelsManager mgr=new RMNodeLabelsManager();
        mgr.init(getConfig());
        return mgr;
      }
    }
;
    rm2.init(conf);
    rm2.start();
    nodeLabelManager=rm2.getRMContext().getNodeLabelManager();
    Map<String,Set<NodeId>> labelsToNodes=nodeLabelManager.getLabelsToNodes(toSet("x"));
    Assert.assertEquals(1,null == labelsToNodes.get("x") ? 0 : labelsToNodes.get("x").size());
  }
  rm1.stop();
  rm2.stop();
}
