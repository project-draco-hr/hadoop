{
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  for (int i=10; i > 0; i--) {
    ApplicationState appState=mock(ApplicationState.class);
    when(appState.getAppId()).thenReturn(ApplicationId.newInstance(1234,i));
    memStore.getState().getApplicationState().put(appState.getAppId(),appState);
  }
  MockRM rm1=new MockRM(conf,memStore){
    @Override protected RMAppManager createRMAppManager(){
      return new TestRMAppManager(this.rmContext,this.scheduler,this.masterService,this.applicationACLsManager,conf);
    }
class TestRMAppManager extends RMAppManager {
      ApplicationId prevId=ApplicationId.newInstance(1234,0);
      public TestRMAppManager(      RMContext context,      YarnScheduler scheduler,      ApplicationMasterService masterService,      ApplicationACLsManager applicationACLsManager,      Configuration conf){
        super(context,scheduler,masterService,applicationACLsManager,conf);
      }
      @Override protected void recoverApplication(      ApplicationState appState,      RMState rmState) throws Exception {
        Assert.assertTrue(rmState.getApplicationState().size() > 0);
        Assert.assertTrue(appState.getAppId().compareTo(prevId) > 0);
        prevId=appState.getAppId();
      }
    }
  }
;
  rm1.start();
}
