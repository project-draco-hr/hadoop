{
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
  MemoryRMStateStore memStore=new MemoryRMStateStore(){
    int count=0;
    @Override public void updateApplicationStateInternal(    ApplicationId appId,    ApplicationStateData appStateData) throws Exception {
      if (count == 0) {
        LOG.info(appId + " final state is not saved.");
        count++;
      }
 else {
        super.updateApplicationStateInternal(appId,appStateData);
      }
    }
  }
;
  memStore.init(conf);
  RMState rmState=memStore.getState();
  Map<ApplicationId,ApplicationStateData> rmAppState=rmState.getApplicationState();
  MockRM rm1=createMockRM(conf,memStore);
  rm1.start();
  MockNM nm1=rm1.registerNode("127.0.0.1:1234",15120);
  RMApp app0=rm1.submitApp(200);
  MockAM am0=MockRM.launchAndRegisterAM(app0,rm1,nm1);
  FinishApplicationMasterRequest req=FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.SUCCEEDED,"","");
  am0.unregisterAppAttempt(req,true);
  rm1.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FINISHING);
  Assert.assertNull(rmAppState.get(app0.getApplicationId()).getState());
  MockRM rm2=createMockRM(conf,memStore);
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  rm2.start();
  rm2.waitForState(app0.getCurrentAppAttempt().getAppAttemptId(),RMAppAttemptState.FINISHED);
  rm2.waitForState(app0.getApplicationId(),RMAppState.FINISHED);
  Assert.assertEquals(RMAppState.FINISHED,rmAppState.get(app0.getApplicationId()).getState());
}
