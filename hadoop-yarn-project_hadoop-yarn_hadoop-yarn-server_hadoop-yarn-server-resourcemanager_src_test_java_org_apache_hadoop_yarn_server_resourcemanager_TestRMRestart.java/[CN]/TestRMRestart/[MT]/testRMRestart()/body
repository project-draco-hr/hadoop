{
  Logger rootLogger=LogManager.getRootLogger();
  rootLogger.setLevel(Level.DEBUG);
  ExitUtil.disableSystemExit();
  YarnConfiguration conf=new YarnConfiguration();
  conf.set(YarnConfiguration.RECOVERY_ENABLED,"true");
  conf.set(YarnConfiguration.RM_STORE,"org.apache.hadoop.yarn.server.resourcemanager.recovery.MemoryRMStateStore");
  conf.set(YarnConfiguration.RM_SCHEDULER,"org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler");
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  RMState rmState=memStore.getState();
  Map<ApplicationId,ApplicationState> rmAppState=rmState.getApplicationState();
  MockRM rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("h1:1234",15120,rm1.getResourceTrackerService());
  MockNM nm2=new MockNM("h2:5678",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  nm2.registerNode();
  RMApp app0=rm1.submitApp(200);
  RMAppAttempt attempt0=app0.getCurrentAppAttempt();
  Assert.assertEquals(1,rmAppState.size());
  nm1.nodeHeartbeat(true);
  MockAM am0=rm1.sendAMLaunched(attempt0.getAppAttemptId());
  am0.registerAppAttempt();
  am0.unregisterAppAttempt();
  nm1.nodeHeartbeat(attempt0.getAppAttemptId(),1,ContainerState.COMPLETE);
  am0.waitForState(RMAppAttemptState.FINISHED);
  rm1.waitForState(app0.getApplicationId(),RMAppState.FINISHED);
  Assert.assertEquals(0,rmAppState.size());
  RMApp app1=rm1.submitApp(200);
  ApplicationState appState=rmAppState.get(app1.getApplicationId());
  Assert.assertNotNull(appState);
  Assert.assertEquals(0,appState.getAttemptCount());
  Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),app1.getApplicationSubmissionContext().getApplicationId());
  nm1.nodeHeartbeat(true);
  RMAppAttempt attempt1=app1.getCurrentAppAttempt();
  ApplicationAttemptId attemptId1=attempt1.getAppAttemptId();
  rm1.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
  Assert.assertEquals(1,appState.getAttemptCount());
  ApplicationAttemptState attemptState=appState.getAttempt(attemptId1);
  Assert.assertNotNull(attemptState);
  Assert.assertEquals(BuilderUtils.newContainerId(attemptId1,1),attemptState.getMasterContainer().getId());
  MockAM am1=rm1.sendAMLaunched(attempt1.getAppAttemptId());
  am1.registerAppAttempt();
  am1.allocate("h1",1000,1,new ArrayList<ContainerId>());
  nm1.nodeHeartbeat(true);
  List<Container> conts=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
  while (conts.size() == 0) {
    nm1.nodeHeartbeat(true);
    conts.addAll(am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
    Thread.sleep(500);
  }
  RMApp app2=rm1.submitApp(200);
  appState=rmAppState.get(app2.getApplicationId());
  Assert.assertNotNull(appState);
  Assert.assertEquals(0,appState.getAttemptCount());
  Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),app2.getApplicationSubmissionContext().getApplicationId());
  RMApp appUnmanaged=rm1.submitApp(200,"someApp","someUser",null,true,null);
  ApplicationAttemptId unmanagedAttemptId=appUnmanaged.getCurrentAppAttempt().getAppAttemptId();
  ApplicationId unmanagedAppId=appUnmanaged.getApplicationId();
  appState=rmAppState.get(unmanagedAppId);
  Assert.assertNotNull(appState);
  rm1.waitForState(unmanagedAttemptId,RMAppAttemptState.LAUNCHED);
  rm1.waitForState(unmanagedAppId,RMAppState.ACCEPTED);
  Assert.assertEquals(1,appState.getAttemptCount());
  Assert.assertEquals(appState.getApplicationSubmissionContext().getApplicationId(),appUnmanaged.getApplicationSubmissionContext().getApplicationId());
  MockRM rm2=new MockRM(conf,memStore);
  rm2.start();
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  nm2.setResourceTrackerService(rm2.getResourceTrackerService());
  Assert.assertEquals(2,rm2.getRMContext().getRMApps().size());
  RMApp loadedApp1=rm2.getRMContext().getRMApps().get(app1.getApplicationId());
  Assert.assertNotNull(loadedApp1);
  Assert.assertEquals(app1.getApplicationSubmissionContext().getApplicationId(),loadedApp1.getApplicationSubmissionContext().getApplicationId());
  RMApp loadedApp2=rm2.getRMContext().getRMApps().get(app2.getApplicationId());
  Assert.assertNotNull(loadedApp2);
  Assert.assertEquals(app2.getApplicationSubmissionContext().getApplicationId(),loadedApp2.getApplicationSubmissionContext().getApplicationId());
  rm2.waitForState(loadedApp1.getApplicationId(),RMAppState.ACCEPTED);
  rm2.waitForState(loadedApp2.getApplicationId(),RMAppState.ACCEPTED);
  Assert.assertEquals(2,loadedApp1.getAppAttempts().size());
  Assert.assertEquals(1,loadedApp2.getAppAttempts().size());
  am1.setAMRMProtocol(rm2.getApplicationMasterService());
  AllocateResponse allocResponse=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>());
  Assert.assertTrue(allocResponse.getReboot());
  NodeHeartbeatResponse hbResponse=nm1.nodeHeartbeat(true);
  Assert.assertEquals(NodeAction.REBOOT,hbResponse.getNodeAction());
  hbResponse=nm2.nodeHeartbeat(true);
  Assert.assertEquals(NodeAction.REBOOT,hbResponse.getNodeAction());
  nm1=rm2.registerNode("h1:1234",15120);
  nm2=rm2.registerNode("h2:5678",15120);
  hbResponse=nm1.nodeHeartbeat(true);
  Assert.assertTrue(NodeAction.REBOOT != hbResponse.getNodeAction());
  hbResponse=nm2.nodeHeartbeat(true);
  Assert.assertTrue(NodeAction.REBOOT != hbResponse.getNodeAction());
  attempt1=loadedApp1.getCurrentAppAttempt();
  attemptId1=attempt1.getAppAttemptId();
  rm2.waitForState(attemptId1,RMAppAttemptState.ALLOCATED);
  appState=rmAppState.get(loadedApp1.getApplicationId());
  attemptState=appState.getAttempt(attemptId1);
  Assert.assertNotNull(attemptState);
  Assert.assertEquals(BuilderUtils.newContainerId(attemptId1,1),attemptState.getMasterContainer().getId());
  MockNM am1Node=nm1;
  if (attemptState.getMasterContainer().getNodeId().toString().contains("h2")) {
    am1Node=nm2;
  }
  RMAppAttempt attempt2=loadedApp2.getCurrentAppAttempt();
  ApplicationAttemptId attemptId2=attempt2.getAppAttemptId();
  rm2.waitForState(attemptId2,RMAppAttemptState.ALLOCATED);
  appState=rmAppState.get(loadedApp2.getApplicationId());
  attemptState=appState.getAttempt(attemptId2);
  Assert.assertNotNull(attemptState);
  Assert.assertEquals(BuilderUtils.newContainerId(attemptId2,1),attemptState.getMasterContainer().getId());
  MockNM am2Node=nm1;
  if (attemptState.getMasterContainer().getNodeId().toString().contains("h2")) {
    am2Node=nm2;
  }
  am1=rm2.sendAMLaunched(attempt1.getAppAttemptId());
  am1.registerAppAttempt();
  MockAM am2=rm2.sendAMLaunched(attempt2.getAppAttemptId());
  am2.registerAppAttempt();
  am1.allocate("h1",1000,3,new ArrayList<ContainerId>());
  am2.allocate("h2",1000,1,new ArrayList<ContainerId>());
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(true);
  conts=am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
  while (conts.size() == 0) {
    nm1.nodeHeartbeat(true);
    nm2.nodeHeartbeat(true);
    conts.addAll(am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
    Thread.sleep(500);
  }
  am1.unregisterAppAttempt();
  am1Node.nodeHeartbeat(attempt1.getAppAttemptId(),1,ContainerState.COMPLETE);
  am1.waitForState(RMAppAttemptState.FINISHED);
  am2.unregisterAppAttempt();
  am2Node.nodeHeartbeat(attempt2.getAppAttemptId(),1,ContainerState.COMPLETE);
  am2.waitForState(RMAppAttemptState.FINISHED);
  rm2.stop();
  rm1.stop();
  Assert.assertEquals(0,rmAppState.size());
}
