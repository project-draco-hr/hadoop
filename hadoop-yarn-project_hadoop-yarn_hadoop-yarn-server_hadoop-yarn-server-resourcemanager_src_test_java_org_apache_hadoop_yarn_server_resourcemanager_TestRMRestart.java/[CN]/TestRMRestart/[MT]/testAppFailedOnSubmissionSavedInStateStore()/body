{
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(conf);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm1=new TestSecurityMockRM(conf,memStore){
    @Override protected RMAppManager createRMAppManager(){
      return new TestRMAppManager(this.rmContext,this.scheduler,this.masterService,this.applicationACLsManager,conf);
    }
class TestRMAppManager extends RMAppManager {
      public TestRMAppManager(      RMContext context,      YarnScheduler scheduler,      ApplicationMasterService masterService,      ApplicationACLsManager applicationACLsManager,      Configuration conf){
        super(context,scheduler,masterService,applicationACLsManager,conf);
      }
      @Override protected Credentials parseCredentials(      ApplicationSubmissionContext application) throws IOException {
        throw new IOException("Parsing credential error.");
      }
    }
  }
;
  rm1.start();
  RMApp app1=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null,"MAPREDUCE",false);
  rm1.waitForState(app1.getApplicationId(),RMAppState.FAILED);
  Assert.assertEquals(RMAppState.FAILED,memStore.getState().getApplicationState().get(app1.getApplicationId()).getState());
  MockRM rm2=new TestSecurityMockRM(conf,memStore);
  rm2.start();
  rm2.waitForState(app1.getApplicationId(),RMAppState.FAILED);
}
