{
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  RMState rmState=memStore.getState();
  Map<ApplicationId,ApplicationState> rmAppState=rmState.getApplicationState();
  MockRM rm1=createMockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app0=rm1.submitApp(200);
  MockAM am0=launchAM(app0,rm1,nm1);
  FinishApplicationMasterRequest req=FinishApplicationMasterRequest.newInstance(FinalApplicationStatus.SUCCEEDED,"diagnostics","trackingUrl");
  finishApplicationMaster(app0,rm1,nm1,am0,req);
  ApplicationState appState=rmAppState.get(app0.getApplicationId());
  ApplicationAttemptState attemptState0=appState.getAttempt(am0.getApplicationAttemptId());
  Assert.assertEquals("diagnostics",attemptState0.getDiagnostics());
  Assert.assertEquals(FinalApplicationStatus.SUCCEEDED,attemptState0.getFinalApplicationStatus());
  Assert.assertEquals("trackingUrl",attemptState0.getFinalTrackingUrl());
  Assert.assertEquals(app0.getFinishTime(),appState.getFinishTime());
  MockRM rm2=createMockRM(conf,memStore);
  rm2.start();
  ApplicationReport appReport=verifyAppReportAfterRMRestart(app0,rm2);
  Assert.assertEquals(FinalApplicationStatus.SUCCEEDED,appReport.getFinalApplicationStatus());
  Assert.assertEquals("trackingUrl",appReport.getOriginalTrackingUrl());
}
