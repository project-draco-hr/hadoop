{
  InstrumentationService.Cron cron=new InstrumentationService.Cron();
  assertEquals(cron.start,0);
  assertEquals(cron.lapStart,0);
  assertEquals(cron.own,0);
  assertEquals(cron.total,0);
  long begin=Time.now();
  assertEquals(cron.start(),cron);
  assertEquals(cron.start(),cron);
  assertEquals(cron.start,begin,20);
  assertEquals(cron.start,cron.lapStart);
  sleep(100);
  assertEquals(cron.stop(),cron);
  long end=Time.now();
  long delta=end - begin;
  assertEquals(cron.own,delta,20);
  assertEquals(cron.total,0);
  assertEquals(cron.lapStart,0);
  sleep(100);
  long reStart=Time.now();
  cron.start();
  assertEquals(cron.start,begin,20);
  assertEquals(cron.lapStart,reStart,20);
  sleep(100);
  cron.stop();
  long reEnd=Time.now();
  delta+=reEnd - reStart;
  assertEquals(cron.own,delta,20);
  assertEquals(cron.total,0);
  assertEquals(cron.lapStart,0);
  cron.end();
  assertEquals(cron.total,reEnd - begin,20);
  try {
    cron.start();
    fail();
  }
 catch (  IllegalStateException ex) {
  }
catch (  Exception ex) {
    fail();
  }
  try {
    cron.stop();
    fail();
  }
 catch (  IllegalStateException ex) {
  }
catch (  Exception ex) {
    fail();
  }
}
