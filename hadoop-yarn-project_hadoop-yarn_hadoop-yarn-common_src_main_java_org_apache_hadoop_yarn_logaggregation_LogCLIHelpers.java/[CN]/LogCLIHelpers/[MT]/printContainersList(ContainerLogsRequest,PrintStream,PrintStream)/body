{
  ApplicationId appId=options.getAppId();
  String appOwner=options.getAppOwner();
  String nodeId=options.getNodeId();
  String nodeIdStr=(nodeId == null) ? null : LogAggregationUtils.getNodeString(nodeId);
  RemoteIterator<FileStatus> nodeFiles=getRemoteNodeFileDir(appId,appOwner);
  if (nodeFiles == null) {
    return;
  }
  boolean foundAnyLogs=false;
  while (nodeFiles.hasNext()) {
    FileStatus thisNodeFile=nodeFiles.next();
    if (nodeIdStr != null) {
      if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {
        continue;
      }
    }
    if (!thisNodeFile.getPath().getName().endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
      AggregatedLogFormat.LogReader reader=new AggregatedLogFormat.LogReader(getConf(),thisNodeFile.getPath());
      try {
        DataInputStream valueStream;
        LogKey key=new LogKey();
        valueStream=reader.next(key);
        while (valueStream != null) {
          out.println(String.format(CONTAINER_ON_NODE_PATTERN,key,thisNodeFile.getPath().getName()));
          foundAnyLogs=true;
          key=new LogKey();
          valueStream=reader.next(key);
        }
      }
  finally {
        reader.close();
      }
    }
  }
  if (!foundAnyLogs) {
    if (nodeId != null) {
      err.println("Can not find information for any containers on " + nodeId);
    }
 else {
      err.println("Can not find any container information for " + "the application: " + appId);
    }
  }
}
