{
  ApplicationId applicationId=ConverterUtils.toApplicationId(appId);
  RemoteIterator<FileStatus> nodeFiles=getRemoteNodeFileDir(applicationId,jobOwner);
  if (nodeFiles == null) {
    return -1;
  }
  boolean foundContainerLogs=false;
  while (nodeFiles.hasNext()) {
    FileStatus thisNodeFile=nodeFiles.next();
    String fileName=thisNodeFile.getPath().getName();
    if (fileName.equals(applicationId + ".har")) {
      Path p=new Path("har:///" + thisNodeFile.getPath().toUri().getRawPath());
      nodeFiles=HarFs.get(p.toUri(),conf).listStatusIterator(p);
      continue;
    }
    if (fileName.contains(LogAggregationUtils.getNodeString(nodeId)) && !fileName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
      AggregatedLogFormat.LogReader reader=null;
      try {
        reader=new AggregatedLogFormat.LogReader(getConf(),thisNodeFile.getPath());
        if (logType == null) {
          if (dumpAContainerLogs(containerId,reader,System.out,thisNodeFile.getModificationTime()) > -1) {
            foundContainerLogs=true;
          }
        }
 else {
          if (dumpAContainerLogsForALogType(containerId,reader,System.out,thisNodeFile.getModificationTime(),logType) > -1) {
            foundContainerLogs=true;
          }
        }
      }
  finally {
        if (reader != null) {
          reader.close();
        }
      }
    }
  }
  if (!foundContainerLogs && outputFailure) {
    containerLogNotFound(containerId);
    return -1;
  }
  return 0;
}
