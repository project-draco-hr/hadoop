{
  RemoteIterator<FileStatus> nodeFiles=getRemoteNodeFileDir(appId,appOwner);
  if (nodeFiles == null) {
    return -1;
  }
  boolean foundAnyLogs=false;
  while (nodeFiles.hasNext()) {
    FileStatus thisNodeFile=nodeFiles.next();
    if (thisNodeFile.getPath().getName().equals(appId + ".har")) {
      Path p=new Path("har:///" + thisNodeFile.getPath().toUri().getRawPath());
      nodeFiles=HarFs.get(p.toUri(),conf).listStatusIterator(p);
      continue;
    }
    if (!thisNodeFile.getPath().getName().endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
      AggregatedLogFormat.LogReader reader=new AggregatedLogFormat.LogReader(getConf(),thisNodeFile.getPath());
      try {
        DataInputStream valueStream;
        LogKey key=new LogKey();
        valueStream=reader.next(key);
        while (valueStream != null) {
          String containerString="\n\nContainer: " + key + " on "+ thisNodeFile.getPath().getName();
          out.println(containerString);
          out.println(StringUtils.repeat("=",containerString.length()));
          while (true) {
            try {
              LogReader.readAContainerLogsForALogType(valueStream,out,thisNodeFile.getModificationTime());
              foundAnyLogs=true;
            }
 catch (            EOFException eof) {
              break;
            }
          }
          key=new LogKey();
          valueStream=reader.next(key);
        }
      }
  finally {
        reader.close();
      }
    }
  }
  if (!foundAnyLogs) {
    emptyLogDir(getRemoteAppLogDir(appId,appOwner).toString());
    return -1;
  }
  return 0;
}
