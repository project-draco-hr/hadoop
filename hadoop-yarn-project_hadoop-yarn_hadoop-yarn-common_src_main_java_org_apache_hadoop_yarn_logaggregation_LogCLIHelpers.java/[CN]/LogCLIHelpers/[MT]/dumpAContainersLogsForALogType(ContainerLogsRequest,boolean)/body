{
  ApplicationId applicationId=options.getAppId();
  String jobOwner=options.getAppOwner();
  String nodeId=options.getNodeId();
  String containerId=options.getContainerId();
  String localDir=options.getOutputLocalDir();
  List<String> logType=options.getLogTypes();
  RemoteIterator<FileStatus> nodeFiles=getRemoteNodeFileDir(applicationId,jobOwner);
  if (nodeFiles == null) {
    return -1;
  }
  boolean foundContainerLogs=false;
  while (nodeFiles.hasNext()) {
    FileStatus thisNodeFile=nodeFiles.next();
    String fileName=thisNodeFile.getPath().getName();
    if (fileName.equals(applicationId + ".har")) {
      Path p=new Path("har:///" + thisNodeFile.getPath().toUri().getRawPath());
      nodeFiles=HarFs.get(p.toUri(),conf).listStatusIterator(p);
      continue;
    }
    if (fileName.contains(LogAggregationUtils.getNodeString(nodeId)) && !fileName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {
      AggregatedLogFormat.LogReader reader=null;
      PrintStream out=createPrintStream(localDir,fileName,containerId);
      try {
        String containerString="\n\nContainer: " + containerId;
        out.println(containerString);
        out.println(StringUtils.repeat("=",containerString.length()));
        reader=new AggregatedLogFormat.LogReader(getConf(),thisNodeFile.getPath());
        if (logType == null || logType.isEmpty()) {
          if (dumpAContainerLogs(containerId,reader,out,thisNodeFile.getModificationTime()) > -1) {
            foundContainerLogs=true;
          }
        }
 else {
          if (dumpAContainerLogsForALogType(containerId,reader,out,thisNodeFile.getModificationTime(),logType) > -1) {
            foundContainerLogs=true;
          }
        }
      }
  finally {
        if (reader != null) {
          reader.close();
        }
        closePrintStream(out);
      }
    }
  }
  if (!foundContainerLogs) {
    if (outputFailure) {
      containerLogNotFound(containerId);
    }
    return -1;
  }
  return 0;
}
