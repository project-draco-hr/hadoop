{
  final List<FsVolumeSpi> diskVolumes=new ArrayList<FsVolumeSpi>();
  final List<FsVolumeSpi> ssdVolumes=new ArrayList<FsVolumeSpi>();
  diskVolumes.add(Mockito.mock(FsVolumeSpi.class));
  Mockito.when(diskVolumes.get(0).getStorageType()).thenReturn(StorageType.DISK);
  Mockito.when(diskVolumes.get(0).getAvailable()).thenReturn(100L);
  diskVolumes.add(Mockito.mock(FsVolumeSpi.class));
  Mockito.when(diskVolumes.get(1).getStorageType()).thenReturn(StorageType.DISK);
  Mockito.when(diskVolumes.get(1).getAvailable()).thenReturn(100L);
  ssdVolumes.add(Mockito.mock(FsVolumeSpi.class));
  Mockito.when(ssdVolumes.get(0).getStorageType()).thenReturn(StorageType.SSD);
  Mockito.when(ssdVolumes.get(0).getAvailable()).thenReturn(200L);
  ssdVolumes.add(Mockito.mock(FsVolumeSpi.class));
  Mockito.when(ssdVolumes.get(1).getStorageType()).thenReturn(StorageType.SSD);
  Mockito.when(ssdVolumes.get(1).getAvailable()).thenReturn(100L);
  Assert.assertEquals(diskVolumes.get(0),policy.chooseVolume(diskVolumes,0));
  Assert.assertEquals(ssdVolumes.get(0),policy.chooseVolume(ssdVolumes,0));
  Assert.assertEquals(ssdVolumes.get(0),policy.chooseVolume(ssdVolumes,150L));
  Assert.assertEquals(diskVolumes.get(1),policy.chooseVolume(diskVolumes,0));
  Assert.assertEquals(diskVolumes.get(0),policy.chooseVolume(diskVolumes,50L));
  try {
    policy.chooseVolume(diskVolumes,200L);
    Assert.fail("Should throw an DiskOutOfSpaceException before this!");
  }
 catch (  DiskOutOfSpaceException e) {
  }
}
