{
  final List<FsVolumeSpi> volumes=new ArrayList<FsVolumeSpi>();
  volumes.add(Mockito.mock(FsVolumeSpi.class));
  Mockito.when(volumes.get(0).getAvailable()).thenReturn(500L);
  volumes.add(Mockito.mock(FsVolumeSpi.class));
  Mockito.when(volumes.get(1).getAvailable()).thenReturn(600L);
  final RoundRobinVolumeChoosingPolicy<FsVolumeSpi> policy=new RoundRobinVolumeChoosingPolicy<FsVolumeSpi>();
  int blockSize=700;
  try {
    policy.chooseVolume(volumes,blockSize);
    Assert.fail("expected to throw DiskOutOfSpaceException");
  }
 catch (  DiskOutOfSpaceException e) {
    Assert.assertEquals("Not returnig the expected message","Out of space: The volume with the most available space (=" + 600 + " B) is less than the block size (="+ blockSize+ " B).",e.getMessage());
  }
}
