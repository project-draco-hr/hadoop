{
  NamespaceInfo nsi=newNSInfo();
  BookKeeperJournalManager bkjm=new BookKeeperJournalManager(conf,BKJMUtil.createJournalURI("/hdfsjournal-restartFrom1"),nsi);
  bkjm.format(nsi);
  long txid=1;
  long start=txid;
  EditLogOutputStream out=bkjm.startLogSegment(txid,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION);
  for (long j=1; j <= DEFAULT_SEGMENT_SIZE; j++) {
    FSEditLogOp op=FSEditLogTestUtil.getNoOpInstance();
    op.setTransactionId(txid++);
    out.write(op);
  }
  out.close();
  bkjm.finalizeLogSegment(start,(txid - 1));
  txid=1;
  try {
    out=bkjm.startLogSegment(txid,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION);
    fail("Shouldn't be able to start another journal from " + txid + " when one already exists");
  }
 catch (  Exception ioe) {
    LOG.info("Caught exception as expected",ioe);
  }
  txid=DEFAULT_SEGMENT_SIZE;
  try {
    out=bkjm.startLogSegment(txid,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION);
    fail("Shouldn't be able to start another journal from " + txid + " when one already exists");
  }
 catch (  IOException ioe) {
    LOG.info("Caught exception as expected",ioe);
  }
  txid=DEFAULT_SEGMENT_SIZE + 1;
  start=txid;
  out=bkjm.startLogSegment(start,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION);
  assertNotNull(out);
  for (long j=1; j <= DEFAULT_SEGMENT_SIZE; j++) {
    FSEditLogOp op=FSEditLogTestUtil.getNoOpInstance();
    op.setTransactionId(txid++);
    out.write(op);
  }
  out.close();
  bkjm.finalizeLogSegment(start,(txid - 1));
  txid=DEFAULT_SEGMENT_SIZE * 4;
  out=bkjm.startLogSegment(txid,NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION);
  assertNotNull(out);
}
