{
  Configuration conf=new Configuration();
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).build();
    cluster.waitActive();
    FSNamesystem fsn=cluster.getNameNode().namesystem;
    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
    ObjectName mxbeanName=new ObjectName("Hadoop:service=NameNode,name=NameNodeInfo");
    String clusterId=(String)mbs.getAttribute(mxbeanName,"ClusterId");
    Assert.assertEquals(fsn.getClusterId(),clusterId);
    String blockpoolId=(String)mbs.getAttribute(mxbeanName,"BlockPoolId");
    Assert.assertEquals(fsn.getBlockPoolId(),blockpoolId);
    String version=(String)mbs.getAttribute(mxbeanName,"Version");
    Assert.assertEquals(fsn.getVersion(),version);
    Long used=(Long)mbs.getAttribute(mxbeanName,"Used");
    Assert.assertEquals(fsn.getUsed(),used.longValue());
    Long total=(Long)mbs.getAttribute(mxbeanName,"Total");
    Assert.assertEquals(fsn.getTotal(),total.longValue());
    String safemode=(String)mbs.getAttribute(mxbeanName,"Safemode");
    Assert.assertEquals(fsn.getSafemode(),safemode);
    Long nondfs=(Long)(mbs.getAttribute(mxbeanName,"NonDfsUsedSpace"));
    Assert.assertEquals(fsn.getNonDfsUsedSpace(),nondfs.longValue());
    Float percentremaining=(Float)(mbs.getAttribute(mxbeanName,"PercentRemaining"));
    Assert.assertEquals(fsn.getPercentRemaining(),percentremaining.floatValue());
    Long totalblocks=(Long)(mbs.getAttribute(mxbeanName,"TotalBlocks"));
    Assert.assertEquals(fsn.getTotalBlocks(),totalblocks.longValue());
    String alivenodeinfo=(String)(mbs.getAttribute(mxbeanName,"LiveNodes"));
    Assert.assertEquals(fsn.getLiveNodes(),alivenodeinfo);
    String deadnodeinfo=(String)(mbs.getAttribute(mxbeanName,"DeadNodes"));
    Assert.assertEquals(fsn.getDeadNodes(),deadnodeinfo);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
