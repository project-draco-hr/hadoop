{
  Configuration conf=new Configuration();
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).build();
    cluster.waitActive();
    FSNamesystem fsn=cluster.getNameNode().namesystem;
    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
    ObjectName mxbeanName=new ObjectName("Hadoop:service=NameNode,name=NameNodeInfo");
    String clusterId=(String)mbs.getAttribute(mxbeanName,"ClusterId");
    Assert.assertEquals(fsn.getClusterId(),clusterId);
    String blockpoolId=(String)mbs.getAttribute(mxbeanName,"BlockPoolId");
    Assert.assertEquals(fsn.getBlockPoolId(),blockpoolId);
    String version=(String)mbs.getAttribute(mxbeanName,"Version");
    Assert.assertEquals(fsn.getVersion(),version);
    Assert.assertTrue(version.equals(VersionInfo.getVersion() + ", r" + VersionInfo.getRevision()));
    Long used=(Long)mbs.getAttribute(mxbeanName,"Used");
    Assert.assertEquals(fsn.getUsed(),used.longValue());
    Long total=(Long)mbs.getAttribute(mxbeanName,"Total");
    Assert.assertEquals(fsn.getTotal(),total.longValue());
    String safemode=(String)mbs.getAttribute(mxbeanName,"Safemode");
    Assert.assertEquals(fsn.getSafemode(),safemode);
    Long nondfs=(Long)(mbs.getAttribute(mxbeanName,"NonDfsUsedSpace"));
    Assert.assertEquals(fsn.getNonDfsUsedSpace(),nondfs.longValue());
    Float percentremaining=(Float)(mbs.getAttribute(mxbeanName,"PercentRemaining"));
    Assert.assertEquals(fsn.getPercentRemaining(),percentremaining.floatValue());
    Long totalblocks=(Long)(mbs.getAttribute(mxbeanName,"TotalBlocks"));
    Assert.assertEquals(fsn.getTotalBlocks(),totalblocks.longValue());
    String alivenodeinfo=(String)(mbs.getAttribute(mxbeanName,"LiveNodes"));
    Map<String,Map<String,Object>> liveNodes=(Map<String,Map<String,Object>>)JSON.parse(alivenodeinfo);
    assertTrue(liveNodes.size() > 0);
    for (    Map<String,Object> liveNode : liveNodes.values()) {
      assertTrue(liveNode.containsKey("nonDfsUsedSpace"));
      assertTrue(((Long)liveNode.get("nonDfsUsedSpace")) > 0);
      assertTrue(liveNode.containsKey("capacity"));
      assertTrue(((Long)liveNode.get("capacity")) > 0);
      assertTrue(liveNode.containsKey("numBlocks"));
      assertTrue(((Long)liveNode.get("numBlocks")) == 0);
    }
    Assert.assertEquals(fsn.getLiveNodes(),alivenodeinfo);
    String deadnodeinfo=(String)(mbs.getAttribute(mxbeanName,"DeadNodes"));
    Assert.assertEquals(fsn.getDeadNodes(),deadnodeinfo);
    String nameDirStatuses=(String)(mbs.getAttribute(mxbeanName,"NameDirStatuses"));
    Assert.assertEquals(fsn.getNameDirStatuses(),nameDirStatuses);
    Map<String,Map<String,String>> statusMap=(Map<String,Map<String,String>>)JSON.parse(nameDirStatuses);
    Collection<URI> nameDirUris=cluster.getNameDirs(0);
    for (    URI nameDirUri : nameDirUris) {
      File nameDir=new File(nameDirUri);
      System.out.println("Checking for the presence of " + nameDir + " in active name dirs.");
      assertTrue(statusMap.get("active").containsKey(nameDir.getAbsolutePath()));
    }
    assertEquals(2,statusMap.get("active").size());
    assertEquals(0,statusMap.get("failed").size());
    File failedNameDir=new File(nameDirUris.toArray(new URI[0])[0]);
    assertEquals(0,FileUtil.chmod(failedNameDir.getAbsolutePath(),"000"));
    cluster.getNameNodeRpc().rollEditLog();
    nameDirStatuses=(String)(mbs.getAttribute(mxbeanName,"NameDirStatuses"));
    statusMap=(Map<String,Map<String,String>>)JSON.parse(nameDirStatuses);
    for (    URI nameDirUri : nameDirUris) {
      File nameDir=new File(nameDirUri);
      String expectedStatus=nameDir.equals(failedNameDir) ? "failed" : "active";
      System.out.println("Checking for the presence of " + nameDir + " in "+ expectedStatus+ " name dirs.");
      assertTrue(statusMap.get(expectedStatus).containsKey(nameDir.getAbsolutePath()));
    }
    assertEquals(1,statusMap.get("active").size());
    assertEquals(1,statusMap.get("failed").size());
  }
  finally {
    if (cluster != null) {
      for (      URI dir : cluster.getNameDirs(0)) {
        FileUtil.chmod(new File(dir).toString(),"700");
      }
      cluster.shutdown();
    }
  }
}
