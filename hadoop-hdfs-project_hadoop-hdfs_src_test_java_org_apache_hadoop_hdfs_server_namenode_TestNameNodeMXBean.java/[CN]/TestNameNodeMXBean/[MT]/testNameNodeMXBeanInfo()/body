{
  Configuration conf=new Configuration();
  conf.setLong(DFSConfigKeys.DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,NativeIO.POSIX.getCacheManipulator().getMemlockLimit());
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
    cluster.waitActive();
    String upgradeDomain="abcd";
    DatanodeManager dm=cluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager();
    DatanodeDescriptor dd=dm.getDatanode(cluster.getDataNodes().get(0).getDatanodeId());
    dd.setUpgradeDomain(upgradeDomain);
    String dnXferAddrWithUpgradeDomainSet=dd.getXferAddr();
    DatanodeDescriptor maintenanceNode=dm.getDatanode(cluster.getDataNodes().get(1).getDatanodeId());
    maintenanceNode.setInMaintenance();
    String dnXferAddrInMaintenance=maintenanceNode.getXferAddr();
    FSNamesystem fsn=cluster.getNameNode().namesystem;
    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
    ObjectName mxbeanName=new ObjectName("Hadoop:service=NameNode,name=NameNodeInfo");
    String clusterId=(String)mbs.getAttribute(mxbeanName,"ClusterId");
    assertEquals(fsn.getClusterId(),clusterId);
    String blockpoolId=(String)mbs.getAttribute(mxbeanName,"BlockPoolId");
    assertEquals(fsn.getBlockPoolId(),blockpoolId);
    String version=(String)mbs.getAttribute(mxbeanName,"Version");
    assertEquals(fsn.getVersion(),version);
    assertTrue(version.equals(VersionInfo.getVersion() + ", r" + VersionInfo.getRevision()));
    Long used=(Long)mbs.getAttribute(mxbeanName,"Used");
    assertEquals(fsn.getUsed(),used.longValue());
    Long total=(Long)mbs.getAttribute(mxbeanName,"Total");
    assertEquals(fsn.getTotal(),total.longValue());
    String safemode=(String)mbs.getAttribute(mxbeanName,"Safemode");
    assertEquals(fsn.getSafemode(),safemode);
    Long nondfs=(Long)(mbs.getAttribute(mxbeanName,"NonDfsUsedSpace"));
    assertEquals(fsn.getNonDfsUsedSpace(),nondfs.longValue());
    Float percentremaining=(Float)(mbs.getAttribute(mxbeanName,"PercentRemaining"));
    assertEquals(fsn.getPercentRemaining(),percentremaining,DELTA);
    Long totalblocks=(Long)(mbs.getAttribute(mxbeanName,"TotalBlocks"));
    assertEquals(fsn.getTotalBlocks(),totalblocks.longValue());
    String alivenodeinfo=(String)(mbs.getAttribute(mxbeanName,"LiveNodes"));
    Map<String,Map<String,Object>> liveNodes=(Map<String,Map<String,Object>>)JSON.parse(alivenodeinfo);
    assertTrue(liveNodes.size() == 2);
    for (    Map<String,Object> liveNode : liveNodes.values()) {
      assertTrue(liveNode.containsKey("nonDfsUsedSpace"));
      assertTrue(((Long)liveNode.get("nonDfsUsedSpace")) >= 0);
      assertTrue(liveNode.containsKey("capacity"));
      assertTrue(((Long)liveNode.get("capacity")) > 0);
      assertTrue(liveNode.containsKey("numBlocks"));
      assertTrue(((Long)liveNode.get("numBlocks")) == 0);
      String xferAddr=(String)liveNode.get("xferaddr");
      if (!xferAddr.equals(dnXferAddrWithUpgradeDomainSet)) {
        assertTrue(!liveNode.containsKey("upgradeDomain"));
      }
 else {
        assertTrue(liveNode.get("upgradeDomain").equals(upgradeDomain));
      }
      boolean inMaintenance=liveNode.get("adminState").equals(DatanodeInfo.AdminStates.IN_MAINTENANCE.toString());
      assertFalse(xferAddr.equals(dnXferAddrInMaintenance) ^ inMaintenance);
    }
    assertEquals(fsn.getLiveNodes(),alivenodeinfo);
    String deadnodeinfo=(String)(mbs.getAttribute(mxbeanName,"DeadNodes"));
    assertEquals(fsn.getDeadNodes(),deadnodeinfo);
    String nodeUsage=(String)(mbs.getAttribute(mxbeanName,"NodeUsage"));
    assertEquals("Bad value for NodeUsage",fsn.getNodeUsage(),nodeUsage);
    String nameJournalStatus=(String)(mbs.getAttribute(mxbeanName,"NameJournalStatus"));
    assertEquals("Bad value for NameJournalStatus",fsn.getNameJournalStatus(),nameJournalStatus);
    String journalTxnInfo=(String)mbs.getAttribute(mxbeanName,"JournalTransactionInfo");
    assertEquals("Bad value for NameTxnIds",fsn.getJournalTransactionInfo(),journalTxnInfo);
    String compileInfo=(String)mbs.getAttribute(mxbeanName,"CompileInfo");
    assertEquals("Bad value for CompileInfo",fsn.getCompileInfo(),compileInfo);
    String corruptFiles=(String)(mbs.getAttribute(mxbeanName,"CorruptFiles"));
    assertEquals("Bad value for CorruptFiles",fsn.getCorruptFiles(),corruptFiles);
    String nameDirStatuses=(String)(mbs.getAttribute(mxbeanName,"NameDirStatuses"));
    assertEquals(fsn.getNameDirStatuses(),nameDirStatuses);
    Map<String,Map<String,String>> statusMap=(Map<String,Map<String,String>>)JSON.parse(nameDirStatuses);
    Collection<URI> nameDirUris=cluster.getNameDirs(0);
    for (    URI nameDirUri : nameDirUris) {
      File nameDir=new File(nameDirUri);
      System.out.println("Checking for the presence of " + nameDir + " in active name dirs.");
      assertTrue(statusMap.get("active").containsKey(nameDir.getAbsolutePath()));
    }
    assertEquals(2,statusMap.get("active").size());
    assertEquals(0,statusMap.get("failed").size());
    File failedNameDir=new File(nameDirUris.iterator().next());
    assertEquals(0,FileUtil.chmod(new File(failedNameDir,"current").getAbsolutePath(),"000"));
    cluster.getNameNodeRpc().rollEditLog();
    nameDirStatuses=(String)(mbs.getAttribute(mxbeanName,"NameDirStatuses"));
    statusMap=(Map<String,Map<String,String>>)JSON.parse(nameDirStatuses);
    for (    URI nameDirUri : nameDirUris) {
      File nameDir=new File(nameDirUri);
      String expectedStatus=nameDir.equals(failedNameDir) ? "failed" : "active";
      System.out.println("Checking for the presence of " + nameDir + " in "+ expectedStatus+ " name dirs.");
      assertTrue(statusMap.get(expectedStatus).containsKey(nameDir.getAbsolutePath()));
    }
    assertEquals(1,statusMap.get("active").size());
    assertEquals(1,statusMap.get("failed").size());
    assertEquals(0L,mbs.getAttribute(mxbeanName,"CacheUsed"));
    assertEquals(NativeIO.POSIX.getCacheManipulator().getMemlockLimit() * cluster.getDataNodes().size(),mbs.getAttribute(mxbeanName,"CacheCapacity"));
    assertNull("RollingUpgradeInfo should be null when there is no rolling" + " upgrade",mbs.getAttribute(mxbeanName,"RollingUpgradeStatus"));
  }
  finally {
    if (cluster != null) {
      for (      URI dir : cluster.getNameDirs(0)) {
        FileUtil.chmod(new File(new File(dir),"current").getAbsolutePath(),"755");
      }
      cluster.shutdown();
    }
  }
}
