{
  Configuration conf=new Configuration();
  conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
  MiniDFSCluster cluster=null;
  for (int i=0; i < 5; i++) {
    try {
      int[] ports=ServerSocketUtil.getPorts(2);
      MiniDFSNNTopology topology=new MiniDFSNNTopology().addNameservice(new MiniDFSNNTopology.NSConf("ns1").addNN(new MiniDFSNNTopology.NNConf("nn1").setIpcPort(ports[0])).addNN(new MiniDFSNNTopology.NNConf("nn2").setIpcPort(ports[1])));
      cluster=new MiniDFSCluster.Builder(conf).nnTopology(topology).numDataNodes(0).build();
      break;
    }
 catch (    BindException e) {
      continue;
    }
  }
  if (cluster == null) {
    fail("failed to start mini cluster.");
  }
  FileSystem fs=null;
  try {
    cluster.waitActive();
    FSNamesystem nn0=cluster.getNamesystem(0);
    FSNamesystem nn1=cluster.getNamesystem(1);
    checkNNDirSize(cluster.getNameDirs(0),nn0.getNameDirSize());
    checkNNDirSize(cluster.getNameDirs(1),nn1.getNameDirSize());
    cluster.transitionToActive(0);
    fs=cluster.getFileSystem(0);
    DFSTestUtil.createFile(fs,new Path("/file"),0,(short)1,0L);
    HATestUtil.waitForStandbyToCatchUp(cluster.getNameNode(0),cluster.getNameNode(1));
    checkNNDirSize(cluster.getNameDirs(0),nn0.getNameDirSize());
    checkNNDirSize(cluster.getNameDirs(1),nn1.getNameDirSize());
    DFSTestUtil.createFile(fs,new Path("/file"),0,(short)1,0L);
    nn0.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
    nn0.saveNamespace(0,0);
    checkNNDirSize(cluster.getNameDirs(0),nn0.getNameDirSize());
  }
  finally {
    cluster.shutdown();
  }
}
