{
  FSDirectory fsDir=cluster.getNamesystem().getFSDirectory();
  fs.mkdirs(parent);
  fs.setQuota(parent,100,1000);
  fs.allowSnapshot(parent);
  String truncateFile="testSnapshotWithAppendTruncate";
  final Path src=new Path(parent,truncateFile);
  int[] length=new int[4];
  length[0]=2 * BLOCK_SIZE + BLOCK_SIZE / 2;
  DFSTestUtil.createFile(fs,src,64,length[0],BLOCK_SIZE,REPLICATION,0L);
  Block firstBlk=getLocatedBlocks(src).get(0).getBlock().getLocalBlock();
  Path[] snapshotFiles=new Path[4];
  ContentSummary contentSummary=fs.getContentSummary(parent);
  assertThat(contentSummary.getSpaceConsumed(),is(30L));
  String[] ss=new String[]{"ss0","ss1","ss2","ss3"};
  Path snapshotDir=fs.createSnapshot(parent,ss[0]);
  snapshotFiles[0]=new Path(snapshotDir,truncateFile);
  length[1]=length[2]=length[0] + BLOCK_SIZE + 1;
  DFSTestUtil.appendFile(fs,src,BLOCK_SIZE + 1);
  Block lastBlk=getLocatedBlocks(src).getLastLocatedBlock().getBlock().getLocalBlock();
  contentSummary=fs.getContentSummary(parent);
  assertThat(contentSummary.getSpaceConsumed(),is(45L));
  snapshotDir=fs.createSnapshot(parent,ss[1]);
  snapshotFiles[1]=new Path(snapshotDir,truncateFile);
  snapshotDir=fs.createSnapshot(parent,ss[2]);
  snapshotFiles[2]=new Path(snapshotDir,truncateFile);
  DFSTestUtil.appendFile(fs,src,BLOCK_SIZE - 1 + BLOCK_SIZE / 2);
  Block appendedBlk=getLocatedBlocks(src).getLastLocatedBlock().getBlock().getLocalBlock();
  contentSummary=fs.getContentSummary(parent);
  assertThat(contentSummary.getSpaceConsumed(),is(60L));
  int newLength=length[0] + BLOCK_SIZE / 2;
  boolean isReady=fs.truncate(src,newLength);
  assertTrue("Recovery is not expected.",isReady);
  assertFileLength(snapshotFiles[2],length[2]);
  assertFileLength(snapshotFiles[1],length[1]);
  assertFileLength(snapshotFiles[0],length[0]);
  assertBlockNotPresent(appendedBlk);
  contentSummary=fs.getContentSummary(parent);
  assertThat(contentSummary.getSpaceConsumed(),is(48L));
  newLength=length[0] - BLOCK_SIZE / 2;
  isReady=fs.truncate(src,newLength);
  assertTrue("Recovery is not expected.",isReady);
  assertFileLength(snapshotFiles[2],length[2]);
  assertFileLength(snapshotFiles[1],length[1]);
  assertFileLength(snapshotFiles[0],length[0]);
  contentSummary=fs.getContentSummary(parent);
  assertThat(contentSummary.getSpaceConsumed(),is(48L));
  newLength-=BLOCK_SIZE / 2;
  isReady=fs.truncate(src,newLength);
  assertFalse("Recovery is expected.",isReady);
  checkBlockRecovery(src);
  assertFileLength(snapshotFiles[2],length[2]);
  assertFileLength(snapshotFiles[1],length[1]);
  assertFileLength(snapshotFiles[0],length[0]);
  Block replacedBlk=getLocatedBlocks(src).getLastLocatedBlock().getBlock().getLocalBlock();
  contentSummary=fs.getContentSummary(parent);
  assertThat(contentSummary.getSpaceConsumed(),is(54L));
  snapshotDir=fs.createSnapshot(parent,ss[3]);
  snapshotFiles[3]=new Path(snapshotDir,truncateFile);
  length[3]=newLength;
  int numINodes=fsDir.getInodeMapSize();
  isReady=fs.delete(src,false);
  assertTrue("Delete failed.",isReady);
  assertFileLength(snapshotFiles[3],length[3]);
  assertFileLength(snapshotFiles[2],length[2]);
  assertFileLength(snapshotFiles[1],length[1]);
  assertFileLength(snapshotFiles[0],length[0]);
  assertEquals("Number of INodes should not change",numINodes,fsDir.getInodeMapSize());
  fs.deleteSnapshot(parent,ss[3]);
  assertBlockExists(firstBlk);
  assertBlockExists(lastBlk);
  assertBlockNotPresent(replacedBlk);
  contentSummary=fs.getContentSummary(parent);
  assertThat(contentSummary.getSpaceConsumed(),is(48L));
  fs.deleteSnapshot(parent,ss[deleteOrder[0]]);
  assertFileLength(snapshotFiles[deleteOrder[1]],length[deleteOrder[1]]);
  assertFileLength(snapshotFiles[deleteOrder[2]],length[deleteOrder[2]]);
  assertBlockExists(firstBlk);
  assertBlockExists(lastBlk);
  assertEquals("Number of INodes should not change",numINodes,fsDir.getInodeMapSize());
  contentSummary=fs.getContentSummary(parent);
  assertThat(contentSummary.getSpaceConsumed(),is(48L));
  fs.deleteSnapshot(parent,ss[deleteOrder[1]]);
  assertFileLength(snapshotFiles[deleteOrder[2]],length[deleteOrder[2]]);
  assertBlockExists(firstBlk);
  contentSummary=fs.getContentSummary(parent);
  if (fs.exists(snapshotFiles[0])) {
    assertBlockNotPresent(lastBlk);
    assertThat(contentSummary.getSpaceConsumed(),is(36L));
  }
 else {
    assertThat(contentSummary.getSpaceConsumed(),is(48L));
  }
  assertEquals("Number of INodes should not change",numINodes,fsDir.getInodeMapSize());
  fs.deleteSnapshot(parent,ss[deleteOrder[2]]);
  assertBlockNotPresent(firstBlk);
  assertBlockNotPresent(lastBlk);
  contentSummary=fs.getContentSummary(parent);
  assertThat(contentSummary.getSpaceConsumed(),is(0L));
  assertNotEquals("Number of INodes should change",numINodes,fsDir.getInodeMapSize());
}
