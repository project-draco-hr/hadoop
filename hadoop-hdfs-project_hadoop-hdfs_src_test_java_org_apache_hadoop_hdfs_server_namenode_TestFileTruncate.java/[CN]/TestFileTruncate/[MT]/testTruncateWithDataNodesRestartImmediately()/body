{
  int startingFileSize=3 * BLOCK_SIZE;
  byte[] contents=AppendTestUtil.initBuffer(startingFileSize);
  final Path p=new Path(parent,"testTruncateWithDataNodesRestartImmediately");
  writeContents(contents,startingFileSize,p);
  LocatedBlock oldBlock=getLocatedBlocks(p).getLastLocatedBlock();
  int dn0=0;
  int dn1=1;
  int toTruncateLength=1;
  int newLength=startingFileSize - toTruncateLength;
  boolean isReady=fs.truncate(p,newLength);
  assertFalse(isReady);
  cluster.restartDataNode(dn0,true,true);
  cluster.restartDataNode(dn1,true,true);
  cluster.waitActive();
  checkBlockRecovery(p);
  LocatedBlock newBlock=getLocatedBlocks(p).getLastLocatedBlock();
  assertEquals(newBlock.getBlock().getBlockId(),oldBlock.getBlock().getBlockId());
  assertEquals(newBlock.getBlock().getGenerationStamp(),oldBlock.getBlock().getGenerationStamp() + 1);
  Thread.sleep(2000);
  cluster.triggerBlockReports();
  DFSTestUtil.waitReplication(fs,p,REPLICATION);
  FsDatasetTestUtils utils=cluster.getFsDatasetTestUtils(dn0);
  assertEquals(utils.getStoredDataLength(newBlock.getBlock()),newBlock.getBlockSize());
  assertEquals(utils.getStoredGenerationStamp(newBlock.getBlock()),newBlock.getBlock().getGenerationStamp());
  utils=cluster.getFsDatasetTestUtils(dn1);
  assertEquals(utils.getStoredDataLength(newBlock.getBlock()),newBlock.getBlockSize());
  assertEquals(utils.getStoredGenerationStamp(newBlock.getBlock()),newBlock.getBlock().getGenerationStamp());
  FileStatus fileStatus=fs.getFileStatus(p);
  assertThat(fileStatus.getLen(),is((long)newLength));
  checkFullFile(p,newLength,contents);
  fs.delete(parent,true);
}
