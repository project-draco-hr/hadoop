{
  int startingFileSize=3 * BLOCK_SIZE;
  fs.mkdirs(parent);
  fs.setQuota(parent,100,1000);
  byte[] contents=AppendTestUtil.initBuffer(startingFileSize);
  for (int fileLength=startingFileSize; fileLength > 0; fileLength-=BLOCK_SIZE - 1) {
    for (int toTruncate=0; toTruncate <= fileLength; toTruncate++) {
      final Path p=new Path(parent,"testBasicTruncate" + fileLength);
      writeContents(contents,fileLength,p);
      int newLength=fileLength - toTruncate;
      boolean isReady=fs.truncate(p,newLength);
      LOG.info("fileLength=" + fileLength + ", newLength="+ newLength+ ", toTruncate="+ toTruncate+ ", isReady="+ isReady);
      assertEquals("File must be closed for zero truncate" + " or truncating at the block boundary",isReady,toTruncate == 0 || newLength % BLOCK_SIZE == 0);
      if (!isReady) {
        checkBlockRecovery(p);
      }
      ContentSummary cs=fs.getContentSummary(parent);
      assertEquals("Bad disk space usage",cs.getSpaceConsumed(),newLength * REPLICATION);
      checkFullFile(p,newLength,contents);
    }
  }
  fs.delete(parent,true);
}
