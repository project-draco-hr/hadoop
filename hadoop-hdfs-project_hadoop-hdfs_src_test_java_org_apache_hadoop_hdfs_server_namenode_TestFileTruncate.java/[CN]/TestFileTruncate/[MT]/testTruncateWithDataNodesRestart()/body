{
  int startingFileSize=3 * BLOCK_SIZE;
  byte[] contents=AppendTestUtil.initBuffer(startingFileSize);
  final Path parent=new Path("/test");
  final Path p=new Path(parent,"testTruncateWithDataNodesRestart");
  writeContents(contents,startingFileSize,p);
  LocatedBlock oldBlock=getLocatedBlocks(p).getLastLocatedBlock();
  int dn=0;
  int toTruncateLength=1;
  int newLength=startingFileSize - toTruncateLength;
  cluster.getDataNodes().get(dn).shutdown();
  try {
    boolean isReady=fs.truncate(p,newLength);
    assertFalse(isReady);
  }
  finally {
    cluster.restartDataNode(dn);
    cluster.waitActive();
    cluster.triggerBlockReports();
  }
  LocatedBlock newBlock=getLocatedBlocks(p).getLastLocatedBlock();
  assertEquals(newBlock.getBlock().getBlockId(),oldBlock.getBlock().getBlockId());
  assertEquals(newBlock.getBlock().getGenerationStamp(),oldBlock.getBlock().getGenerationStamp() + 1);
  checkBlockRecovery(p);
  DFSTestUtil.waitReplication(fs,p,REPLICATION);
  assertEquals(cluster.getBlockFile(dn,newBlock.getBlock()).length(),newBlock.getBlockSize());
  assertTrue(cluster.getBlockMetadataFile(dn,newBlock.getBlock()).getName().endsWith(newBlock.getBlock().getGenerationStamp() + ".meta"));
  FileStatus fileStatus=fs.getFileStatus(p);
  assertThat(fileStatus.getLen(),is((long)newLength));
  checkFullFile(p,newLength,contents);
  fs.delete(parent,true);
}
