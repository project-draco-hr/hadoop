{
  int startingFileSize=3 * BLOCK_SIZE;
  byte[] contents=AppendTestUtil.initBuffer(startingFileSize);
  final Path p=new Path(parent,"testCopyOnTruncateWithDataNodesRestart");
  writeContents(contents,startingFileSize,p);
  LocatedBlock oldBlock=getLocatedBlocks(p).getLastLocatedBlock();
  fs.allowSnapshot(parent);
  fs.createSnapshot(parent,"ss0");
  int dn=1;
  int toTruncateLength=1;
  int newLength=startingFileSize - toTruncateLength;
  cluster.getDataNodes().get(dn).shutdown();
  try {
    boolean isReady=fs.truncate(p,newLength);
    assertFalse(isReady);
  }
  finally {
    cluster.restartDataNode(dn,true,true);
    cluster.waitActive();
  }
  checkBlockRecovery(p);
  LocatedBlock newBlock=getLocatedBlocks(p).getLastLocatedBlock();
  assertNotEquals(newBlock.getBlock().getBlockId(),oldBlock.getBlock().getBlockId());
  assertEquals(newBlock.getBlock().getGenerationStamp(),oldBlock.getBlock().getGenerationStamp() + 1);
  DFSTestUtil.waitReplication(fs,p,REPLICATION);
  FsDatasetTestUtils utils=cluster.getFsDatasetTestUtils(dn);
  assertEquals(utils.getStoredDataLength(newBlock.getBlock()),newBlock.getBlockSize());
  assertEquals(utils.getStoredDataLength(oldBlock.getBlock()),oldBlock.getBlockSize());
  assertEquals(utils.getStoredGenerationStamp(oldBlock.getBlock()),oldBlock.getBlock().getGenerationStamp());
  FileStatus fileStatus=fs.getFileStatus(p);
  assertThat(fileStatus.getLen(),is((long)newLength));
  checkFullFile(p,newLength,contents);
  fs.deleteSnapshot(parent,"ss0");
  fs.delete(parent,true);
}
