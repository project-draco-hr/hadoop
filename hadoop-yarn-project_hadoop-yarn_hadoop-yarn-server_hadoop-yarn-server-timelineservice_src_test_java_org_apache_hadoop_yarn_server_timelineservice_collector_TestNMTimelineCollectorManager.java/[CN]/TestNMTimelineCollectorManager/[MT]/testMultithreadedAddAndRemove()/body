{
  final int numApps=5;
  List<Callable<Boolean>> tasks=new ArrayList<Callable<Boolean>>();
  for (int i=0; i < numApps; i++) {
    final ApplicationId appId=ApplicationId.newInstance(0L,i);
    Callable<Boolean> task=new Callable<Boolean>(){
      public Boolean call(){
        AppLevelTimelineCollector collector=new AppLevelTimelineCollector(appId);
        boolean successPut=(collectorManager.putIfAbsent(appId,collector) == collector);
        return successPut && collectorManager.remove(appId);
      }
    }
;
    tasks.add(task);
  }
  ExecutorService executor=Executors.newFixedThreadPool(numApps);
  try {
    List<Future<Boolean>> futures=executor.invokeAll(tasks);
    for (    Future<Boolean> future : futures) {
      assertTrue(future.get());
    }
  }
  finally {
    executor.shutdownNow();
  }
  for (int i=0; i < numApps; i++) {
    final ApplicationId appId=ApplicationId.newInstance(0L,i);
    assertFalse(collectorManager.containsTimelineCollector(appId));
  }
}
