{
  File base=new File(BASEDIR);
  FileUtil.fullyDelete(base);
  base.mkdirs();
  keystoresDir=new File(BASEDIR).getAbsolutePath();
  try {
    sslConfDir=KeyStoreTestUtil.getClasspathDir(TestSWebHdfsFileContextMainOperations.class);
    KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,CONF,false);
    CONF.set(DFSConfigKeys.DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getClientSSLConfigFileName());
    CONF.set(DFSConfigKeys.DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getServerSSLConfigFileName());
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  CONF.set(DFSConfigKeys.DFS_HTTP_POLICY_KEY,"HTTPS_ONLY");
  CONF.set(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,"localhost:0");
  CONF.set(DFSConfigKeys.DFS_DATANODE_HTTPS_ADDRESS_KEY,"localhost:0");
  CONF.set(SSLFactory.SSL_HOSTNAME_VERIFIER_KEY,"DEFAULT_AND_LOCALHOST");
  cluster=new MiniDFSCluster.Builder(CONF).numDataNodes(2).build();
  cluster.waitClusterUp();
  webhdfsUrl=new URI(SWebHdfs.SCHEME + "://" + cluster.getConfiguration(0).get(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY));
  fc=FileContext.getFileContext(webhdfsUrl,CONF);
  defaultWorkingDirectory=fc.makeQualified(new Path("/user/" + UserGroupInformation.getCurrentUser().getShortUserName()));
  fc.mkdir(defaultWorkingDirectory,FileContext.DEFAULT_PERM,true);
}
