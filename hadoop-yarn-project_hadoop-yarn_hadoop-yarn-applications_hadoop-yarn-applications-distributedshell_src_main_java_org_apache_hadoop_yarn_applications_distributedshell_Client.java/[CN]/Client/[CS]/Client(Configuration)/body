{
  this.conf=conf;
  yarnClient=YarnClient.createYarnClient();
  yarnClient.init(conf);
  opts=new Options();
  opts.addOption("appname",true,"Application Name. Default value - DistributedShell");
  opts.addOption("priority",true,"Application Priority. Default 0");
  opts.addOption("queue",true,"RM Queue in which this application is to be submitted");
  opts.addOption("timeout",true,"Application timeout in milliseconds");
  opts.addOption("master_memory",true,"Amount of memory in MB to be requested to run the application master");
  opts.addOption("jar",true,"Jar file containing the application master");
  opts.addOption("shell_command",true,"Shell command to be executed by the Application Master");
  opts.addOption("shell_script",true,"Location of the shell script to be executed");
  opts.addOption("shell_args",true,"Command line args for the shell script");
  opts.addOption("shell_env",true,"Environment for shell script. Specified as env_key=env_val pairs");
  opts.addOption("shell_cmd_priority",true,"Priority for the shell command containers");
  opts.addOption("container_memory",true,"Amount of memory in MB to be requested to run the shell command");
  opts.addOption("num_containers",true,"No. of containers on which the shell command needs to be executed");
  opts.addOption("log_properties",true,"log4j.properties file");
  opts.addOption("debug",false,"Dump out debug information");
  opts.addOption("help",false,"Print usage");
}
