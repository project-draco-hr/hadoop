{
  CommandLine cliParser=new GnuParser().parse(opts,args);
  if (args.length == 0) {
    throw new IllegalArgumentException("No args specified for client to initialize");
  }
  if (cliParser.hasOption("log_properties")) {
    String log4jPath=cliParser.getOptionValue("log_properties");
    try {
      Log4jPropertyHelper.updateLog4jConfiguration(Client.class,log4jPath);
    }
 catch (    Exception e) {
      LOG.warn("Can not set up custom log4j properties. " + e);
    }
  }
  if (cliParser.hasOption("help")) {
    printUsage();
    return false;
  }
  if (cliParser.hasOption("debug")) {
    debugFlag=true;
  }
  appName=cliParser.getOptionValue("appname","DistributedShell");
  amPriority=Integer.parseInt(cliParser.getOptionValue("priority","0"));
  amQueue=cliParser.getOptionValue("queue","default");
  amMemory=Integer.parseInt(cliParser.getOptionValue("master_memory","10"));
  amVCores=Integer.parseInt(cliParser.getOptionValue("master_vcores","1"));
  if (amMemory < 0) {
    throw new IllegalArgumentException("Invalid memory specified for application master, exiting." + " Specified memory=" + amMemory);
  }
  if (amVCores < 0) {
    throw new IllegalArgumentException("Invalid virtual cores specified for application master, exiting." + " Specified virtual cores=" + amVCores);
  }
  if (!cliParser.hasOption("jar")) {
    throw new IllegalArgumentException("No jar file specified for application master");
  }
  appMasterJar=cliParser.getOptionValue("jar");
  if (!cliParser.hasOption("shell_command") && !cliParser.hasOption("shell_script")) {
    throw new IllegalArgumentException("No shell command or shell script specified to be executed by application master");
  }
 else   if (cliParser.hasOption("shell_command") && cliParser.hasOption("shell_script")) {
    throw new IllegalArgumentException("Can not specify shell_command option " + "and shell_script option at the same time");
  }
 else   if (cliParser.hasOption("shell_command")) {
    shellCommand=cliParser.getOptionValue("shell_command");
  }
 else {
    shellScriptPath=cliParser.getOptionValue("shell_script");
  }
  if (cliParser.hasOption("shell_args")) {
    shellArgs=cliParser.getOptionValues("shell_args");
  }
  if (cliParser.hasOption("shell_env")) {
    String envs[]=cliParser.getOptionValues("shell_env");
    for (    String env : envs) {
      env=env.trim();
      int index=env.indexOf('=');
      if (index == -1) {
        shellEnv.put(env,"");
        continue;
      }
      String key=env.substring(0,index);
      String val="";
      if (index < (env.length() - 1)) {
        val=env.substring(index + 1);
      }
      shellEnv.put(key,val);
    }
  }
  shellCmdPriority=Integer.parseInt(cliParser.getOptionValue("shell_cmd_priority","0"));
  containerMemory=Integer.parseInt(cliParser.getOptionValue("container_memory","10"));
  containerVirtualCores=Integer.parseInt(cliParser.getOptionValue("container_vcores","1"));
  numContainers=Integer.parseInt(cliParser.getOptionValue("num_containers","1"));
  if (containerMemory < 0 || containerVirtualCores < 0 || numContainers < 1) {
    throw new IllegalArgumentException("Invalid no. of containers or container memory/vcores specified," + " exiting." + " Specified containerMemory=" + containerMemory + ", containerVirtualCores="+ containerVirtualCores+ ", numContainer="+ numContainers);
  }
  clientTimeout=Integer.parseInt(cliParser.getOptionValue("timeout","600000"));
  log4jPropFile=cliParser.getOptionValue("log_properties","");
  return true;
}
