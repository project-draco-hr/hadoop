{
  LOG.info("Running Client");
  yarnClient.start();
  YarnClusterMetrics clusterMetrics=yarnClient.getYarnClusterMetrics();
  LOG.info("Got Cluster metric info from ASM" + ", numNodeManagers=" + clusterMetrics.getNumNodeManagers());
  List<NodeReport> clusterNodeReports=yarnClient.getNodeReports(NodeState.RUNNING);
  LOG.info("Got Cluster node info from ASM");
  for (  NodeReport node : clusterNodeReports) {
    LOG.info("Got node report from ASM for" + ", nodeId=" + node.getNodeId() + ", nodeAddress="+ node.getHttpAddress()+ ", nodeRackName="+ node.getRackName()+ ", nodeNumContainers="+ node.getNumContainers());
  }
  QueueInfo queueInfo=yarnClient.getQueueInfo(this.amQueue);
  LOG.info("Queue info" + ", queueName=" + queueInfo.getQueueName() + ", queueCurrentCapacity="+ queueInfo.getCurrentCapacity()+ ", queueMaxCapacity="+ queueInfo.getMaximumCapacity()+ ", queueApplicationCount="+ queueInfo.getApplications().size()+ ", queueChildQueueCount="+ queueInfo.getChildQueues().size());
  List<QueueUserACLInfo> listAclInfo=yarnClient.getQueueAclsInfo();
  for (  QueueUserACLInfo aclInfo : listAclInfo) {
    for (    QueueACL userAcl : aclInfo.getUserAcls()) {
      LOG.info("User ACL Info for Queue" + ", queueName=" + aclInfo.getQueueName() + ", userAcl="+ userAcl.name());
    }
  }
  if (domainId != null && domainId.length() > 0 && toCreateDomain) {
    prepareTimelineDomain();
  }
  YarnClientApplication app=yarnClient.createApplication();
  GetNewApplicationResponse appResponse=app.getNewApplicationResponse();
  long maxMem=appResponse.getMaximumResourceCapability().getMemorySize();
  LOG.info("Max mem capability of resources in this cluster " + maxMem);
  if (amMemory > maxMem) {
    LOG.info("AM memory specified above max threshold of cluster. Using max value." + ", specified=" + amMemory + ", max="+ maxMem);
    amMemory=maxMem;
  }
  int maxVCores=appResponse.getMaximumResourceCapability().getVirtualCores();
  LOG.info("Max virtual cores capability of resources in this cluster " + maxVCores);
  if (amVCores > maxVCores) {
    LOG.info("AM virtual cores specified above max threshold of cluster. " + "Using max value." + ", specified=" + amVCores + ", max="+ maxVCores);
    amVCores=maxVCores;
  }
  ApplicationSubmissionContext appContext=app.getApplicationSubmissionContext();
  ApplicationId appId=appContext.getApplicationId();
  appContext.setKeepContainersAcrossApplicationAttempts(keepContainers);
  appContext.setApplicationName(appName);
  if (attemptFailuresValidityInterval >= 0) {
    appContext.setAttemptFailuresValidityInterval(attemptFailuresValidityInterval);
  }
  Set<String> tags=new HashSet<String>();
  if (flowId != null) {
    tags.add(TimelineUtils.generateFlowIdTag(flowId));
  }
  if (flowRunId != null) {
    tags.add(TimelineUtils.generateFlowRunIdTag(flowRunId));
  }
  appContext.setApplicationTags(tags);
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  LOG.info("Copy App Master jar from local filesystem and add to local environment");
  FileSystem fs=FileSystem.get(conf);
  addToLocalResources(fs,appMasterJar,appMasterJarPath,appId.toString(),localResources,null);
  if (!log4jPropFile.isEmpty()) {
    addToLocalResources(fs,log4jPropFile,log4jPath,appId.toString(),localResources,null);
  }
  String hdfsShellScriptLocation="";
  long hdfsShellScriptLen=0;
  long hdfsShellScriptTimestamp=0;
  if (!shellScriptPath.isEmpty()) {
    Path shellSrc=new Path(shellScriptPath);
    String shellPathSuffix=appName + "/" + appId.toString()+ "/"+ SCRIPT_PATH;
    Path shellDst=new Path(fs.getHomeDirectory(),shellPathSuffix);
    fs.copyFromLocalFile(false,true,shellSrc,shellDst);
    hdfsShellScriptLocation=shellDst.toUri().toString();
    FileStatus shellFileStatus=fs.getFileStatus(shellDst);
    hdfsShellScriptLen=shellFileStatus.getLen();
    hdfsShellScriptTimestamp=shellFileStatus.getModificationTime();
  }
  if (!shellCommand.isEmpty()) {
    addToLocalResources(fs,null,shellCommandPath,appId.toString(),localResources,shellCommand);
  }
  if (shellArgs.length > 0) {
    addToLocalResources(fs,null,shellArgsPath,appId.toString(),localResources,StringUtils.join(shellArgs," "));
  }
  LOG.info("Set the environment for the application master");
  Map<String,String> env=new HashMap<String,String>();
  env.put(DSConstants.DISTRIBUTEDSHELLSCRIPTLOCATION,hdfsShellScriptLocation);
  env.put(DSConstants.DISTRIBUTEDSHELLSCRIPTTIMESTAMP,Long.toString(hdfsShellScriptTimestamp));
  env.put(DSConstants.DISTRIBUTEDSHELLSCRIPTLEN,Long.toString(hdfsShellScriptLen));
  if (domainId != null && domainId.length() > 0) {
    env.put(DSConstants.DISTRIBUTEDSHELLTIMELINEDOMAIN,domainId);
  }
  StringBuilder classPathEnv=new StringBuilder(Environment.CLASSPATH.$$()).append(ApplicationConstants.CLASS_PATH_SEPARATOR).append("./*");
  for (  String c : conf.getStrings(YarnConfiguration.YARN_APPLICATION_CLASSPATH,YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH)) {
    classPathEnv.append(ApplicationConstants.CLASS_PATH_SEPARATOR);
    classPathEnv.append(c.trim());
  }
  classPathEnv.append(ApplicationConstants.CLASS_PATH_SEPARATOR).append("./log4j.properties");
  if (conf.getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER,false)) {
    classPathEnv.append(':');
    classPathEnv.append(System.getProperty("java.class.path"));
  }
  env.put("CLASSPATH",classPathEnv.toString());
  Vector<CharSequence> vargs=new Vector<CharSequence>(30);
  LOG.info("Setting up app master command");
  vargs.add(Environment.JAVA_HOME.$$() + "/bin/java");
  vargs.add("-Xmx" + amMemory + "m");
  vargs.add(appMasterMainClass);
  vargs.add("--container_memory " + String.valueOf(containerMemory));
  vargs.add("--container_vcores " + String.valueOf(containerVirtualCores));
  vargs.add("--num_containers " + String.valueOf(numContainers));
  if (null != nodeLabelExpression) {
    appContext.setNodeLabelExpression(nodeLabelExpression);
  }
  vargs.add("--priority " + String.valueOf(shellCmdPriority));
  for (  Map.Entry<String,String> entry : shellEnv.entrySet()) {
    vargs.add("--shell_env " + entry.getKey() + "="+ entry.getValue());
  }
  if (debugFlag) {
    vargs.add("--debug");
  }
  vargs.addAll(containerRetryOptions);
  if (timelineServiceVersion != null) {
    vargs.add("--timeline_service_version " + timelineServiceVersion);
  }
  vargs.add("1>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + "/AppMaster.stdout");
  vargs.add("2>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + "/AppMaster.stderr");
  StringBuilder command=new StringBuilder();
  for (  CharSequence str : vargs) {
    command.append(str).append(" ");
  }
  LOG.info("Completed setting up app master command " + command.toString());
  List<String> commands=new ArrayList<String>();
  commands.add(command.toString());
  ContainerLaunchContext amContainer=ContainerLaunchContext.newInstance(localResources,env,commands,null,null,null);
  Resource capability=Resource.newInstance(amMemory,amVCores);
  appContext.setResource(capability);
  if (UserGroupInformation.isSecurityEnabled()) {
    Credentials credentials=new Credentials();
    String tokenRenewer=YarnClientUtils.getRmPrincipal(conf);
    if (tokenRenewer == null || tokenRenewer.length() == 0) {
      throw new IOException("Can't get Master Kerberos principal for the RM to use as renewer");
    }
    final Token<?> tokens[]=fs.addDelegationTokens(tokenRenewer,credentials);
    if (tokens != null) {
      for (      Token<?> token : tokens) {
        LOG.info("Got dt for " + fs.getUri() + "; "+ token);
      }
    }
    DataOutputBuffer dob=new DataOutputBuffer();
    credentials.writeTokenStorageToStream(dob);
    ByteBuffer fsTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    amContainer.setTokens(fsTokens);
  }
  appContext.setAMContainerSpec(amContainer);
  Priority pri=Priority.newInstance(amPriority);
  appContext.setPriority(pri);
  appContext.setQueue(amQueue);
  LOG.info("Submitting application to ASM");
  yarnClient.submitApplication(appContext);
  return monitorApplication(appId);
}
