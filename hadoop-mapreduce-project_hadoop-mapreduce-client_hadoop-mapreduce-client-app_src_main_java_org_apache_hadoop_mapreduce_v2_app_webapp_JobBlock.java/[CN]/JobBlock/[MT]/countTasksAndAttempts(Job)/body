{
  Map<TaskId,Task> tasks=job.getTasks();
  for (  Task task : tasks.values()) {
switch (task.getType()) {
case MAP:
switch (task.getState()) {
case RUNNING:
        ++runningMapTasks;
      break;
case SCHEDULED:
    ++pendingMapTasks;
  break;
}
break;
case REDUCE:
switch (task.getState()) {
case RUNNING:
++runningReduceTasks;
break;
case SCHEDULED:
++pendingReduceTasks;
break;
}
break;
}
Map<TaskAttemptId,TaskAttempt> attempts=task.getAttempts();
for (TaskAttempt attempt : attempts.values()) {
int newAttempts=0, running=0, successful=0, failed=0, killed=0;
if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {
++newAttempts;
}
 else if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {
++running;
}
 else if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt.getState())) {
++successful;
}
 else if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {
++failed;
}
 else if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {
++killed;
}
switch (task.getType()) {
case MAP:
newMapAttempts+=newAttempts;
runningMapAttempts+=running;
successfulMapAttempts+=successful;
failedMapAttempts+=failed;
killedMapAttempts+=killed;
break;
case REDUCE:
newReduceAttempts+=newAttempts;
runningReduceAttempts+=running;
successfulReduceAttempts+=successful;
failedReduceAttempts+=failed;
killedReduceAttempts+=killed;
break;
}
}
}
}
