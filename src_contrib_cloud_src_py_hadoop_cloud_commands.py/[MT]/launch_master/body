def launch_master(cluster, config_dir, image_id, size_id, key_name, public_key, user_data_file_template=None, placement=None, user_packages=None, auto_shutdown=None, env_strings=[], client_cidrs=[]):
    if (user_data_file_template == None):
        user_data_file_template = _get_default_user_data_file_template(cluster)
    if (cluster.check_running(MASTER, 0) == False):
        return
    ebs_mappings = ''
    storage = cluster.get_storage()
    if storage.has_any_storage((MASTER,)):
        ebs_mappings = storage.get_mappings_string_for_role(MASTER)
    replacements = {'%ENV%': build_env_string(env_strings, {'USER_PACKAGES': user_packages, 'AUTO_SHUTDOWN': auto_shutdown, 'EBS_MAPPINGS': ebs_mappings, }), }
    instance_user_data = InstanceUserData(user_data_file_template, replacements)
    instance_ids = cluster.launch_instances(MASTER, 1, image_id, size_id, instance_user_data, key_name=key_name, public_key=public_key, placement=placement)
    print ('Waiting for master to start (%s)' % str(instance_ids[0]))
    try:
        cluster.wait_for_instances(instance_ids)
        print 'Master started'
    except TimeoutException:
        print 'Timeout while waiting for master instance to start.'
        return
    cluster.print_status((MASTER,))
    master = cluster.check_running(MASTER, 1)[0]
    _authorize_client_ports(cluster, master, client_cidrs)
    _create_client_hadoop_site_file(cluster, config_dir, master)
