{
  final List<StorageType> excess=new LinkedList<StorageType>();
  final List<StorageType> storageTypes=chooseStorageTypes(replication,chosen,excess);
  final int expectedSize=storageTypes.size() - excess.size();
  final List<StorageType> removed=new LinkedList<StorageType>();
  for (int i=storageTypes.size() - 1; i >= 0; i--) {
    final StorageType t=storageTypes.get(i);
    if (unavailables.contains(t)) {
      final StorageType fallback=isNewBlock ? getCreationFallback(unavailables) : getReplicationFallback(unavailables);
      if (fallback == null) {
        removed.add(storageTypes.remove(i));
      }
 else {
        storageTypes.set(i,fallback);
      }
    }
  }
  diff(storageTypes,excess,null);
  if (storageTypes.size() < expectedSize) {
    LOG.warn("Failed to place enough replicas: expected size is " + expectedSize + " but only "+ storageTypes.size()+ " storage types can be selected "+ "(replication="+ replication+ ", selected="+ storageTypes+ ", unavailable="+ unavailables+ ", removed="+ removed+ ", policy="+ this+ ")");
  }
  return storageTypes;
}
