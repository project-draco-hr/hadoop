{
  ApplicationId appId=ApplicationId.newInstance(1,1);
  JobId jobId=MRBuilderUtils.newJobId(appId,1);
  TaskId taskId=MRBuilderUtils.newTaskId(jobId,1,TaskType.MAP);
  Path jobFile=mock(Path.class);
  EventHandler eventHandler=mock(EventHandler.class);
  TaskAttemptListener taListener=mock(TaskAttemptListener.class);
  when(taListener.getAddress()).thenReturn(new InetSocketAddress("localhost",0));
  JobConf jobConf=new JobConf();
  jobConf.setClass("fs.file.impl",StubbedFS.class,FileSystem.class);
  jobConf.setBoolean("fs.file.impl.disable.cache",true);
  jobConf.set(JobConf.MAPRED_MAP_TASK_ENV,"");
  jobConf.set(YarnConfiguration.NM_AUX_SERVICES,TestShuffleHandler1.MAPREDUCE_TEST_SHUFFLE_SERVICEID + "," + TestShuffleHandler2.MAPREDUCE_TEST_SHUFFLE_SERVICEID);
  String serviceName=TestShuffleHandler1.MAPREDUCE_TEST_SHUFFLE_SERVICEID;
  String serviceStr=String.format(YarnConfiguration.NM_AUX_SERVICE_FMT,serviceName);
  jobConf.set(serviceStr,TestShuffleHandler1.class.getName());
  serviceName=TestShuffleHandler2.MAPREDUCE_TEST_SHUFFLE_SERVICEID;
  serviceStr=String.format(YarnConfiguration.NM_AUX_SERVICE_FMT,serviceName);
  jobConf.set(serviceStr,TestShuffleHandler2.class.getName());
  jobConf.set(MRJobConfig.MAPREDUCE_JOB_SHUFFLE_PROVIDER_SERVICES,TestShuffleHandler1.MAPREDUCE_TEST_SHUFFLE_SERVICEID + "," + TestShuffleHandler2.MAPREDUCE_TEST_SHUFFLE_SERVICEID);
  Credentials credentials=new Credentials();
  Token<JobTokenIdentifier> jobToken=new Token<JobTokenIdentifier>(("tokenid").getBytes(),("tokenpw").getBytes(),new Text("tokenkind"),new Text("tokenservice"));
  TaskAttemptImpl taImpl=new MapTaskAttemptImpl(taskId,1,eventHandler,jobFile,1,mock(TaskSplitMetaInfo.class),jobConf,taListener,jobToken,credentials,SystemClock.getInstance(),null);
  jobConf.set(MRJobConfig.APPLICATION_ATTEMPT_ID,taImpl.getID().toString());
  ContainerLaunchContext launchCtx=TaskAttemptImpl.createContainerLaunchContext(null,jobConf,jobToken,taImpl.createRemoteTask(),TypeConverter.fromYarn(jobId),mock(WrappedJvmID.class),taListener,credentials);
  Map<String,ByteBuffer> serviceDataMap=launchCtx.getServiceData();
  Assert.assertNotNull("TestShuffleHandler1 is missing",serviceDataMap.get(TestShuffleHandler1.MAPREDUCE_TEST_SHUFFLE_SERVICEID));
  Assert.assertNotNull("TestShuffleHandler2 is missing",serviceDataMap.get(TestShuffleHandler2.MAPREDUCE_TEST_SHUFFLE_SERVICEID));
  Assert.assertTrue("mismatch number of services in map",serviceDataMap.size() == 3);
}
