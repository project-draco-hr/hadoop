{
  Configuration conf=getConfig();
  boolean enableCorsFilter=conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);
  boolean useYarnAuthenticationFilter=conf.getBoolean(YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);
  String authPrefix="hadoop.http.authentication.";
  String authTypeKey=authPrefix + "type";
  String filterInitializerConfKey="hadoop.http.filter.initializers";
  String actualInitializers="";
  Class<?>[] initializersClasses=conf.getClasses(filterInitializerConfKey);
  if (enableCorsFilter) {
    conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX,true);
  }
  boolean hasHadoopAuthFilterInitializer=false;
  boolean hasRMAuthFilterInitializer=false;
  if (initializersClasses != null) {
    for (    Class<?> initializer : initializersClasses) {
      if (initializer.getName().equals(AuthenticationFilterInitializer.class.getName())) {
        hasHadoopAuthFilterInitializer=true;
      }
      if (initializer.getName().equals(RMAuthenticationFilterInitializer.class.getName())) {
        hasRMAuthFilterInitializer=true;
      }
    }
    if (UserGroupInformation.isSecurityEnabled() && useYarnAuthenticationFilter && hasHadoopAuthFilterInitializer&& conf.get(authTypeKey,"").equals(KerberosAuthenticationHandler.TYPE)) {
      ArrayList<String> target=new ArrayList<String>();
      for (      Class<?> filterInitializer : initializersClasses) {
        if (filterInitializer.getName().equals(AuthenticationFilterInitializer.class.getName())) {
          if (hasRMAuthFilterInitializer == false) {
            target.add(RMAuthenticationFilterInitializer.class.getName());
          }
          continue;
        }
        target.add(filterInitializer.getName());
      }
      actualInitializers=StringUtils.join(",",target);
      LOG.info("Using RM authentication filter(kerberos/delegation-token)" + " for RM webapp authentication");
      RMAuthenticationFilter.setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);
      conf.set(filterInitializerConfKey,actualInitializers);
    }
  }
  String initializers=conf.get(filterInitializerConfKey);
  if (!UserGroupInformation.isSecurityEnabled()) {
    if (initializersClasses == null || initializersClasses.length == 0) {
      conf.set(filterInitializerConfKey,RMAuthenticationFilterInitializer.class.getName());
      conf.set(authTypeKey,"simple");
    }
 else     if (initializers.equals(StaticUserWebFilter.class.getName())) {
      conf.set(filterInitializerConfKey,RMAuthenticationFilterInitializer.class.getName() + "," + initializers);
      conf.set(authTypeKey,"simple");
    }
  }
  Builder<ApplicationMasterService> builder=WebApps.$for("cluster",ApplicationMasterService.class,masterService,"ws").with(conf).withHttpSpnegoPrincipalKey(YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY).withHttpSpnegoKeytabKey(YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY).withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX).at(webAppAddress);
  String proxyHostAndPort=WebAppUtils.getProxyHostAndPort(conf);
  if (WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).equals(proxyHostAndPort)) {
    if (HAUtil.isHAEnabled(conf)) {
      fetcher=new AppReportFetcher(conf);
    }
 else {
      fetcher=new AppReportFetcher(conf,getClientRMService());
    }
    builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,ProxyUriUtils.PROXY_PATH_SPEC,WebAppProxyServlet.class);
    builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE,fetcher);
    String[] proxyParts=proxyHostAndPort.split(":");
    builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE,proxyParts[0]);
  }
  webApp=builder.start(new RMWebApp(this));
}
