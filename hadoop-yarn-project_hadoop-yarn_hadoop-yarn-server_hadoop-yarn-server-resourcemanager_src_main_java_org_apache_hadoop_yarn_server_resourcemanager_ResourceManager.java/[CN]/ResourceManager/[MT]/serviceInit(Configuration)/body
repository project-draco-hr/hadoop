{
  this.conf=conf;
  this.rmContext=new RMContextImpl();
  this.configurationProvider=ConfigurationProviderFactory.getConfigurationProvider(conf);
  this.configurationProvider.init(this.conf);
  rmContext.setConfigurationProvider(configurationProvider);
  InputStream coreSiteXMLInputStream=this.configurationProvider.getConfigurationInputStream(this.conf,YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);
  if (coreSiteXMLInputStream != null) {
    this.conf.addResource(coreSiteXMLInputStream);
  }
  Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf).refresh();
  ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);
  InputStream yarnSiteXMLInputStream=this.configurationProvider.getConfigurationInputStream(this.conf,YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);
  if (yarnSiteXMLInputStream != null) {
    this.conf.addResource(yarnSiteXMLInputStream);
  }
  validateConfigs(this.conf);
  rmDispatcher=setupDispatcher();
  addIfService(rmDispatcher);
  rmContext.setDispatcher(rmDispatcher);
  adminService=createAdminService();
  addService(adminService);
  rmContext.setRMAdminService(adminService);
  this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));
  if (this.rmContext.isHAEnabled()) {
    HAUtil.verifyAndSetConfiguration(this.conf);
  }
  createAndInitActiveServices();
  webAppAddress=WebAppUtils.getWebAppBindURL(this.conf,YarnConfiguration.RM_BIND_HOST,WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));
  this.rmLoginUGI=UserGroupInformation.getCurrentUser();
  super.serviceInit(this.conf);
}
