{
  this.conf=conf;
  this.rmContext=new RMContextImpl();
  this.configurationProvider=ConfigurationProviderFactory.getConfigurationProvider(conf);
  this.configurationProvider.init(this.conf);
  rmContext.setConfigurationProvider(configurationProvider);
  InputStream coreSiteXMLInputStream=this.configurationProvider.getConfigurationInputStream(this.conf,YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);
  if (coreSiteXMLInputStream != null) {
    this.conf.addResource(coreSiteXMLInputStream,YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);
  }
  Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf).refresh();
  RMServerUtils.processRMProxyUsersConf(conf);
  ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);
  InputStream yarnSiteXMLInputStream=this.configurationProvider.getConfigurationInputStream(this.conf,YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);
  if (yarnSiteXMLInputStream != null) {
    this.conf.addResource(yarnSiteXMLInputStream,YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);
  }
  validateConfigs(this.conf);
  this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));
  if (this.rmContext.isHAEnabled()) {
    HAUtil.verifyAndSetConfiguration(this.conf);
    curatorEnabled=conf.getBoolean(YarnConfiguration.CURATOR_LEADER_ELECTOR,YarnConfiguration.DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED);
    if (curatorEnabled) {
      this.curator=createAndStartCurator(conf);
      LeaderElectorService elector=new LeaderElectorService(rmContext,this);
      addService(elector);
      rmContext.setLeaderElectorService(elector);
    }
  }
  this.rmLoginUGI=UserGroupInformation.getCurrentUser();
  try {
    doSecureLogin();
  }
 catch (  IOException ie) {
    throw new YarnRuntimeException("Failed to login",ie);
  }
  rmDispatcher=setupDispatcher();
  addIfService(rmDispatcher);
  rmContext.setDispatcher(rmDispatcher);
  adminService=createAdminService();
  addService(adminService);
  rmContext.setRMAdminService(adminService);
  rmContext.setYarnConfiguration(conf);
  createAndInitActiveServices(false);
  webAppAddress=WebAppUtils.getWebAppBindURL(this.conf,YarnConfiguration.RM_BIND_HOST,WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));
  RMApplicationHistoryWriter rmApplicationHistoryWriter=createRMApplicationHistoryWriter();
  addService(rmApplicationHistoryWriter);
  rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);
  SystemMetricsPublisher systemMetricsPublisher=createSystemMetricsPublisher();
  addService(systemMetricsPublisher);
  rmContext.setSystemMetricsPublisher(systemMetricsPublisher);
  super.serviceInit(this.conf);
}
