{
  Configuration config=this.rmContext.getYarnConfiguration();
  if (YarnConfiguration.isOpportunisticContainerAllocationEnabled(config) || YarnConfiguration.isDistSchedulingEnabled(config)) {
    if (YarnConfiguration.isDistSchedulingEnabled(config) && !YarnConfiguration.isOpportunisticContainerAllocationEnabled(config)) {
      throw new YarnRuntimeException("Invalid parameters: opportunistic container allocation has to " + "be enabled when distributed scheduling is enabled.");
    }
    OpportunisticContainerAllocatorAMService oppContainerAllocatingAMService=new OpportunisticContainerAllocatorAMService(this.rmContext,scheduler);
    EventDispatcher oppContainerAllocEventDispatcher=new EventDispatcher(oppContainerAllocatingAMService,OpportunisticContainerAllocatorAMService.class.getName());
    addService(oppContainerAllocEventDispatcher);
    rmDispatcher.register(SchedulerEventType.class,oppContainerAllocEventDispatcher);
    this.rmContext.setContainerQueueLimitCalculator(oppContainerAllocatingAMService.getNodeManagerQueueLimitCalculator());
    return oppContainerAllocatingAMService;
  }
  return new ApplicationMasterService(this.rmContext,scheduler);
}
