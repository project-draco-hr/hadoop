{
  conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,true);
  rmSecretManagerService=createRMSecretManagerService();
  addService(rmSecretManagerService);
  containerAllocationExpirer=new ContainerAllocationExpirer(rmDispatcher);
  addService(containerAllocationExpirer);
  rmContext.setContainerAllocationExpirer(containerAllocationExpirer);
  AMLivelinessMonitor amLivelinessMonitor=createAMLivelinessMonitor();
  addService(amLivelinessMonitor);
  rmContext.setAMLivelinessMonitor(amLivelinessMonitor);
  AMLivelinessMonitor amFinishingMonitor=createAMLivelinessMonitor();
  addService(amFinishingMonitor);
  rmContext.setAMFinishingMonitor(amFinishingMonitor);
  boolean isRecoveryEnabled=conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);
  RMStateStore rmStore=null;
  if (isRecoveryEnabled) {
    recoveryEnabled=true;
    rmStore=RMStateStoreFactory.getStore(conf);
  }
 else {
    recoveryEnabled=false;
    rmStore=new NullRMStateStore();
  }
  try {
    rmStore.init(conf);
    rmStore.setRMDispatcher(rmDispatcher);
  }
 catch (  Exception e) {
    LOG.error("Failed to init state store",e);
    throw e;
  }
  rmContext.setStateStore(rmStore);
  if (UserGroupInformation.isSecurityEnabled()) {
    delegationTokenRenewer=createDelegationTokenRenewer();
    rmContext.setDelegationTokenRenewer(delegationTokenRenewer);
  }
  RMApplicationHistoryWriter rmApplicationHistoryWriter=createRMApplicationHistoryWriter();
  addService(rmApplicationHistoryWriter);
  rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);
  nodesListManager=new NodesListManager(rmContext);
  rmDispatcher.register(NodesListManagerEventType.class,nodesListManager);
  addService(nodesListManager);
  rmContext.setNodesListManager(nodesListManager);
  scheduler=createScheduler();
  scheduler.setRMContext(rmContext);
  addIfService(scheduler);
  rmContext.setScheduler(scheduler);
  schedulerDispatcher=createSchedulerEventDispatcher();
  addIfService(schedulerDispatcher);
  rmDispatcher.register(SchedulerEventType.class,schedulerDispatcher);
  rmDispatcher.register(RMAppEventType.class,new ApplicationEventDispatcher(rmContext));
  rmDispatcher.register(RMAppAttemptEventType.class,new ApplicationAttemptEventDispatcher(rmContext));
  rmDispatcher.register(RMNodeEventType.class,new NodeEventDispatcher(rmContext));
  nmLivelinessMonitor=createNMLivelinessMonitor();
  addService(nmLivelinessMonitor);
  resourceTracker=createResourceTrackerService();
  addService(resourceTracker);
  rmContext.setResourceTrackerService(resourceTracker);
  DefaultMetricsSystem.initialize("ResourceManager");
  JvmMetrics.initSingleton("ResourceManager",null);
  createPolicyMonitors();
  masterService=createApplicationMasterService();
  addService(masterService);
  rmContext.setApplicationMasterService(masterService);
  applicationACLsManager=new ApplicationACLsManager(conf);
  queueACLsManager=createQueueACLsManager(scheduler,conf);
  rmAppManager=createRMAppManager();
  rmDispatcher.register(RMAppManagerEventType.class,rmAppManager);
  clientRM=createClientRMService();
  rmContext.setClientRMService(clientRM);
  addService(clientRM);
  rmContext.setClientRMService(clientRM);
  applicationMasterLauncher=createAMLauncher();
  rmDispatcher.register(AMLauncherEventType.class,applicationMasterLauncher);
  addService(applicationMasterLauncher);
  if (UserGroupInformation.isSecurityEnabled()) {
    addService(delegationTokenRenewer);
    delegationTokenRenewer.setRMContext(rmContext);
  }
  new RMNMInfo(rmContext,scheduler);
  super.serviceInit(conf);
}
