{
  activeServiceContext=new RMActiveServiceContext();
  rmContext.setActiveServiceContext(activeServiceContext);
  conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,true);
  rmSecretManagerService=createRMSecretManagerService();
  addService(rmSecretManagerService);
  containerAllocationExpirer=new ContainerAllocationExpirer(rmDispatcher);
  addService(containerAllocationExpirer);
  rmContext.setContainerAllocationExpirer(containerAllocationExpirer);
  AMLivelinessMonitor amLivelinessMonitor=createAMLivelinessMonitor();
  addService(amLivelinessMonitor);
  rmContext.setAMLivelinessMonitor(amLivelinessMonitor);
  AMLivelinessMonitor amFinishingMonitor=createAMLivelinessMonitor();
  addService(amFinishingMonitor);
  rmContext.setAMFinishingMonitor(amFinishingMonitor);
  RMNodeLabelsManager nlm=createNodeLabelManager();
  nlm.setRMContext(rmContext);
  addService(nlm);
  rmContext.setNodeLabelManager(nlm);
  RMDelegatedNodeLabelsUpdater delegatedNodeLabelsUpdater=createRMDelegatedNodeLabelsUpdater();
  if (delegatedNodeLabelsUpdater != null) {
    addService(delegatedNodeLabelsUpdater);
    rmContext.setRMDelegatedNodeLabelsUpdater(delegatedNodeLabelsUpdater);
  }
  recoveryEnabled=conf.getBoolean(YarnConfiguration.RECOVERY_ENABLED,YarnConfiguration.DEFAULT_RM_RECOVERY_ENABLED);
  RMStateStore rmStore=null;
  if (recoveryEnabled) {
    rmStore=RMStateStoreFactory.getStore(conf);
    boolean isWorkPreservingRecoveryEnabled=conf.getBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);
    rmContext.setWorkPreservingRecoveryEnabled(isWorkPreservingRecoveryEnabled);
  }
 else {
    rmStore=new NullRMStateStore();
  }
  try {
    rmStore.setResourceManager(rm);
    rmStore.init(conf);
    rmStore.setRMDispatcher(rmDispatcher);
  }
 catch (  Exception e) {
    LOG.error("Failed to init state store",e);
    throw e;
  }
  rmContext.setStateStore(rmStore);
  if (UserGroupInformation.isSecurityEnabled()) {
    delegationTokenRenewer=createDelegationTokenRenewer();
    rmContext.setDelegationTokenRenewer(delegationTokenRenewer);
  }
  RMApplicationHistoryWriter rmApplicationHistoryWriter=createRMApplicationHistoryWriter();
  addService(rmApplicationHistoryWriter);
  rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);
  if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {
    RMTimelineCollectorManager timelineCollectorManager=createRMTimelineCollectorManager();
    addService(timelineCollectorManager);
    rmContext.setRMTimelineCollectorManager(timelineCollectorManager);
  }
  nodesListManager=new NodesListManager(rmContext);
  rmDispatcher.register(NodesListManagerEventType.class,nodesListManager);
  addService(nodesListManager);
  rmContext.setNodesListManager(nodesListManager);
  scheduler=createScheduler();
  scheduler.setRMContext(rmContext);
  addIfService(scheduler);
  rmContext.setScheduler(scheduler);
  schedulerDispatcher=createSchedulerEventDispatcher();
  addIfService(schedulerDispatcher);
  rmDispatcher.register(SchedulerEventType.class,schedulerDispatcher);
  rmDispatcher.register(RMAppEventType.class,new ApplicationEventDispatcher(rmContext));
  rmDispatcher.register(RMAppAttemptEventType.class,new ApplicationAttemptEventDispatcher(rmContext));
  rmDispatcher.register(RMNodeEventType.class,new NodeEventDispatcher(rmContext));
  nmLivelinessMonitor=createNMLivelinessMonitor();
  addService(nmLivelinessMonitor);
  resourceTracker=createResourceTrackerService();
  addService(resourceTracker);
  rmContext.setResourceTrackerService(resourceTracker);
  MetricsSystem ms=DefaultMetricsSystem.initialize("ResourceManager");
  if (fromActive) {
    JvmMetrics.reattach(ms,jvmMetrics);
    UserGroupInformation.reattachMetrics();
  }
 else {
    jvmMetrics=JvmMetrics.initSingleton("ResourceManager",null);
  }
  JvmPauseMonitor pauseMonitor=new JvmPauseMonitor();
  addService(pauseMonitor);
  jvmMetrics.setPauseMonitor(pauseMonitor);
  if (conf.getBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,YarnConfiguration.DEFAULT_RM_RESERVATION_SYSTEM_ENABLE)) {
    reservationSystem=createReservationSystem();
    if (reservationSystem != null) {
      reservationSystem.setRMContext(rmContext);
      addIfService(reservationSystem);
      rmContext.setReservationSystem(reservationSystem);
      LOG.info("Initialized Reservation system");
    }
  }
  createPolicyMonitors();
  masterService=createApplicationMasterService();
  addService(masterService);
  rmContext.setApplicationMasterService(masterService);
  applicationACLsManager=new ApplicationACLsManager(conf);
  queueACLsManager=createQueueACLsManager(scheduler,conf);
  rmAppManager=createRMAppManager();
  rmDispatcher.register(RMAppManagerEventType.class,rmAppManager);
  clientRM=createClientRMService();
  addService(clientRM);
  rmContext.setClientRMService(clientRM);
  applicationMasterLauncher=createAMLauncher();
  rmDispatcher.register(AMLauncherEventType.class,applicationMasterLauncher);
  addService(applicationMasterLauncher);
  if (UserGroupInformation.isSecurityEnabled()) {
    addService(delegationTokenRenewer);
    delegationTokenRenewer.setRMContext(rmContext);
  }
  new RMNMInfo(rmContext,scheduler);
  super.serviceInit(conf);
}
