{
  List<File> fileList=new ArrayList<File>(pendingUploadFiles);
  Collections.sort(fileList);
  for (  File logFile : fileList) {
    FileInputStream in=null;
    try {
      in=secureOpenFile(logFile);
    }
 catch (    IOException e) {
      logErrorMessage(logFile,e);
      IOUtils.cleanup(LOG,in);
      continue;
    }
    final long fileLength=logFile.length();
    out.writeUTF(logFile.getName());
    out.writeUTF(String.valueOf(fileLength));
    try {
      byte[] buf=new byte[65535];
      int len=0;
      long bytesLeft=fileLength;
      while ((len=in.read(buf)) != -1) {
        if (len < bytesLeft) {
          out.write(buf,0,len);
          bytesLeft-=len;
        }
 else {
          out.write(buf,0,(int)bytesLeft);
          break;
        }
      }
      long newLength=logFile.length();
      if (fileLength < newLength) {
        LOG.warn("Aggregated logs truncated by approximately " + (newLength - fileLength) + " bytes.");
      }
      this.uploadedFiles.add(logFile);
    }
 catch (    IOException e) {
      String message=logErrorMessage(logFile,e);
      out.write(message.getBytes());
    }
 finally {
      IOUtils.cleanup(LOG,in);
    }
  }
}
