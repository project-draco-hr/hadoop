{
  byte[] buf=new byte[65535];
  String fileType=valueStream.readUTF();
  String fileLengthStr=valueStream.readUTF();
  long fileLength=Long.parseLong(fileLengthStr);
  if (logType.contains(fileType)) {
    out.print("LogType:");
    out.println(fileType);
    if (logUploadedTime != -1) {
      out.print("Log Upload Time:");
      out.println(Times.format(logUploadedTime));
    }
    out.print("LogLength:");
    out.println(fileLengthStr);
    out.println("Log Contents:");
    long toSkip=0;
    long totalBytesToRead=fileLength;
    long skipAfterRead=0;
    if (bytes < 0) {
      long absBytes=Math.abs(bytes);
      if (absBytes < fileLength) {
        toSkip=fileLength - absBytes;
        totalBytesToRead=absBytes;
      }
      org.apache.hadoop.io.IOUtils.skipFully(valueStream,toSkip);
    }
 else {
      if (bytes < fileLength) {
        totalBytesToRead=bytes;
        skipAfterRead=fileLength - bytes;
      }
    }
    long curRead=0;
    long pendingRead=totalBytesToRead - curRead;
    int toRead=pendingRead > buf.length ? buf.length : (int)pendingRead;
    int len=valueStream.read(buf,0,toRead);
    while (len != -1 && curRead < totalBytesToRead) {
      out.write(buf,0,len);
      curRead+=len;
      pendingRead=totalBytesToRead - curRead;
      toRead=pendingRead > buf.length ? buf.length : (int)pendingRead;
      len=valueStream.read(buf,0,toRead);
    }
    org.apache.hadoop.io.IOUtils.skipFully(valueStream,skipAfterRead);
    out.println("\nEnd of LogType:" + fileType);
    out.println("");
    return 0;
  }
 else {
    long totalSkipped=0;
    long currSkipped=0;
    while (currSkipped != -1 && totalSkipped < fileLength) {
      currSkipped=valueStream.skip(fileLength - totalSkipped);
      totalSkipped+=currSkipped;
    }
    return -1;
  }
}
