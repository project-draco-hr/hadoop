{
  File curDir=getCurrentDir();
  String rootPath=root.getCanonicalPath();
switch (curState) {
case COMPLETE_UPGRADE:
    LOG.info("Completing previous upgrade for storage directory " + rootPath + ".");
  rename(getPreviousTmp(),getPreviousDir());
return;
case RECOVER_UPGRADE:
LOG.info("Recovering storage directory " + rootPath + " from previous upgrade.");
if (curDir.exists()) deleteDir(curDir);
rename(getPreviousTmp(),curDir);
return;
case COMPLETE_ROLLBACK:
LOG.info("Completing previous rollback for storage directory " + rootPath + ".");
deleteDir(getRemovedTmp());
return;
case RECOVER_ROLLBACK:
LOG.info("Recovering storage directory " + rootPath + " from previous rollback.");
rename(getRemovedTmp(),curDir);
return;
case COMPLETE_FINALIZE:
LOG.info("Completing previous finalize for storage directory " + rootPath + ".");
deleteDir(getFinalizedTmp());
return;
case COMPLETE_CHECKPOINT:
LOG.info("Completing previous checkpoint for storage directory " + rootPath + ".");
File prevCkptDir=getPreviousCheckpoint();
if (prevCkptDir.exists()) deleteDir(prevCkptDir);
rename(getLastCheckpointTmp(),prevCkptDir);
return;
case RECOVER_CHECKPOINT:
LOG.info("Recovering storage directory " + rootPath + " from failed checkpoint.");
if (curDir.exists()) deleteDir(curDir);
rename(getLastCheckpointTmp(),curDir);
return;
default :
throw new IOException("Unexpected FS state: " + curState);
}
}
