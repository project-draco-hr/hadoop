{
  LowRedundancyBlocks lowRedundancyBlocks=new LowRedundancyBlocks();
  BlockInfo block1=genBlockInfo(ThreadLocalRandom.current().nextLong());
  BlockInfo block2=genBlockInfo(ThreadLocalRandom.current().nextLong());
  BlockInfo block3=genBlockInfo(ThreadLocalRandom.current().nextLong());
  final int block1CurReplicas=2;
  final int block1ExpectedReplicas=7;
  lowRedundancyBlocks.add(block1,block1CurReplicas,0,0,block1ExpectedReplicas);
  lowRedundancyBlocks.add(block2,2,0,0,7);
  lowRedundancyBlocks.add(block3,2,0,0,6);
  List<List<BlockInfo>> chosenBlocks;
  chosenBlocks=lowRedundancyBlocks.chooseLowRedundancyBlocks(1);
  assertTheChosenBlocks(chosenBlocks,0,1,0,0,0);
  lowRedundancyBlocks.update(block1,block1CurReplicas + 1,0,0,block1ExpectedReplicas,1,0);
  chosenBlocks=lowRedundancyBlocks.chooseLowRedundancyBlocks(1);
  assertTheChosenBlocks(chosenBlocks,0,1,0,0,0);
  chosenBlocks=lowRedundancyBlocks.chooseLowRedundancyBlocks(1);
  assertTheChosenBlocks(chosenBlocks,0,0,1,0,0);
}
