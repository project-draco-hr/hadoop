{
  HdfsConfiguration conf=new HdfsConfiguration();
  conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY,true);
  String[] hosts=new String[]{"host1","host2","host3","host4","host5","host6"};
  String[] racks=new String[]{"/d1/r1","/d1/r1","/d1/r2","/d1/r2","/d2/r3","/d2/r3"};
  MiniDFSCluster miniCluster=new MiniDFSCluster.Builder(conf).racks(racks).hosts(hosts).numDataNodes(hosts.length).build();
  miniCluster.waitActive();
  try {
    for (int i=0; i < 2; i++) {
      DataNode dn=miniCluster.getDataNodes().get(i);
      DataNodeTestUtils.setHeartbeatsDisabledForTests(dn,true);
      DatanodeDescriptor dnDes=miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getDatanode(dn.getDatanodeId());
      DFSTestUtil.resetLastUpdatesWithOffset(dnDes,-(staleInterval + 1));
    }
    miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getHeartbeatManager().heartbeatCheck();
    int numStaleNodes=miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getNumStaleNodes();
    assertEquals(numStaleNodes,2);
    assertTrue(miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().shouldAvoidStaleDataNodesForWrite());
    DatanodeDescriptor staleNodeInfo=miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getDatanode(miniCluster.getDataNodes().get(0).getDatanodeId());
    BlockPlacementPolicy replicator=miniCluster.getNameNode().getNamesystem().getBlockManager().getBlockPlacementPolicy();
    DatanodeStorageInfo[] targets=replicator.chooseTarget(filename,3,staleNodeInfo,new ArrayList<DatanodeStorageInfo>(),false,null,BLOCK_SIZE,TestBlockStoragePolicy.DEFAULT_STORAGE_POLICY,null);
    assertEquals(targets.length,3);
    assertFalse(isOnSameRack(targets[0],staleNodeInfo));
    for (int i=0; i < 4; i++) {
      DataNode dn=miniCluster.getDataNodes().get(i);
      DataNodeTestUtils.setHeartbeatsDisabledForTests(dn,true);
      DatanodeDescriptor dnDesc=miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getDatanode(dn.getDatanodeId());
      DFSTestUtil.resetLastUpdatesWithOffset(dnDesc,-(staleInterval + 1));
    }
    miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getHeartbeatManager().heartbeatCheck();
    numStaleNodes=miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getNumStaleNodes();
    assertEquals(numStaleNodes,4);
    assertFalse(miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().shouldAvoidStaleDataNodesForWrite());
    targets=replicator.chooseTarget(filename,3,staleNodeInfo,new ArrayList<DatanodeStorageInfo>(),false,null,BLOCK_SIZE,TestBlockStoragePolicy.DEFAULT_STORAGE_POLICY,null);
    assertEquals(targets.length,3);
    assertTrue(isOnSameRack(targets[0],staleNodeInfo));
    for (int i=2; i < 4; i++) {
      DataNode dn=miniCluster.getDataNodes().get(i);
      DataNodeTestUtils.setHeartbeatsDisabledForTests(dn,false);
      DatanodeDescriptor dnDesc=miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getDatanode(dn.getDatanodeId());
      DFSTestUtil.resetLastUpdatesWithOffset(dnDesc,0);
    }
    miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getHeartbeatManager().heartbeatCheck();
    numStaleNodes=miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getNumStaleNodes();
    assertEquals(numStaleNodes,2);
    assertTrue(miniCluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().shouldAvoidStaleDataNodesForWrite());
    targets=chooseTarget(3,staleNodeInfo);
    assertEquals(targets.length,3);
    assertFalse(isOnSameRack(targets[0],staleNodeInfo));
  }
  finally {
    miniCluster.shutdown();
  }
}
