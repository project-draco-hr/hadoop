{
  dataNodes[0].updateHeartbeat(2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,(HdfsConstants.MIN_BLOCKS_FOR_WRITE - 1) * BLOCK_SIZE,0L,0,0);
  DatanodeDescriptor[] targets;
  targets=replicator.chooseTarget(filename,0,dataNodes[0],BLOCK_SIZE);
  assertEquals(targets.length,0);
  targets=replicator.chooseTarget(filename,1,dataNodes[0],BLOCK_SIZE);
  assertEquals(targets.length,1);
  assertEquals(targets[0],dataNodes[1]);
  targets=replicator.chooseTarget(filename,2,dataNodes[0],BLOCK_SIZE);
  assertEquals(targets.length,2);
  assertEquals(targets[0],dataNodes[1]);
  assertFalse(cluster.isOnSameRack(targets[0],targets[1]));
  targets=replicator.chooseTarget(filename,3,dataNodes[0],BLOCK_SIZE);
  assertEquals(targets.length,3);
  assertEquals(targets[0],dataNodes[1]);
  assertTrue(cluster.isOnSameRack(targets[1],targets[2]));
  assertFalse(cluster.isOnSameRack(targets[0],targets[1]));
  targets=replicator.chooseTarget(filename,4,dataNodes[0],BLOCK_SIZE);
  assertEquals(targets.length,4);
  assertEquals(targets[0],dataNodes[1]);
  for (int i=1; i < 4; i++) {
    assertFalse(cluster.isOnSameRack(targets[0],targets[i]));
  }
  assertTrue(cluster.isOnSameRack(targets[1],targets[2]) || cluster.isOnSameRack(targets[2],targets[3]));
  assertFalse(cluster.isOnSameRack(targets[1],targets[3]));
  dataNodes[0].updateHeartbeat(2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0,0);
}
