{
  DatanodeStorageInfo storage=DFSTestUtil.createDatanodeStorageInfo("DS-xxxx","7.7.7.7","/d2/r3","host7");
  DatanodeDescriptor newDn=storage.getDatanodeDescriptor();
  Set<Node> excludedNodes;
  List<DatanodeStorageInfo> chosenNodes=new ArrayList<DatanodeStorageInfo>();
  excludedNodes=new HashSet<Node>();
  excludedNodes.add(dataNodes[0]);
  excludedNodes.add(dataNodes[1]);
  excludedNodes.add(dataNodes[2]);
  excludedNodes.add(dataNodes[3]);
  DatanodeStorageInfo[] targets;
  targets=chooseTarget(2,chosenNodes,excludedNodes);
  assertEquals(1,targets.length);
  final BlockManager bm=namenode.getNamesystem().getBlockManager();
  bm.getDatanodeManager().getNetworkTopology().add(newDn);
  bm.getDatanodeManager().getHeartbeatManager().addDatanode(newDn);
  updateHeartbeatWithUsage(newDn,2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0L,0L,0,0);
  excludedNodes.clear();
  excludedNodes.add(dataNodes[0]);
  excludedNodes.add(dataNodes[1]);
  excludedNodes.add(dataNodes[2]);
  excludedNodes.add(dataNodes[3]);
  chosenNodes.clear();
  try {
    targets=chooseTarget(3,chosenNodes,excludedNodes);
    assertEquals(2,targets.length);
  }
  finally {
    bm.getDatanodeManager().getNetworkTopology().remove(newDn);
  }
}
