{
  for (int i=0; i < 2; i++) {
    dataNodes[i].updateHeartbeat(2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,(HdfsConstants.MIN_BLOCKS_FOR_WRITE - 1) * BLOCK_SIZE,0L,0,0);
  }
  final LogVerificationAppender appender=new LogVerificationAppender();
  final Logger logger=Logger.getRootLogger();
  logger.addAppender(appender);
  DatanodeDescriptor[] targets=chooseTarget(NUM_OF_DATANODES);
  assertEquals(targets.length,NUM_OF_DATANODES - 2);
  final List<LoggingEvent> log=appender.getLog();
  assertNotNull(log);
  assertFalse(log.size() == 0);
  final LoggingEvent lastLogEntry=log.get(log.size() - 1);
  assertEquals(lastLogEntry.getLevel(),Level.WARN);
  assertTrue(((String)lastLogEntry.getMessage()).contains("in need of 2"));
  for (int i=0; i < 2; i++) {
    dataNodes[i].updateHeartbeat(2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0,0);
  }
}
