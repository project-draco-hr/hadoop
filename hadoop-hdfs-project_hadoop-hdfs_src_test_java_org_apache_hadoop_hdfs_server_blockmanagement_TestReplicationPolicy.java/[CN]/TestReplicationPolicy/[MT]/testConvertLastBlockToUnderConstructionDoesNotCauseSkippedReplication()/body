{
  Namesystem mockNS=mock(Namesystem.class);
  when(mockNS.isPopulatingReplQueues()).thenReturn(true);
  BlockManager bm=new BlockManager(mockNS,new HdfsConfiguration());
  UnderReplicatedBlocks underReplicatedBlocks=bm.neededReplications;
  Block block1=new Block(ThreadLocalRandom.current().nextLong());
  Block block2=new Block(ThreadLocalRandom.current().nextLong());
  underReplicatedBlocks.add(block1,0,1,1);
  underReplicatedBlocks.add(block2,0,1,1);
  List<List<Block>> chosenBlocks;
  chosenBlocks=underReplicatedBlocks.chooseUnderReplicatedBlocks(1);
  assertTheChosenBlocks(chosenBlocks,1,0,0,0,0);
  final BlockInfoContiguous info=new BlockInfoContiguous(block1,(short)1);
  final BlockCollection mbc=mock(BlockCollection.class);
  when(mbc.getLastBlock()).thenReturn(info);
  when(mbc.getPreferredBlockSize()).thenReturn(block1.getNumBytes() + 1);
  when(mbc.getPreferredBlockReplication()).thenReturn((short)1);
  when(mbc.isUnderConstruction()).thenReturn(true);
  ContentSummary cs=mock(ContentSummary.class);
  when(cs.getLength()).thenReturn((long)1);
  when(mbc.computeContentSummary(bm.getStoragePolicySuite())).thenReturn(cs);
  info.setBlockCollection(mbc);
  bm.addBlockCollection(info,mbc);
  DatanodeStorageInfo[] storageAry={new DatanodeStorageInfo(dataNodes[0],new DatanodeStorage("s1"))};
  final BlockInfoContiguousUnderConstruction ucBlock=info.convertToBlockUnderConstruction(BlockUCState.UNDER_CONSTRUCTION,storageAry);
  DatanodeStorageInfo storage=mock(DatanodeStorageInfo.class);
  DatanodeDescriptor dn=mock(DatanodeDescriptor.class);
  when(dn.isDecommissioned()).thenReturn(true);
  when(storage.getState()).thenReturn(DatanodeStorage.State.NORMAL);
  when(storage.getDatanodeDescriptor()).thenReturn(dn);
  when(storage.removeBlock(any(BlockInfoContiguous.class))).thenReturn(true);
  when(storage.addBlock(any(BlockInfoContiguous.class))).thenReturn(DatanodeStorageInfo.AddBlockResult.ADDED);
  ucBlock.addStorage(storage,ucBlock);
  when(mbc.setLastBlock((BlockInfoContiguous)any(),(DatanodeStorageInfo[])any())).thenReturn(ucBlock);
  bm.convertLastBlockToUnderConstruction(mbc,0L);
  chosenBlocks=underReplicatedBlocks.chooseUnderReplicatedBlocks(1);
  assertTheChosenBlocks(chosenBlocks,1,0,0,0,0);
}
