{
  Namesystem mockNS=mock(Namesystem.class);
  when(mockNS.hasReadLock()).thenReturn(true);
  BlockManager bm=new BlockManager(mockNS,new HdfsConfiguration());
  UnderReplicatedBlocks underReplicatedBlocks=bm.neededReplications;
  long blkID1=ThreadLocalRandom.current().nextLong();
  if (blkID1 < 0) {
    blkID1*=-1;
  }
  long blkID2=ThreadLocalRandom.current().nextLong();
  if (blkID2 < 0) {
    blkID2*=-1;
  }
  BlockInfo block1=genBlockInfo(blkID1);
  BlockInfo block2=genBlockInfo(blkID2);
  underReplicatedBlocks.add(block1,0,0,1,1);
  underReplicatedBlocks.add(block2,0,0,1,1);
  List<List<BlockInfo>> chosenBlocks;
  chosenBlocks=underReplicatedBlocks.chooseUnderReplicatedBlocks(1);
  assertTheChosenBlocks(chosenBlocks,1,0,0,0,0);
  final BlockInfoContiguous info=new BlockInfoContiguous(block1,(short)1);
  final BlockCollection mbc=mock(BlockCollection.class);
  when(mbc.getId()).thenReturn(1000L);
  when(mbc.getLastBlock()).thenReturn(info);
  when(mbc.getPreferredBlockSize()).thenReturn(block1.getNumBytes() + 1);
  when(mbc.isUnderConstruction()).thenReturn(true);
  ContentSummary cs=mock(ContentSummary.class);
  when(cs.getLength()).thenReturn((long)1);
  when(mbc.computeContentSummary(bm.getStoragePolicySuite())).thenReturn(cs);
  info.setBlockCollectionId(1000);
  bm.addBlockCollection(info,mbc);
  DatanodeStorageInfo[] storageAry={new DatanodeStorageInfo(dataNodes[0],new DatanodeStorage("s1"))};
  info.convertToBlockUnderConstruction(BlockUCState.UNDER_CONSTRUCTION,storageAry);
  DatanodeStorageInfo storage=mock(DatanodeStorageInfo.class);
  DatanodeDescriptor dn=mock(DatanodeDescriptor.class);
  when(dn.isDecommissioned()).thenReturn(true);
  when(storage.getState()).thenReturn(DatanodeStorage.State.NORMAL);
  when(storage.getDatanodeDescriptor()).thenReturn(dn);
  when(storage.removeBlock(any(BlockInfo.class))).thenReturn(true);
  when(storage.addBlock(any(BlockInfo.class))).thenReturn(DatanodeStorageInfo.AddBlockResult.ADDED);
  info.addStorage(storage,info);
  BlockInfo lastBlk=mbc.getLastBlock();
  when(mbc.getLastBlock()).thenReturn(lastBlk,info);
  bm.convertLastBlockToUnderConstruction(mbc,0L);
  chosenBlocks=underReplicatedBlocks.chooseUnderReplicatedBlocks(1);
  assertTheChosenBlocks(chosenBlocks,1,0,0,0,0);
}
