{
  boolean listLiveNodes=type == DatanodeReportType.ALL || type == DatanodeReportType.LIVE;
  boolean listDeadNodes=type == DatanodeReportType.ALL || type == DatanodeReportType.DEAD;
  HashMap<String,String> mustList=new HashMap<String,String>();
  if (listDeadNodes) {
    Iterator<String> it=hostsReader.getHosts().iterator();
    while (it.hasNext()) {
      mustList.put(it.next(),"");
    }
    it=hostsReader.getExcludedHosts().iterator();
    while (it.hasNext()) {
      mustList.put(it.next(),"");
    }
  }
  ArrayList<DatanodeDescriptor> nodes=null;
synchronized (namesystem.datanodeMap) {
    nodes=new ArrayList<DatanodeDescriptor>(namesystem.datanodeMap.size() + mustList.size());
    Iterator<DatanodeDescriptor> it=namesystem.datanodeMap.values().iterator();
    while (it.hasNext()) {
      DatanodeDescriptor dn=it.next();
      boolean isDead=namesystem.isDatanodeDead(dn);
      if ((isDead && listDeadNodes) || (!isDead && listLiveNodes)) {
        nodes.add(dn);
      }
      try {
        InetAddress inet=InetAddress.getByName(dn.getHost());
        mustList.remove(inet.getHostName());
        mustList.remove(inet.getHostName() + ":" + dn.getPort());
        mustList.remove(inet.getHostAddress().toString());
        mustList.remove(inet.getHostAddress().toString() + ":" + dn.getPort());
      }
 catch (      UnknownHostException e) {
        mustList.remove(dn.getName());
        mustList.remove(dn.getHost());
        LOG.warn(e);
      }
    }
  }
  if (listDeadNodes) {
    Iterator<String> it=mustList.keySet().iterator();
    while (it.hasNext()) {
      DatanodeDescriptor dn=new DatanodeDescriptor(new DatanodeID(it.next()));
      dn.setLastUpdate(0);
      nodes.add(dn);
    }
  }
  return nodes;
}
