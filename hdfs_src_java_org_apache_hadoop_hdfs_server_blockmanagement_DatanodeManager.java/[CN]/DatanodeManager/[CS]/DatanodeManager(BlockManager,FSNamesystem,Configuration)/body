{
  this.namesystem=namesystem;
  this.blockManager=blockManager;
  this.heartbeatManager=new HeartbeatManager(namesystem,conf);
  this.hostsReader=new HostsFileReader(conf.get(DFSConfigKeys.DFS_HOSTS,""),conf.get(DFSConfigKeys.DFS_HOSTS_EXCLUDE,""));
  this.dnsToSwitchMapping=ReflectionUtils.newInstance(conf.getClass(DFSConfigKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,ScriptBasedMapping.class,DNSToSwitchMapping.class),conf);
  if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {
    dnsToSwitchMapping.resolve(new ArrayList<String>(hostsReader.getHosts()));
  }
  final long heartbeatIntervalSeconds=conf.getLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT);
  final int heartbeatRecheckInterval=conf.getInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT);
  this.heartbeatExpireInterval=2 * heartbeatRecheckInterval + 10 * 1000 * heartbeatIntervalSeconds;
  this.blockInvalidateLimit=Math.max(20 * (int)(heartbeatIntervalSeconds),DFSConfigKeys.DFS_BLOCK_INVALIDATE_LIMIT_DEFAULT);
  LOG.info(DFSConfigKeys.DFS_BLOCK_INVALIDATE_LIMIT_KEY + "=" + this.blockInvalidateLimit);
}
