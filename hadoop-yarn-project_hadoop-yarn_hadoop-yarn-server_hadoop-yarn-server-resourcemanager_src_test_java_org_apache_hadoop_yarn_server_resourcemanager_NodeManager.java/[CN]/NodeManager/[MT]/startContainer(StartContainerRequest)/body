{
  Container requestContainer=request.getContainer();
  ApplicationId applicationId=requestContainer.getId().getApplicationAttemptId().getApplicationId();
  List<Container> applicationContainers=containers.get(applicationId);
  if (applicationContainers == null) {
    applicationContainers=new ArrayList<Container>();
    containers.put(applicationId,applicationContainers);
  }
  for (  Container container : applicationContainers) {
    if (container.getId().compareTo(requestContainer.getId()) == 0) {
      throw new IllegalStateException("Container " + requestContainer.getId() + " already setup on node "+ containerManagerAddress);
    }
  }
  Container container=BuilderUtils.newContainer(requestContainer.getId(),this.nodeId,nodeHttpAddress,requestContainer.getResource(),null,null,0);
  ContainerStatus containerStatus=BuilderUtils.newContainerStatus(container.getId(),ContainerState.NEW,"",-1000);
  applicationContainers.add(container);
  containerStatusMap.put(container,containerStatus);
  Resources.subtractFrom(available,requestContainer.getResource());
  Resources.addTo(used,requestContainer.getResource());
  if (LOG.isDebugEnabled()) {
    LOG.debug("startContainer:" + " node=" + containerManagerAddress + " application="+ applicationId+ " container="+ container+ " available="+ available+ " used="+ used);
  }
  StartContainerResponse response=recordFactory.newRecordInstance(StartContainerResponse.class);
  return response;
}
