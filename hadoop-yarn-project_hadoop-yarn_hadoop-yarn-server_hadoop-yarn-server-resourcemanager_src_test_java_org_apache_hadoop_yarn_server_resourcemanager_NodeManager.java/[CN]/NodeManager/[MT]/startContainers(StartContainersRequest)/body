{
  for (  StartContainerRequest request : requests.getStartContainerRequests()) {
    Token containerToken=request.getContainerToken();
    ContainerTokenIdentifier tokenId=null;
    try {
      tokenId=BuilderUtils.newContainerTokenIdentifier(containerToken);
    }
 catch (    IOException e) {
      throw RPCUtil.getRemoteException(e);
    }
    ContainerId containerID=tokenId.getContainerID();
    ApplicationId applicationId=containerID.getApplicationAttemptId().getApplicationId();
    List<Container> applicationContainers=containers.get(applicationId);
    if (applicationContainers == null) {
      applicationContainers=new ArrayList<Container>();
      containers.put(applicationId,applicationContainers);
    }
    for (    Container container : applicationContainers) {
      if (container.getId().compareTo(containerID) == 0) {
        throw new IllegalStateException("Container " + containerID + " already setup on node "+ containerManagerAddress);
      }
    }
    Container container=BuilderUtils.newContainer(containerID,this.nodeId,nodeHttpAddress,tokenId.getResource(),null,null);
    ContainerStatus containerStatus=BuilderUtils.newContainerStatus(container.getId(),ContainerState.NEW,"",-1000);
    applicationContainers.add(container);
    containerStatusMap.put(container,containerStatus);
    Resources.subtractFrom(available,tokenId.getResource());
    Resources.addTo(used,tokenId.getResource());
    if (LOG.isDebugEnabled()) {
      LOG.debug("startContainer:" + " node=" + containerManagerAddress + " application="+ applicationId+ " container="+ container+ " available="+ available+ " used="+ used);
    }
  }
  StartContainersResponse response=StartContainersResponse.newInstance(null,null,null);
  return response;
}
