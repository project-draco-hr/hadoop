def __collect_jobtracker_ui(self, dir):
    link = (self.mapredInfo + '/jobtracker.jsp')
    parser = miniHTMLParser()
    parser.setBaseUrl(self.mapredInfo)
    node_cache = {}
    self.__log.debug(('collect_jobtracker_ui seeded with ' + link))

    def alarm_handler(number, stack):
        raise AlarmException('timeout')
    signal.signal(signal.SIGALRM, alarm_handler)
    input = None
    while link:
        self.__log.debug(('link: %s' % link))
        if re.search('jobfailures\\.jsp|jobtracker\\.jsp|jobdetails\\.jsp|jobtasks\\.jsp', link):
            for i in range(1, 5):
                if hodInterrupt.isSet():
                    raise HodInterruptException()
                try:
                    input = urllib.urlopen(link)
                    break
                except:
                    self.__log.debug(get_exception_string())
                    time.sleep(1)
            if input:
                out = None
                self.__log.debug((('collecting ' + link) + '...'))
                filename = re.sub(self.mapredInfo, '', link)
                filename = ((dir + '/') + filename)
                filename = re.sub('http://', '', filename)
                filename = re.sub('[\\?\\&=:]', '_', filename)
                filename = (filename + '.html')
                try:
                    (tempdir, tail) = os.path.split(filename)
                    if (not os.path.exists(tempdir)):
                        os.makedirs(tempdir)
                except:
                    self.__log.debug(get_exception_string())
                out = open(filename, 'w')
                bufSz = 8192
                signal.alarm(10)
                try:
                    self.__log.debug(('Starting to grab: %s' % link))
                    buf = input.read(bufSz)
                    while (len(buf) > 0):
                        parser.feed(buf)
                        p = re.compile('\\?(.+?)=(.+?)')
                        buf = p.sub('_\\1_\\2', buf)
                        p = re.compile('&(.+?)=(.+?)')
                        buf = p.sub('_\\1_\\2', buf)
                        p = re.compile('http://(.+?):(\\d+)?')
                        buf = p.sub('\\1_\\2/', buf)
                        buf = re.sub('href="/', 'href="', buf)
                        p = re.compile('href="(.+?)"')
                        buf = p.sub('href=\\1.html', buf)
                        out.write(buf)
                        buf = input.read(bufSz)
                    signal.alarm(0)
                    input.close()
                    if out:
                        out.close()
                    self.__log.debug(('Finished grabbing: %s' % link))
                except AlarmException:
                    if hodInterrupt.isSet():
                        raise HodInterruptException()
                    if out:
                        out.close()
                    if input:
                        input.close()
                    self.__log.debug(('Failed to retrieve: %s' % link))
            else:
                self.__log.debug(('Failed to retrieve: %s' % link))
        link = parser.getNextLink()
    parser.close()
