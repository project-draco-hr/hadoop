{
  final Random r=new Random();
  int keybytesnum=0;
  int valuebytesnum=0;
  int offset=0;
  while (offset < buflen) {
    final int remains=buflen - offset;
    keybytesnum=keyMaxBytesNum;
    if (keyMaxBytesNum != keyMinBytesNum) {
      keybytesnum=keyMinBytesNum + r.nextInt(keyMaxBytesNum - keyMinBytesNum);
    }
    valuebytesnum=valueMaxBytesNum;
    if (valueMaxBytesNum != valueMinBytesNum) {
      valuebytesnum=valueMinBytesNum + r.nextInt(valueMaxBytesNum - valueMinBytesNum);
    }
    if (keybytesnum + valuebytesnum > remains) {
      break;
    }
    final byte[] key=new byte[keybytesnum];
    final byte[] value=new byte[valuebytesnum];
    System.arraycopy(databuf,offset,key,0,keybytesnum);
    offset+=keybytesnum;
    System.arraycopy(databuf,offset,value,0,valuebytesnum);
    offset+=valuebytesnum;
    try {
      writer.append(BytesFactory.newObject(key,this.keyClsName),BytesFactory.newObject(value,this.valueClsName));
    }
 catch (    final IOException e) {
      e.printStackTrace();
      throw new Exception("sequence file create failed",e);
    }
  }
  return offset;
}
