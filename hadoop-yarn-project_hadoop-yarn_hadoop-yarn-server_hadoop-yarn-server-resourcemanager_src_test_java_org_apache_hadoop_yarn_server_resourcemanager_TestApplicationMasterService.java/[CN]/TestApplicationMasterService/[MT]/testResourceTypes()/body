{
  HashMap<YarnConfiguration,EnumSet<SchedulerResourceTypes>> driver=new HashMap<YarnConfiguration,EnumSet<SchedulerResourceTypes>>();
  CapacitySchedulerConfiguration csconf=new CapacitySchedulerConfiguration();
  csconf.setResourceComparator(DominantResourceCalculator.class);
  YarnConfiguration testCapacityDRConf=new YarnConfiguration(csconf);
  testCapacityDRConf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  YarnConfiguration testCapacityDefConf=new YarnConfiguration();
  testCapacityDefConf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  YarnConfiguration testFairDefConf=new YarnConfiguration();
  testFairDefConf.setClass(YarnConfiguration.RM_SCHEDULER,FairScheduler.class,ResourceScheduler.class);
  driver.put(conf,EnumSet.of(SchedulerResourceTypes.MEMORY));
  driver.put(testCapacityDRConf,EnumSet.of(SchedulerResourceTypes.CPU,SchedulerResourceTypes.MEMORY));
  driver.put(testCapacityDefConf,EnumSet.of(SchedulerResourceTypes.MEMORY));
  driver.put(testFairDefConf,EnumSet.of(SchedulerResourceTypes.MEMORY,SchedulerResourceTypes.CPU));
  for (  Map.Entry<YarnConfiguration,EnumSet<SchedulerResourceTypes>> entry : driver.entrySet()) {
    EnumSet<SchedulerResourceTypes> expectedValue=entry.getValue();
    MockRM rm=new MockRM(entry.getKey());
    rm.start();
    MockNM nm1=rm.registerNode("127.0.0.1:1234",6 * GB);
    RMApp app1=rm.submitApp(2048);
    Thread.sleep(1000);
    nm1.nodeHeartbeat(true);
    RMAppAttempt attempt1=app1.getCurrentAppAttempt();
    MockAM am1=rm.sendAMLaunched(attempt1.getAppAttemptId());
    RegisterApplicationMasterResponse resp=am1.registerAppAttempt();
    EnumSet<SchedulerResourceTypes> types=resp.getSchedulerResourceTypes();
    LOG.info("types = " + types.toString());
    Assert.assertEquals(expectedValue,types);
    rm.stop();
  }
}
