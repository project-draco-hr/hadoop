{
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  conf.setInt(YarnConfiguration.MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY,10);
  MockRM rm=new MockRM(conf);
  rm.start();
  MockNM nm1=rm.registerNode("127.0.0.1:1234",6 * GB);
  Priority appPriority1=Priority.newInstance(5);
  RMApp app1=rm.submitApp(2048,appPriority1);
  nm1.nodeHeartbeat(true);
  RMAppAttempt attempt1=app1.getCurrentAppAttempt();
  MockAM am1=rm.sendAMLaunched(attempt1.getAppAttemptId());
  am1.registerAppAttempt();
  AllocateRequestPBImpl allocateRequest=new AllocateRequestPBImpl();
  List<ContainerId> release=new ArrayList<ContainerId>();
  List<ResourceRequest> ask=new ArrayList<ResourceRequest>();
  allocateRequest.setReleaseList(release);
  allocateRequest.setAskList(ask);
  AllocateResponse response1=am1.allocate(allocateRequest);
  Assert.assertEquals(appPriority1,response1.getApplicationPriority());
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  Priority appPriority2=Priority.newInstance(8);
  cs.updateApplicationPriority(appPriority2,app1.getApplicationId());
  AllocateResponse response2=am1.allocate(allocateRequest);
  Assert.assertEquals(appPriority2,response2.getApplicationPriority());
  rm.stop();
}
