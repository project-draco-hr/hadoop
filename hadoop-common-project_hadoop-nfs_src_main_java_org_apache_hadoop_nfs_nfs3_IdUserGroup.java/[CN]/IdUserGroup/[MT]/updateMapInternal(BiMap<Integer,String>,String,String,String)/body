{
  BufferedReader br=null;
  try {
    Process process=Runtime.getRuntime().exec(new String[]{"bash","-c",command});
    br=new BufferedReader(new InputStreamReader(process.getInputStream()));
    String line=null;
    while ((line=br.readLine()) != null) {
      String[] nameId=line.split(regex);
      if ((nameId == null) || (nameId.length != 2)) {
        throw new IOException("Can't parse " + mapName + " list entry:"+ line);
      }
      LOG.debug("add to " + mapName + "map:"+ nameId[0]+ " id:"+ nameId[1]);
      Integer key=Integer.valueOf(nameId[1]);
      String value=nameId[0];
      if (map.containsKey(key)) {
        LOG.error(String.format("Got duplicate id:(%d, %s), existing entry: (%d, %s).\n%s",key,value,key,map.get(key),DUPLICATE_NAME_ID_DEBUG_INFO));
        throw new DuplicateNameOrIdException("Got duplicate id.");
      }
      if (map.containsValue(nameId[0])) {
        LOG.error(String.format("Got duplicate name:(%d, %s), existing entry: (%d, %s) \n%s",key,value,map.inverse().get(value),value,DUPLICATE_NAME_ID_DEBUG_INFO));
        throw new DuplicateNameOrIdException("Got duplicate name");
      }
      map.put(Integer.valueOf(nameId[1]),nameId[0]);
    }
    LOG.info("Updated " + mapName + " map size:"+ map.size());
  }
 catch (  IOException e) {
    LOG.error("Can't update " + mapName + " map");
    throw e;
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      IOException e1) {
        LOG.error("Can't close BufferedReader of command result");
        e1.printStackTrace();
      }
    }
  }
}
