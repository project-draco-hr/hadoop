{
  BufferedReader br=null;
  try {
    Process process=Runtime.getRuntime().exec(new String[]{"bash","-c",command});
    br=new BufferedReader(new InputStreamReader(process.getInputStream()));
    String line=null;
    while ((line=br.readLine()) != null) {
      String[] nameId=line.split(regex);
      if ((nameId == null) || (nameId.length != 2)) {
        throw new IOException("Can't parse " + mapName + " list entry:"+ line);
      }
      LOG.debug("add to " + mapName + "map:"+ nameId[0]+ " id:"+ nameId[1]);
      final Integer key=parseId(nameId[1]);
      final String value=nameId[0];
      if (map.containsKey(key)) {
        final String prevValue=map.get(key);
        if (value.equals(prevValue)) {
          continue;
        }
        reportDuplicateEntry("Got multiple names associated with the same id: ",key,value,key,prevValue);
        continue;
      }
      if (map.containsValue(value)) {
        final Integer prevKey=map.inverse().get(value);
        reportDuplicateEntry("Got multiple ids associated with the same name: ",key,value,prevKey,value);
        continue;
      }
      map.put(key,value);
    }
    LOG.info("Updated " + mapName + " map size:"+ map.size());
  }
 catch (  IOException e) {
    LOG.error("Can't update " + mapName + " map");
    throw e;
  }
 finally {
    if (br != null) {
      try {
        br.close();
      }
 catch (      IOException e1) {
        LOG.error("Can't close BufferedReader of command result",e1);
      }
    }
  }
}
