{
  fs.getClient().namenode.addBlock(file,clientName,previous,null,fileNode.getId(),null);
  final BlockInfo lastBlock=fileNode.getLastBlock();
  final int groupSize=fileNode.getBlockReplication();
  int i=0;
  for (  DataNode dn : dataNodes) {
    if (i < groupSize) {
      final Block block=new Block(lastBlock.getBlockId() + i++,0,lastBlock.getGenerationStamp());
      DatanodeStorage storage=new DatanodeStorage(UUID.randomUUID().toString());
      StorageReceivedDeletedBlocks[] reports=DFSTestUtil.makeReportForReceivedBlock(block,ReceivedDeletedBlockInfo.BlockStatus.RECEIVING_BLOCK,storage);
      for (      StorageReceivedDeletedBlocks report : reports) {
        ns.processIncrementalBlockReport(dn.getDatanodeId(),report);
      }
    }
  }
  i=0;
  for (  DataNode dn : dataNodes) {
    if (i < groupSize) {
      final Block block=new Block(lastBlock.getBlockId() + i++,numStripes * BLOCK_STRIPED_CELL_SIZE,lastBlock.getGenerationStamp());
      DatanodeStorage storage=new DatanodeStorage(UUID.randomUUID().toString());
      StorageReceivedDeletedBlocks[] reports=DFSTestUtil.makeReportForReceivedBlock(block,ReceivedDeletedBlockInfo.BlockStatus.RECEIVED_BLOCK,storage);
      for (      StorageReceivedDeletedBlocks report : reports) {
        ns.processIncrementalBlockReport(dn.getDatanodeId(),report);
      }
    }
  }
  lastBlock.setNumBytes(numStripes * BLOCK_STRIPED_CELL_SIZE * NUM_DATA_BLOCKS);
  return lastBlock;
}
