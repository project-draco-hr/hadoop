{
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    private int tries=0;
    @Override public Boolean get(){
      long curCacheUsed=fsd.getCacheUsed();
      long curBlocks=fsd.getNumBlocksCached();
      if ((curCacheUsed != expectedCacheUsed) || (curBlocks != expectedBlocks)) {
        if (tries++ > 10) {
          LOG.info("verifyExpectedCacheUsage: have " + curCacheUsed + "/"+ expectedCacheUsed+ " bytes cached; "+ curBlocks+ "/"+ expectedBlocks+ " blocks cached. "+ "memlock limit = "+ NativeIO.POSIX.getCacheManipulator().getMemlockLimit()+ ".  Waiting...");
        }
        return false;
      }
      LOG.info("verifyExpectedCacheUsage: got " + curCacheUsed + "/"+ expectedCacheUsed+ " bytes cached; "+ curBlocks+ "/"+ expectedBlocks+ " blocks cached. "+ "memlock limit = "+ NativeIO.POSIX.getCacheManipulator().getMemlockLimit());
      return true;
    }
  }
,100,120000);
  return expectedCacheUsed;
}
