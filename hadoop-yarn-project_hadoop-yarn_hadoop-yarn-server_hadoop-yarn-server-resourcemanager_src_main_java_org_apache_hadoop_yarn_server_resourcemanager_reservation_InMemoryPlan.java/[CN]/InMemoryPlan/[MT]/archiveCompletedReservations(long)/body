{
  LOG.debug("Running archival at time: {}",tick);
  readLock.lock();
  List<InMemoryReservationAllocation> expiredReservations=new ArrayList<InMemoryReservationAllocation>();
  try {
    long archivalTime=tick - policy.getValidWindow();
    ReservationInterval searchInterval=new ReservationInterval(archivalTime,archivalTime);
    SortedMap<ReservationInterval,Set<InMemoryReservationAllocation>> reservations=currentReservations.headMap(searchInterval,true);
    if (!reservations.isEmpty()) {
      for (      Set<InMemoryReservationAllocation> reservationEntries : reservations.values()) {
        for (        InMemoryReservationAllocation reservation : reservationEntries) {
          if (reservation.getEndTime() <= archivalTime) {
            expiredReservations.add(reservation);
          }
        }
      }
    }
  }
  finally {
    readLock.unlock();
  }
  if (expiredReservations.isEmpty()) {
    return;
  }
  writeLock.lock();
  try {
    for (    InMemoryReservationAllocation expiredReservation : expiredReservations) {
      removeReservation(expiredReservation);
    }
  }
  finally {
    writeLock.unlock();
  }
}
