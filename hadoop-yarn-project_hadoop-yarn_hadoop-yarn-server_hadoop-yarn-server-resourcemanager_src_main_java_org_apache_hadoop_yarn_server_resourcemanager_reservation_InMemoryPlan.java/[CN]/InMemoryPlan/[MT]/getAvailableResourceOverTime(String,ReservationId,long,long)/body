{
  readLock.lock();
  try {
    TreeMap<Long,Resource> totAvailable=new TreeMap<Long,Resource>();
    totAvailable.put(start,Resources.clone(totalCapacity));
    RLESparseResourceAllocation totRLEAvail=new RLESparseResourceAllocation(totAvailable,resCalc);
    RLESparseResourceAllocation netAvailable;
    netAvailable=RLESparseResourceAllocation.merge(resCalc,Resources.clone(totalCapacity),totRLEAvail,rleSparseVector,RLEOperator.subtractTestNonNegative,start,end);
    ReservationAllocation old=reservationTable.get(oldId);
    if (old != null) {
      netAvailable=RLESparseResourceAllocation.merge(resCalc,Resources.clone(totalCapacity),netAvailable,old.getResourcesOverTime(),RLEOperator.add,start,end);
    }
    netAvailable=getSharingPolicy().availableResources(netAvailable,this,user,oldId,start,end);
    return netAvailable;
  }
  finally {
    readLock.unlock();
  }
}
