{
  assert(readWriteLock.isWriteLockedByCurrentThread());
  Map<ReservationInterval,Resource> allocationRequests=reservation.getAllocationRequests();
  String user=reservation.getUser();
  RLESparseResourceAllocation resAlloc=userResourceAlloc.get(user);
  if (resAlloc == null) {
    resAlloc=new RLESparseResourceAllocation(resCalc);
    userResourceAlloc.put(user,resAlloc);
  }
  RLESparseResourceAllocation resCount=userActiveReservationCount.get(user);
  if (resCount == null) {
    resCount=new RLESparseResourceAllocation(resCalc);
    userActiveReservationCount.put(user,resCount);
  }
  long earliestActive=Long.MAX_VALUE;
  long latestActive=Long.MIN_VALUE;
  for (  Map.Entry<ReservationInterval,Resource> r : allocationRequests.entrySet()) {
    resAlloc.addInterval(r.getKey(),r.getValue());
    rleSparseVector.addInterval(r.getKey(),r.getValue());
    if (Resources.greaterThan(resCalc,totalCapacity,r.getValue(),ZERO_RESOURCE)) {
      earliestActive=Math.min(earliestActive,r.getKey().getStartTime());
      latestActive=Math.max(latestActive,r.getKey().getEndTime());
    }
  }
  resCount.addInterval(new ReservationInterval(earliestActive,latestActive),Resource.newInstance(1,1));
}
