{
  conf.setBoolean(DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,true);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
  try {
    cluster.waitActive();
    DistributedFileSystem fs=cluster.getFileSystem();
    LocalFileSystem localFileSystem=FileSystem.getLocal(conf);
    Path p=new Path(f.getRoot().getAbsolutePath(),tokenFile);
    p=localFileSystem.makeQualified(p);
    DelegationTokenFetcher.saveDelegationToken(conf,fs,null,p);
    Credentials creds=Credentials.readTokenStorageFile(p,conf);
    Iterator<Token<?>> itr=creds.getAllTokens().iterator();
    assertTrue("token not exist error",itr.hasNext());
    assertNotNull("Token should be there without renewer",itr.next());
    String expectedNonVerbose="Token (HDFS_DELEGATION_TOKEN token 1 for " + System.getProperty("user.name") + " with renewer ) for";
    String resNonVerbose=DelegationTokenFetcher.printTokensToString(conf,p,false);
    assertTrue("The non verbose output is expected to start with \"" + expectedNonVerbose + "\"",resNonVerbose.startsWith(expectedNonVerbose));
    LOG.info(resNonVerbose);
    LOG.info(DelegationTokenFetcher.printTokensToString(conf,p,true));
    try {
      DelegationTokenFetcher.renewTokens(conf,p);
      fail("Should have failed to renew");
    }
 catch (    AccessControlException e) {
      GenericTestUtils.assertExceptionContains("tried to renew a token without a renewer",e);
    }
  }
  finally {
    cluster.shutdown();
  }
}
