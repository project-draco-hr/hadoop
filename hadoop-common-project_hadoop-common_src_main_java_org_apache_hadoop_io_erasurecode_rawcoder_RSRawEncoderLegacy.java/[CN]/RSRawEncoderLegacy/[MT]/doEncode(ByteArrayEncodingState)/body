{
  int dataLen=encodingState.encodeLength;
  CoderUtil.resetOutputBuffers(encodingState.outputs,encodingState.outputOffsets,dataLen);
  byte[][] all=new byte[encodingState.outputs.length + encodingState.inputs.length][];
  int[] allOffsets=new int[encodingState.outputOffsets.length + encodingState.inputOffsets.length];
  if (allowChangeInputs()) {
    System.arraycopy(encodingState.outputs,0,all,0,encodingState.outputs.length);
    System.arraycopy(encodingState.inputs,0,all,encodingState.outputs.length,encodingState.inputs.length);
    System.arraycopy(encodingState.outputOffsets,0,allOffsets,0,encodingState.outputOffsets.length);
    System.arraycopy(encodingState.inputOffsets,0,allOffsets,encodingState.outputOffsets.length,encodingState.inputOffsets.length);
  }
 else {
    System.arraycopy(encodingState.outputs,0,all,0,encodingState.outputs.length);
    System.arraycopy(encodingState.outputOffsets,0,allOffsets,0,encodingState.outputOffsets.length);
    for (int i=0; i < encodingState.inputs.length; i++) {
      all[encodingState.outputs.length + i]=Arrays.copyOfRange(encodingState.inputs[i],encodingState.inputOffsets[i],encodingState.inputOffsets[i] + dataLen);
    }
  }
  RSUtil.GF.remainder(all,allOffsets,dataLen,generatingPolynomial);
}
