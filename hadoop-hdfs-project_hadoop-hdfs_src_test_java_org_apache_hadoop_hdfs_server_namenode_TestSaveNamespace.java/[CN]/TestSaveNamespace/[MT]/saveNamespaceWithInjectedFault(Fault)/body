{
  Configuration conf=getConf();
  NameNode.initMetrics(conf,NamenodeRole.NAMENODE);
  DFSTestUtil.formatNameNode(conf);
  FSNamesystem fsn=FSNamesystem.loadFromDisk(conf);
  FSImage originalImage=fsn.dir.fsImage;
  NNStorage storage=originalImage.getStorage();
  NNStorage spyStorage=spy(storage);
  originalImage.storage=spyStorage;
  FSImage spyImage=spy(originalImage);
  fsn.dir.fsImage=spyImage;
  boolean shouldFail=false;
switch (fault) {
case SAVE_SECOND_FSIMAGE_RTE:
    doAnswer(new FaultySaveImage(true)).when(spyImage).saveFSImage(Mockito.eq(fsn),(StorageDirectory)anyObject(),anyLong());
  shouldFail=false;
break;
case SAVE_SECOND_FSIMAGE_IOE:
doAnswer(new FaultySaveImage(false)).when(spyImage).saveFSImage(Mockito.eq(fsn),(StorageDirectory)anyObject(),anyLong());
shouldFail=false;
break;
case SAVE_ALL_FSIMAGES:
doThrow(new RuntimeException("Injected")).when(spyImage).saveFSImage(Mockito.eq(fsn),(StorageDirectory)anyObject(),anyLong());
shouldFail=true;
break;
case WRITE_STORAGE_ALL:
doThrow(new RuntimeException("Injected")).when(spyStorage).writeAll();
shouldFail=true;
break;
case WRITE_STORAGE_ONE:
doAnswer(new FaultySaveImage(true)).when(spyStorage).writeProperties((StorageDirectory)anyObject());
shouldFail=true;
break;
}
try {
doAnEdit(fsn,1);
fsn.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
try {
fsn.saveNamespace();
if (shouldFail) {
fail("Did not fail!");
}
}
 catch (Exception e) {
if (!shouldFail) {
throw e;
}
 else {
LOG.info("Test caught expected exception",e);
}
}
fsn.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
doAnEdit(fsn,2);
originalImage.close();
fsn.close();
fsn=null;
fsn=FSNamesystem.loadFromDisk(conf);
checkEditExists(fsn,1);
checkEditExists(fsn,2);
}
  finally {
if (fsn != null) {
fsn.close();
}
}
}
