{
  if (a == null || a.isEmpty()) {
    if (operator == RLEOperator.subtract || operator == RLEOperator.subtractTestNonNegative) {
      return negate(operator,b);
    }
 else {
      return b;
    }
  }
  if (b == null || b.isEmpty()) {
    return a;
  }
  Iterator<Entry<Long,Resource>> aIt=a.entrySet().iterator();
  Iterator<Entry<Long,Resource>> bIt=b.entrySet().iterator();
  Entry<Long,Resource> curA=aIt.next();
  Entry<Long,Resource> curB=bIt.next();
  Entry<Long,Resource> lastA=null;
  Entry<Long,Resource> lastB=null;
  boolean aIsDone=false;
  boolean bIsDone=false;
  TreeMap<Long,Resource> out=new TreeMap<Long,Resource>();
  while (!(curA.equals(lastA) && curB.equals(lastB))) {
    Resource outRes;
    long time=-1;
    if (bIsDone || (curA.getKey() < curB.getKey() && !aIsDone)) {
      outRes=combineValue(operator,resCalc,clusterResource,curA,lastB);
      time=(curA.getKey() < start) ? start : curA.getKey();
      lastA=curA;
      if (aIt.hasNext()) {
        curA=aIt.next();
      }
 else {
        aIsDone=true;
      }
    }
 else {
      if (aIsDone || (curA.getKey() > curB.getKey() && !bIsDone)) {
        outRes=combineValue(operator,resCalc,clusterResource,lastA,curB);
        time=(curB.getKey() < start) ? start : curB.getKey();
        lastB=curB;
        if (bIt.hasNext()) {
          curB=bIt.next();
        }
 else {
          bIsDone=true;
        }
      }
 else {
        outRes=combineValue(operator,resCalc,clusterResource,curA,curB);
        time=(curA.getKey() < start) ? start : curA.getKey();
        lastA=curA;
        if (aIt.hasNext()) {
          curA=aIt.next();
        }
 else {
          aIsDone=true;
        }
        lastB=curB;
        if (bIt.hasNext()) {
          curB=bIt.next();
        }
 else {
          bIsDone=true;
        }
      }
    }
    addIfNeeded(out,time,outRes);
  }
  addIfNeeded(out,end,null);
  return out;
}
