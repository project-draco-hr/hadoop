{
  Configuration conf=new Configuration();
  @SuppressWarnings("unchecked") AMRMClient<ContainerRequest> client=mock(AMRMClientImpl.class);
  List<ContainerStatus> completed=Arrays.asList(ContainerStatus.newInstance(newContainerId(0,0,0,0),ContainerState.COMPLETE,"",0));
  final AllocateResponse response=createAllocateResponse(completed,new ArrayList<Container>(),null);
  when(client.allocate(anyFloat())).thenReturn(response);
  AMRMClientAsync<ContainerRequest> asyncClient=AMRMClientAsync.createAMRMClientAsync(client,20,callbackHandler);
  callbackHandler.asynClient=asyncClient;
  callbackHandler.throwOutException=true;
  asyncClient.init(conf);
  asyncClient.start();
synchronized (callbackHandler.notifier) {
    asyncClient.registerApplicationMaster("localhost",1234,null);
    while (callbackHandler.notify == false) {
      try {
        callbackHandler.notifier.wait();
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
  verify(callbackHandler,times(0)).getProgress();
  verify(callbackHandler,times(1)).onError(any(Exception.class));
  Thread.sleep(50);
  verify(callbackHandler,times(0)).getProgress();
  verify(callbackHandler,times(1)).onError(any(Exception.class));
}
