{
  TimelineEntity[] entities=null;
  for (int i=0; i < 10; i++) {
    entities=timelineClient.getLastPublishedEntities();
    if (entities != null) {
      break;
    }
    try {
      Thread.sleep(150L);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
  }
  int numberOfResourceMetrics=0;
  numberOfResourceMetrics+=(memoryUsage == ResourceCalculatorProcessTree.UNAVAILABLE) ? 0 : 1;
  numberOfResourceMetrics+=(cpuUsage == ResourceCalculatorProcessTree.UNAVAILABLE) ? 0 : 1;
  assertNotNull("entities are expected to be published",entities);
  assertEquals("Expected number of metrics notpublished",numberOfResourceMetrics,entities[0].getMetrics().size());
  Iterator<TimelineMetric> metrics=entities[0].getMetrics().iterator();
  while (metrics.hasNext()) {
    TimelineMetric metric=metrics.next();
    Iterator<Entry<Long,Number>> entrySet;
switch (metric.getId()) {
case CPU_ID:
      if (cpuUsage == ResourceCalculatorProcessTree.UNAVAILABLE) {
        Assert.fail("Not Expecting CPU Metric to be published");
      }
    entrySet=metric.getValues().entrySet().iterator();
  assertEquals("CPU usage metric not matching",cpuUsage,entrySet.next().getValue());
break;
case MEMORY_ID:
if (memoryUsage == ResourceCalculatorProcessTree.UNAVAILABLE) {
Assert.fail("Not Expecting Memory Metric to be published");
}
entrySet=metric.getValues().entrySet().iterator();
assertEquals("Memory usage metric not matching",memoryUsage,entrySet.next().getValue());
break;
default :
Assert.fail("Invalid Resource Usage metric");
break;
}
}
}
