{
  InetSocketAddress serverAddress=RPC.getServerAddress(rpcProxy);
  Map<Long,ProtocolSignature> versionMap=getVersionSignatureMap(serverAddress,protocol.getName(),rpcKind.toString());
  if (versionMap == null) {
    Configuration conf=new Configuration();
    RPC.setProtocolEngine(conf,ProtocolMetaInfoPB.class,ProtobufRpcEngine.class);
    ProtocolMetaInfoPB protocolInfoProxy=getProtocolMetaInfoProxy(rpcProxy,conf);
    GetProtocolSignatureRequestProto.Builder builder=GetProtocolSignatureRequestProto.newBuilder();
    builder.setProtocol(protocol.getName());
    builder.setRpcKind(rpcKind.toString());
    GetProtocolSignatureResponseProto resp;
    try {
      resp=protocolInfoProxy.getProtocolSignature(NULL_CONTROLLER,builder.build());
    }
 catch (    ServiceException se) {
      throw ProtobufHelper.getRemoteException(se);
    }
    versionMap=convertProtocolSignatureProtos(resp.getProtocolSignatureList());
    putVersionSignatureMap(serverAddress,protocol.getName(),rpcKind.toString(),versionMap);
  }
  Method desiredMethod;
  Method[] allMethods=protocol.getMethods();
  desiredMethod=null;
  for (  Method m : allMethods) {
    if (m.getName().equals(methodName)) {
      desiredMethod=m;
      break;
    }
  }
  if (desiredMethod == null) {
    return false;
  }
  int methodHash=ProtocolSignature.getFingerprint(desiredMethod);
  return methodExists(methodHash,version,versionMap);
}
