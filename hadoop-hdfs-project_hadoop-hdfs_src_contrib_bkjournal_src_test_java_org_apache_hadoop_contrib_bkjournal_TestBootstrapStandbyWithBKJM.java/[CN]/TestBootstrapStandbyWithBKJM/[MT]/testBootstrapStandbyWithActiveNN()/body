{
  cluster.transitionToActive(0);
  Configuration confNN1=cluster.getConfiguration(1);
  DistributedFileSystem dfs=(DistributedFileSystem)HATestUtil.configureFailoverFs(cluster,confNN1);
  for (int i=1; i <= 10; i++) {
    dfs.mkdirs(new Path("/test" + i));
  }
  dfs.close();
  cluster.shutdownNameNode(1);
  deleteEditLogIfExists(confNN1);
  cluster.getNameNodeRpc(0).setSafeMode(SafeModeAction.SAFEMODE_ENTER,true);
  cluster.getNameNodeRpc(0).saveNamespace();
  cluster.getNameNodeRpc(0).setSafeMode(SafeModeAction.SAFEMODE_LEAVE,true);
  int rc=BootstrapStandby.run(new String[]{"-force","-nonInteractive"},confNN1);
  Assert.assertEquals("Mismatches return code",6,rc);
  rc=BootstrapStandby.run(new String[]{"-force","-nonInteractive","-skipSharedEditsCheck"},confNN1);
  Assert.assertEquals("Mismatches return code",0,rc);
  confNN1.setInt(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_PERIOD_KEY,1);
  cluster.restartNameNode(1);
  cluster.transitionToStandby(1);
  NameNode nn0=cluster.getNameNode(0);
  HATestUtil.waitForStandbyToCatchUp(nn0,cluster.getNameNode(1));
  long expectedCheckpointTxId=NameNodeAdapter.getNamesystem(nn0).getFSImage().getMostRecentCheckpointTxId();
  HATestUtil.waitForCheckpoint(cluster,1,ImmutableList.of((int)expectedCheckpointTxId));
  FSImageTestUtil.assertNNHasCheckpoints(cluster,1,ImmutableList.of((int)expectedCheckpointTxId));
  FSImageTestUtil.assertNNFilesMatch(cluster);
}
