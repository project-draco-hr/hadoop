{
  Configuration conf=new Configuration();
  KMSClientProvider p1=new MyKMSClientProvider(new URI("kms://http@host1/kms/foo"),conf);
  LoadBalancingKMSClientProvider kp=new LoadBalancingKMSClientProvider(new KMSClientProvider[]{p1},0,conf);
  try {
    kp.generateEncryptedKey("foo");
  }
 catch (  IOException ioe) {
    assertTrue(ioe.getCause().getClass().getName().contains("AuthenticationException"));
  }
  try {
    final KeyProviderCryptoExtension.EncryptedKeyVersion encryptedKeyVersion=mock(KeyProviderCryptoExtension.EncryptedKeyVersion.class);
    kp.decryptEncryptedKey(encryptedKeyVersion);
  }
 catch (  IOException ioe) {
    assertTrue(ioe.getCause().getClass().getName().contains("AuthenticationException"));
  }
  try {
    final KeyProvider.Options options=KeyProvider.options(conf);
    kp.createKey("foo",options);
  }
 catch (  IOException ioe) {
    assertTrue(ioe.getCause().getClass().getName().contains("AuthenticationException"));
  }
  try {
    kp.rollNewVersion("foo");
  }
 catch (  IOException ioe) {
    assertTrue(ioe.getCause().getClass().getName().contains("AuthenticationException"));
  }
}
