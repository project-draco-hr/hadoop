{
  if (args.length == 0) {
    displayUsage();
    System.exit(-1);
  }
  for (int i=0; i < args.length; i++) {
    if (args[i].equals("-operation")) {
      operation=args[++i];
    }
 else     if (args[i].equals("-maps")) {
      checkArgs(i + 1,args.length);
      numberOfMaps=Long.parseLong(args[++i]);
    }
 else     if (args[i].equals("-reduces")) {
      checkArgs(i + 1,args.length);
      numberOfReduces=Long.parseLong(args[++i]);
    }
 else     if (args[i].equals("-startTime")) {
      checkArgs(i + 1,args.length);
      startTime=Long.parseLong(args[++i]) * 1000;
    }
 else     if (args[i].equals("-blockSize")) {
      checkArgs(i + 1,args.length);
      blockSize=Long.parseLong(args[++i]);
    }
 else     if (args[i].equals("-bytesToWrite")) {
      checkArgs(i + 1,args.length);
      bytesToWrite=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-bytesPerChecksum")) {
      checkArgs(i + 1,args.length);
      bytesPerChecksum=Long.parseLong(args[++i]);
    }
 else     if (args[i].equals("-numberOfFiles")) {
      checkArgs(i + 1,args.length);
      numberOfFiles=Long.parseLong(args[++i]);
    }
 else     if (args[i].equals("-replicationFactorPerFile")) {
      checkArgs(i + 1,args.length);
      replicationFactorPerFile=Short.parseShort(args[++i]);
    }
 else     if (args[i].equals("-baseDir")) {
      checkArgs(i + 1,args.length);
      baseDir=args[++i];
    }
 else     if (args[i].equals("-readFileAfterOpen")) {
      checkArgs(i + 1,args.length);
      readFileAfterOpen=Boolean.parseBoolean(args[++i]);
    }
 else     if (args[i].equals("-help")) {
      displayUsage();
      System.exit(-1);
    }
  }
  LOG.info("Test Inputs: ");
  LOG.info("           Test Operation: " + operation);
  LOG.info("               Start time: " + sdf.format(new Date(startTime)));
  LOG.info("           Number of maps: " + numberOfMaps);
  LOG.info("        Number of reduces: " + numberOfReduces);
  LOG.info("               Block Size: " + blockSize);
  LOG.info("           Bytes to write: " + bytesToWrite);
  LOG.info("       Bytes per checksum: " + bytesPerChecksum);
  LOG.info("          Number of files: " + numberOfFiles);
  LOG.info("       Replication factor: " + replicationFactorPerFile);
  LOG.info("                 Base dir: " + baseDir);
  LOG.info("     Read file after open: " + readFileAfterOpen);
  config.set("test.nnbench.operation",operation);
  config.setLong("test.nnbench.maps",numberOfMaps);
  config.setLong("test.nnbench.reduces",numberOfReduces);
  config.setLong("test.nnbench.starttime",startTime);
  config.setLong("test.nnbench.blocksize",blockSize);
  config.setInt("test.nnbench.bytestowrite",bytesToWrite);
  config.setLong("test.nnbench.bytesperchecksum",bytesPerChecksum);
  config.setLong("test.nnbench.numberoffiles",numberOfFiles);
  config.setInt("test.nnbench.replicationfactor",(int)replicationFactorPerFile);
  config.set("test.nnbench.basedir",baseDir);
  config.setBoolean("test.nnbench.readFileAfterOpen",readFileAfterOpen);
  config.set("test.nnbench.datadir.name",DATA_DIR_NAME);
  config.set("test.nnbench.outputdir.name",OUTPUT_DIR_NAME);
  config.set("test.nnbench.controldir.name",CONTROL_DIR_NAME);
}
