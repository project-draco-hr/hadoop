{
  JobConf conf=new JobConf();
  FileSystem fileSystem=FileSystem.getLocal(conf);
  Path rootDir=new Path(System.getProperty("test.build.data","/tmp"));
  Path testRootDir=new Path(rootDir,"testHeapUsageCounter");
  fileSystem.delete(testRootDir,true);
  fileSystem.setWorkingDirectory(testRootDir);
  fileSystem.deleteOnExit(testRootDir);
  MiniMRCluster mrCluster=new MiniMRCluster(1,fileSystem.getUri().toString(),1);
  try {
    conf=mrCluster.createJobConf();
    JobClient jobClient=new JobClient(conf);
    Path inDir=new Path(testRootDir,"in");
    createWordsFile(inDir,conf);
    RunningJob lowMemJob=runHeapUsageTestJob(conf,testRootDir,"-Xms32m -Xmx1G",0,0,fileSystem,jobClient,inDir);
    JobID lowMemJobID=lowMemJob.getID();
    long lowMemJobMapHeapUsage=getTaskCounterUsage(jobClient,lowMemJobID,1,0,TaskType.MAP);
    System.out.println("Job1 (low memory job) map task heap usage: " + lowMemJobMapHeapUsage);
    long lowMemJobReduceHeapUsage=getTaskCounterUsage(jobClient,lowMemJobID,1,0,TaskType.REDUCE);
    System.out.println("Job1 (low memory job) reduce task heap usage: " + lowMemJobReduceHeapUsage);
    RunningJob highMemJob=runHeapUsageTestJob(conf,testRootDir,"-Xms32m -Xmx1G",lowMemJobMapHeapUsage + 256 * 1024 * 1024,lowMemJobReduceHeapUsage + 256 * 1024 * 1024,fileSystem,jobClient,inDir);
    JobID highMemJobID=highMemJob.getID();
    long highMemJobMapHeapUsage=getTaskCounterUsage(jobClient,highMemJobID,1,0,TaskType.MAP);
    System.out.println("Job2 (high memory job) map task heap usage: " + highMemJobMapHeapUsage);
    long highMemJobReduceHeapUsage=getTaskCounterUsage(jobClient,highMemJobID,1,0,TaskType.REDUCE);
    System.out.println("Job2 (high memory job) reduce task heap usage: " + highMemJobReduceHeapUsage);
    assertTrue("Incorrect map heap usage reported by the map task",lowMemJobMapHeapUsage < highMemJobMapHeapUsage);
    assertTrue("Incorrect reduce heap usage reported by the reduce task",lowMemJobReduceHeapUsage < highMemJobReduceHeapUsage);
  }
  finally {
    mrCluster.shutdown();
    try {
      fileSystem.delete(testRootDir,true);
    }
 catch (    IOException ioe) {
    }
  }
}
