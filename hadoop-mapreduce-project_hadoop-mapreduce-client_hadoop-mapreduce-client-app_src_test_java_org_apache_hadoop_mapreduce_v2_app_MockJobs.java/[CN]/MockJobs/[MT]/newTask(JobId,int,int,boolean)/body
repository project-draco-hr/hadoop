{
  final TaskId tid=Records.newRecord(TaskId.class);
  tid.setJobId(jid);
  tid.setId(i);
  tid.setTaskType(TASK_TYPES.next());
  final TaskReport report=newTaskReport(tid);
  final Map<TaskAttemptId,TaskAttempt> attempts=newTaskAttempts(tid,m);
  return new Task(){
    @Override public TaskId getID(){
      return tid;
    }
    @Override public TaskReport getReport(){
      return report;
    }
    @Override public Counters getCounters(){
      if (hasFailedTasks) {
        return null;
      }
      return new Counters(TypeConverter.fromYarn(report.getCounters()));
    }
    @Override public float getProgress(){
      return report.getProgress();
    }
    @Override public TaskType getType(){
      return tid.getTaskType();
    }
    @Override public Map<TaskAttemptId,TaskAttempt> getAttempts(){
      return attempts;
    }
    @Override public TaskAttempt getAttempt(    TaskAttemptId attemptID){
      return attempts.get(attemptID);
    }
    @Override public boolean isFinished(){
switch (report.getTaskState()) {
case SUCCEEDED:
case KILLED:
case FAILED:
        return true;
    }
    return false;
  }
  @Override public boolean canCommit(  TaskAttemptId taskAttemptID){
    return false;
  }
  @Override public TaskState getState(){
    return report.getTaskState();
  }
}
;
}
