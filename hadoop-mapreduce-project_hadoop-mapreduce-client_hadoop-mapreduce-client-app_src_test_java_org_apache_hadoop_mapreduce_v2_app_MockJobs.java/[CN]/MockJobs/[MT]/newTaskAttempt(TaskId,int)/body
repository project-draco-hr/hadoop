{
  final TaskAttemptId taid=Records.newRecord(TaskAttemptId.class);
  taid.setTaskId(tid);
  taid.setId(i);
  final TaskAttemptReport report=newTaskAttemptReport(taid);
  final List<String> diags=Lists.newArrayList();
  diags.add(DIAGS.next());
  return new TaskAttempt(){
    @Override public NodeId getNodeId() throws UnsupportedOperationException {
      throw new UnsupportedOperationException();
    }
    @Override public TaskAttemptId getID(){
      return taid;
    }
    @Override public TaskAttemptReport getReport(){
      return report;
    }
    @Override public long getLaunchTime(){
      return 0;
    }
    @Override public long getFinishTime(){
      return 0;
    }
    @Override public int getShufflePort(){
      return ShuffleHandler.DEFAULT_SHUFFLE_PORT;
    }
    @Override public Counters getCounters(){
      if (report != null && report.getCounters() != null) {
        return new Counters(TypeConverter.fromYarn(report.getCounters()));
      }
      return null;
    }
    @Override public float getProgress(){
      return report.getProgress();
    }
    @Override public TaskAttemptState getState(){
      return report.getTaskAttemptState();
    }
    @Override public boolean isFinished(){
switch (report.getTaskAttemptState()) {
case SUCCEEDED:
case FAILED:
case KILLED:
        return true;
    }
    return false;
  }
  @Override public ContainerId getAssignedContainerID(){
    ContainerId id=Records.newRecord(ContainerId.class);
    ApplicationAttemptId appAttemptId=Records.newRecord(ApplicationAttemptId.class);
    appAttemptId.setApplicationId(taid.getTaskId().getJobId().getAppId());
    appAttemptId.setAttemptId(0);
    id.setApplicationAttemptId(appAttemptId);
    return id;
  }
  @Override public String getNodeHttpAddress(){
    return "localhost:8042";
  }
  @Override public List<String> getDiagnostics(){
    return diags;
  }
  @Override public String getAssignedContainerMgrAddress(){
    return "localhost:9998";
  }
  @Override public long getShuffleFinishTime(){
    return 0;
  }
  @Override public long getSortFinishTime(){
    return 0;
  }
  @Override public String getNodeRackName(){
    return "/default-rack";
  }
}
;
}
