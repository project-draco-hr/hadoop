{
  final JobId id=newJobID(appID,i);
  final String name=newJobName();
  final JobReport report=newJobReport(id);
  final Map<TaskId,Task> tasks=newTasks(id,n,m,hasFailedTasks);
  final TaskCount taskCount=getTaskCount(tasks.values());
  final Counters counters=getCounters(tasks.values());
  final Path configFile=confFile;
  Map<JobACL,AccessControlList> tmpJobACLs=new HashMap<JobACL,AccessControlList>();
  final Configuration conf=new Configuration();
  conf.set(JobACL.VIEW_JOB.getAclName(),"testuser");
  conf.setBoolean(MRConfig.MR_ACLS_ENABLED,true);
  JobACLsManager aclsManager=new JobACLsManager(conf);
  tmpJobACLs=aclsManager.constructJobACLs(conf);
  final Map<JobACL,AccessControlList> jobACLs=tmpJobACLs;
  return new Job(){
    @Override public JobId getID(){
      return id;
    }
    @Override public String getName(){
      return name;
    }
    @Override public JobState getState(){
      return report.getJobState();
    }
    @Override public JobReport getReport(){
      return report;
    }
    @Override public float getProgress(){
      return 0;
    }
    @Override public Counters getAllCounters(){
      return counters;
    }
    @Override public Map<TaskId,Task> getTasks(){
      return tasks;
    }
    @Override public Task getTask(    TaskId taskID){
      return tasks.get(taskID);
    }
    @Override public int getTotalMaps(){
      return taskCount.maps;
    }
    @Override public int getTotalReduces(){
      return taskCount.reduces;
    }
    @Override public int getCompletedMaps(){
      return taskCount.completedMaps;
    }
    @Override public int getCompletedReduces(){
      return taskCount.completedReduces;
    }
    @Override public boolean isUber(){
      return false;
    }
    @Override public TaskAttemptCompletionEvent[] getTaskAttemptCompletionEvents(    int fromEventId,    int maxEvents){
      return null;
    }
    @Override public Map<TaskId,Task> getTasks(    TaskType taskType){
      throw new UnsupportedOperationException("Not supported yet.");
    }
    @Override public List<String> getDiagnostics(){
      return Collections.<String>emptyList();
    }
    @Override public boolean checkAccess(    UserGroupInformation callerUGI,    JobACL jobOperation){
      return true;
    }
    @Override public String getUserName(){
      return "mock";
    }
    @Override public String getQueueName(){
      return "mockqueue";
    }
    @Override public Path getConfFile(){
      return configFile;
    }
    @Override public Map<JobACL,AccessControlList> getJobACLs(){
      return jobACLs;
    }
    @Override public List<AMInfo> getAMInfos(){
      List<AMInfo> amInfoList=new LinkedList<AMInfo>();
      amInfoList.add(createAMInfo(1));
      amInfoList.add(createAMInfo(2));
      return amInfoList;
    }
    @Override public Configuration loadConfFile() throws IOException {
      FileContext fc=FileContext.getFileContext(configFile.toUri(),conf);
      Configuration jobConf=new Configuration(false);
      jobConf.addResource(fc.open(configFile));
      return jobConf;
    }
  }
;
}
