{
  int numDirs=1;
  TestDFSUpgradeFromImage testImg=new TestDFSUpgradeFromImage();
  testImg.unpackStorage();
  int numDNs=testImg.numDataNodes;
  UpgradeObjectCollection.initialize();
  UpgradeObjectCollection.registerUpgrade(new UO_Datanode1());
  UpgradeObjectCollection.registerUpgrade(new UO_Namenode1());
  UpgradeObjectCollection.registerUpgrade(new UO_Datanode2());
  UpgradeObjectCollection.registerUpgrade(new UO_Namenode2());
  UpgradeObjectCollection.registerUpgrade(new UO_Datanode3());
  UpgradeObjectCollection.registerUpgrade(new UO_Namenode3());
  conf=new HdfsConfiguration();
  if (System.getProperty("test.build.data") == null) {
    System.setProperty("test.build.data","build/test/data");
  }
  conf.setInt(DFSConfigKeys.DFS_DATANODE_SCAN_PERIOD_HOURS_KEY,-1);
  log("NameNode start in regular mode when dustributed upgrade is required",numDirs);
  startNameNodeShouldFail(StartupOption.REGULAR,"contains an old layout version");
  log("Start NameNode only distributed upgrade",numDirs);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).clusterId(clusterId).startupOption(StartupOption.UPGRADE).build();
  cluster.shutdown();
  log("NameNode start in regular mode when dustributed upgrade has been started",numDirs);
  startNameNodeShouldFail(StartupOption.REGULAR,"Previous distributed upgrade was not completed");
  log("NameNode rollback to the old version that require a dustributed upgrade",numDirs);
  startNameNodeShouldFail(StartupOption.ROLLBACK,"Cannot rollback to storage version -7 using this version");
  log("Normal distributed upgrade for the cluster",numDirs);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDNs).format(false).clusterId(clusterId).startupOption(StartupOption.UPGRADE).build();
  DFSAdmin dfsAdmin=new DFSAdmin();
  dfsAdmin.setConf(conf);
  dfsAdmin.run(new String[]{"-safemode","wait"});
  cluster.shutdown();
  log("NameCluster regular startup after the upgrade",numDirs);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDNs).clusterId(clusterId).format(false).startupOption(StartupOption.REGULAR).build();
  cluster.waitActive();
  cluster.shutdown();
}
