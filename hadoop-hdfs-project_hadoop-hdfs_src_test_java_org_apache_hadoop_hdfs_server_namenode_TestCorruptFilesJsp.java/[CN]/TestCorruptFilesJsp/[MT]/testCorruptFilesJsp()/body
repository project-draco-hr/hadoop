{
  MiniDFSCluster cluster=null;
  try {
    final int FILE_SIZE=512;
    Path[] filepaths={new Path("/audiobook"),new Path("/audio/audio1"),new Path("/audio/audio2"),new Path("/audio/audio")};
    Configuration conf=new HdfsConfiguration();
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY,1);
    conf.setInt(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,3 * 1000);
    cluster=new MiniDFSCluster.Builder(conf).build();
    cluster.waitActive();
    FileSystem fs=cluster.getFileSystem();
    for (    Path filepath : filepaths) {
      DFSTestUtil.createFile(fs,filepath,FILE_SIZE,(short)1,0L);
      DFSTestUtil.waitReplication(fs,filepath,(short)1);
    }
    final NameNode namenode=cluster.getNameNode();
    Collection<FSNamesystem.CorruptFileBlockInfo> badFiles=namenode.getNamesystem().listCorruptFileBlocks("/",null);
    assertTrue("There are " + badFiles.size() + " corrupt files, but expecting none",badFiles.size() == 0);
    URL url=new URL("http://" + conf.get(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY) + "/corrupt_files.jsp");
    String corruptFilesPage=DFSTestUtil.urlGet(url);
    assertTrue("Corrupt files page is not showing a healthy filesystem",corruptFilesPage.contains("No missing blocks found at the moment."));
    for (int idx=0; idx < filepaths.length - 1; idx++) {
      ExtendedBlock blk=DFSTestUtil.getFirstBlock(fs,filepaths[idx]);
      assertTrue(TestDatanodeBlockScanner.corruptReplica(blk,0));
      FSDataInputStream in=fs.open(filepaths[idx]);
      try {
        in.readFully(new byte[FILE_SIZE]);
      }
 catch (      ChecksumException ignored) {
      }
      in.close();
    }
    badFiles=namenode.getNamesystem().listCorruptFileBlocks("/",null);
    assertTrue("Expecting 3 corrupt files, but got " + badFiles.size(),badFiles.size() == 3);
    url=new URL("http://" + conf.get(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY) + "/corrupt_files.jsp");
    corruptFilesPage=DFSTestUtil.urlGet(url);
    assertTrue("'/audiobook' should be corrupt",corruptFilesPage.contains("/audiobook"));
    assertTrue("'/audio/audio1' should be corrupt",corruptFilesPage.contains("/audio/audio1"));
    assertTrue("'/audio/audio2' should be corrupt",corruptFilesPage.contains("/audio/audio2"));
    assertTrue("Summary message shall report 3 corrupt files",corruptFilesPage.contains("At least 3 corrupt file(s)"));
    for (    Path filepath : filepaths) {
      fs.delete(filepath,false);
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
