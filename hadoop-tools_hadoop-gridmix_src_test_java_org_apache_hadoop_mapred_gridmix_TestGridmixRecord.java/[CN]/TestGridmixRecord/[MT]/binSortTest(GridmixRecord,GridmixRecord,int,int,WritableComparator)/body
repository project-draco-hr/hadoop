{
  final Random r=new Random();
  final long s=r.nextLong();
  r.setSeed(s);
  LOG.info("sort: " + s);
  final DataOutputBuffer out1=new DataOutputBuffer();
  final DataOutputBuffer out2=new DataOutputBuffer();
  for (int i=min; i < max; ++i) {
    final long seed1=r.nextLong();
    setSerialize(x,seed1,i,out1);
    assertEquals(0,x.compareSeed(seed1,Math.max(0,i - x.fixedBytes())));
    final long seed2=r.nextLong();
    setSerialize(y,seed2,i,out2);
    assertEquals(0,y.compareSeed(seed2,Math.max(0,i - x.fixedBytes())));
    final int chk=WritableComparator.compareBytes(out1.getData(),0,out1.getLength(),out2.getData(),0,out2.getLength());
    assertEquals(chk,x.compareTo(y));
    assertEquals(chk,cmp.compare(out1.getData(),0,out1.getLength(),out2.getData(),0,out2.getLength()));
    final int s1=out1.getLength();
    x.write(out1);
    assertEquals(0,cmp.compare(out1.getData(),0,s1,out1.getData(),s1,out1.getLength() - s1));
    final int s2=out2.getLength();
    y.write(out2);
    assertEquals(0,cmp.compare(out2.getData(),0,s2,out2.getData(),s2,out2.getLength() - s2));
    assertEquals(chk,cmp.compare(out1.getData(),0,s1,out2.getData(),s2,out2.getLength() - s2));
  }
}
