{
  Map<String,Object> map=Maps.newHashMap();
switch (inode.getType()) {
case FILE:
{
      FsImageProto.INodeSection.INodeFile f=inode.getFile();
      PermissionStatus p=FSImageFormatPBINode.Loader.loadPermission(f.getPermission(),stringTable);
      map.put("accessTime",f.getAccessTime());
      map.put("blockSize",f.getPreferredBlockSize());
      map.put("lazyPersist",f.getIsLazyPersist());
      map.put("group",p.getGroupName());
      map.put("length",getFileSize(f));
      map.put("modificationTime",f.getModificationTime());
      map.put("owner",p.getUserName());
      map.put("pathSuffix",printSuffix ? inode.getName().toStringUtf8() : "");
      map.put("permission",toString(p.getPermission()));
      map.put("replication",f.getReplication());
      map.put("type",inode.getType());
      map.put("fileId",inode.getId());
      map.put("childrenNum",0);
      return map;
    }
case DIRECTORY:
{
    FsImageProto.INodeSection.INodeDirectory d=inode.getDirectory();
    PermissionStatus p=FSImageFormatPBINode.Loader.loadPermission(d.getPermission(),stringTable);
    map.put("accessTime",0);
    map.put("blockSize",0);
    map.put("group",p.getGroupName());
    map.put("length",0);
    map.put("modificationTime",d.getModificationTime());
    map.put("owner",p.getUserName());
    map.put("pathSuffix",printSuffix ? inode.getName().toStringUtf8() : "");
    map.put("permission",toString(p.getPermission()));
    map.put("replication",0);
    map.put("type",inode.getType());
    map.put("fileId",inode.getId());
    map.put("childrenNum",dirmap.containsKey(inode.getId()) ? dirmap.get(inode.getId()).length : 0);
    return map;
  }
case SYMLINK:
{
  FsImageProto.INodeSection.INodeSymlink d=inode.getSymlink();
  PermissionStatus p=FSImageFormatPBINode.Loader.loadPermission(d.getPermission(),stringTable);
  map.put("accessTime",d.getAccessTime());
  map.put("blockSize",0);
  map.put("group",p.getGroupName());
  map.put("length",0);
  map.put("modificationTime",d.getModificationTime());
  map.put("owner",p.getUserName());
  map.put("pathSuffix",printSuffix ? inode.getName().toStringUtf8() : "");
  map.put("permission",toString(p.getPermission()));
  map.put("replication",0);
  map.put("type",inode.getType());
  map.put("symlink",d.getTarget().toStringUtf8());
  map.put("fileId",inode.getId());
  map.put("childrenNum",0);
  return map;
}
default :
return null;
}
}
