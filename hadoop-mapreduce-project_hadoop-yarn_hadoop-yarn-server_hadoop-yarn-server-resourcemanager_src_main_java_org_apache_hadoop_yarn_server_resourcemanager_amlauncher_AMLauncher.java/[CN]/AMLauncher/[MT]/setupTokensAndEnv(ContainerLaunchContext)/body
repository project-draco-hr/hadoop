{
  Map<String,String> environment=container.getEnvironment();
  environment.put(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV,application.getWebProxyBase());
  environment.put(ApplicationConstants.AM_CONTAINER_ID_ENV,container.getContainerId().toString());
  environment.put(ApplicationConstants.NM_HOST_ENV,application.getMasterContainer().getNodeId().getHost());
  environment.put(ApplicationConstants.NM_PORT_ENV,String.valueOf(application.getMasterContainer().getNodeId().getPort()));
  String parts[]=application.getMasterContainer().getNodeHttpAddress().split(":");
  environment.put(ApplicationConstants.NM_HTTP_PORT_ENV,parts[1]);
  environment.put(ApplicationConstants.APP_SUBMIT_TIME_ENV,String.valueOf(rmContext.getRMApps().get(application.getAppAttemptId().getApplicationId()).getSubmitTime()));
  if (UserGroupInformation.isSecurityEnabled()) {
    Credentials credentials=new Credentials();
    DataInputByteBuffer dibb=new DataInputByteBuffer();
    if (container.getContainerTokens() != null) {
      dibb.reset(container.getContainerTokens());
      credentials.readTokenStorageStream(dibb);
    }
    ApplicationTokenIdentifier id=new ApplicationTokenIdentifier(application.getAppAttemptId());
    Token<ApplicationTokenIdentifier> token=new Token<ApplicationTokenIdentifier>(id,this.rmContext.getApplicationTokenSecretManager());
    String schedulerAddressStr=this.conf.get(YarnConfiguration.RM_SCHEDULER_ADDRESS,YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);
    InetSocketAddress unresolvedAddr=NetUtils.createSocketAddr(schedulerAddressStr);
    String resolvedAddr=unresolvedAddr.getAddress().getHostAddress() + ":" + unresolvedAddr.getPort();
    token.setService(new Text(resolvedAddr));
    String appMasterTokenEncoded=token.encodeToUrlString();
    LOG.debug("Putting appMaster token in env : " + appMasterTokenEncoded);
    environment.put(ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME,appMasterTokenEncoded);
    credentials.addToken(new Text(resolvedAddr),token);
    DataOutputBuffer dob=new DataOutputBuffer();
    credentials.writeTokenStorageToStream(dob);
    container.setContainerTokens(ByteBuffer.wrap(dob.getData(),0,dob.getLength()));
    ClientTokenIdentifier identifier=new ClientTokenIdentifier(application.getAppAttemptId().getApplicationId());
    SecretKey clientSecretKey=this.clientToAMSecretManager.getMasterKey(identifier);
    String encoded=Base64.encodeBase64URLSafeString(clientSecretKey.getEncoded());
    LOG.debug("The encoded client secret-key to be put in env : " + encoded);
    environment.put(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME,encoded);
  }
}
