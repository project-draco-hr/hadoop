{
  GenericTestUtils.setLogLevel(SSLFactory.LOG,Level.DEBUG);
  final Configuration conf=createConfiguration(true,true);
  SSLFactory serverSSLFactory=new SSLFactory(SSLFactory.Mode.SERVER,conf);
  SSLFactory clientSSLFactory=new SSLFactory(SSLFactory.Mode.CLIENT,conf);
  serverSSLFactory.init();
  clientSSLFactory.init();
  SSLEngine serverSSLEngine=serverSSLFactory.createSSLEngine();
  SSLEngine clientSSLEngine=clientSSLFactory.createSSLEngine();
  clientSSLEngine.setEnabledCipherSuites(excludeCiphers.split(","));
  SSLSession session=clientSSLEngine.getSession();
  int appBufferMax=session.getApplicationBufferSize();
  int netBufferMax=session.getPacketBufferSize();
  ByteBuffer clientOut=ByteBuffer.wrap("client".getBytes());
  ByteBuffer clientIn=ByteBuffer.allocate(appBufferMax);
  ByteBuffer serverOut=ByteBuffer.wrap("server".getBytes());
  ByteBuffer serverIn=ByteBuffer.allocate(appBufferMax);
  ByteBuffer cTOs=ByteBuffer.allocateDirect(netBufferMax);
  ByteBuffer sTOc=ByteBuffer.allocateDirect(netBufferMax);
  boolean dataDone=false;
  try {
    while (!isEngineClosed(clientSSLEngine) || !isEngineClosed(serverSSLEngine)) {
      LOG.info("client wrap " + wrap(clientSSLEngine,clientOut,cTOs));
      LOG.info("server wrap " + wrap(serverSSLEngine,serverOut,sTOc));
      cTOs.flip();
      sTOc.flip();
      LOG.info("client unwrap " + unwrap(clientSSLEngine,sTOc,clientIn));
      LOG.info("server unwrap " + unwrap(serverSSLEngine,cTOs,serverIn));
      cTOs.compact();
      sTOc.compact();
      if (!dataDone && (clientOut.limit() == serverIn.position()) && (serverOut.limit() == clientIn.position())) {
        checkTransfer(serverOut,clientIn);
        checkTransfer(clientOut,serverIn);
        LOG.info("closing client");
        clientSSLEngine.closeOutbound();
        dataDone=true;
      }
    }
    Assert.fail("The exception was not thrown");
  }
 catch (  SSLHandshakeException e) {
    GenericTestUtils.assertExceptionContains("no cipher suites in common",e);
  }
}
