{
  DataInputStream inStream=new DataInputStream(new BufferedInputStream(inS));
  DataOutputStream outStream=new DataOutputStream(new BufferedOutputStream(outS));
  try {
    byte[] saslToken=new byte[0];
    if (saslClient.hasInitialResponse())     saslToken=saslClient.evaluateChallenge(saslToken);
    if (saslToken != null) {
      outStream.writeInt(saslToken.length);
      outStream.write(saslToken,0,saslToken.length);
      outStream.flush();
      if (LOG.isDebugEnabled())       LOG.debug("Have sent token of size " + saslToken.length + " from initSASLContext.");
    }
    if (!saslClient.isComplete()) {
      saslToken=new byte[inStream.readInt()];
      if (LOG.isDebugEnabled())       LOG.debug("Will read input token of size " + saslToken.length + " for processing by initSASLContext");
      inStream.readFully(saslToken);
    }
    while (!saslClient.isComplete()) {
      saslToken=saslClient.evaluateChallenge(saslToken);
      if (saslToken != null) {
        if (LOG.isDebugEnabled())         LOG.debug("Will send token of size " + saslToken.length + " from initSASLContext.");
        outStream.writeInt(saslToken.length);
        outStream.write(saslToken,0,saslToken.length);
        outStream.flush();
      }
      if (!saslClient.isComplete()) {
        saslToken=new byte[inStream.readInt()];
        if (LOG.isDebugEnabled())         LOG.debug("Will read input token of size " + saslToken.length + " for processing by initSASLContext");
        inStream.readFully(saslToken);
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("SASL client context established. Negotiated QoP: " + saslClient.getNegotiatedProperty(Sasl.QOP));
    }
  }
 catch (  IOException e) {
    saslClient.dispose();
    throw e;
  }
}
