{
  Path path=qualifiedPath("test/hadoop",fc2);
  Path falsePath=qualifiedPath("path/doesnot.exist",fc2);
  Path subDirPath=qualifiedPath("dir0",fc2);
  Assert.assertFalse(fc1.exists(path));
  Assert.assertFalse(fc1.isFile(path));
  Assert.assertFalse(fc1.isDirectory(path));
  fc1.mkdir(path,FsPermission.getDefault(),true);
  Assert.assertTrue(fc2.isDirectory(path));
  Assert.assertTrue(fc2.exists(path));
  Assert.assertFalse(fc2.isFile(path));
  fc1.mkdir(subDirPath,FsPermission.getDefault(),true);
  fc1.mkdir(subDirPath,FsPermission.getDefault(),true);
  fc1.mkdir(subDirPath,FsPermission.getDefault(),true);
  Path parentDir=path.getParent();
  Assert.assertTrue(fc2.exists(parentDir));
  Assert.assertFalse(fc2.isFile(parentDir));
  Path grandparentDir=parentDir.getParent();
  Assert.assertTrue(fc2.exists(grandparentDir));
  Assert.assertFalse(fc2.isFile(grandparentDir));
  Assert.assertFalse(fc2.exists(falsePath));
  Assert.assertFalse(fc2.isDirectory(falsePath));
  String dirNames[]={"createTest/testDir","createTest/test Dir","deleteTest/test*Dir","deleteTest/test#Dir","deleteTest/test1234","deleteTest/test_DIr","deleteTest/1234Test","deleteTest/test)Dir","deleteTest/()&^%$#@!~_+}{><?","  ","^ "};
  for (  String f : dirNames) {
    Path testPath=qualifiedPath(f,fc2);
    Assert.assertFalse(fc2.exists(testPath));
    fc1.mkdir(testPath,FsPermission.getDefault(),true);
    Assert.assertTrue(fc2.exists(testPath));
    Assert.assertTrue(fc2.isDirectory(testPath));
  }
}
