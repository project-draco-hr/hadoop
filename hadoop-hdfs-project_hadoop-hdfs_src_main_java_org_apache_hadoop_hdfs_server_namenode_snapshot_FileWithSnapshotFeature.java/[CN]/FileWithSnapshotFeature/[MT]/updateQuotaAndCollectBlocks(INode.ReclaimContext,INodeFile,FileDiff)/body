{
  byte storagePolicyID=file.getStoragePolicyID();
  BlockStoragePolicy bsp=null;
  if (storagePolicyID != HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {
    bsp=reclaimContext.storagePolicySuite().getPolicy(file.getStoragePolicyID());
  }
  QuotaCounts oldCounts;
  if (removed.snapshotINode != null) {
    oldCounts=new QuotaCounts.Builder().build();
    BlockInfo[] blocks=file.getBlocks() == null ? new BlockInfo[0] : file.getBlocks();
    for (    BlockInfo b : blocks) {
      short replication=b.getReplication();
      long blockSize=b.isComplete() ? b.getNumBytes() : file.getPreferredBlockSize();
      oldCounts.addStorageSpace(blockSize * replication);
      if (bsp != null) {
        List<StorageType> oldTypeChosen=bsp.chooseStorageTypes(replication);
        for (        StorageType t : oldTypeChosen) {
          if (t.supportTypeQuota()) {
            oldCounts.addTypeSpace(t,blockSize);
          }
        }
      }
    }
    AclFeature aclFeature=removed.getSnapshotINode().getAclFeature();
    if (aclFeature != null) {
      AclStorage.removeAclFeature(aclFeature);
    }
  }
 else {
    oldCounts=file.storagespaceConsumed(null);
  }
  getDiffs().combineAndCollectSnapshotBlocks(reclaimContext,file,removed);
  if (file.getBlocks() != null) {
    short replInDiff=getMaxBlockRepInDiffs(removed);
    short repl=(short)Math.max(file.getPreferredBlockReplication(),replInDiff);
    for (    BlockInfo b : file.getBlocks()) {
      if (repl != b.getReplication()) {
        reclaimContext.collectedBlocks().addUpdateReplicationFactor(b,repl);
      }
    }
  }
  QuotaCounts current=file.storagespaceConsumed(bsp);
  reclaimContext.quotaDelta().add(oldCounts.subtract(current));
}
