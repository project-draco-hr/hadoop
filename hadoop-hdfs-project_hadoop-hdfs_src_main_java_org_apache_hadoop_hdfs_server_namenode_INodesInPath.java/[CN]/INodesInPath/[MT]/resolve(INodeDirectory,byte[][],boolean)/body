{
  Preconditions.checkArgument(startingDir.compareTo(components[0]) == 0);
  INode curNode=startingDir;
  int count=0;
  int inodeNum=0;
  INode[] inodes=new INode[components.length];
  boolean isSnapshot=false;
  int snapshotId=CURRENT_STATE_ID;
  while (count < components.length && curNode != null) {
    final boolean lastComp=(count == components.length - 1);
    inodes[inodeNum++]=curNode;
    final boolean isRef=curNode.isReference();
    final boolean isDir=curNode.isDirectory();
    final INodeDirectory dir=isDir ? curNode.asDirectory() : null;
    if (!isRef && isDir && dir.isWithSnapshot()) {
      if (!isSnapshot && shouldUpdateLatestId(dir.getDirectoryWithSnapshotFeature().getLastSnapshotId(),snapshotId)) {
        snapshotId=dir.getDirectoryWithSnapshotFeature().getLastSnapshotId();
      }
    }
 else     if (isRef && isDir && !lastComp) {
      if (!isSnapshot) {
        int dstSnapshotId=curNode.asReference().getDstSnapshotId();
        if (snapshotId == CURRENT_STATE_ID || (dstSnapshotId != CURRENT_STATE_ID && dstSnapshotId >= snapshotId)) {
          int lastSnapshot=CURRENT_STATE_ID;
          DirectoryWithSnapshotFeature sf;
          if (curNode.isDirectory() && (sf=curNode.asDirectory().getDirectoryWithSnapshotFeature()) != null) {
            lastSnapshot=sf.getLastSnapshotId();
          }
          snapshotId=lastSnapshot;
        }
      }
    }
    if (curNode.isSymlink() && (!lastComp || resolveLink)) {
      final String path=constructPath(components,0,components.length);
      final String preceding=constructPath(components,0,count);
      final String remainder=constructPath(components,count + 1,components.length);
      final String link=DFSUtil.bytes2String(components[count]);
      final String target=curNode.asSymlink().getSymlinkString();
      if (LOG.isDebugEnabled()) {
        LOG.debug("UnresolvedPathException " + " path: " + path + " preceding: "+ preceding+ " count: "+ count+ " link: "+ link+ " target: "+ target+ " remainder: "+ remainder);
      }
      throw new UnresolvedPathException(path,preceding,remainder,target);
    }
    if (lastComp || !isDir) {
      break;
    }
    final byte[] childName=components[count + 1];
    if (isDotSnapshotDir(childName) && dir.isSnapshottable()) {
      count++;
      isSnapshot=true;
      if (count == components.length - 1) {
        break;
      }
      final Snapshot s=dir.getSnapshot(components[count + 1]);
      if (s == null) {
        curNode=null;
      }
 else {
        curNode=s.getRoot();
        snapshotId=s.getId();
      }
    }
 else {
      curNode=dir.getChild(childName,isSnapshot ? snapshotId : CURRENT_STATE_ID);
    }
    count++;
  }
  if (isSnapshot && !isDotSnapshotDir(components[components.length - 1])) {
    INode[] newNodes=new INode[components.length - 1];
    System.arraycopy(inodes,0,newNodes,0,newNodes.length);
    inodes=newNodes;
  }
  return new INodesInPath(inodes,components,isSnapshot,snapshotId);
}
