{
  long startOffset=0;
  int datanodePort=0;
  final String namenodeInfoPortStr=req.getParameter("namenodeInfoPort");
  final String nnAddr=req.getParameter(JspHelper.NAMENODE_ADDRESS);
  if (nnAddr == null) {
    out.print(JspHelper.NAMENODE_ADDRESS + " url param is null");
    return;
  }
  final String tokenString=req.getParameter(JspHelper.DELEGATION_PARAMETER_NAME);
  UserGroupInformation ugi=JspHelper.getUGI(req,conf);
  int namenodeInfoPort=-1;
  if (namenodeInfoPortStr != null)   namenodeInfoPort=Integer.parseInt(namenodeInfoPortStr);
  final String filename=JspHelper.validatePath(StringEscapeUtils.unescapeHtml(req.getParameter("filename")));
  if (filename == null) {
    out.print("Invalid input (filename absent)");
    return;
  }
  final Long blockId=JspHelper.validateLong(req.getParameter("blockId"));
  if (blockId == null) {
    out.print("Invalid input (blockId absent)");
    return;
  }
  final DFSClient dfs=getDFSClient(ugi,nnAddr,conf);
  String bpid=null;
  Token<BlockTokenIdentifier> blockToken=BlockTokenSecretManager.DUMMY_TOKEN;
  List<LocatedBlock> blks=dfs.getNamenode().getBlockLocations(filename,0,Long.MAX_VALUE).getLocatedBlocks();
  if (blks == null || blks.size() == 0) {
    out.print("Can't locate file blocks");
    dfs.close();
    return;
  }
  boolean needBlockToken=conf.getBoolean(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY,DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT);
  for (int i=0; i < blks.size(); i++) {
    if (blks.get(i).getBlock().getBlockId() == blockId) {
      bpid=blks.get(i).getBlock().getBlockPoolId();
      if (needBlockToken) {
        blockToken=blks.get(i).getBlockToken();
      }
      break;
    }
  }
  final Long genStamp=JspHelper.validateLong(req.getParameter("genstamp"));
  if (genStamp == null) {
    out.print("Invalid input (genstamp absent)");
    return;
  }
  long blockSize=0;
  final String blockSizeStr=req.getParameter("blockSize");
  if (blockSizeStr == null) {
    out.print("Invalid input (blockSize absent)");
    return;
  }
  blockSize=Long.parseLong(blockSizeStr);
  final int chunkSizeToView=JspHelper.string2ChunkSizeToView(req.getParameter("chunkSizeToView"),getDefaultChunkSize(conf));
  String startOffsetStr=req.getParameter("startOffset");
  if (startOffsetStr == null || Long.parseLong(startOffsetStr) < 0)   startOffset=0;
 else   startOffset=Long.parseLong(startOffsetStr);
  String datanodePortStr=req.getParameter("datanodePort");
  if (datanodePortStr == null) {
    out.print("Invalid input (datanodePort absent)");
    return;
  }
  datanodePort=Integer.parseInt(datanodePortStr);
  out.print("<h3>File: ");
  JspHelper.printPathWithLinks(filename,out,namenodeInfoPort,tokenString,nnAddr);
  out.print("</h3><hr>");
  String parent=new File(filename).getParent();
  JspHelper.printGotoForm(out,namenodeInfoPort,tokenString,parent,nnAddr);
  out.print("<hr>");
  out.print("<a href=\"http://" + req.getServerName() + ":"+ req.getServerPort()+ "/browseDirectory.jsp?dir="+ URLEncoder.encode(parent,"UTF-8")+ "&namenodeInfoPort="+ namenodeInfoPort+ JspHelper.getDelegationTokenUrlParam(tokenString)+ JspHelper.getUrlParam(JspHelper.NAMENODE_ADDRESS,nnAddr)+ "\"><i>Go back to dir listing</i></a><br>");
  out.print("<a href=\"#viewOptions\">Advanced view/download options</a><br>");
  out.print("<hr>");
  long nextStartOffset=0;
  long nextBlockSize=0;
  String nextBlockIdStr=null;
  String nextGenStamp=null;
  String nextHost=req.getServerName();
  int nextPort=req.getServerPort();
  int nextDatanodePort=datanodePort;
  if (startOffset + chunkSizeToView >= blockSize) {
    List<LocatedBlock> blocks=dfs.getNamenode().getBlockLocations(filename,0,Long.MAX_VALUE).getLocatedBlocks();
    for (int i=0; i < blocks.size(); i++) {
      if (blocks.get(i).getBlock().getBlockId() == blockId) {
        if (i != blocks.size() - 1) {
          LocatedBlock nextBlock=blocks.get(i + 1);
          nextBlockIdStr=Long.toString(nextBlock.getBlock().getBlockId());
          nextGenStamp=Long.toString(nextBlock.getBlock().getGenerationStamp());
          nextStartOffset=0;
          nextBlockSize=nextBlock.getBlock().getNumBytes();
          DatanodeInfo d=JspHelper.bestNode(nextBlock,conf);
          nextDatanodePort=d.getXferPort();
          nextHost=d.getIpAddr();
          nextPort=d.getInfoPort();
        }
      }
    }
  }
 else {
    nextBlockIdStr=blockId.toString();
    nextStartOffset=startOffset + chunkSizeToView;
    nextBlockSize=blockSize;
    nextGenStamp=genStamp.toString();
  }
  String nextUrl=null;
  if (nextBlockIdStr != null) {
    nextUrl="http://" + canonicalize(nextHost) + ":"+ nextPort+ "/browseBlock.jsp?blockId="+ nextBlockIdStr+ "&blockSize="+ nextBlockSize+ "&startOffset="+ nextStartOffset+ "&genstamp="+ nextGenStamp+ "&filename="+ URLEncoder.encode(filename,"UTF-8")+ "&chunkSizeToView="+ chunkSizeToView+ "&datanodePort="+ nextDatanodePort+ "&namenodeInfoPort="+ namenodeInfoPort+ JspHelper.getDelegationTokenUrlParam(tokenString)+ JspHelper.getUrlParam(JspHelper.NAMENODE_ADDRESS,nnAddr);
    out.print("<a href=\"" + nextUrl + "\">View Next chunk</a>&nbsp;&nbsp;");
  }
  String prevBlockIdStr=null;
  String prevGenStamp=null;
  long prevStartOffset=0;
  long prevBlockSize=0;
  String prevHost=req.getServerName();
  int prevPort=req.getServerPort();
  int prevDatanodePort=datanodePort;
  if (startOffset == 0) {
    List<LocatedBlock> blocks=dfs.getNamenode().getBlockLocations(filename,0,Long.MAX_VALUE).getLocatedBlocks();
    for (int i=0; i < blocks.size(); i++) {
      if (blocks.get(i).getBlock().getBlockId() == blockId) {
        if (i != 0) {
          LocatedBlock prevBlock=blocks.get(i - 1);
          prevBlockIdStr=Long.toString(prevBlock.getBlock().getBlockId());
          prevGenStamp=Long.toString(prevBlock.getBlock().getGenerationStamp());
          prevStartOffset=prevBlock.getBlock().getNumBytes() - chunkSizeToView;
          if (prevStartOffset < 0)           prevStartOffset=0;
          prevBlockSize=prevBlock.getBlock().getNumBytes();
          DatanodeInfo d=JspHelper.bestNode(prevBlock,conf);
          prevDatanodePort=d.getXferPort();
          prevHost=d.getIpAddr();
          prevPort=d.getInfoPort();
        }
      }
    }
  }
 else {
    prevBlockIdStr=blockId.toString();
    prevStartOffset=startOffset - chunkSizeToView;
    if (prevStartOffset < 0)     prevStartOffset=0;
    prevBlockSize=blockSize;
    prevGenStamp=genStamp.toString();
  }
  String prevUrl=null;
  if (prevBlockIdStr != null) {
    prevUrl="http://" + canonicalize(prevHost) + ":"+ prevPort+ "/browseBlock.jsp?blockId="+ prevBlockIdStr+ "&blockSize="+ prevBlockSize+ "&startOffset="+ prevStartOffset+ "&filename="+ URLEncoder.encode(filename,"UTF-8")+ "&chunkSizeToView="+ chunkSizeToView+ "&genstamp="+ prevGenStamp+ "&datanodePort="+ prevDatanodePort+ "&namenodeInfoPort="+ namenodeInfoPort+ JspHelper.getDelegationTokenUrlParam(tokenString)+ JspHelper.getUrlParam(JspHelper.NAMENODE_ADDRESS,nnAddr);
    out.print("<a href=\"" + prevUrl + "\">View Prev chunk</a>&nbsp;&nbsp;");
  }
  out.print("<hr>");
  out.print("<textarea cols=\"100\" rows=\"25\" wrap=\"virtual\" style=\"width:100%\" READONLY>");
  try {
    JspHelper.streamBlockInAscii(new InetSocketAddress(req.getServerName(),datanodePort),bpid,blockId,blockToken,genStamp,blockSize,startOffset,chunkSizeToView,out,conf,dfs.getDataEncryptionKey());
  }
 catch (  Exception e) {
    out.print(e);
  }
  out.print("</textarea>");
  dfs.close();
}
