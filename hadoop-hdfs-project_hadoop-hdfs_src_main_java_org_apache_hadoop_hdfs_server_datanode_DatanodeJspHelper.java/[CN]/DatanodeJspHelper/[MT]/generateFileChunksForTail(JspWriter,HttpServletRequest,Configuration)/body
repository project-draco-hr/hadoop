{
  String referrer=null;
  boolean noLink=false;
  try {
    referrer=new URL(req.getParameter("referrer")).toString();
  }
 catch (  IOException e) {
    referrer=null;
    noLink=true;
  }
  final String filename=JspHelper.validatePath(StringEscapeUtils.unescapeHtml(req.getParameter("filename")));
  if (filename == null) {
    out.print("Invalid input (file name absent)");
    return;
  }
  String tokenString=req.getParameter(JspHelper.DELEGATION_PARAMETER_NAME);
  UserGroupInformation ugi=JspHelper.getUGI(req,conf);
  String namenodeInfoPortStr=req.getParameter("namenodeInfoPort");
  String nnAddr=req.getParameter(JspHelper.NAMENODE_ADDRESS);
  int namenodeInfoPort=-1;
  if (namenodeInfoPortStr != null)   namenodeInfoPort=Integer.parseInt(namenodeInfoPortStr);
  final int chunkSizeToView=JspHelper.string2ChunkSizeToView(req.getParameter("chunkSizeToView"),getDefaultChunkSize(conf));
  if (!noLink) {
    out.print("<h3>Tail of File: ");
    JspHelper.printPathWithLinks(filename,out,namenodeInfoPort,tokenString,nnAddr);
    out.print("</h3><hr>");
    out.print("<a href=\"" + referrer + "\">Go Back to File View</a><hr>");
  }
 else {
    out.print("<h3>" + filename + "</h3>");
  }
  out.print("<b>Chunk size to view (in bytes, up to file's DFS block size): </b>");
  out.print("<input type=\"text\" name=\"chunkSizeToView\" value=" + chunkSizeToView + " size=10 maxlength=10>");
  out.print("&nbsp;&nbsp;<input type=\"submit\" name=\"submit\" value=\"Refresh\"><hr>");
  out.print("<input type=\"hidden\" name=\"filename\" value=\"" + filename + "\">");
  out.print("<input type=\"hidden\" name=\"namenodeInfoPort\" value=\"" + namenodeInfoPort + "\">");
  out.print("<input type=\"hidden\" name=\"" + JspHelper.NAMENODE_ADDRESS + "\" value=\""+ nnAddr+ "\">");
  if (!noLink)   out.print("<input type=\"hidden\" name=\"referrer\" value=\"" + referrer + "\">");
  final DFSClient dfs=getDFSClient(ugi,nnAddr,conf);
  List<LocatedBlock> blocks=dfs.getNamenode().getBlockLocations(filename,0,Long.MAX_VALUE).getLocatedBlocks();
  if (blocks == null || blocks.size() == 0) {
    out.print("No datanodes contain blocks of file " + filename);
    dfs.close();
    return;
  }
  LocatedBlock lastBlk=blocks.get(blocks.size() - 1);
  String poolId=lastBlk.getBlock().getBlockPoolId();
  long blockSize=lastBlk.getBlock().getNumBytes();
  long blockId=lastBlk.getBlock().getBlockId();
  Token<BlockTokenIdentifier> accessToken=lastBlk.getBlockToken();
  long genStamp=lastBlk.getBlock().getGenerationStamp();
  DatanodeInfo chosenNode;
  try {
    chosenNode=JspHelper.bestNode(lastBlk,conf);
  }
 catch (  IOException e) {
    out.print(e.toString());
    dfs.close();
    return;
  }
  InetSocketAddress addr=NetUtils.createSocketAddr(chosenNode.getXferAddr());
  final long startOffset=blockSize >= chunkSizeToView ? blockSize - chunkSizeToView : 0;
  out.print("<textarea cols=\"100\" rows=\"25\" wrap=\"virtual\" style=\"width:100%\" READONLY>");
  JspHelper.streamBlockInAscii(addr,poolId,blockId,accessToken,genStamp,blockSize,startOffset,chunkSizeToView,out,conf);
  out.print("</textarea>");
  dfs.close();
}
