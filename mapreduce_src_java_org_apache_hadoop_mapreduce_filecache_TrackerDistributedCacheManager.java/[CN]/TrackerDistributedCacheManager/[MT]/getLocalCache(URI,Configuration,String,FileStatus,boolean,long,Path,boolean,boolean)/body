{
  String key;
  key=getKey(cache,conf,confFileStamp,getLocalizedCacheOwner(isPublic));
  CacheStatus lcacheStatus;
  Path localizedPath=null;
synchronized (cachedArchives) {
    lcacheStatus=cachedArchives.get(key);
    if (lcacheStatus == null) {
      String uniqueString=String.valueOf(random.nextLong());
      String cachePath=new Path(subDir,new Path(uniqueString,makeRelative(cache,conf))).toString();
      Path localPath=lDirAllocator.getLocalPathForWrite(cachePath,fileStatus.getLen(),trackerConf);
      lcacheStatus=new CacheStatus(new Path(localPath.toString().replace(cachePath,"")),localPath,new Path(subDir),uniqueString,key);
      cachedArchives.put(key,lcacheStatus);
    }
    lcacheStatus.incRefCount();
  }
  boolean initSuccessful=false;
  try {
synchronized (lcacheStatus) {
      if (!lcacheStatus.isInited()) {
        FileSystem fs=FileSystem.get(cache,conf);
        checkStampSinceJobStarted(conf,fs,cache,confFileStamp,lcacheStatus,fileStatus);
        localizedPath=localizeCache(conf,cache,confFileStamp,lcacheStatus,isArchive,isPublic);
        lcacheStatus.initComplete();
      }
 else {
        localizedPath=checkCacheStatusValidity(conf,cache,confFileStamp,lcacheStatus,fileStatus,isArchive);
      }
      createSymlink(conf,cache,lcacheStatus,isArchive,currentWorkDir,honorSymLinkConf);
    }
    initSuccessful=true;
    return localizedPath;
  }
  finally {
    if (!initSuccessful) {
      lcacheStatus.decRefCount();
    }
  }
}
