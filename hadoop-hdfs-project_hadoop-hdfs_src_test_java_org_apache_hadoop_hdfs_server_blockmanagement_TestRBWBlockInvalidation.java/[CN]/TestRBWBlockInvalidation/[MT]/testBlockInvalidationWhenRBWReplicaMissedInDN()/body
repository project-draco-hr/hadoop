{
  assumeTrue(!Path.WINDOWS);
  Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY,2);
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,300);
  conf.setLong(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY,1);
  conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
  FSDataOutputStream out=null;
  try {
    final FSNamesystem namesystem=cluster.getNamesystem();
    FileSystem fs=cluster.getFileSystem();
    Path testPath=new Path("/tmp/TestRBWBlockInvalidation","foo1");
    out=fs.create(testPath,(short)2);
    out.writeBytes("HDFS-3157: " + testPath);
    out.hsync();
    cluster.startDataNodes(conf,1,true,null,null,null);
    String bpid=namesystem.getBlockPoolId();
    ExtendedBlock blk=DFSTestUtil.getFirstBlock(fs,testPath);
    Block block=blk.getLocalBlock();
    DataNode dn=cluster.getDataNodes().get(0);
    File blockFile=DataNodeTestUtils.getBlockFile(dn,bpid,block);
    File metaFile=DataNodeTestUtils.getMetaFile(dn,bpid,block);
    assertTrue("Could not delete the block file from the RBW folder",blockFile.delete());
    assertTrue("Could not delete the block meta file from the RBW folder",metaFile.delete());
    out.close();
    int liveReplicas=0;
    while (true) {
      if ((liveReplicas=countReplicas(namesystem,blk).liveReplicas()) < 2) {
        LOG.info("Live Replicas after corruption: " + liveReplicas);
        break;
      }
      Thread.sleep(100);
    }
    assertEquals("There should be less than 2 replicas in the " + "liveReplicasMap",1,liveReplicas);
    while (true) {
      if ((liveReplicas=countReplicas(namesystem,blk).liveReplicas()) > 1) {
        LOG.info("Live Replicas after Rereplication: " + liveReplicas);
        break;
      }
      Thread.sleep(100);
    }
    assertEquals("There should be two live replicas",2,liveReplicas);
    while (true) {
      Thread.sleep(100);
      if (countReplicas(namesystem,blk).corruptReplicas() == 0) {
        LOG.info("Corrupt Replicas becomes 0");
        break;
      }
    }
  }
  finally {
    if (out != null) {
      out.close();
    }
    cluster.shutdown();
  }
}
