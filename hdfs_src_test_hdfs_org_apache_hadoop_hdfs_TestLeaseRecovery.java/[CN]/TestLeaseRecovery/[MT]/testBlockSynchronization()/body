{
  final int ORG_FILE_SIZE=3000;
  Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,BLOCK_SIZE);
  conf.setBoolean("dfs.support.append",true);
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(5).build();
    cluster.waitActive();
    DistributedFileSystem dfs=(DistributedFileSystem)cluster.getFileSystem();
    String filestr="/foo";
    Path filepath=new Path(filestr);
    DFSTestUtil.createFile(dfs,filepath,ORG_FILE_SIZE,REPLICATION_NUM,0L);
    assertTrue(dfs.dfs.exists(filestr));
    DFSTestUtil.waitReplication(dfs,filepath,REPLICATION_NUM);
    LocatedBlock locatedblock=TestInterDatanodeProtocol.getLastLocatedBlock(dfs.dfs.getNamenode(),filestr);
    DatanodeInfo[] datanodeinfos=locatedblock.getLocations();
    assertEquals(REPLICATION_NUM,datanodeinfos.length);
    DataNode[] datanodes=new DataNode[REPLICATION_NUM];
    for (int i=0; i < REPLICATION_NUM; i++) {
      datanodes[i]=cluster.getDataNode(datanodeinfos[i].getIpcPort());
      assertTrue(datanodes[i] != null);
    }
    ExtendedBlock lastblock=locatedblock.getBlock();
    DataNode.LOG.info("newblocks=" + lastblock);
    for (int i=0; i < REPLICATION_NUM; i++) {
      checkMetaInfo(lastblock,datanodes[i]);
    }
    DataNode.LOG.info("dfs.dfs.clientName=" + dfs.dfs.clientName);
    cluster.getNameNode().append(filestr,dfs.dfs.clientName);
    waitLeaseRecovery(cluster);
    Block[] updatedmetainfo=new Block[REPLICATION_NUM];
    long oldSize=lastblock.getNumBytes();
    lastblock=TestInterDatanodeProtocol.getLastLocatedBlock(dfs.dfs.getNamenode(),filestr).getBlock();
    long currentGS=lastblock.getGenerationStamp();
    for (int i=0; i < REPLICATION_NUM; i++) {
      updatedmetainfo[i]=datanodes[i].data.getStoredBlock(lastblock.getBlockPoolId(),lastblock.getBlockId());
      assertEquals(lastblock.getBlockId(),updatedmetainfo[i].getBlockId());
      assertEquals(oldSize,updatedmetainfo[i].getNumBytes());
      assertEquals(currentGS,updatedmetainfo[i].getGenerationStamp());
    }
    System.out.println("Testing that lease recovery cannot happen during safemode.");
    filestr="/foo.safemode";
    filepath=new Path(filestr);
    dfs.create(filepath,(short)1);
    cluster.getNameNode().setSafeMode(FSConstants.SafeModeAction.SAFEMODE_ENTER);
    assertTrue(dfs.dfs.exists(filestr));
    DFSTestUtil.waitReplication(dfs,filepath,(short)1);
    waitLeaseRecovery(cluster);
    LeaseManager lm=cluster.getNamesystem().leaseManager;
    assertTrue("Found " + lm.countLease() + " lease, expected 1",lm.countLease() == 1);
    cluster.getNameNode().setSafeMode(FSConstants.SafeModeAction.SAFEMODE_LEAVE);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
