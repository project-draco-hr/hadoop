{
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(5).build();
  try {
    cluster.waitActive();
    NameNode preSpyNN=cluster.getNameNode();
    NameNode spyNN=spy(preSpyNN);
    DelayAnswer delayer=new DelayAnswer();
    doAnswer(delayer).when(spyNN).complete(anyString(),anyString(),(ExtendedBlock)anyObject());
    DFSClient client=new DFSClient(null,spyNN,conf,null);
    file1=new Path("/testRecoverFinalized");
    final OutputStream stm=client.create("/testRecoverFinalized",true);
    AppendTestUtil.write(stm,0,4096);
    final AtomicReference<Throwable> err=new AtomicReference<Throwable>();
    Thread t=new Thread(){
      public void run(){
        try {
          stm.close();
        }
 catch (        Throwable t) {
          err.set(t);
        }
      }
    }
;
    t.start();
    LOG.info("Waiting for close to get to latch...");
    delayer.waitForCall();
    LOG.info("Killing lease checker");
    client.leaserenewer.interruptAndJoin();
    FileSystem fs1=cluster.getFileSystem();
    FileSystem fs2=AppendTestUtil.createHdfsWithDifferentUsername(fs1.getConf());
    LOG.info("Recovering file");
    recoverFile(fs2);
    LOG.info("Telling close to proceed.");
    delayer.proceed();
    LOG.info("Waiting for close to finish.");
    t.join();
    LOG.info("Close finished.");
    Throwable thrownByClose=err.get();
    assertNotNull(thrownByClose);
    assertTrue(thrownByClose instanceof IOException);
    if (!thrownByClose.getMessage().contains("No lease on /testRecoverFinalized"))     throw thrownByClose;
  }
  finally {
    cluster.shutdown();
  }
}
