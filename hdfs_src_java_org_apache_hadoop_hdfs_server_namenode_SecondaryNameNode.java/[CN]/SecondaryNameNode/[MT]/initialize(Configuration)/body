{
  final InetSocketAddress infoSocAddr=getHttpAddress(conf);
  infoBindAddress=infoSocAddr.getHostName();
  UserGroupInformation.setConfiguration(conf);
  if (UserGroupInformation.isSecurityEnabled()) {
    SecurityUtil.login(conf,DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY,DFS_SECONDARY_NAMENODE_USER_NAME_KEY,infoBindAddress);
  }
  JvmMetrics.create("SecondaryNameNode",conf.get(DFS_METRICS_SESSION_ID_KEY),DefaultMetricsSystem.instance());
  shouldRun=true;
  nameNodeAddr=NameNode.getServiceAddress(conf,true);
  this.conf=conf;
  this.namenode=(NamenodeProtocol)RPC.waitForProxy(NamenodeProtocol.class,NamenodeProtocol.versionID,nameNodeAddr,conf);
  fsName=getInfoServer();
  checkpointDirs=FSImage.getCheckpointDirs(conf,"/tmp/hadoop/dfs/namesecondary");
  checkpointEditsDirs=FSImage.getCheckpointEditsDirs(conf,"/tmp/hadoop/dfs/namesecondary");
  checkpointImage=new CheckpointStorage(conf);
  checkpointImage.recoverCreate(checkpointDirs,checkpointEditsDirs);
  checkpointPeriod=conf.getLong(DFS_NAMENODE_CHECKPOINT_PERIOD_KEY,DFS_NAMENODE_CHECKPOINT_PERIOD_DEFAULT);
  checkpointSize=conf.getLong(DFS_NAMENODE_CHECKPOINT_SIZE_KEY,DFS_NAMENODE_CHECKPOINT_SIZE_DEFAULT);
  UserGroupInformation httpUGI=UserGroupInformation.loginUserFromKeytabAndReturnUGI(SecurityUtil.getServerPrincipal(conf.get(DFS_SECONDARY_NAMENODE_KRB_HTTPS_USER_NAME_KEY),infoBindAddress),conf.get(DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY));
  try {
    infoServer=httpUGI.doAs(new PrivilegedExceptionAction<HttpServer>(){
      @Override public HttpServer run() throws IOException, InterruptedException {
        LOG.info("Starting web server as: " + UserGroupInformation.getCurrentUser().getUserName());
        int tmpInfoPort=infoSocAddr.getPort();
        infoServer=new HttpServer("secondary",infoBindAddress,tmpInfoPort,tmpInfoPort == 0,conf,new AccessControlList(conf.get(DFS_ADMIN," ")));
        if (UserGroupInformation.isSecurityEnabled()) {
          System.setProperty("https.cipherSuites",Krb5AndCertsSslSocketConnector.KRB5_CIPHER_SUITES.get(0));
          InetSocketAddress secInfoSocAddr=NetUtils.createSocketAddr(infoBindAddress + ":" + conf.get("dfs.secondary.https.port",infoBindAddress + ":" + 0));
          imagePort=secInfoSocAddr.getPort();
          infoServer.addSslListener(secInfoSocAddr,conf,false,true);
        }
        infoServer.setAttribute("secondary.name.node",SecondaryNameNode.this);
        infoServer.setAttribute("name.system.image",checkpointImage);
        infoServer.setAttribute(JspHelper.CURRENT_CONF,conf);
        infoServer.addInternalServlet("getimage","/getimage",GetImageServlet.class,true);
        infoServer.start();
        return infoServer;
      }
    }
);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
  LOG.info("Web server init done");
  infoPort=infoServer.getPort();
  if (!UserGroupInformation.isSecurityEnabled())   imagePort=infoPort;
  conf.set(DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,infoBindAddress + ":" + infoPort);
  LOG.info("Secondary Web-server up at: " + infoBindAddress + ":"+ infoPort);
  LOG.info("Secondary image servlet up at: " + infoBindAddress + ":"+ imagePort);
  LOG.warn("Checkpoint Period   :" + checkpointPeriod + " secs "+ "("+ checkpointPeriod / 60 + " min)");
  LOG.warn("Log Size Trigger    :" + checkpointSize + " bytes "+ "("+ checkpointSize / 1024 + " KB)");
}
