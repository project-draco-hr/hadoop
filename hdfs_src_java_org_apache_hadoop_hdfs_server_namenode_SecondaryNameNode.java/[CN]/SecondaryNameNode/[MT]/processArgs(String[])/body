{
  if (argv.length < 1) {
    printUsage("");
    return -1;
  }
  int exitCode=-1;
  int i=0;
  String cmd=argv[i++];
  if ("-geteditsize".equals(cmd)) {
    if (argv.length != 1) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-checkpoint".equals(cmd)) {
    if (argv.length != 1 && argv.length != 2) {
      printUsage(cmd);
      return exitCode;
    }
    if (argv.length == 2 && !"force".equals(argv[i])) {
      printUsage(cmd);
      return exitCode;
    }
  }
  exitCode=0;
  try {
    if ("-checkpoint".equals(cmd)) {
      long size=namenode.getEditLogSize();
      if (size >= checkpointSize || argv.length == 2 && "force".equals(argv[i])) {
        doCheckpoint();
      }
 else {
        System.err.println("EditLog size " + size + " bytes is "+ "smaller than configured checkpoint "+ "size "+ checkpointSize+ " bytes.");
        System.err.println("Skipping checkpoint.");
      }
    }
 else     if ("-geteditsize".equals(cmd)) {
      long size=namenode.getEditLogSize();
      System.out.println("EditLog size is " + size + " bytes");
    }
 else {
      exitCode=-1;
      LOG.error(cmd.substring(1) + ": Unknown command");
      printUsage("");
    }
  }
 catch (  RemoteException e) {
    exitCode=-1;
    try {
      String[] content;
      content=e.getLocalizedMessage().split("\n");
      LOG.error(cmd.substring(1) + ": " + content[0]);
    }
 catch (    Exception ex) {
      LOG.error(cmd.substring(1) + ": " + ex.getLocalizedMessage());
    }
  }
catch (  IOException e) {
    exitCode=-1;
    LOG.error(cmd.substring(1) + ": " + e.getLocalizedMessage());
  }
 finally {
  }
  return exitCode;
}
