{
  long totalCapacity=0;
  long totalUsed=0;
  sortedQueue.clear();
  for (  DiskBalancerVolume volume : volumes) {
    if (!volume.isFailed() && !volume.isSkip()) {
      if (volume.computeEffectiveCapacity() < 0) {
        skipMisConfiguredVolume(volume);
        continue;
      }
      totalCapacity+=volume.computeEffectiveCapacity();
      totalUsed+=volume.getUsed();
    }
  }
  if (totalCapacity != 0) {
    this.idealUsed=truncateDecimals(totalUsed / (double)totalCapacity);
  }
  for (  DiskBalancerVolume volume : volumes) {
    if (!volume.isFailed() && !volume.isSkip()) {
      double dfsUsedRatio=truncateDecimals(volume.getUsed() / (double)volume.computeEffectiveCapacity());
      volume.setVolumeDataDensity(this.idealUsed - dfsUsedRatio);
      sortedQueue.add(volume);
    }
  }
}
