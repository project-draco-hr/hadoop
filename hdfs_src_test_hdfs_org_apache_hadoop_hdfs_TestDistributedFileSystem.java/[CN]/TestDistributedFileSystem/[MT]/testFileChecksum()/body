{
  ((Log4JLogger)HftpFileSystem.LOG).getLogger().setLevel(Level.ALL);
  final long seed=RAN.nextLong();
  System.out.println("seed=" + seed);
  RAN.setSeed(seed);
  final Configuration conf=getTestConfiguration();
  conf.set(DFSConfigKeys.DFS_DATANODE_HOST_NAME_KEY,"localhost");
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
  final FileSystem hdfs=cluster.getFileSystem();
  final String hftpuri="hftp://" + conf.get(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY);
  System.out.println("hftpuri=" + hftpuri);
  final FileSystem hftp=new Path(hftpuri).getFileSystem(conf);
  final String dir="/filechecksum";
  final int block_size=1024;
  final int buffer_size=conf.getInt("io.file.buffer.size",4096);
  conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,512);
  for (int n=0; n < 5; n++) {
    final byte[] data=new byte[RAN.nextInt(block_size / 2 - 1) + n * block_size + 1];
    RAN.nextBytes(data);
    System.out.println("data.length=" + data.length);
    final Path foo=new Path(dir,"foo" + n);
{
      final FSDataOutputStream out=hdfs.create(foo,false,buffer_size,(short)2,block_size);
      out.write(data);
      out.close();
    }
    final FileChecksum hdfsfoocs=hdfs.getFileChecksum(foo);
    System.out.println("hdfsfoocs=" + hdfsfoocs);
    final FileChecksum hftpfoocs=hftp.getFileChecksum(foo);
    System.out.println("hftpfoocs=" + hftpfoocs);
    final Path qualified=new Path(hftpuri + dir,"foo" + n);
    final FileChecksum qfoocs=hftp.getFileChecksum(qualified);
    System.out.println("qfoocs=" + qfoocs);
    final Path bar=new Path(dir,"bar" + n);
{
      final FSDataOutputStream out=hdfs.create(bar,false,buffer_size,(short)2,block_size);
      out.write(data);
      out.close();
    }
{
      final FileChecksum barcs=hdfs.getFileChecksum(bar);
      final int barhashcode=barcs.hashCode();
      assertEquals(hdfsfoocs.hashCode(),barhashcode);
      assertEquals(hdfsfoocs,barcs);
      assertEquals(hftpfoocs.hashCode(),barhashcode);
      assertEquals(hftpfoocs,barcs);
      assertEquals(qfoocs.hashCode(),barhashcode);
      assertEquals(qfoocs,barcs);
    }
{
      hdfs.setPermission(new Path(dir),new FsPermission((short)0));
      try {
        final String username=UserGroupInformation.getCurrentUser().getShortUserName() + "1";
        final HftpFileSystem hftp2=cluster.getHftpFileSystemAs(username,conf,0,"somegroup");
        hftp2.getFileChecksum(qualified);
        fail();
      }
 catch (      IOException ioe) {
        FileSystem.LOG.info("GOOD: getting an exception",ioe);
      }
    }
  }
  cluster.shutdown();
}
