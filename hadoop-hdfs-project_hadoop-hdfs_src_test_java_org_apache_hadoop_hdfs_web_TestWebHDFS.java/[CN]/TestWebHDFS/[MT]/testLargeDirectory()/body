{
  final Configuration conf=WebHdfsTestUtil.createConf();
  final int listLimit=2;
  conf.setInt(DFSConfigKeys.DFS_LIST_LIMIT,listLimit);
  FsPermission.setUMask(conf,new FsPermission((short)0077));
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  try {
    cluster.waitActive();
    WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME).setPermission(new Path("/"),new FsPermission(FsAction.ALL,FsAction.ALL,FsAction.ALL));
    UserGroupInformation.setLoginUser(UserGroupInformation.createUserForTesting("not-superuser",new String[]{"not-supergroup"}));
    UserGroupInformation.createUserForTesting("me",new String[]{"my-group"}).doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws IOException, URISyntaxException {
        FileSystem fs=WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME);
        Path d=new Path("/my-dir");
        Assert.assertTrue(fs.mkdirs(d));
        RemoteIterator<FileStatus> it=fs.listStatusIterator(d);
        assertFalse(it.hasNext());
        Path p=new Path(d,"file-" + 0);
        Assert.assertTrue(fs.createNewFile(p));
        it=fs.listStatusIterator(d);
        assertTrue(it.hasNext());
        it.next();
        assertFalse(it.hasNext());
        for (int i=1; i < listLimit * 3; i++) {
          p=new Path(d,"file-" + i);
          Assert.assertTrue(fs.createNewFile(p));
        }
        FileStatus[] statuses=fs.listStatus(d);
        Assert.assertEquals(listLimit * 3,statuses.length);
        GenericTestUtils.setLogLevel(WebHdfsFileSystem.LOG,Level.TRACE);
        GenericTestUtils.setLogLevel(NamenodeWebHdfsMethods.LOG,Level.TRACE);
        it=fs.listStatusIterator(d);
        int count=0;
        while (it.hasNext()) {
          FileStatus stat=it.next();
          assertEquals("FileStatuses not equal",statuses[count],stat);
          count++;
        }
        assertEquals("Different # of statuses!",statuses.length,count);
        it=fs.listStatusIterator(d);
        for (int i=0; i < statuses.length; i++) {
          FileStatus stat=it.next();
          assertEquals("FileStatuses not equal",statuses[i],stat);
        }
        assertFalse("No more items expected",it.hasNext());
        try {
          it.next();
          fail("Iterator should error if out of elements.");
        }
 catch (        IllegalStateException e) {
        }
        return null;
      }
    }
);
  }
  finally {
    cluster.shutdown();
  }
}
