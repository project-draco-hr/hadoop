{
  MiniDFSCluster cluster=null;
  final Configuration conf=WebHdfsTestUtil.createConf();
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
    cluster.waitActive();
    final DistributedFileSystem dfs=cluster.getFileSystem();
    final WebHdfsFileSystem webHdfs=WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME);
    final Path bar=new Path("/bar");
    dfs.mkdirs(bar);
    webHdfs.allowSnapshot(bar);
    webHdfs.createSnapshot(bar,"s1");
    final Path s1path=SnapshotTestHelper.getSnapshotRoot(bar,"s1");
    Assert.assertTrue(webHdfs.exists(s1path));
    SnapshottableDirectoryStatus[] snapshottableDirs=dfs.getSnapshottableDirListing();
    assertEquals(1,snapshottableDirs.length);
    assertEquals(bar,snapshottableDirs[0].getFullPath());
    dfs.deleteSnapshot(bar,"s1");
    dfs.disallowSnapshot(bar);
    snapshottableDirs=dfs.getSnapshottableDirListing();
    assertNull(snapshottableDirs);
    dfs.allowSnapshot(bar);
    snapshottableDirs=dfs.getSnapshottableDirListing();
    assertEquals(1,snapshottableDirs.length);
    assertEquals(bar,snapshottableDirs[0].getFullPath());
    webHdfs.disallowSnapshot(bar);
    snapshottableDirs=dfs.getSnapshottableDirListing();
    assertNull(snapshottableDirs);
    try {
      webHdfs.createSnapshot(bar);
      fail("Cannot create snapshot on a non-snapshottable directory");
    }
 catch (    Exception e) {
      GenericTestUtils.assertExceptionContains("Directory is not a snapshottable directory",e);
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
