{
  final Configuration conf=WebHdfsTestUtil.createConf();
  final Path dir=new Path("/testWebHdfsReadRetries");
  conf.setBoolean(HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY,true);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_MIN_DATANODES_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,1024 * 512);
  conf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY,1);
  final short numDatanodes=1;
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build();
  try {
    cluster.waitActive();
    final FileSystem fs=WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME);
    final long length=1L << 20;
    final Path file1=new Path(dir,"testFile");
    DFSTestUtil.createFile(fs,file1,length,numDatanodes,20120406L);
    final FileStatus s1=fs.getFileStatus(file1);
    assertEquals("Write failed for file " + file1,length,s1.getLen());
    FSDataInputStream in=fs.open(file1);
    assertTrue("Input stream is not an instance of class WebHdfsInputStream",in.getWrappedStream() instanceof WebHdfsInputStream);
    int count=0;
    for (; in.read() != -1; count++)     ;
    assertEquals("Read failed for file " + file1,s1.getLen(),count);
    assertEquals("Sghould not be able to read beyond end of file",in.read(),-1);
    in.close();
    try {
      in.read();
      fail("Read after close should have failed");
    }
 catch (    IOException ioe) {
    }
    WebHdfsFileSystem wfs=(WebHdfsFileSystem)fs;
    String msg="ReadRetries: Test Access Control Exception";
    testReadRetryExceptionHelper(wfs,file1,new AccessControlException(msg),msg,false,1);
    msg="ReadRetries: Test SocketTimeoutException";
    testReadRetryExceptionHelper(wfs,file1,new SocketTimeoutException(msg),msg,true,5);
    msg="ReadRetries: Test SocketException";
    testReadRetryExceptionHelper(wfs,file1,new SocketException(msg),msg,true,5);
    msg="ReadRetries: Test EOFException";
    testReadRetryExceptionHelper(wfs,file1,new EOFException(msg),msg,true,5);
    msg="ReadRetries: Test Generic IO Exception";
    testReadRetryExceptionHelper(wfs,file1,new IOException(msg),msg,true,5);
    WebHdfsFileSystem spyfs=spy(wfs);
    when(spyfs.replaceExpiredDelegationToken()).thenReturn(true,true,false);
    msg="ReadRetries: Test Invalid Token Exception";
    testReadRetryExceptionHelper(spyfs,file1,new InvalidToken(msg),msg,false,3);
  }
  finally {
    cluster.shutdown();
  }
}
