{
  MiniDFSCluster cluster=null;
  final Configuration conf=WebHdfsTestUtil.createConf();
  final int OFFSET=42;
  final int LENGTH=512;
  final String PATH="/foo";
  byte[] CONTENTS=new byte[1024];
  RANDOM.nextBytes(CONTENTS);
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    final WebHdfsFileSystem fs=WebHdfsTestUtil.getWebHdfsFileSystem(conf,WebHdfsConstants.WEBHDFS_SCHEME);
    try (OutputStream os=fs.create(new Path(PATH))){
      os.write(CONTENTS);
    }
     InetSocketAddress addr=cluster.getNameNode().getHttpAddress();
    URL url=new URL("http",addr.getHostString(),addr.getPort(),WebHdfsFileSystem.PATH_PREFIX + PATH + "?op=OPEN"+ Param.toSortedString("&",new OffsetParam((long)OFFSET),new LengthParam((long)LENGTH)));
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setInstanceFollowRedirects(true);
    Assert.assertEquals(LENGTH,conn.getContentLength());
    byte[] subContents=new byte[LENGTH];
    byte[] realContents=new byte[LENGTH];
    System.arraycopy(CONTENTS,OFFSET,subContents,0,LENGTH);
    IOUtils.readFully(conn.getInputStream(),realContents);
    Assert.assertArrayEquals(subContents,realContents);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
