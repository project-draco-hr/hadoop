{
  org.apache.hadoop.hdfs.protocolR23Compatible.ClientDatanodeWireProtocol mockDN=mock(org.apache.hadoop.hdfs.protocolR23Compatible.ClientDatanodeWireProtocol.class);
  when(mockDN.getProtocolVersion(anyString(),anyLong())).thenReturn(org.apache.hadoop.hdfs.protocolR23Compatible.ClientDatanodeWireProtocol.versionID);
  doReturn(ProtocolSignature.getProtocolSignature(mockDN,org.apache.hadoop.hdfs.protocolR23Compatible.ClientDatanodeWireProtocol.class.getName(),org.apache.hadoop.hdfs.protocolR23Compatible.ClientDatanodeWireProtocol.versionID,0)).when(mockDN).getProtocolSignature(anyString(),anyLong(),anyInt());
  BlockTokenIdentifier id=sm.createIdentifier();
  id.readFields(new DataInputStream(new ByteArrayInputStream(token.getIdentifier())));
  doAnswer(new getLengthAnswer(sm,id)).when(mockDN).getReplicaVisibleLength(any(org.apache.hadoop.hdfs.protocolR23Compatible.ExtendedBlockWritable.class));
  return RPC.getServer(org.apache.hadoop.hdfs.protocolR23Compatible.ClientDatanodeWireProtocol.class,mockDN,ADDRESS,0,5,true,conf,sm);
}
