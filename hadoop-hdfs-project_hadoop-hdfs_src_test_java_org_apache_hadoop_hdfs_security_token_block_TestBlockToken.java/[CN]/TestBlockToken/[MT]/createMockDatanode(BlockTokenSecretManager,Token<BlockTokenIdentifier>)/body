{
  ClientDatanodeProtocolPB mockDN=mock(ClientDatanodeProtocolPB.class);
  when(mockDN.getProtocolVersion(anyString(),anyLong())).thenReturn(RPC.getProtocolVersion(ClientDatanodeProtocolPB.class));
  doReturn(ProtocolSignature.getProtocolSignature(mockDN,ClientDatanodeProtocolPB.class.getName(),RPC.getProtocolVersion(ClientDatanodeProtocolPB.class),0)).when(mockDN).getProtocolSignature(anyString(),anyLong(),anyInt());
  BlockTokenIdentifier id=sm.createIdentifier();
  id.readFields(new DataInputStream(new ByteArrayInputStream(token.getIdentifier())));
  doAnswer(new GetLengthAnswer(sm,id)).when(mockDN).getReplicaVisibleLength(any(RpcController.class),any(GetReplicaVisibleLengthRequestProto.class));
  RPC.setProtocolEngine(conf,ClientDatanodeProtocolPB.class,ProtobufRpcEngine.class);
  BlockingService service=ClientDatanodeProtocolService.newReflectiveBlockingService(mockDN);
  return RPC.getServer(ClientDatanodeProtocolPB.class,service,ADDRESS,0,5,true,conf,sm);
}
