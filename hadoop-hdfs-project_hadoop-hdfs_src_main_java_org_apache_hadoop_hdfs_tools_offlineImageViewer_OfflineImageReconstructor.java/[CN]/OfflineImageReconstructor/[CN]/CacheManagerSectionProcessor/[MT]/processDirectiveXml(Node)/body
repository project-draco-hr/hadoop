{
  CacheDirectiveInfoProto.Builder bld=CacheDirectiveInfoProto.newBuilder();
  Long id=directive.removeChildLong(SECTION_ID);
  if (id == null) {
    throw new IOException("<directive> found without <id>");
  }
  bld.setId(id);
  String path=directive.removeChildStr(SECTION_PATH);
  if (path == null) {
    throw new IOException("<directive> found without <path>");
  }
  bld.setPath(path);
  Integer replication=directive.removeChildInt(SECTION_REPLICATION);
  if (replication == null) {
    throw new IOException("<directive> found without <replication>");
  }
  bld.setReplication(replication);
  String pool=directive.removeChildStr(CACHE_MANAGER_SECTION_POOL);
  if (path == null) {
    throw new IOException("<directive> found without <pool>");
  }
  bld.setPool(pool);
  Node expiration=directive.removeChild(CACHE_MANAGER_SECTION_EXPIRATION);
  if (expiration != null) {
    CacheDirectiveInfoExpirationProto.Builder ebld=CacheDirectiveInfoExpirationProto.newBuilder();
    Long millis=expiration.removeChildLong(CACHE_MANAGER_SECTION_MILLIS);
    if (millis == null) {
      throw new IOException("cache directive <expiration> found " + "without <millis>");
    }
    ebld.setMillis(millis);
    if (expiration.removeChildBool(CACHE_MANAGER_SECTION_RELATIVE)) {
      ebld.setIsRelative(true);
    }
 else {
      ebld.setIsRelative(false);
    }
    bld.setExpiration(ebld);
  }
  directive.verifyNoRemainingKeys("directive");
  bld.build().writeDelimitedTo(out);
}
