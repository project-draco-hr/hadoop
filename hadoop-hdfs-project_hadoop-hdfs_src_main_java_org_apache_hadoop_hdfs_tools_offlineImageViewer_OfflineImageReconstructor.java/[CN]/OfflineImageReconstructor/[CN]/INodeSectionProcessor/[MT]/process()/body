{
  Node headerNode=new Node();
  loadNodeChildren(headerNode,"INodeSection fields","inode");
  INodeSection.Builder b=INodeSection.newBuilder();
  Long lval=headerNode.removeChildLong("lastInodeId");
  if (lval != null) {
    b.setLastInodeId(lval);
  }
  Integer expectedNumINodes=headerNode.removeChildInt("numInodes");
  if (expectedNumINodes == null) {
    throw new IOException("Failed to find <numInodes> in INodeSection.");
  }
  b.setNumInodes(expectedNumINodes);
  INodeSection s=b.build();
  s.writeDelimitedTo(out);
  headerNode.verifyNoRemainingKeys("INodeSection");
  int actualNumINodes=0;
  while (actualNumINodes < expectedNumINodes) {
    try {
      expectTag("inode",false);
    }
 catch (    IOException e) {
      throw new IOException("Only found " + actualNumINodes + " <inode> entries out of "+ expectedNumINodes,e);
    }
    actualNumINodes++;
    Node inode=new Node();
    loadNodeChildren(inode,"INode fields");
    INodeSection.INode.Builder inodeBld=processINodeXml(inode);
    inodeBld.build().writeDelimitedTo(out);
  }
  expectTagEnd("INodeSection");
  recordSectionLength(SectionName.INODE.name());
}
