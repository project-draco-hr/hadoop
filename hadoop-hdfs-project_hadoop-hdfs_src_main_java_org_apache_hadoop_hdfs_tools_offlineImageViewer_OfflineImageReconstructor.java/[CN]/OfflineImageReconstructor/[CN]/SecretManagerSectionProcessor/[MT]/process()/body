{
  Node secretHeader=new Node();
  loadNodeChildren(secretHeader,"SecretManager fields","delegationKey","token");
  SecretManagerSection.Builder b=SecretManagerSection.newBuilder();
  Integer currentId=secretHeader.removeChildInt(SECRET_MANAGER_SECTION_CURRENT_ID);
  if (currentId == null) {
    throw new IOException("SecretManager section had no <currentId>");
  }
  b.setCurrentId(currentId);
  Integer tokenSequenceNumber=secretHeader.removeChildInt(SECRET_MANAGER_SECTION_TOKEN_SEQUENCE_NUMBER);
  if (tokenSequenceNumber == null) {
    throw new IOException("SecretManager section had no " + "<tokenSequenceNumber>");
  }
  b.setTokenSequenceNumber(tokenSequenceNumber);
  Integer expectedNumKeys=secretHeader.removeChildInt(SECRET_MANAGER_SECTION_NUM_DELEGATION_KEYS);
  if (expectedNumKeys == null) {
    throw new IOException("SecretManager section had no " + "<numDelegationKeys>");
  }
  b.setNumKeys(expectedNumKeys);
  Integer expectedNumTokens=secretHeader.removeChildInt(SECRET_MANAGER_SECTION_NUM_TOKENS);
  if (expectedNumTokens == null) {
    throw new IOException("SecretManager section had no " + "<numTokens>");
  }
  b.setNumTokens(expectedNumTokens);
  secretHeader.verifyNoRemainingKeys("SecretManager");
  b.build().writeDelimitedTo(out);
  for (int actualNumKeys=0; actualNumKeys < expectedNumKeys; actualNumKeys++) {
    try {
      expectTag(SECRET_MANAGER_SECTION_DELEGATION_KEY,false);
    }
 catch (    IOException e) {
      throw new IOException("Only read " + actualNumKeys + " delegation keys out of "+ expectedNumKeys,e);
    }
    SecretManagerSection.DelegationKey.Builder dbld=SecretManagerSection.DelegationKey.newBuilder();
    Node dkey=new Node();
    loadNodeChildren(dkey,"Delegation key fields");
    Integer id=dkey.removeChildInt(SECTION_ID);
    if (id == null) {
      throw new IOException("Delegation key stanza <delegationKey> " + "lacked an <id> field.");
    }
    dbld.setId(id);
    String expiry=dkey.removeChildStr(SECRET_MANAGER_SECTION_EXPIRY);
    if (expiry == null) {
      throw new IOException("Delegation key stanza <delegationKey> " + "lacked an <expiry> field.");
    }
    dbld.setExpiryDate(dateStrToLong(expiry));
    String keyHex=dkey.removeChildStr(SECRET_MANAGER_SECTION_KEY);
    if (keyHex == null) {
      throw new IOException("Delegation key stanza <delegationKey> " + "lacked a <key> field.");
    }
    byte[] key=new HexBinaryAdapter().unmarshal(keyHex);
    dkey.verifyNoRemainingKeys(SECRET_MANAGER_SECTION_DELEGATION_KEY);
    dbld.setKey(ByteString.copyFrom(key));
    dbld.build().writeDelimitedTo(out);
  }
  for (int actualNumTokens=0; actualNumTokens < expectedNumTokens; actualNumTokens++) {
    try {
      expectTag(SECRET_MANAGER_SECTION_TOKEN,false);
    }
 catch (    IOException e) {
      throw new IOException("Only read " + actualNumTokens + " tokens out of "+ expectedNumTokens,e);
    }
    SecretManagerSection.PersistToken.Builder tbld=SecretManagerSection.PersistToken.newBuilder();
    Node token=new Node();
    loadNodeChildren(token,"PersistToken key fields");
    Integer version=token.removeChildInt(SECRET_MANAGER_SECTION_VERSION);
    if (version != null) {
      tbld.setVersion(version);
    }
    String owner=token.removeChildStr(SECRET_MANAGER_SECTION_OWNER);
    if (owner != null) {
      tbld.setOwner(owner);
    }
    String renewer=token.removeChildStr(SECRET_MANAGER_SECTION_RENEWER);
    if (renewer != null) {
      tbld.setRenewer(renewer);
    }
    String realUser=token.removeChildStr(SECRET_MANAGER_SECTION_REAL_USER);
    if (realUser != null) {
      tbld.setRealUser(realUser);
    }
    String issueDateStr=token.removeChildStr(SECRET_MANAGER_SECTION_ISSUE_DATE);
    if (issueDateStr != null) {
      tbld.setIssueDate(dateStrToLong(issueDateStr));
    }
    String maxDateStr=token.removeChildStr(SECRET_MANAGER_SECTION_MAX_DATE);
    if (maxDateStr != null) {
      tbld.setMaxDate(dateStrToLong(maxDateStr));
    }
    Integer seqNo=token.removeChildInt(SECRET_MANAGER_SECTION_SEQUENCE_NUMBER);
    if (seqNo != null) {
      tbld.setSequenceNumber(seqNo);
    }
    Integer masterKeyId=token.removeChildInt(SECRET_MANAGER_SECTION_MASTER_KEY_ID);
    if (masterKeyId != null) {
      tbld.setMasterKeyId(masterKeyId);
    }
    String expiryDateStr=token.removeChildStr(SECRET_MANAGER_SECTION_EXPIRY_DATE);
    if (expiryDateStr != null) {
      tbld.setExpiryDate(dateStrToLong(expiryDateStr));
    }
    token.verifyNoRemainingKeys("token");
    tbld.build().writeDelimitedTo(out);
  }
  expectTagEnd(SECRET_MANAGER_SECTION_NAME);
  recordSectionLength(SectionName.SECRET_MANAGER.name());
}
