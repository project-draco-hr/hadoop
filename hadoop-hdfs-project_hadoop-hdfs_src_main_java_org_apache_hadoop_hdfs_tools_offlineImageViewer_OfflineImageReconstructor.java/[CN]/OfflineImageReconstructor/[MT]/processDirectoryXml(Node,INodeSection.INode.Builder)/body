{
  inodeBld.setType(INodeSection.INode.Type.DIRECTORY);
  INodeSection.INodeDirectory.Builder bld=INodeSection.INodeDirectory.newBuilder();
  Long lval=node.removeChildLong(INODE_SECTION_MTIME);
  if (lval != null) {
    bld.setModificationTime(lval);
  }
  lval=node.removeChildLong(INODE_SECTION_NS_QUOTA);
  if (lval != null) {
    bld.setNsQuota(lval);
  }
  lval=node.removeChildLong(INODE_SECTION_DS_QUOTA);
  if (lval != null) {
    bld.setDsQuota(lval);
  }
  String perm=node.removeChildStr(INODE_SECTION_PERMISSION);
  if (perm != null) {
    bld.setPermission(permissionXmlToU64(perm));
  }
  Node acls=node.removeChild(INODE_SECTION_ACLS);
  if (acls != null) {
    bld.setAcl(aclXmlToProto(acls));
  }
  Node xattrs=node.removeChild(INODE_SECTION_XATTRS);
  if (xattrs != null) {
    bld.setXAttrs(xattrsXmlToProto(xattrs));
  }
  INodeSection.QuotaByStorageTypeFeatureProto.Builder qf=INodeSection.QuotaByStorageTypeFeatureProto.newBuilder();
  while (true) {
    Node typeQuota=node.removeChild(INODE_SECTION_TYPE_QUOTA);
    if (typeQuota == null) {
      break;
    }
    INodeSection.QuotaByStorageTypeEntryProto.Builder qbld=INodeSection.QuotaByStorageTypeEntryProto.newBuilder();
    String type=typeQuota.removeChildStr(INODE_SECTION_TYPE);
    if (type == null) {
      throw new IOException("<typeQuota> was missing <type>");
    }
    HdfsProtos.StorageTypeProto storageType=HdfsProtos.StorageTypeProto.valueOf(type);
    if (storageType == null) {
      throw new IOException("<typeQuota> had unknown <type> " + type);
    }
    qbld.setStorageType(storageType);
    Long quota=typeQuota.removeChildLong(INODE_SECTION_QUOTA);
    if (quota == null) {
      throw new IOException("<typeQuota> was missing <quota>");
    }
    qbld.setQuota(quota);
    qf.addQuotas(qbld);
  }
  bld.setTypeQuotas(qf);
  inodeBld.setDirectory(bld);
}
