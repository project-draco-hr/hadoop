{
  Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,1000L);
  conf.set(DFSConfigKeys.DFS_NAMENODE_RECONSTRUCTION_PENDING_TIMEOUT_SEC_KEY,Integer.toString(2));
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  FileSystem fs=cluster.getFileSystem();
  final FSNamesystem namesystem=cluster.getNamesystem();
  try {
    final Path fileName=new Path("/foo1");
    DFSTestUtil.createFile(fs,fileName,2,(short)3,0L);
    DFSTestUtil.waitReplication(fs,fileName,(short)3);
    ExtendedBlock block=DFSTestUtil.getFirstBlock(fs,fileName);
    corruptBlock(cluster,fs,fileName,0,block);
    corruptBlock(cluster,fs,fileName,1,block);
    corruptBlock(cluster,fs,fileName,2,block);
    try {
      Thread.sleep(3000);
    }
 catch (    InterruptedException ignored) {
    }
    assertEquals(0,countReplicas(namesystem,block).liveReplicas());
    assertEquals(3,countReplicas(namesystem,block).corruptReplicas());
    namesystem.setReplication(fileName.toString(),(short)1);
    try {
      Thread.sleep(3000);
    }
 catch (    InterruptedException ignored) {
    }
    assertEquals(0,countReplicas(namesystem,block).liveReplicas());
    assertEquals(3,countReplicas(namesystem,block).corruptReplicas());
  }
  finally {
    cluster.shutdown();
  }
}
