{
  Configuration conf=new Configuration();
  conf.set(HdfsClientConfigKeys.REPLICA_ACCESSOR_BUILDER_CLASSES_KEY,SyntheticReplicaAccessorBuilder.class.getName());
  conf.setLong(HdfsClientConfigKeys.DFS_BLOCK_SIZE_KEY,1024);
  conf.setLong(DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY,0);
  String uuid=UUID.randomUUID().toString();
  conf.set(SYNTHETIC_BLOCK_READER_TEST_UUID_KEY,uuid);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  final int TEST_LENGTH=2047;
  DistributedFileSystem dfs=cluster.getFileSystem();
  try {
    DFSTestUtil.createFile(dfs,new Path("/a"),TEST_LENGTH,(short)1,SEED);
    HdfsDataInputStream stream=(HdfsDataInputStream)dfs.open(new Path("/a"));
    byte buf[]=new byte[TEST_LENGTH];
    IOUtils.readFully(stream,buf,0,TEST_LENGTH);
    byte expected[]=DFSTestUtil.calculateFileContentsFromSeed(SEED,TEST_LENGTH);
    ReadStatistics stats=stream.getReadStatistics();
    Assert.assertEquals(1024,stats.getTotalShortCircuitBytesRead());
    Assert.assertEquals(2047,stats.getTotalLocalBytesRead());
    Assert.assertEquals(2047,stats.getTotalBytesRead());
    Assert.assertArrayEquals(expected,buf);
    stream.close();
    ExtendedBlock block=DFSTestUtil.getFirstBlock(dfs,new Path("/a"));
    Assert.assertNotNull(block);
    LinkedList<SyntheticReplicaAccessor> accessorList=accessors.get(uuid);
    Assert.assertNotNull(accessorList);
    Assert.assertEquals(2,accessorList.size());
    SyntheticReplicaAccessor accessor=accessorList.get(0);
    Assert.assertTrue(accessor.builder.allowShortCircuit);
    Assert.assertEquals(block.getBlockPoolId(),accessor.builder.blockPoolId);
    Assert.assertEquals(block.getBlockId(),accessor.builder.blockId);
    Assert.assertEquals(dfs.getClient().clientName,accessor.builder.clientName);
    Assert.assertEquals("/a",accessor.builder.fileName);
    Assert.assertEquals(block.getGenerationStamp(),accessor.getGenerationStamp());
    Assert.assertTrue(accessor.builder.verifyChecksum);
    Assert.assertEquals(1024L,accessor.builder.visibleLength);
    Assert.assertEquals(1024L,accessor.totalRead);
    Assert.assertEquals("",accessor.getError());
    Assert.assertEquals(1,accessor.numCloses);
    byte[] tempBuf=new byte[5];
    Assert.assertEquals(-1,accessor.read(TEST_LENGTH,tempBuf,0,0));
    Assert.assertEquals(-1,accessor.read(TEST_LENGTH,tempBuf,0,tempBuf.length));
    accessors.remove(uuid);
  }
  finally {
    dfs.close();
    cluster.shutdown();
  }
}
