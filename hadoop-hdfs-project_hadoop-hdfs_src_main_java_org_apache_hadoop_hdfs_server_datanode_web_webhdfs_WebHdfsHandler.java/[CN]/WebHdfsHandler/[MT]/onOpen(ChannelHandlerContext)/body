{
  final String nnId=params.namenodeId();
  final int bufferSize=params.bufferSize();
  final long offset=params.offset();
  final long length=params.length();
  DefaultHttpResponse response=new DefaultHttpResponse(HTTP_1_1,OK);
  HttpHeaders headers=response.headers();
  headers.set(ACCESS_CONTROL_ALLOW_METHODS,GET);
  headers.set(ACCESS_CONTROL_ALLOW_ORIGIN,"*");
  headers.set(CONTENT_TYPE,APPLICATION_OCTET_STREAM);
  headers.set(CONNECTION,CLOSE);
  final DFSClient dfsclient=newDfsClient(nnId,conf);
  HdfsDataInputStream in=dfsclient.createWrappedInputStream(dfsclient.open(path,bufferSize,true));
  in.seek(offset);
  long contentLength=in.getVisibleLength() - offset;
  if (length >= 0) {
    contentLength=Math.min(contentLength,length);
  }
  final InputStream data;
  if (contentLength >= 0) {
    headers.set(CONTENT_LENGTH,contentLength);
    data=new LimitInputStream(in,contentLength);
  }
 else {
    data=in;
  }
  ctx.write(response);
  ctx.writeAndFlush(new ChunkedStream(data){
    @Override public void close() throws Exception {
      super.close();
      dfsclient.close();
    }
  }
).addListener(ChannelFutureListener.CLOSE);
}
