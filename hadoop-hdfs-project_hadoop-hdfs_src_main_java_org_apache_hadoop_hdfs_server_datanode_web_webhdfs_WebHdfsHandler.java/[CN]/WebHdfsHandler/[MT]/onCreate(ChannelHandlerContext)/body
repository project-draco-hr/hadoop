{
  writeContinueHeader(ctx);
  final String nnId=params.namenodeId();
  final int bufferSize=params.bufferSize();
  final short replication=params.replication();
  final long blockSize=params.blockSize();
  final FsPermission permission=params.permission();
  EnumSet<CreateFlag> flags=params.overwrite() ? EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE) : EnumSet.of(CreateFlag.CREATE);
  final DFSClient dfsClient=newDfsClient(nnId,confForCreate);
  OutputStream out=dfsClient.createWrappedOutputStream(dfsClient.create(path,permission,flags,replication,blockSize,null,bufferSize,null),null);
  DefaultHttpResponse resp=new DefaultHttpResponse(HTTP_1_1,CREATED);
  final URI uri=new URI(HDFS_URI_SCHEME,nnId,path,null,null);
  resp.headers().set(LOCATION,uri.toString());
  resp.headers().set(CONTENT_LENGTH,0);
  ctx.pipeline().replace(this,HdfsWriter.class.getSimpleName(),new HdfsWriter(dfsClient,out,resp));
}
