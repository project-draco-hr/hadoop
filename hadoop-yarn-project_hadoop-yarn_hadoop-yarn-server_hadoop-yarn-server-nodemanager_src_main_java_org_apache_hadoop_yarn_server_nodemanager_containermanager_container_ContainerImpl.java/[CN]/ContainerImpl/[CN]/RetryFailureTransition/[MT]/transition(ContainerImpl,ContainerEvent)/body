{
  ContainerExitEvent exitEvent=(ContainerExitEvent)event;
  container.exitCode=exitEvent.getExitCode();
  if (exitEvent.getDiagnosticInfo() != null) {
    if (container.containerRetryContext.getRetryPolicy() != ContainerRetryPolicy.NEVER_RETRY) {
      int n=container.containerRetryContext.getMaxRetries() - container.remainingRetryAttempts;
      container.addDiagnostics("Diagnostic message from attempt " + n + " : ","\n");
    }
    container.addDiagnostics(exitEvent.getDiagnosticInfo(),"\n");
  }
  if (container.shouldRetry(container.exitCode)) {
    if (container.remainingRetryAttempts > 0) {
      container.remainingRetryAttempts--;
      try {
        container.stateStore.storeContainerRemainingRetryAttempts(container.getContainerId(),container.remainingRetryAttempts);
      }
 catch (      IOException e) {
        LOG.warn("Unable to update remainingRetryAttempts in state store for " + container.getContainerId(),e);
      }
    }
    doRelaunch(container,container.remainingRetryAttempts,container.containerRetryContext.getRetryInterval());
    return ContainerState.RELAUNCHING;
  }
 else   if (container.canRollback()) {
    container.addDiagnostics("Container Re-init Auto Rolled-Back.");
    LOG.info("Rolling back Container reInitialization for [" + container.getContainerId() + "] !!");
    container.reInitContext=container.reInitContext.createContextForRollback();
    new KilledForReInitializationTransition().transition(container,event);
    return ContainerState.LOCALIZED;
  }
 else {
    new ExitedWithFailureTransition(true).transition(container,event);
    return ContainerState.EXITED_WITH_FAILURE;
  }
}
