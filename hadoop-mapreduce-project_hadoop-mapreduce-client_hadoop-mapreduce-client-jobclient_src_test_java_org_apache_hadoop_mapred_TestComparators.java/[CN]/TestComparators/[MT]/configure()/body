{
  Path testdir=new Path(TEST_DIR.getAbsolutePath());
  Path inDir=new Path(testdir,"in");
  Path outDir=new Path(testdir,"out");
  FileSystem fs=FileSystem.get(conf);
  fs.delete(testdir,true);
  conf.setInputFormat(SequenceFileInputFormat.class);
  FileInputFormat.setInputPaths(conf,inDir);
  FileOutputFormat.setOutputPath(conf,outDir);
  conf.setOutputKeyClass(IntWritable.class);
  conf.setOutputValueClass(Text.class);
  conf.setMapOutputValueClass(IntWritable.class);
  conf.setNumMapTasks(2);
  conf.set(MRConfig.FRAMEWORK_NAME,MRConfig.LOCAL_FRAMEWORK_NAME);
  conf.setOutputFormat(SequenceFileOutputFormat.class);
  if (!fs.mkdirs(testdir)) {
    throw new IOException("Mkdirs failed to create " + testdir.toString());
  }
  if (!fs.mkdirs(inDir)) {
    throw new IOException("Mkdirs failed to create " + inDir.toString());
  }
  Path inFile=new Path(inDir,"part0");
  SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);
  writer.append(new IntWritable(11),new IntWritable(999));
  writer.append(new IntWritable(23),new IntWritable(456));
  writer.append(new IntWritable(10),new IntWritable(780));
  writer.close();
  inFile=new Path(inDir,"part1");
  writer=SequenceFile.createWriter(fs,conf,inFile,IntWritable.class,IntWritable.class);
  writer.append(new IntWritable(45),new IntWritable(100));
  writer.append(new IntWritable(18),new IntWritable(200));
  writer.append(new IntWritable(27),new IntWritable(300));
  writer.close();
  jc=new JobClient(conf);
}
