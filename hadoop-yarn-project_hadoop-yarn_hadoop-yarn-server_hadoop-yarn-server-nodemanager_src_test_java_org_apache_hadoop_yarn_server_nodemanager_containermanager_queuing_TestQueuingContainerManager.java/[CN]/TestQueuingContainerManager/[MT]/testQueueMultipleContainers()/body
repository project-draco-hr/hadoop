{
  shouldDeleteWait=true;
  containerManager.start();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  List<StartContainerRequest> list=new ArrayList<>();
  list.add(StartContainerRequest.newInstance(containerLaunchContext,createContainerToken(createContainerId(0),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(3072,1),context.getContainerTokenSecretManager(),null,ExecutionType.GUARANTEED)));
  list.add(StartContainerRequest.newInstance(containerLaunchContext,createContainerToken(createContainerId(1),DUMMY_RM_IDENTIFIER,context.getNodeId(),user,BuilderUtils.newResource(3072,1),context.getContainerTokenSecretManager(),null,ExecutionType.OPPORTUNISTIC)));
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  Thread.sleep(5000);
  List<ContainerId> statList=new ArrayList<ContainerId>();
  for (int i=0; i < 2; i++) {
    statList.add(createContainerId(i));
  }
  GetContainerStatusesRequest statRequest=GetContainerStatusesRequest.newInstance(statList);
  List<ContainerStatus> containerStatuses=containerManager.getContainerStatuses(statRequest).getContainerStatuses();
  for (  ContainerStatus status : containerStatuses) {
    Assert.assertEquals(org.apache.hadoop.yarn.api.records.ContainerState.QUEUED,status.getState());
  }
  Assert.assertEquals(2,containerManager.getContext().getQueuingContext().getQueuedContainers().size());
  Assert.assertEquals(1,((QueuingContainerManagerImpl)containerManager).getNumQueuedGuaranteedContainers());
  Assert.assertEquals(1,((QueuingContainerManagerImpl)containerManager).getNumQueuedOpportunisticContainers());
}
