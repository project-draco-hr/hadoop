{
  return new QueuingContainerManagerImpl(context,exec,delSrvc,nodeStatusUpdater,metrics,dirsHandler){
    @Override public void serviceInit(    Configuration conf) throws Exception {
      conf.set(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,MockResourceCalculatorPlugin.class.getCanonicalName());
      conf.set(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE,MockResourceCalculatorProcessTree.class.getCanonicalName());
      super.serviceInit(conf);
    }
    @Override public void setBlockNewContainerRequests(    boolean blockNewContainerRequests){
    }
    @Override protected UserGroupInformation getRemoteUgi() throws YarnException {
      ApplicationId appId=ApplicationId.newInstance(0,0);
      ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,1);
      UserGroupInformation ugi=UserGroupInformation.createRemoteUser(appAttemptId.toString());
      ugi.addTokenIdentifier(new NMTokenIdentifier(appAttemptId,context.getNodeId(),user,context.getNMTokenSecretManager().getCurrentKey().getKeyId()));
      return ugi;
    }
    @Override protected void authorizeGetAndStopContainerRequest(    ContainerId containerId,    Container container,    boolean stopRequest,    NMTokenIdentifier identifier) throws YarnException {
      if (container == null || container.getUser().equals("Fail")) {
        throw new YarnException("Reject this container");
      }
    }
    @Override protected ContainersMonitor createContainersMonitor(    ContainerExecutor exec){
      return new ContainersMonitorImpl(exec,dispatcher,this.context){
        @Override public boolean hasResourcesAvailable(        ContainersMonitorImpl.ProcessTreeInfo pti){
          return hasResources.decide(this.context,pti.getContainerId());
        }
      }
;
    }
  }
;
}
