{
  if (!shouldRun()) {
    return;
  }
  List<String> localDirs=dirsHandler.getLocalDirs();
  List<String> logDirs=dirsHandler.getLogDirs();
  for (  String localDir : localDirs) {
    Path userDir=new Path(localDir,ContainerLocalizer.USERCACHE);
    files.mkdir(userDir,new FsPermission("777"),false);
    Path fileDir=new Path(localDir,ContainerLocalizer.FILECACHE);
    files.mkdir(fileDir,new FsPermission("777"),false);
  }
  String locId="container_01_01";
  Path nmPrivateContainerTokensPath=dirsHandler.getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT,locId));
  files.create(nmPrivateContainerTokensPath,EnumSet.of(CREATE,OVERWRITE));
  Configuration config=new YarnConfiguration(conf);
  InetSocketAddress nmAddr=config.getSocketAddr(YarnConfiguration.NM_BIND_HOST,YarnConfiguration.NM_LOCALIZER_ADDRESS,YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);
  String appId="application_01_01";
  exec=new LinuxContainerExecutor(){
    @Override public void buildMainArgs(    List<String> command,    String user,    String appId,    String locId,    InetSocketAddress nmAddr,    List<String> localDirs){
      MockContainerLocalizer.buildMainArgs(command,user,appId,locId,nmAddr,localDirs);
    }
  }
;
  exec.setConf(conf);
  exec.startLocalizer(nmPrivateContainerTokensPath,nmAddr,appSubmitter,appId,locId,dirsHandler);
  String locId2="container_01_02";
  Path nmPrivateContainerTokensPath2=dirsHandler.getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT,locId2));
  files.create(nmPrivateContainerTokensPath2,EnumSet.of(CREATE,OVERWRITE));
  exec.startLocalizer(nmPrivateContainerTokensPath2,nmAddr,appSubmitter,appId,locId2,dirsHandler);
}
