{
synchronized (commonContainerSpecLock) {
    if (commonContainerSpec == null) {
      commonContainerSpec=createCommonContainerLaunchContext(applicationACLs,conf,jobToken,oldJobId,credentials);
    }
  }
  boolean userClassesTakesPrecedence=conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST,false);
  Map<String,String> env=commonContainerSpec.getEnvironment();
  Map<String,String> myEnv=new HashMap<String,String>(env.size());
  myEnv.putAll(env);
  if (userClassesTakesPrecedence) {
    myEnv.put(Environment.CLASSPATH_PREPEND_DISTCACHE.name(),"true");
  }
  MapReduceChildJVM.setVMEnv(myEnv,remoteTask);
  List<String> commands=MapReduceChildJVM.getVMCommand(taskAttemptListener.getAddress(),remoteTask,jvmID);
  Map<String,ByteBuffer> myServiceData=new HashMap<String,ByteBuffer>();
  for (  Entry<String,ByteBuffer> entry : commonContainerSpec.getServiceData().entrySet()) {
    myServiceData.put(entry.getKey(),entry.getValue().duplicate());
  }
  ContainerLaunchContext container=ContainerLaunchContext.newInstance(commonContainerSpec.getLocalResources(),myEnv,commands,myServiceData,commonContainerSpec.getTokens().duplicate(),applicationACLs);
  return container;
}
