{
  if (null == taskAttempt.container || null == taskAttempt.container.getResource()) {
    return;
  }
  long duration=(taskAttempt.getFinishTime() - taskAttempt.getLaunchTime());
  Resource allocatedResource=taskAttempt.container.getResource();
  int mbAllocated=(int)allocatedResource.getMemorySize();
  int vcoresAllocated=allocatedResource.getVirtualCores();
  int minSlotMemSize=taskAttempt.conf.getInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);
  int simSlotsAllocated=minSlotMemSize == 0 ? 0 : (int)Math.ceil((float)mbAllocated / minSlotMemSize);
  TaskType taskType=taskAttempt.getID().getTaskId().getTaskType();
  if (taskType == TaskType.MAP) {
    jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS,simSlotsAllocated * duration);
    jce.addCounterUpdate(JobCounter.MB_MILLIS_MAPS,duration * mbAllocated);
    jce.addCounterUpdate(JobCounter.VCORES_MILLIS_MAPS,duration * vcoresAllocated);
    jce.addCounterUpdate(JobCounter.MILLIS_MAPS,duration);
  }
 else {
    jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES,simSlotsAllocated * duration);
    jce.addCounterUpdate(JobCounter.MB_MILLIS_REDUCES,duration * mbAllocated);
    jce.addCounterUpdate(JobCounter.VCORES_MILLIS_REDUCES,duration * vcoresAllocated);
    jce.addCounterUpdate(JobCounter.MILLIS_REDUCES,duration);
  }
}
