{
  ContainerLaunchContext container=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  try {
    FileSystem remoteFS=FileSystem.get(conf);
    if (conf.get(MRJobConfig.JAR) != null) {
      Path remoteJobJar=(new Path(remoteTask.getConf().get(MRJobConfig.JAR))).makeQualified(remoteFS.getUri(),remoteFS.getWorkingDirectory());
      container.setLocalResource(MRConstants.JOB_JAR,createLocalResource(remoteFS,recordFactory,remoteJobJar,LocalResourceType.FILE,LocalResourceVisibility.APPLICATION));
      LOG.info("The job-jar file on the remote FS is " + remoteJobJar.toUri().toASCIIString());
    }
 else {
      LOG.info("Job jar is not present. " + "Not adding any jar to the list of resources.");
    }
    Path path=MRApps.getStagingAreaDir(conf,UserGroupInformation.getCurrentUser().getShortUserName());
    Path remoteJobSubmitDir=new Path(path,oldJobId.toString());
    Path remoteJobConfPath=new Path(remoteJobSubmitDir,MRConstants.JOB_CONF_FILE);
    container.setLocalResource(MRConstants.JOB_CONF_FILE,createLocalResource(remoteFS,recordFactory,remoteJobConfPath,LocalResourceType.FILE,LocalResourceVisibility.APPLICATION));
    LOG.info("The job-conf file on the remote FS is " + remoteJobConfPath.toUri().toASCIIString());
    setupDistributedCache(remoteFS,conf,container);
    Credentials taskCredentials=new Credentials();
    if (UserGroupInformation.isSecurityEnabled()) {
      for (      Token<? extends TokenIdentifier> token : fsTokens) {
        LOG.info("Putting fs-token for NM use for launching container : " + token.toString());
        taskCredentials.addToken(token.getService(),token);
      }
    }
    TokenCache.setJobToken(jobToken,taskCredentials);
    DataOutputBuffer containerTokens_dob=new DataOutputBuffer();
    LOG.info("Size of containertokens_dob is " + taskCredentials.numberOfTokens());
    taskCredentials.writeTokenStorageToStream(containerTokens_dob);
    container.setContainerTokens(ByteBuffer.wrap(containerTokens_dob.getData(),0,containerTokens_dob.getLength()));
    LOG.info("Putting shuffle token in serviceData");
    DataOutputBuffer jobToken_dob=new DataOutputBuffer();
    jobToken.write(jobToken_dob);
    container.setServiceData(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID,ByteBuffer.wrap(jobToken_dob.getData(),0,jobToken_dob.getLength()));
    MRApps.addToClassPath(container.getAllEnv(),getInitialClasspath());
  }
 catch (  IOException e) {
    throw new YarnException(e);
  }
  container.setContainerId(containerID);
  container.setUser(conf.get(MRJobConfig.USER_NAME));
  File workDir=new File("$PWD");
  String containerLogDir=new File(ApplicationConstants.LOG_DIR_EXPANSION_VAR).toString();
  String childTmpDir=new File(workDir,"tmp").toString();
  String javaHome="${JAVA_HOME}";
  String nmLdLibraryPath="{LD_LIBRARY_PATH}";
  List<String> classPaths=new ArrayList<String>();
  String localizedApplicationTokensFile=new File(workDir,MRConstants.APPLICATION_TOKENS_FILE).toString();
  classPaths.add(MRConstants.JOB_JAR);
  classPaths.add(MRConstants.YARN_MAPREDUCE_APP_JAR_PATH);
  classPaths.add(workDir.toString());
  container.addAllCommands(MapReduceChildJVM.getVMCommand(taskAttemptListener.getAddress(),remoteTask,javaHome,workDir.toString(),containerLogDir,childTmpDir,jvmID));
  MapReduceChildJVM.setVMEnv(container.getAllEnv(),classPaths,workDir.toString(),containerLogDir,nmLdLibraryPath,remoteTask,localizedApplicationTokensFile);
  container.setContainerId(containerID);
  container.setUser(conf.get(MRJobConfig.USER_NAME));
  container.setResource(assignedCapability);
  return container;
}
