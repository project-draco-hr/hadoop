{
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  Map<String,String> environment=new HashMap<String,String>();
  Map<String,ByteBuffer> serviceData=new HashMap<String,ByteBuffer>();
  ByteBuffer taskCredentialsBuffer=ByteBuffer.wrap(new byte[]{});
  try {
    FileSystem remoteFS=FileSystem.get(conf);
    String jobJar=conf.get(MRJobConfig.JAR);
    if (jobJar != null) {
      final Path jobJarPath=new Path(jobJar);
      final FileSystem jobJarFs=FileSystem.get(jobJarPath.toUri(),conf);
      Path remoteJobJar=jobJarPath.makeQualified(jobJarFs.getUri(),jobJarFs.getWorkingDirectory());
      LocalResource rc=createLocalResource(jobJarFs,remoteJobJar,LocalResourceType.PATTERN,LocalResourceVisibility.APPLICATION);
      String pattern=conf.getPattern(JobContext.JAR_UNPACK_PATTERN,JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern();
      rc.setPattern(pattern);
      localResources.put(MRJobConfig.JOB_JAR,rc);
      LOG.info("The job-jar file on the remote FS is " + remoteJobJar.toUri().toASCIIString());
    }
 else {
      LOG.info("Job jar is not present. " + "Not adding any jar to the list of resources.");
    }
    Path path=MRApps.getStagingAreaDir(conf,UserGroupInformation.getCurrentUser().getShortUserName());
    Path remoteJobSubmitDir=new Path(path,oldJobId.toString());
    Path remoteJobConfPath=new Path(remoteJobSubmitDir,MRJobConfig.JOB_CONF_FILE);
    localResources.put(MRJobConfig.JOB_CONF_FILE,createLocalResource(remoteFS,remoteJobConfPath,LocalResourceType.FILE,LocalResourceVisibility.APPLICATION));
    LOG.info("The job-conf file on the remote FS is " + remoteJobConfPath.toUri().toASCIIString());
    MRApps.setupDistributedCache(conf,localResources);
    LOG.info("Adding #" + credentials.numberOfTokens() + " tokens and #"+ credentials.numberOfSecretKeys()+ " secret keys for NM use for launching container");
    Credentials taskCredentials=new Credentials(credentials);
    TokenCache.setJobToken(jobToken,taskCredentials);
    DataOutputBuffer containerTokens_dob=new DataOutputBuffer();
    LOG.info("Size of containertokens_dob is " + taskCredentials.numberOfTokens());
    taskCredentials.writeTokenStorageToStream(containerTokens_dob);
    taskCredentialsBuffer=ByteBuffer.wrap(containerTokens_dob.getData(),0,containerTokens_dob.getLength());
    LOG.info("Putting shuffle token in serviceData");
    byte[] shuffleSecret=TokenCache.getShuffleSecretKey(credentials);
    if (shuffleSecret == null) {
      LOG.warn("Cannot locate shuffle secret in credentials." + " Using job token as shuffle secret.");
      shuffleSecret=jobToken.getPassword();
    }
    Token<JobTokenIdentifier> shuffleToken=new Token<JobTokenIdentifier>(jobToken.getIdentifier(),shuffleSecret,jobToken.getKind(),jobToken.getService());
    serviceData.put(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID,ShuffleHandler.serializeServiceData(shuffleToken));
    Collection<String> shuffleProviders=conf.getStringCollection(MRJobConfig.MAPREDUCE_JOB_SHUFFLE_PROVIDER_SERVICES);
    if (!shuffleProviders.isEmpty()) {
      Collection<String> auxNames=conf.getStringCollection(YarnConfiguration.NM_AUX_SERVICES);
      for (      final String shuffleProvider : shuffleProviders) {
        if (shuffleProvider.equals(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID)) {
          continue;
        }
        if (auxNames.contains(shuffleProvider)) {
          LOG.info("Adding ShuffleProvider Service: " + shuffleProvider + " to serviceData");
          serviceData.put(shuffleProvider,ByteBuffer.allocate(0));
        }
 else {
          throw new YarnRuntimeException("ShuffleProvider Service: " + shuffleProvider + " was NOT found in the list of aux-services that are available in this NM."+ " You may need to specify this ShuffleProvider as an aux-service in your yarn-site.xml");
        }
      }
    }
    MRApps.addToEnvironment(environment,Environment.CLASSPATH.name(),getInitialClasspath(conf),conf);
    if (initialAppClasspath != null) {
      MRApps.addToEnvironment(environment,Environment.APP_CLASSPATH.name(),initialAppClasspath,conf);
    }
  }
 catch (  IOException e) {
    throw new YarnRuntimeException(e);
  }
  environment.put(Environment.SHELL.name(),conf.get(MRJobConfig.MAPRED_ADMIN_USER_SHELL,MRJobConfig.DEFAULT_SHELL));
  MRApps.addToEnvironment(environment,Environment.LD_LIBRARY_PATH.name(),MRApps.crossPlatformifyMREnv(conf,Environment.PWD),conf);
  MRApps.setEnvFromInputString(environment,conf.get(MRJobConfig.MAPRED_ADMIN_USER_ENV,MRJobConfig.DEFAULT_MAPRED_ADMIN_USER_ENV),conf);
  ContainerLaunchContext container=ContainerLaunchContext.newInstance(localResources,environment,null,serviceData,taskCredentialsBuffer,applicationACLs);
  return container;
}
