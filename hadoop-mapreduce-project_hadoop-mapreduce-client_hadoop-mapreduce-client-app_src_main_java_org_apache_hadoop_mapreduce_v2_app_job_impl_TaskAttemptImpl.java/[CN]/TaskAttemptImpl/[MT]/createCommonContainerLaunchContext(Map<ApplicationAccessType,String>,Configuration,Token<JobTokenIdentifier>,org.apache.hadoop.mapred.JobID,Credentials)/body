{
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  Map<String,String> environment=new HashMap<String,String>();
  Map<String,ByteBuffer> serviceData=new HashMap<String,ByteBuffer>();
  ByteBuffer taskCredentialsBuffer=ByteBuffer.wrap(new byte[]{});
  try {
    FileSystem remoteFS=FileSystem.get(conf);
    String jobJar=conf.get(MRJobConfig.JAR);
    if (jobJar != null) {
      Path remoteJobJar=(new Path(jobJar)).makeQualified(remoteFS.getUri(),remoteFS.getWorkingDirectory());
      localResources.put(MRJobConfig.JOB_JAR,createLocalResource(remoteFS,remoteJobJar,LocalResourceType.FILE,LocalResourceVisibility.APPLICATION));
      LOG.info("The job-jar file on the remote FS is " + remoteJobJar.toUri().toASCIIString());
    }
 else {
      LOG.info("Job jar is not present. " + "Not adding any jar to the list of resources.");
    }
    Path path=MRApps.getStagingAreaDir(conf,UserGroupInformation.getCurrentUser().getShortUserName());
    Path remoteJobSubmitDir=new Path(path,oldJobId.toString());
    Path remoteJobConfPath=new Path(remoteJobSubmitDir,MRJobConfig.JOB_CONF_FILE);
    localResources.put(MRJobConfig.JOB_CONF_FILE,createLocalResource(remoteFS,remoteJobConfPath,LocalResourceType.FILE,LocalResourceVisibility.APPLICATION));
    LOG.info("The job-conf file on the remote FS is " + remoteJobConfPath.toUri().toASCIIString());
    MRApps.setupDistributedCache(conf,localResources);
    Credentials taskCredentials=new Credentials();
    if (UserGroupInformation.isSecurityEnabled()) {
      LOG.info("Adding #" + credentials.numberOfTokens() + " tokens and #"+ credentials.numberOfSecretKeys()+ " secret keys for NM use for launching container");
      taskCredentials.addAll(credentials);
    }
    TokenCache.setJobToken(jobToken,taskCredentials);
    DataOutputBuffer containerTokens_dob=new DataOutputBuffer();
    LOG.info("Size of containertokens_dob is " + taskCredentials.numberOfTokens());
    taskCredentials.writeTokenStorageToStream(containerTokens_dob);
    taskCredentialsBuffer=ByteBuffer.wrap(containerTokens_dob.getData(),0,containerTokens_dob.getLength());
    LOG.info("Putting shuffle token in serviceData");
    serviceData.put(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID,ShuffleHandler.serializeServiceData(jobToken));
    Apps.addToEnvironment(environment,Environment.CLASSPATH.name(),getInitialClasspath(conf));
  }
 catch (  IOException e) {
    throw new YarnException(e);
  }
  environment.put(Environment.SHELL.name(),conf.get(MRJobConfig.MAPRED_ADMIN_USER_SHELL,MRJobConfig.DEFAULT_SHELL));
  Apps.addToEnvironment(environment,Environment.LD_LIBRARY_PATH.name(),Environment.PWD.$());
  Apps.setEnvFromInputString(environment,conf.get(MRJobConfig.MAPRED_ADMIN_USER_ENV,MRJobConfig.DEFAULT_MAPRED_ADMIN_USER_ENV));
  ContainerLaunchContext container=BuilderUtils.newContainerLaunchContext(null,conf.get(MRJobConfig.USER_NAME),null,localResources,environment,null,serviceData,taskCredentialsBuffer,applicationACLs);
  return container;
}
