{
  oldJobId=TypeConverter.fromYarn(taskId.getJobId());
  this.conf=conf;
  this.clock=clock;
  attemptId=recordFactory.newRecordInstance(TaskAttemptId.class);
  attemptId.setTaskId(taskId);
  attemptId.setId(i);
  this.taskAttemptListener=taskAttemptListener;
  this.appContext=appContext;
  reportedStatus=new TaskAttemptStatus();
  initTaskAttemptStatus(reportedStatus);
  ReadWriteLock readWriteLock=new ReentrantReadWriteLock();
  readLock=readWriteLock.readLock();
  writeLock=readWriteLock.writeLock();
  this.credentials=credentials;
  this.jobToken=jobToken;
  this.eventHandler=eventHandler;
  this.committer=committer;
  this.jobFile=jobFile;
  this.partition=partition;
  this.resourceCapability=recordFactory.newRecordInstance(Resource.class);
  this.resourceCapability.setMemory(getMemoryRequired(conf,taskId.getTaskType()));
  this.dataLocalHosts=dataLocalHosts;
  RackResolver.init(conf);
  stateMachine=stateMachineFactory.make(this);
}
