{
  taskAttempt.setFinishTime();
  if (event instanceof TaskAttemptKillEvent) {
    taskAttempt.addDiagnosticInfo(((TaskAttemptKillEvent)event).getMessage());
  }
  taskAttempt.eventHandler.handle(new ContainerAllocatorEvent(taskAttempt.attemptId,ContainerAllocator.EventType.CONTAINER_DEALLOCATE));
  if (withdrawsContainerRequest) {
    taskAttempt.eventHandler.handle(new SpeculatorEvent(taskAttempt.getID().getTaskId(),-1));
  }
switch (finalState) {
case FAILED:
    taskAttempt.eventHandler.handle(new TaskTAttemptEvent(taskAttempt.attemptId,TaskEventType.T_ATTEMPT_FAILED));
  break;
case KILLED:
taskAttempt.eventHandler.handle(new TaskTAttemptEvent(taskAttempt.attemptId,TaskEventType.T_ATTEMPT_KILLED));
break;
default :
LOG.error("Task final state is not FAILED or KILLED: " + finalState);
}
if (taskAttempt.getLaunchTime() != 0) {
TaskAttemptUnsuccessfulCompletionEvent tauce=createTaskAttemptUnsuccessfulCompletionEvent(taskAttempt,finalState);
if (finalState == TaskAttemptStateInternal.FAILED) {
taskAttempt.eventHandler.handle(createJobCounterUpdateEventTAFailed(taskAttempt,false));
}
 else if (finalState == TaskAttemptStateInternal.KILLED) {
taskAttempt.eventHandler.handle(createJobCounterUpdateEventTAKilled(taskAttempt,false));
}
taskAttempt.eventHandler.handle(new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(),tauce));
}
 else {
LOG.debug("Not generating HistoryFinish event since start event not " + "generated for taskAttempt: " + taskAttempt.getID());
}
}
