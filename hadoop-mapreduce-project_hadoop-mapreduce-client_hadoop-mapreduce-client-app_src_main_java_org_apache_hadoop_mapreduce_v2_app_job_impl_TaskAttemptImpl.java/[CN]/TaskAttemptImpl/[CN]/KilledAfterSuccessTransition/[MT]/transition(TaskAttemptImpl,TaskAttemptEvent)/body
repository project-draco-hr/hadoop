{
  if (taskAttempt.getID().getTaskId().getTaskType() == TaskType.REDUCE) {
    LOG.info("Ignoring killed event for successful reduce task attempt" + taskAttempt.getID().toString());
    return TaskAttemptStateInternal.SUCCEEDED;
  }
  if (event instanceof TaskAttemptKillEvent) {
    TaskAttemptKillEvent msgEvent=(TaskAttemptKillEvent)event;
    taskAttempt.addDiagnosticInfo(msgEvent.getMessage());
  }
  assert(taskAttempt.getFinishTime() != 0);
  assert(taskAttempt.getLaunchTime() != 0);
  taskAttempt.eventHandler.handle(createJobCounterUpdateEventTAKilled(taskAttempt,true));
  TaskAttemptUnsuccessfulCompletionEvent tauce=createTaskAttemptUnsuccessfulCompletionEvent(taskAttempt,TaskAttemptStateInternal.KILLED);
  taskAttempt.eventHandler.handle(new JobHistoryEvent(taskAttempt.attemptId.getTaskId().getJobId(),tauce));
  boolean rescheduleNextTaskAttempt=false;
  if (event instanceof TaskAttemptKillEvent) {
    rescheduleNextTaskAttempt=((TaskAttemptKillEvent)event).getRescheduleAttempt();
  }
  taskAttempt.eventHandler.handle(new TaskTAttemptKilledEvent(taskAttempt.attemptId,rescheduleNextTaskAttempt));
  return TaskAttemptStateInternal.KILLED;
}
