{
  HistoryFileManager historyManager=mock(HistoryFileManager.class);
  jobHistory=spy(new JobHistory());
  doReturn(historyManager).when(jobHistory).createHistoryFileManager();
  Configuration conf=new Configuration();
  conf.setInt(JHAdminConfig.MR_HISTORY_LOADED_TASKS_CACHE_SIZE,50);
  jobHistory.init(conf);
  jobHistory.start();
  CachedHistoryStorage storage=spy((CachedHistoryStorage)jobHistory.getHistoryStorage());
  assertTrue(storage.getUseLoadedTasksCache());
  assertEquals(storage.getLoadedTasksCacheSize(),50);
  Job[] jobs=new Job[4];
  JobId[] jobIds=new JobId[4];
  for (int i=0; i < jobs.length; i++) {
    jobs[i]=mock(Job.class);
    jobIds[i]=mock(JobId.class);
    when(jobs[i].getID()).thenReturn(jobIds[i]);
    when(jobs[i].getTotalMaps()).thenReturn(10);
    when(jobs[i].getTotalReduces()).thenReturn(2);
  }
  HistoryFileInfo loadJobException=mock(HistoryFileInfo.class);
  when(loadJobException.loadJob()).thenThrow(new IOException("History file not found"));
  when(historyManager.getFileInfo(jobIds[0])).thenThrow(new IOException(""));
  when(historyManager.getFileInfo(jobIds[1])).thenReturn(null);
  when(historyManager.getFileInfo(jobIds[2])).thenReturn(loadJobException);
  try {
    storage.getFullJob(jobIds[0]);
    fail("Did not get expected YarnRuntimeException for getFileInfo() throwing IOException");
  }
 catch (  YarnRuntimeException e) {
  }
  Job job=storage.getFullJob(jobIds[1]);
  assertNull(job);
  try {
    storage.getFullJob(jobIds[2]);
    fail("Did not get expected YarnRuntimeException for fileInfo.loadJob() throwing IOException");
  }
 catch (  YarnRuntimeException e) {
  }
}
