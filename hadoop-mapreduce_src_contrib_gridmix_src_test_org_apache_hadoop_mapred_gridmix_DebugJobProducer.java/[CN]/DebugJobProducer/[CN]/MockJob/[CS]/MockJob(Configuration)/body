{
  final Random r=new Random();
  final long seed=r.nextLong();
  r.setSeed(seed);
  id=seq.getAndIncrement();
  name=String.format("MOCKJOB%06d",id);
  this.conf=conf;
  LOG.info(name + " (" + seed+ ")");
  submitTime=timestamp.addAndGet(TimeUnit.MILLISECONDS.convert(r.nextInt(10),TimeUnit.SECONDS));
  m_recsIn=new int[r.nextInt(MAX_MAP) + 1];
  m_bytesIn=new long[m_recsIn.length];
  m_recsOut=new int[m_recsIn.length];
  m_bytesOut=new long[m_recsIn.length];
  r_recsIn=new int[r.nextInt(MAX_RED) + 1];
  r_bytesIn=new long[r_recsIn.length];
  r_recsOut=new int[r_recsIn.length];
  r_bytesOut=new long[r_recsIn.length];
  final long map_recs=r.nextInt(VAR_REC) + MIN_REC;
  final long map_bytes=r.nextInt(VAR_BYTES) + MIN_BYTES;
  initDist(r,0.5,m_recsIn,m_bytesIn,map_recs,map_bytes);
  final long shuffle_recs=r.nextInt(VAR_REC) + MIN_REC;
  final long shuffle_bytes=r.nextInt(VAR_BYTES) + MIN_BYTES;
  initDist(r,0.5,m_recsOut,m_bytesOut,shuffle_recs,shuffle_bytes);
  initDist(r,0.8,r_recsIn,r_bytesIn,shuffle_recs,shuffle_bytes);
  final long red_recs=r.nextInt(VAR_REC) + MIN_REC;
  final long red_bytes=r.nextInt(VAR_BYTES) + MIN_BYTES;
  initDist(r,0.5,r_recsOut,r_bytesOut,red_recs,red_bytes);
  if (LOG.isDebugEnabled()) {
    int iMapBTotal=0, oMapBTotal=0, iRedBTotal=0, oRedBTotal=0;
    int iMapRTotal=0, oMapRTotal=0, iRedRTotal=0, oRedRTotal=0;
    for (int i=0; i < m_recsIn.length; ++i) {
      iMapRTotal+=m_recsIn[i];
      iMapBTotal+=m_bytesIn[i];
      oMapRTotal+=m_recsOut[i];
      oMapBTotal+=m_bytesOut[i];
    }
    for (int i=0; i < r_recsIn.length; ++i) {
      iRedRTotal+=r_recsIn[i];
      iRedBTotal+=r_bytesIn[i];
      oRedRTotal+=r_recsOut[i];
      oRedBTotal+=r_bytesOut[i];
    }
    LOG.debug(String.format("%s: M (%03d) %6d/%10d -> %6d/%10d" + " R (%03d) %6d/%10d -> %6d/%10d @%d",name,m_bytesIn.length,iMapRTotal,iMapBTotal,oMapRTotal,oMapBTotal,r_bytesIn.length,iRedRTotal,iRedBTotal,oRedRTotal,oRedBTotal,submitTime));
  }
}
