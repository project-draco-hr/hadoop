{
  String minmemoryresource=Integer.toString(fs.getMinimumResourceCapability().getMemory());
  String maxmemoryresource=Integer.toString(fs.getMaximumResourceCapability().getMemory());
  String qstate=(qInfo.getQueueState() == QueueState.RUNNING) ? "Running" : (qInfo.getQueueState() == QueueState.STOPPED) ? "Stopped" : "Unknown";
  int usedNodeMem=0;
  int availNodeMem=0;
  int totNodeMem=0;
  int nodeContainers=0;
  for (  RMNode ni : this.rmContext.getRMNodes().values()) {
    SchedulerNodeReport report=fs.getNodeReport(ni.getNodeID());
    usedNodeMem+=report.getUsedResource().getMemory();
    availNodeMem+=report.getAvailableResource().getMemory();
    totNodeMem+=ni.getTotalCapability().getMemory();
    nodeContainers+=fs.getNodeReport(ni.getNodeID()).getNumContainers();
  }
  info("\'" + qName + "\' Queue Status")._("Queue State:",qstate)._("Minimum Queue Memory Capacity:",minmemoryresource)._("Maximum Queue Memory Capacity:",maxmemoryresource)._("Number of Nodes:",Integer.toString(this.rmContext.getRMNodes().size()))._("Used Node Capacity:",Integer.toString(usedNodeMem))._("Available Node Capacity:",Integer.toString(availNodeMem))._("Total Node Capacity:",Integer.toString(totNodeMem))._("Number of Node Containers:",Integer.toString(nodeContainers));
  html._(InfoBlock.class);
}
