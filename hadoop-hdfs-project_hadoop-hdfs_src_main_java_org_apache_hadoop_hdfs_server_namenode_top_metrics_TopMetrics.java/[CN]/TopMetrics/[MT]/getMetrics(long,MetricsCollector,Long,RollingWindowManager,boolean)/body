{
  MetricsRecordBuilder rb=collector.addRecord(createTopMetricsRecordName(period)).setContext("namenode").tag(ProcessName,processName).tag(SessionId,sessionId);
  MetricValueMap snapshotMetrics=rollingWindowManager.snapshot(currTime);
  LOG.debug("calling snapshot, result size is: " + snapshotMetrics.size());
  for (  Map.Entry<String,Number> entry : snapshotMetrics.entrySet()) {
    String key=entry.getKey();
    Number value=entry.getValue();
    LOG.debug("checking an entry: key: {} value: {}",key,value);
    long min=period / 1000L / 60L;
    String desc="top user of name node in the past " + min + " minutes";
    if (value instanceof Integer) {
      rb.addGauge(info(key,desc),(Integer)value);
    }
 else     if (value instanceof Long) {
      rb.addGauge(info(key,desc),(Long)value);
    }
 else     if (value instanceof Float) {
      rb.addGauge(info(key,desc),(Float)value);
    }
 else     if (value instanceof Double) {
      rb.addGauge(info(key,desc),(Double)value);
    }
 else {
      LOG.warn("Unsupported metric type: " + value.getClass());
    }
  }
  LOG.debug("END iterating over metrics, result size is: {}",snapshotMetrics.size());
}
