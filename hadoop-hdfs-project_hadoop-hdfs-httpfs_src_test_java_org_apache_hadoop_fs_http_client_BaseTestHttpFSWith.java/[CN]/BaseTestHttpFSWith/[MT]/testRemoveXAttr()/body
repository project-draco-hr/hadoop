{
  if (!isLocalFS()) {
    FileSystem fs=FileSystem.get(getProxiedFSConf());
    fs.mkdirs(getProxiedFSTestDir());
    Path path=new Path(getProxiedFSTestDir(),"foo.txt");
    OutputStream os=fs.create(path);
    os.write(1);
    os.close();
    fs.close();
    final String name1="user.a1";
    final byte[] value1=new byte[]{0x31,0x32,0x33};
    final String name2="user.a2";
    final byte[] value2=new byte[]{0x41,0x42,0x43};
    final String name3="user.a3";
    final byte[] value3=null;
    final String name4="trusted.a1";
    final byte[] value4=new byte[]{0x31,0x32,0x33};
    final String name5="a1";
    fs=FileSystem.get(getProxiedFSConf());
    fs.setXAttr(path,name1,value1);
    fs.setXAttr(path,name2,value2);
    fs.setXAttr(path,name3,value3);
    fs.setXAttr(path,name4,value4);
    fs.close();
    fs=getHttpFSFileSystem();
    fs.removeXAttr(path,name1);
    fs.removeXAttr(path,name3);
    fs.removeXAttr(path,name4);
    try {
      fs.removeXAttr(path,name5);
      Assert.fail("Remove xAttr with incorrect name format should fail.");
    }
 catch (    IOException e) {
    }
catch (    IllegalArgumentException e) {
    }
    fs=FileSystem.get(getProxiedFSConf());
    Map<String,byte[]> xAttrs=fs.getXAttrs(path);
    fs.close();
    assertEquals(1,xAttrs.size());
    assertArrayEquals(value2,xAttrs.get(name2));
  }
}
