{
  TestType testType=null;
  int bufferSize=DEFAULT_BUFFER_SIZE;
  long nrBytes=1 * MEGA;
  int nrFiles=1;
  long skipSize=0;
  String resFileName=DEFAULT_RES_FILE_NAME;
  String compressionClass=null;
  boolean isSequential=false;
  String version=TestDFSIO.class.getSimpleName() + ".1.8";
  LOG.info(version);
  if (args.length == 0) {
    System.err.println("Missing arguments.");
    return -1;
  }
  for (int i=0; i < args.length; i++) {
    if (args[i].toLowerCase().startsWith("-read")) {
      testType=TestType.TEST_TYPE_READ;
    }
 else     if (args[i].equalsIgnoreCase("-write")) {
      testType=TestType.TEST_TYPE_WRITE;
    }
 else     if (args[i].equalsIgnoreCase("-append")) {
      testType=TestType.TEST_TYPE_APPEND;
    }
 else     if (args[i].equalsIgnoreCase("-random")) {
      if (testType != TestType.TEST_TYPE_READ)       return -1;
      testType=TestType.TEST_TYPE_READ_RANDOM;
    }
 else     if (args[i].equalsIgnoreCase("-backward")) {
      if (testType != TestType.TEST_TYPE_READ)       return -1;
      testType=TestType.TEST_TYPE_READ_BACKWARD;
    }
 else     if (args[i].equalsIgnoreCase("-skip")) {
      if (testType != TestType.TEST_TYPE_READ)       return -1;
      testType=TestType.TEST_TYPE_READ_SKIP;
    }
 else     if (args[i].equalsIgnoreCase("-truncate")) {
      testType=TestType.TEST_TYPE_TRUNCATE;
    }
 else     if (args[i].equalsIgnoreCase("-clean")) {
      testType=TestType.TEST_TYPE_CLEANUP;
    }
 else     if (args[i].toLowerCase().startsWith("-seq")) {
      isSequential=true;
    }
 else     if (args[i].toLowerCase().startsWith("-compression")) {
      compressionClass=args[++i];
    }
 else     if (args[i].equalsIgnoreCase("-nrfiles")) {
      nrFiles=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equalsIgnoreCase("-filesize") || args[i].equalsIgnoreCase("-size")) {
      nrBytes=parseSize(args[++i]);
    }
 else     if (args[i].equalsIgnoreCase("-skipsize")) {
      skipSize=parseSize(args[++i]);
    }
 else     if (args[i].equalsIgnoreCase("-buffersize")) {
      bufferSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equalsIgnoreCase("-resfile")) {
      resFileName=args[++i];
    }
 else {
      System.err.println("Illegal argument: " + args[i]);
      return -1;
    }
  }
  if (testType == null)   return -1;
  if (testType == TestType.TEST_TYPE_READ_BACKWARD)   skipSize=-bufferSize;
 else   if (testType == TestType.TEST_TYPE_READ_SKIP && skipSize == 0)   skipSize=bufferSize;
  LOG.info("nrFiles = " + nrFiles);
  LOG.info("nrBytes (MB) = " + toMB(nrBytes));
  LOG.info("bufferSize = " + bufferSize);
  if (skipSize > 0)   LOG.info("skipSize = " + skipSize);
  LOG.info("baseDir = " + getBaseDir(config));
  if (compressionClass != null) {
    config.set("test.io.compression.class",compressionClass);
    LOG.info("compressionClass = " + compressionClass);
  }
  config.setInt("test.io.file.buffer.size",bufferSize);
  config.setLong("test.io.skip.size",skipSize);
  FileSystem fs=FileSystem.get(config);
  if (isSequential) {
    long tStart=System.currentTimeMillis();
    sequentialTest(fs,testType,nrBytes,nrFiles);
    long execTime=System.currentTimeMillis() - tStart;
    String resultLine="Seq Test exec time sec: " + (float)execTime / 1000;
    LOG.info(resultLine);
    return 0;
  }
  if (testType == TestType.TEST_TYPE_CLEANUP) {
    cleanup(fs);
    return 0;
  }
  createControlFile(fs,nrBytes,nrFiles);
  long tStart=System.currentTimeMillis();
switch (testType) {
case TEST_TYPE_WRITE:
    writeTest(fs);
  break;
case TEST_TYPE_READ:
readTest(fs);
break;
case TEST_TYPE_APPEND:
appendTest(fs);
break;
case TEST_TYPE_READ_RANDOM:
case TEST_TYPE_READ_BACKWARD:
case TEST_TYPE_READ_SKIP:
randomReadTest(fs);
break;
case TEST_TYPE_TRUNCATE:
truncateTest(fs);
break;
default :
}
long execTime=System.currentTimeMillis() - tStart;
analyzeResult(fs,testType,execTime,resFileName);
return 0;
}
