{
  Path reduceFile=getReduceFilePath(testType);
  long tasks=0;
  long size=0;
  long time=0;
  float rate=0;
  float sqrate=0;
  DataInputStream in=null;
  BufferedReader lines=null;
  try {
    in=new DataInputStream(fs.open(reduceFile));
    lines=new BufferedReader(new InputStreamReader(in));
    String line;
    while ((line=lines.readLine()) != null) {
      StringTokenizer tokens=new StringTokenizer(line," \t\n\r\f%");
      String attr=tokens.nextToken();
      if (attr.endsWith(":tasks"))       tasks=Long.parseLong(tokens.nextToken());
 else       if (attr.endsWith(":size"))       size=Long.parseLong(tokens.nextToken());
 else       if (attr.endsWith(":time"))       time=Long.parseLong(tokens.nextToken());
 else       if (attr.endsWith(":rate"))       rate=Float.parseFloat(tokens.nextToken());
 else       if (attr.endsWith(":sqrate"))       sqrate=Float.parseFloat(tokens.nextToken());
    }
  }
  finally {
    if (in != null)     in.close();
    if (lines != null)     lines.close();
  }
  double med=rate / 1000 / tasks;
  double stdDev=Math.sqrt(Math.abs(sqrate / 1000 / tasks - med * med));
  String resultLines[]={"----- TestDFSIO ----- : " + testType,"           Date & time: " + new Date(System.currentTimeMillis()),"       Number of files: " + tasks,"Total MBytes processed: " + toMB(size),"     Throughput mb/sec: " + size * 1000.0 / (time * MEGA),"Average IO rate mb/sec: " + med," IO rate std deviation: " + stdDev,"    Test exec time sec: " + (float)execTime / 1000,""};
  PrintStream res=null;
  try {
    res=new PrintStream(new FileOutputStream(new File(resFileName),true));
    for (int i=0; i < resultLines.length; i++) {
      LOG.info(resultLines[i]);
      res.println(resultLines[i]);
    }
  }
  finally {
    if (res != null)     res.close();
  }
}
