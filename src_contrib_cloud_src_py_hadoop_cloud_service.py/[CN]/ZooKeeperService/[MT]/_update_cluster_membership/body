def _update_cluster_membership(self, public_key):
    time.sleep(30)
    ssh_options = '-o StrictHostKeyChecking=no'
    private_key = public_key[:(-4)]
    instances = self.cluster.get_instances_in_role(self.ZOOKEEPER_ROLE, 'running')
    config_file = 'zoo.cfg'
    with open(config_file, 'w') as f:
        f.write('# The number of milliseconds of each tick\ntickTime=2000\n# The number of ticks that the initial\n# synchronization phase can take\ninitLimit=10\n# The number of ticks that can pass between\n# sending a request and getting an acknowledgement\nsyncLimit=5\n# The directory where the snapshot is stored.\ndataDir=/var/log/zookeeper/txlog\n# The port at which the clients will connect\nclientPort=2181\n# The servers in the ensemble\n')
        counter = 1
        for i in instances:
            f.write(('server.%s=%s:2888:3888\n' % (counter, i.private_ip)))
            counter += 1
    myid_file = 'myid'
    counter = 1
    for i in instances:
        self._call(('scp -i %s %s %s root@%s:/etc/zookeeper/conf/zoo.cfg' % (private_key, ssh_options, config_file, i.public_ip)))
        with open(myid_file, 'w') as f:
            f.write((str(counter) + '\n'))
        self._call(('scp -i %s %s %s root@%s:/var/log/zookeeper/txlog/myid' % (private_key, ssh_options, myid_file, i.public_ip)))
        counter += 1
    os.remove(config_file)
    os.remove(myid_file)
    for i in instances:
        self._call(('ssh -i %s %s root@%s nohup /etc/rc.local &' % (private_key, ssh_options, i.public_ip)))
    hosts_string = ','.join([('%s:2181' % i.public_ip) for i in instances])
    print ('ZooKeeper cluster: %s' % hosts_string)
