{
  final Configuration conf=new Configuration();
  conf.set("fs.cachedfile.impl",FileSystem.getFileSystemClass("file",null).getName());
  UserGroupInformation ugiA=UserGroupInformation.createRemoteUser("foo");
  UserGroupInformation ugiB=UserGroupInformation.createRemoteUser("bar");
  FileSystem fsA=ugiA.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws Exception {
      return FileSystem.get(new URI("cachedfile://a"),conf);
    }
  }
);
  FileSystem fsA1=ugiA.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws Exception {
      return FileSystem.get(new URI("cachedfile://a"),conf);
    }
  }
);
  assertSame(fsA,fsA1);
  FileSystem fsB=ugiB.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws Exception {
      return FileSystem.get(new URI("cachedfile://a"),conf);
    }
  }
);
  assertNotSame(fsA,fsB);
  Token<T> t1=mock(Token.class);
  UserGroupInformation ugiA2=UserGroupInformation.createRemoteUser("foo");
  fsA=ugiA2.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws Exception {
      return FileSystem.get(new URI("cachedfile://a"),conf);
    }
  }
);
  assertNotSame(fsA,fsA1);
  ugiA.addToken(t1);
  fsA=ugiA.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws Exception {
      return FileSystem.get(new URI("cachedfile://a"),conf);
    }
  }
);
  assertSame(fsA,fsA1);
}
