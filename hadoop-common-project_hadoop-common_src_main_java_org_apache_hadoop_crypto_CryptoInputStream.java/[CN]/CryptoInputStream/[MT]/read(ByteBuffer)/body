{
  checkStream();
  if (isByteBufferReadable || isReadableByteChannel) {
    final int unread=outBuffer.remaining();
    if (unread > 0) {
      int toRead=buf.remaining();
      if (toRead <= unread) {
        final int limit=outBuffer.limit();
        outBuffer.limit(outBuffer.position() + toRead);
        buf.put(outBuffer);
        outBuffer.limit(limit);
        return toRead;
      }
 else {
        buf.put(outBuffer);
      }
    }
    final int pos=buf.position();
    final int n=isByteBufferReadable ? ((ByteBufferReadable)in).read(buf) : ((ReadableByteChannel)in).read(buf);
    if (n > 0) {
      streamOffset+=n;
      decrypt(buf,n,pos);
    }
    if (n >= 0) {
      return unread + n;
    }
 else {
      if (unread == 0) {
        return -1;
      }
 else {
        return unread;
      }
    }
  }
 else {
    int n=0;
    if (buf.hasArray()) {
      n=read(buf.array(),buf.position(),buf.remaining());
      if (n > 0) {
        buf.position(buf.position() + n);
      }
    }
 else {
      byte[] tmp=new byte[buf.remaining()];
      n=read(tmp);
      if (n > 0) {
        buf.put(tmp,0,n);
      }
    }
    return n;
  }
}
