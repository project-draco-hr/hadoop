{
  Options options=buildOptions();
  if (args.length == 0) {
    printUsage();
    return 0;
  }
  CommandLineParser parser=new PosixParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(options,args);
  }
 catch (  ParseException e) {
    System.out.println("Error parsing command-line options: ");
    printUsage();
    return -1;
  }
  if (cmd.hasOption("h")) {
    printUsage();
    return 0;
  }
  String inputFile=cmd.getOptionValue("i");
  String processor=cmd.getOptionValue("p","Web");
  String outputFile=cmd.getOptionValue("o","-");
  PrintWriter out=outputFile.equals("-") ? new PrintWriter(System.out) : new PrintWriter(new File(outputFile));
  Configuration conf=new Configuration();
  try {
    if (processor.equals("FileDistribution")) {
      long maxSize=Long.parseLong(cmd.getOptionValue("maxSize","0"));
      int step=Integer.parseInt(cmd.getOptionValue("step","0"));
      new FileDistributionCalculator(conf,maxSize,step,out).visit(new RandomAccessFile(inputFile,"r"));
    }
 else     if (processor.equals("XML")) {
      new PBImageXmlWriter(conf,out).visit(new RandomAccessFile(inputFile,"r"));
    }
 else     if (processor.equals("Web")) {
      String addr=cmd.getOptionValue("addr","localhost:5978");
      new WebImageViewer(NetUtils.createSocketAddr(addr)).initServerAndWait(inputFile);
    }
    return 0;
  }
 catch (  EOFException e) {
    System.err.println("Input file ended unexpectedly. Exiting");
  }
catch (  IOException e) {
    System.err.println("Encountered exception.  Exiting: " + e.getMessage());
  }
 finally {
    IOUtils.cleanup(null,out);
  }
  return -1;
}
