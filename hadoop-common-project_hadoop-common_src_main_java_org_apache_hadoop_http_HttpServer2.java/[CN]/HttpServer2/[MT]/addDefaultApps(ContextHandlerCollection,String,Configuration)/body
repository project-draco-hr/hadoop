{
  String logDir=System.getProperty("hadoop.log.dir");
  if (logDir != null) {
    Context logContext=new Context(parent,"/logs");
    logContext.setResourceBase(logDir);
    logContext.addServlet(AdminAuthorizedServlet.class,"/*");
    if (conf.getBoolean(CommonConfigurationKeys.HADOOP_JETTY_LOGS_SERVE_ALIASES,CommonConfigurationKeys.DEFAULT_HADOOP_JETTY_LOGS_SERVE_ALIASES)) {
      @SuppressWarnings("unchecked") Map<String,String> params=logContext.getInitParams();
      params.put("org.mortbay.jetty.servlet.Default.aliases","true");
    }
    logContext.setDisplayName("logs");
    SessionHandler handler=new SessionHandler();
    SessionManager sm=handler.getSessionManager();
    if (sm instanceof AbstractSessionManager) {
      AbstractSessionManager asm=(AbstractSessionManager)sm;
      asm.setHttpOnly(true);
      asm.setSecureCookies(true);
    }
    logContext.setSessionHandler(handler);
    setContextAttributes(logContext,conf);
    addNoCacheFilter(webAppContext);
    defaultContexts.put(logContext,true);
  }
  Context staticContext=new Context(parent,"/static");
  staticContext.setResourceBase(appDir + "/static");
  staticContext.addServlet(DefaultServlet.class,"/*");
  staticContext.setDisplayName("static");
  SessionHandler handler=new SessionHandler();
  SessionManager sm=handler.getSessionManager();
  if (sm instanceof AbstractSessionManager) {
    AbstractSessionManager asm=(AbstractSessionManager)sm;
    asm.setHttpOnly(true);
    asm.setSecureCookies(true);
  }
  staticContext.setSessionHandler(handler);
  setContextAttributes(staticContext,conf);
  defaultContexts.put(staticContext,true);
}
