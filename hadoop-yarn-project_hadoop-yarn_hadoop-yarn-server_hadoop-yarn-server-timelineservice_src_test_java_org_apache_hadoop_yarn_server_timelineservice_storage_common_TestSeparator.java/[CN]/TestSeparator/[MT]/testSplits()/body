{
  byte[] maxLongBytes=Bytes.toBytes(Long.MAX_VALUE);
  byte[] maxIntBytes=Bytes.toBytes(Integer.MAX_VALUE);
  for (  Separator separator : Separator.values()) {
    String str1="cl" + separator.getValue() + "us";
    String str2=separator.getValue() + "rst";
    byte[] sepByteArr=Bytes.toBytes(separator.getValue());
    byte[] longVal1Arr=Bytes.add(sepByteArr,Bytes.copy(maxLongBytes,sepByteArr.length,Bytes.SIZEOF_LONG - sepByteArr.length));
    byte[] intVal1Arr=Bytes.add(sepByteArr,Bytes.copy(maxIntBytes,sepByteArr.length,Bytes.SIZEOF_INT - sepByteArr.length));
    byte[] arr=separator.join(Bytes.toBytes(separator.encode(str1)),longVal1Arr,Bytes.toBytes(separator.encode(str2)),intVal1Arr);
    int[] sizes={Separator.VARIABLE_SIZE,Bytes.SIZEOF_LONG,Separator.VARIABLE_SIZE,Bytes.SIZEOF_INT};
    byte[][] splits=separator.split(arr,sizes);
    assertEquals(4,splits.length);
    assertEquals(str1,separator.decode(Bytes.toString(splits[0])));
    assertEquals(Bytes.toLong(longVal1Arr),Bytes.toLong(splits[1]));
    assertEquals(str2,separator.decode(Bytes.toString(splits[2])));
    assertEquals(Bytes.toInt(intVal1Arr),Bytes.toInt(splits[3]));
    longVal1Arr=Bytes.add(Bytes.copy(maxLongBytes,0,Bytes.SIZEOF_LONG - sepByteArr.length),sepByteArr);
    intVal1Arr=Bytes.add(Bytes.copy(maxIntBytes,0,Bytes.SIZEOF_INT - sepByteArr.length),sepByteArr);
    arr=separator.join(Bytes.toBytes(separator.encode(str1)),longVal1Arr,Bytes.toBytes(separator.encode(str2)),intVal1Arr);
    splits=separator.split(arr,sizes);
    assertEquals(4,splits.length);
    assertEquals(str1,separator.decode(Bytes.toString(splits[0])));
    assertEquals(Bytes.toLong(longVal1Arr),Bytes.toLong(splits[1]));
    assertEquals(str2,separator.decode(Bytes.toString(splits[2])));
    assertEquals(Bytes.toInt(intVal1Arr),Bytes.toInt(splits[3]));
    longVal1Arr=Bytes.add(sepByteArr,Bytes.copy(maxLongBytes,sepByteArr.length,4 - sepByteArr.length),sepByteArr);
    longVal1Arr=Bytes.add(longVal1Arr,Bytes.copy(maxLongBytes,4,3 - sepByteArr.length),sepByteArr);
    arr=separator.join(Bytes.toBytes(separator.encode(str1)),longVal1Arr,Bytes.toBytes(separator.encode(str2)),intVal1Arr);
    splits=separator.split(arr,sizes);
    assertEquals(4,splits.length);
    assertEquals(str1,separator.decode(Bytes.toString(splits[0])));
    assertEquals(Bytes.toLong(longVal1Arr),Bytes.toLong(splits[1]));
    assertEquals(str2,separator.decode(Bytes.toString(splits[2])));
    assertEquals(Bytes.toInt(intVal1Arr),Bytes.toInt(splits[3]));
    arr=separator.join(Bytes.toBytes(separator.encode(str1)),Bytes.toBytes(separator.encode(str2)),intVal1Arr,longVal1Arr);
    int[] sizes1={Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Bytes.SIZEOF_INT,Bytes.SIZEOF_LONG};
    splits=separator.split(arr,sizes1);
    assertEquals(4,splits.length);
    assertEquals(str1,separator.decode(Bytes.toString(splits[0])));
    assertEquals(str2,separator.decode(Bytes.toString(splits[1])));
    assertEquals(Bytes.toInt(intVal1Arr),Bytes.toInt(splits[2]));
    assertEquals(Bytes.toLong(longVal1Arr),Bytes.toLong(splits[3]));
    try {
      int[] sizes2={Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Bytes.SIZEOF_INT,7};
      splits=separator.split(arr,sizes2);
      fail("Exception should have been thrown.");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      int[] sizes2={Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,2,Bytes.SIZEOF_LONG};
      splits=separator.split(arr,sizes2);
      fail("Exception should have been thrown.");
    }
 catch (    IllegalArgumentException e) {
    }
  }
}
