{
  if (args.length != 4) {
    System.err.println("Usage: bbp " + " <startDigit> <nDigits> <nMaps> <workingDir>");
    ToolRunner.printGenericCommandUsage(System.err);
    return -1;
  }
  final int startDigit=Integer.parseInt(args[0]);
  final int nDigits=Integer.parseInt(args[1]);
  final int nMaps=Integer.parseInt(args[2]);
  final String workingDir=args[3];
  if (startDigit <= 0) {
    throw new IllegalArgumentException("startDigit = " + startDigit + " <= 0");
  }
 else   if (nDigits <= 0) {
    throw new IllegalArgumentException("nDigits = " + nDigits + " <= 0");
  }
 else   if (nDigits % BBP_HEX_DIGITS != 0) {
    throw new IllegalArgumentException("nDigits = " + nDigits + " is not a multiple of "+ BBP_HEX_DIGITS);
  }
 else   if (nDigits - 1L + startDigit > IMPLEMENTATION_LIMIT + BBP_HEX_DIGITS) {
    throw new UnsupportedOperationException("nDigits - 1 + startDigit = " + (nDigits - 1L + startDigit) + " > IMPLEMENTATION_LIMIT + BBP_HEX_DIGITS,"+ ", where IMPLEMENTATION_LIMIT="+ IMPLEMENTATION_LIMIT+ "and BBP_HEX_DIGITS="+ BBP_HEX_DIGITS);
  }
 else   if (nMaps <= 0) {
    throw new IllegalArgumentException("nMaps = " + nMaps + " <= 0");
  }
  compute(startDigit,nDigits,nMaps,workingDir,getConf(),System.out);
  return 0;
}
