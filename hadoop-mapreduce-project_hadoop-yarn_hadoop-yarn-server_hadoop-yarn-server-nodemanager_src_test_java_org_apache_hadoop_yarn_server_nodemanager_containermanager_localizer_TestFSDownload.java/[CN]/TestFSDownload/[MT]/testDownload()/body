{
  Configuration conf=new Configuration();
  FileContext files=FileContext.getLocalFSFileContext(conf);
  final Path basedir=files.makeQualified(new Path("target",TestFSDownload.class.getSimpleName()));
  files.mkdir(basedir,null,true);
  conf.setStrings(TestFSDownload.class.getName(),basedir.toString());
  Random rand=new Random();
  long sharedSeed=rand.nextLong();
  rand.setSeed(sharedSeed);
  System.out.println("SEED: " + sharedSeed);
  Map<LocalResource,Future<Path>> pending=new HashMap<LocalResource,Future<Path>>();
  ExecutorService exec=Executors.newSingleThreadExecutor();
  LocalDirAllocator dirs=new LocalDirAllocator(TestFSDownload.class.getName());
  int[] sizes=new int[10];
  for (int i=0; i < 10; ++i) {
    sizes[i]=rand.nextInt(512) + 512;
    LocalResource rsrc=createFile(files,new Path(basedir,"" + i),sizes[i],rand);
    FSDownload fsd=new FSDownload(files,UserGroupInformation.getCurrentUser(),conf,dirs,rsrc,new Random(sharedSeed));
    pending.put(rsrc,exec.submit(fsd));
  }
  try {
    for (    Map.Entry<LocalResource,Future<Path>> p : pending.entrySet()) {
      Path localized=p.getValue().get();
      assertEquals(sizes[Integer.valueOf(localized.getName())],p.getKey().getSize());
    }
  }
 catch (  ExecutionException e) {
    throw new IOException("Failed exec",e);
  }
 finally {
    exec.shutdown();
  }
}
