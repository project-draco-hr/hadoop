{
  super.setupQueueConfigs(clusterResource,capacity,absoluteCapacity,maximumCapacity,absoluteMaxCapacity,state,acls,labels,defaultLabelExpression,capacitieByLabel,maximumCapacitiesByLabel,revervationContinueLooking);
  CSQueueUtils.checkMaxCapacity(getQueueName(),capacity,maximumCapacity);
  float absCapacity=getParent().getAbsoluteCapacity() * capacity;
  CSQueueUtils.checkAbsoluteCapacity(getQueueName(),absCapacity,absoluteMaxCapacity);
  this.lastClusterResource=clusterResource;
  updateAbsoluteCapacityResource(clusterResource);
  updateHeadroomInfo(clusterResource,absoluteMaxCapacity);
  this.absoluteCapacity=absCapacity;
  this.userLimit=userLimit;
  this.userLimitFactor=userLimitFactor;
  this.maxApplications=maxApplications;
  this.maxAMResourcePerQueuePercent=maxAMResourcePerQueuePercent;
  this.maxApplicationsPerUser=maxApplicationsPerUser;
  if (!SchedulerUtils.checkQueueLabelExpression(this.accessibleLabels,this.defaultLabelExpression)) {
    throw new IOException("Invalid default label expression of " + " queue=" + getQueueName() + " doesn't have permission to access all labels "+ "in default label expression. labelExpression of resource request="+ (this.defaultLabelExpression == null ? "" : this.defaultLabelExpression)+ ". Queue labels="+ (getAccessibleNodeLabels() == null ? "" : StringUtils.join(getAccessibleNodeLabels().iterator(),',')));
  }
  this.nodeLocalityDelay=nodeLocalityDelay;
  StringBuilder aclsString=new StringBuilder();
  for (  Map.Entry<QueueACL,AccessControlList> e : acls.entrySet()) {
    aclsString.append(e.getKey() + ":" + e.getValue().getAclString());
  }
  StringBuilder labelStrBuilder=new StringBuilder();
  if (labels != null) {
    for (    String s : labels) {
      labelStrBuilder.append(s);
      labelStrBuilder.append(",");
    }
  }
  LOG.info("Initializing " + queueName + "\n"+ "capacity = "+ capacity+ " [= (float) configuredCapacity / 100 ]"+ "\n"+ "asboluteCapacity = "+ absoluteCapacity+ " [= parentAbsoluteCapacity * capacity ]"+ "\n"+ "maxCapacity = "+ maximumCapacity+ " [= configuredMaxCapacity ]"+ "\n"+ "absoluteMaxCapacity = "+ absoluteMaxCapacity+ " [= 1.0 maximumCapacity undefined, "+ "(parentAbsoluteMaxCapacity * maximumCapacity) / 100 otherwise ]"+ "\n"+ "userLimit = "+ userLimit+ " [= configuredUserLimit ]"+ "\n"+ "userLimitFactor = "+ userLimitFactor+ " [= configuredUserLimitFactor ]"+ "\n"+ "maxApplications = "+ maxApplications+ " [= configuredMaximumSystemApplicationsPerQueue or"+ " (int)(configuredMaximumSystemApplications * absoluteCapacity)]"+ "\n"+ "maxApplicationsPerUser = "+ maxApplicationsPerUser+ " [= (int)(maxApplications * (userLimit / 100.0f) * "+ "userLimitFactor) ]"+ "\n"+ "usedCapacity = "+ usedCapacity+ " [= usedResourcesMemory / "+ "(clusterResourceMemory * absoluteCapacity)]"+ "\n"+ "absoluteUsedCapacity = "+ absoluteUsedCapacity+ " [= usedResourcesMemory / clusterResourceMemory]"+ "\n"+ "maxAMResourcePerQueuePercent = "+ maxAMResourcePerQueuePercent+ " [= configuredMaximumAMResourcePercent ]"+ "\n"+ "minimumAllocationFactor = "+ minimumAllocationFactor+ " [= (float)(maximumAllocationMemory - minimumAllocationMemory) / "+ "maximumAllocationMemory ]"+ "\n"+ "numContainers = "+ numContainers+ " [= currentNumContainers ]"+ "\n"+ "state = "+ state+ " [= configuredState ]"+ "\n"+ "acls = "+ aclsString+ " [= configuredAcls ]"+ "\n"+ "nodeLocalityDelay = "+ nodeLocalityDelay+ "\n"+ "labels="+ labelStrBuilder.toString()+ "\n"+ "nodeLocalityDelay = "+ nodeLocalityDelay+ "\n"+ "reservationsContinueLooking = "+ reservationsContinueLooking+ "\n");
}
