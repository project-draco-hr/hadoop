{
  Map<String,Resource> userAmPartitionLimit=new HashMap<String,Resource>();
  for (  String nodePartition : getNodeLabelsForQueue()) {
    calculateAndGetAMResourceLimitPerPartition(nodePartition);
  }
  for (Iterator<FiCaSchedulerApp> fsApp=getPendingAppsOrderingPolicy().getAssignmentIterator(); fsApp.hasNext(); ) {
    FiCaSchedulerApp application=fsApp.next();
    ApplicationId applicationId=application.getApplicationId();
    String partitionName=application.getAppAMNodePartitionName();
    Resource amLimit=getAMResourceLimitPerPartition(partitionName);
    if (amLimit == null) {
      amLimit=calculateAndGetAMResourceLimitPerPartition(partitionName);
    }
    Resource amIfStarted=Resources.add(application.getAMResource(partitionName),queueUsage.getAMUsed(partitionName));
    if (LOG.isDebugEnabled()) {
      LOG.debug("application " + application.getId() + " AMResource "+ application.getAMResource(partitionName)+ " maxAMResourcePerQueuePercent "+ maxAMResourcePerQueuePercent+ " amLimit "+ amLimit+ " lastClusterResource "+ lastClusterResource+ " amIfStarted "+ amIfStarted+ " AM node-partition name "+ partitionName);
    }
    if (!Resources.lessThanOrEqual(resourceCalculator,lastClusterResource,amIfStarted,amLimit)) {
      if (getNumActiveApplications() < 1 || (Resources.lessThanOrEqual(resourceCalculator,lastClusterResource,queueUsage.getAMUsed(partitionName),Resources.none()))) {
        LOG.warn("maximum-am-resource-percent is insufficient to start a" + " single application in queue, it is likely set too low." + " skipping enforcement to allow at least one application"+ " to start");
      }
 else {
        application.updateAMContainerDiagnostics(AMState.INACTIVATED,CSAMContainerLaunchDiagnosticsConstants.QUEUE_AM_RESOURCE_LIMIT_EXCEED);
        LOG.info("Not activating application " + applicationId + " as  amIfStarted: "+ amIfStarted+ " exceeds amLimit: "+ amLimit);
        continue;
      }
    }
    User user=getUser(application.getUser());
    Resource userAMLimit=userAmPartitionLimit.get(partitionName);
    if (userAMLimit == null) {
      userAMLimit=getUserAMResourceLimitPerPartition(partitionName);
      userAmPartitionLimit.put(partitionName,userAMLimit);
    }
    Resource userAmIfStarted=Resources.add(application.getAMResource(partitionName),user.getConsumedAMResources(partitionName));
    if (!Resources.lessThanOrEqual(resourceCalculator,lastClusterResource,userAmIfStarted,userAMLimit)) {
      if (getNumActiveApplications() < 1 || (Resources.lessThanOrEqual(resourceCalculator,lastClusterResource,queueUsage.getAMUsed(partitionName),Resources.none()))) {
        LOG.warn("maximum-am-resource-percent is insufficient to start a" + " single application in queue for user, it is likely set too" + " low. skipping enforcement to allow at least one application"+ " to start");
      }
 else {
        application.updateAMContainerDiagnostics(AMState.INACTIVATED,CSAMContainerLaunchDiagnosticsConstants.USER_AM_RESOURCE_LIMIT_EXCEED);
        LOG.info("Not activating application " + applicationId + " for user: "+ user+ " as userAmIfStarted: "+ userAmIfStarted+ " exceeds userAmLimit: "+ userAMLimit);
        continue;
      }
    }
    user.activateApplication();
    orderingPolicy.addSchedulableEntity(application);
    application.updateAMContainerDiagnostics(AMState.ACTIVATED,null);
    queueUsage.incAMUsed(partitionName,application.getAMResource(partitionName));
    user.getResourceUsage().incAMUsed(partitionName,application.getAMResource(partitionName));
    user.getResourceUsage().setAMLimit(partitionName,userAMLimit);
    metrics.incAMUsed(application.getUser(),application.getAMResource(partitionName));
    metrics.setAMResouceLimitForUser(application.getUser(),userAMLimit);
    fsApp.remove();
    LOG.info("Application " + applicationId + " from user: "+ application.getUser()+ " activated in queue: "+ getQueueName());
  }
}
