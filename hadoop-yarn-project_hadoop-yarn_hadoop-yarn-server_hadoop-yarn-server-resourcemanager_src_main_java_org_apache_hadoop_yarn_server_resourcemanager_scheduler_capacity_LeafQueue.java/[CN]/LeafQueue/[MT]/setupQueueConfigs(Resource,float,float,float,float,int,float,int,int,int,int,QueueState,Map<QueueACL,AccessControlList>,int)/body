{
  CSQueueUtils.checkMaxCapacity(getQueueName(),capacity,maximumCapacity);
  float absCapacity=getParent().getAbsoluteCapacity() * capacity;
  CSQueueUtils.checkAbsoluteCapacities(getQueueName(),absCapacity,absoluteMaxCapacity);
  this.capacity=capacity;
  this.absoluteCapacity=absCapacity;
  this.maximumCapacity=maximumCapacity;
  this.absoluteMaxCapacity=absoluteMaxCapacity;
  this.userLimit=userLimit;
  this.userLimitFactor=userLimitFactor;
  this.maxApplications=maxApplications;
  this.maxApplicationsPerUser=maxApplicationsPerUser;
  this.maxActiveApplications=maxActiveApplications;
  this.maxActiveApplicationsPerUser=maxActiveApplicationsPerUser;
  this.state=state;
  this.acls=acls;
  this.queueInfo.setCapacity(this.capacity);
  this.queueInfo.setMaximumCapacity(this.maximumCapacity);
  this.queueInfo.setQueueState(this.state);
  this.nodeLocalityDelay=nodeLocalityDelay;
  StringBuilder aclsString=new StringBuilder();
  for (  Map.Entry<QueueACL,AccessControlList> e : acls.entrySet()) {
    aclsString.append(e.getKey() + ":" + e.getValue().getAclString());
  }
  CSQueueUtils.updateQueueStatistics(resourceCalculator,this,getParent(),clusterResource,minimumAllocation);
  LOG.info("Initializing " + queueName + "\n"+ "capacity = "+ capacity+ " [= (float) configuredCapacity / 100 ]"+ "\n"+ "asboluteCapacity = "+ absoluteCapacity+ " [= parentAbsoluteCapacity * capacity ]"+ "\n"+ "maxCapacity = "+ maximumCapacity+ " [= configuredMaxCapacity ]"+ "\n"+ "absoluteMaxCapacity = "+ absoluteMaxCapacity+ " [= 1.0 maximumCapacity undefined, "+ "(parentAbsoluteMaxCapacity * maximumCapacity) / 100 otherwise ]"+ "\n"+ "userLimit = "+ userLimit+ " [= configuredUserLimit ]"+ "\n"+ "userLimitFactor = "+ userLimitFactor+ " [= configuredUserLimitFactor ]"+ "\n"+ "maxApplications = "+ maxApplications+ " [= configuredMaximumSystemApplicationsPerQueue or"+ " (int)(configuredMaximumSystemApplications * absoluteCapacity)]"+ "\n"+ "maxApplicationsPerUser = "+ maxApplicationsPerUser+ " [= (int)(maxApplications * (userLimit / 100.0f) * "+ "userLimitFactor) ]"+ "\n"+ "maxActiveApplications = "+ maxActiveApplications+ " [= max("+ "(int)ceil((clusterResourceMemory / minimumAllocation) * "+ "maxAMResourcePerQueuePercent * absoluteMaxCapacity),"+ "1) ]"+ "\n"+ "maxActiveAppsUsingAbsCap = "+ maxActiveAppsUsingAbsCap+ " [= max("+ "(int)ceil((clusterResourceMemory / minimumAllocation) *"+ "maxAMResourcePercent * absoluteCapacity),"+ "1) ]"+ "\n"+ "maxActiveApplicationsPerUser = "+ maxActiveApplicationsPerUser+ " [= max("+ "(int)(maxActiveApplications * (userLimit / 100.0f) * "+ "userLimitFactor),"+ "1) ]"+ "\n"+ "usedCapacity = "+ usedCapacity+ " [= usedResourcesMemory / "+ "(clusterResourceMemory * absoluteCapacity)]"+ "\n"+ "absoluteUsedCapacity = "+ absoluteUsedCapacity+ " [= usedResourcesMemory / clusterResourceMemory]"+ "\n"+ "maxAMResourcePerQueuePercent = "+ maxAMResourcePerQueuePercent+ " [= configuredMaximumAMResourcePercent ]"+ "\n"+ "minimumAllocationFactor = "+ minimumAllocationFactor+ " [= (float)(maximumAllocationMemory - minimumAllocationMemory) / "+ "maximumAllocationMemory ]"+ "\n"+ "numContainers = "+ numContainers+ " [= currentNumContainers ]"+ "\n"+ "state = "+ state+ " [= configuredState ]"+ "\n"+ "acls = "+ aclsString+ " [= configuredAcls ]"+ "\n"+ "nodeLocalityDelay = "+ nodeLocalityDelay+ "\n");
}
