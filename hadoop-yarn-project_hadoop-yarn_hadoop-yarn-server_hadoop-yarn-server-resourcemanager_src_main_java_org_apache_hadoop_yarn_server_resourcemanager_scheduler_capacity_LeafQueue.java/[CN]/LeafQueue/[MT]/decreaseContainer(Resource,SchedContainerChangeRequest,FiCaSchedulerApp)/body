{
  RMContainer rmContainer=decreaseRequest.getRMContainer();
  if (rmContainer.hasIncreaseReservation()) {
    unreserveIncreasedContainer(clusterResource,app,(FiCaSchedulerNode)decreaseRequest.getSchedulerNode(),rmContainer);
  }
  boolean resourceDecreased=false;
  Resource resourceBeforeDecrease;
synchronized (this) {
    RMServerUtils.checkSchedContainerChangeRequest(decreaseRequest,false);
    resourceBeforeDecrease=Resources.clone(rmContainer.getAllocatedResource());
    boolean hasIncreaseRequest=app.removeIncreaseRequest(decreaseRequest.getNodeId(),decreaseRequest.getPriority(),decreaseRequest.getContainerId());
    if (hasIncreaseRequest) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("While processing decrease requests, found an increase" + " request for the same container " + decreaseRequest.getContainerId() + ", removed the increase request");
      }
    }
    Resource absDelta=Resources.negate(decreaseRequest.getDeltaCapacity());
    if (Resources.equals(absDelta,Resources.none())) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Decrease target resource equals to existing resource for" + " container:" + decreaseRequest.getContainerId() + " ignore this decrease request.");
      }
    }
 else {
      releaseResource(clusterResource,app,absDelta,decreaseRequest.getNodePartition(),decreaseRequest.getRMContainer(),true);
      app.decreaseContainer(decreaseRequest);
      decreaseRequest.getSchedulerNode().decreaseContainer(decreaseRequest.getContainerId(),absDelta);
      resourceDecreased=true;
    }
  }
  if (resourceDecreased) {
    getParent().decreaseContainer(clusterResource,decreaseRequest,app);
    LOG.info("Application attempt " + app.getApplicationAttemptId() + " decreased container:"+ decreaseRequest.getContainerId()+ " from "+ resourceBeforeDecrease+ " to "+ decreaseRequest.getTargetCapacity());
  }
}
