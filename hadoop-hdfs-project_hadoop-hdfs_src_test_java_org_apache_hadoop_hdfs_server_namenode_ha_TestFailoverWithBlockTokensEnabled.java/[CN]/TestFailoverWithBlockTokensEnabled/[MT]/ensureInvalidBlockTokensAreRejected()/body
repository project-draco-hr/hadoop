{
  cluster.transitionToActive(0);
  FileSystem fs=HATestUtil.configureFailoverFs(cluster,conf);
  DFSTestUtil.writeFile(fs,TEST_PATH,TEST_DATA);
  assertEquals(TEST_DATA,DFSTestUtil.readFile(fs,TEST_PATH));
  DFSClient dfsClient=DFSClientAdapter.getDFSClient((DistributedFileSystem)fs);
  DFSClient spyDfsClient=Mockito.spy(dfsClient);
  Mockito.doAnswer(new Answer<LocatedBlocks>(){
    @Override public LocatedBlocks answer(    InvocationOnMock arg0) throws Throwable {
      LocatedBlocks locatedBlocks=(LocatedBlocks)arg0.callRealMethod();
      for (      LocatedBlock lb : locatedBlocks.getLocatedBlocks()) {
        Token<BlockTokenIdentifier> token=lb.getBlockToken();
        BlockTokenIdentifier id=lb.getBlockToken().decodeIdentifier();
        id.setExpiryDate(System.currentTimeMillis() + 10);
        Token<BlockTokenIdentifier> newToken=new Token<BlockTokenIdentifier>(id.getBytes(),token.getPassword(),token.getKind(),token.getService());
        lb.setBlockToken(newToken);
      }
      return locatedBlocks;
    }
  }
).when(spyDfsClient).getLocatedBlocks(Mockito.anyString(),Mockito.anyLong(),Mockito.anyLong());
  DFSClientAdapter.setDFSClient((DistributedFileSystem)fs,spyDfsClient);
  try {
    assertEquals(TEST_DATA,DFSTestUtil.readFile(fs,TEST_PATH));
    fail("Shouldn't have been able to read a file with invalid block tokens");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Could not obtain block",ioe);
  }
}
