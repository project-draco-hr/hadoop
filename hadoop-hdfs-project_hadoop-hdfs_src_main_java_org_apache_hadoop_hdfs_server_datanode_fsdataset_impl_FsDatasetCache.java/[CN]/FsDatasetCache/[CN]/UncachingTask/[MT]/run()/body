{
  Value value;
  if (shouldDefer()) {
    deferredUncachingExecutor.schedule(this,revocationPollingMs,TimeUnit.MILLISECONDS);
    return;
  }
synchronized (FsDatasetCache.this) {
    value=mappableBlockMap.get(key);
  }
  Preconditions.checkNotNull(value);
  Preconditions.checkArgument(value.state == State.UNCACHING);
  IOUtils.closeQuietly(value.mappableBlock);
synchronized (FsDatasetCache.this) {
    mappableBlockMap.remove(key);
  }
  long newUsedBytes=release(value.mappableBlock.getLength());
  numBlocksCached.addAndGet(-1);
  dataset.datanode.getMetrics().incrBlocksUncached(1);
  if (revocationTimeMs != 0) {
    LOG.debug("Uncaching of {} completed. usedBytes = {}",key,newUsedBytes);
  }
 else {
    LOG.debug("Deferred uncaching of {} completed. usedBytes = {}",key,newUsedBytes);
  }
}
