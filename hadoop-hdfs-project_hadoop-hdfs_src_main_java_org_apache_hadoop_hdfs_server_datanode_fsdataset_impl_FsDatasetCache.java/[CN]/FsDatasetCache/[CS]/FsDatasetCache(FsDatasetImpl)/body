{
  this.dataset=dataset;
  this.maxBytes=dataset.datanode.getDnConf().getMaxLockedMemory();
  ThreadFactory workerFactory=new ThreadFactoryBuilder().setDaemon(true).setNameFormat("FsDatasetCache-%d-" + dataset.toString()).build();
  this.usedBytesCount=new UsedBytesCount();
  this.uncachingExecutor=new ThreadPoolExecutor(0,1,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(),workerFactory);
  this.uncachingExecutor.allowCoreThreadTimeOut(true);
  this.deferredUncachingExecutor=new ScheduledThreadPoolExecutor(1,workerFactory);
  this.revocationMs=dataset.datanode.getConf().getLong(DFS_DATANODE_CACHE_REVOCATION_TIMEOUT_MS,DFS_DATANODE_CACHE_REVOCATION_TIMEOUT_MS_DEFAULT);
  long confRevocationPollingMs=dataset.datanode.getConf().getLong(DFS_DATANODE_CACHE_REVOCATION_POLLING_MS,DFS_DATANODE_CACHE_REVOCATION_POLLING_MS_DEFAULT);
  long minRevocationPollingMs=revocationMs / 2;
  if (minRevocationPollingMs < confRevocationPollingMs) {
    throw new RuntimeException("configured value " + confRevocationPollingMs + "for "+ DFS_DATANODE_CACHE_REVOCATION_POLLING_MS+ " is too high.  It must not be more than half of the "+ "value of "+ DFS_DATANODE_CACHE_REVOCATION_TIMEOUT_MS+ ".  Reconfigure this to "+ minRevocationPollingMs);
  }
  this.revocationPollingMs=confRevocationPollingMs;
}
