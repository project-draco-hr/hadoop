{
  Logger logger=Logger.getLogger(YARNRunner.class);
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  Layout layout=new SimpleLayout();
  Appender appender=new WriterAppender(layout,bout);
  logger.addAppender(appender);
  JobConf jobConf=new JobConf();
  jobConf.set(MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS,"-Djava.net.preferIPv4Stack=true -Djava.library.path=foo");
  jobConf.set(MRJobConfig.MR_AM_COMMAND_OPTS,"-Xmx1024m -Djava.library.path=bar");
  YARNRunner yarnRunner=new YARNRunner(jobConf);
  File jobxml=new File(testWorkDir,MRJobConfig.JOB_CONF_FILE);
  OutputStream out=new FileOutputStream(jobxml);
  conf.writeXml(out);
  out.close();
  File jobsplit=new File(testWorkDir,MRJobConfig.JOB_SPLIT);
  out=new FileOutputStream(jobsplit);
  out.close();
  File jobsplitmetainfo=new File(testWorkDir,MRJobConfig.JOB_SPLIT_METAINFO);
  out=new FileOutputStream(jobsplitmetainfo);
  out.close();
  File appTokens=new File(testWorkDir,MRJobConfig.APPLICATION_TOKENS_FILE);
  out=new FileOutputStream(appTokens);
  out.close();
  @SuppressWarnings("unused") ApplicationSubmissionContext submissionContext=yarnRunner.createApplicationSubmissionContext(jobConf,testWorkDir.toString(),new Credentials());
  String logMsg=bout.toString();
  assertTrue(logMsg.contains("WARN - Usage of -Djava.library.path in " + "yarn.app.mapreduce.am.admin-command-opts can cause programs to no " + "longer function if hadoop native libraries are used. These values "+ "should be set as part of the LD_LIBRARY_PATH in the app master JVM "+ "env using yarn.app.mapreduce.am.admin.user.env config settings."));
  assertTrue(logMsg.contains("WARN - Usage of -Djava.library.path in " + "yarn.app.mapreduce.am.command-opts can cause programs to no longer " + "function if hadoop native libraries are used. These values should "+ "be set as part of the LD_LIBRARY_PATH in the app master JVM env "+ "using yarn.app.mapreduce.am.env config settings."));
}
