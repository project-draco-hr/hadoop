{
  conf.set(YarnConfiguration.RM_PRINCIPAL,"foo@LOCAL");
  final String masterPrincipal=Master.getMasterPrincipal(conf);
  final MRClientProtocol hsProxy=mock(MRClientProtocol.class);
  when(hsProxy.getDelegationToken(any(GetDelegationTokenRequest.class))).thenAnswer(new Answer<GetDelegationTokenResponse>(){
    public GetDelegationTokenResponse answer(    InvocationOnMock invocation){
      GetDelegationTokenRequest request=(GetDelegationTokenRequest)invocation.getArguments()[0];
      assertEquals(masterPrincipal,request.getRenewer());
      DelegationToken token=recordFactory.newRecordInstance(DelegationToken.class);
      token.setKind("");
      token.setService("");
      token.setIdentifier(ByteBuffer.allocate(0));
      token.setPassword(ByteBuffer.allocate(0));
      GetDelegationTokenResponse tokenResponse=recordFactory.newRecordInstance(GetDelegationTokenResponse.class);
      tokenResponse.setDelegationToken(token);
      return tokenResponse;
    }
  }
);
  UserGroupInformation.createRemoteUser("someone").doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      yarnRunner=new YARNRunner(conf,null,null);
      yarnRunner.getDelegationTokenFromHS(hsProxy);
      verify(hsProxy).getDelegationToken(any(GetDelegationTokenRequest.class));
      return null;
    }
  }
);
}
