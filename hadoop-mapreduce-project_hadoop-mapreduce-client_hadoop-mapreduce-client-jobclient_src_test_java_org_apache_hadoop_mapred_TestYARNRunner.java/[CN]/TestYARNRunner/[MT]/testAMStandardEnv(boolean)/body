{
  if (Shell.WINDOWS) {
    return;
  }
  final String ADMIN_LIB_PATH="foo";
  final String USER_LIB_PATH="bar";
  final String USER_SHELL="shell";
  JobConf jobConf=new JobConf();
  String pathKey=Environment.LD_LIBRARY_PATH.name();
  if (customLibPath) {
    jobConf.set(MRJobConfig.MR_AM_ADMIN_USER_ENV,pathKey + "=" + ADMIN_LIB_PATH);
    jobConf.set(MRJobConfig.MR_AM_ENV,pathKey + "=" + USER_LIB_PATH);
  }
  jobConf.set(MRJobConfig.MAPRED_ADMIN_USER_SHELL,USER_SHELL);
  YARNRunner yarnRunner=new YARNRunner(jobConf);
  ApplicationSubmissionContext appSubCtx=buildSubmitContext(yarnRunner,jobConf);
  ContainerLaunchContext clc=appSubCtx.getAMContainerSpec();
  Map<String,String> env=clc.getEnvironment();
  String libPath=env.get(pathKey);
  assertNotNull(pathKey + " not set",libPath);
  String cps=jobConf.getBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM,MRConfig.DEFAULT_MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM) ? ApplicationConstants.CLASS_PATH_SEPARATOR : File.pathSeparator;
  String expectedLibPath=MRApps.crossPlatformifyMREnv(conf,Environment.PWD);
  if (customLibPath) {
    expectedLibPath+=cps + ADMIN_LIB_PATH + cps+ USER_LIB_PATH;
  }
 else {
    expectedLibPath+=cps + MRJobConfig.DEFAULT_MR_AM_ADMIN_USER_ENV.substring(pathKey.length() + 1);
  }
  assertEquals("Bad AM " + pathKey + " setting",expectedLibPath,libPath);
  String shell=env.get(Environment.SHELL.name());
  assertNotNull("SHELL not set",shell);
  assertEquals("Bad SHELL setting",USER_SHELL,shell);
}
