{
  if (!canRun()) {
    return;
  }
  Configuration myConf=new Configuration(conf);
  myConf.set(FileSystem.FS_DEFAULT_NAME_KEY,"refresh:///");
  myConf.setClass("fs.refresh.impl",FakeFileSystem.class,FileSystem.class);
  String userName=getJobOwnerName();
  TrackerDistributedCacheManager manager=new TrackerDistributedCacheManager(myConf,taskController);
  Configuration subConf=new Configuration(myConf);
  subConf.set(MRJobConfig.USER_NAME,userName);
  DistributedCache.addCacheFile(firstCacheFile.toUri(),subConf);
  ClientDistributedCacheManager.determineTimestamps(subConf);
  ClientDistributedCacheManager.determineCacheVisibilities(subConf);
  TaskDistributedCacheManager handle=manager.newTaskDistributedCacheManager(subConf);
  assertNull(null,DistributedCache.getLocalCacheFiles(subConf));
  File workDir=new File(new Path(TEST_ROOT_DIR,"workdir").toString());
  handle.setup(localDirAllocator,workDir,TaskTracker.getPrivateDistributedCacheDir(userName),TaskTracker.getPublicDistributedCacheDir());
  Path[] localCacheFiles=DistributedCache.getLocalCacheFiles(subConf);
  assertNotNull(null,localCacheFiles);
  assertEquals(1,localCacheFiles.length);
  Path cachedFirstFile=localCacheFiles[0];
  assertFileLengthEquals(firstCacheFile,cachedFirstFile);
  assertFalse("Paths should be different.",firstCacheFile.equals(cachedFirstFile));
  handle.release();
  FileSystem fs=FileSystem.get(myConf);
  ((FakeFileSystem)fs).advanceClock(1);
  Throwable th=null;
  try {
    handle.setup(localDirAllocator,workDir,TaskTracker.getPrivateDistributedCacheDir(userName),TaskTracker.getPublicDistributedCacheDir());
  }
 catch (  IOException ie) {
    th=ie;
  }
  assertNotNull("Throwable is null",th);
  assertTrue("Exception message does not match",th.getMessage().contains("has changed on HDFS since job started"));
  handle.release();
  TrackerDistributedCacheManager manager2=new TrackerDistributedCacheManager(myConf,taskController);
  TaskDistributedCacheManager handle2=manager2.newTaskDistributedCacheManager(subConf);
  File workDir2=new File(new Path(TEST_ROOT_DIR,"workdir2").toString());
  th=null;
  try {
    handle2.setup(localDirAllocator,workDir2,TaskTracker.getPrivateDistributedCacheDir(userName),TaskTracker.getPublicDistributedCacheDir());
  }
 catch (  IOException ie) {
    th=ie;
  }
  assertNotNull("Throwable is null",th);
  assertTrue("Exception message does not match",th.getMessage().contains("has changed on HDFS since job started"));
  handle.release();
  Configuration subConf2=new Configuration(myConf);
  subConf2.set(MRJobConfig.USER_NAME,userName);
  DistributedCache.addCacheFile(firstCacheFile.toUri(),subConf2);
  ClientDistributedCacheManager.determineTimestamps(subConf2);
  ClientDistributedCacheManager.determineCacheVisibilities(subConf2);
  handle=manager.newTaskDistributedCacheManager(subConf2);
  handle.setup(localDirAllocator,workDir,TaskTracker.getPrivateDistributedCacheDir(userName),TaskTracker.getPublicDistributedCacheDir());
  Path[] localCacheFiles2=DistributedCache.getLocalCacheFiles(subConf2);
  assertNotNull(null,localCacheFiles2);
  assertEquals(1,localCacheFiles2.length);
  Path cachedFirstFile2=localCacheFiles2[0];
  assertFileLengthEquals(firstCacheFile,cachedFirstFile2);
  assertFalse("Paths should be different.",firstCacheFile.equals(cachedFirstFile2));
  assertFalse("two jobs with different timestamps did not localize" + " in different paths",cachedFirstFile.equals(cachedFirstFile2));
  handle.release();
}
