{
  final String inputPathStr=inputPath.toUri().getPath();
  System.out.println("inputPathStr = " + inputPathStr);
  final URI uri=fs.getUri();
  final String prefix="har://hdfs-" + uri.getHost() + ":"+ uri.getPort()+ archivePath.toUri().getPath()+ Path.SEPARATOR;
  final String harName="foo.har";
  final String fullHarPathStr=prefix + harName;
  final String[] args={"-archiveName",harName,"-p",inputPathStr,"-r","2","*",archivePath.toString()};
  System.setProperty(HadoopArchives.TEST_HADOOP_ARCHIVES_JAR_PATH,HADOOP_ARCHIVES_JAR);
  final HadoopArchives har=new HadoopArchives(conf);
  assertEquals(0,ToolRunner.run(har,args));
  RemoteIterator<LocatedFileStatus> listFiles=fs.listFiles(new Path(archivePath.toString() + "/" + harName),false);
  while (listFiles.hasNext()) {
    LocatedFileStatus next=listFiles.next();
    if (!next.getPath().toString().endsWith("_SUCCESS")) {
      assertEquals(next.getPath().toString(),2,next.getReplication());
    }
  }
  return fullHarPathStr;
}
