{
  final byte[] result=new byte[totalLength];
  long pos;
  try {
    final byte[] buffer=new byte[17];
    final int times=totalLength / buffer.length;
    int read;
    int expectedRead;
    for (int i=times; i >= 0; i--) {
      pos=i * buffer.length;
      fsdis.seek(pos);
      assertEquals(pos,fsdis.getPos());
      read=fsdis.read(buffer);
      if (i == times) {
        expectedRead=totalLength % buffer.length;
        if (expectedRead == 0) {
          expectedRead=-1;
        }
      }
 else {
        expectedRead=buffer.length;
      }
      assertEquals(expectedRead,read);
      if (read > 0) {
        System.arraycopy(buffer,0,result,(int)pos,read);
      }
    }
    expectSeekIOE(fsdis,Long.MAX_VALUE,"Seek to Long.MAX_VALUE should lead to IOE.");
    expectSeekIOE(fsdis,Long.MIN_VALUE,"Seek to Long.MIN_VALUE should lead to IOE.");
    long pp=-1L;
    expectSeekIOE(fsdis,pp,"Seek to " + pp + " should lead to IOE.");
    fsdis.seek(totalLength);
    assertEquals(totalLength,fsdis.getPos());
    pp=totalLength + 1;
    expectSeekIOE(fsdis,pp,"Seek to the length position + 1 (" + pp + ") should lead to IOE.");
    return result;
  }
  finally {
    if (close) {
      fsdis.close();
    }
  }
}
