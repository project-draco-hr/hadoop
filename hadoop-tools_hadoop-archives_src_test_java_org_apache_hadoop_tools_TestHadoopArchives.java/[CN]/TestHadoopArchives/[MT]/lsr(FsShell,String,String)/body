{
  final String dir=glob == null ? rootDir : glob;
  System.out.println("lsr root=" + rootDir);
  final ByteArrayOutputStream bytes=new ByteArrayOutputStream();
  final PrintStream out=new PrintStream(bytes);
  final PrintStream oldOut=System.out;
  final PrintStream oldErr=System.err;
  System.setOut(out);
  System.setErr(out);
  final String results;
  try {
    Assert.assertEquals(0,shell.run(new String[]{"-lsr",dir}));
    results=bytes.toString();
  }
  finally {
    IOUtils.closeStream(out);
    System.setOut(oldOut);
    System.setErr(oldErr);
  }
  System.out.println("lsr results:\n" + results);
  String dirname=rootDir;
  if (rootDir.lastIndexOf(Path.SEPARATOR) != -1) {
    dirname=rootDir.substring(rootDir.lastIndexOf(Path.SEPARATOR));
  }
  final List<String> paths=new ArrayList<String>();
  for (StringTokenizer t=new StringTokenizer(results,"\n"); t.hasMoreTokens(); ) {
    final String s=t.nextToken();
    final int i=s.indexOf(dirname);
    if (i >= 0) {
      paths.add(s.substring(i + dirname.length()));
    }
  }
  Collections.sort(paths);
  System.out.println("lsr paths = " + paths.toString().replace(", ",",\n  "));
  return paths;
}
