{
  assertEquals(0,fsdis1.skip(-1));
  assertEquals(0,fsdis1.skip(0));
  final ByteArrayOutputStream baos=new ByteArrayOutputStream(totalLength);
  try {
    final byte[] buffer=new byte[17];
    final int times=totalLength / buffer.length;
    final int remainder=totalLength % buffer.length;
    long skipped;
    long expectedPosition;
    int toGo;
    for (int i=0; i <= times; i++) {
      toGo=(i < times) ? buffer.length : remainder;
      if (i % 2 == 0) {
        fsdis1.readFully(buffer,0,toGo);
        skipped=skipUntilZero(fsdis2,toGo);
      }
 else {
        fsdis2.readFully(buffer,0,toGo);
        skipped=skipUntilZero(fsdis1,toGo);
      }
      if (i < times) {
        assertEquals(buffer.length,skipped);
        expectedPosition=(i + 1) * buffer.length;
      }
 else {
        if (remainder > 0) {
          assertEquals(remainder,skipped);
        }
 else {
          assertEquals(0,skipped);
        }
        expectedPosition=totalLength;
      }
      assertEquals(expectedPosition,fsdis1.getPos());
      assertEquals(expectedPosition,fsdis2.getPos());
      if (toGo > 0) {
        baos.write(buffer,0,toGo);
      }
    }
    assertEquals(0,fsdis1.skip(-1));
    assertEquals(0,fsdis1.skip(0));
    assertEquals(0,fsdis1.skip(1));
    assertEquals(0,fsdis1.skip(Long.MAX_VALUE));
    return baos.toByteArray();
  }
  finally {
    if (close) {
      fsdis1.close();
      fsdis2.close();
    }
  }
}
