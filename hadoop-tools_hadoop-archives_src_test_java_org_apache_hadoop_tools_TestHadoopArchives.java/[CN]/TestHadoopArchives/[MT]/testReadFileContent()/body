{
  fileList.add(createFile(inputPath,fs,"c c"));
  final Path sub1=new Path(inputPath,"sub 1");
  fs.mkdirs(sub1);
  fileList.add(createFile(inputPath,fs,sub1.getName(),"file x y z"));
  fileList.add(createFile(inputPath,fs,sub1.getName(),"file"));
  fileList.add(createFile(inputPath,fs,sub1.getName(),"x"));
  fileList.add(createFile(inputPath,fs,sub1.getName(),"y"));
  fileList.add(createFile(inputPath,fs,sub1.getName(),"z"));
  final Path sub2=new Path(inputPath,"sub 1 with suffix");
  fs.mkdirs(sub2);
  fileList.add(createFile(inputPath,fs,sub2.getName(),"z"));
  final byte[] binContent=prepareBin();
  fileList.add(createFile(inputPath,fs,binContent,sub2.getName(),"bin"));
  fileList.add(createFile(inputPath,fs,new byte[0],sub2.getName(),"zero-length"));
  final String fullHarPathStr=makeArchive();
  final HarFileSystem harFileSystem=new HarFileSystem(fs);
  try {
    final URI harUri=new URI(fullHarPathStr);
    harFileSystem.initialize(harUri,fs.getConf());
    int readFileCount=0;
    for (    final String pathStr0 : fileList) {
      final Path path=new Path(fullHarPathStr + Path.SEPARATOR + pathStr0);
      final String baseName=path.getName();
      final FileStatus status=harFileSystem.getFileStatus(path);
      if (status.isFile()) {
        final byte[] actualContentSimple=readAllSimple(harFileSystem.open(path),true);
        final byte[] actualContentBuffer=readAllWithBuffer(harFileSystem.open(path),true);
        assertArrayEquals(actualContentSimple,actualContentBuffer);
        final byte[] actualContentFully=readAllWithReadFully(actualContentSimple.length,harFileSystem.open(path),true);
        assertArrayEquals(actualContentSimple,actualContentFully);
        final byte[] actualContentSeek=readAllWithSeek(actualContentSimple.length,harFileSystem.open(path),true);
        assertArrayEquals(actualContentSimple,actualContentSeek);
        final byte[] actualContentRead4=readAllWithRead4(harFileSystem.open(path),true);
        assertArrayEquals(actualContentSimple,actualContentRead4);
        final byte[] actualContentSkip=readAllWithSkip(actualContentSimple.length,harFileSystem.open(path),harFileSystem.open(path),true);
        assertArrayEquals(actualContentSimple,actualContentSkip);
        if ("bin".equals(baseName)) {
          assertArrayEquals(binContent,actualContentSimple);
        }
 else         if ("zero-length".equals(baseName)) {
          assertEquals(0,actualContentSimple.length);
        }
 else {
          String actual=new String(actualContentSimple,"UTF-8");
          assertEquals(baseName,actual);
        }
        readFileCount++;
      }
    }
    assertEquals(fileList.size(),readFileCount);
  }
  finally {
    harFileSystem.close();
  }
}
