{
  fs.delete(archivePath,true);
  createFile(inputPath,"c c",fs);
  final Path sub1=new Path(inputPath,"sub 1");
  fs.mkdirs(sub1);
  createFile(sub1,"file x y z",fs);
  createFile(sub1,"file",fs);
  createFile(sub1,"x",fs);
  createFile(sub1,"y",fs);
  createFile(sub1,"z",fs);
  final Path sub2=new Path(inputPath,"sub 1 with suffix");
  fs.mkdirs(sub2);
  createFile(sub2,"z",fs);
  final FsShell shell=new FsShell(conf);
  final String inputPathStr=inputPath.toUri().getPath();
  final List<String> originalPaths=lsr(shell,inputPathStr);
  final URI uri=fs.getUri();
  final String prefix="har://hdfs-" + uri.getHost() + ":"+ uri.getPort()+ archivePath.toUri().getPath()+ Path.SEPARATOR;
{
    final String harName="foo.har";
    final String[] args={"-archiveName",harName,"-p",inputPathStr,"*",archivePath.toString()};
    System.setProperty(HadoopArchives.TEST_HADOOP_ARCHIVES_JAR_PATH,HADOOP_ARCHIVES_JAR);
    final HadoopArchives har=new HadoopArchives(conf);
    Assert.assertEquals(0,ToolRunner.run(har,args));
    final List<String> harPaths=lsr(shell,prefix + harName);
    Assert.assertEquals(originalPaths,harPaths);
  }
}
