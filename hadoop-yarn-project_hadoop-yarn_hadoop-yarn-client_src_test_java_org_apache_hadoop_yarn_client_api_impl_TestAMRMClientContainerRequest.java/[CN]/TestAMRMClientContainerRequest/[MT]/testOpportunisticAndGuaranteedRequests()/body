{
  AMRMClientImpl<ContainerRequest> client=new AMRMClientImpl<ContainerRequest>();
  Configuration conf=new Configuration();
  conf.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,MyResolver.class,DNSToSwitchMapping.class);
  client.init(conf);
  Resource capability=Resource.newInstance(1024,1);
  ContainerRequest request=new ContainerRequest(capability,new String[]{"host1","host2"},new String[]{"/rack2"},Priority.newInstance(1));
  client.addContainerRequest(request);
  verifyResourceRequest(client,request,"host1",true);
  verifyResourceRequest(client,request,"host2",true);
  verifyResourceRequest(client,request,"/rack1",true);
  verifyResourceRequest(client,request,"/rack2",true);
  verifyResourceRequest(client,request,ResourceRequest.ANY,true);
  ContainerRequest request2=new ContainerRequest(capability,new String[]{"host1","host2"},new String[]{"/rack2"},Priority.newInstance(1),true,null,ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC,true));
  client.addContainerRequest(request2);
  verifyResourceRequest(client,request,"host1",true,ExecutionType.OPPORTUNISTIC);
  verifyResourceRequest(client,request,"host2",true,ExecutionType.OPPORTUNISTIC);
  verifyResourceRequest(client,request,"/rack1",true,ExecutionType.OPPORTUNISTIC);
  verifyResourceRequest(client,request,"/rack2",true,ExecutionType.OPPORTUNISTIC);
  verifyResourceRequest(client,request,ResourceRequest.ANY,true,ExecutionType.OPPORTUNISTIC);
}
