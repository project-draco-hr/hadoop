{
  MiniDFSCluster cluster=null;
  try {
    Configuration conf=new HdfsConfiguration();
    conf.setInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_INTERVAL_KEY,0);
    int fileLen=10 * 1024;
    conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,fileLen / 2);
    cluster=new MiniDFSCluster.Builder(conf).build();
    cluster.waitActive();
    final BlockManager bm=cluster.getNamesystem().getBlockManager();
    DistributedFileSystem dfs=cluster.getFileSystem();
    DFSTestUtil.createFile(dfs,new Path("/testMissingBlocksAlert/file1"),fileLen,(short)3,0);
    Path corruptFile=new Path("/testMissingBlocks/corruptFile");
    DFSTestUtil.createFile(dfs,corruptFile,fileLen,(short)3,0);
    ExtendedBlock block=DFSTestUtil.getFirstBlock(dfs,corruptFile);
    assertTrue(TestDatanodeBlockScanner.corruptReplica(block,0));
    FSDataInputStream in=dfs.open(corruptFile);
    try {
      in.readFully(new byte[fileLen]);
    }
 catch (    ChecksumException ignored) {
    }
    in.close();
    LOG.info("Waiting for missing blocks count to increase...");
    while (dfs.getMissingBlocksCount() <= 0) {
      Thread.sleep(100);
    }
    assertTrue(dfs.getMissingBlocksCount() == 1);
    assertEquals(4,dfs.getUnderReplicatedBlocksCount());
    assertEquals(3,bm.getUnderReplicatedNotMissingBlocks());
    URL url=new URL("http://" + conf.get(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY) + "/dfshealth.jsp");
    String dfsFrontPage=DFSTestUtil.urlGet(url);
    String warnStr="WARNING : There are ";
    assertTrue("HDFS Front page does not contain expected warning",dfsFrontPage.contains(warnStr + "1 missing blocks"));
    dfs.delete(corruptFile,true);
    LOG.info("Waiting for missing blocks count to be zero...");
    while (dfs.getMissingBlocksCount() > 0) {
      Thread.sleep(100);
    }
    assertEquals(2,dfs.getUnderReplicatedBlocksCount());
    assertEquals(2,bm.getUnderReplicatedNotMissingBlocks());
    dfsFrontPage=DFSTestUtil.urlGet(url);
    assertFalse("HDFS Front page contains unexpected warning",dfsFrontPage.contains(warnStr));
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
