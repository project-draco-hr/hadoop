{
  Resource totalDemand=Resources.createResource(0);
  for (  Schedulable sched : schedulables) {
    Resources.addTo(totalDemand,sched.getDemand());
  }
  Resource cap=Resources.min(RESOURCE_CALCULATOR,null,totalDemand,totalResources);
  double rMax=1.0;
  while (Resources.lessThan(RESOURCE_CALCULATOR,null,resUsedWithWeightToResRatio(rMax,schedulables),cap)) {
    rMax*=2.0;
  }
  double left=0;
  double right=rMax;
  for (int i=0; i < COMPUTE_FAIR_SHARES_ITERATIONS; i++) {
    double mid=(left + right) / 2.0;
    if (Resources.lessThan(RESOURCE_CALCULATOR,null,resUsedWithWeightToResRatio(mid,schedulables),cap)) {
      left=mid;
    }
 else {
      right=mid;
    }
  }
  for (  Schedulable sched : schedulables) {
    sched.setFairShare(computeShare(sched,right));
  }
}
