{
  Container container=ctx.getContainer();
  ContainerExecutor.Signal signal=ctx.getExecutionAttribute(SIGNAL);
  PrivilegedOperation privOp=null;
  if (ContainerExecutor.Signal.NULL.equals(signal)) {
    privOp=new PrivilegedOperation(PrivilegedOperation.OperationType.SIGNAL_CONTAINER);
    privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),ctx.getExecutionAttribute(USER),Integer.toString(PrivilegedOperation.RunAsUserCommand.SIGNAL_CONTAINER.getValue()),ctx.getExecutionAttribute(PID),Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));
  }
 else {
    String containerId=ctx.getContainer().getContainerId().toString();
    DockerStopCommand stopCommand=new DockerStopCommand(containerId);
    String commandFile=dockerClient.writeCommandToTempFile(stopCommand,containerId);
    privOp=new PrivilegedOperation(PrivilegedOperation.OperationType.RUN_DOCKER_CMD);
    privOp.appendArgs(commandFile);
  }
  privOp.disableFailureLogging();
  try {
    privilegedOperationExecutor.executePrivilegedOperation(null,privOp,null,container.getLaunchContext().getEnvironment(),false,false);
  }
 catch (  PrivilegedOperationException e) {
    throw new ContainerExecutionException("Signal container failed",e.getExitCode(),e.getOutput(),e.getErrorOutput());
  }
}
