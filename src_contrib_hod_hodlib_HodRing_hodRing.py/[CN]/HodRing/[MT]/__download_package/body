def __download_package(self, ringClient):
    self.log.debug(('Found download address: %s' % self._cfg['download-addr']))
    try:
        addr = 'none'
        downloadTime = self._cfg['tarball-retry-initial-time']
        increment = 0
        addr = ringClient.getTarList(self.hostname)
        while (addr == 'none'):
            rand = ((self._cfg['tarball-retry-initial-time'] + increment) + random.uniform(0, self._cfg['tarball-retry-interval']))
            increment = (increment + 1)
            self.log.debug(('got no tarball. Retrying again in %s seconds.' % rand))
            time.sleep(rand)
            addr = ringClient.getTarList(self.hostname)
        self.log.debug(('got this address %s' % addr))
        tarName = self.__get_name(addr)
        self.log.debug(('tar package name: %s' % tarName))
        fetchPath = os.path.join(os.getcwd(), tarName)
        self.log.debug(('fetch path: %s' % fetchPath))
        self.__fetch(addr, fetchPath)
        self.log.debug('done fetching')
        tarUrl = ('http://%s:%d/%s' % (self._http.server_address[0], self._http.server_address[1], tarName))
        try:
            ringClient.registerTarSource(self.hostname, tarUrl, addr)
        except KeyError as e:
            self.log.error('registerTarSource and tarDone failed: ', e)
            raise KeyError(e)
        check = untar(fetchPath, os.getcwd())
        if (check == False):
            raise IOError, 'Untarring failed.'
        self.__pkg = self.__get_dir(tarName)
        self.__pkgDir = os.path.join(os.getcwd(), self.__pkg)
    except Exception as e:
        self.log.error(('Failed download tar package: %s' % get_exception_error_string()))
        raise Exception(e)
