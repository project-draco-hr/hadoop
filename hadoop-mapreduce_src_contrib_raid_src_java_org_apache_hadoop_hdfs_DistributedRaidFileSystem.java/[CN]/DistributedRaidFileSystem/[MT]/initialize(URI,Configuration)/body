{
  this.conf=conf;
  Class<?> clazz=conf.getClass("fs.raid.underlyingfs.impl",DistributedFileSystem.class);
  if (clazz == null) {
    throw new IOException("No FileSystem for fs.raid.underlyingfs.impl.");
  }
  this.fs=(FileSystem)ReflectionUtils.newInstance(clazz,null);
  super.initialize(name,conf);
  stripeLength=RaidNode.getStripeLength(conf);
  if (stripeLength == 0) {
    LOG.info("dfs.raid.stripeLength is incorrectly defined to be " + stripeLength + " Ignoring...");
    return;
  }
  alternates=new DecodeInfo[2];
  Path xorPath=RaidNode.xorDestinationPath(conf,fs);
  alternates[0]=new DecodeInfo(conf,ErasureCodeType.XOR,xorPath);
  Path rsPath=RaidNode.rsDestinationPath(conf,fs);
  alternates[1]=new DecodeInfo(conf,ErasureCodeType.RS,rsPath);
}
