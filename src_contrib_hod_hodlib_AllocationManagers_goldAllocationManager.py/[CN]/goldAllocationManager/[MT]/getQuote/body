def getQuote(self, user, project, ignoreErrors=True):
    secret = ''
    try:
        secretFile = open(self.__GOLD_SECRET_KEY_FILE)
        secret = secretFile.readline()
    except Exception as e:
        self.log.error(('Unable to open file %s' % self.__GOLD_SECRET_KEY_FILE))
        self.log.debug(get_exception_string())
        return (ignoreErrors or False)
    secretFile.close()
    secret = secret.rstrip()
    body = ('<Body><Request action="Quote" actor="hod"><Object>Job</Object><Data><Job><ProjectId>%s</ProjectId><UserId>%s</UserId><WallDuration>10</WallDuration></Job></Data></Request></Body>' % (project, user))
    message = sha.new()
    message.update(body)
    digest = message.digest()
    digestStr = base64.b64encode(digest)
    message = hmac.new(secret, digest, sha)
    signatureStr = base64.b64encode(message.digest())
    sssrmapRequest = ('<?xml version="1.0" encoding="UTF-8"?><Envelope>%s<Signature><DigestValue>%s</DigestValue><SignatureValue>%s</SignatureValue><SecurityToken type="Symmetric"></SecurityToken></Signature></Envelope>' % (body, digestStr, signatureStr))
    self.log.info(('sssrmapRequest: %s' % sssrmapRequest))
    try:
        webservice = httplib.HTTP(self.__goldHost, self.__goldPort)
        webservice.putrequest('POST', '/SSSRMAP3 HTTP/1.1')
        webservice.putheader('Content-Type', 'text/xml; charset="utf-8"')
        webservice.putheader('Transfer-Encoding', 'chunked')
        webservice.endheaders()
        webservice.send((((('%X' % len(sssrmapRequest)) + '\r\n') + sssrmapRequest) + '0\r\n'))
        (statusCode, statusmessage, header) = webservice.getreply()
        responseStr = webservice.getfile().read()
        self.log.debug(('httpStatusCode: %d' % statusCode))
        self.log.info(('responseStr: %s' % responseStr))
        if (statusCode == 200):
            responseArr = responseStr.split('\n')
            responseBody = responseArr[2]
            try:
                doc = xml.dom.minidom.parseString(responseBody)
                responseVal = doc.getElementsByTagName('Value')[0].firstChild.nodeValue
                self.log.info(('responseVal: %s' % responseVal))
                if (responseVal == 'Success'):
                    return True
                else:
                    return False
            except Exception as e:
                self.log.error(('Unable to parse GOLD responseBody XML "(%s)" to get responseVal' % responseBody))
                self.log.debug(get_exception_string())
                return (ignoreErrors or False)
        else:
            self.log.error(('Invalid HTTP statusCode %d' % statusCode))
    except Exception as e:
        self.log.error(('Unable to POST message to GOLD server (%s, %d)' % (self.__goldHost, self.__goldPort)))
        self.log.debug(get_exception_string())
        return (ignoreErrors or False)
    return True
