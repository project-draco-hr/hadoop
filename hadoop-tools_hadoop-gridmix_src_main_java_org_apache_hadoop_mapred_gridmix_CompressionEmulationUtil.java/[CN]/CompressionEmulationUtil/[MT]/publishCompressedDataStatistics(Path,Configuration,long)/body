{
  FileSystem fs=inputDir.getFileSystem(conf);
  CompressionCodecFactory compressionCodecs=new CompressionCodecFactory(conf);
  long compressedDataSize=0;
  int numCompressedFiles=0;
  FileStatus[] outFileStatuses=fs.listStatus(inputDir,new Utils.OutputFileUtils.OutputFilesFilter());
  for (  FileStatus status : outFileStatuses) {
    if (compressionCodecs != null) {
      CompressionCodec codec=compressionCodecs.getCodec(status.getPath());
      if (codec != null) {
        ++numCompressedFiles;
        compressedDataSize+=status.getLen();
      }
    }
  }
  LOG.info("Gridmix is configured to use compressed input data.");
  LOG.info("Total size of compressed input data : " + StringUtils.humanReadableInt(compressedDataSize));
  LOG.info("Total number of compressed input data files : " + numCompressedFiles);
  if (numCompressedFiles == 0) {
    throw new RuntimeException("No compressed file found in the input" + " directory : " + inputDir.toString() + ". To enable compression"+ " emulation, run Gridmix either with "+ " an input directory containing compressed input file(s) or"+ " use the -generate option to (re)generate it. If compression"+ " emulation is not desired, disable it by setting '"+ COMPRESSION_EMULATION_ENABLE+ "' to 'false'.");
  }
  if (uncompressedDataSize > 0) {
    double ratio=((double)compressedDataSize) / uncompressedDataSize;
    LOG.info("Input Data Compression Ratio : " + ratio);
  }
  return new DataStatistics(compressedDataSize,numCompressedFiles,true);
}
