{
  FSImage spyImage1=NameNodeAdapter.spyOnFsImage(nns[1]);
  DelayAnswer answerer=new DelayAnswer(LOG);
  Mockito.doAnswer(answerer).when(spyImage1).saveNamespace(Mockito.any(FSNamesystem.class),Mockito.eq(NameNodeFile.IMAGE),Mockito.any(Canceler.class));
  doEdits(0,1000);
  nns[0].getRpcServer().rollEditLog();
  answerer.waitForCall();
  assertTrue("SBN is not performing checkpoint but it should be.",answerer.getFireCount() == 1 && answerer.getResultCount() == 0);
  ThreadUtil.sleepAtLeastIgnoreInterrupts(1000);
  try {
    nns[1].getRpcServer().getFileInfo("/");
    fail("Should have thrown StandbyException, but instead succeeded.");
  }
 catch (  StandbyException se) {
    GenericTestUtils.assertExceptionContains("is not supported",se);
  }
  assertEquals(0,cluster.getNamesystem(1).getPendingDataNodeMessageCount());
  doCreate();
  Thread.sleep(1000);
  assertTrue(cluster.getNamesystem(1).getPendingDataNodeMessageCount() > 0);
  assertTrue("SBN should have still been checkpointing.",answerer.getFireCount() == 1 && answerer.getResultCount() == 0);
  answerer.proceed();
  answerer.waitForResult();
  assertTrue("SBN should have finished checkpointing.",answerer.getFireCount() == 1 && answerer.getResultCount() == 1);
}
