{
  FSImage spyImage1=NameNodeAdapter.spyOnFsImage(nn1);
  DelayAnswer answerer=new DelayAnswer(LOG);
  Mockito.doAnswer(answerer).when(spyImage1).saveNamespace(Mockito.any(FSNamesystem.class),Mockito.any(NameNodeFile.class),Mockito.any(Canceler.class));
  doEdits(0,1000);
  nn0.getRpcServer().rollEditLog();
  answerer.waitForCall();
  assertTrue("SBN is not performing checkpoint but it should be.",answerer.getFireCount() == 1 && answerer.getResultCount() == 0);
  ThreadUtil.sleepAtLeastIgnoreInterrupts(1000);
  Thread t=new Thread(){
    @Override public void run(){
      try {
        nn1.getRpcServer().restoreFailedStorage("false");
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
;
  t.start();
  ThreadUtil.sleepAtLeastIgnoreInterrupts(1000);
  assertFalse(nn1.getNamesystem().getFsLockForTests().hasQueuedThreads());
  assertFalse(nn1.getNamesystem().getFsLockForTests().isWriteLocked());
  assertTrue(nn1.getNamesystem().getCpLockForTests().hasQueuedThreads());
  String pageContents=DFSTestUtil.urlGet(new URL("http://" + nn1.getHttpAddress().getHostName() + ":"+ nn1.getHttpAddress().getPort()+ "/jmx"));
  assertTrue(pageContents.contains("NumLiveDataNodes"));
  assertTrue("SBN should have still been checkpointing.",answerer.getFireCount() == 1 && answerer.getResultCount() == 0);
  answerer.proceed();
  answerer.waitForResult();
  assertTrue("SBN should have finished checkpointing.",answerer.getFireCount() == 1 && answerer.getResultCount() == 1);
  t.join();
}
