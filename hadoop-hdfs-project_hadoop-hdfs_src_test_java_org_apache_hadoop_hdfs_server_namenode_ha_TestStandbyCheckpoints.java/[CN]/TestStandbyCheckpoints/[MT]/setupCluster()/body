{
  tmpOivImgDir=Files.createTempDir();
  Configuration conf=new Configuration();
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_CHECK_PERIOD_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_TXNS_KEY,5);
  conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
  conf.set(DFSConfigKeys.DFS_NAMENODE_LEGACY_OIV_IMAGE_DIR_KEY,tmpOivImgDir.getAbsolutePath());
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_NUM_CHECKPOINTS_RETAINED_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_NUM_EXTRA_EDITS_RETAINED_KEY,0);
  conf.setBoolean(DFSConfigKeys.DFS_IMAGE_COMPRESS_KEY,true);
  conf.set(DFSConfigKeys.DFS_IMAGE_COMPRESSION_CODEC_KEY,SlowCodec.class.getCanonicalName());
  CompressionCodecFactory.setCodecClasses(conf,ImmutableList.<Class>of(SlowCodec.class));
  MiniDFSNNTopology topology=new MiniDFSNNTopology().addNameservice(new MiniDFSNNTopology.NSConf("ns1").addNN(new MiniDFSNNTopology.NNConf("nn1").setHttpPort(10061)).addNN(new MiniDFSNNTopology.NNConf("nn2").setHttpPort(10062)));
  cluster=new MiniDFSCluster.Builder(conf).nnTopology(topology).numDataNodes(0).build();
  cluster.waitActive();
  nn0=cluster.getNameNode(0);
  nn1=cluster.getNameNode(1);
  fs=HATestUtil.configureFailoverFs(cluster,conf);
  cluster.transitionToActive(0);
}
