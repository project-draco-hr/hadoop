{
  boolean loggingEnabled=LOG.isDebugEnabled();
  if (loggingEnabled) {
    LOG.debug("(initTasks@SJIP) Starting Initialization for " + jobId);
  }
  numMapTasks=jobStory.getNumberMaps();
  numReduceTasks=jobStory.getNumberReduces();
  logSubmissionToJobHistory();
  if (loggingEnabled) {
    LOG.debug("(initTasks@SJIP) Logged to job history for " + jobId);
  }
  checkTaskLimits();
  if (loggingEnabled) {
    LOG.debug("(initTasks@SJIP) Checked task limits for " + jobId);
  }
  final String jobFile="default";
  taskSplitMetaInfo=createSplits(jobStory);
  if (loggingEnabled) {
    LOG.debug("(initTasks@SJIP) Created splits for job = " + jobId + " number of splits = "+ taskSplitMetaInfo.length);
  }
  createMapTasks(jobFile,taskSplitMetaInfo);
  if (numMapTasks > 0) {
    nonRunningMapCache=createCache(taskSplitMetaInfo,maxLevel);
    if (loggingEnabled) {
      LOG.debug("initTasks:numMaps=" + numMapTasks + " Size of nonRunningMapCache="+ nonRunningMapCache.size()+ " for "+ jobId);
    }
  }
  this.launchTime=JobTracker.getClock().getTime();
  createReduceTasks(jobFile);
  completedMapsForReduceSlowstart=(int)Math.ceil((conf.getFloat("mapred.reduce.slowstart." + "completed.maps",DEFAULT_COMPLETED_MAPS_PERCENT_FOR_REDUCE_SLOWSTART) * numMapTasks));
  tasksInited.set(true);
  if (loggingEnabled) {
    LOG.debug("Initializing job, nowstatus = " + JobStatus.getJobRunState(getStatus().getRunState()));
  }
  setupComplete();
  if (loggingEnabled) {
    LOG.debug("Initializing job, inited-status = " + JobStatus.getJobRunState(getStatus().getRunState()));
  }
}
