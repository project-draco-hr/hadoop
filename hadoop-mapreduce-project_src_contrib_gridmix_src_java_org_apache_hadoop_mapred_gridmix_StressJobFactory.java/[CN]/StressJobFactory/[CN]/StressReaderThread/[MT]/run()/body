{
  try {
    startFlag.await();
    if (Thread.currentThread().isInterrupted()) {
      return;
    }
    LOG.info("START STRESS @ " + System.currentTimeMillis());
    while (!Thread.currentThread().isInterrupted()) {
      try {
        while (loadStatus.overloaded()) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Cluster overloaded in run! Sleeping...");
          }
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException ie) {
            return;
          }
        }
        while (!loadStatus.overloaded()) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Cluster underloaded in run! Stressing...");
          }
          try {
            final JobStory job=getNextJobFiltered();
            if (null == job) {
              return;
            }
            if (LOG.isDebugEnabled()) {
              LOG.debug("Job Selected: " + job.getJobID());
            }
            submitter.add(jobCreator.createGridmixJob(conf,0L,job,scratch,userResolver.getTargetUgi(UserGroupInformation.createRemoteUser(job.getUser())),sequence.getAndIncrement()));
            int incompleteMapTasks=(int)calcEffectiveIncompleteMapTasks(loadStatus.getMapCapacity(),job.getNumberMaps(),0.0f);
            loadStatus.decrementMapLoad(incompleteMapTasks);
            int incompleteReduceTasks=(int)calcEffectiveIncompleteReduceTasks(loadStatus.getReduceCapacity(),job.getNumberReduces(),0.0f);
            loadStatus.decrementReduceLoad(incompleteReduceTasks);
            loadStatus.decrementJobLoad(1);
          }
 catch (          IOException e) {
            LOG.error("Error while submitting the job ",e);
            error=e;
            return;
          }
        }
      }
  finally {
      }
    }
  }
 catch (  InterruptedException e) {
    return;
  }
 finally {
    IOUtils.cleanup(null,jobProducer);
  }
}
