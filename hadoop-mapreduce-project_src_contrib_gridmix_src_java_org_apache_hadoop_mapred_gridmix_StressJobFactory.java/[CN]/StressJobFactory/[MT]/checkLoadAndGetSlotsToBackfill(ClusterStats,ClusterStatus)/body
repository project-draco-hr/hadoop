{
  int mapCapacity=clusterStatus.getMaxMapTasks();
  loadStatus.updateMapCapacity(mapCapacity);
  int reduceCapacity=clusterStatus.getMaxReduceTasks();
  loadStatus.updateReduceCapacity(reduceCapacity);
  int numTrackers=clusterStatus.getTaskTrackers();
  int jobLoad=(int)(maxJobTrackerRatio * numTrackers) - stats.getNumRunningJob();
  loadStatus.updateJobLoad(jobLoad);
  if (loadStatus.getJobLoad() <= 0) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(System.currentTimeMillis() + " [JobLoad] Overloaded is " + Boolean.TRUE.toString()+ " NumJobsBackfill is "+ loadStatus.getJobLoad());
    }
    return;
  }
  float incompleteMapTasks=0;
  for (  JobStats job : ClusterStats.getRunningJobStats()) {
    float mapProgress=job.getJob().mapProgress();
    int noOfMaps=job.getNoOfMaps();
    incompleteMapTasks+=calcEffectiveIncompleteMapTasks(mapCapacity,noOfMaps,mapProgress);
  }
  int mapSlotsBackFill=(int)((overloadMapTaskMapSlotRatio * mapCapacity) - incompleteMapTasks);
  loadStatus.updateMapLoad(mapSlotsBackFill);
  if (loadStatus.getMapLoad() <= 0) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(System.currentTimeMillis() + " [MAP-LOAD] Overloaded is " + Boolean.TRUE.toString()+ " MapSlotsBackfill is "+ loadStatus.getMapLoad());
    }
    return;
  }
  float incompleteReduceTasks=0;
  for (  JobStats job : ClusterStats.getRunningJobStats()) {
    int noOfReduces=job.getNoOfReds();
    if (noOfReduces > 0) {
      float reduceProgress=job.getJob().reduceProgress();
      incompleteReduceTasks+=calcEffectiveIncompleteReduceTasks(reduceCapacity,noOfReduces,reduceProgress);
    }
  }
  int reduceSlotsBackFill=(int)((overloadReduceTaskReduceSlotRatio * reduceCapacity) - incompleteReduceTasks);
  loadStatus.updateReduceLoad(reduceSlotsBackFill);
  if (loadStatus.getReduceLoad() <= 0) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(System.currentTimeMillis() + " [REDUCE-LOAD] Overloaded is " + Boolean.TRUE.toString()+ " ReduceSlotsBackfill is "+ loadStatus.getReduceLoad());
    }
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(System.currentTimeMillis() + " [OVERALL] Overloaded is " + Boolean.FALSE.toString()+ "Current load Status is "+ loadStatus);
  }
}
