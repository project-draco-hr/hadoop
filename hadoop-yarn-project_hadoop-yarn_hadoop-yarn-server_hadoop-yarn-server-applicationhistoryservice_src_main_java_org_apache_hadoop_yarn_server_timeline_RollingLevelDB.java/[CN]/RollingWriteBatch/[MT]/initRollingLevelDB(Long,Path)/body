{
  if (rollingdbs.containsKey(dbStartTime)) {
    return;
  }
  Options options=new Options();
  options.createIfMissing(true);
  options.cacheSize(conf.getLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_READ_CACHE_SIZE));
  options.maxOpenFiles(conf.getInt(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_MAX_OPEN_FILES));
  options.writeBufferSize(conf.getInt(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_WRITE_BUFFER_SIZE));
  LOG.info("Initializing rolling leveldb instance :" + rollingInstanceDBPath + " for start time: "+ dbStartTime);
  DB db=null;
  try {
    db=factory.open(new File(rollingInstanceDBPath.toUri().getPath()),options);
    rollingdbs.put(dbStartTime,db);
    String dbName=fdf.format(dbStartTime);
    LOG.info("Added rolling leveldb instance " + dbName + " to "+ getName());
  }
 catch (  IOException ioe) {
    LOG.warn("Failed to open rolling leveldb instance :" + new File(rollingInstanceDBPath.toUri().getPath()),ioe);
  }
}
