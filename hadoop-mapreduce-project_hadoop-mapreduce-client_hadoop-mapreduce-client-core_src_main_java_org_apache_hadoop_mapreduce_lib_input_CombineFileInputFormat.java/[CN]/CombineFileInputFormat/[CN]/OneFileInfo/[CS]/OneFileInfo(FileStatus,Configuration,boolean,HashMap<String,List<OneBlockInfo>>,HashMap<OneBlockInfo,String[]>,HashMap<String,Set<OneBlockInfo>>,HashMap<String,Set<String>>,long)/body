{
  this.fileSize=0;
  BlockLocation[] locations;
  if (stat instanceof LocatedFileStatus) {
    locations=((LocatedFileStatus)stat).getBlockLocations();
  }
 else {
    FileSystem fs=stat.getPath().getFileSystem(conf);
    locations=fs.getFileBlockLocations(stat,0,stat.getLen());
  }
  if (locations == null) {
    blocks=new OneBlockInfo[0];
  }
 else {
    if (locations.length == 0 && !stat.isDirectory()) {
      locations=new BlockLocation[]{new BlockLocation()};
    }
    if (!isSplitable) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("File is not splittable so no parallelization " + "is possible: " + stat.getPath());
      }
      blocks=new OneBlockInfo[1];
      fileSize=stat.getLen();
      blocks[0]=new OneBlockInfo(stat.getPath(),0,fileSize,locations[0].getHosts(),locations[0].getTopologyPaths());
    }
 else {
      ArrayList<OneBlockInfo> blocksList=new ArrayList<OneBlockInfo>(locations.length);
      for (int i=0; i < locations.length; i++) {
        fileSize+=locations[i].getLength();
        long left=locations[i].getLength();
        long myOffset=locations[i].getOffset();
        long myLength=0;
        do {
          if (maxSize == 0) {
            myLength=left;
          }
 else {
            if (left > maxSize && left < 2 * maxSize) {
              myLength=left / 2;
            }
 else {
              myLength=Math.min(maxSize,left);
            }
          }
          OneBlockInfo oneblock=new OneBlockInfo(stat.getPath(),myOffset,myLength,locations[i].getHosts(),locations[i].getTopologyPaths());
          left-=myLength;
          myOffset+=myLength;
          blocksList.add(oneblock);
        }
 while (left > 0);
      }
      blocks=blocksList.toArray(new OneBlockInfo[blocksList.size()]);
    }
    populateBlockInfo(blocks,rackToBlocks,blockToNodes,nodeToBlocks,rackToNodes);
  }
}
