{
  Map<ReservationInterval,Resource> req=new TreeMap<ReservationInterval,Resource>();
  long win=86400000 / 4 + 1;
  int cont=(int)Math.ceil(0.5 * totCont);
  req.put(new ReservationInterval(initTime,initTime + win),ReservationSystemUtil.toResource(ReservationRequest.newInstance(Resource.newInstance(1024,1),cont)));
  ReservationDefinition rDef=ReservationSystemTestUtil.createSimpleReservationDefinition(initTime,initTime + win,win);
  assertTrue(plan.toString(),plan.addReservation(new InMemoryReservationAllocation(ReservationSystemTestUtil.getNewReservationId(),rDef,"u1","dedicated",initTime,initTime + win,req,res,minAlloc)));
  try {
    assertTrue(plan.toString(),plan.addReservation(new InMemoryReservationAllocation(ReservationSystemTestUtil.getNewReservationId(),null,"u1","dedicated",initTime,initTime + win,req,res,minAlloc)));
    Assert.fail("should not have accepted this");
  }
 catch (  PlanningQuotaException e) {
  }
}
