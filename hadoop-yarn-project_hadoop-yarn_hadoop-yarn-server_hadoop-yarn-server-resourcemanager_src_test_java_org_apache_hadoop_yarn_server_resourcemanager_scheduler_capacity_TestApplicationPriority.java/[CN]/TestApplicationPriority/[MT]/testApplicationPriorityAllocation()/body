{
  Configuration conf=new Configuration();
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  conf.setInt(YarnConfiguration.MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY,10);
  MockRM rm=new MockRM(conf);
  rm.start();
  Priority appPriority1=Priority.newInstance(5);
  MockNM nm1=rm.registerNode("127.0.0.1:1234",16 * GB);
  RMApp app1=rm.submitApp(1 * GB,appPriority1);
  MockAM am1=MockRM.launchAM(app1,rm,nm1);
  am1.registerAppAttempt();
  am1.addRequests(new String[]{"127.0.0.1","127.0.0.2"},2 * GB,1,7);
  AllocateResponse alloc1Response=am1.schedule();
  nm1.nodeHeartbeat(true);
  while (alloc1Response.getAllocatedContainers().size() < 1) {
    LOG.info("Waiting for containers to be created for app 1...");
    Thread.sleep(100);
    alloc1Response=am1.schedule();
  }
  List<Container> allocated1=alloc1Response.getAllocatedContainers();
  Assert.assertEquals(7,allocated1.size());
  Assert.assertEquals(2 * GB,allocated1.get(0).getResource().getMemory());
  SchedulerNodeReport report_nm1=rm.getResourceScheduler().getNodeReport(nm1.getNodeId());
  Assert.assertEquals(15 * GB,report_nm1.getUsedResource().getMemory());
  Assert.assertEquals(1 * GB,report_nm1.getAvailableResource().getMemory());
  Priority appPriority2=Priority.newInstance(8);
  RMApp app2=rm.submitApp(1 * GB,appPriority2);
  nm1.nodeHeartbeat(true);
  MockAM am2=rm.sendAMLaunched(app2.getCurrentAppAttempt().getAppAttemptId());
  am2.registerAppAttempt();
  report_nm1=rm.getResourceScheduler().getNodeReport(nm1.getNodeId());
  Assert.assertEquals(16 * GB,report_nm1.getUsedResource().getMemory());
  Assert.assertEquals(0 * GB,report_nm1.getAvailableResource().getMemory());
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  FiCaSchedulerApp schedulerAppAttempt=cs.getSchedulerApplications().get(app1.getApplicationId()).getCurrentAppAttempt();
  int counter=0;
  for (  Container c : allocated1) {
    if (++counter > 2) {
      break;
    }
    cs.killContainer(schedulerAppAttempt.getRMContainer(c.getId()));
  }
  report_nm1=rm.getResourceScheduler().getNodeReport(nm1.getNodeId());
  Assert.assertEquals(12 * GB,report_nm1.getUsedResource().getMemory());
  Assert.assertEquals(4 * GB,report_nm1.getAvailableResource().getMemory());
  am1.addRequests(new String[]{"127.0.0.1","127.0.0.2"},2 * GB,1,10);
  am1.schedule();
  am2.addRequests(new String[]{"127.0.0.1","127.0.0.2"},2 * GB,1,3);
  AllocateResponse alloc1Response4=am2.schedule();
  nm1.nodeHeartbeat(true);
  while (alloc1Response4.getAllocatedContainers().size() < 1) {
    LOG.info("Waiting for containers to be created for app 2...");
    Thread.sleep(100);
    alloc1Response4=am2.schedule();
  }
  report_nm1=rm.getResourceScheduler().getNodeReport(nm1.getNodeId());
  Assert.assertEquals(16 * GB,report_nm1.getUsedResource().getMemory());
  Assert.assertEquals(0 * GB,report_nm1.getAvailableResource().getMemory());
  rm.stop();
}
