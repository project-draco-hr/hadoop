{
  Configuration conf=new Configuration();
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  conf.setInt(YarnConfiguration.MAX_CLUSTER_LEVEL_APPLICATION_PRIORITY,10);
  MockRM rm=new MockRM(conf);
  rm.start();
  Priority appPriority1=Priority.newInstance(5);
  MockNM nm1=rm.registerNode("127.0.0.1:1234",16 * GB);
  RMApp app1=rm.submitApp(1 * GB,appPriority1);
  MockAM am1=MockRM.launchAM(app1,rm,nm1);
  am1.registerAppAttempt();
  int NUM_CONTAINERS=7;
  List<Container> allocated1=am1.allocateAndWaitForContainers("127.0.0.1",NUM_CONTAINERS,2 * GB,nm1);
  Assert.assertEquals(7,allocated1.size());
  Assert.assertEquals(2 * GB,allocated1.get(0).getResource().getMemory());
  SchedulerNodeReport report_nm1=rm.getResourceScheduler().getNodeReport(nm1.getNodeId());
  Assert.assertEquals(15 * GB,report_nm1.getUsedResource().getMemory());
  Assert.assertEquals(1 * GB,report_nm1.getAvailableResource().getMemory());
  Priority appPriority2=Priority.newInstance(8);
  RMApp app2=rm.submitApp(1 * GB,appPriority2);
  nm1.nodeHeartbeat(true);
  MockAM am2=MockRM.launchAM(app2,rm,nm1);
  am2.registerAppAttempt();
  report_nm1=rm.getResourceScheduler().getNodeReport(nm1.getNodeId());
  Assert.assertEquals(16 * GB,report_nm1.getUsedResource().getMemory());
  Assert.assertEquals(0 * GB,report_nm1.getAvailableResource().getMemory());
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  FiCaSchedulerApp schedulerAppAttemptApp1=cs.getSchedulerApplications().get(app1.getApplicationId()).getCurrentAppAttempt();
  int counter=0;
  for (Iterator<Container> iterator=allocated1.iterator(); iterator.hasNext(); ) {
    Container c=iterator.next();
    if (++counter > 2) {
      break;
    }
    cs.killContainer(schedulerAppAttemptApp1.getRMContainer(c.getId()));
    iterator.remove();
  }
  report_nm1=rm.getResourceScheduler().getNodeReport(nm1.getNodeId());
  Assert.assertEquals(12 * GB,report_nm1.getUsedResource().getMemory());
  Assert.assertEquals(4 * GB,report_nm1.getAvailableResource().getMemory());
  am1.allocate("127.0.0.1",2 * GB,10,new ArrayList<ContainerId>());
  List<Container> allocated2=am2.allocateAndWaitForContainers("127.0.0.1",2,2 * GB,nm1);
  Assert.assertEquals(2,allocated2.size());
  report_nm1=rm.getResourceScheduler().getNodeReport(nm1.getNodeId());
  Assert.assertEquals(16 * GB,report_nm1.getUsedResource().getMemory());
  Assert.assertEquals(0 * GB,report_nm1.getAvailableResource().getMemory());
  counter=0;
  for (Iterator<Container> iterator=allocated1.iterator(); iterator.hasNext(); ) {
    Container c=iterator.next();
    if (++counter > 1) {
      break;
    }
    cs.killContainer(schedulerAppAttemptApp1.getRMContainer(c.getId()));
    iterator.remove();
  }
  report_nm1=rm.getResourceScheduler().getNodeReport(nm1.getNodeId());
  Assert.assertEquals(14 * GB,report_nm1.getUsedResource().getMemory());
  Assert.assertEquals(2 * GB,report_nm1.getAvailableResource().getMemory());
  Priority appPriority3=Priority.newInstance(3);
  cs.updateApplicationPriority(appPriority3,app2.getApplicationId());
  am2.allocate("127.0.0.1",2 * GB,3,new ArrayList<ContainerId>());
  List<Container> allocated3=am1.allocateAndWaitForContainers("127.0.0.1",1,2 * GB,nm1);
  Assert.assertEquals(1,allocated3.size());
  Assert.assertEquals(6,schedulerAppAttemptApp1.getLiveContainers().size());
  rm.stop();
}
