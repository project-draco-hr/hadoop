{
  final List<RMApp> apps=MockAsm.newApplications(numApps);
  final ConcurrentMap<ApplicationId,RMApp> applicationsMaps=Maps.newConcurrentMap();
  for (  RMApp app : apps) {
    applicationsMaps.put(app.getApplicationId(),app);
  }
  final List<RMNode> nodes=MockNodes.newNodes(racks,numNodes,newResource(mbsPerNode));
  final ConcurrentMap<NodeId,RMNode> nodesMap=Maps.newConcurrentMap();
  for (  RMNode node : nodes) {
    nodesMap.put(node.getNodeID(),node);
  }
  final List<RMNode> deactivatedNodes=MockNodes.deactivatedNodes(racks,numNodes,newResource(mbsPerNode));
  final ConcurrentMap<String,RMNode> deactivatedNodesMap=Maps.newConcurrentMap();
  for (  RMNode node : deactivatedNodes) {
    deactivatedNodesMap.put(node.getHostName(),node);
  }
  RMContextImpl rmContext=new RMContextImpl(null,null,null,null,null,null,null,null,null,null){
    @Override public ConcurrentMap<ApplicationId,RMApp> getRMApps(){
      return applicationsMaps;
    }
    @Override public ConcurrentMap<String,RMNode> getInactiveRMNodes(){
      return deactivatedNodesMap;
    }
    @Override public ConcurrentMap<NodeId,RMNode> getRMNodes(){
      return nodesMap;
    }
  }
;
  rmContext.setNodeLabelManager(new MemoryRMNodeLabelsManager());
  return rmContext;
}
