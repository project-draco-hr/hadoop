{
  TestSetup setup=new TestSetup(new TestSuite(TestSeveral.class)){
    protected void setUp() throws Exception {
      Configuration conf=new Configuration();
      conf.setInt("dfs.replication",1);
      dfs=new MiniDFSCluster(conf,numTT,true,null);
      fs=DFS_UGI.doAs(new PrivilegedExceptionAction<FileSystem>(){
        public FileSystem run() throws IOException {
          return dfs.getFileSystem();
        }
      }
);
      TestMiniMRWithDFSWithDistinctUsers.mkdir(fs,"/user","mapred","mapred",(short)01777);
      TestMiniMRWithDFSWithDistinctUsers.mkdir(fs,"/mapred","mapred","mapred",(short)01777);
      TestMiniMRWithDFSWithDistinctUsers.mkdir(fs,conf.get(JTConfig.JT_STAGING_AREA_ROOT),"mapred","mapred",(short)01777);
      UserGroupInformation MR_UGI=UserGroupInformation.getLoginUser();
      myListener=new MyListener();
      conf.set(JTConfig.JT_IPC_HANDLER_COUNT,"1");
      mrCluster=new MiniMRCluster(0,0,numTT,fs.getUri().toString(),1,null,null,MR_UGI,new JobConf());
      mrCluster.setInlineCleanupThreads();
      mrCluster.getJobTrackerRunner().getJobTracker().addJobInProgressListener(myListener);
    }
    protected void tearDown() throws Exception {
      if (fs != null) {
        fs.close();
      }
      if (dfs != null) {
        dfs.shutdown();
      }
      if (mrCluster != null) {
        mrCluster.shutdown();
      }
    }
  }
;
  return setup;
}
