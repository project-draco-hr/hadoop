{
  AuthenticationFilter filter=new AuthenticationFilter();
  try {
    FilterConfig config=Mockito.mock(FilterConfig.class);
    Mockito.when(config.getInitParameter(AuthenticationFilter.AUTH_TYPE)).thenReturn(DummyAuthenticationHandler.class.getName());
    Mockito.when(config.getInitParameter(AuthenticationFilter.SIGNATURE_SECRET)).thenReturn("secret");
    Mockito.when(config.getInitParameterNames()).thenReturn(new Vector(Arrays.asList(AuthenticationFilter.AUTH_TYPE,AuthenticationFilter.SIGNATURE_SECRET)).elements());
    filter.init(config);
    AuthenticationToken token=new AuthenticationToken("u","p","invalidtype");
    token.setExpires(System.currentTimeMillis() - 1000);
    Signer signer=new Signer("secret".getBytes());
    String tokenSigned=signer.sign(token.toString());
    Cookie cookie=new Cookie(AuthenticatedURL.AUTH_COOKIE,tokenSigned);
    HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
    Mockito.when(request.getCookies()).thenReturn(new Cookie[]{cookie});
    try {
      filter.getToken(request);
      fail();
    }
 catch (    AuthenticationException ex) {
    }
catch (    Exception ex) {
      fail();
    }
  }
  finally {
    filter.destroy();
  }
}
