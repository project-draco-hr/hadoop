{
  FileSystem.setDefaultUri(conf,"hdfs://" + nnSocketAddr.getHostName() + ":"+ nnSocketAddr.getPort());
  ArrayList<StorageLocation> locations=new ArrayList<StorageLocation>();
  File dataDir=new File(dnDataDir);
  FileUtil.fullyDelete(dataDir);
  dataDir.mkdirs();
  StorageLocation location=StorageLocation.parse(dataDir.getPath());
  locations.add(location);
  final DatanodeProtocolClientSideTranslatorPB namenode=mock(DatanodeProtocolClientSideTranslatorPB.class);
  Mockito.doAnswer(new Answer<DatanodeRegistration>(){
    @Override public DatanodeRegistration answer(    InvocationOnMock invocation) throws Throwable {
      return (DatanodeRegistration)invocation.getArguments()[0];
    }
  }
).when(namenode).registerDatanode(Mockito.any(DatanodeRegistration.class));
  when(namenode.versionRequest()).thenReturn(new NamespaceInfo(1,TEST_CLUSTER_ID,TEST_POOL_ID,1L));
  when(namenode.sendHeartbeat(Mockito.any(DatanodeRegistration.class),Mockito.any(StorageReport[].class),Mockito.anyLong(),Mockito.anyLong(),Mockito.anyInt(),Mockito.anyInt(),Mockito.anyInt(),Mockito.any(VolumeFailureSummary.class),Mockito.anyBoolean())).thenReturn(new HeartbeatResponse(new DatanodeCommand[0],new NNHAStatusHeartbeat(HAServiceState.ACTIVE,1),null,ThreadLocalRandom.current().nextLong() | 1L));
  DataNode dn=new DataNode(conf,locations,null){
    @Override DatanodeProtocolClientSideTranslatorPB connectToNN(    InetSocketAddress nnAddr) throws IOException {
      Assert.assertEquals(nnSocketAddr,nnAddr);
      return namenode;
    }
  }
;
  dn.getAllBpOs().get(0).triggerHeartbeatForTests();
  return dn;
}
