{
  containerManager.start();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  Container mockContainer=mock(Container.class);
  ApplicationId appId=recordFactory.newRecordInstance(ApplicationId.class);
  appId.setClusterTimestamp(0);
  appId.setId(0);
  ApplicationAttemptId appAttemptId=recordFactory.newRecordInstance(ApplicationAttemptId.class);
  appAttemptId.setApplicationId(appId);
  appAttemptId.setAttemptId(1);
  ContainerId cId=recordFactory.newRecordInstance(ContainerId.class);
  int port=12345;
  cId.setApplicationAttemptId(appAttemptId);
  when(mockContainer.getId()).thenReturn(cId);
  when(mockContainer.getNodeId()).thenReturn(context.getNodeId());
  when(mockContainer.getNodeHttpAddress()).thenReturn(context.getNodeId().getHost() + ":" + port);
  Map<String,String> userSetEnv=new HashMap<String,String>();
  userSetEnv.put(Environment.CONTAINER_ID.name(),"user_set_container_id");
  userSetEnv.put(Environment.NM_HOST.name(),"user_set_NM_HOST");
  userSetEnv.put(Environment.NM_PORT.name(),"user_set_NM_PORT");
  userSetEnv.put(Environment.NM_HTTP_PORT.name(),"user_set_NM_HTTP_PORT");
  userSetEnv.put(Environment.LOCAL_DIRS.name(),"user_set_LOCAL_DIR");
  containerLaunchContext.setEnvironment(userSetEnv);
  File scriptFile=Shell.appendScriptExtension(tmpDir,"scriptFile");
  PrintWriter fileWriter=new PrintWriter(scriptFile);
  File processStartFile=new File(tmpDir,"env_vars.txt").getAbsoluteFile();
  if (Shell.WINDOWS) {
    fileWriter.println("@echo " + Environment.CONTAINER_ID.$() + "> "+ processStartFile);
    fileWriter.println("@echo " + Environment.NM_HOST.$() + ">> "+ processStartFile);
    fileWriter.println("@echo " + Environment.NM_PORT.$() + ">> "+ processStartFile);
    fileWriter.println("@echo " + Environment.NM_HTTP_PORT.$() + ">> "+ processStartFile);
    fileWriter.println("@echo " + Environment.LOCAL_DIRS.$() + ">> "+ processStartFile);
    fileWriter.println("@ping -n 100 127.0.0.1 >nul");
  }
 else {
    fileWriter.write("\numask 0");
    fileWriter.write("\necho $" + Environment.CONTAINER_ID.name() + " > "+ processStartFile);
    fileWriter.write("\necho $" + Environment.NM_HOST.name() + " >> "+ processStartFile);
    fileWriter.write("\necho $" + Environment.NM_PORT.name() + " >> "+ processStartFile);
    fileWriter.write("\necho $" + Environment.NM_HTTP_PORT.name() + " >> "+ processStartFile);
    fileWriter.write("\necho $" + Environment.LOCAL_DIRS.name() + " >> "+ processStartFile);
    fileWriter.write("\necho $$ >> " + processStartFile);
    fileWriter.write("\nexec sleep 100");
  }
  fileWriter.close();
  URL resource_alpha=ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));
  LocalResource rsrc_alpha=recordFactory.newRecordInstance(LocalResource.class);
  rsrc_alpha.setResource(resource_alpha);
  rsrc_alpha.setSize(-1);
  rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);
  rsrc_alpha.setType(LocalResourceType.FILE);
  rsrc_alpha.setTimestamp(scriptFile.lastModified());
  String destinationFile="dest_file";
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  localResources.put(destinationFile,rsrc_alpha);
  containerLaunchContext.setLocalResources(localResources);
  List<String> commands=Arrays.asList(Shell.getRunScriptCommand(scriptFile));
  containerLaunchContext.setCommands(commands);
  Resource r=BuilderUtils.newResource(1024,1);
  when(mockContainer.getResource()).thenReturn(r);
  StartContainerRequest startRequest=recordFactory.newRecordInstance(StartContainerRequest.class);
  startRequest.setContainerLaunchContext(containerLaunchContext);
  ContainerToken containerToken=BuilderUtils.newContainerToken(cId,context.getNodeId().getHost(),port,user,r,System.currentTimeMillis() + 10000L,1234,"password".getBytes(),super.DUMMY_RM_IDENTIFIER);
  when(mockContainer.getContainerToken()).thenReturn(containerToken);
  startRequest.setContainer(mockContainer);
  containerManager.startContainer(startRequest);
  int timeoutSecs=0;
  while (!processStartFile.exists() && timeoutSecs++ < 20) {
    Thread.sleep(1000);
    LOG.info("Waiting for process start-file to be created");
  }
  Assert.assertTrue("ProcessStartFile doesn't exist!",processStartFile.exists());
  List<String> localDirs=dirsHandler.getLocalDirs();
  List<Path> appDirs=new ArrayList<Path>(localDirs.size());
  for (  String localDir : localDirs) {
    Path usersdir=new Path(localDir,ContainerLocalizer.USERCACHE);
    Path userdir=new Path(usersdir,user);
    Path appsdir=new Path(userdir,ContainerLocalizer.APPCACHE);
    appDirs.add(new Path(appsdir,appId.toString()));
  }
  BufferedReader reader=new BufferedReader(new FileReader(processStartFile));
  Assert.assertEquals(cId.toString(),reader.readLine());
  Assert.assertEquals(mockContainer.getNodeId().getHost(),reader.readLine());
  Assert.assertEquals(String.valueOf(mockContainer.getNodeId().getPort()),reader.readLine());
  Assert.assertEquals(String.valueOf(mockContainer.getNodeHttpAddress().split(":")[1]),reader.readLine());
  Assert.assertEquals(StringUtils.join(",",appDirs),reader.readLine());
  Assert.assertEquals(cId.toString(),containerLaunchContext.getEnvironment().get(Environment.CONTAINER_ID.name()));
  Assert.assertEquals(mockContainer.getNodeId().getHost(),containerLaunchContext.getEnvironment().get(Environment.NM_HOST.name()));
  Assert.assertEquals(String.valueOf(mockContainer.getNodeId().getPort()),containerLaunchContext.getEnvironment().get(Environment.NM_PORT.name()));
  Assert.assertEquals(mockContainer.getNodeHttpAddress().split(":")[1],containerLaunchContext.getEnvironment().get(Environment.NM_HTTP_PORT.name()));
  Assert.assertEquals(StringUtils.join(",",appDirs),containerLaunchContext.getEnvironment().get(Environment.LOCAL_DIRS.name()));
  String pid=reader.readLine().trim();
  Assert.assertEquals(null,reader.readLine());
  Assert.assertTrue("Process is not alive!",DefaultContainerExecutor.containerIsAlive(pid));
  Assert.assertTrue("Process is not alive!",DefaultContainerExecutor.containerIsAlive(pid));
  StopContainerRequest stopRequest=recordFactory.newRecordInstance(StopContainerRequest.class);
  stopRequest.setContainerId(cId);
  containerManager.stopContainer(stopRequest);
  BaseContainerManagerTest.waitForContainerState(containerManager,cId,ContainerState.COMPLETE);
  GetContainerStatusRequest gcsRequest=recordFactory.newRecordInstance(GetContainerStatusRequest.class);
  gcsRequest.setContainerId(cId);
  ContainerStatus containerStatus=containerManager.getContainerStatus(gcsRequest).getStatus();
  int expectedExitCode=Shell.WINDOWS ? ExitCode.FORCE_KILLED.getExitCode() : ExitCode.TERMINATED.getExitCode();
  Assert.assertEquals(expectedExitCode,containerStatus.getExitStatus());
  Assert.assertFalse("Process is still alive!",DefaultContainerExecutor.containerIsAlive(pid));
}
