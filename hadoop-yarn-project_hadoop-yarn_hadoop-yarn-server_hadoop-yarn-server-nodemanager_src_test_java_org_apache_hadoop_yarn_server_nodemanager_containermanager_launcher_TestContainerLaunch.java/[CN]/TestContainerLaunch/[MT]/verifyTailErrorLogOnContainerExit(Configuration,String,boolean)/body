{
  Container container=mock(Container.class);
  ApplicationId appId=ApplicationId.newInstance(System.currentTimeMillis(),1);
  ContainerId containerId=ContainerId.newContainerId(ApplicationAttemptId.newInstance(appId,1),1);
  when(container.getContainerId()).thenReturn(containerId);
  when(container.getUser()).thenReturn("test");
  String relativeContainerLogDir=ContainerLaunch.getRelativeContainerLogDir(appId.toString(),ConverterUtils.toString(containerId));
  Path containerLogDir=dirsHandler.getLogPathForWrite(relativeContainerLogDir,false);
  ContainerLaunchContext clc=mock(ContainerLaunchContext.class);
  List<String> invalidCommand=new ArrayList<String>();
  invalidCommand.add("$JAVA_HOME/bin/java");
  invalidCommand.add("-Djava.io.tmpdir=$PWD/tmp");
  invalidCommand.add("-Dlog4j.configuration=container-log4j.properties");
  invalidCommand.add("-Dyarn.app.container.log.dir=" + containerLogDir);
  invalidCommand.add("-Dyarn.app.container.log.filesize=0");
  invalidCommand.add("-Dhadoop.root.logger=INFO,CLA");
  invalidCommand.add("-Dhadoop.root.logfile=syslog");
  invalidCommand.add("-Xmx1024m");
  invalidCommand.add("org.apache.hadoop.mapreduce.v2.app.MRAppMaster");
  invalidCommand.add("1>" + containerLogDir + "/stdout");
  invalidCommand.add("2>" + containerLogDir + errorFileName);
  when(clc.getCommands()).thenReturn(invalidCommand);
  Map<String,String> userSetEnv=new HashMap<String,String>();
  userSetEnv.put(Environment.CONTAINER_ID.name(),"user_set_container_id");
  userSetEnv.put("JAVA_HOME",INVALID_JAVA_HOME);
  userSetEnv.put(Environment.NM_HOST.name(),"user_set_NM_HOST");
  userSetEnv.put(Environment.NM_PORT.name(),"user_set_NM_PORT");
  userSetEnv.put(Environment.NM_HTTP_PORT.name(),"user_set_NM_HTTP_PORT");
  userSetEnv.put(Environment.LOCAL_DIRS.name(),"user_set_LOCAL_DIR");
  userSetEnv.put(Environment.USER.key(),"user_set_" + Environment.USER.key());
  userSetEnv.put(Environment.LOGNAME.name(),"user_set_LOGNAME");
  userSetEnv.put(Environment.PWD.name(),"user_set_PWD");
  userSetEnv.put(Environment.HOME.name(),"user_set_HOME");
  userSetEnv.put(Environment.CLASSPATH.name(),"APATH");
  when(clc.getEnvironment()).thenReturn(userSetEnv);
  when(container.getLaunchContext()).thenReturn(clc);
  when(container.getLocalizedResources()).thenReturn(Collections.<Path,List<String>>emptyMap());
  Dispatcher dispatcher=mock(Dispatcher.class);
  @SuppressWarnings("rawtypes") ContainerExitHandler eventHandler=new ContainerExitHandler(testForMultipleErrFiles);
  when(dispatcher.getEventHandler()).thenReturn(eventHandler);
  Application app=mock(Application.class);
  when(app.getAppId()).thenReturn(appId);
  when(app.getUser()).thenReturn("test");
  Credentials creds=mock(Credentials.class);
  when(container.getCredentials()).thenReturn(creds);
  ((NMContext)context).setNodeId(NodeId.newInstance("127.0.0.1",HTTP_PORT));
  ContainerLaunch launch=new ContainerLaunch(context,conf,dispatcher,exec,app,container,dirsHandler,containerManager);
  launch.call();
  Assert.assertTrue("ContainerExitEvent should have occured",eventHandler.isContainerExitEventOccured());
}
