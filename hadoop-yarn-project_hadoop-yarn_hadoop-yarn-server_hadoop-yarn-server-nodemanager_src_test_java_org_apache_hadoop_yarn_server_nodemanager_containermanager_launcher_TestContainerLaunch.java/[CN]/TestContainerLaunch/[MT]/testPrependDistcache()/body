{
  Assume.assumeTrue(Shell.WINDOWS);
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  ApplicationId appId=ApplicationId.newInstance(0,0);
  ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId cId=ContainerId.newContainerId(appAttemptId,0);
  Map<String,String> userSetEnv=new HashMap<String,String>();
  userSetEnv.put(Environment.CONTAINER_ID.name(),"user_set_container_id");
  userSetEnv.put(Environment.NM_HOST.name(),"user_set_NM_HOST");
  userSetEnv.put(Environment.NM_PORT.name(),"user_set_NM_PORT");
  userSetEnv.put(Environment.NM_HTTP_PORT.name(),"user_set_NM_HTTP_PORT");
  userSetEnv.put(Environment.LOCAL_DIRS.name(),"user_set_LOCAL_DIR");
  userSetEnv.put(Environment.USER.key(),"user_set_" + Environment.USER.key());
  userSetEnv.put(Environment.LOGNAME.name(),"user_set_LOGNAME");
  userSetEnv.put(Environment.PWD.name(),"user_set_PWD");
  userSetEnv.put(Environment.HOME.name(),"user_set_HOME");
  userSetEnv.put(Environment.CLASSPATH.name(),"APATH");
  containerLaunchContext.setEnvironment(userSetEnv);
  Container container=mock(Container.class);
  when(container.getContainerId()).thenReturn(cId);
  when(container.getLaunchContext()).thenReturn(containerLaunchContext);
  when(container.getLocalizedResources()).thenReturn(null);
  Dispatcher dispatcher=mock(Dispatcher.class);
  EventHandler eventHandler=new EventHandler(){
    public void handle(    Event event){
      Assert.assertTrue(event instanceof ContainerExitEvent);
      ContainerExitEvent exitEvent=(ContainerExitEvent)event;
      Assert.assertEquals(ContainerEventType.CONTAINER_EXITED_WITH_FAILURE,exitEvent.getType());
    }
  }
;
  when(dispatcher.getEventHandler()).thenReturn(eventHandler);
  Configuration conf=new Configuration();
  ContainerLaunch launch=new ContainerLaunch(distContext,conf,dispatcher,exec,null,container,dirsHandler,containerManager);
  String testDir=System.getProperty("test.build.data","target/test-dir");
  Path pwd=new Path(testDir);
  List<Path> appDirs=new ArrayList<Path>();
  List<String> containerLogs=new ArrayList<String>();
  Map<Path,List<String>> resources=new HashMap<Path,List<String>>();
  Path userjar=new Path("user.jar");
  List<String> lpaths=new ArrayList<String>();
  lpaths.add("userjarlink.jar");
  resources.put(userjar,lpaths);
  Path nmp=new Path(testDir);
  launch.sanitizeEnv(userSetEnv,pwd,appDirs,containerLogs,resources,nmp);
  List<String> result=getJarManifestClasspath(userSetEnv.get(Environment.CLASSPATH.name()));
  Assert.assertTrue(result.size() > 1);
  Assert.assertTrue(result.get(result.size() - 1).endsWith("userjarlink.jar"));
  userSetEnv.put(Environment.CLASSPATH_PREPEND_DISTCACHE.name(),"true");
  cId=ContainerId.newContainerId(appAttemptId,1);
  when(container.getContainerId()).thenReturn(cId);
  launch=new ContainerLaunch(distContext,conf,dispatcher,exec,null,container,dirsHandler,containerManager);
  launch.sanitizeEnv(userSetEnv,pwd,appDirs,containerLogs,resources,nmp);
  result=getJarManifestClasspath(userSetEnv.get(Environment.CLASSPATH.name()));
  Assert.assertTrue(result.size() > 1);
  Assert.assertTrue(result.get(0).endsWith("userjarlink.jar"));
}
