{
  containerManager.start();
  ApplicationId appId=ApplicationId.newInstance(1,1);
  ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId cId=ContainerId.newInstance(appAttemptId,0);
  File processStartFile=new File(tmpDir,"pid.txt").getAbsoluteFile();
  File scriptFile=Shell.appendScriptExtension(tmpDir,"testscript");
  PrintWriter writer=new PrintWriter(new FileOutputStream(scriptFile));
  if (Shell.WINDOWS) {
    writer.println("@echo \"Running testscript for delayed kill\"");
    writer.println("@echo \"Writing pid to start file\"");
    writer.println("@echo " + cId + "> "+ processStartFile);
    writer.println("@ping -n 100 127.0.0.1 >nul");
  }
 else {
    writer.println("#!/bin/bash\n\n");
    writer.println("echo \"Running testscript for delayed kill\"");
    writer.println("hello=\"Got SIGTERM\"");
    writer.println("umask 0");
    writer.println("trap \"echo $hello >> " + processStartFile + "\" SIGTERM");
    writer.println("echo \"Writing pid to start file\"");
    writer.println("echo $$ >> " + processStartFile);
    writer.println("while true; do\nsleep 1s;\ndone");
  }
  writer.close();
  FileUtil.setExecutable(scriptFile,true);
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  int port=12345;
  URL resource_alpha=ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));
  LocalResource rsrc_alpha=recordFactory.newRecordInstance(LocalResource.class);
  rsrc_alpha.setResource(resource_alpha);
  rsrc_alpha.setSize(-1);
  rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);
  rsrc_alpha.setType(LocalResourceType.FILE);
  rsrc_alpha.setTimestamp(scriptFile.lastModified());
  String destinationFile="dest_file.sh";
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  localResources.put(destinationFile,rsrc_alpha);
  containerLaunchContext.setLocalResources(localResources);
  List<String> commands=Arrays.asList(Shell.getRunScriptCommand(scriptFile));
  containerLaunchContext.setCommands(commands);
  Resource r=BuilderUtils.newResource(1024,1);
  Token containerToken=BuilderUtils.newContainerToken(cId,context.getNodeId().getHost(),port,user,r,System.currentTimeMillis() + 10000L,123,"password".getBytes(),super.DUMMY_RM_IDENTIFIER);
  StartContainerRequest startRequest=recordFactory.newRecordInstance(StartContainerRequest.class);
  startRequest.setContainerLaunchContext(containerLaunchContext);
  startRequest.setContainerToken(containerToken);
  containerManager.startContainer(startRequest);
  int timeoutSecs=0;
  while (!processStartFile.exists() && timeoutSecs++ < 20) {
    Thread.sleep(1000);
    LOG.info("Waiting for process start-file to be created");
  }
  Assert.assertTrue("ProcessStartFile doesn't exist!",processStartFile.exists());
  StopContainerRequest stopRequest=recordFactory.newRecordInstance(StopContainerRequest.class);
  stopRequest.setContainerId(cId);
  containerManager.stopContainer(stopRequest);
  BaseContainerManagerTest.waitForContainerState(containerManager,cId,ContainerState.COMPLETE);
  GetContainerStatusRequest gcsRequest=recordFactory.newRecordInstance(GetContainerStatusRequest.class);
  gcsRequest.setContainerId(cId);
  ContainerStatus containerStatus=containerManager.getContainerStatus(gcsRequest).getStatus();
  Assert.assertEquals(ExitCode.FORCE_KILLED.getExitCode(),containerStatus.getExitStatus());
  if (Shell.WINDOWS) {
    Assert.assertFalse("Process is still alive!",DefaultContainerExecutor.containerIsAlive(cId.toString()));
  }
 else {
    BufferedReader reader=new BufferedReader(new FileReader(processStartFile));
    boolean foundSigTermMessage=false;
    while (true) {
      String line=reader.readLine();
      if (line == null) {
        break;
      }
      if (line.contains("SIGTERM")) {
        foundSigTermMessage=true;
        break;
      }
    }
    Assert.assertTrue("Did not find sigterm message",foundSigTermMessage);
    reader.close();
  }
}
