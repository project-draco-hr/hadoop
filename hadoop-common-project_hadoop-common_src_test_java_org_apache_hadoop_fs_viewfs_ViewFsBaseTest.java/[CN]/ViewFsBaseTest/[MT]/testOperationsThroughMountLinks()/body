{
  FileContextTestHelper.createFileNonRecursive(fcView,"/user/foo");
  Assert.assertTrue("Create file should be file",isFile(fcView,new Path("/user/foo")));
  Assert.assertTrue("Target of created file should be type file",isFile(fcTarget,new Path(targetTestRoot,"user/foo")));
  Assert.assertTrue("Delete should succeed",fcView.delete(new Path("/user/foo"),false));
  Assert.assertFalse("File should not exist after delete",exists(fcView,new Path("/user/foo")));
  Assert.assertFalse("Target File should not exist after delete",exists(fcTarget,new Path(targetTestRoot,"user/foo")));
  FileContextTestHelper.createFileNonRecursive(fcView,"/internalDir/linkToDir2/foo");
  Assert.assertTrue("Created file should be type file",isFile(fcView,new Path("/internalDir/linkToDir2/foo")));
  Assert.assertTrue("Target of created file should be type file",isFile(fcTarget,new Path(targetTestRoot,"dir2/foo")));
  Assert.assertTrue("Delete should suceed",fcView.delete(new Path("/internalDir/linkToDir2/foo"),false));
  Assert.assertFalse("File should not exist after deletion",exists(fcView,new Path("/internalDir/linkToDir2/foo")));
  Assert.assertFalse("Target should not exist after deletion",exists(fcTarget,new Path(targetTestRoot,"dir2/foo")));
  FileContextTestHelper.createFileNonRecursive(fcView,"/internalDir/internalDir2/linkToDir3/foo");
  Assert.assertTrue("Created file should be of type file",isFile(fcView,new Path("/internalDir/internalDir2/linkToDir3/foo")));
  Assert.assertTrue("Target of created file should also be type file",isFile(fcTarget,new Path(targetTestRoot,"dir3/foo")));
  FileContextTestHelper.createFile(fcView,"/internalDir/linkToDir2/missingDir/miss2/foo");
  Assert.assertTrue("Created file should be of type file",isFile(fcView,new Path("/internalDir/linkToDir2/missingDir/miss2/foo")));
  Assert.assertTrue("Target of created file should also be type file",isFile(fcTarget,new Path(targetTestRoot,"dir2/missingDir/miss2/foo")));
  Assert.assertTrue("Delete should succeed",fcView.delete(new Path("/internalDir/internalDir2/linkToDir3/foo"),false));
  Assert.assertFalse("Deleted File should not exist",exists(fcView,new Path("/internalDir/internalDir2/linkToDir3/foo")));
  Assert.assertFalse("Target of deleted file should not exist",exists(fcTarget,new Path(targetTestRoot,"dir3/foo")));
  fcView.mkdir(FileContextTestHelper.getTestRootPath(fcView,"/user/dirX"),FileContext.DEFAULT_PERM,false);
  Assert.assertTrue("New dir should be type dir",isDir(fcView,new Path("/user/dirX")));
  Assert.assertTrue("Target of new dir should be of type dir",isDir(fcTarget,new Path(targetTestRoot,"user/dirX")));
  fcView.mkdir(FileContextTestHelper.getTestRootPath(fcView,"/user/dirX/dirY"),FileContext.DEFAULT_PERM,false);
  Assert.assertTrue("New dir should be type dir",isDir(fcView,new Path("/user/dirX/dirY")));
  Assert.assertTrue("Target of new dir should be of type dir",isDir(fcTarget,new Path(targetTestRoot,"user/dirX/dirY")));
  Assert.assertTrue("Delete should succeed",fcView.delete(new Path("/user/dirX/dirY"),false));
  Assert.assertFalse("Deleted File should not exist",exists(fcView,new Path("/user/dirX/dirY")));
  Assert.assertFalse("Deleted Target should not exist",exists(fcTarget,new Path(targetTestRoot,"user/dirX/dirY")));
  Assert.assertTrue("Delete should succeed",fcView.delete(new Path("/user/dirX"),false));
  Assert.assertFalse("Deleted File should not exist",exists(fcView,new Path("/user/dirX")));
  Assert.assertFalse("Deleted Target should not exist",exists(fcTarget,new Path(targetTestRoot,"user/dirX")));
  FileContextTestHelper.createFile(fcView,"/user/foo");
  fcView.rename(new Path("/user/foo"),new Path("/user/fooBar"));
  Assert.assertFalse("Renamed src should not exist",exists(fcView,new Path("/user/foo")));
  Assert.assertFalse(exists(fcTarget,new Path(targetTestRoot,"user/foo")));
  Assert.assertTrue(isFile(fcView,FileContextTestHelper.getTestRootPath(fcView,"/user/fooBar")));
  Assert.assertTrue(isFile(fcTarget,new Path(targetTestRoot,"user/fooBar")));
  fcView.mkdir(new Path("/user/dirFoo"),FileContext.DEFAULT_PERM,false);
  fcView.rename(new Path("/user/dirFoo"),new Path("/user/dirFooBar"));
  Assert.assertFalse("Renamed src should not exist",exists(fcView,new Path("/user/dirFoo")));
  Assert.assertFalse("Renamed src should not exist in target",exists(fcTarget,new Path(targetTestRoot,"user/dirFoo")));
  Assert.assertTrue("Renamed dest should  exist as dir",isDir(fcView,FileContextTestHelper.getTestRootPath(fcView,"/user/dirFooBar")));
  Assert.assertTrue("Renamed dest should  exist as dir in target",isDir(fcTarget,new Path(targetTestRoot,"user/dirFooBar")));
  fcView.mkdir(new Path("/targetRoot/dirFoo"),FileContext.DEFAULT_PERM,false);
  Assert.assertTrue(exists(fcView,new Path("/targetRoot/dirFoo")));
  boolean dirFooPresent=false;
  RemoteIterator<FileStatus> dirContents=fcView.listStatus(new Path("/targetRoot/"));
  while (dirContents.hasNext()) {
    FileStatus fileStatus=dirContents.next();
    if (fileStatus.getPath().getName().equals("dirFoo")) {
      dirFooPresent=true;
    }
  }
  Assert.assertTrue(dirFooPresent);
}
