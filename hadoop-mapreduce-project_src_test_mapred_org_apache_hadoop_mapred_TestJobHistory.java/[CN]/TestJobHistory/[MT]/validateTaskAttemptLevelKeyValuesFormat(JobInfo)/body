{
  Map<TaskID,TaskInfo> tasks=job.getAllTasks();
  for (  TaskInfo task : tasks.values()) {
    for (    TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) {
      TaskAttemptID id=attempt.getAttemptId();
      assertNotNull(id);
      long startTime=attempt.getStartTime();
      assertTrue("Invalid Start time",startTime > 0);
      long finishTime=attempt.getFinishTime();
      assertTrue("Task FINISH_TIME is < START_TIME in history file",startTime < finishTime);
      TaskType type=attempt.getTaskType();
      assertTrue("Unknown Task type \"" + type + "\" is seen in "+ "history file for task attempt "+ id,(type.equals(TaskType.MAP) || type.equals(TaskType.REDUCE) || type.equals(TaskType.JOB_CLEANUP)|| type.equals(TaskType.JOB_SETUP)));
      String status=attempt.getTaskStatus();
      assertTrue("Unexpected TASK_STATUS \"" + status + "\" is seen in"+ " history file for task attempt "+ id,(status.equals(TaskStatus.State.SUCCEEDED.toString()) || status.equals(TaskStatus.State.FAILED.toString()) || status.equals(TaskStatus.State.KILLED.toString())));
      if (type.equals(TaskType.REDUCE) && status.equals(TaskStatus.State.SUCCEEDED.toString())) {
        long shuffleFinishTime=attempt.getShuffleFinishTime();
        assertTrue(startTime < shuffleFinishTime);
        long sortFinishTime=attempt.getSortFinishTime();
        assertTrue(shuffleFinishTime < sortFinishTime);
      }
 else       if (type.equals(TaskType.MAP) && status.equals(TaskStatus.State.SUCCEEDED.toString())) {
        long mapFinishTime=attempt.getMapFinishTime();
        assertTrue(startTime < mapFinishTime);
      }
      String hostname=attempt.getHostname();
      Matcher m=hostNamePattern.matcher(hostname);
      assertTrue("Unexpected Host name of task attempt " + id,m.matches());
      String trackerName=attempt.getTrackerName();
      m=trackerNamePattern.matcher(trackerName);
      assertTrue("Unexpected tracker name of task attempt " + id,m.matches());
      if (!status.equals("KILLED")) {
        int httpPort=attempt.getHttpPort();
        assertTrue(httpPort > 0);
      }
      Counters counters=attempt.getCounters();
      assertNotNull(counters);
    }
  }
}
