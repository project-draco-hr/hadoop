{
  JobID jobId=getJobID();
  JobConf conf=getJobConf();
  String jobFile="";
  cleanup=new TaskInProgress[2];
  cleanup[0]=new TaskInProgress(jobId,jobFile,null,jobtracker,conf,this,numMapTasks,1);
  cleanup[0].setJobCleanupTask();
  cleanup[1]=new TaskInProgress(jobId,jobFile,numMapTasks,numReduceTasks,jobtracker,conf,this,1);
  cleanup[1].setJobCleanupTask();
  setup=new TaskInProgress[2];
  setup[0]=new TaskInProgress(jobId,jobFile,null,jobtracker,conf,this,numMapTasks + 1,1);
  setup[0].setJobSetupTask();
  setup[1]=new TaskInProgress(jobId,jobFile,numMapTasks,numReduceTasks + 1,jobtracker,conf,this,1);
  setup[1].setJobSetupTask();
  numMapTasks=conf.getNumMapTasks();
  maps=new TaskInProgress[numMapTasks];
  JobSplit.TaskSplitMetaInfo split=JobSplit.EMPTY_TASK_SPLIT;
  for (int i=0; i < numMapTasks; i++) {
    String[] inputLocations=null;
    if (mapInputLocations != null)     inputLocations=mapInputLocations[i];
    maps[i]=new FakeTaskInProgress(getJobID(),i,getJobConf(),this,inputLocations,split);
    if (mapInputLocations == null)     nonLocalMaps.add(maps[i]);
  }
  numReduceTasks=conf.getNumReduceTasks();
  reduces=new TaskInProgress[numReduceTasks];
  for (int i=0; i < numReduceTasks; i++) {
    reduces[i]=new FakeTaskInProgress(getJobID(),i,getJobConf(),this);
  }
  initialized=true;
}
