{
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<pool name=\"poolA\">");
  out.println("<minMaps>4</minMaps>");
  out.println("<minReduces>4</minReduces>");
  out.println("</pool>");
  out.println("</allocations>");
  out.close();
  scheduler.getPoolManager().reloadAllocs();
  JobInProgress job1=submitJob(JobStatus.RUNNING,10,10);
  JobInfo info1=scheduler.infos.get(job1);
  JobInProgress job2=submitJob(JobStatus.RUNNING,1,1,"poolA");
  JobInfo info2=scheduler.infos.get(job2);
  assertEquals(0,info1.mapSchedulable.getRunningTasks());
  assertEquals(0,info1.reduceSchedulable.getRunningTasks());
  assertEquals(10,info1.mapSchedulable.getDemand());
  assertEquals(10,info1.reduceSchedulable.getDemand());
  assertEquals(3.0,info1.mapSchedulable.getFairShare());
  assertEquals(3.0,info1.reduceSchedulable.getFairShare());
  assertEquals(0,info2.mapSchedulable.getRunningTasks());
  assertEquals(0,info2.reduceSchedulable.getRunningTasks());
  assertEquals(1,info2.mapSchedulable.getDemand());
  assertEquals(1,info2.reduceSchedulable.getDemand());
  assertEquals(1.0,info2.mapSchedulable.getFairShare());
  assertEquals(1.0,info2.reduceSchedulable.getFairShare());
  checkAssignment("tt1","attempt_test_0002_m_000000_0 on tt1");
  checkAssignment("tt1","attempt_test_0002_r_000000_0 on tt1");
  checkAssignment("tt1","attempt_test_0001_m_000000_0 on tt1");
  checkAssignment("tt1","attempt_test_0001_r_000000_0 on tt1");
  checkAssignment("tt2","attempt_test_0001_m_000001_0 on tt2");
  checkAssignment("tt2","attempt_test_0001_r_000001_0 on tt2");
  checkAssignment("tt2","attempt_test_0001_m_000002_0 on tt2");
  checkAssignment("tt2","attempt_test_0001_r_000002_0 on tt2");
}
