{
  setUpCluster(1,3,false);
  scheduler.preemptionEnabled=true;
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<fairSharePreemptionTimeout>60</fairSharePreemptionTimeout>");
  out.println("</allocations>");
  out.close();
  scheduler.getPoolManager().reloadAllocs();
  Pool pool1=scheduler.getPoolManager().getPool("pool1");
  Pool pool2=scheduler.getPoolManager().getPool("pool2");
  Pool pool3=scheduler.getPoolManager().getPool("pool3");
  JobInProgress job1=submitJob(JobStatus.RUNNING,12,0,"pool1");
  advanceTime(100);
  checkAssignment("tt1","attempt_test_0001_m_000000_0 on tt1");
  checkAssignment("tt1","attempt_test_0001_m_000001_0 on tt1");
  advanceTime(100);
  checkAssignment("tt2","attempt_test_0001_m_000002_0 on tt2");
  advanceTime(100);
  JobInProgress job2=submitJob(JobStatus.RUNNING,10,0,"pool2");
  advanceTime(100);
  checkAssignment("tt2","attempt_test_0002_m_000000_0 on tt2");
  checkAssignment("tt3","attempt_test_0002_m_000001_0 on tt3");
  advanceTime(100);
  checkAssignment("tt3","attempt_test_0002_m_000002_0 on tt3");
  advanceTime(100);
  JobInProgress job3=submitJob(JobStatus.RUNNING,10,0,"pool3");
  advanceTime(59000);
  assertEquals(0,scheduler.tasksToPreempt(pool2.getMapSchedulable(),clock.getTime()));
  assertEquals(0,scheduler.tasksToPreempt(pool2.getReduceSchedulable(),clock.getTime()));
  assertEquals(0,scheduler.tasksToPreempt(pool3.getMapSchedulable(),clock.getTime()));
  assertEquals(0,scheduler.tasksToPreempt(pool3.getReduceSchedulable(),clock.getTime()));
  advanceTime(2000);
  assertEquals(0,scheduler.tasksToPreempt(pool2.getMapSchedulable(),clock.getTime()));
  assertEquals(0,scheduler.tasksToPreempt(pool2.getReduceSchedulable(),clock.getTime()));
  assertEquals(2,scheduler.tasksToPreempt(pool3.getMapSchedulable(),clock.getTime()));
  assertEquals(0,scheduler.tasksToPreempt(pool3.getReduceSchedulable(),clock.getTime()));
  scheduler.preemptTasksIfNecessary();
  scheduler.update();
  assertEquals(2,job2.runningMaps());
  assertEquals(2,job1.runningMaps());
  checkAssignment("tt2","attempt_test_0003_m_000000_0 on tt2");
  checkAssignment("tt3","attempt_test_0003_m_000001_0 on tt3");
  assertNull(scheduler.assignTasks(tracker("tt1")));
  assertNull(scheduler.assignTasks(tracker("tt2")));
  assertNull(scheduler.assignTasks(tracker("tt3")));
}
