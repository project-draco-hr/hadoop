{
  final Configuration conf=new Configuration(false);
  conf.set(KEY_ACL + "test_key_1.DECRYPT_EEK","decrypt1");
  conf.set(KEY_ACL + "test_key_2.ALL","all2");
  conf.set(KEY_ACL + "test_key_1.DECRYPT_EEK","decrypt2");
  conf.set(KEY_ACL + "test_key_2.ALL","all1,all3");
  conf.set(DEFAULT_KEY_ACL_PREFIX + "MANAGEMENT","default1");
  conf.set(DEFAULT_KEY_ACL_PREFIX + "MANAGEMENT","");
  conf.set(DEFAULT_KEY_ACL_PREFIX + "DECRYPT_EEK","*");
  conf.set(DEFAULT_KEY_ACL_PREFIX + "DECRYPT_EEK","");
  conf.set(WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK","whitelist1");
  conf.set(WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK","*");
  final KMSACLs acls=new KMSACLs(conf);
  Assert.assertTrue("expected key ACL size is 2 but got " + acls.keyAcls.size(),acls.keyAcls.size() == 2);
  assertKeyAcl("test_key_1",acls,KeyOpType.DECRYPT_EEK,"decrypt2");
  assertKeyAcl("test_key_2",acls,KeyOpType.ALL,"all1","all3");
  assertDefaultKeyAcl(acls,KeyOpType.MANAGEMENT);
  assertDefaultKeyAcl(acls,KeyOpType.DECRYPT_EEK);
  AccessControlList acl=acls.whitelistKeyAcls.get(KeyOpType.DECRYPT_EEK);
  Assert.assertNotNull(acl);
  Assert.assertTrue(acl.isAllAllowed());
}
