{
  LOG.info("STARTING testContainerCleaned");
  CyclicBarrier startLaunchBarrier=new CyclicBarrier(2);
  CyclicBarrier completeLaunchBarrier=new CyclicBarrier(2);
  YarnRPC mockRpc=mock(YarnRPC.class);
  AppContext mockContext=mock(AppContext.class);
  EventHandler mockEventHandler=mock(EventHandler.class);
  when(mockContext.getEventHandler()).thenReturn(mockEventHandler);
  ContainerManager mockCM=new ContainerManagerForTest(startLaunchBarrier,completeLaunchBarrier);
  when(mockRpc.getProxy(eq(ContainerManager.class),any(InetSocketAddress.class),any(Configuration.class))).thenReturn(mockCM);
  ContainerLauncherImplUnderTest ut=new ContainerLauncherImplUnderTest(mockContext,mockRpc);
  Configuration conf=new Configuration();
  ut.init(conf);
  ut.start();
  try {
    ContainerId contId=makeContainerId(0l,0,0,1);
    TaskAttemptId taskAttemptId=makeTaskAttemptId(0l,0,0,TaskType.MAP,0);
    String cmAddress="127.0.0.1:8000";
    StartContainerResponse startResp=recordFactory.newRecordInstance(StartContainerResponse.class);
    startResp.setServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID,ShuffleHandler.serializeMetaData(80));
    LOG.info("inserting launch event");
    ContainerRemoteLaunchEvent mockLaunchEvent=mock(ContainerRemoteLaunchEvent.class);
    when(mockLaunchEvent.getType()).thenReturn(EventType.CONTAINER_REMOTE_LAUNCH);
    when(mockLaunchEvent.getContainerID()).thenReturn(contId);
    when(mockLaunchEvent.getTaskAttemptID()).thenReturn(taskAttemptId);
    when(mockLaunchEvent.getContainerMgrAddress()).thenReturn(cmAddress);
    ut.handle(mockLaunchEvent);
    startLaunchBarrier.await();
    LOG.info("inserting cleanup event");
    ContainerLauncherEvent mockCleanupEvent=mock(ContainerLauncherEvent.class);
    when(mockCleanupEvent.getType()).thenReturn(EventType.CONTAINER_REMOTE_CLEANUP);
    when(mockCleanupEvent.getContainerID()).thenReturn(contId);
    when(mockCleanupEvent.getTaskAttemptID()).thenReturn(taskAttemptId);
    when(mockCleanupEvent.getContainerMgrAddress()).thenReturn(cmAddress);
    ut.handle(mockCleanupEvent);
    completeLaunchBarrier.await();
    ut.waitForPoolToIdle();
    ArgumentCaptor<Event> arg=ArgumentCaptor.forClass(Event.class);
    verify(mockEventHandler,atLeast(2)).handle(arg.capture());
    boolean containerCleaned=false;
    for (int i=0; i < arg.getAllValues().size(); i++) {
      LOG.info(arg.getAllValues().get(i).toString());
      Event currentEvent=arg.getAllValues().get(i);
      if (currentEvent.getType() == TaskAttemptEventType.TA_CONTAINER_CLEANED) {
        containerCleaned=true;
      }
    }
    assert(containerCleaned);
  }
  finally {
    ut.stop();
  }
}
