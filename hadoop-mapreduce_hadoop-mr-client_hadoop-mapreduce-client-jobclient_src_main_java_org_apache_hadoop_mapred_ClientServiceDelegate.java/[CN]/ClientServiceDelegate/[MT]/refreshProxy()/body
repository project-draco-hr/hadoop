{
  ApplicationReport application=rm.getApplicationReport(currentAppId);
  while (ApplicationState.RUNNING.equals(application.getState())) {
    try {
      if (application.getHost() == null || "".equals(application.getHost())) {
        LOG.debug("AM not assigned to Job. Waiting to get the AM ...");
        Thread.sleep(2000);
        LOG.debug("Application state is " + application.getState());
        application=rm.getApplicationReport(currentAppId);
        continue;
      }
      serviceAddr=application.getHost() + ":" + application.getRpcPort();
      serviceHttpAddr=application.getTrackingUrl();
      currentAppState=application.getState();
      if (UserGroupInformation.isSecurityEnabled()) {
        String clientTokenEncoded=application.getClientToken();
        Token<ApplicationTokenIdentifier> clientToken=new Token<ApplicationTokenIdentifier>();
        clientToken.decodeFromUrlString(clientTokenEncoded);
        clientToken.setService(new Text(application.getHost() + ":" + application.getRpcPort()));
        UserGroupInformation.getCurrentUser().addToken(clientToken);
      }
      LOG.info("Connecting to " + serviceAddr);
      instantiateAMProxy(serviceAddr);
      return;
    }
 catch (    Exception e) {
      LOG.info("Could not connect to " + serviceAddr + ". Waiting for getting the latest AM address...");
      try {
        Thread.sleep(2000);
      }
 catch (      InterruptedException e1) {
      }
      application=rm.getApplicationReport(currentAppId);
    }
  }
  currentAppState=application.getState();
  if (currentAppState == ApplicationState.NEW) {
    realProxy=null;
    return;
  }
  if (currentAppState == ApplicationState.SUCCEEDED || currentAppState == ApplicationState.FAILED || currentAppState == ApplicationState.KILLED) {
    serviceAddr=conf.get(JHConfig.HS_BIND_ADDRESS,JHConfig.DEFAULT_HS_BIND_ADDRESS);
    LOG.info("Application state is completed. " + "Redirecting to job history server " + serviceAddr);
    try {
      serviceHttpAddr=JobHistoryUtils.getHistoryUrl(conf,currentAppId);
    }
 catch (    UnknownHostException e) {
      LOG.warn("Unable to get history url",e);
      serviceHttpAddr="UNKNOWN";
    }
    try {
      instantiateHistoryProxy(serviceAddr);
      return;
    }
 catch (    IOException e) {
      throw new YarnException(e);
    }
  }
}
