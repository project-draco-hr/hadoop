{
  String oldValue=location.getConfProp(prop);
  if ((oldValue != null) && oldValue.equals(propValue))   return;
  location.setConfProp(prop,propValue);
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
      getContainer().updateButtons();
    }
  }
);
  this.fireChange(source,prop,propValue);
  final String jobTrackerHost=location.getConfProp(ConfProp.PI_JOB_TRACKER_HOST);
  final String jobTrackerPort=location.getConfProp(ConfProp.PI_JOB_TRACKER_PORT);
  final String nameNodeHost=location.getConfProp(ConfProp.PI_NAME_NODE_HOST);
  final String nameNodePort=location.getConfProp(ConfProp.PI_NAME_NODE_PORT);
  final boolean colocate=location.getConfProp(ConfProp.PI_COLOCATE_MASTERS).equalsIgnoreCase("yes");
  final String jobTrackerURI=location.getConfProp(ConfProp.JOB_TRACKER_URI);
  final String fsDefaultURI=location.getConfProp(ConfProp.FS_DEFAULT_URI);
  final String socksServerURI=location.getConfProp(ConfProp.SOCKS_SERVER);
  final boolean socksProxyEnable=location.getConfProp(ConfProp.PI_SOCKS_PROXY_ENABLE).equalsIgnoreCase("yes");
  final String socksProxyHost=location.getConfProp(ConfProp.PI_SOCKS_PROXY_HOST);
  final String socksProxyPort=location.getConfProp(ConfProp.PI_SOCKS_PROXY_PORT);
  Display.getDefault().syncExec(new Runnable(){
    public void run(){
switch (prop) {
case PI_JOB_TRACKER_HOST:
{
          if (colocate)           notifyChange(null,ConfProp.PI_NAME_NODE_HOST,jobTrackerHost);
          String newJobTrackerURI=String.format("%s:%s",jobTrackerHost,jobTrackerPort);
          notifyChange(null,ConfProp.JOB_TRACKER_URI,newJobTrackerURI);
          break;
        }
case PI_JOB_TRACKER_PORT:
{
        String newJobTrackerURI=String.format("%s:%s",jobTrackerHost,jobTrackerPort);
        notifyChange(null,ConfProp.JOB_TRACKER_URI,newJobTrackerURI);
        break;
      }
case PI_NAME_NODE_HOST:
{
      String newHDFSURI=String.format("hdfs://%s:%s/",nameNodeHost,nameNodePort);
      notifyChange(null,ConfProp.FS_DEFAULT_URI,newHDFSURI);
      if (!colocate && !nameNodeHost.equals(jobTrackerHost))       notifyChange(null,ConfProp.PI_COLOCATE_MASTERS,"no");
      break;
    }
case PI_NAME_NODE_PORT:
{
    String newHDFSURI=String.format("hdfs://%s:%s/",nameNodeHost,nameNodePort);
    notifyChange(null,ConfProp.FS_DEFAULT_URI,newHDFSURI);
    break;
  }
case PI_SOCKS_PROXY_HOST:
{
  String newSocksProxyURI=String.format("%s:%s",socksProxyHost,socksProxyPort);
  notifyChange(null,ConfProp.SOCKS_SERVER,newSocksProxyURI);
  break;
}
case PI_SOCKS_PROXY_PORT:
{
String newSocksProxyURI=String.format("%s:%s",socksProxyHost,socksProxyPort);
notifyChange(null,ConfProp.SOCKS_SERVER,newSocksProxyURI);
break;
}
case JOB_TRACKER_URI:
{
String[] strs=jobTrackerURI.split(":",2);
String host=strs[0];
String port=(strs.length == 2) ? strs[1] : "";
notifyChange(null,ConfProp.PI_JOB_TRACKER_HOST,host);
notifyChange(null,ConfProp.PI_JOB_TRACKER_PORT,port);
break;
}
case FS_DEFAULT_URI:
{
try {
URI uri=new URI(fsDefaultURI);
if (uri.getScheme().equals("hdfs")) {
String host=uri.getHost();
String port=Integer.toString(uri.getPort());
notifyChange(null,ConfProp.PI_NAME_NODE_HOST,host);
notifyChange(null,ConfProp.PI_NAME_NODE_PORT,port);
}
}
 catch (URISyntaxException use) {
}
break;
}
case SOCKS_SERVER:
{
String[] strs=socksServerURI.split(":",2);
String host=strs[0];
String port=(strs.length == 2) ? strs[1] : "";
notifyChange(null,ConfProp.PI_SOCKS_PROXY_HOST,host);
notifyChange(null,ConfProp.PI_SOCKS_PROXY_PORT,port);
break;
}
case PI_COLOCATE_MASTERS:
{
if (colocate) notifyChange(null,ConfProp.PI_NAME_NODE_HOST,jobTrackerHost);
break;
}
case PI_SOCKS_PROXY_ENABLE:
{
if (socksProxyEnable) {
notifyChange(null,ConfProp.SOCKET_FACTORY_DEFAULT,"org.apache.hadoop.net.SocksSocketFactory");
}
 else {
notifyChange(null,ConfProp.SOCKET_FACTORY_DEFAULT,"org.apache.hadoop.net.StandardSocketFactory");
}
break;
}
}
}
}
);
}
