{
  final String METHOD_NAME=GenericTestUtils.getMethodName();
  final int MAX_PACKETS=80;
  if (LOG.isDebugEnabled()) {
    LOG.debug("Running " + METHOD_NAME);
  }
  final PipelinesTestUtil.PipelinesTest pipst=(PipelinesTestUtil.PipelinesTest)PipelinesTestUtil.initTest();
  pipst.setSuspend(true);
  Path filePath=new Path("/" + METHOD_NAME + ".dat");
  FSDataOutputStream fsOut=fs.create(filePath);
  int cnt=0;
  try {
    QueueChecker cq=new QueueChecker(pipst,MAX_PACKETS);
    cq.start();
    int bytesToSend=700;
    while (cnt < 100 && pipst.getSuspend()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("_06(): " + cnt++ + " sending another "+ bytesToSend+ " bytes");
      }
      TestPipelines.writeData(fsOut,bytesToSend);
    }
  }
 catch (  Exception e) {
    LOG.warn("Getting unexpected exception: ",e);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Last queued packet number " + pipst.getLastQueued());
  }
  assertTrue("Shouldn't be able to send more than 81 packet",pipst.getLastQueued() <= 81);
}
