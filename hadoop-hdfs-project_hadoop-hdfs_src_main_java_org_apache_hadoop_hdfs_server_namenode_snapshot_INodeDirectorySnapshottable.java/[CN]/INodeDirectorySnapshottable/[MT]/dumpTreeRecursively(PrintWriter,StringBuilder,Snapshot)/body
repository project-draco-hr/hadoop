{
  super.dumpTreeRecursively(out,prefix,snapshot);
  if (snapshot == null) {
    out.println();
    out.print(prefix);
    int n=0;
    for (    DirectoryDiff diff : getDiffs()) {
      if (diff.isSnapshotRoot()) {
        n++;
      }
    }
    out.print(n);
    out.print(n <= 1 ? " snapshot of " : " snapshots of ");
    final String name=getLocalName();
    out.println(name.isEmpty() ? "/" : name);
    dumpTreeRecursively(out,prefix,new Iterable<SnapshotAndINode>(){
      @Override public Iterator<SnapshotAndINode> iterator(){
        return new Iterator<SnapshotAndINode>(){
          final Iterator<DirectoryDiff> i=getDiffs().iterator();
          private DirectoryDiff next=findNext();
          private DirectoryDiff findNext(){
            for (; i.hasNext(); ) {
              final DirectoryDiff diff=i.next();
              if (diff.isSnapshotRoot()) {
                return diff;
              }
            }
            return null;
          }
          @Override public boolean hasNext(){
            return next != null;
          }
          @Override public SnapshotAndINode next(){
            final Snapshot s=next.snapshot;
            final SnapshotAndINode pair=new SnapshotAndINode(s);
            next=findNext();
            return pair;
          }
          @Override public void remove(){
            throw new UnsupportedOperationException();
          }
        }
;
      }
    }
);
  }
}
