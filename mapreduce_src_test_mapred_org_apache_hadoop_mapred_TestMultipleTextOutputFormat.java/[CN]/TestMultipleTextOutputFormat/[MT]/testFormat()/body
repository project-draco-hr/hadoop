{
  JobConf job=new JobConf();
  job.set(JobContext.TASK_ATTEMPT_ID,attempt);
  FileOutputFormat.setOutputPath(job,workDir.getParent().getParent());
  FileOutputFormat.setWorkOutputPath(job,workDir);
  FileSystem fs=workDir.getFileSystem(job);
  if (!fs.mkdirs(workDir)) {
    fail("Failed to create output directory");
  }
  TestMultipleTextOutputFormat.test1(job);
  TestMultipleTextOutputFormat.test2(job);
  String file_11="1-part-00000";
  File expectedFile_11=new File(new Path(workDir,file_11).toString());
  StringBuffer expectedOutput=new StringBuffer();
  for (int i=10; i < 20; i++) {
    expectedOutput.append("" + i).append('\t').append("" + i).append("\n");
  }
  String output=UtilsForTests.slurp(expectedFile_11);
  assertEquals(output,expectedOutput.toString());
  String file_12="2-part-00000";
  File expectedFile_12=new File(new Path(workDir,file_12).toString());
  expectedOutput=new StringBuffer();
  for (int i=20; i < 30; i++) {
    expectedOutput.append("" + i).append('\t').append("" + i).append("\n");
  }
  output=UtilsForTests.slurp(expectedFile_12);
  assertEquals(output,expectedOutput.toString());
  String file_13="3-part-00000";
  File expectedFile_13=new File(new Path(workDir,file_13).toString());
  expectedOutput=new StringBuffer();
  for (int i=30; i < 40; i++) {
    expectedOutput.append("" + i).append('\t').append("" + i).append("\n");
  }
  output=UtilsForTests.slurp(expectedFile_13);
  assertEquals(output,expectedOutput.toString());
  String file_2="2/3";
  File expectedFile_2=new File(new Path(workDir,file_2).toString());
  expectedOutput=new StringBuffer();
  for (int i=10; i < 40; i++) {
    expectedOutput.append("" + i).append('\t').append("" + i).append("\n");
  }
  output=UtilsForTests.slurp(expectedFile_2);
  assertEquals(output,expectedOutput.toString());
}
