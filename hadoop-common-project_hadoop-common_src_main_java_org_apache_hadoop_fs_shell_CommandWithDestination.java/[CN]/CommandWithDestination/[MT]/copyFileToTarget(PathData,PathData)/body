{
  src.fs.setVerifyChecksum(verifyChecksum);
  InputStream in=null;
  try {
    in=src.fs.open(src.path);
    copyStreamToTarget(in,target);
    if (shouldPreserve(FileAttribute.TIMESTAMPS)) {
      target.fs.setTimes(target.path,src.stat.getModificationTime(),src.stat.getAccessTime());
    }
    if (shouldPreserve(FileAttribute.OWNERSHIP)) {
      target.fs.setOwner(target.path,src.stat.getOwner(),src.stat.getGroup());
    }
    if (shouldPreserve(FileAttribute.PERMISSION) || shouldPreserve(FileAttribute.ACL)) {
      target.fs.setPermission(target.path,src.stat.getPermission());
    }
    if (shouldPreserve(FileAttribute.ACL)) {
      FsPermission perm=src.stat.getPermission();
      if (perm.getAclBit()) {
        List<AclEntry> srcEntries=src.fs.getAclStatus(src.path).getEntries();
        List<AclEntry> srcFullEntries=AclUtil.getAclFromPermAndEntries(perm,srcEntries);
        target.fs.setAcl(target.path,srcFullEntries);
      }
    }
    if (shouldPreserve(FileAttribute.XATTR)) {
      Map<String,byte[]> srcXAttrs=src.fs.getXAttrs(src.path);
      if (srcXAttrs != null) {
        Iterator<Entry<String,byte[]>> iter=srcXAttrs.entrySet().iterator();
        while (iter.hasNext()) {
          Entry<String,byte[]> entry=iter.next();
          target.fs.setXAttr(target.path,entry.getKey(),entry.getValue());
        }
      }
    }
  }
  finally {
    IOUtils.closeStream(in);
  }
}
