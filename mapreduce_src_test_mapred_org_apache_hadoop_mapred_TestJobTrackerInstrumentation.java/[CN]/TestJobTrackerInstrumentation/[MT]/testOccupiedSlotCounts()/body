{
  TaskTrackerStatus[] status=new TaskTrackerStatus[trackers.length];
  List<TaskStatus> list=new ArrayList<TaskStatus>();
  int mapSlotsPerTask=2;
  TaskStatus ts=TaskStatus.createTaskStatus(true,new TaskAttemptID("jt",1,TaskType.MAP,0,0),0.0f,mapSlotsPerTask,TaskStatus.State.RUNNING,"","",trackers[0],TaskStatus.Phase.MAP,null);
  list.add(ts);
  int mapSlotsPerTask1=1;
  ts=TaskStatus.createTaskStatus(true,new TaskAttemptID("jt",1,TaskType.MAP,0,0),0.0f,mapSlotsPerTask1,TaskStatus.State.RUNNING,"","",trackers[0],TaskStatus.Phase.MAP,null);
  list.add(ts);
  int reduceSlotsPerTask=3;
  ts=TaskStatus.createTaskStatus(false,new TaskAttemptID("jt",1,TaskType.REDUCE,0,0),0.0f,reduceSlotsPerTask,TaskStatus.State.RUNNING,"","",trackers[0],TaskStatus.Phase.REDUCE,null);
  list.add(ts);
  int reduceSlotsPerTask1=1;
  ts=TaskStatus.createTaskStatus(false,new TaskAttemptID("jt",1,TaskType.REDUCE,0,0),0.0f,reduceSlotsPerTask1,TaskStatus.State.RUNNING,"","",trackers[0],TaskStatus.Phase.REDUCE,null);
  list.add(ts);
  status=new TaskTrackerStatus[trackers.length];
  status[0]=getTTStatus(trackers[0],list);
  status[1]=getTTStatus(trackers[1],new ArrayList<TaskStatus>());
  status[2]=getTTStatus(trackers[2],new ArrayList<TaskStatus>());
  for (int i=0; i < trackers.length; i++) {
    FakeObjectUtilities.sendHeartBeat(jobTracker,status[i],false,false,trackers[i],responseId);
  }
  responseId++;
  assertEquals("Mismatch in map slots occupied",mapSlotsPerTask + mapSlotsPerTask1,mi.numOccupiedMapSlots);
  assertEquals("Mismatch in reduce slots occupied",reduceSlotsPerTask + reduceSlotsPerTask1,mi.numOccupiedReduceSlots);
  assertEquals("Mismatch in num  running maps",2,mi.numRunningMaps);
  assertEquals("Mismatch in num running reduces",2,mi.numRunningReduces);
  status=new TaskTrackerStatus[1];
  status[0]=getTTStatus(trackers[0],new ArrayList<TaskStatus>());
  FakeObjectUtilities.sendHeartBeat(jobTracker,status[0],false,false,trackers[0],responseId);
  assertEquals("Mismatch in map slots occupied",0,mi.numOccupiedMapSlots);
  assertEquals("Mismatch in reduce slots occupied",0,mi.numOccupiedReduceSlots);
  assertEquals("Mismatch in num  running maps",0,mi.numRunningMaps);
  assertEquals("Mismatch in num running reduces",0,mi.numRunningReduces);
}
