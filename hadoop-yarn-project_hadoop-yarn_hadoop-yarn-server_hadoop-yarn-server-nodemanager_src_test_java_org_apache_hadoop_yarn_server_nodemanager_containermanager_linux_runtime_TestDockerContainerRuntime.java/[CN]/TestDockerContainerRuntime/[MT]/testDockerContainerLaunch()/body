{
  DockerLinuxContainerRuntime runtime=new DockerLinuxContainerRuntime(mockExecutor,mockCGroupsHandler);
  runtime.initialize(conf);
  String[] testCapabilities={"NET_BIND_SERVICE","SYS_CHROOT"};
  conf.setStrings(YarnConfiguration.NM_DOCKER_CONTAINER_CAPABILITIES,testCapabilities);
  runtime.launchContainer(builder.build());
  PrivilegedOperation op=capturePrivilegedOperationAndVerifyArgs();
  List<String> args=op.getArguments();
  String dockerCommandFile=args.get(11);
  Set<String> capabilitySet=new HashSet<>(Arrays.asList(testCapabilities));
  StringBuilder expectedCapabilitiesString=new StringBuilder("--cap-drop=ALL ");
  for (  String capability : capabilitySet) {
    expectedCapabilitiesString.append("--cap-add=").append(capability).append(" ");
  }
  StringBuffer expectedCommandTemplate=new StringBuffer("run --name=%1$s ").append("--user=%2$s -d ").append("--workdir=%3$s ").append("--net=host ").append(expectedCapabilitiesString).append("-v /etc/passwd:/etc/password:ro ").append("-v %4$s:%4$s ").append("-v %5$s:%5$s ").append("-v %6$s:%6$s ").append("%7$s ").append("bash %8$s/launch_container.sh");
  String expectedCommand=String.format(expectedCommandTemplate.toString(),containerId,runAsUser,containerWorkDir,containerLocalDirs.get(0),containerWorkDir,containerLogDirs.get(0),image,containerWorkDir);
  List<String> dockerCommands=Files.readAllLines(Paths.get(dockerCommandFile),Charset.forName("UTF-8"));
  Assert.assertEquals(1,dockerCommands.size());
  Assert.assertEquals(expectedCommand,dockerCommands.get(0));
}
