{
  DockerLinuxContainerRuntime runtime=new DockerLinuxContainerRuntime(mockExecutor);
  runtime.initialize(conf);
  ContainerRuntimeContext.Builder builder=new ContainerRuntimeContext.Builder(container);
  builder.setExecutionAttribute(RUN_AS_USER,runAsUser).setExecutionAttribute(USER,user).setExecutionAttribute(APPID,appId).setExecutionAttribute(CONTAINER_ID_STR,containerIdStr).setExecutionAttribute(CONTAINER_WORK_DIR,containerWorkDir).setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,nmPrivateContainerScriptPath).setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,nmPrivateTokensPath).setExecutionAttribute(PID_FILE_PATH,pidFilePath).setExecutionAttribute(LOCAL_DIRS,localDirs).setExecutionAttribute(LOG_DIRS,logDirs).setExecutionAttribute(RESOURCES_OPTIONS,resourcesOptions);
  String[] testCapabilities={"NET_BIND_SERVICE","SYS_CHROOT"};
  conf.setStrings(YarnConfiguration.NM_DOCKER_CONTAINER_CAPABILITIES,testCapabilities);
  runtime.launchContainer(builder.build());
  ArgumentCaptor<PrivilegedOperation> opCaptor=ArgumentCaptor.forClass(PrivilegedOperation.class);
  verify(mockExecutor,times(1)).executePrivilegedOperation(anyList(),opCaptor.capture(),any(File.class),any(Map.class),eq(false));
  PrivilegedOperation op=opCaptor.getValue();
  Assert.assertEquals(PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER,op.getOperationType());
  List<String> args=op.getArguments();
  Assert.assertEquals(13,args.size());
  Assert.assertEquals(runAsUser,args.get(0));
  Assert.assertEquals(user,args.get(1));
  Assert.assertEquals(Integer.toString(PrivilegedOperation.RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),args.get(2));
  Assert.assertEquals(appId,args.get(3));
  Assert.assertEquals(containerId,args.get(4));
  Assert.assertEquals(containerWorkDir.toString(),args.get(5));
  Assert.assertEquals(nmPrivateContainerScriptPath.toUri().toString(),args.get(6));
  Assert.assertEquals(nmPrivateTokensPath.toUri().getPath(),args.get(7));
  Assert.assertEquals(pidFilePath.toString(),args.get(8));
  Assert.assertEquals(localDirs.get(0),args.get(9));
  Assert.assertEquals(logDirs.get(0),args.get(10));
  Assert.assertEquals(resourcesOptions,args.get(12));
  String dockerCommandFile=args.get(11);
  Set<String> capabilitySet=new HashSet<>(Arrays.asList(testCapabilities));
  StringBuilder expectedCapabilitiesString=new StringBuilder("--cap-drop=ALL ");
  for (  String capability : capabilitySet) {
    expectedCapabilitiesString.append("--cap-add=").append(capability).append(" ");
  }
  StringBuffer expectedCommandTemplate=new StringBuffer("run --name=%1$s ").append("--user=%2$s -d ").append("--workdir=%3$s ").append("--net=host ").append(expectedCapabilitiesString).append("-v /etc/passwd:/etc/password:ro ").append("-v %4$s:%4$s ").append("-v %5$s:%5$s ").append("-v %6$s:%6$s ").append("%7$s ").append("bash %8$s/launch_container.sh");
  String expectedCommand=String.format(expectedCommandTemplate.toString(),containerId,runAsUser,containerWorkDir,localDirs.get(0),containerWorkDir,logDirs.get(0),image,containerWorkDir);
  List<String> dockerCommands=Files.readAllLines(Paths.get(dockerCommandFile),Charset.forName("UTF-8"));
  Assert.assertEquals(1,dockerCommands.size());
  Assert.assertEquals(expectedCommand,dockerCommands.get(0));
}
