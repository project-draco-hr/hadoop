{
  DockerLinuxContainerRuntime runtime=new DockerLinuxContainerRuntime(mockExecutor,mockCGroupsHandler);
  String customNetwork1="sdn1";
  String customNetwork2="sdn2";
  String customNetwork3="sdn3";
  String[] networks={"host","none","bridge",customNetwork1,customNetwork2};
  conf.setStrings(YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,networks);
  conf.set(YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,customNetwork1);
  runtime.initialize(conf);
  runtime.launchContainer(builder.build());
  PrivilegedOperation op=capturePrivilegedOperationAndVerifyArgs();
  List<String> args=op.getArguments();
  String dockerCommandFile=args.get(11);
  StringBuffer expectedCommandTemplate=new StringBuffer("run --name=%1$s ").append("--user=%2$s -d ").append("--workdir=%3$s ").append("--net=" + customNetwork1 + " ").append(getExpectedTestCapabilitiesArgumentString()).append("-v %4$s:%4$s ").append("-v %5$s:%5$s ").append("-v %6$s:%6$s ").append("-v %7$s:%7$s ").append("-v %8$s:%8$s ").append("%9$s ").append("bash %10$s/launch_container.sh");
  String expectedCommand=String.format(expectedCommandTemplate.toString(),containerId,runAsUser,containerWorkDir,containerLocalDirs.get(0),filecacheDirs.get(0),containerWorkDir,containerLogDirs.get(0),userLocalDirs.get(0),image,containerWorkDir);
  List<String> dockerCommands=Files.readAllLines(Paths.get(dockerCommandFile),Charset.forName("UTF-8"));
  Assert.assertEquals(1,dockerCommands.size());
  Assert.assertEquals(expectedCommand,dockerCommands.get(0));
  env.put("YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK",customNetwork2);
  runtime.launchContainer(builder.build());
  op=capturePrivilegedOperationAndVerifyArgs();
  args=op.getArguments();
  dockerCommandFile=args.get(11);
  expectedCommandTemplate=new StringBuffer("run --name=%1$s ").append("--user=%2$s -d ").append("--workdir=%3$s ").append("--net=" + customNetwork2 + " ").append(getExpectedTestCapabilitiesArgumentString()).append("-v %4$s:%4$s ").append("-v %5$s:%5$s ").append("-v %6$s:%6$s ").append("-v %7$s:%7$s ").append("-v %8$s:%8$s ").append("%9$s ").append("bash %10$s/launch_container.sh");
  expectedCommand=String.format(expectedCommandTemplate.toString(),containerId,runAsUser,containerWorkDir,containerLocalDirs.get(0),filecacheDirs.get(0),containerWorkDir,containerLogDirs.get(0),userLocalDirs.get(0),image,containerWorkDir);
  dockerCommands=Files.readAllLines(Paths.get(dockerCommandFile),Charset.forName("UTF-8"));
  Assert.assertEquals(1,dockerCommands.size());
  Assert.assertEquals(expectedCommand,dockerCommands.get(0));
  env.put("YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK",customNetwork3);
  try {
    runtime.launchContainer(builder.build());
    Assert.fail("Disallowed network : " + customNetwork3 + "did not trigger launch failure.");
  }
 catch (  ContainerExecutionException e) {
    LOG.info("Caught expected exception : " + e);
  }
}
