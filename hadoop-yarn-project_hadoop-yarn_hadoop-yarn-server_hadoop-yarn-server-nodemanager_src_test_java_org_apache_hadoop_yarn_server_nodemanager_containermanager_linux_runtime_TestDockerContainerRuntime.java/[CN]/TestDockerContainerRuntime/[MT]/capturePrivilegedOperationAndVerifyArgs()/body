{
  ArgumentCaptor<PrivilegedOperation> opCaptor=ArgumentCaptor.forClass(PrivilegedOperation.class);
  verify(mockExecutor,times(1)).executePrivilegedOperation(anyList(),opCaptor.capture(),any(File.class),any(Map.class),eq(false),eq(false));
  Mockito.reset(mockExecutor);
  PrivilegedOperation op=opCaptor.getValue();
  Assert.assertEquals(PrivilegedOperation.OperationType.LAUNCH_DOCKER_CONTAINER,op.getOperationType());
  List<String> args=op.getArguments();
  Assert.assertEquals(13,args.size());
  Assert.assertEquals(runAsUser,args.get(0));
  Assert.assertEquals(user,args.get(1));
  Assert.assertEquals(Integer.toString(PrivilegedOperation.RunAsUserCommand.LAUNCH_DOCKER_CONTAINER.getValue()),args.get(2));
  Assert.assertEquals(appId,args.get(3));
  Assert.assertEquals(containerId,args.get(4));
  Assert.assertEquals(containerWorkDir.toString(),args.get(5));
  Assert.assertEquals(nmPrivateContainerScriptPath.toUri().toString(),args.get(6));
  Assert.assertEquals(nmPrivateTokensPath.toUri().getPath(),args.get(7));
  Assert.assertEquals(pidFilePath.toString(),args.get(8));
  Assert.assertEquals(localDirs.get(0),args.get(9));
  Assert.assertEquals(logDirs.get(0),args.get(10));
  Assert.assertEquals(resourcesOptions,args.get(12));
  return op;
}
