{
  DockerLinuxContainerRuntime runtime=new DockerLinuxContainerRuntime(mockExecutor,mockCGroupsHandler);
  runtime.initialize(conf);
  Random randEngine=new Random();
  String disallowedNetwork="sdn" + Integer.toString(randEngine.nextInt());
  try {
    env.put("YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK",disallowedNetwork);
    runtime.launchContainer(builder.build());
    Assert.fail("Network was expected to be disallowed: " + disallowedNetwork);
  }
 catch (  ContainerExecutionException e) {
    LOG.info("Caught expected exception: " + e);
  }
  int size=YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS.length;
  String allowedNetwork=YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS[randEngine.nextInt(size)];
  env.put("YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK",allowedNetwork);
  runtime.launchContainer(builder.build());
  PrivilegedOperation op=capturePrivilegedOperationAndVerifyArgs();
  List<String> args=op.getArguments();
  String dockerCommandFile=args.get(11);
  StringBuffer expectedCommandTemplate=new StringBuffer("run --name=%1$s ").append("--user=%2$s -d ").append("--workdir=%3$s ").append("--net=" + allowedNetwork + " ").append(getExpectedTestCapabilitiesArgumentString()).append("-v /etc/passwd:/etc/password:ro ").append("-v %4$s:%4$s ").append("-v %5$s:%5$s ").append("-v %6$s:%6$s ").append("-v %7$s:%7$s ").append("-v %8$s:%8$s ").append("%9$s ").append("bash %10$s/launch_container.sh");
  String expectedCommand=String.format(expectedCommandTemplate.toString(),containerId,runAsUser,containerWorkDir,containerLocalDirs.get(0),filecacheDirs.get(0),containerWorkDir,containerLogDirs.get(0),userLocalDirs.get(0),image,containerWorkDir);
  List<String> dockerCommands=Files.readAllLines(Paths.get(dockerCommandFile),Charset.forName("UTF-8"));
  Assert.assertEquals(1,dockerCommands.size());
  Assert.assertEquals(expectedCommand,dockerCommands.get(0));
}
