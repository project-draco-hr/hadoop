{
  String tmpPath=new StringBuffer(System.getProperty("test.build.data")).append('/').append("hadoop.tmp.dir").toString();
  conf=new Configuration();
  conf.set("hadoop.tmp.dir",tmpPath);
  mockExecutor=Mockito.mock(PrivilegedOperationExecutor.class);
  mockCGroupsHandler=Mockito.mock(CGroupsHandler.class);
  containerId="container_id";
  container=mock(Container.class);
  cId=mock(ContainerId.class);
  context=mock(ContainerLaunchContext.class);
  env=new HashMap<String,String>();
  image="busybox:latest";
  env.put(DockerLinuxContainerRuntime.ENV_DOCKER_CONTAINER_IMAGE,image);
  when(container.getContainerId()).thenReturn(cId);
  when(cId.toString()).thenReturn(containerId);
  when(container.getLaunchContext()).thenReturn(context);
  when(context.getEnvironment()).thenReturn(env);
  when(container.getUser()).thenReturn(submittingUser);
  runAsUser="run_as_user";
  user="user";
  appId="app_id";
  containerIdStr=containerId;
  containerWorkDir=new Path("/test_container_work_dir");
  nmPrivateContainerScriptPath=new Path("/test_script_path");
  nmPrivateTokensPath=new Path("/test_private_tokens_path");
  pidFilePath=new Path("/test_pid_file_path");
  localDirs=new ArrayList<>();
  logDirs=new ArrayList<>();
  resourcesOptions="cgroups=none";
  containerLocalDirs=new ArrayList<>();
  containerLogDirs=new ArrayList<>();
  localizedResources=new HashMap<>();
  localDirs.add("/test_local_dir");
  logDirs.add("/test_log_dir");
  containerLocalDirs.add("/test_container_local_dir");
  containerLogDirs.add("/test_container_log_dir");
  localizedResources.put(new Path("/test_local_dir/test_resource_file"),Collections.singletonList("test_dir/test_resource_file"));
  builder=new ContainerRuntimeContext.Builder(container);
  builder.setExecutionAttribute(RUN_AS_USER,runAsUser).setExecutionAttribute(USER,user).setExecutionAttribute(APPID,appId).setExecutionAttribute(CONTAINER_ID_STR,containerIdStr).setExecutionAttribute(CONTAINER_WORK_DIR,containerWorkDir).setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,nmPrivateContainerScriptPath).setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,nmPrivateTokensPath).setExecutionAttribute(PID_FILE_PATH,pidFilePath).setExecutionAttribute(LOCAL_DIRS,localDirs).setExecutionAttribute(LOG_DIRS,logDirs).setExecutionAttribute(CONTAINER_LOCAL_DIRS,containerLocalDirs).setExecutionAttribute(CONTAINER_LOG_DIRS,containerLogDirs).setExecutionAttribute(LOCALIZED_RESOURCES,localizedResources).setExecutionAttribute(RESOURCES_OPTIONS,resourcesOptions);
}
