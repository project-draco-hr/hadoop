{
  try {
    PlatformUI.getWorkbench().getProgressService().runInUI(this.getContainer(),new IRunnableWithProgress(){
      public void run(      IProgressMonitor monitor){
        try {
          monitor.beginTask("Create Hadoop Project",300);
          javaPage.getRunnable().run(new SubProgressMonitor(monitor,100));
          IProject project=javaPage.getNewJavaProject().getResource().getProject();
          IProjectDescription description=project.getDescription();
          String[] existingNatures=description.getNatureIds();
          String[] natures=new String[existingNatures.length + 1];
          for (int i=0; i < existingNatures.length; i++) {
            natures[i + 1]=existingNatures[i];
          }
          natures[0]=MapReduceNature.ID;
          description.setNatureIds(natures);
          project.setPersistentProperty(new QualifiedName(Activator.PLUGIN_ID,"hadoop.runtime.path"),firstPage.currentPath);
          project.setDescription(description,new NullProgressMonitor());
          String[] natureIds=project.getDescription().getNatureIds();
          for (int i=0; i < natureIds.length; i++) {
            log.fine("Nature id # " + i + " > "+ natureIds[i]);
          }
          monitor.worked(100);
          monitor.done();
          BasicNewProjectResourceWizard.updatePerspective(config);
        }
 catch (        CoreException e) {
          log.log(Level.SEVERE,"CoreException thrown.",e);
        }
catch (        InvocationTargetException e) {
          e.printStackTrace();
        }
catch (        InterruptedException e) {
          e.printStackTrace();
        }
      }
    }
,null);
  }
 catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
catch (  InterruptedException e) {
    e.printStackTrace();
  }
  return true;
}
