{
  LowRedundancyBlocks queues=new LowRedundancyBlocks();
  BlockInfo block1=genBlockInfo(1);
  BlockInfo block2=genBlockInfo(2);
  BlockInfo block_very_low_redundancy=genBlockInfo(3);
  BlockInfo block_corrupt=genBlockInfo(4);
  BlockInfo block_corrupt_repl_one=genBlockInfo(5);
  assertAdded(queues,block1,1,0,3);
  assertEquals(1,queues.getLowRedundancyBlockCount());
  assertEquals(1,queues.size());
  assertInLevel(queues,block1,LowRedundancyBlocks.QUEUE_HIGHEST_PRIORITY);
  assertFalse(queues.add(block1,1,0,0,3));
  assertAdded(queues,block2,2,0,3);
  assertEquals(2,queues.getLowRedundancyBlockCount());
  assertEquals(2,queues.size());
  assertInLevel(queues,block2,LowRedundancyBlocks.QUEUE_LOW_REDUNDANCY);
  assertAdded(queues,block_corrupt,0,0,3);
  assertEquals(3,queues.size());
  assertEquals(2,queues.getLowRedundancyBlockCount());
  assertEquals(1,queues.getCorruptBlockSize());
  assertInLevel(queues,block_corrupt,LowRedundancyBlocks.QUEUE_WITH_CORRUPT_BLOCKS);
  assertAdded(queues,block_very_low_redundancy,4,0,25);
  assertInLevel(queues,block_very_low_redundancy,LowRedundancyBlocks.QUEUE_VERY_LOW_REDUNDANCY);
  assertAdded(queues,block_corrupt_repl_one,0,0,1);
  assertEquals(2,queues.getCorruptBlockSize());
  assertEquals(1,queues.getCorruptReplOneBlockSize());
  queues.update(block_corrupt_repl_one,0,0,0,3,0,2);
  assertEquals(0,queues.getCorruptReplOneBlockSize());
  queues.update(block_corrupt,0,0,0,1,0,-2);
  assertEquals(1,queues.getCorruptReplOneBlockSize());
  queues.update(block_very_low_redundancy,0,0,0,1,-4,-24);
  assertEquals(2,queues.getCorruptReplOneBlockSize());
}
