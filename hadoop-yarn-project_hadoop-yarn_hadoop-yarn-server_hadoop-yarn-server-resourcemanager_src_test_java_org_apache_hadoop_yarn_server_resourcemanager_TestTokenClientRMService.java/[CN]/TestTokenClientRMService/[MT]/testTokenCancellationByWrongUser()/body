{
  RMContext rmContext=mock(RMContext.class);
  final ClientRMService rmService=new ClientRMService(rmContext,null,null,null,null,dtsm);
  UserGroupInformation[] kerbTestOwners={owner,other,tester,ownerKerb,otherKerb};
  UserGroupInformation[] kerbTestRenewers={owner,other,ownerKerb,otherKerb};
  for (  final UserGroupInformation tokOwner : kerbTestOwners) {
    for (    final UserGroupInformation tokRenewer : kerbTestRenewers) {
      try {
        testerKerb.doAs(new PrivilegedExceptionAction<Void>(){
          @Override public Void run() throws Exception {
            try {
              checkTokenCancellation(rmService,tokOwner,tokRenewer);
              Assert.fail("We should not reach here; token owner = " + tokOwner.getUserName() + ", renewer = "+ tokRenewer.getUserName());
              return null;
            }
 catch (            YarnException e) {
              Assert.assertTrue(e.getMessage().contains(testerKerb.getUserName() + " is not authorized to cancel the token"));
              return null;
            }
          }
        }
);
      }
 catch (      Exception e) {
        Assert.fail("Unexpected exception; " + e.getMessage());
      }
    }
  }
  UserGroupInformation[] simpleTestOwners={owner,other,ownerKerb,otherKerb,testerKerb};
  UserGroupInformation[] simpleTestRenewers={owner,other,ownerKerb,otherKerb};
  for (  final UserGroupInformation tokOwner : simpleTestOwners) {
    for (    final UserGroupInformation tokRenewer : simpleTestRenewers) {
      try {
        tester.doAs(new PrivilegedExceptionAction<Void>(){
          @Override public Void run() throws Exception {
            try {
              checkTokenCancellation(tokOwner,tokRenewer);
              Assert.fail("We should not reach here; token owner = " + tokOwner.getUserName() + ", renewer = "+ tokRenewer.getUserName());
              return null;
            }
 catch (            YarnException ex) {
              Assert.assertTrue(ex.getMessage().contains(tester.getUserName() + " is not authorized to cancel the token"));
              return null;
            }
          }
        }
);
      }
 catch (      Exception e) {
        Assert.fail("Unexpected exception; " + e.getMessage());
      }
    }
  }
}
