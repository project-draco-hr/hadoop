{
  YarnScheduler mockScheduler=mock(YarnScheduler.class);
  when(mockScheduler.allocate(any(ApplicationAttemptId.class),any(List.class),any(List.class),any(List.class),any(List.class),any(List.class),any(List.class))).thenAnswer(new Answer<Allocation>(){
    @SuppressWarnings("rawtypes") @Override public Allocation answer(    InvocationOnMock invocation) throws Throwable {
      ResourceRequest rr=(ResourceRequest)((List)invocation.getArguments()[1]).get(0);
      assertEquals(Resource.newInstance(3333,1),rr.getCapability());
      assertEquals("label-expression",rr.getNodeLabelExpression());
      assertEquals(RMAppAttemptImpl.AM_CONTAINER_PRIORITY,rr.getPriority());
      assertEquals(1,rr.getNumContainers());
      assertEquals(ResourceRequest.ANY,rr.getResourceName());
      List l=new ArrayList();
      Set s=new HashSet();
      return new Allocation(l,Resources.none(),s,s,l);
    }
  }
);
  applicationAttempt=new RMAppAttemptImpl(applicationAttempt.getAppAttemptId(),spyRMContext,scheduler,masterService,submissionContext,new Configuration(),true,ResourceRequest.newInstance(Priority.UNDEFINED,"host1",Resource.newInstance(3333,1),3,false,"label-expression"));
  new RMAppAttemptImpl.ScheduleTransition().transition((RMAppAttemptImpl)applicationAttempt,null);
}
