{
  this.configuration=conf;
  UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
  UserGroupInformation realUgi=ugi.getRealUser();
  if (realUgi != null) {
    authUgi=realUgi;
    doAsUser=ugi.getShortUserName();
  }
 else {
    authUgi=ugi;
    doAsUser=null;
  }
  ClientConfig cc=new DefaultClientConfig();
  cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);
  connConfigurator=newConnConfigurator(conf);
  if (UserGroupInformation.isSecurityEnabled()) {
    authenticator=new KerberosDelegationTokenAuthenticator();
  }
 else {
    authenticator=new PseudoDelegationTokenAuthenticator();
  }
  authenticator.setConnectionConfigurator(connConfigurator);
  token=new DelegationTokenAuthenticatedURL.Token();
  connectionRetry=new TimelineClientConnectionRetry(conf);
  client=new Client(new URLConnectionClientHandler(new TimelineURLConnectionFactory()),cc);
  TimelineJerseyRetryFilter retryFilter=new TimelineJerseyRetryFilter();
  if (!timelineServiceV2) {
    client.addFilter(retryFilter);
  }
  if (timelineServiceV2) {
    maxServiceRetries=conf.getInt(YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES);
    serviceRetryInterval=conf.getLong(YarnConfiguration.TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS);
  }
 else {
    if (YarnConfiguration.useHttps(conf)) {
      setTimelineServiceAddress(conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS));
    }
 else {
      setTimelineServiceAddress(conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS));
    }
    timelineServiceVersion=conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);
    LOG.info("Timeline service address: " + getTimelineServiceAddress());
  }
  super.serviceInit(conf);
}
