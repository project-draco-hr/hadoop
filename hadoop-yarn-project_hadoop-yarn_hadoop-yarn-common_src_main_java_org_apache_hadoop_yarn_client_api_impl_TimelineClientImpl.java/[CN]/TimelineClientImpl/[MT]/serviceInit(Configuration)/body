{
  isEnabled=conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);
  if (!isEnabled) {
    LOG.info("Timeline service is not enabled");
  }
 else {
    ClientConfig cc=new DefaultClientConfig();
    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);
    connConfigurator=newConnConfigurator(conf);
    if (UserGroupInformation.isSecurityEnabled()) {
      authenticator=new KerberosDelegationTokenAuthenticator();
    }
 else {
      authenticator=new PseudoDelegationTokenAuthenticator();
    }
    authenticator.setConnectionConfigurator(connConfigurator);
    client=new Client(new URLConnectionClientHandler(new TimelineURLConnectionFactory()),cc);
    token=new DelegationTokenAuthenticatedURL.Token();
    if (YarnConfiguration.useHttps(conf)) {
      resURI=URI.create(JOINER.join("https://",conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS),RESOURCE_URI_STR));
    }
 else {
      resURI=URI.create(JOINER.join("http://",conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS),RESOURCE_URI_STR));
    }
    LOG.info("Timeline service address: " + resURI);
  }
  super.serviceInit(conf);
}
