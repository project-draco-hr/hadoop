{
  this.configuration=conf;
  UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
  UserGroupInformation realUgi=ugi.getRealUser();
  if (realUgi != null) {
    authUgi=realUgi;
    doAsUser=ugi.getShortUserName();
  }
 else {
    authUgi=ugi;
    doAsUser=null;
  }
  ClientConfig cc=new DefaultClientConfig();
  cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);
  connConfigurator=newConnConfigurator(conf);
  if (UserGroupInformation.isSecurityEnabled()) {
    authenticator=new KerberosDelegationTokenAuthenticator();
  }
 else {
    authenticator=new PseudoDelegationTokenAuthenticator();
  }
  authenticator.setConnectionConfigurator(connConfigurator);
  token=new DelegationTokenAuthenticatedURL.Token();
  connectionRetry=new TimelineClientConnectionRetry(conf);
  client=new Client(new URLConnectionClientHandler(new TimelineURLConnectionFactory()),cc);
  TimelineJerseyRetryFilter retryFilter=new TimelineJerseyRetryFilter();
  client.addFilter(retryFilter);
  if (YarnConfiguration.useHttps(conf)) {
    timelineServiceAddress=conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);
  }
 else {
    timelineServiceAddress=conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);
  }
  LOG.info("Timeline service address: " + resURI);
  timelineServiceVersion=conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);
  LOG.info("Timeline service address: " + timelineServiceAddress);
  super.serviceInit(conf);
}
