{
  Map<ApplicationAccessType,String> appAcls=new HashMap<ApplicationAccessType,String>();
  if (localLogDirs.length < 7) {
    throw new IllegalArgumentException("Argument localLogDirs must be at least of length 7");
  }
  Path[] localAppLogDirPaths=new Path[localLogDirs.length];
  for (int i=0; i < localAppLogDirPaths.length; i++) {
    localAppLogDirPaths[i]=new Path(localLogDirs[i].getAbsolutePath(),appId.toString());
  }
  final List<String> localLogDirPaths=new ArrayList<String>(localLogDirs.length);
  for (int i=0; i < localLogDirs.length; i++) {
    localLogDirPaths.add(localLogDirs[i].getAbsolutePath());
  }
  FsPermission defaultPermission=FsPermission.getDirDefault().applyUMask(lfs.getUMask());
  final FileStatus fs=new FileStatus(0,true,1,0,System.currentTimeMillis(),0,defaultPermission,"","",new Path(localLogDirs[0].getAbsolutePath()));
  doReturn(fs).when(spylfs).getFileStatus(isA(Path.class));
  doReturn(localLogDirPaths).when(dirsHandler).getLogDirsForCleanup();
  logHandler.handle(new LogHandlerAppStartedEvent(appId,user,null,appAcls));
  Mockito.doThrow(new FileNotFoundException()).when(spylfs).getFileStatus(eq(localAppLogDirPaths[0]));
  doReturn(fs).when(spylfs).getFileStatus(eq(localAppLogDirPaths[1]));
  Mockito.doThrow(new AccessControlException()).when(spylfs).getFileStatus(eq(localAppLogDirPaths[2]));
  doReturn(fs).when(spylfs).getFileStatus(eq(localAppLogDirPaths[3]));
  Mockito.doThrow(new IOException()).when(spylfs).getFileStatus(eq(localAppLogDirPaths[4]));
  Mockito.doThrow(new UnsupportedFileSystemException("test")).when(spylfs).getFileStatus(eq(localAppLogDirPaths[5]));
  doReturn(fs).when(spylfs).getFileStatus(eq(localAppLogDirPaths[6]));
  logHandler.handle(new LogHandlerAppFinishedEvent(appId));
  testDeletionServiceCall(mockDelService,user,5000,localAppLogDirPaths[1],localAppLogDirPaths[3],localAppLogDirPaths[6]);
  return;
}
