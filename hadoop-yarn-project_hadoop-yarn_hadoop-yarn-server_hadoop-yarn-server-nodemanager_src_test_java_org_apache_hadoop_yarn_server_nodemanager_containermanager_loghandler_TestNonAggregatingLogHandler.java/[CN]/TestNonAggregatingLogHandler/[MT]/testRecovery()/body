{
  File[] localLogDirs=getLocalLogDirFiles(this.getClass().getName(),2);
  String localLogDirsString=localLogDirs[0].getAbsolutePath() + "," + localLogDirs[1].getAbsolutePath();
  conf.set(YarnConfiguration.NM_LOG_DIRS,localLogDirsString);
  conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,false);
  conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS,YarnConfiguration.DEFAULT_NM_LOG_RETAIN_SECONDS);
  dirsHandler.init(conf);
  NMStateStoreService stateStore=new NMMemoryStateStoreService();
  stateStore.init(conf);
  stateStore.start();
  NonAggregatingLogHandlerWithMockExecutor logHandler=new NonAggregatingLogHandlerWithMockExecutor(dispatcher,mockDelService,dirsHandler,stateStore);
  logHandler.init(conf);
  logHandler.start();
  logHandler.handle(new LogHandlerAppStartedEvent(appId,user,null,ContainerLogsRetentionPolicy.ALL_CONTAINERS,null));
  logHandler.handle(new LogHandlerContainerFinishedEvent(container11,0));
  logHandler.handle(new LogHandlerAppFinishedEvent(appId));
  logHandler.close();
  logHandler=new NonAggregatingLogHandlerWithMockExecutor(dispatcher,mockDelService,dirsHandler,stateStore);
  logHandler.init(conf);
  logHandler.start();
  ArgumentCaptor<Runnable> schedArg=ArgumentCaptor.forClass(Runnable.class);
  verify(logHandler.mockSched).schedule(schedArg.capture(),anyLong(),eq(TimeUnit.MILLISECONDS));
  schedArg.getValue().run();
  logHandler.close();
  logHandler=new NonAggregatingLogHandlerWithMockExecutor(dispatcher,mockDelService,dirsHandler,stateStore);
  logHandler.init(conf);
  logHandler.start();
  verify(logHandler.mockSched,never()).schedule(any(Runnable.class),anyLong(),any(TimeUnit.class));
  logHandler.close();
}
