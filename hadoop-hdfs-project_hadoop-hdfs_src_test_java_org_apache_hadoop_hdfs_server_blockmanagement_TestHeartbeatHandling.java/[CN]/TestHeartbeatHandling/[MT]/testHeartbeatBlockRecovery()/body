{
  final Configuration conf=new HdfsConfiguration();
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  try {
    cluster.waitActive();
    final FSNamesystem namesystem=cluster.getNamesystem();
    final HeartbeatManager hm=namesystem.getBlockManager().getDatanodeManager().getHeartbeatManager();
    final String poolId=namesystem.getBlockPoolId();
    final DatanodeRegistration nodeReg1=DataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(0),poolId);
    final DatanodeDescriptor dd1=NameNodeAdapter.getDatanode(namesystem,nodeReg1);
    final DatanodeRegistration nodeReg2=DataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(1),poolId);
    final DatanodeDescriptor dd2=NameNodeAdapter.getDatanode(namesystem,nodeReg2);
    final DatanodeRegistration nodeReg3=DataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(2),poolId);
    final DatanodeDescriptor dd3=NameNodeAdapter.getDatanode(namesystem,nodeReg3);
    try {
      namesystem.writeLock();
synchronized (hm) {
        NameNodeAdapter.sendHeartBeat(nodeReg1,dd1,namesystem);
        NameNodeAdapter.sendHeartBeat(nodeReg2,dd2,namesystem);
        NameNodeAdapter.sendHeartBeat(nodeReg3,dd3,namesystem);
        dd1.setLastUpdate(System.currentTimeMillis());
        dd2.setLastUpdate(System.currentTimeMillis());
        dd3.setLastUpdate(System.currentTimeMillis());
        final DatanodeStorageInfo[] storages={dd1.getStorageInfos().iterator().next(),dd2.getStorageInfos().iterator().next(),dd3.getStorageInfos().iterator().next()};
        BlockInfoUnderConstruction blockInfo=new BlockInfoUnderConstruction(new Block(0,0,GenerationStamp.LAST_RESERVED_STAMP),3,BlockUCState.UNDER_RECOVERY,storages);
        dd1.addBlockToBeRecovered(blockInfo);
        DatanodeCommand[] cmds=NameNodeAdapter.sendHeartBeat(nodeReg1,dd1,namesystem).getCommands();
        assertEquals(1,cmds.length);
        assertEquals(DatanodeProtocol.DNA_RECOVERBLOCK,cmds[0].getAction());
        BlockRecoveryCommand recoveryCommand=(BlockRecoveryCommand)cmds[0];
        assertEquals(1,recoveryCommand.getRecoveringBlocks().size());
        DatanodeInfo[] recoveringNodes=recoveryCommand.getRecoveringBlocks().toArray(new BlockRecoveryCommand.RecoveringBlock[0])[0].getLocations();
        assertEquals(3,recoveringNodes.length);
        assertEquals(recoveringNodes[0],(DatanodeInfo)dd1);
        assertEquals(recoveringNodes[1],(DatanodeInfo)dd2);
        assertEquals(recoveringNodes[2],(DatanodeInfo)dd3);
        dd1.setLastUpdate(System.currentTimeMillis());
        dd2.setLastUpdate(System.currentTimeMillis() - 40 * 1000);
        dd3.setLastUpdate(System.currentTimeMillis());
        blockInfo=new BlockInfoUnderConstruction(new Block(0,0,GenerationStamp.LAST_RESERVED_STAMP),3,BlockUCState.UNDER_RECOVERY,storages);
        dd1.addBlockToBeRecovered(blockInfo);
        cmds=NameNodeAdapter.sendHeartBeat(nodeReg1,dd1,namesystem).getCommands();
        assertEquals(1,cmds.length);
        assertEquals(DatanodeProtocol.DNA_RECOVERBLOCK,cmds[0].getAction());
        recoveryCommand=(BlockRecoveryCommand)cmds[0];
        assertEquals(1,recoveryCommand.getRecoveringBlocks().size());
        recoveringNodes=recoveryCommand.getRecoveringBlocks().toArray(new BlockRecoveryCommand.RecoveringBlock[0])[0].getLocations();
        assertEquals(2,recoveringNodes.length);
        assertEquals(recoveringNodes[0],(DatanodeInfo)dd1);
        assertEquals(recoveringNodes[1],(DatanodeInfo)dd3);
        dd1.setLastUpdate(System.currentTimeMillis() - 60 * 1000);
        dd2.setLastUpdate(System.currentTimeMillis() - 40 * 1000);
        dd3.setLastUpdate(System.currentTimeMillis() - 80 * 1000);
        blockInfo=new BlockInfoUnderConstruction(new Block(0,0,GenerationStamp.LAST_RESERVED_STAMP),3,BlockUCState.UNDER_RECOVERY,storages);
        dd1.addBlockToBeRecovered(blockInfo);
        cmds=NameNodeAdapter.sendHeartBeat(nodeReg1,dd1,namesystem).getCommands();
        assertEquals(1,cmds.length);
        assertEquals(DatanodeProtocol.DNA_RECOVERBLOCK,cmds[0].getAction());
        recoveryCommand=(BlockRecoveryCommand)cmds[0];
        assertEquals(1,recoveryCommand.getRecoveringBlocks().size());
        recoveringNodes=recoveryCommand.getRecoveringBlocks().toArray(new BlockRecoveryCommand.RecoveringBlock[0])[0].getLocations();
        assertEquals(3,recoveringNodes.length);
        assertEquals(recoveringNodes[0],(DatanodeInfo)dd1);
        assertEquals(recoveringNodes[1],(DatanodeInfo)dd2);
        assertEquals(recoveringNodes[2],(DatanodeInfo)dd3);
      }
    }
  finally {
      namesystem.writeUnlock();
    }
  }
  finally {
    cluster.shutdown();
  }
}
