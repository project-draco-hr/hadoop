{
  final Configuration conf=new HdfsConfiguration();
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  try {
    cluster.waitActive();
    final FSNamesystem namesystem=cluster.getNamesystem();
    final HeartbeatManager hm=namesystem.getBlockManager().getDatanodeManager().getHeartbeatManager();
    final String poolId=namesystem.getBlockPoolId();
    final DatanodeRegistration nodeReg1=DataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(0),poolId);
    final DatanodeDescriptor dd1=NameNodeAdapter.getDatanode(namesystem,nodeReg1);
    dd1.updateStorage(new DatanodeStorage(DatanodeStorage.generateUuid()));
    final DatanodeRegistration nodeReg2=DataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(1),poolId);
    final DatanodeDescriptor dd2=NameNodeAdapter.getDatanode(namesystem,nodeReg2);
    dd2.updateStorage(new DatanodeStorage(DatanodeStorage.generateUuid()));
    final DatanodeRegistration nodeReg3=DataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(2),poolId);
    final DatanodeDescriptor dd3=NameNodeAdapter.getDatanode(namesystem,nodeReg3);
    dd3.updateStorage(new DatanodeStorage(DatanodeStorage.generateUuid()));
    try {
      namesystem.writeLock();
synchronized (hm) {
        NameNodeAdapter.sendHeartBeat(nodeReg1,dd1,namesystem);
        NameNodeAdapter.sendHeartBeat(nodeReg2,dd2,namesystem);
        NameNodeAdapter.sendHeartBeat(nodeReg3,dd3,namesystem);
        DFSTestUtil.resetLastUpdatesWithOffset(dd1,0);
        DFSTestUtil.resetLastUpdatesWithOffset(dd2,0);
        DFSTestUtil.resetLastUpdatesWithOffset(dd3,0);
        final DatanodeStorageInfo[] storages={dd1.getStorageInfos()[0],dd2.getStorageInfos()[0],dd3.getStorageInfos()[0]};
        BlockInfoUnderConstructionContiguous blockInfo=new BlockInfoUnderConstructionContiguous(new Block(0,0,GenerationStamp.LAST_RESERVED_STAMP),(short)3,BlockUCState.UNDER_RECOVERY,storages);
        dd1.addBlockToBeRecovered(blockInfo);
        DatanodeCommand[] cmds=NameNodeAdapter.sendHeartBeat(nodeReg1,dd1,namesystem).getCommands();
        assertEquals(1,cmds.length);
        assertEquals(DatanodeProtocol.DNA_RECOVERBLOCK,cmds[0].getAction());
        BlockRecoveryCommand recoveryCommand=(BlockRecoveryCommand)cmds[0];
        assertEquals(1,recoveryCommand.getRecoveringBlocks().size());
        DatanodeInfo[] recoveringNodes=recoveryCommand.getRecoveringBlocks().toArray(new BlockRecoveryCommand.RecoveringBlock[0])[0].getLocations();
        assertEquals(3,recoveringNodes.length);
        assertEquals(recoveringNodes[0],dd1);
        assertEquals(recoveringNodes[1],dd2);
        assertEquals(recoveringNodes[2],dd3);
        DFSTestUtil.resetLastUpdatesWithOffset(dd1,0);
        DFSTestUtil.resetLastUpdatesWithOffset(dd2,-40 * 1000);
        DFSTestUtil.resetLastUpdatesWithOffset(dd3,0);
        blockInfo=new BlockInfoUnderConstructionContiguous(new Block(0,0,GenerationStamp.LAST_RESERVED_STAMP),(short)3,BlockUCState.UNDER_RECOVERY,storages);
        dd1.addBlockToBeRecovered(blockInfo);
        cmds=NameNodeAdapter.sendHeartBeat(nodeReg1,dd1,namesystem).getCommands();
        assertEquals(1,cmds.length);
        assertEquals(DatanodeProtocol.DNA_RECOVERBLOCK,cmds[0].getAction());
        recoveryCommand=(BlockRecoveryCommand)cmds[0];
        assertEquals(1,recoveryCommand.getRecoveringBlocks().size());
        recoveringNodes=recoveryCommand.getRecoveringBlocks().toArray(new BlockRecoveryCommand.RecoveringBlock[0])[0].getLocations();
        assertEquals(2,recoveringNodes.length);
        assertEquals(recoveringNodes[0],dd1);
        assertEquals(recoveringNodes[1],dd3);
        DFSTestUtil.resetLastUpdatesWithOffset(dd1,-60 * 1000);
        DFSTestUtil.resetLastUpdatesWithOffset(dd2,-40 * 1000);
        DFSTestUtil.resetLastUpdatesWithOffset(dd3,-80 * 1000);
        blockInfo=new BlockInfoUnderConstructionContiguous(new Block(0,0,GenerationStamp.LAST_RESERVED_STAMP),(short)3,BlockUCState.UNDER_RECOVERY,storages);
        dd1.addBlockToBeRecovered(blockInfo);
        cmds=NameNodeAdapter.sendHeartBeat(nodeReg1,dd1,namesystem).getCommands();
        assertEquals(1,cmds.length);
        assertEquals(DatanodeProtocol.DNA_RECOVERBLOCK,cmds[0].getAction());
        recoveryCommand=(BlockRecoveryCommand)cmds[0];
        assertEquals(1,recoveryCommand.getRecoveringBlocks().size());
        recoveringNodes=recoveryCommand.getRecoveringBlocks().toArray(new BlockRecoveryCommand.RecoveringBlock[0])[0].getLocations();
        assertEquals(3,recoveringNodes.length);
        assertEquals(recoveringNodes[0],dd1);
        assertEquals(recoveringNodes[1],dd2);
        assertEquals(recoveringNodes[2],dd3);
      }
    }
  finally {
      namesystem.writeUnlock();
    }
  }
  finally {
    cluster.shutdown();
  }
}
