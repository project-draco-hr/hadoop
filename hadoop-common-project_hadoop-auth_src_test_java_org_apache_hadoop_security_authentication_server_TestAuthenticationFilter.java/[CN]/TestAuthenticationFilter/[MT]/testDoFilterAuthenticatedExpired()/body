{
  AuthenticationFilter filter=new AuthenticationFilter();
  try {
    FilterConfig config=Mockito.mock(FilterConfig.class);
    Mockito.when(config.getInitParameter(AuthenticationFilter.AUTH_TYPE)).thenReturn(DummyAuthenticationHandler.class.getName());
    Mockito.when(config.getInitParameterNames()).thenReturn(new Vector<String>(Arrays.asList(AuthenticationFilter.AUTH_TYPE)).elements());
    filter.init(config);
    HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
    Mockito.when(request.getRequestURL()).thenReturn(new StringBuffer("http://foo:8080/bar"));
    AuthenticationToken token=new AuthenticationToken("u","p",DummyAuthenticationHandler.TYPE);
    token.setExpires(System.currentTimeMillis() - 1000);
    Signer signer=new Signer("secret".getBytes());
    String tokenSigned=signer.sign(token.toString());
    Cookie cookie=new Cookie(AuthenticatedURL.AUTH_COOKIE,tokenSigned);
    Mockito.when(request.getCookies()).thenReturn(new Cookie[]{cookie});
    HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
    FilterChain chain=Mockito.mock(FilterChain.class);
    Mockito.doAnswer(new Answer<Object>(){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        fail();
        return null;
      }
    }
).when(chain).doFilter(Mockito.<ServletRequest>anyObject(),Mockito.<ServletResponse>anyObject());
    final Cookie[] setCookie=new Cookie[1];
    Mockito.doAnswer(new Answer<Object>(){
      @Override public Object answer(      InvocationOnMock invocation) throws Throwable {
        Object[] args=invocation.getArguments();
        setCookie[0]=(Cookie)args[0];
        return null;
      }
    }
).when(response).addCookie(Mockito.<Cookie>anyObject());
    filter.doFilter(request,response,chain);
    Mockito.verify(response).sendError(Mockito.eq(HttpServletResponse.SC_UNAUTHORIZED),Mockito.anyString());
    assertNotNull(setCookie[0]);
    assertEquals(AuthenticatedURL.AUTH_COOKIE,setCookie[0].getName());
    assertEquals("",setCookie[0].getValue());
  }
  finally {
    filter.destroy();
  }
}
