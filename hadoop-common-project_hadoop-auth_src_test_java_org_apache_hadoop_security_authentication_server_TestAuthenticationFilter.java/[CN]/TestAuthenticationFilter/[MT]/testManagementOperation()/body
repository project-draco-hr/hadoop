{
  AuthenticationFilter filter=new AuthenticationFilter();
  try {
    FilterConfig config=Mockito.mock(FilterConfig.class);
    Mockito.when(config.getInitParameter("management.operation.return")).thenReturn("false");
    Mockito.when(config.getInitParameter(AuthenticationFilter.AUTH_TYPE)).thenReturn(DummyAuthenticationHandler.class.getName());
    Mockito.when(config.getInitParameterNames()).thenReturn(new Vector<String>(Arrays.asList(AuthenticationFilter.AUTH_TYPE,"management.operation.return")).elements());
    filter.init(config);
    HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
    Mockito.when(request.getRequestURL()).thenReturn(new StringBuffer("http://foo:8080/bar"));
    HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
    FilterChain chain=Mockito.mock(FilterChain.class);
    filter.doFilter(request,response,chain);
    Mockito.verify(response).setStatus(HttpServletResponse.SC_ACCEPTED);
    Mockito.verifyNoMoreInteractions(response);
    Mockito.reset(request);
    Mockito.reset(response);
    AuthenticationToken token=new AuthenticationToken("u","p","t");
    token.setExpires(System.currentTimeMillis() + 1000);
    Signer signer=new Signer("secret".getBytes());
    String tokenSigned=signer.sign(token.toString());
    Cookie cookie=new Cookie(AuthenticatedURL.AUTH_COOKIE,tokenSigned);
    Mockito.when(request.getCookies()).thenReturn(new Cookie[]{cookie});
    filter.doFilter(request,response,chain);
    Mockito.verify(response).setStatus(HttpServletResponse.SC_ACCEPTED);
    Mockito.verifyNoMoreInteractions(response);
  }
  finally {
    filter.destroy();
  }
}
