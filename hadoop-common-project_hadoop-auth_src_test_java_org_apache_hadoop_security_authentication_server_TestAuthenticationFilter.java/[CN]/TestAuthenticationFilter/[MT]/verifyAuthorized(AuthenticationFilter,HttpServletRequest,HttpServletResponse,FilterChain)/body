{
  final Map<String,String> cookieMap=new HashMap<>();
  Mockito.doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      String cookieHeader=(String)invocation.getArguments()[1];
      parseCookieMap(cookieHeader,cookieMap);
      return null;
    }
  }
).when(response).addHeader(Mockito.eq("Set-Cookie"),Mockito.anyString());
  filter.doFilter(request,response,chain);
  String v=cookieMap.get(AuthenticatedURL.AUTH_COOKIE);
  Assert.assertNotNull("cookie missing",v);
  Assert.assertTrue(v.contains("u=") && v.contains("p=") && v.contains("t=")&& v.contains("i=")&& v.contains("e=")&& v.contains("s="));
  Mockito.verify(chain).doFilter(Mockito.any(ServletRequest.class),Mockito.any(ServletResponse.class));
  SignerSecretProvider secretProvider=StringSignerSecretProviderCreator.newStringSignerSecretProvider();
  Properties secretProviderProps=new Properties();
  secretProviderProps.setProperty(AuthenticationFilter.SIGNATURE_SECRET,"secret");
  secretProvider.init(secretProviderProps,null,TOKEN_VALIDITY_SEC);
  Signer signer=new Signer(secretProvider);
  String value=signer.verifyAndExtract(v);
  AuthenticationToken token=AuthenticationToken.parse(value);
  assertThat(token.getMaxInactives(),not(0L));
  assertThat(token.getExpires(),not(0L));
  Assert.assertFalse("Token is expired.",token.isExpired());
}
