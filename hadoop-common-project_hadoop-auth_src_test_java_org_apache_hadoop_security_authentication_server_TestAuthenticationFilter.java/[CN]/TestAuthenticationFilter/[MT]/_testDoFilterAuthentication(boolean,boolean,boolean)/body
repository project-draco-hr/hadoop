{
  AuthenticationFilter filter=new AuthenticationFilter();
  FilterConfig config=Mockito.mock(FilterConfig.class);
  Mockito.when(config.getInitParameter("management.operation.return")).thenReturn("true");
  Mockito.when(config.getInitParameter("expired.token")).thenReturn(Boolean.toString(expired));
  Mockito.when(config.getInitParameter(AuthenticationFilter.AUTH_TYPE)).thenReturn(DummyAuthenticationHandler.class.getName());
  Mockito.when(config.getInitParameter(AuthenticationFilter.AUTH_TOKEN_VALIDITY)).thenReturn(new Long(TOKEN_VALIDITY_SEC).toString());
  Mockito.when(config.getInitParameter(AuthenticationFilter.SIGNATURE_SECRET)).thenReturn("secret");
  Mockito.when(config.getInitParameterNames()).thenReturn(new Vector<String>(Arrays.asList(AuthenticationFilter.AUTH_TYPE,AuthenticationFilter.AUTH_TOKEN_VALIDITY,AuthenticationFilter.SIGNATURE_SECRET,"management.operation" + ".return","expired.token")).elements());
  ServletContext context=Mockito.mock(ServletContext.class);
  Mockito.when(context.getAttribute(AuthenticationFilter.SIGNATURE_PROVIDER_ATTRIBUTE)).thenReturn(null);
  Mockito.when(config.getServletContext()).thenReturn(context);
  if (withDomainPath) {
    Mockito.when(config.getInitParameter(AuthenticationFilter.COOKIE_DOMAIN)).thenReturn(".foo.com");
    Mockito.when(config.getInitParameter(AuthenticationFilter.COOKIE_PATH)).thenReturn("/bar");
    Mockito.when(config.getInitParameterNames()).thenReturn(new Vector<String>(Arrays.asList(AuthenticationFilter.AUTH_TYPE,AuthenticationFilter.AUTH_TOKEN_VALIDITY,AuthenticationFilter.SIGNATURE_SECRET,AuthenticationFilter.COOKIE_DOMAIN,AuthenticationFilter.COOKIE_PATH,"management.operation.return")).elements());
  }
  HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
  Mockito.when(request.getParameter("authenticated")).thenReturn("true");
  Mockito.when(request.getRequestURL()).thenReturn(new StringBuffer("http://foo:8080/bar"));
  Mockito.when(request.getQueryString()).thenReturn("authenticated=true");
  if (invalidToken) {
    Mockito.when(request.getCookies()).thenReturn(new Cookie[]{new Cookie(AuthenticatedURL.AUTH_COOKIE,"foo")});
  }
  HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
  FilterChain chain=Mockito.mock(FilterChain.class);
  final HashMap<String,String> cookieMap=new HashMap<String,String>();
  Mockito.doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      String cookieHeader=(String)invocation.getArguments()[1];
      parseCookieMap(cookieHeader,cookieMap);
      return null;
    }
  }
).when(response).addHeader(Mockito.eq("Set-Cookie"),Mockito.anyString());
  try {
    filter.init(config);
    filter.doFilter(request,response,chain);
    if (expired) {
      Mockito.verify(response,Mockito.never()).addHeader(Mockito.eq("Set-Cookie"),Mockito.anyString());
    }
 else {
      String v=cookieMap.get(AuthenticatedURL.AUTH_COOKIE);
      Assert.assertNotNull("cookie missing",v);
      Assert.assertTrue(v.contains("u=") && v.contains("p=") && v.contains("t=")&& v.contains("e=")&& v.contains("s="));
      Mockito.verify(chain).doFilter(Mockito.any(ServletRequest.class),Mockito.any(ServletResponse.class));
      Signer signer=new Signer(new StringSignerSecretProvider("secret"));
      String value=signer.verifyAndExtract(v);
      AuthenticationToken token=AuthenticationToken.parse(value);
      assertThat(token.getExpires(),not(0L));
      if (withDomainPath) {
        Assert.assertEquals(".foo.com",cookieMap.get("Domain"));
        Assert.assertEquals("/bar",cookieMap.get("Path"));
      }
 else {
        Assert.assertFalse(cookieMap.containsKey("Domain"));
        Assert.assertFalse(cookieMap.containsKey("Path"));
      }
    }
  }
  finally {
    filter.destroy();
  }
}
