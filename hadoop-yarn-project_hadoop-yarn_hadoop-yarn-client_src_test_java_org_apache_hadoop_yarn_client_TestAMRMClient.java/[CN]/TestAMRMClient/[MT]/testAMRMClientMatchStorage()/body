{
  AMRMClientImpl<StoredContainerRequest> amClient=null;
  try {
    amClient=(AMRMClientImpl<StoredContainerRequest>)AMRMClient.<StoredContainerRequest>createAMRMClient(attemptId);
    amClient.init(conf);
    amClient.start();
    amClient.registerApplicationMaster("Host",10000,"");
    Priority priority1=Records.newRecord(Priority.class);
    priority1.setPriority(2);
    StoredContainerRequest storedContainer1=new StoredContainerRequest(capability,nodes,racks,priority);
    StoredContainerRequest storedContainer2=new StoredContainerRequest(capability,nodes,racks,priority);
    StoredContainerRequest storedContainer3=new StoredContainerRequest(capability,null,null,priority1);
    amClient.addContainerRequest(storedContainer1);
    amClient.addContainerRequest(storedContainer2);
    amClient.addContainerRequest(storedContainer3);
    int containersRequestedAny=amClient.remoteRequestsTable.get(priority).get(ResourceRequest.ANY).get(capability).remoteRequest.getNumContainers();
    assertTrue(containersRequestedAny == 2);
    containersRequestedAny=amClient.remoteRequestsTable.get(priority1).get(ResourceRequest.ANY).get(capability).remoteRequest.getNumContainers();
    assertTrue(containersRequestedAny == 1);
    List<? extends Collection<StoredContainerRequest>> matches=amClient.getMatchingRequests(priority,node,capability);
    verifyMatches(matches,2);
    matches=amClient.getMatchingRequests(priority,rack,capability);
    verifyMatches(matches,2);
    matches=amClient.getMatchingRequests(priority,ResourceRequest.ANY,capability);
    verifyMatches(matches,2);
    matches=amClient.getMatchingRequests(priority1,rack,capability);
    assertTrue(matches.isEmpty());
    matches=amClient.getMatchingRequests(priority1,ResourceRequest.ANY,capability);
    verifyMatches(matches,1);
    amClient.removeContainerRequest(storedContainer3);
    matches=amClient.getMatchingRequests(priority,node,capability);
    verifyMatches(matches,2);
    amClient.removeContainerRequest(storedContainer2);
    matches=amClient.getMatchingRequests(priority,node,capability);
    verifyMatches(matches,1);
    matches=amClient.getMatchingRequests(priority,rack,capability);
    verifyMatches(matches,1);
    StoredContainerRequest storedRequest=matches.get(0).iterator().next();
    assertTrue(storedContainer1 == storedRequest);
    amClient.removeContainerRequest(storedContainer1);
    matches=amClient.getMatchingRequests(priority,ResourceRequest.ANY,capability);
    assertTrue(matches.isEmpty());
    matches=amClient.getMatchingRequests(priority1,ResourceRequest.ANY,capability);
    assertTrue(matches.isEmpty());
    assertTrue(amClient.remoteRequestsTable.isEmpty());
    amClient.addContainerRequest(storedContainer1);
    amClient.addContainerRequest(storedContainer3);
    int allocatedContainerCount=0;
    int iterationsLeft=2;
    while (allocatedContainerCount < 2 && iterationsLeft-- > 0) {
      AllocateResponse allocResponse=amClient.allocate(0.1f);
      assertTrue(amClient.ask.size() == 0);
      assertTrue(amClient.release.size() == 0);
      assertTrue(nodeCount == amClient.getClusterNodeCount());
      allocatedContainerCount+=allocResponse.getAllocatedContainers().size();
      for (      Container container : allocResponse.getAllocatedContainers()) {
        ContainerRequest expectedRequest=container.getPriority().equals(storedContainer1.getPriority()) ? storedContainer1 : storedContainer3;
        matches=amClient.getMatchingRequests(container.getPriority(),ResourceRequest.ANY,container.getResource());
        verifyMatches(matches,1);
        ContainerRequest matchedRequest=matches.get(0).iterator().next();
        assertTrue(matchedRequest == expectedRequest);
        amClient.releaseAssignedContainer(container.getId());
      }
      if (allocatedContainerCount < containersRequestedAny) {
        sleep(1000);
      }
    }
    assertTrue(allocatedContainerCount == 2);
    assertTrue(amClient.release.size() == 2);
    assertTrue(amClient.ask.size() == 0);
    AllocateResponse allocResponse=amClient.allocate(0.1f);
    assertTrue(amClient.release.size() == 0);
    assertTrue(amClient.ask.size() == 0);
    assertTrue(allocResponse.getAllocatedContainers().size() == 0);
    amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED,null,null);
  }
  finally {
    if (amClient != null && amClient.getServiceState() == STATE.STARTED) {
      amClient.stop();
    }
  }
}
