{
  AMRMClientImpl<StoredContainerRequest> amClient=null;
  try {
    amClient=new AMRMClientImpl<StoredContainerRequest>(attemptId);
    amClient.init(conf);
    amClient.start();
    amClient.registerApplicationMaster("Host",10000,"");
    Resource capability1=BuilderUtils.newResource(1024,2);
    Resource capability2=BuilderUtils.newResource(1024,1);
    Resource capability3=BuilderUtils.newResource(1000,2);
    Resource capability4=BuilderUtils.newResource(2000,1);
    Resource capability5=BuilderUtils.newResource(1000,3);
    Resource capability6=BuilderUtils.newResource(2000,1);
    StoredContainerRequest storedContainer1=new StoredContainerRequest(capability1,nodes,racks,priority);
    StoredContainerRequest storedContainer2=new StoredContainerRequest(capability2,nodes,racks,priority);
    StoredContainerRequest storedContainer3=new StoredContainerRequest(capability3,nodes,racks,priority);
    StoredContainerRequest storedContainer4=new StoredContainerRequest(capability4,nodes,racks,priority);
    StoredContainerRequest storedContainer5=new StoredContainerRequest(capability5,nodes,racks,priority);
    StoredContainerRequest storedContainer6=new StoredContainerRequest(capability6,nodes,racks,priority);
    amClient.addContainerRequest(storedContainer1);
    amClient.addContainerRequest(storedContainer2);
    amClient.addContainerRequest(storedContainer3);
    amClient.addContainerRequest(storedContainer4);
    amClient.addContainerRequest(storedContainer5);
    amClient.addContainerRequest(storedContainer6);
    List<? extends Collection<StoredContainerRequest>> matches;
    StoredContainerRequest storedRequest;
    Resource testCapability1=BuilderUtils.newResource(1024,2);
    matches=amClient.getMatchingRequests(priority,node,testCapability1);
    verifyMatches(matches,1);
    storedRequest=matches.get(0).iterator().next();
    assertTrue(storedContainer1 == storedRequest);
    amClient.removeContainerRequest(storedContainer1);
    Resource testCapability2=BuilderUtils.newResource(2000,1);
    matches=amClient.getMatchingRequests(priority,node,testCapability2);
    verifyMatches(matches,2);
    int i=0;
    for (    StoredContainerRequest storedRequest1 : matches.get(0)) {
      if (i++ == 0) {
        assertTrue(storedContainer4 == storedRequest1);
      }
 else {
        assertTrue(storedContainer6 == storedRequest1);
      }
    }
    amClient.removeContainerRequest(storedContainer6);
    Resource testCapability3=BuilderUtils.newResource(4000,4);
    matches=amClient.getMatchingRequests(priority,node,testCapability3);
    assert(matches.size() == 4);
    Resource testCapability4=BuilderUtils.newResource(1024,2);
    matches=amClient.getMatchingRequests(priority,node,testCapability4);
    assert(matches.size() == 2);
    for (    Collection<StoredContainerRequest> testSet : matches) {
      assertTrue(testSet.size() == 1);
      StoredContainerRequest testRequest=testSet.iterator().next();
      assertTrue(testRequest != storedContainer4);
      assertTrue(testRequest != storedContainer5);
      assert(testRequest == storedContainer2 || testRequest == storedContainer3);
    }
    Resource testCapability5=BuilderUtils.newResource(512,4);
    matches=amClient.getMatchingRequests(priority,node,testCapability5);
    assert(matches.size() == 0);
    amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED,null,null);
  }
  finally {
    if (amClient != null && amClient.getServiceState() == STATE.STARTED) {
      amClient.stop();
    }
  }
}
