{
  conf.set(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class.getCanonicalName());
  MockRM rm=new MockRM(conf);
  rm.start();
  MockNM nm1=rm.registerNode("h1:1234",5120);
  RMApp app=rm.submitApp(2000);
  RMAppAttempt attempt=app.getCurrentAppAttempt();
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  cs.getApplicationAttempt(attempt.getAppAttemptId()).getNewContainerId();
  nm1.nodeHeartbeat(true);
  MockAM am=MockRM.launchAM(app,rm,nm1);
  Assert.assertTrue(attempt.getMasterContainer().getId().getContainerId() != 1);
  Assert.assertFalse(rm.getRMContext().getNMTokenSecretManager().isApplicationAttemptNMTokenPresent(attempt.getAppAttemptId(),nm1.getNodeId()));
  am.registerAppAttempt();
  rm.waitForState(app.getApplicationId(),RMAppState.RUNNING);
  int NUM_CONTAINERS=1;
  List<Container> containers=new ArrayList<Container>();
  List<NMToken> expectedNMTokens=new ArrayList<NMToken>();
  while (true) {
    AllocateResponse response=am.allocate("127.0.0.1",2000,NUM_CONTAINERS,new ArrayList<ContainerId>());
    nm1.nodeHeartbeat(true);
    containers.addAll(response.getAllocatedContainers());
    expectedNMTokens.addAll(response.getNMTokens());
    if (containers.size() == NUM_CONTAINERS) {
      break;
    }
    Thread.sleep(200);
    System.out.println("Waiting for container to be allocated.");
  }
  NodeId nodeId=expectedNMTokens.get(0).getNodeId();
  Assert.assertEquals(nm1.getNodeId(),nodeId);
}
