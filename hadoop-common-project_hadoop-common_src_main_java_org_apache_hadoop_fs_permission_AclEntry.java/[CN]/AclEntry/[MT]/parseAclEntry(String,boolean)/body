{
  AclEntry.Builder builder=new AclEntry.Builder();
  String[] split=aclStr.split(":");
  if (split.length == 0) {
    throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr);
  }
  int index=0;
  if ("default".equals(split[0])) {
    index++;
    builder.setScope(AclEntryScope.DEFAULT);
  }
  if (split.length <= index) {
    throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr);
  }
  AclEntryType aclType=null;
  try {
    aclType=Enum.valueOf(AclEntryType.class,split[index].toUpperCase(Locale.ENGLISH));
    builder.setType(aclType);
    index++;
  }
 catch (  IllegalArgumentException iae) {
    throw new HadoopIllegalArgumentException("Invalid type of acl in <aclSpec> :" + aclStr);
  }
  if (split.length > index) {
    String name=split[index];
    if (!name.isEmpty()) {
      builder.setName(name);
    }
    index++;
  }
  if (includePermission) {
    if (split.length <= index) {
      throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr);
    }
    String permission=split[index];
    FsAction fsAction=FsAction.getFsAction(permission);
    if (null == fsAction) {
      throw new HadoopIllegalArgumentException("Invalid permission in <aclSpec> : " + aclStr);
    }
    builder.setPermission(fsAction);
    index++;
  }
  if (split.length > index) {
    throw new HadoopIllegalArgumentException("Invalid <aclSpec> : " + aclStr);
  }
  AclEntry aclEntry=builder.build();
  return aclEntry;
}
