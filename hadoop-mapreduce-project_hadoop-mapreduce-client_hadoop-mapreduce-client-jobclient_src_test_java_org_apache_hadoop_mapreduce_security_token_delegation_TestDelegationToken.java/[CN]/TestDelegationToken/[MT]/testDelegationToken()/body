{
  final JobClient client;
  client=user1.doAs(new PrivilegedExceptionAction<JobClient>(){
    @Override public JobClient run() throws Exception {
      return new JobClient(cluster.createJobConf());
    }
  }
);
  final JobClient bobClient;
  bobClient=user2.doAs(new PrivilegedExceptionAction<JobClient>(){
    @Override public JobClient run() throws Exception {
      return new JobClient(cluster.createJobConf());
    }
  }
);
  final Token<DelegationTokenIdentifier> token=client.getDelegationToken(new Text(user1.getUserName()));
  DataInputBuffer inBuf=new DataInputBuffer();
  byte[] bytes=token.getIdentifier();
  inBuf.reset(bytes,bytes.length);
  DelegationTokenIdentifier ident=new DelegationTokenIdentifier();
  ident.readFields(inBuf);
  assertEquals("alice",ident.getUser().getUserName());
  long createTime=ident.getIssueDate();
  long maxTime=ident.getMaxDate();
  long currentTime=System.currentTimeMillis();
  System.out.println("create time: " + createTime);
  System.out.println("current time: " + currentTime);
  System.out.println("max time: " + maxTime);
  assertTrue("createTime < current",createTime < currentTime);
  assertTrue("current < maxTime",currentTime < maxTime);
  user1.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      client.renewDelegationToken(token);
      client.renewDelegationToken(token);
      return null;
    }
  }
);
  user2.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      try {
        bobClient.renewDelegationToken(token);
        Assert.fail("bob renew");
      }
 catch (      AccessControlException ace) {
      }
      return null;
    }
  }
);
  user2.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      try {
        bobClient.cancelDelegationToken(token);
        Assert.fail("bob cancel");
      }
 catch (      AccessControlException ace) {
      }
      return null;
    }
  }
);
  user1.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      client.cancelDelegationToken(token);
      try {
        client.cancelDelegationToken(token);
        Assert.fail("second alice cancel");
      }
 catch (      InvalidToken it) {
      }
      return null;
    }
  }
);
}
