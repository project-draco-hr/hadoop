{
  this.systemClock=new SystemClock();
  this.applicationId=applicationId;
  this.name=name;
  this.rmContext=rmContext;
  this.dispatcher=rmContext.getDispatcher();
  this.handler=dispatcher.getEventHandler();
  this.conf=config;
  this.user=user;
  this.queue=queue;
  this.submissionContext=submissionContext;
  this.scheduler=scheduler;
  this.masterService=masterService;
  this.submitTime=submitTime;
  this.startTime=this.systemClock.getTime();
  this.applicationType=applicationType;
  this.applicationTags=applicationTags;
  this.amReq=amReq;
  int globalMaxAppAttempts=conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
  int individualMaxAppAttempts=submissionContext.getMaxAppAttempts();
  if (individualMaxAppAttempts <= 0 || individualMaxAppAttempts > globalMaxAppAttempts) {
    this.maxAppAttempts=globalMaxAppAttempts;
    LOG.warn("The specific max attempts: " + individualMaxAppAttempts + " for application: "+ applicationId.getId()+ " is invalid, because it is out of the range [1, "+ globalMaxAppAttempts+ "]. Use the global max attempts instead.");
  }
 else {
    this.maxAppAttempts=individualMaxAppAttempts;
  }
  this.attemptFailuresValidityInterval=submissionContext.getAttemptFailuresValidityInterval();
  if (this.attemptFailuresValidityInterval > 0) {
    LOG.info("The attemptFailuresValidityInterval for the application: " + this.applicationId + " is "+ this.attemptFailuresValidityInterval+ ".");
  }
  ReentrantReadWriteLock lock=new ReentrantReadWriteLock();
  this.readLock=lock.readLock();
  this.writeLock=lock.writeLock();
  this.stateMachine=stateMachineFactory.make(this);
  this.callerContext=CallerContext.getCurrent();
  rmContext.getRMApplicationHistoryWriter().applicationStarted(this);
  rmContext.getSystemMetricsPublisher().appCreated(this,startTime);
  long localLogAggregationStatusTimeout=conf.getLong(YarnConfiguration.LOG_AGGREGATION_STATUS_TIME_OUT_MS,YarnConfiguration.DEFAULT_LOG_AGGREGATION_STATUS_TIME_OUT_MS);
  if (localLogAggregationStatusTimeout <= 0) {
    this.logAggregationStatusTimeout=YarnConfiguration.DEFAULT_LOG_AGGREGATION_STATUS_TIME_OUT_MS;
  }
 else {
    this.logAggregationStatusTimeout=localLogAggregationStatusTimeout;
  }
  this.logAggregationEnabled=conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);
  if (this.logAggregationEnabled) {
    this.logAggregationStatusForAppReport=LogAggregationStatus.NOT_START;
  }
 else {
    this.logAggregationStatusForAppReport=LogAggregationStatus.DISABLED;
  }
  maxLogAggregationDiagnosticsInMemory=conf.getInt(YarnConfiguration.RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY,YarnConfiguration.DEFAULT_RM_MAX_LOG_AGGREGATION_DIAGNOSTICS_IN_MEMORY);
  amBlacklistingEnabled=conf.getBoolean(YarnConfiguration.AM_BLACKLISTING_ENABLED,YarnConfiguration.DEFAULT_AM_BLACKLISTING_ENABLED);
  if (amBlacklistingEnabled) {
    blacklistDisableThreshold=conf.getFloat(YarnConfiguration.AM_BLACKLISTING_DISABLE_THRESHOLD,YarnConfiguration.DEFAULT_AM_BLACKLISTING_DISABLE_THRESHOLD);
  }
 else {
    blacklistDisableThreshold=0.0f;
  }
}
