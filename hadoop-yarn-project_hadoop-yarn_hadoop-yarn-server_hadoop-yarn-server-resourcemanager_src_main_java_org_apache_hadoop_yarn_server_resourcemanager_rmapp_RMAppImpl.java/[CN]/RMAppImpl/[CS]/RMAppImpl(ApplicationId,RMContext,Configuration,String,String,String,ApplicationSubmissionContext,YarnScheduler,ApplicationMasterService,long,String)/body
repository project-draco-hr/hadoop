{
  this.applicationId=applicationId;
  this.name=name;
  this.rmContext=rmContext;
  this.dispatcher=rmContext.getDispatcher();
  this.handler=dispatcher.getEventHandler();
  this.conf=config;
  this.user=user;
  this.queue=queue;
  this.submissionContext=submissionContext;
  this.scheduler=scheduler;
  this.masterService=masterService;
  this.submitTime=submitTime;
  this.startTime=System.currentTimeMillis();
  this.applicationType=applicationType;
  int globalMaxAppAttempts=conf.getInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,YarnConfiguration.DEFAULT_RM_AM_MAX_ATTEMPTS);
  int individualMaxAppAttempts=submissionContext.getMaxAppAttempts();
  if (individualMaxAppAttempts <= 0 || individualMaxAppAttempts > globalMaxAppAttempts) {
    this.maxAppAttempts=globalMaxAppAttempts;
    LOG.warn("The specific max attempts: " + individualMaxAppAttempts + " for application: "+ applicationId.getId()+ " is invalid, because it is out of the range [1, "+ globalMaxAppAttempts+ "]. Use the global max attempts instead.");
  }
 else {
    this.maxAppAttempts=individualMaxAppAttempts;
  }
  ReentrantReadWriteLock lock=new ReentrantReadWriteLock();
  this.readLock=lock.readLock();
  this.writeLock=lock.writeLock();
  this.stateMachine=stateMachineFactory.make(this);
}
