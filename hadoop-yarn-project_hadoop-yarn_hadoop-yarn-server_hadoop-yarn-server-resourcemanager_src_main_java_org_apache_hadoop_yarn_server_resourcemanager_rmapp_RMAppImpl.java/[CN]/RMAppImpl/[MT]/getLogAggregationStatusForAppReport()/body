{
  if (!logAggregationEnabled) {
    return LogAggregationStatus.DISABLED;
  }
  if (this.logAggregationStatusForAppReport == LogAggregationStatus.FAILED || this.logAggregationStatusForAppReport == LogAggregationStatus.SUCCEEDED) {
    return this.logAggregationStatusForAppReport;
  }
  try {
    this.readLock.lock();
    Map<NodeId,LogAggregationReport> reports=getLogAggregationReportsForApp();
    if (reports.size() == 0) {
      return null;
    }
    int logNotStartCount=0;
    int logCompletedCount=0;
    int logTimeOutCount=0;
    int logFailedCount=0;
    for (    Entry<NodeId,LogAggregationReport> report : reports.entrySet()) {
switch (report.getValue().getLogAggregationStatus()) {
case NOT_START:
        logNotStartCount++;
      break;
case SUCCEEDED:
    logCompletedCount++;
  break;
case FAILED:
logFailedCount++;
logCompletedCount++;
break;
case TIME_OUT:
logTimeOutCount++;
logCompletedCount++;
break;
default :
break;
}
}
if (logNotStartCount == reports.size()) {
return LogAggregationStatus.NOT_START;
}
 else if (logCompletedCount == reports.size()) {
if (logFailedCount > 0 && isAppInFinalState(this)) {
this.logAggregationStatusForAppReport=LogAggregationStatus.FAILED;
return LogAggregationStatus.FAILED;
}
 else if (logTimeOutCount > 0) {
return LogAggregationStatus.TIME_OUT;
}
if (isAppInFinalState(this)) {
this.logAggregationStatusForAppReport=LogAggregationStatus.SUCCEEDED;
return LogAggregationStatus.SUCCEEDED;
}
}
return LogAggregationStatus.RUNNING;
}
  finally {
this.readLock.unlock();
}
}
