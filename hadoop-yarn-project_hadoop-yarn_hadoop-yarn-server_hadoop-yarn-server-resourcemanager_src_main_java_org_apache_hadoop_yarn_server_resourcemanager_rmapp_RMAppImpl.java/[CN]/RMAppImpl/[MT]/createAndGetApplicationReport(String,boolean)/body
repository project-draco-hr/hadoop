{
  this.readLock.lock();
  try {
    ApplicationAttemptId currentApplicationAttemptId=null;
    org.apache.hadoop.yarn.api.records.Token clientToAMToken=null;
    String trackingUrl=UNAVAILABLE;
    String host=UNAVAILABLE;
    String origTrackingUrl=UNAVAILABLE;
    LogAggregationStatus logAggregationStatus=null;
    int rpcPort=-1;
    ApplicationResourceUsageReport appUsageReport=RMServerUtils.DUMMY_APPLICATION_RESOURCE_USAGE_REPORT;
    FinalApplicationStatus finishState=getFinalApplicationStatus();
    String diags=UNAVAILABLE;
    float progress=0.0f;
    org.apache.hadoop.yarn.api.records.Token amrmToken=null;
    if (allowAccess) {
      trackingUrl=getDefaultProxyTrackingUrl();
      if (this.currentAttempt != null) {
        currentApplicationAttemptId=this.currentAttempt.getAppAttemptId();
        trackingUrl=this.currentAttempt.getTrackingUrl();
        origTrackingUrl=this.currentAttempt.getOriginalTrackingUrl();
        if (UserGroupInformation.isSecurityEnabled()) {
          Token<ClientToAMTokenIdentifier> attemptClientToAMToken=this.currentAttempt.createClientToken(clientUserName);
          if (attemptClientToAMToken != null) {
            clientToAMToken=BuilderUtils.newClientToAMToken(attemptClientToAMToken.getIdentifier(),attemptClientToAMToken.getKind().toString(),attemptClientToAMToken.getPassword(),attemptClientToAMToken.getService().toString());
          }
        }
        host=this.currentAttempt.getHost();
        rpcPort=this.currentAttempt.getRpcPort();
        appUsageReport=currentAttempt.getApplicationResourceUsageReport();
        progress=currentAttempt.getProgress();
        logAggregationStatus=this.getLogAggregationStatusForAppReport();
      }
      diags=this.diagnostics.toString();
      if (currentAttempt != null && currentAttempt.getAppAttemptState() == RMAppAttemptState.LAUNCHED) {
        if (getApplicationSubmissionContext().getUnmanagedAM() && clientUserName != null && getUser().equals(clientUserName)) {
          Token<AMRMTokenIdentifier> token=currentAttempt.getAMRMToken();
          if (token != null) {
            amrmToken=BuilderUtils.newAMRMToken(token.getIdentifier(),token.getKind().toString(),token.getPassword(),token.getService().toString());
          }
        }
      }
      RMAppMetrics rmAppMetrics=getRMAppMetrics();
      appUsageReport.setMemorySeconds(rmAppMetrics.getMemorySeconds());
      appUsageReport.setVcoreSeconds(rmAppMetrics.getVcoreSeconds());
    }
    if (currentApplicationAttemptId == null) {
      currentApplicationAttemptId=BuilderUtils.newApplicationAttemptId(this.applicationId,DUMMY_APPLICATION_ATTEMPT_NUMBER);
    }
    ApplicationReport report=BuilderUtils.newApplicationReport(this.applicationId,currentApplicationAttemptId,this.user,this.queue,this.name,host,rpcPort,clientToAMToken,createApplicationState(),diags,trackingUrl,this.startTime,this.finishTime,finishState,appUsageReport,origTrackingUrl,progress,this.applicationType,amrmToken,applicationTags,this.submissionContext.getPriority());
    report.setLogAggregationStatus(logAggregationStatus);
    report.setUnmanagedApp(submissionContext.getUnmanagedAM());
    report.setAppNodeLabelExpression(getAppNodeLabelExpression());
    report.setAmNodeLabelExpression(getAmNodeLabelExpression());
    return report;
  }
  finally {
    this.readLock.unlock();
  }
}
