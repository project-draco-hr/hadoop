{
  this.readLock.lock();
  try {
    ApplicationAttemptId currentApplicationAttemptId=null;
    ClientToken clientToken=null;
    String trackingUrl=UNAVAILABLE;
    String host=UNAVAILABLE;
    String origTrackingUrl=UNAVAILABLE;
    int rpcPort=-1;
    ApplicationResourceUsageReport appUsageReport=DUMMY_APPLICATION_RESOURCE_USAGE_REPORT;
    FinalApplicationStatus finishState=getFinalApplicationStatus();
    String diags=UNAVAILABLE;
    float progress=0.0f;
    if (allowAccess) {
      if (this.currentAttempt != null) {
        currentApplicationAttemptId=this.currentAttempt.getAppAttemptId();
        trackingUrl=this.currentAttempt.getTrackingUrl();
        origTrackingUrl=this.currentAttempt.getOriginalTrackingUrl();
        clientToken=this.currentAttempt.getClientToken();
        host=this.currentAttempt.getHost();
        rpcPort=this.currentAttempt.getRpcPort();
        appUsageReport=currentAttempt.getApplicationResourceUsageReport();
        progress=currentAttempt.getProgress();
      }
      diags=this.diagnostics.toString();
    }
    if (currentApplicationAttemptId == null) {
      currentApplicationAttemptId=BuilderUtils.newApplicationAttemptId(this.applicationId,DUMMY_APPLICATION_ATTEMPT_NUMBER);
    }
    return BuilderUtils.newApplicationReport(this.applicationId,currentApplicationAttemptId,this.user,this.queue,this.name,host,rpcPort,clientToken,createApplicationState(this.stateMachine.getCurrentState()),diags,trackingUrl,this.startTime,this.finishTime,finishState,appUsageReport,origTrackingUrl,progress);
  }
  finally {
    this.readLock.unlock();
  }
}
