{
  this.conf=conf;
  this.nsInfo=nsInfo;
  String zkConnect=uri.getAuthority().replace(";",",");
  basePath=uri.getPath();
  ensembleSize=conf.getInt(BKJM_BOOKKEEPER_ENSEMBLE_SIZE,BKJM_BOOKKEEPER_ENSEMBLE_SIZE_DEFAULT);
  quorumSize=conf.getInt(BKJM_BOOKKEEPER_QUORUM_SIZE,BKJM_BOOKKEEPER_QUORUM_SIZE_DEFAULT);
  speculativeReadTimeout=conf.getInt(BKJM_BOOKKEEPER_SPECULATIVE_READ_TIMEOUT_MS,BKJM_BOOKKEEPER_SPECULATIVE_READ_TIMEOUT_DEFAULT);
  readEntryTimeout=conf.getInt(BKJM_BOOKKEEPER_READ_ENTRY_TIMEOUT_SEC,BKJM_BOOKKEEPER_READ_ENTRY_TIMEOUT_DEFAULT);
  ledgerPath=basePath + "/ledgers";
  String maxTxIdPath=basePath + "/maxtxid";
  String currentInprogressNodePath=basePath + "/CurrentInprogress";
  versionPath=basePath + "/version";
  digestpw=conf.get(BKJM_BOOKKEEPER_DIGEST_PW,BKJM_BOOKKEEPER_DIGEST_PW_DEFAULT);
  try {
    zkConnectLatch=new CountDownLatch(1);
    int bkjmZKSessionTimeout=conf.getInt(BKJM_ZK_SESSION_TIMEOUT,BKJM_ZK_SESSION_TIMEOUT_DEFAULT);
    zkc=new ZooKeeper(zkConnect,bkjmZKSessionTimeout,new ZkConnectionWatcher());
    int zkConnectionLatchTimeout=bkjmZKSessionTimeout + BKJM_ZK_SESSION_TIMEOUT_DEFAULT;
    if (!zkConnectLatch.await(zkConnectionLatchTimeout,TimeUnit.MILLISECONDS)) {
      throw new IOException("Error connecting to zookeeper");
    }
    prepareBookKeeperEnv();
    ClientConfiguration clientConf=new ClientConfiguration();
    clientConf.setSpeculativeReadTimeout(speculativeReadTimeout);
    clientConf.setReadEntryTimeout(readEntryTimeout);
    bkc=new BookKeeper(clientConf,zkc);
  }
 catch (  KeeperException e) {
    throw new IOException("Error initializing zk",e);
  }
catch (  InterruptedException ie) {
    Thread.currentThread().interrupt();
    throw new IOException("Interrupted while initializing bk journal manager",ie);
  }
  ci=new CurrentInprogress(zkc,currentInprogressNodePath);
  maxTxId=new MaxTxId(zkc,maxTxIdPath);
}
