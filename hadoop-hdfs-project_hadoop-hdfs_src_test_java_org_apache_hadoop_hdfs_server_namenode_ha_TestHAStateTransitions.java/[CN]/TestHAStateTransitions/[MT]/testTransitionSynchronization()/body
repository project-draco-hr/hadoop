{
  Configuration conf=new Configuration();
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(0).build();
  try {
    cluster.waitActive();
    ReentrantReadWriteLock spyLock=NameNodeAdapter.spyOnFsLock(cluster.getNameNode(0).getNamesystem());
    Mockito.doAnswer(new GenericTestUtils.SleepAnswer(50)).when(spyLock).writeLock();
    final FileSystem fs=HATestUtil.configureFailoverFs(cluster,conf);
    TestContext ctx=new TestContext();
    for (int i=0; i < 50; i++) {
      final int finalI=i;
      ctx.addThread(new RepeatingTestThread(ctx){
        @Override public void doAnAction() throws Exception {
          Path p=new Path("/test-" + finalI);
          fs.mkdirs(p);
          fs.delete(p,true);
        }
      }
);
    }
    ctx.addThread(new RepeatingTestThread(ctx){
      @Override public void doAnAction() throws Exception {
        cluster.transitionToStandby(0);
        Thread.sleep(50);
        cluster.transitionToActive(0);
      }
    }
);
    ctx.startThreads();
    ctx.waitFor(20000);
    ctx.stop();
  }
  finally {
    cluster.shutdown();
  }
}
