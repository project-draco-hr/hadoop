{
  FSDirectory fsd=fsn.getFSDirectory();
  if (NameNode.stateChangeLog.isDebugEnabled()) {
    NameNode.stateChangeLog.debug("DIR* NameSystem.mkdirs: " + src);
  }
  if (!DFSUtil.isValidName(src)) {
    throw new InvalidPathException(src);
  }
  FSPermissionChecker pc=fsd.getPermissionChecker();
  byte[][] pathComponents=FSDirectory.getPathComponentsForReservedPath(src);
  fsd.writeLock();
  try {
    src=fsd.resolvePath(pc,src,pathComponents);
    INodesInPath iip=fsd.getINodesInPath4Write(src);
    if (fsd.isPermissionEnabled()) {
      fsd.checkTraverse(pc,iip);
    }
    final INode lastINode=iip.getLastINode();
    if (lastINode != null && lastINode.isFile()) {
      throw new FileAlreadyExistsException("Path is not a directory: " + src);
    }
    INodesInPath existing=lastINode != null ? iip : iip.getExistingINodes();
    if (lastINode == null) {
      if (fsd.isPermissionEnabled()) {
        fsd.checkAncestorAccess(pc,iip,FsAction.WRITE);
      }
      if (!createParent) {
        fsd.verifyParentDir(iip,src);
      }
      fsn.checkFsObjectLimit();
      List<String> nonExisting=iip.getPath(existing.length(),iip.length() - existing.length());
      int length=nonExisting.size();
      if (length > 1) {
        List<String> ancestors=nonExisting.subList(0,length - 1);
        existing=createChildrenDirectories(fsd,existing,ancestors,addImplicitUwx(permissions,permissions));
        if (existing == null) {
          throw new IOException("Failed to create directory: " + src);
        }
      }
      if ((existing=createChildrenDirectories(fsd,existing,nonExisting.subList(length - 1,length),permissions)) == null) {
        throw new IOException("Failed to create directory: " + src);
      }
    }
    return fsd.getAuditFileInfo(existing);
  }
  finally {
    fsd.writeUnlock();
  }
}
