{
  InputSplit[][] splits=new InputSplit[kids.size()][];
  for (int i=0; i < kids.size(); ++i) {
    final InputSplit[] tmp=kids.get(i).getSplits(job,numSplits);
    if (null == tmp) {
      throw new IOException("Error gathering splits from child RReader");
    }
    if (i > 0 && splits[i - 1].length != tmp.length) {
      throw new IOException("Inconsistent split cardinality from child " + i + " ("+ splits[i - 1].length+ "/"+ tmp.length+ ")");
    }
    splits[i]=tmp;
  }
  final int size=splits[0].length;
  CompositeInputSplit[] ret=new CompositeInputSplit[size];
  for (int i=0; i < size; ++i) {
    ret[i]=new CompositeInputSplit(splits.length);
    for (int j=0; j < splits.length; ++j) {
      ret[i].add(splits[j][i]);
    }
  }
  return ret;
}
