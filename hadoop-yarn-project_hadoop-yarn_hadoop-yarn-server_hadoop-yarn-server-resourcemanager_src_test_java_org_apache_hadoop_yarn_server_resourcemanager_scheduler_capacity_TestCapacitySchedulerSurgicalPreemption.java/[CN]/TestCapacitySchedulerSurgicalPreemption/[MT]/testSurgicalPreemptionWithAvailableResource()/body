{
  MockRM rm1=new MockRM(conf);
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",20 * GB);
  MockNM nm2=rm1.registerNode("h2:1234",20 * GB);
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  RMNode rmNode2=rm1.getRMContext().getRMNodes().get(nm2.getNodeId());
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"a");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  am1.allocate("*",1 * GB,38,new ArrayList<ContainerId>());
  for (int i=0; i < 38; i++) {
    cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
    cs.handle(new NodeUpdateSchedulerEvent(rmNode2));
  }
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  Assert.assertEquals(39,schedulerApp1.getLiveContainers().size());
  waitNumberOfLiveContainersOnNodeFromApp(cs.getNode(rmNode1.getNodeID()),am1.getApplicationAttemptId(),20);
  waitNumberOfLiveContainersOnNodeFromApp(cs.getNode(rmNode2.getNodeID()),am1.getApplicationAttemptId(),19);
  RMApp app2=rm1.submitApp(4 * GB,"app","user",null,"c");
  FiCaSchedulerApp schedulerApp2=cs.getApplicationAttempt(ApplicationAttemptId.newInstance(app2.getApplicationId(),1));
  ProportionalCapacityPreemptionPolicy editPolicy=(ProportionalCapacityPreemptionPolicy)getSchedulingEditPolicy(rm1);
  editPolicy.editSchedule();
  Assert.assertEquals(3,editPolicy.getToPreemptContainers().size());
  editPolicy.editSchedule();
  waitNumberOfLiveContainersFromApp(schedulerApp1,36);
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  cs.handle(new NodeUpdateSchedulerEvent(rmNode2));
  waitNumberOfReservedContainersFromApp(schedulerApp2,1);
  editPolicy.editSchedule();
  editPolicy.editSchedule();
  int tick=0;
  while (schedulerApp2.getLiveContainers().size() != 1 && tick < 10) {
    cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
    cs.handle(new NodeUpdateSchedulerEvent(rmNode2));
    tick++;
    Thread.sleep(100);
  }
  waitNumberOfReservedContainersFromApp(schedulerApp2,0);
  rm1.close();
}
