{
  context=new RunningAppContext(conf);
  appName=conf.get(MRJobConfig.JOB_NAME,"<missing app name>");
  if (conf.getBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE,false) && startCount > 1) {
    LOG.info("Recovery is enabled. Will try to recover from previous life.");
    Recovery recoveryServ=new RecoveryService(appID,clock,startCount);
    addIfService(recoveryServ);
    dispatcher=recoveryServ.getDispatcher();
    clock=recoveryServ.getClock();
    completedTasksFromPreviousRun=recoveryServ.getCompletedTasks();
  }
 else {
    dispatcher=new AsyncDispatcher();
    addIfService(dispatcher);
  }
  taskAttemptListener=createTaskAttemptListener(context);
  addIfService(taskAttemptListener);
  taskCleaner=createTaskCleaner(context);
  addIfService(taskCleaner);
  clientService=createClientService(context);
  addIfService(clientService);
  EventHandler<JobHistoryEvent> historyService=createJobHistoryHandler(context);
  dispatcher.register(org.apache.hadoop.mapreduce.jobhistory.EventType.class,historyService);
  this.jobEventDispatcher=new JobEventDispatcher();
  dispatcher.register(JobEventType.class,jobEventDispatcher);
  dispatcher.register(TaskEventType.class,new TaskEventDispatcher());
  dispatcher.register(TaskAttemptEventType.class,new TaskAttemptEventDispatcher());
  dispatcher.register(TaskCleaner.EventType.class,taskCleaner);
  if (conf.getBoolean(MRJobConfig.MAP_SPECULATIVE,false) || conf.getBoolean(MRJobConfig.REDUCE_SPECULATIVE,false)) {
    speculator=createSpeculator(conf,context);
    addIfService(speculator);
  }
  dispatcher.register(Speculator.EventType.class,new SpeculatorEventDispatcher(conf));
  containerAllocator=createContainerAllocator(clientService,context);
  addIfService(containerAllocator);
  dispatcher.register(ContainerAllocator.EventType.class,containerAllocator);
  containerLauncher=createContainerLauncher(context);
  addIfService(containerLauncher);
  dispatcher.register(ContainerLauncher.EventType.class,containerLauncher);
  addIfService(historyService);
  super.init(conf);
}
