{
  amInfos=new LinkedList<AMInfo>();
  completedTasksFromPreviousRun=new HashMap<TaskId,TaskInfo>();
  processRecovery();
  AMInfo amInfo=MRBuilderUtils.newAMInfo(appAttemptID,startTime,containerID,nmHost,nmPort,nmHttpPort);
  job=createJob(getConfig(),forcedState,shutDownMessage);
  for (  AMInfo info : amInfos) {
    dispatcher.getEventHandler().handle(new JobHistoryEvent(job.getID(),new AMStartedEvent(info.getAppAttemptId(),info.getStartTime(),info.getContainerId(),info.getNodeManagerHost(),info.getNodeManagerPort(),info.getNodeManagerHttpPort())));
  }
  dispatcher.getEventHandler().handle(new JobHistoryEvent(job.getID(),new AMStartedEvent(amInfo.getAppAttemptId(),amInfo.getStartTime(),amInfo.getContainerId(),amInfo.getNodeManagerHost(),amInfo.getNodeManagerPort(),amInfo.getNodeManagerHttpPort(),this.forcedState == null ? null : this.forcedState.toString())));
  amInfos.add(amInfo);
  DefaultMetricsSystem.initialize("MRAppMaster");
  boolean initFailed=false;
  if (!errorHappenedShutDown) {
    JobEvent initJobEvent=new JobEvent(job.getID(),JobEventType.JOB_INIT);
    jobEventDispatcher.handle(initJobEvent);
    initFailed=(((JobImpl)job).getInternalState() != JobStateInternal.INITED);
    if (job.isUber()) {
      speculatorEventDispatcher.disableSpeculation();
      LOG.info("MRAppMaster uberizing job " + job.getID() + " in local container (\"uber-AM\") on node "+ nmHost+ ":"+ nmPort+ ".");
    }
 else {
      dispatcher.getEventHandler().handle(new SpeculatorEvent(job.getID(),clock.getTime()));
      LOG.info("MRAppMaster launching normal, non-uberized, multi-container " + "job " + job.getID() + ".");
    }
    clientService.start();
  }
  super.serviceStart();
  MRApps.setClassLoader(jobClassLoader,getConfig());
  Limits.init(getConfig());
  if (initFailed) {
    JobEvent initFailedEvent=new JobEvent(job.getID(),JobEventType.JOB_INIT_FAILED);
    jobEventDispatcher.handle(initFailedEvent);
  }
 else {
    startJobs();
  }
}
