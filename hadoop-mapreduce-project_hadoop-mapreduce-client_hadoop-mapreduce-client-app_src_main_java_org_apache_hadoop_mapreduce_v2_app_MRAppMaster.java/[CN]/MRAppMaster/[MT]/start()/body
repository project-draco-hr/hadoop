{
  amInfos=new LinkedList<AMInfo>();
  if (inRecovery) {
    completedTasksFromPreviousRun=recoveryServ.getCompletedTasks();
    amInfos=recoveryServ.getAMInfos();
  }
 else {
    if (appAttemptID.getAttemptId() != 1) {
      amInfos.addAll(readJustAMInfos());
    }
  }
  AMInfo amInfo=MRBuilderUtils.newAMInfo(appAttemptID,startTime,containerID,nmHost,nmPort,nmHttpPort);
  amInfos.add(amInfo);
  job=createJob(getConfig());
  for (  AMInfo info : amInfos) {
    dispatcher.getEventHandler().handle(new JobHistoryEvent(job.getID(),new AMStartedEvent(info.getAppAttemptId(),info.getStartTime(),info.getContainerId(),info.getNodeManagerHost(),info.getNodeManagerPort(),info.getNodeManagerHttpPort())));
  }
  DefaultMetricsSystem.initialize("MRAppMaster");
  JobEvent initJobEvent=new JobEvent(job.getID(),JobEventType.JOB_INIT);
  jobEventDispatcher.handle(initJobEvent);
  if (job.isUber()) {
    speculatorEventDispatcher.disableSpeculation();
    LOG.info("MRAppMaster uberizing job " + job.getID() + " in local container (\"uber-AM\") on node "+ nmHost+ ":"+ nmPort+ ".");
  }
 else {
    dispatcher.getEventHandler().handle(new SpeculatorEvent(job.getID(),clock.getTime()));
    LOG.info("MRAppMaster launching normal, non-uberized, multi-container " + "job " + job.getID() + ".");
  }
  super.start();
  startJobs();
}
