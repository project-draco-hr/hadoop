{
  SystemClock clock=SystemClock.getInstance();
  Configuration conf=new Configuration();
  conf.setInt(MRJobConfig.TASK_EXIT_TIMEOUT,100);
  conf.setInt(MRJobConfig.TASK_EXIT_TIMEOUT_CHECK_INTERVAL_MS,10);
  AppContext appCtx=mock(AppContext.class);
  JobTokenSecretManager secret=mock(JobTokenSecretManager.class);
  RMHeartbeatHandler rmHeartbeatHandler=mock(RMHeartbeatHandler.class);
  MockEventHandler eventHandler=new MockEventHandler();
  TaskAttemptFinishingMonitor taskAttemptFinishingMonitor=new TaskAttemptFinishingMonitor(eventHandler);
  taskAttemptFinishingMonitor.init(conf);
  taskAttemptFinishingMonitor.start();
  when(appCtx.getEventHandler()).thenReturn(eventHandler);
  when(appCtx.getNMHostname()).thenReturn("0.0.0.0");
  when(appCtx.getTaskAttemptFinishingMonitor()).thenReturn(taskAttemptFinishingMonitor);
  when(appCtx.getClock()).thenReturn(clock);
  CheckpointAMPreemptionPolicy policy=new CheckpointAMPreemptionPolicy();
  policy.init(appCtx);
  TaskAttemptListenerImpl listener=new TaskAttemptListenerImpl(appCtx,secret,rmHeartbeatHandler,policy);
  listener.init(conf);
  listener.start();
  JobId jid=MRBuilderUtils.newJobId(12345,1,1);
  TaskId tid=MRBuilderUtils.newTaskId(jid,0,org.apache.hadoop.mapreduce.v2.api.records.TaskType.MAP);
  TaskAttemptId attemptId=MRBuilderUtils.newTaskAttemptId(tid,0);
  appCtx.getTaskAttemptFinishingMonitor().register(attemptId);
  int check=0;
  while (!eventHandler.timedOut && check++ < 10) {
    Thread.sleep(100);
  }
  taskAttemptFinishingMonitor.stop();
  assertTrue("Finishing attempt didn't time out.",eventHandler.timedOut);
}
