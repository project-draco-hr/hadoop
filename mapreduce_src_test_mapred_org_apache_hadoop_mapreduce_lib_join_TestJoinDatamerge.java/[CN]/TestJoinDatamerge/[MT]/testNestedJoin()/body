{
  final int SOURCES=3;
  final int ITEMS=(SOURCES + 1) * (SOURCES + 1);
  Configuration conf=new Configuration();
  Path base=cluster.getFileSystem().makeQualified(new Path("/nested"));
  int[][] source=new int[SOURCES][];
  for (int i=0; i < SOURCES; ++i) {
    source[i]=new int[ITEMS];
    for (int j=0; j < ITEMS; ++j) {
      source[i][j]=(i + 2) * (j + 1);
    }
  }
  Path[] src=new Path[SOURCES];
  SequenceFile.Writer out[]=createWriters(base,conf,SOURCES,src);
  IntWritable k=new IntWritable();
  for (int i=0; i < SOURCES; ++i) {
    IntWritable v=new IntWritable();
    v.set(i);
    for (int j=0; j < ITEMS; ++j) {
      k.set(source[i][j]);
      out[i].append(k,v);
    }
    out[i].close();
  }
  out=null;
  StringBuilder sb=new StringBuilder();
  sb.append("outer(inner(");
  for (int i=0; i < SOURCES; ++i) {
    sb.append(CompositeInputFormat.compose(SequenceFileInputFormat.class,src[i].toString()));
    if (i + 1 != SOURCES)     sb.append(",");
  }
  sb.append("),outer(");
  sb.append(CompositeInputFormat.compose(MapReduceTestUtil.Fake_IF.class,"foobar"));
  sb.append(",");
  for (int i=0; i < SOURCES; ++i) {
    sb.append(CompositeInputFormat.compose(SequenceFileInputFormat.class,src[i].toString()));
    sb.append(",");
  }
  sb.append(CompositeInputFormat.compose(MapReduceTestUtil.Fake_IF.class,"raboof") + "))");
  conf.set(CompositeInputFormat.JOIN_EXPR,sb.toString());
  MapReduceTestUtil.Fake_IF.setKeyClass(conf,IntWritable.class);
  MapReduceTestUtil.Fake_IF.setValClass(conf,IntWritable.class);
  Job job=Job.getInstance(conf);
  Path outf=new Path(base,"out");
  FileOutputFormat.setOutputPath(job,outf);
  job.setInputFormatClass(CompositeInputFormat.class);
  job.setMapperClass(Mapper.class);
  job.setReducerClass(Reducer.class);
  job.setNumReduceTasks(0);
  job.setOutputKeyClass(IntWritable.class);
  job.setOutputValueClass(TupleWritable.class);
  job.setOutputFormatClass(SequenceFileOutputFormat.class);
  job.waitForCompletion(true);
  assertTrue("Job failed",job.isSuccessful());
  FileStatus[] outlist=cluster.getFileSystem().listStatus(outf,new Utils.OutputFileUtils.OutputFilesFilter());
  assertEquals(1,outlist.length);
  assertTrue(0 < outlist[0].getLen());
  SequenceFile.Reader r=new SequenceFile.Reader(cluster.getFileSystem(),outlist[0].getPath(),conf);
  TupleWritable v=new TupleWritable();
  while (r.next(k,v)) {
    assertFalse(((TupleWritable)v.get(1)).has(0));
    assertFalse(((TupleWritable)v.get(1)).has(SOURCES + 1));
    boolean chk=true;
    int ki=k.get();
    for (int i=2; i < SOURCES + 2; ++i) {
      if ((ki % i) == 0 && ki <= i * ITEMS) {
        assertEquals(i - 2,((IntWritable)((TupleWritable)v.get(1)).get((i - 1))).get());
      }
 else       chk=false;
    }
    if (chk) {
      assertTrue(v.has(0));
      for (int i=0; i < SOURCES; ++i)       assertTrue(((TupleWritable)v.get(0)).has(i));
    }
 else {
      assertFalse(v.has(0));
    }
  }
  r.close();
  base.getFileSystem(conf).delete(base,true);
}
