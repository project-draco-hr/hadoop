{
  long now=System.currentTimeMillis();
  long toDeleteTime=now - (2000 * 1000);
  long toKeepTime=now - (1500 * 1000);
  String root="mockfs://foo/";
  String remoteRootLogDir=root + "tmp/logs";
  String suffix="logs";
  final Configuration conf=new Configuration();
  conf.setClass("fs.mockfs.impl",MockFileSystem.class,FileSystem.class);
  conf.set(YarnConfiguration.LOG_AGGREGATION_ENABLED,"true");
  conf.set(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,"1800");
  conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,remoteRootLogDir);
  conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX,suffix);
  Path rootPath=new Path(root);
  FileSystem rootFs=rootPath.getFileSystem(conf);
  FileSystem mockFs=((FilterFileSystem)rootFs).getRawFileSystem();
  Path remoteRootLogPath=new Path(remoteRootLogDir);
  Path userDir=new Path(remoteRootLogPath,"me");
  FileStatus userDirStatus=new FileStatus(0,true,0,0,toKeepTime,userDir);
  when(mockFs.listStatus(remoteRootLogPath)).thenReturn(new FileStatus[]{userDirStatus});
  ApplicationId appId1=ApplicationId.newInstance(System.currentTimeMillis(),1);
  Path userLogDir=new Path(userDir,suffix);
  Path app1Dir=new Path(userLogDir,appId1.toString());
  FileStatus app1DirStatus=new FileStatus(0,true,0,0,toDeleteTime,app1Dir);
  ApplicationId appId2=ApplicationId.newInstance(System.currentTimeMillis(),2);
  Path app2Dir=new Path(userLogDir,appId2.toString());
  FileStatus app2DirStatus=new FileStatus(0,true,0,0,toDeleteTime,app2Dir);
  ApplicationId appId3=ApplicationId.newInstance(System.currentTimeMillis(),3);
  Path app3Dir=new Path(userLogDir,appId3.toString());
  FileStatus app3DirStatus=new FileStatus(0,true,0,0,toDeleteTime,app3Dir);
  ApplicationId appId4=ApplicationId.newInstance(System.currentTimeMillis(),4);
  Path app4Dir=new Path(userLogDir,appId4.toString());
  FileStatus app4DirStatus=new FileStatus(0,true,0,0,toDeleteTime,app4Dir);
  ApplicationId appId5=ApplicationId.newInstance(System.currentTimeMillis(),5);
  Path app5Dir=new Path(userLogDir,appId5.toString());
  FileStatus app5DirStatus=new FileStatus(0,true,0,0,toDeleteTime,app5Dir);
  when(mockFs.listStatus(userLogDir)).thenReturn(new FileStatus[]{app1DirStatus,app2DirStatus,app3DirStatus,app4DirStatus,app5DirStatus});
  when(mockFs.listStatus(app1Dir)).thenReturn(new FileStatus[]{});
  Path app2Log1=new Path(app2Dir,"host1");
  FileStatus app2Log1Status=new FileStatus(10,false,1,1,toDeleteTime,app2Log1);
  Path app2Log2=new Path(app2Dir,"host2");
  FileStatus app2Log2Status=new FileStatus(10,false,1,1,toKeepTime,app2Log2);
  when(mockFs.listStatus(app2Dir)).thenReturn(new FileStatus[]{app2Log1Status,app2Log2Status});
  Path app3Log1=new Path(app3Dir,"host1");
  FileStatus app3Log1Status=new FileStatus(10,false,1,1,toDeleteTime,app3Log1);
  Path app3Log2=new Path(app3Dir,"host2");
  FileStatus app3Log2Status=new FileStatus(10,false,1,1,toDeleteTime,app3Log2);
  when(mockFs.delete(app3Dir,true)).thenThrow(new AccessControlException("Injected Error\nStack Trace :("));
  when(mockFs.listStatus(app3Dir)).thenReturn(new FileStatus[]{app3Log1Status,app3Log2Status});
  Path app4Log1=new Path(app4Dir,"host1");
  FileStatus app4Log1Status=new FileStatus(10,false,1,1,toDeleteTime,app4Log1);
  Path app4Log2=new Path(app4Dir,"host2");
  FileStatus app4Log2Status=new FileStatus(10,false,1,1,toDeleteTime,app4Log2);
  when(mockFs.listStatus(app4Dir)).thenReturn(new FileStatus[]{app4Log1Status,app4Log2Status});
  Path app5Log1=new Path(app5Dir,"host1");
  FileStatus app5Log1Status=new FileStatus(10,false,1,1,toDeleteTime,app5Log1);
  Path app5Log2=new Path(app5Dir,"host2");
  FileStatus app5Log2Status=new FileStatus(10,false,1,1,toKeepTime,app5Log2);
  when(mockFs.listStatus(app5Dir)).thenReturn(new FileStatus[]{app5Log1Status,app5Log2Status});
  final List<ApplicationId> finishedApplications=Collections.unmodifiableList(Arrays.asList(appId1,appId2,appId3,appId4));
  final List<ApplicationId> runningApplications=Collections.unmodifiableList(Arrays.asList(appId5));
  AggregatedLogDeletionService deletionService=new AggregatedLogDeletionService(){
    @Override protected ApplicationClientProtocol creatRMClient() throws IOException {
      try {
        return createMockRMClient(finishedApplications,runningApplications);
      }
 catch (      Exception e) {
        throw new IOException(e);
      }
    }
    @Override protected void stopRMClient(){
    }
  }
;
  deletionService.init(conf);
  deletionService.start();
  verify(mockFs,timeout(2000)).delete(app1Dir,true);
  verify(mockFs,timeout(2000).times(0)).delete(app2Dir,true);
  verify(mockFs,timeout(2000)).delete(app3Dir,true);
  verify(mockFs,timeout(2000)).delete(app4Dir,true);
  verify(mockFs,timeout(2000).times(0)).delete(app5Dir,true);
  verify(mockFs,timeout(2000)).delete(app5Log1,true);
  verify(mockFs,timeout(2000).times(0)).delete(app5Log2,true);
  deletionService.stop();
}
