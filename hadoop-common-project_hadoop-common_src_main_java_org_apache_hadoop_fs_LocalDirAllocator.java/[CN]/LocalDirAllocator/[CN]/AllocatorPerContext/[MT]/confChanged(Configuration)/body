{
  Context ctx=currentContext.get();
  String newLocalDirs=conf.get(contextCfgItemName);
  if (null == newLocalDirs) {
    throw new IOException(contextCfgItemName + " not configured");
  }
  if (!newLocalDirs.equals(ctx.savedLocalDirs)) {
    ctx=new Context();
    String[] dirStrings=StringUtils.getTrimmedStrings(newLocalDirs);
    ctx.localFS=FileSystem.getLocal(conf);
    int numDirs=dirStrings.length;
    ArrayList<Path> dirs=new ArrayList<Path>(numDirs);
    ArrayList<DF> dfList=new ArrayList<DF>(numDirs);
    for (int i=0; i < numDirs; i++) {
      try {
        Path tmpDir=new Path(dirStrings[i]);
        if (ctx.localFS.mkdirs(tmpDir) || ctx.localFS.exists(tmpDir)) {
          try {
            File tmpFile=tmpDir.isAbsolute() ? new File(ctx.localFS.makeQualified(tmpDir).toUri()) : new File(dirStrings[i]);
            DiskChecker.checkDir(tmpFile);
            dirs.add(new Path(tmpFile.getPath()));
            dfList.add(new DF(tmpFile,30000));
          }
 catch (          DiskErrorException de) {
            LOG.warn(dirStrings[i] + " is not writable\n",de);
          }
        }
 else {
          LOG.warn("Failed to create " + dirStrings[i]);
        }
      }
 catch (      IOException ie) {
        LOG.warn("Failed to create " + dirStrings[i] + ": "+ ie.getMessage()+ "\n",ie);
      }
    }
    ctx.localDirs=dirs.toArray(new Path[dirs.size()]);
    ctx.dirDF=dfList.toArray(new DF[dirs.size()]);
    ctx.savedLocalDirs=newLocalDirs;
    if (dirs.size() > 0) {
      ctx.dirNumLastAccessed.set(dirIndexRandomizer.nextInt(dirs.size()));
    }
    currentContext.set(ctx);
  }
  return ctx;
}
