{
  String newLocalDirs=conf.get(contextCfgItemName);
  if (null == newLocalDirs) {
    throw new IOException(contextCfgItemName + " not configured");
  }
  if (!newLocalDirs.equals(savedLocalDirs)) {
    localDirs=StringUtils.getTrimmedStrings(newLocalDirs);
    localFS=FileSystem.getLocal(conf);
    int numDirs=localDirs.length;
    ArrayList<String> dirs=new ArrayList<String>(numDirs);
    ArrayList<DF> dfList=new ArrayList<DF>(numDirs);
    for (int i=0; i < numDirs; i++) {
      try {
        Path tmpDir=new Path(localDirs[i]);
        if (localFS.mkdirs(tmpDir) || localFS.exists(tmpDir)) {
          try {
            File tmpFile=tmpDir.isAbsolute() ? new File(localFS.makeQualified(tmpDir).toUri()) : new File(localDirs[i]);
            DiskChecker.checkDir(tmpFile);
            dirs.add(tmpFile.getPath());
            dfList.add(new DF(tmpFile,30000));
          }
 catch (          DiskErrorException de) {
            LOG.warn(localDirs[i] + " is not writable\n",de);
          }
        }
 else {
          LOG.warn("Failed to create " + localDirs[i]);
        }
      }
 catch (      IOException ie) {
        LOG.warn("Failed to create " + localDirs[i] + ": "+ ie.getMessage()+ "\n",ie);
      }
    }
    localDirs=dirs.toArray(new String[dirs.size()]);
    dirDF=dfList.toArray(new DF[dirs.size()]);
    savedLocalDirs=newLocalDirs;
    dirNumLastAccessed=dirIndexRandomizer.nextInt(dirs.size());
  }
}
