{
  final short replication=3;
  startCluster(BLOCK_SIZE,replication,-1);
  final String methodName=GenericTestUtils.getMethodName();
  final Path file=new Path("/" + methodName + ".01.dat");
  old=DataNodeFaultInjector.get();
  DataNodeFaultInjector.set(new DataNodeFaultInjector(){
    private int tries=0;
    @Override public void failMirrorConnection() throws IOException {
      if (tries++ == 0) {
        throw new IOException("Failing Mirror for space reservation");
      }
    }
  }
);
  FSDataOutputStream os=fs.create(file,replication);
  os.write(new byte[1]);
  os.close();
  cluster.triggerBlockReports();
  for (  final DataNode dn : cluster.getDataNodes()) {
    try (FsDatasetSpi.FsVolumeReferences volumes=dn.getFSDataset().getFsVolumeReferences()){
      final FsVolumeImpl volume=(FsVolumeImpl)volumes.get(0);
      GenericTestUtils.waitFor(new Supplier<Boolean>(){
        @Override public Boolean get(){
          LOG.info("dn " + dn.getDisplayName() + " space : "+ volume.getReservedForReplicas());
          return (volume.getReservedForReplicas() == 0);
        }
      }
,100,Integer.MAX_VALUE);
    }
   }
}
