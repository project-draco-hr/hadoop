{
  Map<String,Long> expectedValues=new HashMap<>();
  expectedValues.put("PMemUsageMBHistogram50thPercentileMBs",1536L);
  expectedValues.put("PMemUsageMBHistogram75thPercentileMBs",2048L);
  expectedValues.put("PMemUsageMBHistogram90thPercentileMBs",2048L);
  expectedValues.put("PMemUsageMBHistogram95thPercentileMBs",2048L);
  expectedValues.put("PMemUsageMBHistogram99thPercentileMBs",2048L);
  expectedValues.put("PCpuUsagePercentHistogram50thPercentilePercents",0L);
  expectedValues.put("PCpuUsagePercentHistogram75thPercentilePercents",0L);
  expectedValues.put("PCpuUsagePercentHistogram90thPercentilePercents",0L);
  expectedValues.put("PCpuUsagePercentHistogram95thPercentilePercents",0L);
  expectedValues.put("PCpuUsagePercentHistogram99thPercentilePercents",0L);
  Set<String> testResults=new HashSet<>();
  int delay=10;
  int rolloverDelay=1000;
  MetricsCollectorImpl collector=new MetricsCollectorImpl();
  ContainerId containerId=mock(ContainerId.class);
  ContainerMetrics metrics=ContainerMetrics.forContainer(containerId,delay,0);
  metrics.recordMemoryUsage(1024);
  metrics.recordMemoryUsage(2048);
  Thread.sleep(rolloverDelay + 10);
  metrics.getMetrics(collector,true);
  for (  MetricsRecord record : collector.getRecords()) {
    for (    AbstractMetric metric : record.metrics()) {
      String metricName=metric.name();
      if (expectedValues.containsKey(metricName)) {
        Long expectedValue=expectedValues.get(metricName);
        Assert.assertEquals("Metric " + metricName + " doesn't have expected value",expectedValue,metric.value());
        testResults.add(metricName);
      }
    }
  }
  Assert.assertEquals(expectedValues.keySet(),testResults);
}
