{
  MiniDFSCluster cluster=null;
  final HdfsConfiguration conf=createSecureConfig("authentication,privacy");
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(ONE_DATANODE).build();
    cluster.waitActive();
    final String nnHost=getHostPortForNN(cluster);
    final String dnHost=getHostPortForDN(cluster,0);
    UserGroupInformation.loginUserFromKeytabAndReturnUGI(getHdfsPrincipal(),getHdfsKeytab()).doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        TraceAdmin trace=new TraceAdmin();
        trace.setConf(conf);
        final String[] nnTraceCmd=new String[]{"-list","-host",nnHost,"-principal",conf.get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY)};
        int ret=trace.run(nnTraceCmd);
        assertEquals(0,ret);
        final String[] dnTraceCmd=new String[]{"-list","-host",dnHost,"-principal",conf.get(DFSConfigKeys.DFS_DATANODE_KERBEROS_PRINCIPAL_KEY)};
        ret=trace.run(dnTraceCmd);
        assertEquals(0,ret);
        return null;
      }
    }
);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
