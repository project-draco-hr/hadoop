{
  HttpRequest request=(HttpRequest)e.getMessage();
  HttpResponse response=new DefaultHttpResponse(HttpVersion.HTTP_1_1,HttpResponseStatus.OK);
  response.setHeader(HttpHeaders.Names.CONTENT_TYPE,"application/json");
  if (request.getMethod() != HttpMethod.GET) {
    response.setStatus(HttpResponseStatus.METHOD_NOT_ALLOWED);
    return e.getChannel().write(response);
  }
  QueryStringDecoder decoder=new QueryStringDecoder(request.getUri());
  final String op=getOp(decoder);
  String content;
  String path=null;
  try {
    path=getPath(decoder);
    if ("GETFILESTATUS".equals(op)) {
      content=image.getFileStatus(path);
    }
 else     if ("LISTSTATUS".equals(op)) {
      content=image.listStatus(path);
    }
 else     if ("GETACLSTATUS".equals(op)) {
      content=image.getAclStatus(path);
    }
 else {
      throw new IllegalArgumentException("Invalid value for webhdfs parameter" + " \"op\"");
    }
  }
 catch (  IllegalArgumentException ex) {
    response.setStatus(HttpResponseStatus.BAD_REQUEST);
    content=JsonUtil.toJsonString(ex);
  }
catch (  FileNotFoundException ex) {
    response.setStatus(HttpResponseStatus.NOT_FOUND);
    content=JsonUtil.toJsonString(ex);
  }
catch (  Exception ex) {
    content=JsonUtil.toJsonString(ex);
  }
  HttpHeaders.setContentLength(response,content.length());
  e.getChannel().write(response);
  ChannelFuture future=e.getChannel().write(content);
  LOG.info(response.getStatus().getCode() + " method=" + request.getMethod().getName()+ " op="+ op+ " target="+ path);
  return future;
}
