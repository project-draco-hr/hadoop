{
  return new NodeStatusUpdaterImpl(context,dispatcher,healthChecker,metrics){
    @Override protected ResourceTracker getRMClient(){
      final ResourceTrackerService rt=resourceManager.getResourceTrackerService();
      final RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
      return new ResourceTracker(){
        @Override public NodeHeartbeatResponse nodeHeartbeat(        NodeHeartbeatRequest request) throws YarnRemoteException, IOException {
          NodeHeartbeatResponse response=recordFactory.newRecordInstance(NodeHeartbeatResponse.class);
          try {
            response=rt.nodeHeartbeat(request);
          }
 catch (          YarnRemoteException ioe) {
            LOG.info("Exception in heartbeat from node " + request.getNodeStatus().getNodeId(),ioe);
            throw RPCUtil.getRemoteException(ioe);
          }
          return response;
        }
        @Override public RegisterNodeManagerResponse registerNodeManager(        RegisterNodeManagerRequest request) throws YarnRemoteException, IOException {
          RegisterNodeManagerResponse response=recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);
          try {
            response=rt.registerNodeManager(request);
          }
 catch (          YarnRemoteException ioe) {
            LOG.info("Exception in node registration from " + request.getNodeId().toString(),ioe);
            throw RPCUtil.getRemoteException(ioe);
          }
          return response;
        }
      }
;
    }
  }
;
}
