{
  final int MAX_RETRIES=3;
  int remainingRetries=MAX_RETRIES;
  boolean sendProgress=resetProgressFlag();
  long taskProgressInterval=MRJobConfUtil.getTaskProgressReportInterval(conf);
  while (!taskDone.get()) {
synchronized (lock) {
      done=false;
    }
    try {
      boolean taskFound=true;
      AMFeedback amFeedback=null;
synchronized (lock) {
        if (taskDone.get()) {
          break;
        }
        lock.wait(taskProgressInterval);
      }
      if (taskDone.get()) {
        break;
      }
      if (sendProgress) {
        updateCounters();
        checkTaskLimits();
        taskStatus.statusUpdate(taskProgress.get(),taskProgress.toString(),counters);
        amFeedback=umbilical.statusUpdate(taskId,taskStatus);
        taskFound=amFeedback.getTaskFound();
        taskStatus.clearStatus();
      }
 else {
        amFeedback=umbilical.statusUpdate(taskId,null);
        taskFound=amFeedback.getTaskFound();
      }
      if (!taskFound) {
        LOG.warn("Parent died.  Exiting " + taskId);
        resetDoneFlag();
        System.exit(66);
      }
      boolean lastPreempt=mustPreempt.get();
      mustPreempt.set(mustPreempt.get() || amFeedback.getPreemption());
      if (lastPreempt ^ mustPreempt.get()) {
        LOG.info("PREEMPTION TASK: setting mustPreempt to " + mustPreempt.get() + " given "+ amFeedback.getPreemption()+ " for "+ taskId+ " task status: "+ taskStatus.getPhase());
      }
      sendProgress=resetProgressFlag();
      remainingRetries=MAX_RETRIES;
    }
 catch (    TaskLimitException e) {
      String errMsg="Task exceeded the limits: " + StringUtils.stringifyException(e);
      LOG.fatal(errMsg);
      try {
        umbilical.fatalError(taskId,errMsg);
      }
 catch (      IOException ioe) {
        LOG.fatal("Failed to update failure diagnosis",ioe);
      }
      LOG.fatal("Killing " + taskId);
      resetDoneFlag();
      ExitUtil.terminate(69);
    }
catch (    Throwable t) {
      LOG.info("Communication exception: " + StringUtils.stringifyException(t));
      remainingRetries-=1;
      if (remainingRetries == 0) {
        ReflectionUtils.logThreadInfo(LOG,"Communication exception",0);
        LOG.warn("Last retry, killing " + taskId);
        resetDoneFlag();
        System.exit(65);
      }
    }
  }
  resetDoneFlag();
}
