{
  boolean graceful;
  boolean shutdown;
  while (true) {
    try {
synchronized (mJobs) {
        graceful=JobMonitor.this.graceful;
        shutdown=JobMonitor.this.shutdown;
        runningJobs.drainTo(mJobs);
      }
      if (shutdown) {
        if (!graceful) {
          while (!runningJobs.isEmpty()) {
synchronized (mJobs) {
              runningJobs.drainTo(mJobs);
            }
          }
          break;
        }
synchronized (mJobs) {
          if (graceful && mJobs.isEmpty()) {
            break;
          }
        }
      }
      JobStats jobStats=null;
synchronized (mJobs) {
        jobStats=mJobs.poll();
      }
      while (jobStats != null) {
        Job job=jobStats.getJob();
        try {
          long start=System.currentTimeMillis();
          JobStatus status=job.getStatus();
          long end=System.currentTimeMillis();
          if (LOG.isDebugEnabled()) {
            LOG.debug("Status polling for job " + job.getJobID() + " took "+ (end - start)+ "ms.");
          }
          jobStats.updateJobStatus(status);
          if (status.isJobComplete()) {
            if (status.getState() == JobStatus.State.SUCCEEDED) {
              onSuccess(job);
            }
 else {
              onFailure(job);
            }
synchronized (statistics) {
              statistics.add(jobStats);
            }
          }
 else {
synchronized (mJobs) {
              if (!mJobs.offer(jobStats)) {
                LOG.error("Lost job " + (null == job.getJobName() ? "<unknown>" : job.getJobName()));
              }
            }
            break;
          }
        }
 catch (        IOException e) {
          if (e.getCause() instanceof ClosedByInterruptException) {
            Thread.currentThread().interrupt();
          }
 else {
            LOG.warn("Lost job " + (null == job.getJobName() ? "<unknown>" : job.getJobName()),e);
synchronized (statistics) {
              statistics.add(jobStats);
            }
          }
        }
synchronized (mJobs) {
          jobStats=mJobs.poll();
        }
      }
      try {
        TimeUnit.MILLISECONDS.sleep(pollDelayMillis);
      }
 catch (      InterruptedException e) {
        shutdown=true;
        continue;
      }
    }
 catch (    Throwable e) {
      LOG.warn("Unexpected exception: ",e);
    }
  }
}
