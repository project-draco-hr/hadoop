{
  JobsInfo allJobs=new JobsInfo();
  long num=0;
  boolean checkCount=false;
  boolean checkStart=false;
  boolean checkEnd=false;
  long countNum=0;
  long sBegin=0;
  long sEnd=Long.MAX_VALUE;
  long fBegin=0;
  long fEnd=Long.MAX_VALUE;
  if (count != null && !count.isEmpty()) {
    checkCount=true;
    try {
      countNum=Long.parseLong(count);
    }
 catch (    NumberFormatException e) {
      throw new BadRequestException(e.getMessage());
    }
    if (countNum <= 0) {
      throw new BadRequestException("limit value must be greater then 0");
    }
  }
  if (startedBegin != null && !startedBegin.isEmpty()) {
    checkStart=true;
    try {
      sBegin=Long.parseLong(startedBegin);
    }
 catch (    NumberFormatException e) {
      throw new BadRequestException("Invalid number format: " + e.getMessage());
    }
    if (sBegin < 0) {
      throw new BadRequestException("startedTimeBegin must be greater than 0");
    }
  }
  if (startedEnd != null && !startedEnd.isEmpty()) {
    checkStart=true;
    try {
      sEnd=Long.parseLong(startedEnd);
    }
 catch (    NumberFormatException e) {
      throw new BadRequestException("Invalid number format: " + e.getMessage());
    }
    if (sEnd < 0) {
      throw new BadRequestException("startedTimeEnd must be greater than 0");
    }
  }
  if (sBegin > sEnd) {
    throw new BadRequestException("startedTimeEnd must be greater than startTimeBegin");
  }
  if (finishBegin != null && !finishBegin.isEmpty()) {
    checkEnd=true;
    try {
      fBegin=Long.parseLong(finishBegin);
    }
 catch (    NumberFormatException e) {
      throw new BadRequestException("Invalid number format: " + e.getMessage());
    }
    if (fBegin < 0) {
      throw new BadRequestException("finishedTimeBegin must be greater than 0");
    }
  }
  if (finishEnd != null && !finishEnd.isEmpty()) {
    checkEnd=true;
    try {
      fEnd=Long.parseLong(finishEnd);
    }
 catch (    NumberFormatException e) {
      throw new BadRequestException("Invalid number format: " + e.getMessage());
    }
    if (fEnd < 0) {
      throw new BadRequestException("finishedTimeEnd must be greater than 0");
    }
  }
  if (fBegin > fEnd) {
    throw new BadRequestException("finishedTimeEnd must be greater than finishedTimeBegin");
  }
  for (  Job job : appCtx.getAllJobs().values()) {
    if (checkCount && num == countNum) {
      break;
    }
    if (queueQuery != null && !queueQuery.isEmpty()) {
      if (!job.getQueueName().equals(queueQuery)) {
        continue;
      }
    }
    if (userQuery != null && !userQuery.isEmpty()) {
      if (!job.getUserName().equals(userQuery)) {
        continue;
      }
    }
    JobReport report=job.getReport();
    if (checkStart && (report.getStartTime() < sBegin || report.getStartTime() > sEnd)) {
      continue;
    }
    if (checkEnd && (report.getFinishTime() < fBegin || report.getFinishTime() > fEnd)) {
      continue;
    }
    JobInfo jobInfo=new JobInfo(job);
    allJobs.add(jobInfo);
    num++;
  }
  return allJobs;
}
