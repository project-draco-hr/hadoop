{
  Long countParam=null;
  init();
  if (count != null && !count.isEmpty()) {
    try {
      countParam=Long.parseLong(count);
    }
 catch (    NumberFormatException e) {
      throw new BadRequestException(e.getMessage());
    }
    if (countParam <= 0) {
      throw new BadRequestException("limit value must be greater then 0");
    }
  }
  Long sBegin=null;
  if (startedBegin != null && !startedBegin.isEmpty()) {
    try {
      sBegin=Long.parseLong(startedBegin);
    }
 catch (    NumberFormatException e) {
      throw new BadRequestException("Invalid number format: " + e.getMessage());
    }
    if (sBegin < 0) {
      throw new BadRequestException("startedTimeBegin must be greater than 0");
    }
  }
  Long sEnd=null;
  if (startedEnd != null && !startedEnd.isEmpty()) {
    try {
      sEnd=Long.parseLong(startedEnd);
    }
 catch (    NumberFormatException e) {
      throw new BadRequestException("Invalid number format: " + e.getMessage());
    }
    if (sEnd < 0) {
      throw new BadRequestException("startedTimeEnd must be greater than 0");
    }
  }
  if (sBegin != null && sEnd != null && sBegin > sEnd) {
    throw new BadRequestException("startedTimeEnd must be greater than startTimeBegin");
  }
  Long fBegin=null;
  if (finishBegin != null && !finishBegin.isEmpty()) {
    try {
      fBegin=Long.parseLong(finishBegin);
    }
 catch (    NumberFormatException e) {
      throw new BadRequestException("Invalid number format: " + e.getMessage());
    }
    if (fBegin < 0) {
      throw new BadRequestException("finishedTimeBegin must be greater than 0");
    }
  }
  Long fEnd=null;
  if (finishEnd != null && !finishEnd.isEmpty()) {
    try {
      fEnd=Long.parseLong(finishEnd);
    }
 catch (    NumberFormatException e) {
      throw new BadRequestException("Invalid number format: " + e.getMessage());
    }
    if (fEnd < 0) {
      throw new BadRequestException("finishedTimeEnd must be greater than 0");
    }
  }
  if (fBegin != null && fEnd != null && fBegin > fEnd) {
    throw new BadRequestException("finishedTimeEnd must be greater than finishedTimeBegin");
  }
  JobState jobState=null;
  if (stateQuery != null) {
    jobState=JobState.valueOf(stateQuery);
  }
  return ctx.getPartialJobs(0l,countParam,userQuery,queueQuery,sBegin,sEnd,fBegin,fEnd,jobState);
}
