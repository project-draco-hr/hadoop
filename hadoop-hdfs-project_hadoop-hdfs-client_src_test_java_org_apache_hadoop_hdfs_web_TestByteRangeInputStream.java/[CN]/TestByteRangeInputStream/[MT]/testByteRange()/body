{
  ByteRangeInputStream.URLOpener oMock=getMockURLOpener(new URL("http://test"));
  ByteRangeInputStream.URLOpener rMock=getMockURLOpener(null);
  ByteRangeInputStream bris=new ByteRangeInputStreamImpl(oMock,rMock);
  bris.seek(0);
  assertEquals("getPos wrong",0,bris.getPos());
  bris.read();
  assertEquals("Initial call made incorrectly (offset check)",0,bris.startPos);
  assertEquals("getPos should return 1 after reading one byte",1,bris.getPos());
  verify(oMock,times(1)).connect(0,false);
  bris.read();
  assertEquals("getPos should return 2 after reading two bytes",2,bris.getPos());
  verify(oMock,times(1)).connect(0,false);
  rMock.setURL(new URL("http://resolvedurl/"));
  bris.seek(100);
  bris.read();
  assertEquals("Seek to 100 bytes made incorrectly (offset Check)",100,bris.startPos);
  assertEquals("getPos should return 101 after reading one byte",101,bris.getPos());
  verify(rMock,times(1)).connect(100,true);
  bris.seek(101);
  bris.read();
  verify(rMock,times(1)).connect(100,true);
  verify(rMock,times(0)).connect(101,true);
  bris.seek(2500);
  bris.read();
  assertEquals("Seek to 2500 bytes made incorrectly (offset Check)",2500,bris.startPos);
  doReturn(getMockConnection(null)).when(rMock).connect(anyLong(),anyBoolean());
  bris.seek(500);
  try {
    bris.read();
    fail("Exception should be thrown when content-length is not given");
  }
 catch (  IOException e) {
    assertTrue("Incorrect response message: " + e.getMessage(),e.getMessage().startsWith(HttpHeaders.CONTENT_LENGTH + " is missing: "));
  }
  bris.close();
}
