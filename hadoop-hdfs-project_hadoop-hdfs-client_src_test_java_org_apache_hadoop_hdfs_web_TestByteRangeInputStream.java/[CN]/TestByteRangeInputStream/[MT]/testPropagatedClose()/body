{
  ByteRangeInputStream bris=mock(ByteRangeInputStream.class,CALLS_REAL_METHODS);
  InputStreamAndFileLength mockStream=new InputStreamAndFileLength(1L,mock(InputStream.class));
  doReturn(mockStream).when(bris).openInputStream(Mockito.anyLong());
  Whitebox.setInternalState(bris,"status",ByteRangeInputStream.StreamStatus.SEEK);
  int brisOpens=0;
  int brisCloses=0;
  int isCloses=0;
  bris.getInputStream();
  verify(bris,times(++brisOpens)).openInputStream(Mockito.anyLong());
  verify(bris,times(brisCloses)).close();
  verify(mockStream.in,times(isCloses)).close();
  bris.getInputStream();
  verify(bris,times(brisOpens)).openInputStream(Mockito.anyLong());
  verify(bris,times(brisCloses)).close();
  verify(mockStream.in,times(isCloses)).close();
  bris.seek(1);
  bris.getInputStream();
  verify(bris,times(++brisOpens)).openInputStream(Mockito.anyLong());
  verify(bris,times(brisCloses)).close();
  verify(mockStream.in,times(++isCloses)).close();
  bris.getInputStream();
  verify(bris,times(brisOpens)).openInputStream(Mockito.anyLong());
  verify(bris,times(brisCloses)).close();
  verify(mockStream.in,times(isCloses)).close();
  bris.seek(1);
  bris.getInputStream();
  verify(bris,times(brisOpens)).openInputStream(Mockito.anyLong());
  verify(bris,times(brisCloses)).close();
  verify(mockStream.in,times(isCloses)).close();
  bris.close();
  verify(bris,times(++brisCloses)).close();
  verify(mockStream.in,times(++isCloses)).close();
  bris.close();
  verify(bris,times(++brisCloses)).close();
  verify(mockStream.in,times(isCloses)).close();
  boolean errored=false;
  try {
    bris.getInputStream();
  }
 catch (  IOException e) {
    errored=true;
    assertEquals("Stream closed",e.getMessage());
  }
 finally {
    assertTrue("Read a closed steam",errored);
  }
  verify(bris,times(brisOpens)).openInputStream(Mockito.anyLong());
  verify(bris,times(brisCloses)).close();
  verify(mockStream.in,times(isCloses)).close();
}
