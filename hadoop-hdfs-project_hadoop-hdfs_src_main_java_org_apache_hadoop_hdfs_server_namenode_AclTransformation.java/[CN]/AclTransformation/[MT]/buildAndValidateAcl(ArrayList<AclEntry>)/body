{
  aclBuilder.trimToSize();
  Collections.sort(aclBuilder,ACL_ENTRY_COMPARATOR);
  AclEntry prevEntry=null;
  for (  AclEntry entry : aclBuilder) {
    if (prevEntry != null && ACL_ENTRY_COMPARATOR.compare(prevEntry,entry) == 0) {
      throw new AclException("Invalid ACL: multiple entries with same scope, type and name.");
    }
    if (entry.getName() != null && (entry.getType() == MASK || entry.getType() == OTHER)) {
      throw new AclException("Invalid ACL: this entry type must not have a name: " + entry + ".");
    }
    prevEntry=entry;
  }
  ScopedAclEntries scopedEntries=new ScopedAclEntries(aclBuilder);
  checkMaxEntries(scopedEntries);
  for (  AclEntryType type : EnumSet.of(USER,GROUP,OTHER)) {
    AclEntry accessEntryKey=new AclEntry.Builder().setScope(ACCESS).setType(type).build();
    if (Collections.binarySearch(scopedEntries.getAccessEntries(),accessEntryKey,ACL_ENTRY_COMPARATOR) < 0) {
      throw new AclException("Invalid ACL: the user, group and other entries are required.");
    }
    if (!scopedEntries.getDefaultEntries().isEmpty()) {
      AclEntry defaultEntryKey=new AclEntry.Builder().setScope(DEFAULT).setType(type).build();
      if (Collections.binarySearch(scopedEntries.getDefaultEntries(),defaultEntryKey,ACL_ENTRY_COMPARATOR) < 0) {
        throw new AclException("Invalid default ACL: the user, group and other entries are required.");
      }
    }
  }
  return Collections.unmodifiableList(aclBuilder);
}
