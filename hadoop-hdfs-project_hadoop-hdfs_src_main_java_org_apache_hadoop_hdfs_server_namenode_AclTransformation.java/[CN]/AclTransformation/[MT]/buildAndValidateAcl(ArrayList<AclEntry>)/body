{
  if (aclBuilder.size() > MAX_ENTRIES) {
    throw new AclException("Invalid ACL: ACL has " + aclBuilder.size() + " entries, which exceeds maximum of "+ MAX_ENTRIES+ ".");
  }
  aclBuilder.trimToSize();
  Collections.sort(aclBuilder,ACL_ENTRY_COMPARATOR);
  AclEntry userEntry=null, groupEntry=null, otherEntry=null;
  AclEntry prevEntry=null;
  for (  AclEntry entry : aclBuilder) {
    if (prevEntry != null && ACL_ENTRY_COMPARATOR.compare(prevEntry,entry) == 0) {
      throw new AclException("Invalid ACL: multiple entries with same scope, type and name.");
    }
    if (entry.getName() != null && (entry.getType() == MASK || entry.getType() == OTHER)) {
      throw new AclException("Invalid ACL: this entry type must not have a name: " + entry + ".");
    }
    if (entry.getScope() == ACCESS) {
      if (entry.getType() == USER && entry.getName() == null) {
        userEntry=entry;
      }
      if (entry.getType() == GROUP && entry.getName() == null) {
        groupEntry=entry;
      }
      if (entry.getType() == OTHER && entry.getName() == null) {
        otherEntry=entry;
      }
    }
    prevEntry=entry;
  }
  if (userEntry == null || groupEntry == null || otherEntry == null) {
    throw new AclException("Invalid ACL: the user, group and other entries are required.");
  }
  return Collections.unmodifiableList(aclBuilder);
}
