{
  ValidatedAclSpec aclSpec=new ValidatedAclSpec(inAclSpec);
  ArrayList<AclEntry> aclBuilder=Lists.newArrayListWithCapacity(MAX_ENTRIES);
  EnumMap<AclEntryScope,AclEntry> providedMask=Maps.newEnumMap(AclEntryScope.class);
  EnumSet<AclEntryScope> maskDirty=EnumSet.noneOf(AclEntryScope.class);
  EnumSet<AclEntryScope> scopeDirty=EnumSet.noneOf(AclEntryScope.class);
  for (  AclEntry existingEntry : existingAcl) {
    if (aclSpec.containsKey(existingEntry)) {
      scopeDirty.add(existingEntry.getScope());
      if (existingEntry.getType() == MASK) {
        maskDirty.add(existingEntry.getScope());
      }
    }
 else {
      if (existingEntry.getType() == MASK) {
        providedMask.put(existingEntry.getScope(),existingEntry);
      }
 else {
        aclBuilder.add(existingEntry);
      }
    }
  }
  copyDefaultsIfNeeded(aclBuilder);
  calculateMasks(aclBuilder,providedMask,maskDirty,scopeDirty);
  return buildAndValidateAcl(aclBuilder);
}
