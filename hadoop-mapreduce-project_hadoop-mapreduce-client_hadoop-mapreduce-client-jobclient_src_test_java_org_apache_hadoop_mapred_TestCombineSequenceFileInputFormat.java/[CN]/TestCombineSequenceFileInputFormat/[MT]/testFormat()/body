{
  JobConf job=new JobConf(conf);
  Reporter reporter=Reporter.NULL;
  Random random=new Random();
  long seed=random.nextLong();
  LOG.info("seed = " + seed);
  random.setSeed(seed);
  localFs.delete(workDir,true);
  FileInputFormat.setInputPaths(job,workDir);
  final int length=10000;
  final int numFiles=10;
  createFiles(length,numFiles,random);
  InputFormat<IntWritable,BytesWritable> format=new CombineSequenceFileInputFormat<IntWritable,BytesWritable>();
  IntWritable key=new IntWritable();
  BytesWritable value=new BytesWritable();
  for (int i=0; i < 3; i++) {
    int numSplits=random.nextInt(length / (SequenceFile.SYNC_INTERVAL / 20)) + 1;
    LOG.info("splitting: requesting = " + numSplits);
    InputSplit[] splits=format.getSplits(job,numSplits);
    LOG.info("splitting: got =        " + splits.length);
    assertEquals("We got more than one splits!",1,splits.length);
    InputSplit split=splits[0];
    assertEquals("It should be CombineFileSplit",CombineFileSplit.class,split.getClass());
    BitSet bits=new BitSet(length);
    RecordReader<IntWritable,BytesWritable> reader=format.getRecordReader(split,job,reporter);
    try {
      while (reader.next(key,value)) {
        assertFalse("Key in multiple partitions.",bits.get(key.get()));
        bits.set(key.get());
      }
    }
  finally {
      reader.close();
    }
    assertEquals("Some keys in no partition.",length,bits.cardinality());
  }
}
