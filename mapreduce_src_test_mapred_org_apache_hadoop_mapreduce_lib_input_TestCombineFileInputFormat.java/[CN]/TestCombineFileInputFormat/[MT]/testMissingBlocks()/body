{
  String namenode=null;
  MiniDFSCluster dfs=null;
  FileSystem fileSys=null;
  String testName="testMissingBlocks";
  try {
    Configuration conf=new Configuration();
    conf.set("fs.hdfs.impl",MissingBlockFileSystem.class.getName());
    conf.setBoolean("dfs.replication.considerLoad",false);
    dfs=new MiniDFSCluster(conf,1,true,rack1,hosts1);
    dfs.waitActive();
    namenode=(dfs.getFileSystem()).getUri().getHost() + ":" + (dfs.getFileSystem()).getUri().getPort();
    fileSys=dfs.getFileSystem();
    if (!fileSys.mkdirs(inDir)) {
      throw new IOException("Mkdirs failed to create " + inDir.toString());
    }
    Path file1=new Path(dir1 + "/file1");
    writeFile(conf,file1,(short)1,1);
    Path file5=new Path(dir5 + "/file5");
    writeFile(conf,file5,(short)1,1);
    ((MissingBlockFileSystem)fileSys).setFileWithMissingBlocks(file1.toUri().getPath());
    DummyInputFormat inFormat=new DummyInputFormat();
    Job job=Job.getInstance(conf);
    FileInputFormat.setInputPaths(job,dir1 + "," + dir5);
    List<InputSplit> splits=inFormat.getSplits(job);
    System.out.println("Made splits(Test0): " + splits.size());
    for (    InputSplit split : splits) {
      System.out.println("File split(Test0): " + split);
    }
    assertEquals(splits.size(),1);
    CombineFileSplit fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(2,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file1.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(BLOCKSIZE,fileSplit.getLength(0));
    assertEquals(file5.getName(),fileSplit.getPath(1).getName());
    assertEquals(0,fileSplit.getOffset(1));
    assertEquals(BLOCKSIZE,fileSplit.getLength(1));
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
  }
  finally {
    if (dfs != null) {
      dfs.shutdown();
    }
  }
}
