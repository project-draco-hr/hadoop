{
  super(dfsClient,src,stat,flag,progress,checksum,favoredNodes);
  DFSClient.LOG.info("Creating striped output stream");
  checkConfiguration();
  cellBuffers=new ByteBuffer[numAllBlocks];
  List<BlockingQueue<LocatedBlock>> stripeBlocks=new ArrayList<>();
  for (int i=0; i < numAllBlocks; i++) {
    stripeBlocks.add(new LinkedBlockingQueue<LocatedBlock>(numAllBlocks));
    try {
      cellBuffers[i]=ByteBuffer.wrap(byteArrayManager.newByteArray(cellSize));
    }
 catch (    InterruptedException ie) {
      final InterruptedIOException iioe=new InterruptedIOException("create cell buffers");
      iioe.initCause(ie);
      throw iioe;
    }
  }
  encoder=new RSRawEncoder();
  encoder.initialize(numDataBlocks,numAllBlocks - numDataBlocks,cellSize);
  List<StripedDataStreamer> s=new ArrayList<>(numAllBlocks);
  for (short i=0; i < numAllBlocks; i++) {
    StripedDataStreamer streamer=new StripedDataStreamer(stat,null,dfsClient,src,progress,checksum,cachingStrategy,byteArrayManager,i,stripeBlocks);
    if (favoredNodes != null && favoredNodes.length != 0) {
      streamer.setFavoredNodes(favoredNodes);
    }
    s.add(streamer);
  }
  streamers=Collections.unmodifiableList(s);
  refreshStreamer();
}
