{
  if (isClosed()) {
    final MultipleIOException.Builder b=new MultipleIOException.Builder();
    for (int i=0; i < streamers.size(); i++) {
      final StripedDataStreamer si=getStripedDataStreamer(i);
      try {
        si.getLastException().check(true);
      }
 catch (      IOException e) {
        b.add(e);
      }
    }
    final IOException ioe=b.build();
    if (ioe != null) {
      throw ioe;
    }
    return;
  }
  try {
    try {
      flushBuffer();
    }
 catch (    Exception e) {
      handleStreamerFailure("flushBuffer " + getCurrentStreamer(),e);
    }
    if (generateParityCellsForLastStripe()) {
      writeParityCells();
    }
    enqueueAllCurrentPackets();
    for (int i=0; i < numAllBlocks; i++) {
      final StripedDataStreamer s=setCurrentStreamer(i);
      if (!s.isFailed()) {
        try {
          if (s.getBytesCurBlock() > 0) {
            setCurrentPacketToEmpty();
          }
          flushInternal();
        }
 catch (        Exception e) {
          handleStreamerFailure("flushInternal " + s,e,false);
        }
      }
    }
    closeThreads(false);
    final ExtendedBlock lastBlock=coordinator.getBlockGroup();
    TraceScope scope=Trace.startSpan("completeFile",Sampler.NEVER);
    try {
      completeFile(lastBlock);
    }
  finally {
      scope.close();
    }
    dfsClient.endFileLease(fileId);
  }
 catch (  ClosedChannelException ignored) {
  }
 finally {
    setClosed();
  }
}
