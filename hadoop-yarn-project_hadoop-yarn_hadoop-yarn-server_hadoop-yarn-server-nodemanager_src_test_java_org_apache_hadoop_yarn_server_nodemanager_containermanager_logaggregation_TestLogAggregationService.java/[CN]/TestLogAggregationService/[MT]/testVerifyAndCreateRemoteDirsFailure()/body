{
  this.conf.set(YarnConfiguration.NM_LOG_DIRS,localLogDir.getAbsolutePath());
  this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,this.remoteRootLogDir.getAbsolutePath());
  LogAggregationService logAggregationService=spy(new LogAggregationService(dispatcher,this.context,this.delSrvc,super.dirsHandler));
  logAggregationService.init(this.conf);
  YarnRuntimeException e=new YarnRuntimeException("KABOOM!");
  doThrow(e).when(logAggregationService).verifyAndCreateRemoteLogDir(any(Configuration.class));
  logAggregationService.start();
  ApplicationId appId=BuilderUtils.newApplicationId(System.currentTimeMillis(),(int)(Math.random() * 1000));
  logAggregationService.handle(new LogHandlerAppStartedEvent(appId,this.user,null,ContainerLogsRetentionPolicy.AM_AND_FAILED_CONTAINERS_ONLY,this.acls));
  dispatcher.await();
  ApplicationEvent[] expectedEvents=new ApplicationEvent[]{new ApplicationEvent(appId,ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED)};
  checkEvents(appEventHandler,expectedEvents,false,"getType","getApplicationID","getDiagnostic");
  Mockito.reset(logAggregationService);
  ApplicationId appId2=BuilderUtils.newApplicationId(System.currentTimeMillis(),(int)(Math.random() * 1000));
  File appLogDir=new File(localLogDir,ConverterUtils.toString(appId2));
  appLogDir.mkdir();
  logAggregationService.handle(new LogHandlerAppStartedEvent(appId2,this.user,null,ContainerLogsRetentionPolicy.AM_AND_FAILED_CONTAINERS_ONLY,this.acls));
  dispatcher.await();
  expectedEvents=new ApplicationEvent[]{new ApplicationEvent(appId,ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED),new ApplicationEvent(appId2,ApplicationEventType.APPLICATION_LOG_HANDLING_INITED)};
  checkEvents(appEventHandler,expectedEvents,false,"getType","getApplicationID","getDiagnostic");
  logAggregationService.stop();
}
