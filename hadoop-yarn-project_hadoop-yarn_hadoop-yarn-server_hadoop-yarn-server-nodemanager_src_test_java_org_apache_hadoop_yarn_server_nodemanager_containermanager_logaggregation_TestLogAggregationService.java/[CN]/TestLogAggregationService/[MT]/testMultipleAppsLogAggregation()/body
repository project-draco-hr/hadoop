{
  this.conf.set(YarnConfiguration.NM_LOG_DIRS,localLogDir.getAbsolutePath());
  this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,this.remoteRootLogDir.getAbsolutePath());
  String[] fileNames=new String[]{"stdout","stderr","syslog"};
  LogAggregationService logAggregationService=new LogAggregationService(dispatcher,this.context,this.delSrvc,super.dirsHandler);
  logAggregationService.init(this.conf);
  logAggregationService.start();
  ApplicationId application1=BuilderUtils.newApplicationId(1234,1);
  File app1LogDir=new File(localLogDir,ConverterUtils.toString(application1));
  app1LogDir.mkdir();
  logAggregationService.handle(new LogHandlerAppStartedEvent(application1,this.user,null,this.acls));
  ApplicationAttemptId appAttemptId1=BuilderUtils.newApplicationAttemptId(application1,1);
  ContainerId container11=createContainer(appAttemptId1,1,ContainerType.APPLICATION_MASTER);
  writeContainerLogs(app1LogDir,container11,fileNames);
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container11,0));
  ApplicationId application2=BuilderUtils.newApplicationId(1234,2);
  ApplicationAttemptId appAttemptId2=BuilderUtils.newApplicationAttemptId(application2,1);
  File app2LogDir=new File(localLogDir,ConverterUtils.toString(application2));
  app2LogDir.mkdir();
  LogAggregationContext contextWithAMOnly=Records.newRecord(LogAggregationContext.class);
  contextWithAMOnly.setLogAggregationPolicyClassName(AMOnlyLogAggregationPolicy.class.getName());
  logAggregationService.handle(new LogHandlerAppStartedEvent(application2,this.user,null,this.acls,contextWithAMOnly));
  ContainerId container21=createContainer(appAttemptId2,1,ContainerType.APPLICATION_MASTER);
  writeContainerLogs(app2LogDir,container21,fileNames);
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container21,0));
  ContainerId container12=createContainer(appAttemptId1,2,ContainerType.TASK);
  writeContainerLogs(app1LogDir,container12,fileNames);
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container12,0));
  ApplicationId application3=BuilderUtils.newApplicationId(1234,3);
  ApplicationAttemptId appAttemptId3=BuilderUtils.newApplicationAttemptId(application3,1);
  File app3LogDir=new File(localLogDir,ConverterUtils.toString(application3));
  app3LogDir.mkdir();
  LogAggregationContext contextWithAMAndFailed=Records.newRecord(LogAggregationContext.class);
  contextWithAMAndFailed.setLogAggregationPolicyClassName(AMOrFailedContainerLogAggregationPolicy.class.getName());
  logAggregationService.handle(new LogHandlerAppStartedEvent(application3,this.user,null,this.acls,contextWithAMAndFailed));
  dispatcher.await();
  ApplicationEvent expectedInitEvents[]=new ApplicationEvent[]{new ApplicationEvent(application1,ApplicationEventType.APPLICATION_LOG_HANDLING_INITED),new ApplicationEvent(application2,ApplicationEventType.APPLICATION_LOG_HANDLING_INITED),new ApplicationEvent(application3,ApplicationEventType.APPLICATION_LOG_HANDLING_INITED)};
  checkEvents(appEventHandler,expectedInitEvents,false,"getType","getApplicationID");
  reset(appEventHandler);
  ContainerId container31=createContainer(appAttemptId3,1,ContainerType.APPLICATION_MASTER);
  writeContainerLogs(app3LogDir,container31,fileNames);
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container31,0));
  ContainerId container32=createContainer(appAttemptId3,2,ContainerType.TASK);
  writeContainerLogs(app3LogDir,container32,fileNames);
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container32,1));
  ContainerId container22=createContainer(appAttemptId2,2,ContainerType.TASK);
  writeContainerLogs(app2LogDir,container22,fileNames);
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container22,0));
  ContainerId container33=createContainer(appAttemptId3,3,ContainerType.TASK);
  writeContainerLogs(app3LogDir,container33,fileNames);
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container33,0));
  logAggregationService.handle(new LogHandlerAppFinishedEvent(application2));
  logAggregationService.handle(new LogHandlerAppFinishedEvent(application3));
  logAggregationService.handle(new LogHandlerAppFinishedEvent(application1));
  logAggregationService.stop();
  assertEquals(0,logAggregationService.getNumAggregators());
  verifyContainerLogs(logAggregationService,application1,new ContainerId[]{container11,container12},fileNames,3,false);
  verifyContainerLogs(logAggregationService,application2,new ContainerId[]{container21},fileNames,3,false);
  verifyContainerLogs(logAggregationService,application3,new ContainerId[]{container31,container32},fileNames,3,false);
  dispatcher.await();
  ApplicationEvent[] expectedFinishedEvents=new ApplicationEvent[]{new ApplicationEvent(application1,ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED),new ApplicationEvent(application2,ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED),new ApplicationEvent(application3,ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED)};
  checkEvents(appEventHandler,expectedFinishedEvents,false,"getType","getApplicationID");
}
