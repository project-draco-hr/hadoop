{
  Path appLogDir=logAggregationService.getRemoteAppLogDir(appId,this.user);
  RemoteIterator<FileStatus> nodeFiles=null;
  try {
    Path qualifiedLogDir=FileContext.getFileContext(this.conf).makeQualified(appLogDir);
    nodeFiles=FileContext.getFileContext(qualifiedLogDir.toUri(),this.conf).listStatus(appLogDir);
  }
 catch (  FileNotFoundException fnf) {
    Assert.fail("Should have log files");
  }
  Assert.assertTrue(nodeFiles.hasNext());
  FileStatus targetNodeFile=null;
  if (!multiLogs) {
    targetNodeFile=nodeFiles.next();
    Assert.assertTrue(targetNodeFile.getPath().getName().equals(LogAggregationUtils.getNodeString(logAggregationService.getNodeId())));
  }
 else {
    long fileCreateTime=0;
    while (nodeFiles.hasNext()) {
      FileStatus nodeFile=nodeFiles.next();
      if (!nodeFile.getPath().getName().contains(LogAggregationUtils.TMP_FILE_SUFFIX)) {
        long time=Long.parseLong(nodeFile.getPath().getName().split("_")[2]);
        if (time > fileCreateTime) {
          targetNodeFile=nodeFile;
          fileCreateTime=time;
        }
      }
    }
    String[] fileName=targetNodeFile.getPath().getName().split("_");
    Assert.assertTrue(fileName.length == 3);
    Assert.assertEquals(fileName[0] + ":" + fileName[1],logAggregationService.getNodeId().toString());
  }
  AggregatedLogFormat.LogReader reader=new AggregatedLogFormat.LogReader(this.conf,targetNodeFile.getPath());
  Assert.assertEquals(this.user,reader.getApplicationOwner());
  verifyAcls(reader.getApplicationAcls());
  try {
    Map<String,Map<String,String>> logMap=new HashMap<String,Map<String,String>>();
    DataInputStream valueStream;
    LogKey key=new LogKey();
    valueStream=reader.next(key);
    while (valueStream != null) {
      LOG.info("Found container " + key.toString());
      Map<String,String> perContainerMap=new HashMap<String,String>();
      logMap.put(key.toString(),perContainerMap);
      while (true) {
        try {
          ByteArrayOutputStream baos=new ByteArrayOutputStream();
          PrintStream ps=new PrintStream(baos);
          LogReader.readAContainerLogsForALogType(valueStream,ps);
          String writtenLines[]=baos.toString().split(System.getProperty("line.separator"));
          Assert.assertEquals("LogType:",writtenLines[0].substring(0,8));
          String fileType=writtenLines[0].substring(9);
          Assert.assertEquals("LogUploadTime:",writtenLines[1].substring(0,14));
          String fileUploadedTimeStr=writtenLines[1].substring(15);
          Assert.assertEquals("LogLength:",writtenLines[2].substring(0,10));
          String fileLengthStr=writtenLines[2].substring(11);
          long fileLength=Long.parseLong(fileLengthStr);
          Assert.assertEquals("Log Contents:",writtenLines[3].substring(0,13));
          String logContents=StringUtils.join(Arrays.copyOfRange(writtenLines,4,writtenLines.length),"\n");
          perContainerMap.put(fileType,logContents);
          LOG.info("LogType:" + fileType);
          LOG.info("LogUploadTime:" + fileUploadedTimeStr);
          LOG.info("LogLength:" + fileLength);
          LOG.info("Log Contents:\n" + perContainerMap.get(fileType));
        }
 catch (        EOFException eof) {
          break;
        }
      }
      key=new LogKey();
      valueStream=reader.next(key);
    }
    Assert.assertEquals(expectedContainerIds.length,logMap.size());
    for (    ContainerId cId : expectedContainerIds) {
      String containerStr=ConverterUtils.toString(cId);
      Map<String,String> thisContainerMap=logMap.remove(containerStr);
      Assert.assertEquals(numOfContainerLogs,thisContainerMap.size());
      for (      String fileType : logFiles) {
        String expectedValue=containerStr + " Hello " + fileType+ "!";
        LOG.info("Expected log-content : " + new String(expectedValue));
        String foundValue=thisContainerMap.remove(fileType);
        Assert.assertNotNull(cId + " " + fileType+ " not present in aggregated log-file!",foundValue);
        Assert.assertEquals(expectedValue,foundValue);
      }
      Assert.assertEquals(0,thisContainerMap.size());
    }
    Assert.assertEquals(0,logMap.size());
    return targetNodeFile.getPath().getName();
  }
  finally {
    reader.close();
  }
}
