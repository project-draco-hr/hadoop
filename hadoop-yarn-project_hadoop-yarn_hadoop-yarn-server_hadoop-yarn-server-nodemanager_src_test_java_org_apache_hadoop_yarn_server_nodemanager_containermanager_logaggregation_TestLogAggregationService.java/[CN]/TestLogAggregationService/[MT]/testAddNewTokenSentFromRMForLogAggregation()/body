{
  Configuration conf=new YarnConfiguration();
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(conf);
  ApplicationId application1=BuilderUtils.newApplicationId(1234,1);
  Application mockApp=mock(Application.class);
  when(mockApp.getContainers()).thenReturn(new HashMap<ContainerId,Container>());
  this.context.getApplications().put(application1,mockApp);
  @SuppressWarnings("resource") LogAggregationService logAggregationService=new LogAggregationService(dispatcher,this.context,this.delSrvc,super.dirsHandler);
  logAggregationService.init(this.conf);
  logAggregationService.start();
  logAggregationService.handle(new LogHandlerAppStartedEvent(application1,this.user,null,ContainerLogsRetentionPolicy.ALL_CONTAINERS,this.acls,Records.newRecord(LogAggregationContext.class)));
  Text userText1=new Text("user1");
  RMDelegationTokenIdentifier dtId1=new RMDelegationTokenIdentifier(userText1,new Text("renewer1"),userText1);
  final Token<RMDelegationTokenIdentifier> token1=new Token<RMDelegationTokenIdentifier>(dtId1.getBytes(),"password1".getBytes(),dtId1.getKind(),new Text("service1"));
  Credentials credentials=new Credentials();
  credentials.addToken(userText1,token1);
  this.context.getSystemCredentialsForApps().put(application1,credentials);
  logAggregationService.handle(new LogHandlerAppFinishedEvent(application1));
  final UserGroupInformation ugi=((AppLogAggregatorImpl)logAggregationService.getAppLogAggregators().get(application1)).getUgi();
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    public Boolean get(){
      boolean hasNewToken=false;
      for (      Token<?> token : ugi.getCredentials().getAllTokens()) {
        if (token.equals(token1)) {
          hasNewToken=true;
        }
      }
      return hasNewToken;
    }
  }
,1000,20000);
  logAggregationService.stop();
}
