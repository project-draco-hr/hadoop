{
  this.conf.set(YarnConfiguration.NM_LOG_DIRS,localLogDir.getAbsolutePath());
  this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,this.remoteRootLogDir.getAbsolutePath());
  DrainDispatcher dispatcher=createDispatcher();
  EventHandler<ApplicationEvent> appEventHandler=mock(EventHandler.class);
  dispatcher.register(ApplicationEventType.class,appEventHandler);
  LogAggregationService logAggregationService=spy(new LogAggregationService(dispatcher,this.context,this.delSrvc,super.dirsHandler));
  logAggregationService.init(this.conf);
  logAggregationService.start();
  ApplicationId appId=BuilderUtils.newApplicationId(System.currentTimeMillis(),(int)Math.random());
  doThrow(new YarnRuntimeException("KABOOM!")).when(logAggregationService).initAppAggregator(eq(appId),eq(user),any(Credentials.class),any(ContainerLogsRetentionPolicy.class),anyMap());
  logAggregationService.handle(new LogHandlerAppStartedEvent(appId,this.user,null,ContainerLogsRetentionPolicy.AM_AND_FAILED_CONTAINERS_ONLY,this.acls));
  dispatcher.await();
  ApplicationEvent expectedEvents[]=new ApplicationEvent[]{new ApplicationEvent(appId,ApplicationEventType.APPLICATION_LOG_HANDLING_FAILED)};
  checkEvents(appEventHandler,expectedEvents,false,"getType","getApplicationID","getDiagnostic");
  verify(logAggregationService,never()).closeFileSystems(any(UserGroupInformation.class));
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(BuilderUtils.newContainerId(4,1,1,1),0));
  dispatcher.await();
  logAggregationService.handle(new LogHandlerAppFinishedEvent(BuilderUtils.newApplicationId(1,5)));
  dispatcher.await();
}
