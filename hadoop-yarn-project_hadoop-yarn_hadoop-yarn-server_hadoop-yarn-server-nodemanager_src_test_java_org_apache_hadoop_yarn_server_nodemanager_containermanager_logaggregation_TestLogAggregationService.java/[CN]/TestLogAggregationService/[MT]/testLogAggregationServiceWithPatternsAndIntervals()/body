{
  LogAggregationContext logAggregationContext=Records.newRecord(LogAggregationContext.class);
  logAggregationContext.setRolledLogsIncludePattern("stdout");
  logAggregationContext.setIncludePattern("std_final");
  this.conf.set(YarnConfiguration.NM_LOG_DIRS,localLogDir.getAbsolutePath());
  this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,this.remoteRootLogDir.toURI().toString());
  this.conf.setLong(YarnConfiguration.NM_LOG_AGGREGATION_ROLL_MONITORING_INTERVAL_SECONDS,3600);
  this.conf.setLong(YarnConfiguration.DEBUG_NM_DELETE_DELAY_SEC,3600);
  ApplicationId application=BuilderUtils.newApplicationId(System.currentTimeMillis(),1);
  ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(application,1);
  ContainerId container=createContainer(appAttemptId,1,ContainerType.APPLICATION_MASTER);
  ConcurrentMap<ApplicationId,Application> maps=this.context.getApplications();
  Application app=mock(Application.class);
  maps.put(application,app);
  when(app.getContainers()).thenReturn(this.context.getContainers());
  LogAggregationService logAggregationService=new LogAggregationService(dispatcher,context,this.delSrvc,super.dirsHandler);
  logAggregationService.init(this.conf);
  logAggregationService.start();
  File appLogDir=new File(localLogDir,ConverterUtils.toString(application));
  appLogDir.mkdir();
  logAggregationService.handle(new LogHandlerAppStartedEvent(application,this.user,null,this.acls,logAggregationContext));
  String[] logFilesWithFinalLog=new String[]{"stdout","std_final"};
  writeContainerLogs(appLogDir,container,logFilesWithFinalLog);
  AppLogAggregatorImpl aggregator=(AppLogAggregatorImpl)logAggregationService.getAppLogAggregators().get(application);
  aggregator.doLogAggregationOutOfBand();
  Assert.assertTrue(waitAndCheckLogNum(logAggregationService,application,50,1,false,null));
  String[] logFiles=new String[]{"stdout"};
  verifyContainerLogs(logAggregationService,application,new ContainerId[]{container},logFiles,1,true);
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container,0));
  dispatcher.await();
  aggregator.doLogAggregationOutOfBand();
  Assert.assertTrue(waitAndCheckLogNum(logAggregationService,application,50,2,false,null));
  String[] logFinalLog=new String[]{"std_final"};
  verifyContainerLogs(logAggregationService,application,new ContainerId[]{container},logFinalLog,1,true);
  logAggregationService.handle(new LogHandlerAppFinishedEvent(application));
  logAggregationService.stop();
}
