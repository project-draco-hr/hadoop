{
  LogAggregationContext logAggregationContextWithIncludePatterns=Records.newRecord(LogAggregationContext.class);
  String includePattern="stdout|syslog";
  logAggregationContextWithIncludePatterns.setIncludePattern(includePattern);
  LogAggregationContext LogAggregationContextWithExcludePatterns=Records.newRecord(LogAggregationContext.class);
  String excludePattern="stdout|syslog";
  LogAggregationContextWithExcludePatterns.setExcludePattern(excludePattern);
  this.conf.set(YarnConfiguration.NM_LOG_DIRS,localLogDir.getAbsolutePath());
  this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,this.remoteRootLogDir.getAbsolutePath());
  ApplicationId application1=BuilderUtils.newApplicationId(1234,1);
  ApplicationId application2=BuilderUtils.newApplicationId(1234,2);
  ApplicationId application3=BuilderUtils.newApplicationId(1234,3);
  ApplicationId application4=BuilderUtils.newApplicationId(1234,4);
  Application mockApp=mock(Application.class);
  when(mockApp.getContainers()).thenReturn(new HashMap<ContainerId,Container>());
  this.context.getApplications().put(application1,mockApp);
  this.context.getApplications().put(application2,mockApp);
  this.context.getApplications().put(application3,mockApp);
  this.context.getApplications().put(application4,mockApp);
  LogAggregationService logAggregationService=new LogAggregationService(dispatcher,this.context,this.delSrvc,super.dirsHandler);
  logAggregationService.init(this.conf);
  logAggregationService.start();
  File appLogDir1=new File(localLogDir,application1.toString());
  appLogDir1.mkdir();
  logAggregationService.handle(new LogHandlerAppStartedEvent(application1,this.user,null,this.acls,logAggregationContextWithIncludePatterns));
  ApplicationAttemptId appAttemptId1=BuilderUtils.newApplicationAttemptId(application1,1);
  ContainerId container1=createContainer(appAttemptId1,1,ContainerType.APPLICATION_MASTER);
  writeContainerLogs(appLogDir1,container1,new String[]{"stdout","stderr","syslog"});
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container1,0));
  ApplicationAttemptId appAttemptId2=BuilderUtils.newApplicationAttemptId(application2,1);
  File app2LogDir=new File(localLogDir,application2.toString());
  app2LogDir.mkdir();
  LogAggregationContextWithExcludePatterns.setLogAggregationPolicyClassName(AMOnlyLogAggregationPolicy.class.getName());
  logAggregationService.handle(new LogHandlerAppStartedEvent(application2,this.user,null,this.acls,LogAggregationContextWithExcludePatterns));
  ContainerId container2=createContainer(appAttemptId2,1,ContainerType.APPLICATION_MASTER);
  writeContainerLogs(app2LogDir,container2,new String[]{"stdout","stderr","syslog"});
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container2,0));
  LogAggregationContext context1=Records.newRecord(LogAggregationContext.class);
  context1.setIncludePattern(".*.log");
  context1.setExcludePattern("sys.log|std.log");
  ApplicationAttemptId appAttemptId3=BuilderUtils.newApplicationAttemptId(application3,1);
  File app3LogDir=new File(localLogDir,application3.toString());
  app3LogDir.mkdir();
  context1.setLogAggregationPolicyClassName(AMOnlyLogAggregationPolicy.class.getName());
  logAggregationService.handle(new LogHandlerAppStartedEvent(application3,this.user,null,this.acls,context1));
  ContainerId container3=createContainer(appAttemptId3,1,ContainerType.APPLICATION_MASTER);
  writeContainerLogs(app3LogDir,container3,new String[]{"stdout","sys.log","std.log","out.log","err.log","log"});
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container3,0));
  LogAggregationContext context2=Records.newRecord(LogAggregationContext.class);
  context2.setIncludePattern("sys.log|std.log");
  context2.setExcludePattern("std.log");
  ApplicationAttemptId appAttemptId4=BuilderUtils.newApplicationAttemptId(application4,1);
  File app4LogDir=new File(localLogDir,application4.toString());
  app4LogDir.mkdir();
  context2.setLogAggregationPolicyClassName(AMOnlyLogAggregationPolicy.class.getName());
  logAggregationService.handle(new LogHandlerAppStartedEvent(application4,this.user,null,this.acls,context2));
  ContainerId container4=createContainer(appAttemptId4,1,ContainerType.APPLICATION_MASTER);
  writeContainerLogs(app4LogDir,container4,new String[]{"stdout","sys.log","std.log","out.log","err.log","log"});
  logAggregationService.handle(new LogHandlerContainerFinishedEvent(container4,0));
  dispatcher.await();
  ApplicationEvent expectedInitEvents[]=new ApplicationEvent[]{new ApplicationEvent(application1,ApplicationEventType.APPLICATION_LOG_HANDLING_INITED),new ApplicationEvent(application2,ApplicationEventType.APPLICATION_LOG_HANDLING_INITED),new ApplicationEvent(application3,ApplicationEventType.APPLICATION_LOG_HANDLING_INITED),new ApplicationEvent(application4,ApplicationEventType.APPLICATION_LOG_HANDLING_INITED)};
  checkEvents(appEventHandler,expectedInitEvents,false,"getType","getApplicationID");
  reset(appEventHandler);
  logAggregationService.handle(new LogHandlerAppFinishedEvent(application1));
  logAggregationService.handle(new LogHandlerAppFinishedEvent(application2));
  logAggregationService.handle(new LogHandlerAppFinishedEvent(application3));
  logAggregationService.handle(new LogHandlerAppFinishedEvent(application4));
  logAggregationService.stop();
  assertEquals(0,logAggregationService.getNumAggregators());
  String[] logFiles=new String[]{"stdout","syslog"};
  verifyContainerLogs(logAggregationService,application1,new ContainerId[]{container1},logFiles,2,false);
  logFiles=new String[]{"stderr"};
  verifyContainerLogs(logAggregationService,application2,new ContainerId[]{container2},logFiles,1,false);
  logFiles=new String[]{"out.log","err.log"};
  verifyContainerLogs(logAggregationService,application3,new ContainerId[]{container3},logFiles,2,false);
  logFiles=new String[]{"sys.log"};
  verifyContainerLogs(logAggregationService,application4,new ContainerId[]{container4},logFiles,1,false);
  dispatcher.await();
  ApplicationEvent[] expectedFinishedEvents=new ApplicationEvent[]{new ApplicationEvent(application1,ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED),new ApplicationEvent(application2,ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED),new ApplicationEvent(application3,ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED),new ApplicationEvent(application4,ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED)};
  checkEvents(appEventHandler,expectedFinishedEvents,false,"getType","getApplicationID");
}
