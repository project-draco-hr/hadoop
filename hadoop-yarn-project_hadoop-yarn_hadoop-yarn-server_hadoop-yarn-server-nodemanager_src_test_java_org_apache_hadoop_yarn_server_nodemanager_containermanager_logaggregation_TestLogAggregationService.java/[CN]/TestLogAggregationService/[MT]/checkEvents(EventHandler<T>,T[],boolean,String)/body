{
  Class<T> genericClass=(Class<T>)expectedEvents.getClass().getComponentType();
  ArgumentCaptor<T> eventCaptor=ArgumentCaptor.forClass(genericClass);
  verify(eventHandler,atLeast(0)).handle(eventCaptor.capture());
  List<T> actualEvents=eventCaptor.getAllValues();
  MultiException failures=new MultiException();
  try {
    assertEquals("expected events",expectedEvents.length,actualEvents.size());
  }
 catch (  Throwable e) {
    failures.add(e);
  }
  if (inOrder) {
    int len=Math.max(expectedEvents.length,actualEvents.size());
    for (int n=0; n < len; n++) {
      try {
        String expect=(n < expectedEvents.length) ? eventToString(expectedEvents[n],methods) : null;
        String actual=(n < actualEvents.size()) ? eventToString(actualEvents.get(n),methods) : null;
        assertEquals("event#" + n,expect,actual);
      }
 catch (      Throwable e) {
        failures.add(e);
      }
    }
  }
 else {
    Set<String> expectedSet=new HashSet<String>();
    for (    T expectedEvent : expectedEvents) {
      expectedSet.add(eventToString(expectedEvent,methods));
    }
    for (    T actualEvent : actualEvents) {
      try {
        String actual=eventToString(actualEvent,methods);
        assertTrue("unexpected event: " + actual,expectedSet.remove(actual));
      }
 catch (      Throwable e) {
        failures.add(e);
      }
    }
    for (    String expected : expectedSet) {
      try {
        Assert.fail("missing event: " + expected);
      }
 catch (      Throwable e) {
        failures.add(e);
      }
    }
  }
  failures.ifExceptionThrow();
}
