{
  StructureGenerator sg=new StructureGenerator();
  String[] args=new String[]{"-maxDepth","2","-minWidth","1","-maxWidth","2","-numOfFiles","2","-avgFileSize","1","-outDir",OUT_DIR,"-seed","1"};
  final int MAX_DEPTH=1;
  final int MIN_WIDTH=3;
  final int MAX_WIDTH=5;
  final int NUM_OF_FILES=7;
  final int AVG_FILE_SIZE=9;
  final int SEED=13;
  try {
    assertEquals(0,sg.run(args));
    BufferedReader in=new BufferedReader(new FileReader(DIR_STRUCTURE_FILE));
    assertEquals(DIR_STRUCTURE_FIRST_LINE,in.readLine());
    assertEquals(DIR_STRUCTURE_SECOND_LINE,in.readLine());
    assertEquals(null,in.readLine());
    in.close();
    in=new BufferedReader(new FileReader(FILE_STRUCTURE_FILE));
    assertEquals(FILE_STRUCTURE_FIRST_LINE,in.readLine());
    assertEquals(FILE_STRUCTURE_SECOND_LINE,in.readLine());
    assertEquals(null,in.readLine());
    in.close();
    String oldArg=args[MAX_DEPTH];
    args[MAX_DEPTH]="0";
    assertEquals(-1,sg.run(args));
    args[MAX_DEPTH]=oldArg;
    oldArg=args[MIN_WIDTH];
    args[MIN_WIDTH]="-1";
    assertEquals(-1,sg.run(args));
    args[MIN_WIDTH]=oldArg;
    oldArg=args[MAX_WIDTH];
    args[MAX_WIDTH]="-1";
    assertEquals(-1,sg.run(args));
    args[MAX_WIDTH]=oldArg;
    oldArg=args[NUM_OF_FILES];
    args[NUM_OF_FILES]="-1";
    assertEquals(-1,sg.run(args));
    args[NUM_OF_FILES]=oldArg;
    oldArg=args[NUM_OF_FILES];
    args[NUM_OF_FILES]="-1";
    assertEquals(-1,sg.run(args));
    args[NUM_OF_FILES]=oldArg;
    oldArg=args[AVG_FILE_SIZE];
    args[AVG_FILE_SIZE]="-1";
    assertEquals(-1,sg.run(args));
    args[AVG_FILE_SIZE]=oldArg;
    oldArg=args[SEED];
    args[SEED]="34.d4";
    assertEquals(-1,sg.run(args));
    args[SEED]=oldArg;
  }
  finally {
    DIR_STRUCTURE_FILE.delete();
    FILE_STRUCTURE_FILE.delete();
  }
}
