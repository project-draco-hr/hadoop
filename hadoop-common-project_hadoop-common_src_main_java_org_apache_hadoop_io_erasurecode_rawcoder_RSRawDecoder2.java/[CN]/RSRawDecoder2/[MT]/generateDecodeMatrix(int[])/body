{
  int i, j, r, p;
  byte s;
  byte[] tmpMatrix=new byte[getNumAllUnits() * getNumDataUnits()];
  for (i=0; i < getNumDataUnits(); i++) {
    r=validIndexes[i];
    for (j=0; j < getNumDataUnits(); j++) {
      tmpMatrix[getNumDataUnits() * i + j]=encodeMatrix[getNumDataUnits() * r + j];
    }
  }
  GF256.gfInvertMatrix(tmpMatrix,invertMatrix,getNumDataUnits());
  for (i=0; i < numErasedDataUnits; i++) {
    for (j=0; j < getNumDataUnits(); j++) {
      decodeMatrix[getNumDataUnits() * i + j]=invertMatrix[getNumDataUnits() * erasedIndexes[i] + j];
    }
  }
  for (p=numErasedDataUnits; p < erasedIndexes.length; p++) {
    for (i=0; i < getNumDataUnits(); i++) {
      s=0;
      for (j=0; j < getNumDataUnits(); j++) {
        s^=GF256.gfMul(invertMatrix[j * getNumDataUnits() + i],encodeMatrix[getNumDataUnits() * erasedIndexes[p] + j]);
      }
      decodeMatrix[getNumDataUnits() * p + i]=s;
    }
  }
}
