{
  ArrayList<RecoveredContainerState> containers=new ArrayList<RecoveredContainerState>();
  ArrayList<ContainerId> containersToRemove=new ArrayList<ContainerId>();
  LeveldbIterator iter=null;
  try {
    iter=new LeveldbIterator(db);
    iter.seek(bytes(CONTAINERS_KEY_PREFIX));
    while (iter.hasNext()) {
      Entry<byte[],byte[]> entry=iter.peekNext();
      String key=asString(entry.getKey());
      if (!key.startsWith(CONTAINERS_KEY_PREFIX)) {
        break;
      }
      int idEndPos=key.indexOf('/',CONTAINERS_KEY_PREFIX.length());
      if (idEndPos < 0) {
        throw new IOException("Unable to determine container in key: " + key);
      }
      ContainerId containerId=ContainerId.fromString(key.substring(CONTAINERS_KEY_PREFIX.length(),idEndPos));
      String keyPrefix=key.substring(0,idEndPos + 1);
      RecoveredContainerState rcs=loadContainerState(containerId,iter,keyPrefix);
      if (rcs.startRequest != null) {
        containers.add(rcs);
      }
 else {
        containersToRemove.add(containerId);
      }
    }
  }
 catch (  DBException e) {
    throw new IOException(e);
  }
 finally {
    if (iter != null) {
      iter.close();
    }
  }
  for (  ContainerId containerId : containersToRemove) {
    LOG.warn("Remove container " + containerId + " with incomplete records");
    try {
      removeContainer(containerId);
    }
 catch (    IOException e) {
      LOG.error("Unable to remove container " + containerId + " in store",e);
    }
  }
  return containers;
}
