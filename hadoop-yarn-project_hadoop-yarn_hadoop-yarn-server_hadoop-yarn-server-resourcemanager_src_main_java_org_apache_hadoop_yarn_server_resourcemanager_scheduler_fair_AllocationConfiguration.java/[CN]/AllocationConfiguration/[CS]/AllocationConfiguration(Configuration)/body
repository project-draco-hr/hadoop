{
  minQueueResources=new HashMap<String,Resource>();
  maxQueueResources=new HashMap<String,Resource>();
  queueWeights=new HashMap<String,ResourceWeights>();
  queueMaxApps=new HashMap<String,Integer>();
  userMaxApps=new HashMap<String,Integer>();
  queueMaxAMShares=new HashMap<String,Float>();
  userMaxAppsDefault=Integer.MAX_VALUE;
  queueMaxAppsDefault=Integer.MAX_VALUE;
  queueMaxResourcesDefault=Resources.unbounded();
  queueMaxAMShareDefault=0.5f;
  queueAcls=new HashMap<String,Map<QueueACL,AccessControlList>>();
  resAcls=new HashMap<String,Map<ReservationACL,AccessControlList>>();
  minSharePreemptionTimeouts=new HashMap<String,Long>();
  fairSharePreemptionTimeouts=new HashMap<String,Long>();
  fairSharePreemptionThresholds=new HashMap<String,Float>();
  schedulingPolicies=new HashMap<String,SchedulingPolicy>();
  defaultSchedulingPolicy=SchedulingPolicy.DEFAULT_POLICY;
  reservableQueues=new HashSet<>();
  configuredQueues=new HashMap<FSQueueType,Set<String>>();
  for (  FSQueueType queueType : FSQueueType.values()) {
    configuredQueues.put(queueType,new HashSet<String>());
  }
  placementPolicy=QueuePlacementPolicy.fromConfiguration(conf,configuredQueues);
  nonPreemptableQueues=new HashSet<String>();
}
