{
  MockRM rm1=new MockRM();
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",8 * GB);
  MockNM nm2=rm1.registerNode("h2:1234",8 * GB);
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"default");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMApp app2=rm1.submitApp(1 * GB,"app","user",null,"default");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm1);
  am1.allocate("*",4 * GB,1,new ArrayList<ContainerId>());
  am2.allocate("*",4 * GB,1,new ArrayList<ContainerId>());
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  LeafQueue leafQueue=(LeafQueue)cs.getQueue("default");
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  FiCaSchedulerApp schedulerApp2=cs.getApplicationAttempt(am2.getApplicationAttemptId());
  Assert.assertEquals(2,schedulerApp1.getLiveContainers().size());
  Assert.assertEquals(1,schedulerApp2.getLiveContainers().size());
  Assert.assertTrue(schedulerApp2.getReservedContainers().size() > 0);
  Assert.assertEquals(2 * GB,cs.getNode(nm1.getNodeId()).getUnallocatedResource().getMemorySize());
  Assert.assertNotNull(cs.getNode(nm1.getNodeId()).getReservedContainer());
  Assert.assertEquals(10 * GB,cs.getRootQueue().getQueueResourceUsage().getUsed().getMemorySize());
  Assert.assertEquals(4 * GB,cs.getRootQueue().getQueueResourceUsage().getReserved().getMemorySize());
  Assert.assertEquals(4 * GB,leafQueue.getQueueResourceUsage().getReserved().getMemorySize());
  am2.allocate("*",4 * GB,0,new ArrayList<ContainerId>());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  Assert.assertTrue(schedulerApp2.getReservedContainers().size() == 0);
  Assert.assertEquals(2 * GB,cs.getNode(nm1.getNodeId()).getUnallocatedResource().getMemorySize());
  Assert.assertNull(cs.getNode(nm1.getNodeId()).getReservedContainer());
  Assert.assertEquals(6 * GB,cs.getRootQueue().getQueueResourceUsage().getUsed().getMemorySize());
  Assert.assertEquals(0,cs.getRootQueue().getQueueResourceUsage().getReserved().getMemorySize());
  Assert.assertEquals(0,leafQueue.getQueueResourceUsage().getReserved().getMemorySize());
  rm1.close();
}
