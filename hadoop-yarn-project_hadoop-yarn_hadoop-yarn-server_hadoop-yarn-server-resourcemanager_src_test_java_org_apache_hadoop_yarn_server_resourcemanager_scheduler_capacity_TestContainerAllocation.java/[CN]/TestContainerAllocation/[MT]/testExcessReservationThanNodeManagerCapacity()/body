{
  @SuppressWarnings("resource") MockRM rm=new MockRM(conf);
  rm.start();
  MockNM nm1=rm.registerNode("127.0.0.1:1234",2 * GB,4);
  MockNM nm2=rm.registerNode("127.0.0.1:2234",3 * GB,4);
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(true);
  int waitCount=20;
  int size=rm.getRMContext().getRMNodes().size();
  while ((size=rm.getRMContext().getRMNodes().size()) != 2 && waitCount-- > 0) {
    LOG.info("Waiting for node managers to register : " + size);
    Thread.sleep(100);
  }
  Assert.assertEquals(2,rm.getRMContext().getRMNodes().size());
  RMApp app1=rm.submitApp(128);
  nm1.nodeHeartbeat(true);
  RMAppAttempt attempt1=app1.getCurrentAppAttempt();
  MockAM am1=rm.sendAMLaunched(attempt1.getAppAttemptId());
  am1.registerAppAttempt();
  LOG.info("sending container requests ");
  am1.addRequests(new String[]{"*"},2 * GB,1,1);
  AllocateResponse alloc1Response=am1.schedule();
  nm1.nodeHeartbeat(true);
  int waitCounter=20;
  LOG.info("heartbeating nm1");
  while (alloc1Response.getAllocatedContainers().size() < 1 && waitCounter-- > 0) {
    LOG.info("Waiting for containers to be created for app 1...");
    Thread.sleep(500);
    alloc1Response=am1.schedule();
  }
  LOG.info("received container : " + alloc1Response.getAllocatedContainers().size());
  Assert.assertTrue(alloc1Response.getAllocatedContainers().size() == 0);
  LOG.info("heartbeating nm2");
  waitCounter=20;
  nm2.nodeHeartbeat(true);
  while (alloc1Response.getAllocatedContainers().size() < 1 && waitCounter-- > 0) {
    LOG.info("Waiting for containers to be created for app 1...");
    Thread.sleep(500);
    alloc1Response=am1.schedule();
  }
  LOG.info("received container : " + alloc1Response.getAllocatedContainers().size());
  Assert.assertTrue(alloc1Response.getAllocatedContainers().size() == 1);
  rm.stop();
}
