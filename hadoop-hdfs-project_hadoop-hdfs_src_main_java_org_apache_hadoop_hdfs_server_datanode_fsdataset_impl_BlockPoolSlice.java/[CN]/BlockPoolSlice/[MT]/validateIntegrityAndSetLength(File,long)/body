{
  DataInputStream checksumIn=null;
  InputStream blockIn=null;
  try {
    final File metaFile=FsDatasetUtil.getMetaFile(blockFile,genStamp);
    long blockFileLen=blockFile.length();
    long metaFileLen=metaFile.length();
    int crcHeaderLen=DataChecksum.getChecksumHeaderSize();
    if (!blockFile.exists() || blockFileLen == 0 || !metaFile.exists() || metaFileLen < crcHeaderLen) {
      return 0;
    }
    checksumIn=new DataInputStream(new BufferedInputStream(new FileInputStream(metaFile),HdfsConstants.IO_FILE_BUFFER_SIZE));
    BlockMetadataHeader header=BlockMetadataHeader.readHeader(checksumIn);
    short version=header.getVersion();
    if (version != BlockMetadataHeader.VERSION) {
      FsDatasetImpl.LOG.warn("Wrong version (" + version + ") for metadata file "+ metaFile+ " ignoring ...");
    }
    DataChecksum checksum=header.getChecksum();
    int bytesPerChecksum=checksum.getBytesPerChecksum();
    int checksumSize=checksum.getChecksumSize();
    long numChunks=Math.min((blockFileLen + bytesPerChecksum - 1) / bytesPerChecksum,(metaFileLen - crcHeaderLen) / checksumSize);
    if (numChunks == 0) {
      return 0;
    }
    IOUtils.skipFully(checksumIn,(numChunks - 1) * checksumSize);
    blockIn=new FileInputStream(blockFile);
    long lastChunkStartPos=(numChunks - 1) * bytesPerChecksum;
    IOUtils.skipFully(blockIn,lastChunkStartPos);
    int lastChunkSize=(int)Math.min(bytesPerChecksum,blockFileLen - lastChunkStartPos);
    byte[] buf=new byte[lastChunkSize + checksumSize];
    checksumIn.readFully(buf,lastChunkSize,checksumSize);
    IOUtils.readFully(blockIn,buf,0,lastChunkSize);
    checksum.update(buf,0,lastChunkSize);
    long validFileLength;
    if (checksum.compare(buf,lastChunkSize)) {
      validFileLength=lastChunkStartPos + lastChunkSize;
    }
 else {
      validFileLength=lastChunkStartPos;
    }
    if (blockFile.length() > validFileLength) {
      RandomAccessFile blockRAF=new RandomAccessFile(blockFile,"rw");
      try {
        blockRAF.setLength(validFileLength);
      }
  finally {
        blockRAF.close();
      }
    }
    return validFileLength;
  }
 catch (  IOException e) {
    FsDatasetImpl.LOG.warn(e);
    return 0;
  }
 finally {
    IOUtils.closeStream(checksumIn);
    IOUtils.closeStream(blockIn);
  }
}
