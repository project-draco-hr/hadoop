{
  this.bpid=bpid;
  this.volume=volume;
  this.currentDir=new File(bpDir,DataStorage.STORAGE_DIR_CURRENT);
  this.finalizedDir=new File(currentDir,DataStorage.STORAGE_DIR_FINALIZED);
  this.lazypersistDir=new File(currentDir,DataStorage.STORAGE_DIR_LAZY_PERSIST);
  if (!this.finalizedDir.exists()) {
    if (!this.finalizedDir.mkdirs()) {
      throw new IOException("Failed to mkdirs " + this.finalizedDir);
    }
  }
  FileUtil.fullyDelete(lazypersistDir);
  if (!this.lazypersistDir.exists()) {
    if (!this.lazypersistDir.mkdirs()) {
      throw new IOException("Failed to mkdirs " + this.lazypersistDir);
    }
  }
  this.tmpDir=new File(bpDir,DataStorage.STORAGE_DIR_TMP);
  if (tmpDir.exists()) {
    FileUtil.fullyDelete(tmpDir);
  }
  this.rbwDir=new File(currentDir,DataStorage.STORAGE_DIR_RBW);
  if (!rbwDir.mkdirs()) {
    if (!rbwDir.isDirectory()) {
      throw new IOException("Mkdirs failed to create " + rbwDir.toString());
    }
  }
  if (!tmpDir.mkdirs()) {
    if (!tmpDir.isDirectory()) {
      throw new IOException("Mkdirs failed to create " + tmpDir.toString());
    }
  }
  this.dfsUsage=new DU(bpDir,conf,loadDfsUsed());
  this.dfsUsage.start();
  ShutdownHookManager.get().addShutdownHook(new Runnable(){
    @Override public void run(){
      if (!dfsUsedSaved) {
        saveDfsUsed();
      }
    }
  }
,SHUTDOWN_HOOK_PRIORITY);
}
