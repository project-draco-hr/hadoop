{
  this.bpid=bpid;
  this.volume=volume;
  this.currentDir=new File(bpDir,DataStorage.STORAGE_DIR_CURRENT);
  final File finalizedDir=new File(currentDir,DataStorage.STORAGE_DIR_FINALIZED);
  this.tmpDir=new File(bpDir,DataStorage.STORAGE_DIR_TMP);
  if (tmpDir.exists()) {
    FileUtil.fullyDelete(tmpDir);
  }
  this.rbwDir=new File(currentDir,DataStorage.STORAGE_DIR_RBW);
  final boolean supportAppends=conf.getBoolean(DFSConfigKeys.DFS_SUPPORT_APPEND_KEY,DFSConfigKeys.DFS_SUPPORT_APPEND_DEFAULT);
  if (rbwDir.exists() && !supportAppends) {
    FileUtil.fullyDelete(rbwDir);
  }
  final int maxBlocksPerDir=conf.getInt(DFSConfigKeys.DFS_DATANODE_NUMBLOCKS_KEY,DFSConfigKeys.DFS_DATANODE_NUMBLOCKS_DEFAULT);
  this.finalizedDir=new LDir(finalizedDir,maxBlocksPerDir);
  if (!rbwDir.mkdirs()) {
    if (!rbwDir.isDirectory()) {
      throw new IOException("Mkdirs failed to create " + rbwDir.toString());
    }
  }
  if (!tmpDir.mkdirs()) {
    if (!tmpDir.isDirectory()) {
      throw new IOException("Mkdirs failed to create " + tmpDir.toString());
    }
  }
  this.dfsUsage=new DU(bpDir,conf);
  this.dfsUsage.start();
}
