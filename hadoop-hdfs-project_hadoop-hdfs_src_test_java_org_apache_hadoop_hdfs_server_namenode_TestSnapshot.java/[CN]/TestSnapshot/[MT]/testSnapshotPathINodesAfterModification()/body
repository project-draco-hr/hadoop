{
  String[] names=INode.getPathNames(file1.toString());
  byte[][] components=INode.getPathComponents(names);
  INodesInPath nodesInPath=fsdir.rootDir.getExistingPathINodes(components,components.length,false);
  INode[] inodes=nodesInPath.getINodes();
  assertEquals(inodes.length,components.length);
  assertEquals(inodes[components.length - 1].getFullPathName(),file1.toString());
  hdfs.allowSnapshot(sub1.toString());
  hdfs.createSnapshot("s1",sub1.toString());
  DFSTestUtil.appendFile(hdfs,file1,"the content for appending");
  INodesInPath newNodesInPath=fsdir.rootDir.getExistingPathINodes(components,components.length,false);
  INode[] newInodes=newNodesInPath.getINodes();
  assertEquals(newInodes.length,components.length);
  assertEquals(newInodes[components.length - 1].getFullPathName(),file1.toString());
  Assert.assertFalse(inodes[components.length - 1].getModificationTime() == newInodes[components.length - 1].getModificationTime());
  String snapshotPath=sub1.toString() + "/.snapshot/s1/file1";
  names=INode.getPathNames(snapshotPath);
  components=INode.getPathComponents(names);
  INodesInPath ssNodesInPath=fsdir.rootDir.getExistingPathINodes(components,components.length,false);
  INode[] ssInodes=ssNodesInPath.getINodes();
  assertEquals(ssInodes.length,components.length - 1);
  assertTrue(ssNodesInPath.isSnapshot());
  INode snapshotFileNode=ssInodes[ssInodes.length - 1];
  assertEquals(snapshotFileNode.getLocalName(),file1.getName());
  assertTrue(snapshotFileNode instanceof INodeFileSnapshot);
  assertEquals(inodes[inodes.length - 1].getModificationTime(),ssInodes[ssInodes.length - 1].getModificationTime());
}
