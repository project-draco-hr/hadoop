{
  r.setSeed(seed.hashCode());
  if (className.equals(IntWritable.class.getName())) {
    return new IntWritable(BytesUtil.toInt(seed));
  }
 else   if (className.equals(FloatWritable.class.getName())) {
    return new FloatWritable(r.nextFloat());
  }
 else   if (className.equals(DoubleWritable.class.getName())) {
    return new DoubleWritable(r.nextDouble());
  }
 else   if (className.equals(LongWritable.class.getName())) {
    return new LongWritable(BytesUtil.toLong(seed));
  }
 else   if (className.equals(VIntWritable.class.getName())) {
    return new VIntWritable(BytesUtil.toInt(seed));
  }
 else   if (className.equals(VLongWritable.class.getName())) {
    return new VLongWritable(BytesUtil.toLong(seed));
  }
 else   if (className.equals(BooleanWritable.class.getName())) {
    return new BooleanWritable(seed[0] % 2 == 1 ? true : false);
  }
 else   if (className.equals(Text.class.getName())) {
    return new Text(BytesUtil.toStringBinary(seed));
  }
 else   if (className.equals(ByteWritable.class.getName())) {
    return new ByteWritable(seed.length > 0 ? seed[0] : 0);
  }
 else   if (className.equals(BytesWritable.class.getName())) {
    return new BytesWritable(seed);
  }
 else   if (className.equals(UTF8.class.getName())) {
    return new UTF8(BytesUtil.toStringBinary(seed));
  }
 else   if (className.equals(MockValueClass.class.getName())) {
    return new MockValueClass(seed);
  }
 else {
    return null;
  }
}
