{
  Configuration conf=new Configuration();
  conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_HA_LOGROLL_PERIOD_KEY,Integer.MAX_VALUE);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(1).build();
  FileSystem fs=null;
  try {
    cluster.waitActive();
    FSNamesystem nn0=cluster.getNamesystem(0);
    FSNamesystem nn1=cluster.getNamesystem(1);
    cluster.transitionToActive(0);
    fs=HATestUtil.configureFailoverFs(cluster,conf);
    DFSTestUtil.createFile(fs,new Path("/testHAInodeCount1"),10,(short)1,1L);
    DFSTestUtil.createFile(fs,new Path("/testHAInodeCount2"),10,(short)1,1L);
    DFSTestUtil.createFile(fs,new Path("/testHAInodeCount3"),10,(short)1,1L);
    DFSTestUtil.createFile(fs,new Path("/testHAInodeCount4"),10,(short)1,1L);
    assertEquals(5,nn0.getFilesTotal());
    assertEquals(1,nn1.getFilesTotal());
    ((DistributedFileSystem)fs).setSafeMode(SafeModeAction.SAFEMODE_ENTER);
    ((DistributedFileSystem)fs).saveNamespace();
    cluster.transitionToStandby(0);
    cluster.transitionToActive(1);
    cluster.restartNameNode(0);
    assertEquals(nn0.getHAState(),"standby");
    nn0=cluster.getNamesystem(0);
    assertEquals(5,nn0.getFilesTotal());
  }
  finally {
    IOUtils.cleanup(LOG,fs);
    cluster.shutdown();
  }
}
