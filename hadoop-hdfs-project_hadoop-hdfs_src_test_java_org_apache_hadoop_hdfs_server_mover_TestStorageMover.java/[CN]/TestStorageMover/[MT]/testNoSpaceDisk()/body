{
  LOG.info("testNoSpaceDisk");
  final PathPolicyMap pathPolicyMap=new PathPolicyMap(0);
  final NamespaceScheme nsScheme=pathPolicyMap.newNamespaceScheme();
  Configuration conf=new Configuration(DEFAULT_CONF);
  final ClusterScheme clusterScheme=new ClusterScheme(conf,NUM_DATANODES,REPL,genStorageTypes(NUM_DATANODES),null);
  final MigrationTest test=new MigrationTest(clusterScheme,nsScheme);
  try {
    test.runBasicTest(false);
    final short replication=3;
    for (int i=0; i < 2; i++) {
      final Path p=new Path(pathPolicyMap.hot,"file" + i);
      DFSTestUtil.createFile(test.dfs,p,BLOCK_SIZE,replication,0L);
      waitForAllReplicas(replication,p,test.dfs);
    }
    for (    DataNode dn : test.cluster.getDataNodes()) {
      setVolumeFull(dn,StorageType.DISK);
      DataNodeTestUtils.triggerHeartbeat(dn);
    }
    final Path file0=new Path(pathPolicyMap.hot,"file0");
    final Replication r=test.getReplication(file0);
    final short newReplication=(short)5;
    test.dfs.setReplication(file0,newReplication);
    Thread.sleep(10000);
    test.verifyReplication(file0,r.disk,newReplication - r.disk);
    final Path p=new Path(pathPolicyMap.cold,"foo");
    DFSTestUtil.createFile(test.dfs,p,BLOCK_SIZE,replication,0L);
    test.verifyReplication(p,0,replication);
    test.dfs.setReplication(p,newReplication);
    Thread.sleep(10000);
    test.verifyReplication(p,0,newReplication);
    final Path file1=new Path(pathPolicyMap.hot,"file1");
    test.dfs.rename(file1,pathPolicyMap.warm);
    test.migrate(ExitStatus.NO_MOVE_BLOCK);
    test.verifyFile(new Path(pathPolicyMap.warm,"file1"),WARM.getId());
  }
  finally {
    test.shutdownCluster();
  }
}
