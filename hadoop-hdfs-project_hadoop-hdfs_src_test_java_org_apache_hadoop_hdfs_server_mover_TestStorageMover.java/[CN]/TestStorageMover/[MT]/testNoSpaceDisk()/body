{
  LOG.info("testNoSpaceDisk");
  final PathPolicyMap pathPolicyMap=new PathPolicyMap(0);
  final NamespaceScheme nsScheme=pathPolicyMap.newNamespaceScheme();
  final long diskCapacity=(6 + HdfsConstants.MIN_BLOCKS_FOR_WRITE) * BLOCK_SIZE;
  final long archiveCapacity=100 * BLOCK_SIZE;
  final long[][] capacities=genCapacities(NUM_DATANODES,1,1,diskCapacity,archiveCapacity);
  Configuration conf=new Configuration(DEFAULT_CONF);
  final ClusterScheme clusterScheme=new ClusterScheme(conf,NUM_DATANODES,REPL,genStorageTypes(NUM_DATANODES,1,1),capacities);
  final MigrationTest test=new MigrationTest(clusterScheme,nsScheme);
  try {
    test.runBasicTest(false);
    final short replication=3;
{
      int hotFileCount=0;
      try {
        for (; ; hotFileCount++) {
          final Path p=new Path(pathPolicyMap.hot,"file" + hotFileCount);
          DFSTestUtil.createFile(test.dfs,p,BLOCK_SIZE,replication,0L);
        }
      }
 catch (      IOException e) {
        LOG.info("Expected: hotFileCount=" + hotFileCount,e);
      }
      Assert.assertTrue(hotFileCount >= 1);
    }
{
      int hotFileCount_r1=0;
      try {
        for (; ; hotFileCount_r1++) {
          final Path p=new Path(pathPolicyMap.hot,"file_r1_" + hotFileCount_r1);
          DFSTestUtil.createFile(test.dfs,p,BLOCK_SIZE,(short)1,0L);
        }
      }
 catch (      IOException e) {
        LOG.info("Expected: hotFileCount_r1=" + hotFileCount_r1,e);
      }
    }
{
      final Path file0=new Path(pathPolicyMap.hot,"file0");
      final Replication r=test.getReplication(file0);
      final short newReplication=(short)5;
      test.dfs.setReplication(file0,newReplication);
      Thread.sleep(10000);
      test.verifyReplication(file0,r.disk,newReplication - r.disk);
    }
{
      final Path p=new Path(pathPolicyMap.cold,"foo");
      DFSTestUtil.createFile(test.dfs,p,BLOCK_SIZE,replication,0L);
      test.verifyReplication(p,0,replication);
      final short newReplication=5;
      test.dfs.setReplication(p,newReplication);
      Thread.sleep(10000);
      test.verifyReplication(p,0,newReplication);
    }
{
      final Path file1=new Path(pathPolicyMap.hot,"file1");
      test.dfs.rename(file1,pathPolicyMap.warm);
      test.migrate();
      test.verifyFile(new Path(pathPolicyMap.warm,"file1"),WARM.getId());
    }
  }
  finally {
    test.shutdownCluster();
  }
}
