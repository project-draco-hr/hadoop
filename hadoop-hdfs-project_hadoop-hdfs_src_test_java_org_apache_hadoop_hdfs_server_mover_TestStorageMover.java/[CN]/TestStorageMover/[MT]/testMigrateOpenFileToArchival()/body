{
  LOG.info("testMigrateOpenFileToArchival");
  final Path fooDir=new Path("/foo");
  Map<Path,BlockStoragePolicy> policyMap=Maps.newHashMap();
  policyMap.put(fooDir,COLD);
  NamespaceScheme nsScheme=new NamespaceScheme(Arrays.asList(fooDir),null,BLOCK_SIZE,null,policyMap);
  ClusterScheme clusterScheme=new ClusterScheme(DEFAULT_CONF,NUM_DATANODES,REPL,genStorageTypes(NUM_DATANODES),null);
  MigrationTest test=new MigrationTest(clusterScheme,nsScheme);
  test.setupCluster();
  banner("writing to file /foo/bar");
  final Path barFile=new Path(fooDir,"bar");
  DFSTestUtil.createFile(test.dfs,barFile,BLOCK_SIZE,(short)1,0L);
  FSDataOutputStream out=test.dfs.append(barFile);
  out.writeBytes("hello, ");
  ((DFSOutputStream)out.getWrappedStream()).hsync();
  try {
    banner("start data migration");
    test.setStoragePolicy();
    test.migrate();
    LocatedBlocks lbs=test.dfs.getClient().getLocatedBlocks(barFile.toString(),BLOCK_SIZE);
    LOG.info("Locations: " + lbs);
    List<LocatedBlock> blks=lbs.getLocatedBlocks();
    Assert.assertEquals(1,blks.size());
    Assert.assertEquals(1,blks.get(0).getLocations().length);
    banner("finish the migration, continue writing");
    out.writeBytes("world!");
    ((DFSOutputStream)out.getWrappedStream()).hsync();
    IOUtils.cleanup(LOG,out);
    lbs=test.dfs.getClient().getLocatedBlocks(barFile.toString(),BLOCK_SIZE);
    LOG.info("Locations: " + lbs);
    blks=lbs.getLocatedBlocks();
    Assert.assertEquals(1,blks.size());
    Assert.assertEquals(1,blks.get(0).getLocations().length);
    banner("finish writing, starting reading");
    FSDataInputStream in=test.dfs.open(barFile);
    byte[] buf=new byte[13];
    in.readFully(BLOCK_SIZE,buf,0,buf.length);
    IOUtils.cleanup(LOG,in);
    Assert.assertEquals("hello, world!",new String(buf));
  }
  finally {
    test.shutdownCluster();
  }
}
