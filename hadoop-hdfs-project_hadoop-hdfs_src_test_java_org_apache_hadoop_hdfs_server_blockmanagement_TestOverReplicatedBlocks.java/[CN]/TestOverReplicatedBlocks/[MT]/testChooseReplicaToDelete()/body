{
  MiniDFSCluster cluster=null;
  FileSystem fs=null;
  try {
    Configuration conf=new HdfsConfiguration();
    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,SMALL_BLOCK_SIZE);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    fs=cluster.getFileSystem();
    final FSNamesystem namesystem=cluster.getNamesystem();
    conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,300);
    cluster.startDataNodes(conf,1,true,null,null,null);
    DataNode lastDN=cluster.getDataNodes().get(3);
    DatanodeRegistration dnReg=DataNodeTestUtils.getDNRegistrationForBP(lastDN,namesystem.getBlockPoolId());
    String lastDNid=dnReg.getDatanodeUuid();
    final Path fileName=new Path("/foo2");
    DFSTestUtil.createFile(fs,fileName,SMALL_FILE_LENGTH,(short)4,0L);
    DFSTestUtil.waitReplication(fs,fileName,(short)4);
    DatanodeDescriptor nodeInfo=null;
    long lastHeartbeat=0;
    long waitTime=DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT * 1000 * (DFSConfigKeys.DFS_NAMENODE_TOLERATE_HEARTBEAT_MULTIPLIER_DEFAULT + 1);
    do {
      nodeInfo=namesystem.getBlockManager().getDatanodeManager().getDatanode(dnReg);
      lastHeartbeat=nodeInfo.getLastUpdate();
    }
 while (now() - lastHeartbeat < waitTime);
    fs.setReplication(fileName,(short)3);
    BlockLocation locs[]=fs.getFileBlockLocations(fs.getFileStatus(fileName),0,Long.MAX_VALUE);
    namesystem.readLock();
    Collection<Block> dnBlocks=namesystem.getBlockManager().excessReplicateMap.get(lastDNid);
    assertEquals("Replicas on node " + lastDNid + " should have been deleted",SMALL_FILE_LENGTH / SMALL_BLOCK_SIZE,dnBlocks.size());
    namesystem.readUnlock();
    for (    BlockLocation location : locs)     assertEquals("Block should still have 4 replicas",4,location.getNames().length);
  }
  finally {
    if (fs != null)     fs.close();
    if (cluster != null)     cluster.shutdown();
  }
}
