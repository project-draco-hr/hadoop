{
  if (!isProcfsBasedTreeAvailable()) {
    return;
  }
  JobConf fConf=new JobConf();
  fConf.setInt(TTConfig.TT_MEMORY_MANAGER_MONITORING_INTERVAL,100);
  LinuxResourceCalculatorPlugin memoryCalculatorPlugin=new LinuxResourceCalculatorPlugin();
  long totalPhysicalMemory=memoryCalculatorPlugin.getPhysicalMemorySize();
  long reservedPhysicalMemory=totalPhysicalMemory / (1024 * 1024) + 1;
  fConf.setLong(TTConfig.TT_RESERVED_PHYSCIALMEMORY_MB,reservedPhysicalMemory);
  long maxRssMemoryAllowedForAllTasks=totalPhysicalMemory - reservedPhysicalMemory * 1024 * 1024L;
  Pattern physicalMemoryOverLimitPattern=Pattern.compile("Killing one of the memory-consuming tasks - .*" + ", as the cumulative RSS memory usage of all the tasks on " + "the TaskTracker exceeds physical memory limit " + maxRssMemoryAllowedForAllTasks + ".");
  startCluster(fConf);
  Matcher mat=null;
  JobConf conf=new JobConf(miniMRCluster.createJobConf());
  conf.setLong(MRJobConfig.MAP_MEMORY_PHYSICAL_MB,2 * 1024L);
  conf.setLong(MRJobConfig.REDUCE_MEMORY_PHYSICAL_MB,2 * 1024L);
  JobClient jClient=new JobClient(conf);
  SleepJob sleepJob=new SleepJob();
  sleepJob.setConf(conf);
  Job job=sleepJob.createJob(1,1,100000,1,100000,1);
  job.submit();
  boolean TTOverFlowMsgPresent=false;
  while (true) {
    List<TaskReport> allTaskReports=new ArrayList<TaskReport>();
    allTaskReports.addAll(Arrays.asList(jClient.getSetupTaskReports(JobID.downgrade(job.getJobID()))));
    allTaskReports.addAll(Arrays.asList(jClient.getMapTaskReports(JobID.downgrade(job.getJobID()))));
    for (    TaskReport tr : allTaskReports) {
      String[] diag=tr.getDiagnostics();
      for (      String str : diag) {
        mat=physicalMemoryOverLimitPattern.matcher(str);
        if (mat.find()) {
          TTOverFlowMsgPresent=true;
        }
      }
    }
    if (TTOverFlowMsgPresent) {
      break;
    }
    assertFalse("Job should not finish successfully",job.isSuccessful());
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
  }
  job.killJob();
}
