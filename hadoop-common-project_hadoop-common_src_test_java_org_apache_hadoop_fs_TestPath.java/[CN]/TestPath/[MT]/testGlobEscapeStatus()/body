{
  if (Shell.WINDOWS)   return;
  FileSystem lfs=FileSystem.getLocal(new Configuration());
  Path testRoot=lfs.makeQualified(new Path(System.getProperty("test.build.data","test/build/data"),"testPathGlob"));
  lfs.delete(testRoot,true);
  lfs.mkdirs(testRoot);
  assertTrue(lfs.isDirectory(testRoot));
  lfs.setWorkingDirectory(testRoot);
  Path paths[]=new Path[]{new Path(testRoot,"*/f"),new Path(testRoot,"d1/f"),new Path(testRoot,"d2/f")};
  Arrays.sort(paths);
  for (  Path p : paths) {
    lfs.create(p).close();
    assertTrue(lfs.exists(p));
  }
  FileStatus stats[]=lfs.listStatus(new Path(testRoot,"*"));
  assertEquals(1,stats.length);
  assertEquals(new Path(testRoot,"*/f"),stats[0].getPath());
  stats=lfs.globStatus(new Path(testRoot,"*"));
  Arrays.sort(stats);
  Path parentPaths[]=new Path[paths.length];
  for (int i=0; i < paths.length; i++) {
    parentPaths[i]=paths[i].getParent();
  }
  assertEquals(mergeStatuses(parentPaths),mergeStatuses(stats));
  stats=lfs.globStatus(new Path(testRoot,"\\*"));
  assertEquals(1,stats.length);
  assertEquals(new Path(testRoot,"*"),stats[0].getPath());
  stats=lfs.globStatus(new Path(testRoot,"*/f"));
  assertEquals(paths.length,stats.length);
  assertEquals(mergeStatuses(paths),mergeStatuses(stats));
  stats=lfs.globStatus(new Path(testRoot,"\\*/f"));
  assertEquals(1,stats.length);
  assertEquals(new Path(testRoot,"*/f"),stats[0].getPath());
  stats=lfs.globStatus(new Path(testRoot,"\\*/*"));
  assertEquals(1,stats.length);
  assertEquals(new Path(testRoot,"*/f"),stats[0].getPath());
}
