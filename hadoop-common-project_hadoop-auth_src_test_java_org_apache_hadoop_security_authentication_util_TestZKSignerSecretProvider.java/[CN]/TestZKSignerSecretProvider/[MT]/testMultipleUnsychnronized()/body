{
  long rolloverFrequency=15 * 1000;
  long seedA=System.currentTimeMillis();
  Random rand=new Random(seedA);
  byte[] secretA2=Long.toString(rand.nextLong()).getBytes();
  byte[] secretA1=Long.toString(rand.nextLong()).getBytes();
  byte[] secretA3=Long.toString(rand.nextLong()).getBytes();
  long seedB=System.currentTimeMillis() + rand.nextLong();
  rand=new Random(seedB);
  byte[] secretB2=Long.toString(rand.nextLong()).getBytes();
  byte[] secretB1=Long.toString(rand.nextLong()).getBytes();
  byte[] secretB3=Long.toString(rand.nextLong()).getBytes();
  ZKSignerSecretProvider secretProviderA=new ZKSignerSecretProvider(seedA);
  ZKSignerSecretProvider secretProviderB=new ZKSignerSecretProvider(seedB);
  Properties config=new Properties();
  config.setProperty(ZKSignerSecretProvider.ZOOKEEPER_CONNECTION_STRING,zkServer.getConnectString());
  config.setProperty(ZKSignerSecretProvider.ZOOKEEPER_PATH,"/secret");
  try {
    secretProviderA.init(config,getDummyServletContext(),rolloverFrequency);
    byte[] currentSecretA=secretProviderA.getCurrentSecret();
    byte[][] allSecretsA=secretProviderA.getAllSecrets();
    Assert.assertArrayEquals(secretA1,currentSecretA);
    Assert.assertEquals(2,allSecretsA.length);
    Assert.assertArrayEquals(secretA1,allSecretsA[0]);
    Assert.assertNull(allSecretsA[1]);
    Thread.sleep((rolloverFrequency + 2000));
    currentSecretA=secretProviderA.getCurrentSecret();
    allSecretsA=secretProviderA.getAllSecrets();
    Assert.assertArrayEquals(secretA2,currentSecretA);
    Assert.assertEquals(2,allSecretsA.length);
    Assert.assertArrayEquals(secretA2,allSecretsA[0]);
    Assert.assertArrayEquals(secretA1,allSecretsA[1]);
    Thread.sleep((rolloverFrequency / 5));
    secretProviderB.init(config,getDummyServletContext(),rolloverFrequency);
    byte[] currentSecretB=secretProviderB.getCurrentSecret();
    byte[][] allSecretsB=secretProviderB.getAllSecrets();
    Assert.assertArrayEquals(secretA2,currentSecretB);
    Assert.assertEquals(2,allSecretsA.length);
    Assert.assertArrayEquals(secretA2,allSecretsB[0]);
    Assert.assertArrayEquals(secretA1,allSecretsB[1]);
    Thread.sleep((rolloverFrequency));
    currentSecretA=secretProviderA.getCurrentSecret();
    allSecretsA=secretProviderA.getAllSecrets();
    currentSecretB=secretProviderB.getCurrentSecret();
    allSecretsB=secretProviderB.getAllSecrets();
    Assert.assertArrayEquals(currentSecretA,currentSecretB);
    Assert.assertEquals(2,allSecretsA.length);
    Assert.assertEquals(2,allSecretsB.length);
    Assert.assertArrayEquals(allSecretsA[0],allSecretsB[0]);
    Assert.assertArrayEquals(allSecretsA[1],allSecretsB[1]);
    if (Arrays.equals(secretA3,currentSecretA)) {
      Assert.assertArrayEquals(secretA3,allSecretsA[0]);
    }
 else     if (Arrays.equals(secretB3,currentSecretB)) {
      Assert.assertArrayEquals(secretB3,allSecretsA[0]);
    }
 else {
      Assert.fail("It appears that they all agreed on the same secret, but " + "not one of the secrets they were supposed to");
    }
  }
  finally {
    secretProviderB.destroy();
    secretProviderA.destroy();
  }
}
