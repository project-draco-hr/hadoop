{
  final DatanodeManager dm=blockManager.getDatanodeManager();
  if (namesystem.isInStartupSafeMode()) {
    return;
  }
  boolean allAlive=false;
  while (!allAlive) {
    DatanodeID dead=null;
    DatanodeStorageInfo failedStorage=null;
    int numOfStaleNodes=0;
    int numOfStaleStorages=0;
synchronized (this) {
      for (      DatanodeDescriptor d : datanodes) {
        if (dead == null && dm.isDatanodeDead(d)) {
          stats.incrExpiredHeartbeats();
          dead=d;
        }
        if (d.isStale(dm.getStaleInterval())) {
          numOfStaleNodes++;
        }
        DatanodeStorageInfo[] storageInfos=d.getStorageInfos();
        for (        DatanodeStorageInfo storageInfo : storageInfos) {
          if (storageInfo.areBlockContentsStale()) {
            numOfStaleStorages++;
          }
          if (failedStorage == null && storageInfo.areBlocksOnFailedStorage() && d != dead) {
            failedStorage=storageInfo;
          }
        }
      }
      dm.setNumStaleNodes(numOfStaleNodes);
      dm.setNumStaleStorages(numOfStaleStorages);
    }
    allAlive=dead == null && failedStorage == null;
    if (dead != null) {
      namesystem.writeLock();
      try {
        if (namesystem.isInStartupSafeMode()) {
          return;
        }
synchronized (this) {
          dm.removeDeadDatanode(dead);
        }
      }
  finally {
        namesystem.writeUnlock();
      }
    }
    if (failedStorage != null) {
      namesystem.writeLock();
      try {
        if (namesystem.isInStartupSafeMode()) {
          return;
        }
synchronized (this) {
          blockManager.removeBlocksAssociatedTo(failedStorage);
        }
      }
  finally {
        namesystem.writeUnlock();
      }
    }
  }
}
