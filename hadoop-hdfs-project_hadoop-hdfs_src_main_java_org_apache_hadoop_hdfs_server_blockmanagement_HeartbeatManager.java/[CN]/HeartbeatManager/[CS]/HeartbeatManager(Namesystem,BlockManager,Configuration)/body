{
  this.namesystem=namesystem;
  this.blockManager=blockManager;
  boolean checkStaleNodes=conf.getBoolean(DFSConfigKeys.DFS_NAMENODE_CHECK_STALE_DATANODE_KEY,DFSConfigKeys.DFS_NAMENODE_CHECK_STALE_DATANODE_DEFAULT);
  long recheckInterval=conf.getInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT);
  long staleInterval=conf.getLong(DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY,DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT);
  this.initialAvoidWriteStaleNodes=DatanodeManager.getAvoidStaleForWriteFromConf(conf,checkStaleNodes);
  this.ratioUseStaleDataNodesForWrite=conf.getFloat(DFSConfigKeys.DFS_NAMENODE_USE_STALE_DATANODE_FOR_WRITE_RATIO_KEY,DFSConfigKeys.DFS_NAMENODE_USE_STALE_DATANODE_FOR_WRITE_RATIO_DEFAULT);
  Preconditions.checkArgument((ratioUseStaleDataNodesForWrite > 0 && ratioUseStaleDataNodesForWrite <= 1.0f),DFSConfigKeys.DFS_NAMENODE_USE_STALE_DATANODE_FOR_WRITE_RATIO_KEY + " = '" + ratioUseStaleDataNodesForWrite+ "' is invalid. "+ "It should be a positive non-zero float value, not greater than 1.0f.");
  this.heartbeatRecheckInterval=(checkStaleNodes && initialAvoidWriteStaleNodes && staleInterval < recheckInterval) ? staleInterval : recheckInterval;
}
