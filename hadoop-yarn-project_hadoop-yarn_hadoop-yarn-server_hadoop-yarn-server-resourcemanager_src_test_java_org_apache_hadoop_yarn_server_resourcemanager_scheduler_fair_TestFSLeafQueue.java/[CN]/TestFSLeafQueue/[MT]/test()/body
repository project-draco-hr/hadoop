{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"queueA\">");
  out.println("<minResources>2048mb,0vcores</minResources>");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<minResources>2048mb,0vcores</minResources>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  resourceManager=new MockRM(conf);
  resourceManager.start();
  scheduler=(FairScheduler)resourceManager.getResourceScheduler();
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(4 * 1024,4),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  scheduler.update();
  createSchedulingRequest(3 * 1024,"queueA","user1");
  scheduler.update();
  NodeUpdateSchedulerEvent nodeEvent2=new NodeUpdateSchedulerEvent(node1);
  scheduler.handle(nodeEvent2);
  createSchedulingRequest(1 * 1024,"queueB","user1");
  scheduler.update();
  Collection<FSLeafQueue> queues=scheduler.getQueueManager().getLeafQueues();
  assertEquals(3,queues.size());
  FSLeafQueue queueA=scheduler.getQueueManager().getLeafQueue("queueA",false);
  FSLeafQueue queueB=scheduler.getQueueManager().getLeafQueue("queueB",false);
  assertFalse(queueA.isStarvedForMinShare());
  assertTrue(queueB.isStarvedForMinShare());
  scheduler.handle(nodeEvent2);
  assertFalse(queueB.isStarvedForMinShare());
}
