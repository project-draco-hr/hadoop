{
  final JobConf conf=new JobConf();
  conf.setLong(MRJobConfig.REDUCE_MEMORY_TOTAL_BYTES,8L * 1024 * 1024* 1024);
  conf.setFloat(MRJobConfig.SHUFFLE_INPUT_BUFFER_PERCENT,1.0f);
  conf.setFloat(MRJobConfig.SHUFFLE_MEMORY_LIMIT_PERCENT,0.95f);
  conf.setFloat(MRJobConfig.SHUFFLE_MERGE_PERCENT,1.0f);
  conf.setFloat(MRJobConfig.REDUCE_INPUT_BUFFER_PERCENT,1.0f);
  final MergeManagerImpl<Text,Text> mgr=new MergeManagerImpl<Text,Text>(null,conf,mock(LocalFileSystem.class),null,null,null,null,null,null,null,null,null,null,new MROutputFiles());
  assertTrue("Large shuffle area unusable: " + mgr.memoryLimit,mgr.memoryLimit > Integer.MAX_VALUE);
  final long maxInMemReduce=mgr.getMaxInMemReduceLimit();
  assertTrue("Large in-memory reduce area unusable: " + maxInMemReduce,maxInMemReduce > Integer.MAX_VALUE);
  assertEquals("maxSingleShuffleLimit to be capped at Integer.MAX_VALUE",Integer.MAX_VALUE,mgr.maxSingleShuffleLimit);
  verifyReservedMapOutputType(mgr,10L,"MEMORY");
  verifyReservedMapOutputType(mgr,1L + Integer.MAX_VALUE,"DISK");
}
