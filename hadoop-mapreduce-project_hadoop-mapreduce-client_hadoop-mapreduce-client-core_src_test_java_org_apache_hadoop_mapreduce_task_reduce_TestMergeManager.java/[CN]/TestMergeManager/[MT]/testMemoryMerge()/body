{
  final int TOTAL_MEM_BYTES=10000;
  final int OUTPUT_SIZE=7950;
  JobConf conf=new JobConf();
  conf.setFloat(MRJobConfig.SHUFFLE_INPUT_BUFFER_PERCENT,1.0f);
  conf.setLong(MRJobConfig.REDUCE_MEMORY_TOTAL_BYTES,TOTAL_MEM_BYTES);
  conf.setFloat(MRJobConfig.SHUFFLE_MEMORY_LIMIT_PERCENT,0.8f);
  conf.setFloat(MRJobConfig.SHUFFLE_MERGE_PERCENT,0.9f);
  TestExceptionReporter reporter=new TestExceptionReporter();
  CyclicBarrier mergeStart=new CyclicBarrier(2);
  CyclicBarrier mergeComplete=new CyclicBarrier(2);
  StubbedMergeManager mgr=new StubbedMergeManager(conf,reporter,mergeStart,mergeComplete);
  MapOutput<Text,Text> out1=mgr.reserve(null,OUTPUT_SIZE,0);
  Assert.assertEquals("Should be a memory merge",Type.MEMORY,out1.getType());
  fillOutput(out1);
  MapOutput<Text,Text> out2=mgr.reserve(null,OUTPUT_SIZE,0);
  Assert.assertEquals("Should be a memory merge",Type.MEMORY,out2.getType());
  fillOutput(out2);
  MapOutput<Text,Text> out3=mgr.reserve(null,OUTPUT_SIZE,0);
  Assert.assertEquals("Should be told to wait",Type.WAIT,out3.getType());
  out1.commit();
  out2.commit();
  mergeStart.await();
  Assert.assertEquals(1,mgr.getNumMerges());
  out1=mgr.reserve(null,OUTPUT_SIZE,0);
  Assert.assertEquals("Should be a memory merge",Type.MEMORY,out1.getType());
  fillOutput(out1);
  out2=mgr.reserve(null,OUTPUT_SIZE,0);
  Assert.assertEquals("Should be a memory merge",Type.MEMORY,out2.getType());
  fillOutput(out2);
  out3=mgr.reserve(null,OUTPUT_SIZE,0);
  Assert.assertEquals("Should be told to wait",Type.WAIT,out3.getType());
  out1.commit();
  out2.commit();
  mergeComplete.await();
  mergeStart.await();
  Assert.assertEquals(2,mgr.getNumMerges());
  mergeComplete.await();
  Assert.assertEquals(2,mgr.getNumMerges());
  Assert.assertEquals("exception reporter invoked",0,reporter.getNumExceptions());
}
