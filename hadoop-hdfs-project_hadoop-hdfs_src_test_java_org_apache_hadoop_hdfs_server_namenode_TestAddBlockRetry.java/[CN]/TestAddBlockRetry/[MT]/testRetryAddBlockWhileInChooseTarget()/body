{
  final String src="/testRetryAddBlockWhileInChooseTarget";
  final FSNamesystem ns=cluster.getNamesystem();
  BlockManager spyBM=spy(ns.getBlockManager());
  final NamenodeProtocols nn=cluster.getNameNodeRpc();
  Class<? extends FSNamesystem> nsClass=ns.getClass();
  Field bmField=nsClass.getDeclaredField("blockManager");
  bmField.setAccessible(true);
  bmField.set(ns,spyBM);
  doAnswer(new Answer<DatanodeStorageInfo[]>(){
    @Override public DatanodeStorageInfo[] answer(    InvocationOnMock invocation) throws Throwable {
      LOG.info("chooseTarget for " + src);
      DatanodeStorageInfo[] ret=(DatanodeStorageInfo[])invocation.callRealMethod();
      assertTrue("Penultimate block must be complete",checkFileProgress(src,false));
      count++;
      if (count == 1) {
        LOG.info("Starting second addBlock for " + src);
        nn.addBlock(src,"clientName",null,null,INodeId.GRANDFATHER_INODE_ID,null);
        assertTrue("Penultimate block must be complete",checkFileProgress(src,false));
        LocatedBlocks lbs=nn.getBlockLocations(src,0,Long.MAX_VALUE);
        assertEquals("Must be one block",1,lbs.getLocatedBlocks().size());
        lb2=lbs.get(0);
        assertEquals("Wrong replication",REPLICATION,lb2.getLocations().length);
      }
      return ret;
    }
  }
).when(spyBM).chooseTarget4NewBlock(Mockito.anyString(),Mockito.anyInt(),Mockito.<DatanodeDescriptor>any(),Mockito.<HashSet<Node>>any(),Mockito.anyLong(),Mockito.<List<String>>any(),Mockito.anyByte());
  nn.create(src,FsPermission.getFileDefault(),"clientName",new EnumSetWritable<CreateFlag>(EnumSet.of(CreateFlag.CREATE)),true,(short)3,1024,null);
  LOG.info("Starting first addBlock for " + src);
  nn.addBlock(src,"clientName",null,null,INodeId.GRANDFATHER_INODE_ID,null);
  LocatedBlocks lbs=nn.getBlockLocations(src,0,Long.MAX_VALUE);
  assertEquals("Must be one block",1,lbs.getLocatedBlocks().size());
  lb1=lbs.get(0);
  assertEquals("Wrong replication",REPLICATION,lb1.getLocations().length);
  assertEquals("Blocks are not equal",lb1.getBlock(),lb2.getBlock());
}
