{
  final String COUNTER_GROUP="org.apache.hadoop.mapreduce.TaskCounter";
  localFs.delete(new Path(TEST_ROOT_DIR + "/in"),true);
  localFs.delete(new Path(TEST_ROOT_DIR + "/out"),true);
  writeFile("in/part1","this is a test\nof word count test\ntest\n");
  writeFile("in/part2","more test");
  Job job=Job.getInstance(conf,"word count");
  job.setJarByClass(WordCount.class);
  job.setMapperClass(TokenizerMapper.class);
  job.setCombinerClass(IntSumReducer.class);
  job.setReducerClass(IntSumReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(IntWritable.class);
  job.setInputFormatClass(TrackingTextInputFormat.class);
  FileInputFormat.addInputPath(job,new Path(TEST_ROOT_DIR + "/in"));
  FileOutputFormat.setOutputPath(job,new Path(TEST_ROOT_DIR + "/out"));
  assertTrue(job.waitForCompletion(false));
  String out=readFile("out/part-r-00000");
  System.out.println(out);
  assertEquals("a\t1\ncount\t1\nis\t1\nmore\t1\nof\t1\ntest\t4\nthis\t1\nword\t1\n",out);
  Counters ctrs=job.getCounters();
  System.out.println("Counters: " + ctrs);
  long mapIn=ctrs.findCounter(FileInputFormatCounter.BYTES_READ).getValue();
  assertTrue(mapIn != 0);
  long combineIn=ctrs.findCounter(COUNTER_GROUP,"COMBINE_INPUT_RECORDS").getValue();
  long combineOut=ctrs.findCounter(COUNTER_GROUP,"COMBINE_OUTPUT_RECORDS").getValue();
  long reduceIn=ctrs.findCounter(COUNTER_GROUP,"REDUCE_INPUT_RECORDS").getValue();
  long mapOut=ctrs.findCounter(COUNTER_GROUP,"MAP_OUTPUT_RECORDS").getValue();
  long reduceOut=ctrs.findCounter(COUNTER_GROUP,"REDUCE_OUTPUT_RECORDS").getValue();
  long reduceGrps=ctrs.findCounter(COUNTER_GROUP,"REDUCE_INPUT_GROUPS").getValue();
  long mergedMapOutputs=ctrs.findCounter(COUNTER_GROUP,"MERGED_MAP_OUTPUTS").getValue();
  long shuffledMaps=ctrs.findCounter(COUNTER_GROUP,"SHUFFLED_MAPS").getValue();
  assertEquals("map out = combine in",mapOut,combineIn);
  assertEquals("combine out = reduce in",combineOut,reduceIn);
  assertTrue("combine in > combine out",combineIn > combineOut);
  assertEquals("reduce groups = reduce out",reduceGrps,reduceOut);
  assertEquals("Mismatch in mergedMapOutputs",mergedMapOutputs,2);
  assertEquals("Mismatch in shuffledMaps",shuffledMaps,2);
  String group="Random Group";
  CounterGroup ctrGrp=ctrs.getGroup(group);
  assertEquals(0,ctrGrp.size());
}
