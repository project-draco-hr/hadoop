{
  Configuration conf=new Configuration();
  conf.set(YarnConfiguration.IPC_RPC_IMPL,HadoopYarnProtoRPC.class.getName());
  YarnRPC rpc=YarnRPC.create(conf);
  String bindAddr="localhost:0";
  InetSocketAddress addr=NetUtils.createSocketAddr(bindAddr);
  conf.setSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS,addr);
  final RecordFactory factory=RecordFactoryProvider.getRecordFactory(null);
  final RMContext rmContext=new RMContextImpl(){
    @Override public AMLivelinessMonitor getAMLivelinessMonitor(){
      return null;
    }
    @Override public Configuration getYarnConfiguration(){
      return new YarnConfiguration();
    }
  }
;
  DistributedSchedulingService service=new DistributedSchedulingService(rmContext,null){
    @Override public RegisterApplicationMasterResponse registerApplicationMaster(    RegisterApplicationMasterRequest request) throws YarnException, IOException {
      RegisterApplicationMasterResponse resp=factory.newRecordInstance(RegisterApplicationMasterResponse.class);
      resp.setQueue("dummyQueue");
      return resp;
    }
    @Override public FinishApplicationMasterResponse finishApplicationMaster(    FinishApplicationMasterRequest request) throws YarnException, IOException {
      FinishApplicationMasterResponse resp=factory.newRecordInstance(FinishApplicationMasterResponse.class);
      resp.setIsUnregistered(false);
      return resp;
    }
    @Override public AllocateResponse allocate(    AllocateRequest request) throws YarnException, IOException {
      AllocateResponse response=factory.newRecordInstance(AllocateResponse.class);
      response.setNumClusterNodes(12345);
      return response;
    }
    @Override public DistSchedRegisterResponse registerApplicationMasterForDistributedScheduling(    RegisterApplicationMasterRequest request) throws YarnException, IOException {
      DistSchedRegisterResponse resp=factory.newRecordInstance(DistSchedRegisterResponse.class);
      resp.setContainerIdStart(54321l);
      return resp;
    }
    @Override public DistSchedAllocateResponse allocateForDistributedScheduling(    AllocateRequest request) throws YarnException, IOException {
      DistSchedAllocateResponse resp=factory.newRecordInstance(DistSchedAllocateResponse.class);
      resp.setNodesForScheduling(Arrays.asList(NodeId.newInstance("h1",1234)));
      return resp;
    }
  }
;
  Server server=service.getServer(rpc,conf,addr,null);
  server.start();
  RPC.setProtocolEngine(conf,ApplicationMasterProtocolPB.class,ProtobufRpcEngine.class);
  ApplicationMasterProtocolPB ampProxy=RPC.getProxy(ApplicationMasterProtocolPB.class,1,NetUtils.getConnectAddress(server),conf);
  RegisterApplicationMasterResponse regResp=new RegisterApplicationMasterResponsePBImpl(ampProxy.registerApplicationMaster(null,((RegisterApplicationMasterRequestPBImpl)factory.newRecordInstance(RegisterApplicationMasterRequest.class)).getProto()));
  Assert.assertEquals("dummyQueue",regResp.getQueue());
  FinishApplicationMasterResponse finishResp=new FinishApplicationMasterResponsePBImpl(ampProxy.finishApplicationMaster(null,((FinishApplicationMasterRequestPBImpl)factory.newRecordInstance(FinishApplicationMasterRequest.class)).getProto()));
  Assert.assertEquals(false,finishResp.getIsUnregistered());
  AllocateResponse allocResp=new AllocateResponsePBImpl(ampProxy.allocate(null,((AllocateRequestPBImpl)factory.newRecordInstance(AllocateRequest.class)).getProto()));
  Assert.assertEquals(12345,allocResp.getNumClusterNodes());
  RPC.setProtocolEngine(conf,DistributedSchedulerProtocolPB.class,ProtobufRpcEngine.class);
  DistributedSchedulerProtocolPB dsProxy=RPC.getProxy(DistributedSchedulerProtocolPB.class,1,NetUtils.getConnectAddress(server),conf);
  DistSchedRegisterResponse dsRegResp=new DistSchedRegisterResponsePBImpl(dsProxy.registerApplicationMasterForDistributedScheduling(null,((RegisterApplicationMasterRequestPBImpl)factory.newRecordInstance(RegisterApplicationMasterRequest.class)).getProto()));
  Assert.assertEquals(54321l,dsRegResp.getContainerIdStart());
  DistSchedAllocateResponse dsAllocResp=new DistSchedAllocateResponsePBImpl(dsProxy.allocateForDistributedScheduling(null,((AllocateRequestPBImpl)factory.newRecordInstance(AllocateRequest.class)).getProto()));
  Assert.assertEquals("h1",dsAllocResp.getNodesForScheduling().get(0).getHost());
}
