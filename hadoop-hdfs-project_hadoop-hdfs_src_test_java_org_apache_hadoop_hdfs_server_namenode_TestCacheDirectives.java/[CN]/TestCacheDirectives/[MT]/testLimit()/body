{
  try {
    dfs.addCachePool(new CachePoolInfo("poolofnegativity").setLimit(-99l));
    fail("Should not be able to set a negative limit");
  }
 catch (  InvalidRequestException e) {
    GenericTestUtils.assertExceptionContains("negative",e);
  }
  final String destiny="poolofdestiny";
  final Path path1=new Path("/destiny");
  DFSTestUtil.createFile(dfs,path1,2 * BLOCK_SIZE,(short)1,0x9494);
  final CachePoolInfo poolInfo=new CachePoolInfo(destiny).setLimit(2 * BLOCK_SIZE - 1);
  dfs.addCachePool(poolInfo);
  final CacheDirectiveInfo info1=new CacheDirectiveInfo.Builder().setPool(destiny).setPath(path1).build();
  try {
    dfs.addCacheDirective(info1);
    fail("Should not be able to cache when there is no more limit");
  }
 catch (  InvalidRequestException e) {
    GenericTestUtils.assertExceptionContains("remaining capacity",e);
  }
  poolInfo.setLimit(2 * BLOCK_SIZE);
  dfs.modifyCachePool(poolInfo);
  long id1=dfs.addCacheDirective(info1);
  waitForCachePoolStats(dfs,2 * BLOCK_SIZE,2 * BLOCK_SIZE,1,1,poolInfo,"testLimit:1");
  final Path path2=new Path("/failure");
  DFSTestUtil.createFile(dfs,path2,BLOCK_SIZE,(short)1,0x9495);
  try {
    dfs.addCacheDirective(new CacheDirectiveInfo.Builder().setPool(destiny).setPath(path2).build(),EnumSet.noneOf(CacheFlag.class));
    fail("Should not be able to add another cached file");
  }
 catch (  InvalidRequestException e) {
    GenericTestUtils.assertExceptionContains("remaining capacity",e);
  }
  poolInfo.setLimit(BLOCK_SIZE);
  dfs.modifyCachePool(poolInfo);
  waitForCachePoolStats(dfs,2 * BLOCK_SIZE,0,1,0,poolInfo,"testLimit:2");
  RemoteIterator<CachePoolEntry> it=dfs.listCachePools();
  assertTrue("Expected a cache pool",it.hasNext());
  CachePoolStats stats=it.next().getStats();
  assertEquals("Overlimit bytes should be difference of needed and limit",BLOCK_SIZE,stats.getBytesOverlimit());
  CachePoolInfo inadequate=new CachePoolInfo("poolofinadequacy").setLimit(BLOCK_SIZE);
  dfs.addCachePool(inadequate);
  try {
    dfs.modifyCacheDirective(new CacheDirectiveInfo.Builder(info1).setId(id1).setPool(inadequate.getPoolName()).build(),EnumSet.noneOf(CacheFlag.class));
  }
 catch (  InvalidRequestException e) {
    GenericTestUtils.assertExceptionContains("remaining capacity",e);
  }
  dfs.modifyCacheDirective(new CacheDirectiveInfo.Builder(info1).setId(id1).setPool(inadequate.getPoolName()).build(),EnumSet.of(CacheFlag.FORCE));
  dfs.addCacheDirective(new CacheDirectiveInfo.Builder().setPool(inadequate.getPoolName()).setPath(path1).build(),EnumSet.of(CacheFlag.FORCE));
}
