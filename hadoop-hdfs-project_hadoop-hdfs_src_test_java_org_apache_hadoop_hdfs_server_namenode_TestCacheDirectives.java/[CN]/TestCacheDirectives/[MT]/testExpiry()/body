{
  String pool="pool1";
  dfs.addCachePool(new CachePoolInfo(pool));
  Path p=new Path("/mypath");
  DFSTestUtil.createFile(dfs,p,BLOCK_SIZE * 2,(short)2,0x999);
  Date start=new Date();
  Date expiry=DateUtils.addSeconds(start,120);
  final long id=dfs.addCacheDirective(new CacheDirectiveInfo.Builder().setPath(p).setPool(pool).setExpiration(CacheDirectiveInfo.Expiration.newAbsolute(expiry)).setReplication((short)2).build());
  waitForCachedBlocks(cluster.getNameNode(),2,4,"testExpiry:1");
  dfs.modifyCacheDirective(new CacheDirectiveInfo.Builder().setId(id).setExpiration(Expiration.newRelative(0)).build());
  waitForCachedBlocks(cluster.getNameNode(),0,0,"testExpiry:2");
  RemoteIterator<CacheDirectiveEntry> it=dfs.listCacheDirectives(null);
  CacheDirectiveEntry ent=it.next();
  assertFalse(it.hasNext());
  Date entryExpiry=new Date(ent.getInfo().getExpiration().getMillis());
  assertTrue("Directive should have expired",entryExpiry.before(new Date()));
  dfs.modifyCacheDirective(new CacheDirectiveInfo.Builder().setId(id).setExpiration(Expiration.newRelative(120000)).build());
  waitForCachedBlocks(cluster.getNameNode(),2,4,"testExpiry:3");
  it=dfs.listCacheDirectives(null);
  ent=it.next();
  assertFalse(it.hasNext());
  entryExpiry=new Date(ent.getInfo().getExpiration().getMillis());
  assertTrue("Directive should not have expired",entryExpiry.after(new Date()));
  try {
    dfs.modifyCacheDirective(new CacheDirectiveInfo.Builder().setId(id).setExpiration(Expiration.newRelative(-1)).build());
  }
 catch (  InvalidRequestException e) {
    GenericTestUtils.assertExceptionContains("Cannot set a negative expiration",e);
  }
}
