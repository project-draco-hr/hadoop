{
  final String pool="friendlyPool";
  final CachePoolInfo poolInfo=new CachePoolInfo(pool);
  dfs.addCachePool(poolInfo);
  final List<Path> paths=new LinkedList<Path>();
  paths.add(new Path("/foo/bar"));
  paths.add(new Path("/foo/baz"));
  paths.add(new Path("/foo2/bar2"));
  paths.add(new Path("/foo2/baz2"));
  dfs.mkdir(new Path("/foo"),FsPermission.getDirDefault());
  dfs.mkdir(new Path("/foo2"),FsPermission.getDirDefault());
  final int numBlocksPerFile=2;
  for (  Path path : paths) {
    FileSystemTestHelper.createFile(dfs,path,numBlocksPerFile,(int)BLOCK_SIZE,(short)3,false);
  }
  waitForCachedBlocks(namenode,0,0,"testWaitForCachedReplicasInDirectory:0");
  long id=dfs.addCacheDirective(new CacheDirectiveInfo.Builder().setPath(new Path("/foo")).setReplication((short)2).setPool(pool).build());
  waitForCachedBlocks(namenode,4,8,"testWaitForCachedReplicasInDirectory:1:blocks");
  waitForCacheDirectiveStats(dfs,4 * numBlocksPerFile * BLOCK_SIZE,4 * numBlocksPerFile * BLOCK_SIZE,2,2,new CacheDirectiveInfo.Builder().setPath(new Path("/foo")).build(),"testWaitForCachedReplicasInDirectory:1:directive");
  waitForCachePoolStats(dfs,4 * numBlocksPerFile * BLOCK_SIZE,4 * numBlocksPerFile * BLOCK_SIZE,2,2,poolInfo,"testWaitForCachedReplicasInDirectory:1:pool");
  long id2=dfs.addCacheDirective(new CacheDirectiveInfo.Builder().setPath(new Path("/foo/bar")).setReplication((short)4).setPool(pool).build());
  waitForCachedBlocks(namenode,4,10,"testWaitForCachedReplicasInDirectory:2:blocks");
  waitForCacheDirectiveStats(dfs,4 * numBlocksPerFile * BLOCK_SIZE,4 * numBlocksPerFile * BLOCK_SIZE,2,2,new CacheDirectiveInfo.Builder().setPath(new Path("/foo")).build(),"testWaitForCachedReplicasInDirectory:2:directive-1");
  waitForCacheDirectiveStats(dfs,4 * numBlocksPerFile * BLOCK_SIZE,3 * numBlocksPerFile * BLOCK_SIZE,1,0,new CacheDirectiveInfo.Builder().setPath(new Path("/foo/bar")).build(),"testWaitForCachedReplicasInDirectory:2:directive-2");
  waitForCachePoolStats(dfs,(4 + 4) * numBlocksPerFile * BLOCK_SIZE,(4 + 3) * numBlocksPerFile * BLOCK_SIZE,3,2,poolInfo,"testWaitForCachedReplicasInDirectory:2:pool");
  dfs.removeCacheDirective(id);
  dfs.removeCacheDirective(id2);
  waitForCachedBlocks(namenode,0,0,"testWaitForCachedReplicasInDirectory:3:blocks");
  waitForCachePoolStats(dfs,0,0,0,0,poolInfo,"testWaitForCachedReplicasInDirectory:3:pool");
}
