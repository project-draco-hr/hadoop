{
  HdfsConfiguration conf=createCachingConf();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build();
  try {
    cluster.waitActive();
    DistributedFileSystem dfs=cluster.getFileSystem();
    NameNode namenode=cluster.getNameNode();
    final String pool="friendlyPool";
    dfs.addCachePool(new CachePoolInfo(pool));
    final List<Path> paths=new LinkedList<Path>();
    paths.add(new Path("/foo/bar"));
    paths.add(new Path("/foo/baz"));
    paths.add(new Path("/foo2/bar2"));
    paths.add(new Path("/foo2/baz2"));
    dfs.mkdir(new Path("/foo"),FsPermission.getDirDefault());
    dfs.mkdir(new Path("/foo2"),FsPermission.getDirDefault());
    final int numBlocksPerFile=2;
    for (    Path path : paths) {
      FileSystemTestHelper.createFile(dfs,path,numBlocksPerFile,(int)BLOCK_SIZE,(short)3,false);
    }
    waitForCachedBlocks(namenode,0,0,"testWaitForCachedReplicasInDirectory:0");
    long id=dfs.addCacheDirective(new CacheDirectiveInfo.Builder().setPath(new Path("/foo")).setReplication((short)2).setPool(pool).build());
    waitForCachedBlocks(namenode,4,8,"testWaitForCachedReplicasInDirectory:1");
    RemoteIterator<CacheDirectiveEntry> iter=dfs.listCacheDirectives(new CacheDirectiveInfo.Builder().setPath(new Path("/foo")).build());
    CacheDirectiveEntry entry=iter.next();
    CacheDirectiveStats stats=entry.getStats();
    Assert.assertEquals(Long.valueOf(2),stats.getFilesAffected());
    Assert.assertEquals(Long.valueOf(2 * numBlocksPerFile * BLOCK_SIZE* 2),stats.getBytesNeeded());
    Assert.assertEquals(Long.valueOf(2 * numBlocksPerFile * BLOCK_SIZE* 2),stats.getBytesCached());
    long id2=dfs.addCacheDirective(new CacheDirectiveInfo.Builder().setPath(new Path("/foo/bar")).setReplication((short)4).setPool(pool).build());
    waitForCachedBlocks(namenode,4,10,"testWaitForCachedReplicasInDirectory:2");
    iter=dfs.listCacheDirectives(new CacheDirectiveInfo.Builder().setPath(new Path("/foo")).build());
    entry=iter.next();
    stats=entry.getStats();
    Assert.assertEquals(Long.valueOf(2),stats.getFilesAffected());
    Assert.assertEquals(Long.valueOf(2 * numBlocksPerFile * BLOCK_SIZE* 2),stats.getBytesNeeded());
    Assert.assertEquals(Long.valueOf(2 * numBlocksPerFile * BLOCK_SIZE* 2),stats.getBytesCached());
    iter=dfs.listCacheDirectives(new CacheDirectiveInfo.Builder().setPath(new Path("/foo/bar")).build());
    entry=iter.next();
    stats=entry.getStats();
    Assert.assertEquals(Long.valueOf(1),stats.getFilesAffected());
    Assert.assertEquals(Long.valueOf(4 * numBlocksPerFile * BLOCK_SIZE),stats.getBytesNeeded());
    Assert.assertEquals(Long.valueOf(3 * numBlocksPerFile * BLOCK_SIZE),stats.getBytesCached());
    dfs.removeCacheDirective(id);
    dfs.removeCacheDirective(id2);
    waitForCachedBlocks(namenode,0,0,"testWaitForCachedReplicasInDirectory:3");
  }
  finally {
    cluster.shutdown();
  }
}
