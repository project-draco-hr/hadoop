{
  if (!isEmpty()) {
    long start=Time.monotonicNow();
    Node<E> node=root.getLeftMostNode();
    while (node != null) {
      if (node.prev != null && !node.prev.isFull()) {
        Node<E> prev=node.prev;
        int count=Math.min(Node.NODE_SIZE - prev.size,node.size);
        System.arraycopy(node.entries,node.leftIndex,prev.entries,prev.rightIndex + 1,count);
        node.leftIndex+=count;
        node.size-=count;
        prev.rightIndex+=count;
        prev.size+=count;
      }
      if (node.isEmpty()) {
        Node<E> temp=node.next;
        deleteNode(node);
        node=temp;
        continue;
      }
 else       if (!node.isFull()) {
        if (node.leftIndex != 0) {
          System.arraycopy(node.entries,node.leftIndex,node.entries,0,node.size);
          Arrays.fill(node.entries,node.size,node.rightIndex + 1,null);
          node.leftIndex=0;
          node.rightIndex=node.size - 1;
        }
      }
      node=node.next;
      if (Time.monotonicNow() - start > timeout) {
        return false;
      }
    }
  }
  return true;
}
