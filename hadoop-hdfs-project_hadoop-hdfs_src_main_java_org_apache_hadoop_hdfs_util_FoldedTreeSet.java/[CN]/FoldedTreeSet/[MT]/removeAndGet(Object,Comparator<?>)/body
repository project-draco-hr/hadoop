{
  Objects.requireNonNull(obj);
  if (!isEmpty()) {
    Node<E> node=root;
    while (node != null) {
      E[] entries=node.entries;
      int leftIndex=node.leftIndex;
      int result=compare(obj,entries[leftIndex],cmp);
      if (result < 0) {
        node=node.left;
      }
 else       if (result == 0) {
        return removeElementLeft(node);
      }
 else {
        int rightIndex=node.rightIndex;
        if (leftIndex != rightIndex) {
          result=compare(obj,entries[rightIndex],cmp);
        }
        if (result == 0) {
          return removeElementRight(node);
        }
 else         if (result > 0) {
          node=node.right;
        }
 else {
          int low=leftIndex + 1, high=rightIndex - 1;
          while (low <= high) {
            int mid=(low + high) >>> 1;
            result=compare(obj,entries[mid],cmp);
            if (result > 0) {
              low=mid + 1;
            }
 else             if (result == 0) {
              return removeElementAt(node,mid);
            }
 else {
              high=mid - 1;
            }
          }
          return null;
        }
      }
    }
  }
  return null;
}
