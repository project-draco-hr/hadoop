{
  MiniMRCluster mr=null;
  try {
    int taskTrackers=2;
    JobConf conf=new JobConf();
    mr=new MiniMRCluster(taskTrackers,"file:///",3,null,null,conf);
    JobClient jc=new JobClient(mr.createJobConf());
    while (jc.getClusterStatus().getTaskTrackers() != taskTrackers) {
      UtilsForTests.waitFor(100);
    }
    assertEquals(JTConfig.JT_HEARTBEAT_INTERVAL_MIN_DEFAULT,mr.getJobTrackerRunner().getJobTracker().getNextHeartbeatInterval());
    mr.shutdown();
    taskTrackers=5;
    conf.setInt(JTConfig.JT_HEARTBEATS_IN_SECOND,1);
    mr=new MiniMRCluster(taskTrackers,"file:///",3,null,null,conf);
    jc=new JobClient(mr.createJobConf());
    while (jc.getClusterStatus().getTaskTrackers() != taskTrackers) {
      UtilsForTests.waitFor(100);
    }
    assertEquals(taskTrackers * 1000,mr.getJobTrackerRunner().getJobTracker().getNextHeartbeatInterval());
    mr.shutdown();
    taskTrackers=5;
    conf.setInt(JTConfig.JT_HEARTBEATS_IN_SECOND,100);
    mr=new MiniMRCluster(taskTrackers,"file:///",3,null,null,conf);
    jc=new JobClient(mr.createJobConf());
    while (jc.getClusterStatus().getTaskTrackers() != taskTrackers) {
      UtilsForTests.waitFor(100);
    }
    assertEquals(JTConfig.JT_HEARTBEAT_INTERVAL_MIN_DEFAULT,mr.getJobTrackerRunner().getJobTracker().getNextHeartbeatInterval());
  }
  finally {
    if (mr != null) {
      mr.shutdown();
    }
  }
}
