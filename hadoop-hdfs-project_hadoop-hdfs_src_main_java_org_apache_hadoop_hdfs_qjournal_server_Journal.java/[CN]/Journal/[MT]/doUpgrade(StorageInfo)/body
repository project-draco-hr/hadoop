{
  long oldCTime=storage.getCTime();
  storage.cTime=sInfo.cTime;
  int oldLV=storage.getLayoutVersion();
  storage.layoutVersion=sInfo.layoutVersion;
  LOG.info("Starting upgrade of edits directory: " + ".\n   old LV = " + oldLV + "; old CTime = "+ oldCTime+ ".\n   new LV = "+ storage.getLayoutVersion()+ "; new CTime = "+ storage.getCTime());
  storage.getJournalManager().doUpgrade(storage);
  storage.createPaxosDir();
  File currentDir=storage.getSingularStorageDir().getCurrentDir();
  File previousDir=storage.getSingularStorageDir().getPreviousDir();
  PersistentLongFile prevLastPromisedEpoch=new PersistentLongFile(new File(previousDir,LAST_PROMISED_FILENAME),0);
  PersistentLongFile prevLastWriterEpoch=new PersistentLongFile(new File(previousDir,LAST_WRITER_EPOCH),0);
  BestEffortLongFile prevCommittedTxnId=new BestEffortLongFile(new File(previousDir,COMMITTED_TXID_FILENAME),HdfsConstants.INVALID_TXID);
  lastPromisedEpoch=new PersistentLongFile(new File(currentDir,LAST_PROMISED_FILENAME),0);
  lastWriterEpoch=new PersistentLongFile(new File(currentDir,LAST_WRITER_EPOCH),0);
  committedTxnId=new BestEffortLongFile(new File(currentDir,COMMITTED_TXID_FILENAME),HdfsConstants.INVALID_TXID);
  try {
    lastPromisedEpoch.set(prevLastPromisedEpoch.get());
    lastWriterEpoch.set(prevLastWriterEpoch.get());
    committedTxnId.set(prevCommittedTxnId.get());
  }
  finally {
    IOUtils.cleanup(LOG,prevCommittedTxnId);
  }
}
