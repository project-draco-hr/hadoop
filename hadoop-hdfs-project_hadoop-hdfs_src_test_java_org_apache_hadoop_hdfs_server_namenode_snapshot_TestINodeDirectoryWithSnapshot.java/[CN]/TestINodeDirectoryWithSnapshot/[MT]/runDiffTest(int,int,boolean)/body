{
  final int width=findWidth(startSize + numModifications);
  System.out.println("\nstartSize=" + startSize + ", numModifications="+ numModifications+ ", width="+ width);
  final List<INode> previous=new ArrayList<INode>();
  int n=0;
  for (; n < startSize; n++) {
    previous.add(newINode(n,width));
  }
  final List<INode> current=new ArrayList<INode>(previous);
  final Diff diff=computeDiff ? new Diff() : null;
  for (int m=0; m < numModifications; m++) {
    final int nextOperation=current.isEmpty() ? 1 : RANDOM.nextInt(3) + 1;
switch (nextOperation) {
case 1:
{
        final INode i=newINode(n++,width);
        create(i,current,diff);
        break;
      }
case 2:
{
      final INode i=current.get(RANDOM.nextInt(current.size()));
      delete(i,current,diff);
      break;
    }
case 3:
{
    final INode i=current.get(RANDOM.nextInt(current.size()));
    modify(i,current,diff);
    break;
  }
}
}
if (computeDiff) {
final List<INode> c=diff.apply2Previous(previous);
if (!hasIdenticalElements(current,c)) {
System.out.println("previous = " + Diff.toString(previous));
System.out.println();
System.out.println("current  = " + Diff.toString(current));
System.out.println("c        = " + Diff.toString(c));
System.out.println();
System.out.println("diff     = " + diff);
throw new AssertionError("current and c are not identical.");
}
final List<INode> p=diff.apply2Current(current);
if (!hasIdenticalElements(previous,p)) {
System.out.println("previous = " + Diff.toString(previous));
System.out.println("p        = " + Diff.toString(p));
System.out.println();
System.out.println("current  = " + Diff.toString(current));
System.out.println();
System.out.println("diff     = " + diff);
throw new AssertionError("previous and p are not identical.");
}
}
if (computeDiff) {
for (int m=0; m < n; m++) {
final INode inode=newINode(m,width);
{
  final int i=Diff.search(current,inode);
  final INode inodeInCurrent=i < 0 ? null : current.get(i);
  final INode computed=diff.accessPrevious(inode.getLocalNameBytes(),inodeInCurrent);
  final int j=Diff.search(previous,inode);
  final INode expected=j < 0 ? null : previous.get(j);
  Assert.assertTrue(computed == expected);
}
{
  final int i=Diff.search(previous,inode);
  final INode inodeInPrevious=i < 0 ? null : previous.get(i);
  final INode computed=diff.accessCurrent(inode.getLocalNameBytes(),inodeInPrevious);
  final int j=Diff.search(current,inode);
  final INode expected=j < 0 ? null : current.get(j);
  Assert.assertTrue(computed == expected);
}
}
}
}
