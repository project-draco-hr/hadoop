{
  final int i=Diff.search(current,inode);
  Assert.assertTrue(i >= 0);
  final INodeDirectory oldinode=(INodeDirectory)current.get(i);
  final INodeDirectory newinode=oldinode.createSnapshotCopy().right;
  newinode.updateModificationTime(oldinode.getModificationTime() + 1);
  current.set(i,newinode);
  if (diff != null) {
    final boolean testUndo=RANDOM.nextInt(UNDO_TEST_P) == 0;
    String before=null;
    if (testUndo) {
      before=toString(diff);
    }
    final Triple<Integer,INode,Integer> undoInfo=diff.modify(oldinode,newinode);
    if (testUndo) {
      final String after=toString(diff);
      diff.undoModify(oldinode,newinode,undoInfo);
      assertDiff(before,diff);
      diff.modify(oldinode,newinode);
      assertDiff(after,diff);
    }
  }
}
