{
  if (pid != -1) {
    List<Integer> processList=getProcessList();
    Map<Integer,ProcessInfo> allProcessInfo=new HashMap<Integer,ProcessInfo>();
    Map<Integer,ProcessInfo> oldProcs=new HashMap<Integer,ProcessInfo>(processTree);
    processTree.clear();
    ProcessInfo me=null;
    for (    Integer proc : processList) {
      ProcessInfo pInfo=new ProcessInfo(proc);
      if (constructProcessInfo(pInfo,procfsDir) != null) {
        allProcessInfo.put(proc,pInfo);
        if (proc.equals(this.pid)) {
          me=pInfo;
          processTree.put(proc,pInfo);
        }
      }
    }
    if (me == null) {
      return this;
    }
    for (    Map.Entry<Integer,ProcessInfo> entry : allProcessInfo.entrySet()) {
      Integer pID=entry.getKey();
      if (pID != 1) {
        ProcessInfo pInfo=entry.getValue();
        ProcessInfo parentPInfo=allProcessInfo.get(pInfo.getPpid());
        if (parentPInfo != null) {
          parentPInfo.addChild(pInfo);
        }
      }
    }
    LinkedList<ProcessInfo> pInfoQueue=new LinkedList<ProcessInfo>();
    pInfoQueue.addAll(me.getChildren());
    while (!pInfoQueue.isEmpty()) {
      ProcessInfo pInfo=pInfoQueue.remove();
      if (!processTree.containsKey(pInfo.getPid())) {
        processTree.put(pInfo.getPid(),pInfo);
      }
      pInfoQueue.addAll(pInfo.getChildren());
    }
    for (    Map.Entry<Integer,ProcessInfo> procs : processTree.entrySet()) {
      ProcessInfo oldInfo=oldProcs.get(procs.getKey());
      if (oldInfo != null) {
        if (procs.getValue() != null) {
          procs.getValue().updateAge(oldInfo);
        }
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(this.toString());
    }
  }
  return this;
}
