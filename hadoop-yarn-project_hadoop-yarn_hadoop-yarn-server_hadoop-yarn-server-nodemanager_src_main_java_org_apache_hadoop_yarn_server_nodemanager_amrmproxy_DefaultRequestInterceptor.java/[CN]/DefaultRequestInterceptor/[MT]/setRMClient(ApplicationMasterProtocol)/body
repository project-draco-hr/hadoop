{
  if (rmClient instanceof DistributedSchedulingAMProtocol) {
    this.rmClient=(DistributedSchedulingAMProtocol)rmClient;
  }
 else {
    this.rmClient=new DistributedSchedulingAMProtocol(){
      @Override public RegisterApplicationMasterResponse registerApplicationMaster(      RegisterApplicationMasterRequest request) throws YarnException, IOException {
        return rmClient.registerApplicationMaster(request);
      }
      @Override public FinishApplicationMasterResponse finishApplicationMaster(      FinishApplicationMasterRequest request) throws YarnException, IOException {
        return rmClient.finishApplicationMaster(request);
      }
      @Override public AllocateResponse allocate(      AllocateRequest request) throws YarnException, IOException {
        return rmClient.allocate(request);
      }
      @Override public RegisterDistributedSchedulingAMResponse registerApplicationMasterForDistributedScheduling(      RegisterApplicationMasterRequest request) throws YarnException, IOException {
        throw new IOException("Not Supported !!");
      }
      @Override public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(      DistributedSchedulingAllocateRequest request) throws YarnException, IOException {
        throw new IOException("Not Supported !!");
      }
    }
;
  }
}
