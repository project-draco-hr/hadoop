{
  FileSystem fs=FileSystem.get(cache,conf);
  FileSystem localFs=FileSystem.getLocal(conf);
  Path parchive=null;
  if (isArchive) {
    parchive=new Path(cacheStatus.localizedLoadPath,new Path(cacheStatus.localizedLoadPath.getName()));
  }
 else {
    parchive=cacheStatus.localizedLoadPath;
  }
  if (!localFs.mkdirs(parchive.getParent())) {
    throw new IOException("Mkdirs failed to create directory " + cacheStatus.localizedLoadPath.toString());
  }
  String cacheId=cache.getPath();
  fs.copyToLocalFile(new Path(cacheId),parchive);
  if (isArchive) {
    String tmpArchive=parchive.toString().toLowerCase();
    File srcFile=new File(parchive.toString());
    File destDir=new File(parchive.getParent().toString());
    LOG.info(String.format("Extracting %s to %s",srcFile.toString(),destDir.toString()));
    if (tmpArchive.endsWith(".jar")) {
      RunJar.unJar(srcFile,destDir);
    }
 else     if (tmpArchive.endsWith(".zip")) {
      FileUtil.unZip(srcFile,destDir);
    }
 else     if (isTarFile(tmpArchive)) {
      FileUtil.unTar(srcFile,destDir);
    }
 else {
      LOG.warn(String.format("Cache file %s specified as archive, but not valid extension.",srcFile.toString()));
    }
  }
  long cacheSize=FileUtil.getDU(new File(parchive.getParent().toString()));
  cacheStatus.size=cacheSize;
  baseDirManager.addCacheUpdate(cacheStatus);
  setPermissions(conf,cacheStatus,isPublic);
  cacheStatus.mtime=getTimestamp(conf,cache);
  LOG.info(String.format("Cached %s as %s",cache.toString(),cacheStatus.localizedLoadPath));
  return cacheStatus.localizedLoadPath;
}
