{
  Throwable cause=se.getCause();
  if (cause == null) {
    throw new IOException(se);
  }
 else {
    if (cause instanceof RemoteException) {
      RemoteException re=(RemoteException)cause;
      Class<?> realClass=null;
      try {
        realClass=Class.forName(re.getClassName());
      }
 catch (      ClassNotFoundException cnf) {
        throw instantiateException(YarnRemoteException.class,re);
      }
      if (YarnRemoteException.class.isAssignableFrom(realClass)) {
        throw instantiateException(realClass.asSubclass(YarnRemoteException.class),re);
      }
 else       if (IOException.class.isAssignableFrom(realClass)) {
        throw instantiateException(realClass.asSubclass(IOException.class),re);
      }
 else {
        throw re;
      }
    }
 else     if (cause instanceof IOException) {
      throw (IOException)cause;
    }
 else {
      throw new IOException(se);
    }
  }
}
