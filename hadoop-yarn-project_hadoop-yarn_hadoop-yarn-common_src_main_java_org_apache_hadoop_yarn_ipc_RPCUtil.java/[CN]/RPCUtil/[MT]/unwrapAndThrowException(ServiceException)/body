{
  if (se.getCause() instanceof RemoteException) {
    try {
      RemoteException re=(RemoteException)se.getCause();
      Class<?> realClass=Class.forName(re.getClassName());
      if (YarnRemoteException.class.isAssignableFrom(realClass)) {
        Constructor<? extends YarnRemoteException> cn=realClass.asSubclass(YarnRemoteException.class).getConstructor(String.class);
        cn.setAccessible(true);
        YarnRemoteException ex=cn.newInstance(re.getMessage());
        ex.initCause(re);
        return ex;
      }
 else {
        throw ((RemoteException)se.getCause()).unwrapRemoteException(YarnRemoteExceptionPBImpl.class);
      }
    }
 catch (    IOException e1) {
      throw new UndeclaredThrowableException(e1);
    }
catch (    Exception ex) {
      throw new UndeclaredThrowableException((RemoteException)se.getCause());
    }
  }
 else   if (se.getCause() instanceof YarnRemoteException) {
    return (YarnRemoteException)se.getCause();
  }
 else   if (se.getCause() instanceof UndeclaredThrowableException) {
    throw (UndeclaredThrowableException)se.getCause();
  }
 else {
    throw new UndeclaredThrowableException(se);
  }
}
