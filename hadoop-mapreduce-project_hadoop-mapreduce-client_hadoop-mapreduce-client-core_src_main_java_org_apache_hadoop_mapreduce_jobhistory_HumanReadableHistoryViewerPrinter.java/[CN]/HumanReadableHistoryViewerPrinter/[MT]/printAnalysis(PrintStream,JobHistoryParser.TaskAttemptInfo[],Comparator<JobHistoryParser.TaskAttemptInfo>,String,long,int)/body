{
  Arrays.sort(tasks,cmp);
  JobHistoryParser.TaskAttemptInfo min=tasks[tasks.length - 1];
  StringBuilder details=new StringBuilder();
  details.append("\nTime taken by best performing ");
  details.append(taskType).append(" task ");
  details.append(min.getAttemptId().getTaskID().toString()).append(": ");
  if ("map".equals(taskType)) {
    details.append(StringUtils.formatTimeDiff(min.getFinishTime(),min.getStartTime()));
  }
 else   if ("shuffle".equals(taskType)) {
    details.append(StringUtils.formatTimeDiff(min.getShuffleFinishTime(),min.getStartTime()));
  }
 else {
    details.append(StringUtils.formatTimeDiff(min.getFinishTime(),min.getShuffleFinishTime()));
  }
  details.append("\nAverage time taken by ");
  details.append(taskType).append(" tasks: ");
  details.append(StringUtils.formatTimeDiff(avg,0));
  details.append("\nWorse performing ");
  details.append(taskType).append(" tasks: ");
  details.append("\nTaskId\t\tTimetaken");
  ps.println(details);
  for (int i=0; i < showTasks && i < tasks.length; i++) {
    details.setLength(0);
    details.append(tasks[i].getAttemptId().getTaskID()).append(" ");
    if ("map".equals(taskType)) {
      details.append(StringUtils.formatTimeDiff(tasks[i].getFinishTime(),tasks[i].getStartTime()));
    }
 else     if ("shuffle".equals(taskType)) {
      details.append(StringUtils.formatTimeDiff(tasks[i].getShuffleFinishTime(),tasks[i].getStartTime()));
    }
 else {
      details.append(StringUtils.formatTimeDiff(tasks[i].getFinishTime(),tasks[i].getShuffleFinishTime()));
    }
    ps.println(details);
  }
}
