{
  String stdout=FileUtil.makeShellPath(stdoutFilename);
  String stderr=FileUtil.makeShellPath(stderrFilename);
  StringBuffer mergedCmd=new StringBuffer();
  if (!Shell.WINDOWS) {
    mergedCmd.append(" export JVM_PID=`echo $$` ; ");
  }
  if (setup != null && setup.size() > 0) {
    mergedCmd.append(addCommand(setup,false));
    mergedCmd.append(";");
  }
  if (tailLength > 0) {
    mergedCmd.append("(");
  }
 else   if (ProcessTree.isSetsidAvailable && useSetsid && !Shell.WINDOWS) {
    mergedCmd.append("exec setsid ");
  }
 else {
    mergedCmd.append("exec ");
  }
  mergedCmd.append(addCommand(cmd,true));
  mergedCmd.append(" < /dev/null ");
  if (tailLength > 0) {
    mergedCmd.append(" | ");
    mergedCmd.append(tailCommand);
    mergedCmd.append(" -c ");
    mergedCmd.append(tailLength);
    mergedCmd.append(" >> ");
    mergedCmd.append(stdout);
    mergedCmd.append(" ; exit $PIPESTATUS ) 2>&1 | ");
    mergedCmd.append(tailCommand);
    mergedCmd.append(" -c ");
    mergedCmd.append(tailLength);
    mergedCmd.append(" >> ");
    mergedCmd.append(stderr);
    mergedCmd.append(" ; exit $PIPESTATUS");
  }
 else {
    mergedCmd.append(" 1>> ");
    mergedCmd.append(stdout);
    mergedCmd.append(" 2>> ");
    mergedCmd.append(stderr);
  }
  return mergedCmd.toString();
}
