{
  Configuration conf=getConfig();
  userRsrc=new ConcurrentHashMap<String,String>();
  secretManager=new JobTokenSecretManager();
  recoverState(conf);
  ServerBootstrap bootstrap=new ServerBootstrap(selector);
  try {
    pipelineFact=new HttpPipelineFactory(conf);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  bootstrap.setPipelineFactory(pipelineFact);
  port=conf.getInt(SHUFFLE_PORT_CONFIG_KEY,DEFAULT_SHUFFLE_PORT);
  Channel ch=bootstrap.bind(new InetSocketAddress(port));
  accepted.add(ch);
  port=((InetSocketAddress)ch.getLocalAddress()).getPort();
  conf.set(SHUFFLE_PORT_CONFIG_KEY,Integer.toString(port));
  pipelineFact.SHUFFLE.setPort(port);
  LOG.info(getName() + " listening on port " + port);
  super.serviceStart();
  sslFileBufferSize=conf.getInt(SUFFLE_SSL_FILE_BUFFER_SIZE_KEY,DEFAULT_SUFFLE_SSL_FILE_BUFFER_SIZE);
  connectionKeepAliveEnabled=conf.getBoolean(SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED,DEFAULT_SHUFFLE_CONNECTION_KEEP_ALIVE_ENABLED);
  connectionKeepAliveTimeOut=Math.max(1,conf.getInt(SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT,DEFAULT_SHUFFLE_CONNECTION_KEEP_ALIVE_TIME_OUT));
  mapOutputMetaInfoCacheSize=Math.max(1,conf.getInt(SHUFFLE_MAPOUTPUT_META_INFO_CACHE_SIZE,DEFAULT_SHUFFLE_MAPOUTPUT_META_INFO_CACHE_SIZE));
}
