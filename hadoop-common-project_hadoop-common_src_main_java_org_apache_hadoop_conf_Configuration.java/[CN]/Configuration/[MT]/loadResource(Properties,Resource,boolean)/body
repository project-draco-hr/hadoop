{
  String name=UNKNOWN_RESOURCE;
  try {
    Object resource=wrapper.getResource();
    name=wrapper.getName();
    DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
    docBuilderFactory.setIgnoringComments(true);
    docBuilderFactory.setNamespaceAware(true);
    try {
      docBuilderFactory.setXIncludeAware(true);
    }
 catch (    UnsupportedOperationException e) {
      LOG.error("Failed to set setXIncludeAware(true) for parser " + docBuilderFactory + ":"+ e,e);
    }
    DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();
    Document doc=null;
    Element root=null;
    boolean returnCachedProperties=false;
    if (resource instanceof URL) {
      doc=parse(builder,(URL)resource);
    }
 else     if (resource instanceof String) {
      URL url=getResource((String)resource);
      doc=parse(builder,url);
    }
 else     if (resource instanceof Path) {
      File file=new File(((Path)resource).toUri().getPath()).getAbsoluteFile();
      if (file.exists()) {
        if (!quiet) {
          LOG.debug("parsing File " + file);
        }
        doc=parse(builder,new BufferedInputStream(new FileInputStream(file)),((Path)resource).toString());
      }
    }
 else     if (resource instanceof InputStream) {
      doc=parse(builder,(InputStream)resource,null);
      returnCachedProperties=true;
    }
 else     if (resource instanceof Properties) {
      overlay(properties,(Properties)resource);
    }
 else     if (resource instanceof Element) {
      root=(Element)resource;
    }
    if (doc == null && root == null) {
      if (quiet)       return null;
      throw new RuntimeException(resource + " not found");
    }
    if (root == null) {
      root=doc.getDocumentElement();
    }
    Properties toAddTo=properties;
    if (returnCachedProperties) {
      toAddTo=new Properties();
    }
    if (!"configuration".equals(root.getTagName()))     LOG.fatal("bad conf file: top-level element not <configuration>");
    NodeList props=root.getChildNodes();
    DeprecationContext deprecations=deprecationContext.get();
    for (int i=0; i < props.getLength(); i++) {
      Node propNode=props.item(i);
      if (!(propNode instanceof Element))       continue;
      Element prop=(Element)propNode;
      if ("configuration".equals(prop.getTagName())) {
        loadResource(toAddTo,new Resource(prop,name),quiet);
        continue;
      }
      if (!"property".equals(prop.getTagName()))       LOG.warn("bad conf file: element not <property>");
      NodeList fields=prop.getChildNodes();
      String attr=null;
      String value=null;
      boolean finalParameter=false;
      LinkedList<String> source=new LinkedList<String>();
      for (int j=0; j < fields.getLength(); j++) {
        Node fieldNode=fields.item(j);
        if (!(fieldNode instanceof Element))         continue;
        Element field=(Element)fieldNode;
        if ("name".equals(field.getTagName()) && field.hasChildNodes())         attr=StringInterner.weakIntern(((Text)field.getFirstChild()).getData().trim());
        if ("value".equals(field.getTagName()) && field.hasChildNodes())         value=StringInterner.weakIntern(((Text)field.getFirstChild()).getData());
        if ("final".equals(field.getTagName()) && field.hasChildNodes())         finalParameter="true".equals(((Text)field.getFirstChild()).getData());
        if ("source".equals(field.getTagName()) && field.hasChildNodes())         source.add(StringInterner.weakIntern(((Text)field.getFirstChild()).getData()));
      }
      source.add(name);
      if (attr != null) {
        if (deprecations.getDeprecatedKeyMap().containsKey(attr)) {
          DeprecatedKeyInfo keyInfo=deprecations.getDeprecatedKeyMap().get(attr);
          keyInfo.clearAccessed();
          for (          String key : keyInfo.newKeys) {
            loadProperty(toAddTo,name,key,value,finalParameter,source.toArray(new String[source.size()]));
          }
        }
 else {
          loadProperty(toAddTo,name,attr,value,finalParameter,source.toArray(new String[source.size()]));
        }
      }
    }
    if (returnCachedProperties) {
      overlay(properties,toAddTo);
      return new Resource(toAddTo,name);
    }
    return null;
  }
 catch (  IOException e) {
    LOG.fatal("error parsing conf " + name,e);
    throw new RuntimeException(e);
  }
catch (  DOMException e) {
    LOG.fatal("error parsing conf " + name,e);
    throw new RuntimeException(e);
  }
catch (  SAXException e) {
    LOG.fatal("error parsing conf " + name,e);
    throw new RuntimeException(e);
  }
catch (  ParserConfigurationException e) {
    LOG.fatal("error parsing conf " + name,e);
    throw new RuntimeException(e);
  }
}
