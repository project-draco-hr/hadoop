{
  while (true) {
    try {
      if (Thread.currentThread().isInterrupted()) {
        throw new InterruptedException();
      }
      int cmd=WritableUtils.readVInt(inStream);
      LOG.debug("Handling uplink command " + cmd);
      if (cmd == MessageType.AUTHENTICATION_RESP.code) {
        String digest=Text.readString(inStream);
        authPending=!handler.authenticate(digest);
      }
 else       if (authPending) {
        LOG.warn("Message " + cmd + " received before authentication is "+ "complete. Ignoring");
        continue;
      }
 else       if (cmd == MessageType.OUTPUT.code) {
        readObject(key);
        readObject(value);
        handler.output(key,value);
      }
 else       if (cmd == MessageType.PARTITIONED_OUTPUT.code) {
        int part=WritableUtils.readVInt(inStream);
        readObject(key);
        readObject(value);
        handler.partitionedOutput(part,key,value);
      }
 else       if (cmd == MessageType.STATUS.code) {
        handler.status(Text.readString(inStream));
      }
 else       if (cmd == MessageType.PROGRESS.code) {
        handler.progress(inStream.readFloat());
      }
 else       if (cmd == MessageType.REGISTER_COUNTER.code) {
        int id=WritableUtils.readVInt(inStream);
        String group=Text.readString(inStream);
        String name=Text.readString(inStream);
        handler.registerCounter(id,group,name);
      }
 else       if (cmd == MessageType.INCREMENT_COUNTER.code) {
        int id=WritableUtils.readVInt(inStream);
        long amount=WritableUtils.readVLong(inStream);
        handler.incrementCounter(id,amount);
      }
 else       if (cmd == MessageType.DONE.code) {
        LOG.debug("Pipe child done");
        handler.done();
        return;
      }
 else {
        throw new IOException("Bad command code: " + cmd);
      }
    }
 catch (    InterruptedException e) {
      return;
    }
catch (    Throwable e) {
      LOG.error(StringUtils.stringifyException(e));
      handler.failed(e);
      return;
    }
  }
}
