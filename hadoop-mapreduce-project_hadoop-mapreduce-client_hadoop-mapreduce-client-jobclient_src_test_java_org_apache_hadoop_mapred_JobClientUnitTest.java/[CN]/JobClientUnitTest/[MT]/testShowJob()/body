{
  TestJobClient client=new TestJobClient(new JobConf());
  long startTime=System.currentTimeMillis();
  JobID jobID=new JobID(String.valueOf(startTime),12345);
  JobStatus mockJobStatus=mock(JobStatus.class);
  when(mockJobStatus.getJobID()).thenReturn(jobID);
  when(mockJobStatus.getJobName()).thenReturn(jobID.toString());
  when(mockJobStatus.getState()).thenReturn(JobStatus.State.RUNNING);
  when(mockJobStatus.getStartTime()).thenReturn(startTime);
  when(mockJobStatus.getUsername()).thenReturn("mockuser");
  when(mockJobStatus.getQueue()).thenReturn("mockqueue");
  when(mockJobStatus.getPriority()).thenReturn(JobPriority.NORMAL);
  when(mockJobStatus.getNumUsedSlots()).thenReturn(1);
  when(mockJobStatus.getNumReservedSlots()).thenReturn(1);
  when(mockJobStatus.getUsedMem()).thenReturn(1024);
  when(mockJobStatus.getReservedMem()).thenReturn(512);
  when(mockJobStatus.getNeededMem()).thenReturn(2048);
  when(mockJobStatus.getSchedulingInfo()).thenReturn("NA");
  Job mockJob=mock(Job.class);
  when(mockJob.getTaskReports(isA(TaskType.class))).thenReturn(new TaskReport[5]);
  Cluster mockCluster=mock(Cluster.class);
  when(mockCluster.getJob(jobID)).thenReturn(mockJob);
  client.setCluster(mockCluster);
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  client.displayJobList(new JobStatus[]{mockJobStatus},new PrintWriter(out));
  String commandLineOutput=out.toString();
  System.out.println(commandLineOutput);
  Assert.assertTrue(commandLineOutput.contains("Total jobs:1"));
  verify(mockJobStatus,atLeastOnce()).getJobID();
  verify(mockJobStatus).getState();
  verify(mockJobStatus).getStartTime();
  verify(mockJobStatus).getUsername();
  verify(mockJobStatus).getQueue();
  verify(mockJobStatus).getPriority();
  verify(mockJobStatus).getNumUsedSlots();
  verify(mockJobStatus).getNumReservedSlots();
  verify(mockJobStatus).getUsedMem();
  verify(mockJobStatus).getReservedMem();
  verify(mockJobStatus).getNeededMem();
  verify(mockJobStatus).getSchedulingInfo();
  verify(mockCluster,never()).getJob(jobID);
  verify(mockJob,never()).getTaskReports(isA(TaskType.class));
}
