{
  NLineInputFormat format=new NLineInputFormat();
  List<InputSplit> splits=format.getSplits(job);
  int count=0;
  for (int i=0; i < splits.size(); i++) {
    assertEquals("There are no split locations",0,splits.get(i).getLocations().length);
    TaskAttemptContext context=MapReduceTestUtil.createDummyMapTaskAttemptContext(job.getConfiguration());
    RecordReader<LongWritable,Text> reader=format.createRecordReader(splits.get(i),context);
    Class<?> clazz=reader.getClass();
    assertEquals("reader class is LineRecordReader.",LineRecordReader.class,clazz);
    MapContext<LongWritable,Text,LongWritable,Text> mcontext=new MapContextImpl<LongWritable,Text,LongWritable,Text>(job.getConfiguration(),context.getTaskAttemptID(),reader,null,null,MapReduceTestUtil.createDummyReporter(),splits.get(i));
    reader.initialize(splits.get(i),mcontext);
    try {
      count=0;
      while (reader.nextKeyValue()) {
        count++;
      }
    }
  finally {
      reader.close();
    }
    if (i == splits.size() - 1) {
      assertEquals("number of lines in split(" + i + ") is wrong",lastN,count);
    }
 else {
      assertEquals("number of lines in split(" + i + ") is wrong",expectedN,count);
    }
  }
}
