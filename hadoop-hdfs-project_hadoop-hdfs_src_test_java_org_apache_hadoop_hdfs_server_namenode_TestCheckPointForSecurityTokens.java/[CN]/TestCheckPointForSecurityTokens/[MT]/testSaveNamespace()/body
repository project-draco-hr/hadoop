{
  DistributedFileSystem fs=null;
  try {
    Configuration conf=new HdfsConfiguration();
    conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,true);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    FSNamesystem namesystem=cluster.getNamesystem();
    String renewer=UserGroupInformation.getLoginUser().getUserName();
    Token<DelegationTokenIdentifier> token1=namesystem.getDelegationToken(new Text(renewer));
    Token<DelegationTokenIdentifier> token2=namesystem.getDelegationToken(new Text(renewer));
    DFSAdmin admin=new DFSAdmin(conf);
    String[] args=new String[]{"-saveNamespace"};
    NameNode nn=cluster.getNameNode();
    for (    StorageDirectory sd : nn.getFSImage().getStorage().dirIterable(null)) {
      EditLogFile log=FSImageTestUtil.findLatestEditsLog(sd);
      assertTrue(log.isInProgress());
      log.scanLog(Long.MAX_VALUE,true);
      long numTransactions=(log.getLastTxId() - log.getFirstTxId()) + 1;
      assertEquals("In-progress log " + log + " should have 5 transactions",5,numTransactions);
      ;
    }
    fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
    try {
      admin.run(args);
    }
 catch (    Exception e) {
      throw new IOException(e.getMessage());
    }
    for (    StorageDirectory sd : nn.getFSImage().getStorage().dirIterable(null)) {
      EditLogFile log=FSImageTestUtil.findLatestEditsLog(sd);
      assertTrue(log.isInProgress());
      log.scanLog(Long.MAX_VALUE,true);
      long numTransactions=(log.getLastTxId() - log.getFirstTxId()) + 1;
      assertEquals("In-progress log " + log + " should only have START txn",1,numTransactions);
    }
    cluster.shutdown();
    cluster=null;
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build();
    cluster.waitActive();
    try {
      renewToken(token1);
      renewToken(token2);
    }
 catch (    IOException e) {
      fail("Could not renew or cancel the token");
    }
    namesystem=cluster.getNamesystem();
    Token<DelegationTokenIdentifier> token3=namesystem.getDelegationToken(new Text(renewer));
    Token<DelegationTokenIdentifier> token4=namesystem.getDelegationToken(new Text(renewer));
    cluster.shutdown();
    cluster=null;
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build();
    cluster.waitActive();
    namesystem=cluster.getNamesystem();
    Token<DelegationTokenIdentifier> token5=namesystem.getDelegationToken(new Text(renewer));
    try {
      renewToken(token1);
      renewToken(token2);
      renewToken(token3);
      renewToken(token4);
      renewToken(token5);
    }
 catch (    IOException e) {
      fail("Could not renew or cancel the token");
    }
    cluster.shutdown();
    cluster=null;
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build();
    cluster.waitActive();
    namesystem=cluster.getNamesystem();
    try {
      renewToken(token1);
      cancelToken(token1);
      renewToken(token2);
      cancelToken(token2);
      renewToken(token3);
      cancelToken(token3);
      renewToken(token4);
      cancelToken(token4);
      renewToken(token5);
      cancelToken(token5);
    }
 catch (    IOException e) {
      fail("Could not renew or cancel the token");
    }
  }
  finally {
    if (fs != null)     fs.close();
    if (cluster != null)     cluster.shutdown();
  }
}
