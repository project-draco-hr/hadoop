{
  JobConf conf=mrCluster.createJobConf();
  conf.setJobName("name \\Evalue]");
  conf.setInputFormat(TextInputFormat.class);
  conf.setOutputKeyClass(LongWritable.class);
  conf.setOutputValueClass(Text.class);
  conf.setMapperClass(FailMapper.class);
  conf.setOutputFormat(NullOutputFormat.class);
  conf.setJobPriority(JobPriority.HIGH);
  conf.setLong(JobContext.MAP_MAX_ATTEMPTS,1);
  conf.setNumReduceTasks(0);
  final Path inDir=new Path("./wc/input");
  final Path outDir=new Path("./wc/output");
  FileInputFormat.setInputPaths(conf,inDir);
  FileOutputFormat.setOutputPath(conf,outDir);
  clean(fs,outDir);
  makeInput(inDir,conf);
  JobClient jobClient=new JobClient(conf);
  RunningJob job=jobClient.submitJob(conf);
  JobID jobId=job.getID();
  job.waitForCompletion();
  assertTrue(job.isComplete());
  assertEquals(JobStatus.FAILED,job.getJobState());
  assertFalse("Missing event notification on failing a running job",myListener.contains(jobId));
  TestJobDirCleanup.verifyJobDirCleanup(mrCluster,numTT,job.getID());
}
