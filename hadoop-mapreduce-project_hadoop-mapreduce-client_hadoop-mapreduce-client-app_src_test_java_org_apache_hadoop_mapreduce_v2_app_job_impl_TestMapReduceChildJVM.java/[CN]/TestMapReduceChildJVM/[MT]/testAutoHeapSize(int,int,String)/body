{
  JobConf conf=new JobConf();
  float heapRatio=conf.getFloat(MRJobConfig.HEAP_MEMORY_MB_RATIO,MRJobConfig.DEFAULT_HEAP_MEMORY_MB_RATIO);
  Assert.assertNull("Default map java opts!",conf.get(MRJobConfig.MAP_JAVA_OPTS));
  Assert.assertNull("Default reduce java opts!",conf.get(MRJobConfig.REDUCE_JAVA_OPTS));
  if (mapMb > 0) {
    conf.setInt(MRJobConfig.MAP_MEMORY_MB,mapMb);
  }
 else {
    mapMb=conf.getMemoryRequired(TaskType.MAP);
  }
  if (redMb > 0) {
    conf.setInt(MRJobConfig.REDUCE_MEMORY_MB,redMb);
  }
 else {
    redMb=conf.getMemoryRequired(TaskType.REDUCE);
  }
  if (xmxArg != null) {
    conf.set(MRJobConfig.MAP_JAVA_OPTS,xmxArg);
    conf.set(MRJobConfig.REDUCE_JAVA_OPTS,xmxArg);
  }
  MyMRApp app=new MyMRApp(1,1,true,this.getClass().getName(),true);
  Job job=app.submit(conf);
  app.waitForState(job,JobState.SUCCEEDED);
  app.verifyCompleted();
  for (  String cmd : app.launchCmdList) {
    final boolean isMap=cmd.contains("_m_");
    int heapMb;
    if (xmxArg == null) {
      heapMb=(int)(Math.ceil((isMap ? mapMb : redMb) * heapRatio));
    }
 else {
      final String javaOpts=conf.get(isMap ? MRJobConfig.MAP_JAVA_OPTS : MRJobConfig.REDUCE_JAVA_OPTS);
      heapMb=JobConf.parseMaximumHeapSizeMB(javaOpts);
    }
    Assert.assertEquals("Incorrect heapsize in the command opts",heapMb,JobConf.parseMaximumHeapSizeMB(cmd));
  }
}
