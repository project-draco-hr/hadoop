{
  super.postInit();
  Instrumentation instrumentation=getServer().get(Instrumentation.class);
  instrumentation.addVariable(INSTRUMENTATION_GROUP,"unmanaged.fs",new Instrumentation.Variable<Integer>(){
    @Override public Integer getValue(){
      return unmanagedFileSystems.get();
    }
  }
);
  instrumentation.addSampler(INSTRUMENTATION_GROUP,"unmanaged.fs",60,new Instrumentation.Variable<Long>(){
    @Override public Long getValue(){
      return (long)unmanagedFileSystems.get();
    }
  }
);
  Scheduler scheduler=getServer().get(Scheduler.class);
  int purgeInterval=getServiceConfig().getInt(FS_CACHE_PURGE_FREQUENCY,60);
  purgeTimeout=getServiceConfig().getLong(FS_CACHE_PURGE_TIMEOUT,60);
  purgeTimeout=(purgeTimeout > 0) ? purgeTimeout : 0;
  if (purgeTimeout > 0) {
    scheduler.schedule(new FileSystemCachePurger(),purgeInterval,purgeInterval,TimeUnit.SECONDS);
  }
}
