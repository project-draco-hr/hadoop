{
  if (machineNodes == null) {
    Node root=getClusterTopology();
    SortedSet<MachineNode> mNodes=new TreeSet<MachineNode>();
    SortedSet<RackNode> rNodes=new TreeSet<RackNode>();
    Deque<Node> unvisited=new ArrayDeque<Node>();
    Deque<Integer> distUnvisited=new ArrayDeque<Integer>();
    unvisited.add(root);
    distUnvisited.add(0);
    for (Node n=unvisited.poll(); n != null; n=unvisited.poll()) {
      int distance=distUnvisited.poll();
      if (n instanceof RackNode) {
        rNodes.add((RackNode)n);
        mNodes.addAll(((RackNode)n).getMachinesInRack());
        if (distance + 1 > maximumDistance) {
          maximumDistance=distance + 1;
        }
      }
 else       if (n instanceof MachineNode) {
        mNodes.add((MachineNode)n);
        if (distance > maximumDistance) {
          maximumDistance=distance;
        }
      }
 else {
        for (        Node child : n.getChildren()) {
          unvisited.addFirst(child);
          distUnvisited.addFirst(distance + 1);
        }
      }
    }
    machineNodes=Collections.unmodifiableSortedSet(mNodes);
    rackNodes=Collections.unmodifiableSortedSet(rNodes);
  }
}
