{
  TimelineEntities te=new TimelineEntities();
  te.addEntity(TestFlowDataGenerator.getEntity1());
  HBaseTimelineWriterImpl hbi=null;
  Configuration c1=util.getConfiguration();
  String cluster="testWriteFlowRunMinMaxToHBase_cluster1";
  String user="testWriteFlowRunMinMaxToHBase_user1";
  String flow="testing_flowRun_flow_name";
  String flowVersion="CF7022C10F1354";
  long runid=1002345678919L;
  String appName="application_100000000000_1111";
  long minStartTs=10000000000000L;
  long greaterStartTs=30000000000000L;
  long endTs=1439750690000L;
  TimelineEntity entityMinStartTime=TestFlowDataGenerator.getEntityMinStartTime(minStartTs);
  try {
    hbi=new HBaseTimelineWriterImpl(c1);
    hbi.init(c1);
    hbi.write(cluster,user,flow,flowVersion,runid,appName,te);
    te=new TimelineEntities();
    te.addEntity(entityMinStartTime);
    appName="application_100000000000_3333";
    hbi.write(cluster,user,flow,flowVersion,runid,appName,te);
    TimelineEntity entityMaxEndTime=TestFlowDataGenerator.getEntityMaxEndTime(endTs);
    te=new TimelineEntities();
    te.addEntity(entityMaxEndTime);
    appName="application_100000000000_4444";
    hbi.write(cluster,user,flow,flowVersion,runid,appName,te);
    TimelineEntity entityGreaterStartTime=TestFlowDataGenerator.getEntityGreaterStartTime(greaterStartTs);
    te=new TimelineEntities();
    te.addEntity(entityGreaterStartTime);
    appName="application_1000000000000000_2222";
    hbi.write(cluster,user,flow,flowVersion,runid,appName,te);
    hbi.flush();
  }
  finally {
    hbi.close();
  }
  Connection conn=ConnectionFactory.createConnection(c1);
  Table table1=conn.getTable(TableName.valueOf(FlowRunTable.DEFAULT_TABLE_NAME));
  byte[] startRow=FlowRunRowKey.getRowKey(cluster,user,flow,runid);
  Get g=new Get(startRow);
  g.addColumn(FlowRunColumnFamily.INFO.getBytes(),FlowRunColumn.MIN_START_TIME.getColumnQualifierBytes());
  g.addColumn(FlowRunColumnFamily.INFO.getBytes(),FlowRunColumn.MAX_END_TIME.getColumnQualifierBytes());
  Result r1=table1.get(g);
  assertNotNull(r1);
  assertTrue(!r1.isEmpty());
  Map<byte[],byte[]> values=r1.getFamilyMap(FlowRunColumnFamily.INFO.getBytes());
  assertEquals(2,r1.size());
  long starttime=Bytes.toLong(values.get(FlowRunColumn.MIN_START_TIME.getColumnQualifierBytes()));
  assertEquals(minStartTs,starttime);
  assertEquals(endTs,Bytes.toLong(values.get(FlowRunColumn.MAX_END_TIME.getColumnQualifierBytes())));
  HBaseTimelineReaderImpl hbr=null;
  try {
    hbr=new HBaseTimelineReaderImpl();
    hbr.init(c1);
    hbr.start();
    TimelineEntity entity=hbr.getEntity(user,cluster,flow,runid,null,TimelineEntityType.YARN_FLOW_RUN.toString(),null,null,null,null);
    assertTrue(TimelineEntityType.YARN_FLOW_RUN.matches(entity.getType()));
    FlowRunEntity flowRun=(FlowRunEntity)entity;
    assertEquals(minStartTs,flowRun.getStartTime());
    assertEquals(endTs,flowRun.getMaxEndTime());
  }
  finally {
    hbr.close();
  }
}
