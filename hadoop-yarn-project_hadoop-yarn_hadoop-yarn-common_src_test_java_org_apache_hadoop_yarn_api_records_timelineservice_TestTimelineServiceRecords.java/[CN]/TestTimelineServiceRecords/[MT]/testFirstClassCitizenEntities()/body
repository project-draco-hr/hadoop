{
  UserEntity user=new UserEntity();
  user.setId("test user id");
  QueueEntity queue=new QueueEntity();
  queue.setId("test queue id");
  ClusterEntity cluster=new ClusterEntity();
  cluster.setId("test cluster id");
  FlowEntity flow1=new FlowEntity();
  flow1.setUser(user.getId());
  flow1.setName("test flow name 1");
  flow1.setVersion("test flow version 1");
  flow1.setRunId(1L);
  FlowEntity flow2=new FlowEntity();
  flow2.setUser(user.getId());
  flow2.setName("test flow name 2");
  flow2.setVersion("test flow version 2");
  flow2.setRunId(2L);
  ApplicationEntity app1=new ApplicationEntity();
  app1.setId(ApplicationId.newInstance(0,1).toString());
  app1.setQueue(queue.getId());
  ApplicationEntity app2=new ApplicationEntity();
  app2.setId(ApplicationId.newInstance(0,2).toString());
  app2.setQueue(queue.getId());
  ApplicationAttemptEntity appAttempt=new ApplicationAttemptEntity();
  appAttempt.setId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(0,1),1).toString());
  ContainerEntity container=new ContainerEntity();
  container.setId(ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(0,1),1),1).toString());
  cluster.addChild(TimelineEntityType.YARN_FLOW.toString(),flow1.getId());
  flow1.setParent(TimelineEntityType.YARN_CLUSTER.toString(),cluster.getId());
  flow1.addChild(TimelineEntityType.YARN_FLOW.toString(),flow2.getId());
  flow2.setParent(TimelineEntityType.YARN_FLOW.toString(),flow1.getId());
  flow2.addChild(TimelineEntityType.YARN_APPLICATION.toString(),app1.getId());
  flow2.addChild(TimelineEntityType.YARN_APPLICATION.toString(),app2.getId());
  app1.setParent(TimelineEntityType.YARN_FLOW.toString(),flow2.getId());
  app1.addChild(TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString(),appAttempt.getId());
  appAttempt.setParent(TimelineEntityType.YARN_APPLICATION.toString(),app1.getId());
  app2.setParent(TimelineEntityType.YARN_FLOW.toString(),flow2.getId());
  appAttempt.addChild(TimelineEntityType.YARN_CONTAINER.toString(),container.getId());
  container.setParent(TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString(),appAttempt.getId());
  LOG.info(TimelineUtils.dumpTimelineRecordtoJSON(cluster,true));
  LOG.info(TimelineUtils.dumpTimelineRecordtoJSON(flow1,true));
  LOG.info(TimelineUtils.dumpTimelineRecordtoJSON(flow2,true));
  LOG.info(TimelineUtils.dumpTimelineRecordtoJSON(app1,true));
  LOG.info(TimelineUtils.dumpTimelineRecordtoJSON(app2,true));
  LOG.info(TimelineUtils.dumpTimelineRecordtoJSON(appAttempt,true));
  LOG.info(TimelineUtils.dumpTimelineRecordtoJSON(container,true));
  Assert.assertNotNull(app1.getParent());
  Assert.assertEquals(flow2.getType(),app1.getParent().getType());
  Assert.assertEquals(flow2.getId(),app1.getParent().getId());
  app1.addInfo(ApplicationEntity.PARENT_INFO_KEY,"invalid parent object");
  try {
    app1.getParent();
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertTrue(e instanceof YarnRuntimeException);
    Assert.assertTrue(e.getMessage().contains("Parent info is invalid identifier object"));
  }
  Assert.assertNotNull(app1.getChildren());
  Assert.assertEquals(1,app1.getChildren().size());
  Assert.assertEquals(appAttempt.getType(),app1.getChildren().iterator().next().getType());
  Assert.assertEquals(appAttempt.getId(),app1.getChildren().iterator().next().getId());
  app1.addInfo(ApplicationEntity.CHILDREN_INFO_KEY,Collections.singletonList("invalid children set"));
  try {
    app1.getChildren();
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertTrue(e instanceof YarnRuntimeException);
    Assert.assertTrue(e.getMessage().contains("Children info is invalid identifier set"));
  }
  app1.addInfo(ApplicationEntity.CHILDREN_INFO_KEY,Collections.singleton("invalid child object"));
  try {
    app1.getChildren();
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertTrue(e instanceof YarnRuntimeException);
    Assert.assertTrue(e.getMessage().contains("Children info contains invalid identifier object"));
  }
}
