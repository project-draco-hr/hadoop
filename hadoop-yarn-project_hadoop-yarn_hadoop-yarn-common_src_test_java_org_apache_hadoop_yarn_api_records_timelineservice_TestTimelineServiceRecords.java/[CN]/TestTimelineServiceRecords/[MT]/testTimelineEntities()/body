{
  TimelineEntity entity=new TimelineEntity();
  entity.setType("test type 1");
  entity.setId("test id 1");
  entity.addInfo("test info key 1","test info value 1");
  entity.addInfo("test info key 2",Arrays.asList("test info value 2","test info value 3"));
  entity.addInfo("test info key 3",true);
  Assert.assertTrue(entity.getInfo().get("test info key 3") instanceof Boolean);
  entity.addConfig("test config key 1","test config value 1");
  entity.addConfig("test config key 2","test config value 2");
  TimelineMetric metric1=new TimelineMetric(TimelineMetric.Type.TIME_SERIES);
  metric1.setId("test metric id 1");
  metric1.addValue(1L,1.0F);
  metric1.addValue(3L,3.0D);
  metric1.addValue(2L,2);
  Assert.assertEquals(TimelineMetric.Type.TIME_SERIES,metric1.getType());
  Iterator<Map.Entry<Long,Number>> itr=metric1.getValues().entrySet().iterator();
  Map.Entry<Long,Number> entry=itr.next();
  Assert.assertEquals(new Long(3L),entry.getKey());
  Assert.assertEquals(3.0D,entry.getValue());
  entry=itr.next();
  Assert.assertEquals(new Long(2L),entry.getKey());
  Assert.assertEquals(2,entry.getValue());
  entry=itr.next();
  Assert.assertEquals(new Long(1L),entry.getKey());
  Assert.assertEquals(1.0F,entry.getValue());
  Assert.assertFalse(itr.hasNext());
  entity.addMetric(metric1);
  TimelineMetric metric2=new TimelineMetric(TimelineMetric.Type.SINGLE_VALUE);
  metric2.setId("test metric id 1");
  metric2.addValue(3L,(short)3);
  Assert.assertEquals(TimelineMetric.Type.SINGLE_VALUE,metric2.getType());
  Assert.assertTrue(metric2.getValues().values().iterator().next() instanceof Short);
  Map<Long,Number> points=new HashMap<>();
  points.put(4L,4.0D);
  points.put(5L,5.0D);
  try {
    metric2.setValues(points);
    Assert.fail();
  }
 catch (  IllegalArgumentException e) {
    Assert.assertTrue(e.getMessage().contains("Values cannot contain more than one point in"));
  }
  try {
    metric2.addValues(points);
    Assert.fail();
  }
 catch (  IllegalArgumentException e) {
    Assert.assertTrue(e.getMessage().contains("Values cannot contain more than one point in"));
  }
  entity.addMetric(metric2);
  TimelineMetric metric3=new TimelineMetric(TimelineMetric.Type.SINGLE_VALUE);
  metric3.setId("test metric id 1");
  metric3.addValue(4L,(short)4);
  Assert.assertEquals("metric3 should equal to metric2! ",metric3,metric2);
  Assert.assertNotEquals("metric1 should not equal to metric2! ",metric1,metric2);
  TimelineEvent event1=new TimelineEvent();
  event1.setId("test event id 1");
  event1.addInfo("test info key 1","test info value 1");
  event1.addInfo("test info key 2",Arrays.asList("test info value 2","test info value 3"));
  event1.addInfo("test info key 3",true);
  Assert.assertTrue(event1.getInfo().get("test info key 3") instanceof Boolean);
  event1.setTimestamp(1L);
  entity.addEvent(event1);
  TimelineEvent event2=new TimelineEvent();
  event2.setId("test event id 2");
  event2.addInfo("test info key 1","test info value 1");
  event2.addInfo("test info key 2",Arrays.asList("test info value 2","test info value 3"));
  event2.addInfo("test info key 3",true);
  Assert.assertTrue(event2.getInfo().get("test info key 3") instanceof Boolean);
  event2.setTimestamp(2L);
  entity.addEvent(event2);
  Assert.assertFalse("event1 should not equal to event2! ",event1.equals(event2));
  TimelineEvent event3=new TimelineEvent();
  event3.setId("test event id 1");
  event3.setTimestamp(1L);
  Assert.assertEquals("event1 should equal to event3! ",event3,event1);
  Assert.assertNotEquals("event1 should not equal to event2! ",event1,event2);
  entity.setCreatedTime(0L);
  entity.addRelatesToEntity("test type 2","test id 2");
  entity.addRelatesToEntity("test type 3","test id 3");
  entity.addIsRelatedToEntity("test type 4","test id 4");
  entity.addIsRelatedToEntity("test type 5","test id 5");
  LOG.info(TimelineUtils.dumpTimelineRecordtoJSON(entity,true));
  TimelineEntities entities=new TimelineEntities();
  TimelineEntity entity1=new TimelineEntity();
  entities.addEntity(entity1);
  TimelineEntity entity2=new TimelineEntity();
  entities.addEntity(entity2);
  LOG.info(TimelineUtils.dumpTimelineRecordtoJSON(entities,true));
  Assert.assertFalse("entity 1 should not be valid without type and id",entity1.isValid());
  entity1.setId("test id 2");
  entity1.setType("test type 2");
  entity2.setId("test id 1");
  entity2.setType("test type 1");
  Assert.assertEquals("Timeline entity should equal to entity2! ",entity,entity2);
  Assert.assertNotEquals("entity1 should not equal to entity! ",entity1,entity);
  Assert.assertEquals("entity should be less than entity1! ",entity1.compareTo(entity),1);
  Assert.assertEquals("entity's hash code should be -28727840 but not " + entity.hashCode(),entity.hashCode(),-28727840);
}
