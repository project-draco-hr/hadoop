{
  And and=new And();
  PathData pathData=mock(PathData.class);
  Expression first=mock(Expression.class);
  when(first.apply(pathData,-1)).thenReturn(Result.PASS);
  Expression second=mock(Expression.class);
  when(second.apply(pathData,-1)).thenReturn(Result.PASS);
  Deque<Expression> children=new LinkedList<Expression>();
  children.add(second);
  children.add(first);
  and.addChildren(children);
  assertEquals(Result.PASS,and.apply(pathData,-1));
  verify(first).apply(pathData,-1);
  verify(second).apply(pathData,-1);
  verifyNoMoreInteractions(first);
  verifyNoMoreInteractions(second);
}
