{
  Configuration conf=new Configuration();
  conf.set(FS_TRASH_INTERVAL_KEY,"0.2");
  conf.setClass("fs.file.impl",TestLFS.class,FileSystem.class);
  conf.set(FS_TRASH_CHECKPOINT_INTERVAL_KEY,"0.1");
  Trash trash=new Trash(conf);
  Runnable emptier=trash.getEmptier();
  Thread emptierThread=new Thread(emptier);
  emptierThread.start();
  FileSystem fs=FileSystem.getLocal(conf);
  conf.set("fs.defaultFS",fs.getUri().toString());
  FsShell shell=new FsShell();
  shell.setConf(conf);
  shell.init();
  Path myPath=new Path(TEST_DIR,"test/mkdirs");
  mkdir(fs,myPath);
  int fileIndex=0;
  Set<String> checkpoints=new HashSet<String>();
  while (true) {
    Path myFile=new Path(TEST_DIR,"test/mkdirs/myFile" + fileIndex++);
    writeFile(fs,myFile,10);
    String[] args=new String[2];
    args[0]="-rm";
    args[1]=myFile.toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
    Path trashDir=shell.getCurrentTrashDir();
    FileStatus files[]=fs.listStatus(trashDir.getParent());
    for (    FileStatus file : files) {
      String fileName=file.getPath().getName();
      checkpoints.add(fileName);
    }
    if (checkpoints.size() == 4) {
      assertTrue(checkpoints.size() > files.length);
      break;
    }
    Thread.sleep(5000);
  }
  emptierThread.interrupt();
  emptierThread.join();
}
