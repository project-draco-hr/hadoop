{
  FileSystem fs=FileSystem.get(conf);
  conf.setLong(FS_TRASH_INTERVAL_KEY,0);
  assertFalse(new Trash(conf).isEnabled());
  conf.setLong(FS_TRASH_INTERVAL_KEY,10);
  assertTrue(new Trash(conf).isEnabled());
  FsShell shell=new FsShell();
  shell.setConf(conf);
  if (trashRoot == null) {
    trashRoot=shell.getCurrentTrashDir();
  }
  if (trashRootFs == null) {
    trashRootFs=fs;
  }
  Path myPath=new Path(base,"test/mkdirs");
  mkdir(fs,myPath);
  Path myFile=new Path(base,"test/mkdirs/myFile");
  writeFile(fs,myFile,10);
{
    String[] args=new String[1];
    args[0]="-expunge";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
{
    String[] args=new String[2];
    args[0]="-rm";
    args[1]=myFile.toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
    checkTrash(trashRootFs,trashRoot,fs.makeQualified(myFile));
  }
  writeFile(fs,myFile,10);
{
    String[] args=new String[2];
    args[0]="-rm";
    args[1]=new Path(base,"test/mkdirs/myFile").toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
  writeFile(fs,myFile,10);
{
    String[] args=new String[2];
    args[0]="-rmr";
    args[1]=new Path(base,"test/mkdirs").toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
  mkdir(fs,myPath);
{
    String[] args=new String[2];
    args[0]="-rmr";
    args[1]=new Path(base,"test/mkdirs").toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
{
    Path toErase=new Path(trashRoot,"toErase");
    int retVal=-1;
    writeFile(trashRootFs,toErase,10);
    try {
      retVal=shell.run(new String[]{"-rm",toErase.toString()});
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(retVal == 0);
    checkNotInTrash(trashRootFs,trashRoot,toErase.toString());
    checkNotInTrash(trashRootFs,trashRoot,toErase.toString() + ".1");
  }
{
    String[] args=new String[1];
    args[0]="-expunge";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
  checkNotInTrash(trashRootFs,trashRoot,new Path(base,"test/mkdirs/myFile").toString());
  mkdir(fs,myPath);
  writeFile(fs,myFile,10);
{
    String[] args=new String[2];
    args[0]="-rm";
    args[1]=myFile.toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
    checkTrash(trashRootFs,trashRoot,myFile);
    args=new String[2];
    args[0]="-rmr";
    args[1]=myPath.toString();
    val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
    checkTrash(trashRootFs,trashRoot,myPath);
  }
{
    String[] args=new String[2];
    args[0]="-rmr";
    args[1]=trashRoot.getParent().getParent().toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertEquals("exit code",1,val);
    assertTrue(trashRootFs.exists(trashRoot));
  }
  mkdir(fs,myPath);
  writeFile(fs,myFile,10);
{
    String[] args=new String[3];
    args[0]="-rm";
    args[1]="-skipTrash";
    args[2]=myFile.toString();
    int val=-1;
    try {
      assertEquals("-expunge failed",0,shell.run(new String[]{"-expunge"}));
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertFalse("Expected TrashRoot (" + trashRoot + ") to exist in file system:"+ trashRootFs.getUri(),trashRootFs.exists(trashRoot));
    assertFalse(fs.exists(myFile));
    assertTrue(val == 0);
  }
  mkdir(fs,myPath);
  writeFile(fs,myFile,10);
{
    String[] args=new String[3];
    args[0]="-rmr";
    args[1]="-skipTrash";
    args[2]=myPath.toString();
    int val=-1;
    try {
      assertEquals(0,shell.run(new String[]{"-expunge"}));
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertFalse(trashRootFs.exists(trashRoot));
    assertFalse(fs.exists(myPath));
    assertFalse(fs.exists(myFile));
    assertTrue(val == 0);
  }
{
    int val=-1;
    mkdir(fs,myPath);
    try {
      assertEquals(0,shell.run(new String[]{"-expunge"}));
    }
 catch (    Exception e) {
      System.err.println("Exception raised from fs expunge " + e.getLocalizedMessage());
    }
    myFile=new Path(base,"test/mkdirs/myFile");
    String[] args=new String[]{"-rm",myFile.toString()};
    int num_runs=10;
    for (int i=0; i < num_runs; i++) {
      writeFile(fs,myFile,10);
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
      }
      assertTrue(val == 0);
    }
    Path trashDir=new Path(trashRoot.toUri().getPath() + myFile.getParent().toUri().getPath());
    System.out.println("Deleting same myFile: myFile.parent=" + myFile.getParent().toUri().getPath() + "; trashroot="+ trashRoot.toUri().getPath()+ "; trashDir="+ trashDir.toUri().getPath());
    int count=countSameDeletedFiles(fs,trashDir,myFile);
    System.out.println("counted " + count + " files "+ myFile.getName()+ "* in "+ trashDir);
    assertTrue(count == num_runs);
  }
{
    String[] args=new String[2];
    args[0]="-rmr";
    args[1]="/";
    PrintStream stdout=System.out;
    PrintStream stderr=System.err;
    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();
    PrintStream newOut=new PrintStream(byteStream);
    System.setOut(newOut);
    System.setErr(newOut);
    try {
      shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    String output=byteStream.toString();
    System.setOut(stdout);
    System.setErr(stderr);
    assertTrue("skipTrash wasn't suggested as remedy to failed rm command" + " or we deleted / even though we could not get server defaults",output.indexOf("Consider using -skipTrash option") != -1 || output.indexOf("Failed to determine server trash configuration") != -1);
  }
{
    long trashInterval=conf.getLong(FS_TRASH_INTERVAL_KEY,FS_TRASH_INTERVAL_DEFAULT);
    long now=Time.now();
    DateFormat oldCheckpointFormat=new SimpleDateFormat("yyMMddHHmm");
    Path dirToDelete=new Path(trashRoot.getParent(),oldCheckpointFormat.format(now - (trashInterval * 60 * 1000) - 1));
    Path dirToKeep=new Path(trashRoot.getParent(),oldCheckpointFormat.format(now));
    mkdir(trashRootFs,dirToDelete);
    mkdir(trashRootFs,dirToKeep);
    int rc=-1;
    try {
      rc=shell.run(new String[]{"-expunge"});
    }
 catch (    Exception e) {
      System.err.println("Exception raised from fs expunge " + e.getLocalizedMessage());
    }
    assertEquals(0,rc);
    assertFalse("old checkpoint format not recognized",trashRootFs.exists(dirToDelete));
    assertTrue("old checkpoint format directory should not be removed",trashRootFs.exists(dirToKeep));
  }
}
