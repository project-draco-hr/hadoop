{
  Path test=new Path(testRootTempDir,"testContextStatus");
  int numMaps=1;
  Job job=MapReduceTestUtil.createJob(createJobConf(),new Path(test,"in"),new Path(test,"out"),numMaps,0);
  job.setMapperClass(MyMapper.class);
  job.waitForCompletion(true);
  assertTrue("Job failed",job.isSuccessful());
  TaskReport[] reports=job.getTaskReports(TaskType.MAP);
  assertEquals(numMaps,reports.length);
  assertEquals(myStatus,reports[0].getState());
  int numReduces=1;
  job=MapReduceTestUtil.createJob(createJobConf(),new Path(test,"in"),new Path(test,"out"),numMaps,numReduces);
  job.setMapperClass(DataCopyMapper.class);
  job.setReducerClass(DataCopyReducer.class);
  job.setMapOutputKeyClass(Text.class);
  job.setMapOutputValueClass(Text.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setMaxMapAttempts(1);
  job.setMaxReduceAttempts(0);
  job.waitForCompletion(true);
  assertTrue("Job failed",job.isSuccessful());
  reports=job.getTaskReports(TaskType.MAP);
  assertEquals(numMaps,reports.length);
  assertEquals("map > sort",reports[0].getState());
  reports=job.getTaskReports(TaskType.REDUCE);
  assertEquals(numReduces,reports.length);
  assertEquals("reduce > reduce",reports[0].getState());
}
