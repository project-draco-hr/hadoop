{
  AWSCredentialsProvider credentials;
  String className=credClass.getName();
  if (!AWSCredentialsProvider.class.isAssignableFrom(credClass)) {
    throw new IOException("Class " + credClass + " "+ NOT_AWS_PROVIDER);
  }
  try {
    LOG.debug("Credential provider class is {}",className);
    try {
      credentials=(AWSCredentialsProvider)credClass.getDeclaredConstructor(URI.class,Configuration.class).newInstance(uri,conf);
    }
 catch (    NoSuchMethodException|SecurityException e) {
      credentials=(AWSCredentialsProvider)credClass.getDeclaredConstructor().newInstance();
    }
  }
 catch (  NoSuchMethodException|SecurityException e) {
    throw new IOException(String.format("%s " + CONSTRUCTOR_EXCEPTION + ".  A class specified in %s must provide an accessible constructor "+ "accepting URI and Configuration, or an accessible default "+ "constructor.",className,AWS_CREDENTIALS_PROVIDER),e);
  }
catch (  ReflectiveOperationException|IllegalArgumentException e) {
    throw new IOException(className + " " + INSTANTIATION_EXCEPTION+ ".",e);
  }
  LOG.debug("Using {} for {}.",credentials,uri);
  return credentials;
}
