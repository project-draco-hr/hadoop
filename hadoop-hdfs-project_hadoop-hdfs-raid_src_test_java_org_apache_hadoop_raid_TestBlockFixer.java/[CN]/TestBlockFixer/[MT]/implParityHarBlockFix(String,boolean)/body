{
  LOG.info("Test " + testName + " started.");
  long blockSize=8192L;
  int stripeLength=3;
  mySetup(stripeLength,0);
  Path file1=new Path("/user/dhruba/raidtest/file1");
  TestRaidDfs.createTestFilePartialLastBlock(fileSys,file1,1,20,blockSize);
  LOG.info("Test " + testName + " created test files");
  Configuration localConf=new Configuration(conf);
  localConf.setLong("har.block.size",blockSize * 2);
  localConf.set(RaidNode.RAID_LOCATION_KEY,"/destraid");
  localConf.setInt("raid.blockfix.interval",1000);
  if (local) {
    localConf.set("raid.blockfix.classname","org.apache.hadoop.raid.LocalBlockFixer");
  }
 else {
    localConf.set("raid.blockfix.classname","org.apache.hadoop.raid.DistBlockFixer");
  }
  localConf.setLong("raid.blockfix.filespertask",2L);
  try {
    cnode=RaidNode.createRaidNode(null,localConf);
    Path harDirectory=new Path("/destraid/user/dhruba/raidtest/raidtest" + RaidNode.HAR_SUFFIX);
    long start=Time.now();
    while (Time.now() - start < 1000 * 120) {
      if (fileSys.exists(harDirectory)) {
        break;
      }
      LOG.info("Test " + testName + " waiting for har");
      Thread.sleep(1000);
    }
    Path partFile=new Path(harDirectory,"part-0");
    long partCRC=getCRC(fileSys,partFile);
    FileStatus partStat=fileSys.getFileStatus(partFile);
    DistributedFileSystem dfs=(DistributedFileSystem)fileSys;
    LocatedBlocks locs=RaidDFSUtil.getBlockLocations(dfs,partFile.toUri().getPath(),0,partStat.getLen());
    assertEquals("wrong number of har blocks",4,locs.getLocatedBlocks().size());
    cnode.stop();
    cnode.join();
    String[] corruptFiles=RaidDFSUtil.getCorruptFiles(dfs);
    assertEquals("no corrupt files expected",0,corruptFiles.length);
    assertEquals("filesFixed() should return 0 before fixing files",0,cnode.blockFixer.filesFixed());
    int[] corruptBlockIdxs=new int[]{0,3};
    for (    int idx : corruptBlockIdxs)     corruptBlock(locs.get(idx).getBlock());
    reportCorruptBlocks(dfs,partFile,corruptBlockIdxs,partStat.getBlockSize());
    corruptFiles=RaidDFSUtil.getCorruptFiles(dfs);
    assertEquals("file not corrupted",1,corruptFiles.length);
    assertEquals("wrong file corrupted",corruptFiles[0],partFile.toUri().getPath());
    cnode=RaidNode.createRaidNode(null,localConf);
    start=Time.now();
    while (cnode.blockFixer.filesFixed() < 1 && Time.now() - start < 120000) {
      LOG.info("Test " + testName + " waiting for files to be fixed.");
      Thread.sleep(1000);
    }
    assertEquals("file not fixed",1,cnode.blockFixer.filesFixed());
    long checkCRC=getCRC(fileSys,partFile);
    assertEquals("file not fixed",partCRC,checkCRC);
  }
 catch (  Exception e) {
    LOG.info("Test " + testName + " Exception "+ e+ StringUtils.stringifyException(e));
    throw e;
  }
 finally {
    myTearDown();
  }
  LOG.info("Test " + testName + " completed.");
}
