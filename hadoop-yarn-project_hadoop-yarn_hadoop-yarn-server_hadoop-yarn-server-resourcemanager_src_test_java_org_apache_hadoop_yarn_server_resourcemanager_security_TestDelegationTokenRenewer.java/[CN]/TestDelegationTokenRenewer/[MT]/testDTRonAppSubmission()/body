{
  final Credentials credsx=new Credentials();
  final Token<DelegationTokenIdentifier> tokenx=mock(Token.class);
  when(tokenx.getKind()).thenReturn(new Text("HDFS_DELEGATION_TOKEN"));
  DelegationTokenIdentifier dtId1=new DelegationTokenIdentifier(new Text("user1"),new Text("renewer"),new Text("user1"));
  when(tokenx.decodeIdentifier()).thenReturn(dtId1);
  credsx.addToken(new Text("token"),tokenx);
  doReturn(true).when(tokenx).isManaged();
  doThrow(new IOException("boom")).when(tokenx).renew(any(Configuration.class));
  final DelegationTokenRenewer dtr=createNewDelegationTokenRenewer(conf,counter);
  RMContext mockContext=mock(RMContext.class);
  when(mockContext.getSystemCredentialsForApps()).thenReturn(new ConcurrentHashMap<ApplicationId,ByteBuffer>());
  ClientRMService mockClientRMService=mock(ClientRMService.class);
  when(mockContext.getClientRMService()).thenReturn(mockClientRMService);
  InetSocketAddress sockAddr=InetSocketAddress.createUnresolved("localhost",1234);
  when(mockClientRMService.getBindAddress()).thenReturn(sockAddr);
  dtr.setRMContext(mockContext);
  when(mockContext.getDelegationTokenRenewer()).thenReturn(dtr);
  dtr.init(conf);
  dtr.start();
  try {
    dtr.addApplicationSync(mock(ApplicationId.class),credsx,false,"user");
    fail("Catch IOException on app submission");
  }
 catch (  IOException e) {
    Assert.assertTrue(e.getMessage().contains(tokenx.toString()));
    Assert.assertTrue(e.getCause().toString().contains("boom"));
  }
}
