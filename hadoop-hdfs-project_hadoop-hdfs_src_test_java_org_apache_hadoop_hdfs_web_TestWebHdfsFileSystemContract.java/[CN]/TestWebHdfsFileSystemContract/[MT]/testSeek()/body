{
  final Path dir=new Path("/test/testSeek");
  assertTrue(fs.mkdirs(dir));
{
    final Path zero=new Path(dir,"zero");
    fs.create(zero).close();
    int count=0;
    final FSDataInputStream in=fs.open(zero);
    for (; in.read() != -1; count++)     ;
    in.close();
    assertEquals(0,count);
  }
  final byte[] mydata=new byte[1 << 20];
  new Random().nextBytes(mydata);
  final Path p=new Path(dir,"file");
  FSDataOutputStream out=fs.create(p,false,4096,(short)3,1L << 17);
  out.write(mydata,0,mydata.length);
  out.close();
  final int one_third=mydata.length / 3;
  final int two_third=one_third * 2;
{
    final int offset=one_third;
    final int len=mydata.length - offset;
    final byte[] buf=new byte[len];
    final FSDataInputStream in=fs.open(p);
    in.seek(offset);
    in.readFully(buf);
    in.close();
    for (int i=0; i < buf.length; i++) {
      assertEquals("Position " + i + ", offset="+ offset+ ", length="+ len,mydata[i + offset],buf[i]);
    }
  }
{
    final int offset=two_third;
    final int len=mydata.length - offset;
    final byte[] buf=new byte[len];
    final FSDataInputStream in=fs.open(p);
    in.readFully(offset,buf);
    in.close();
    for (int i=0; i < buf.length; i++) {
      assertEquals("Position " + i + ", offset="+ offset+ ", length="+ len,mydata[i + offset],buf[i]);
    }
  }
}
