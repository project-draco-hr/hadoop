{
  Iterator<StorageDirectory> itEdits=storage.dirIterator(NameNodeDirType.EDITS);
  if (!itEdits.hasNext())   throw new IOException("Could not locate checkpoint directories");
  StorageDirectory sdEdits=itEdits.next();
  int numEdits=0;
  File jSpoolFile=getJSpoolFile(sdEdits);
  long startTime=now();
  if (jSpoolFile.exists()) {
    EditLogFileInputStream edits=new EditLogFileInputStream(jSpoolFile);
    BufferedInputStream bin=new BufferedInputStream(edits);
    DataInputStream in=new DataInputStream(bin);
    FSEditLogLoader logLoader=new FSEditLogLoader(namesystem);
    int logVersion=logLoader.readLogVersion(in);
    Checksum checksum=null;
    if (LayoutVersion.supports(Feature.EDITS_CHESKUM,logVersion)) {
      checksum=FSEditLog.getChecksum();
      in=new DataInputStream(new CheckedInputStream(bin,checksum));
    }
    numEdits+=logLoader.loadEditRecords(logVersion,in,checksum,false);
    jsState=JSpoolState.WAIT;
    numEdits+=logLoader.loadEditRecords(logVersion,in,checksum,true);
    getFSNamesystem().dir.updateCountForINodeWithQuota();
    edits.close();
  }
  FSImage.LOG.info("Edits file " + jSpoolFile.getCanonicalPath() + " of size "+ jSpoolFile.length()+ " edits # "+ numEdits+ " loaded in "+ (now() - startTime) / 1000 + " seconds.");
  editLog.revertFileStreams(STORAGE_JSPOOL_DIR + "/" + STORAGE_JSPOOL_FILE);
  resetVersion(false,storage.getImageDigest());
synchronized (this) {
    jsState=JSpoolState.OFF;
    notifyAll();
  }
  for (Iterator<StorageDirectory> it=storage.dirIterator(); it.hasNext(); ) {
    StorageDirectory sd=it.next();
    storage.moveLastCheckpoint(sd);
  }
}
