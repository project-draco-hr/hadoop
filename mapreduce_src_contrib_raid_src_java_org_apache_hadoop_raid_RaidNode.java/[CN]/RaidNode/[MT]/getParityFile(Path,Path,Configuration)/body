{
  Path srcParent=srcPath.getParent();
  FileSystem fsDest=destPathPrefix.getFileSystem(conf);
  FileSystem fsSrc=srcPath.getFileSystem(conf);
  FileStatus srcStatus=null;
  try {
    srcStatus=fsSrc.getFileStatus(srcPath);
  }
 catch (  java.io.FileNotFoundException e) {
    return null;
  }
  Path outDir=destPathPrefix;
  if (srcParent != null) {
    if (srcParent.getParent() == null) {
      outDir=destPathPrefix;
    }
 else {
      outDir=new Path(destPathPrefix,makeRelative(srcParent));
    }
  }
  Path outPath=getOriginalParityFile(destPathPrefix,srcPath);
  String harDirName=srcParent.getName() + HAR_SUFFIX;
  Path HarPath=new Path(outDir,harDirName);
  if (fsDest.exists(HarPath)) {
    URI HarPathUri=HarPath.toUri();
    Path inHarPath=new Path("har://",HarPathUri.getPath() + "/" + outPath.toUri().getPath());
    FileSystem fsHar=new HarFileSystem(fsDest);
    fsHar.initialize(inHarPath.toUri(),conf);
    if (fsHar.exists(inHarPath)) {
      FileStatus inHar=fsHar.getFileStatus(inHarPath);
      if (inHar.getModificationTime() == srcStatus.getModificationTime()) {
        return new ParityFilePair(inHarPath,fsHar);
      }
    }
  }
  try {
    FileStatus outHar=fsDest.getFileStatus(outPath);
    if (outHar.getModificationTime() == srcStatus.getModificationTime()) {
      return new ParityFilePair(outPath,fsDest);
    }
  }
 catch (  java.io.FileNotFoundException e) {
  }
  return null;
}
