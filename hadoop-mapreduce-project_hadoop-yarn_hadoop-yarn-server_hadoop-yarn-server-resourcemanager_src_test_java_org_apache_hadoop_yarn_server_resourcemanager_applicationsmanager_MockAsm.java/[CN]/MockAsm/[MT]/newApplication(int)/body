{
  final ApplicationAttemptId appAttemptId=newAppAttemptID(newAppID(i),0);
  final Container masterContainer=Records.newRecord(Container.class);
  ContainerId containerId=Records.newRecord(ContainerId.class);
  containerId.setApplicationAttemptId(appAttemptId);
  masterContainer.setId(containerId);
  masterContainer.setNodeHttpAddress("node:port");
  final String user=newUserName();
  final String name=newAppName();
  final String queue=newQueue();
  final long start=System.currentTimeMillis() - (int)(Math.random() * DT);
  final long finish=Math.random() < 0.5 ? 0 : System.currentTimeMillis() + (int)(Math.random() * DT);
  return new ApplicationBase(){
    @Override public ApplicationId getApplicationId(){
      return appAttemptId.getApplicationId();
    }
    @Override public String getUser(){
      return user;
    }
    @Override public String getName(){
      return name;
    }
    @Override public String getQueue(){
      return queue;
    }
    @Override public long getStartTime(){
      return start;
    }
    @Override public long getFinishTime(){
      return finish;
    }
    @Override public String getTrackingUrl(){
      return null;
    }
    @Override public RMAppState getState(){
      return RMAppState.RUNNING;
    }
    @Override public StringBuilder getDiagnostics(){
      return new StringBuilder();
    }
    @Override public float getProgress(){
      return (float)Math.random();
    }
    @Override public FinalApplicationStatus getFinalApplicationStatus(){
      return FinalApplicationStatus.UNDEFINED;
    }
  }
;
}
