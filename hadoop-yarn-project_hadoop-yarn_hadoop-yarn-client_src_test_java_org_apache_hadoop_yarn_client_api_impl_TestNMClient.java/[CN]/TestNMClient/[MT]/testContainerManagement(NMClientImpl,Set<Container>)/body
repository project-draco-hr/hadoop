{
  int size=containers.size();
  int i=0;
  for (  Container container : containers) {
    try {
      nmClient.getContainerStatus(container.getId(),container.getNodeId(),container.getContainerToken());
      fail("Exception is expected");
    }
 catch (    YarnException e) {
      assertTrue("The thrown exception is not expected",e.getMessage().contains("is not handled by this NodeManager"));
    }
    try {
      nmClient.stopContainer(container.getId(),container.getNodeId(),container.getContainerToken());
      fail("Exception is expected");
    }
 catch (    YarnException e) {
      if (!e.getMessage().contains("is either not started yet or already stopped")) {
        throw (AssertionError)(new AssertionError("Exception is not expected: " + e).initCause(e));
      }
    }
    Credentials ts=new Credentials();
    DataOutputBuffer dob=new DataOutputBuffer();
    ts.writeTokenStorageToStream(dob);
    ByteBuffer securityTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    ContainerLaunchContext clc=Records.newRecord(ContainerLaunchContext.class);
    clc.setTokens(securityTokens);
    try {
      nmClient.startContainer(container,clc);
    }
 catch (    YarnException e) {
      throw (AssertionError)(new AssertionError("Exception is not expected: " + e).initCause(e));
    }
    if (++i < size) {
      testGetContainerStatus(container,i,ContainerState.RUNNING,"",-1000);
      try {
        nmClient.stopContainer(container.getId(),container.getNodeId(),container.getContainerToken());
      }
 catch (      YarnException e) {
        throw (AssertionError)(new AssertionError("Exception is not expected: " + e).initCause(e));
      }
      testGetContainerStatus(container,i,ContainerState.COMPLETE,"Container killed by the ApplicationMaster.",143);
    }
  }
}
