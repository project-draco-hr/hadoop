{
  Resource capability=Resource.newInstance(1024,0);
  Priority priority=Priority.newInstance(0);
  String node=nodeReports.get(0).getNodeId().getHost();
  String rack=nodeReports.get(0).getRackName();
  String[] nodes=new String[]{node};
  String[] racks=new String[]{rack};
  for (int i=0; i < num; ++i) {
    rmClient.addContainerRequest(new ContainerRequest(capability,nodes,racks,priority,1));
  }
  int containersRequestedAny=rmClient.remoteRequestsTable.get(priority).get(ResourceRequest.ANY).get(capability).remoteRequest.getNumContainers();
  int allocatedContainerCount=0;
  int iterationsLeft=2;
  Set<Container> containers=new TreeSet<Container>();
  while (allocatedContainerCount < containersRequestedAny && iterationsLeft > 0) {
    AllocateResponse allocResponse=rmClient.allocate(0.1f);
    allocatedContainerCount+=allocResponse.getAllocatedContainers().size();
    for (    Container container : allocResponse.getAllocatedContainers()) {
      containers.add(container);
    }
    if (!allocResponse.getNMTokens().isEmpty()) {
      for (      NMToken token : allocResponse.getNMTokens()) {
        nmTokens.put(token.getNodeId().toString(),token.getToken());
      }
    }
    if (allocatedContainerCount < containersRequestedAny) {
      sleep(1000);
    }
    --iterationsLeft;
  }
  return containers;
}
