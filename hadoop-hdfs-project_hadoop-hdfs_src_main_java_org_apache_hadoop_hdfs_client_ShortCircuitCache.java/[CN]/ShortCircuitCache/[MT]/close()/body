{
  try {
    lock.lock();
    if (closed)     return;
    closed=true;
    LOG.info(this + ": closing");
    maxNonMmappedEvictableLifespanMs=0;
    maxEvictableMmapedSize=0;
    IOUtils.cleanup(LOG,cacheCleaner);
    while (true) {
      Entry<Long,ShortCircuitReplica> entry=evictable.firstEntry();
      if (entry == null)       break;
      purge(entry.getValue());
    }
    while (true) {
      Entry<Long,ShortCircuitReplica> entry=evictableMmapped.firstEntry();
      if (entry == null)       break;
      purge(entry.getValue());
    }
  }
  finally {
    lock.unlock();
  }
}
