{
  Configuration conf=new Configuration();
  dispatcher=new DrainDispatcher();
  containerTokenIdentifierMap=new HashMap<ContainerId,ContainerTokenIdentifier>();
  dispatcher.init(conf);
  localizerBus=mock(EventHandler.class);
  launcherBus=mock(EventHandler.class);
  monitorBus=mock(EventHandler.class);
  auxBus=mock(EventHandler.class);
  containerBus=mock(EventHandler.class);
  logAggregationBus=mock(EventHandler.class);
  dispatcher.register(LocalizationEventType.class,localizerBus);
  dispatcher.register(ContainersLauncherEventType.class,launcherBus);
  dispatcher.register(ContainersMonitorEventType.class,monitorBus);
  dispatcher.register(AuxServicesEventType.class,auxBus);
  dispatcher.register(ContainerEventType.class,containerBus);
  dispatcher.register(LogHandlerEventType.class,logAggregationBus);
  context=mock(Context.class);
  when(context.getContainerTokenSecretManager()).thenReturn(new NMContainerTokenSecretManager(conf));
  MasterKey masterKey=new MasterKeyPBImpl();
  masterKey.setKeyId(123);
  masterKey.setBytes(ByteBuffer.wrap(new byte[]{(new Integer(123).byteValue())}));
  context.getContainerTokenSecretManager().setMasterKey(masterKey);
  this.user=user;
  this.appId=BuilderUtils.newApplicationId(timestamp,id);
  app=new ApplicationImpl(dispatcher,new ApplicationACLsManager(new Configuration()),this.user,appId,null,context);
  containers=new ArrayList<Container>();
  for (int i=0; i < numContainers; i++) {
    Container container=createMockedContainer(this.appId,i);
    containers.add(container);
    long currentTime=System.currentTimeMillis();
    ContainerTokenIdentifier identifier=new ContainerTokenIdentifier(container.getContainerId(),"","",null,currentTime + 2000,masterKey.getKeyId(),currentTime);
    containerTokenIdentifierMap.put(identifier.getContainerID(),identifier);
    context.getContainerTokenSecretManager().startContainerSuccessful(identifier);
    Assert.assertFalse(context.getContainerTokenSecretManager().isValidStartContainerRequest(identifier));
  }
  dispatcher.start();
}
