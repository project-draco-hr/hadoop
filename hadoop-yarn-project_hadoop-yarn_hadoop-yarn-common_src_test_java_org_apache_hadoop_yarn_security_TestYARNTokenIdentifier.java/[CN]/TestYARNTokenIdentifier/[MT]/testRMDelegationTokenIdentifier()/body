{
  Text owner=new Text("user1");
  Text renewer=new Text("user2");
  Text realUser=new Text("user3");
  long issueDate=1;
  long maxDate=2;
  int sequenceNumber=3;
  int masterKeyId=4;
  RMDelegationTokenIdentifier token=new RMDelegationTokenIdentifier(owner,renewer,realUser);
  token.setIssueDate(issueDate);
  token.setMaxDate(maxDate);
  token.setSequenceNumber(sequenceNumber);
  token.setMasterKeyId(masterKeyId);
  RMDelegationTokenIdentifier anotherToken=new RMDelegationTokenIdentifier();
  byte[] tokenContent=token.getBytes();
  DataInputBuffer dib=new DataInputBuffer();
  dib.reset(tokenContent,tokenContent.length);
  anotherToken.readFields(dib);
  Assert.assertEquals("Token is not the same after serialization " + "and deserialization.",token,anotherToken);
  Assert.assertEquals("owner from proto is not the same with original token",anotherToken.getOwner(),owner);
  Assert.assertEquals("renewer from proto is not the same with original token",anotherToken.getRenewer(),renewer);
  Assert.assertEquals("realUser from proto is not the same with original token",anotherToken.getRealUser(),realUser);
  Assert.assertEquals("issueDate from proto is not the same with original token",anotherToken.getIssueDate(),issueDate);
  Assert.assertEquals("maxDate from proto is not the same with original token",anotherToken.getMaxDate(),maxDate);
  Assert.assertEquals("sequenceNumber from proto is not the same with original token",anotherToken.getSequenceNumber(),sequenceNumber);
  Assert.assertEquals("masterKeyId from proto is not the same with original token",anotherToken.getMasterKeyId(),masterKeyId);
}
