{
  String[] pids={"100","200","300","400"};
  File procfsRootDir=new File(TEST_ROOT_DIR,"proc");
  try {
    setupProcfsRootDir(procfsRootDir);
    setupPidDirs(procfsRootDir,pids);
    ProcessStatInfo[] procInfos=new ProcessStatInfo[4];
    procInfos[0]=new ProcessStatInfo(new String[]{"100","proc1","1","100","100","100000","100"});
    procInfos[1]=new ProcessStatInfo(new String[]{"200","proc2","100","100","100","200000","200"});
    procInfos[2]=new ProcessStatInfo(new String[]{"300","proc3","1","300","300","300000","300"});
    procInfos[3]=new ProcessStatInfo(new String[]{"400","proc4","100","100","100","400000","400"});
    ProcessTreeSmapMemInfo[] memInfo=new ProcessTreeSmapMemInfo[4];
    memInfo[0]=new ProcessTreeSmapMemInfo("100");
    memInfo[1]=new ProcessTreeSmapMemInfo("200");
    memInfo[2]=new ProcessTreeSmapMemInfo("300");
    memInfo[3]=new ProcessTreeSmapMemInfo("400");
    createMemoryMappingInfo(memInfo);
    writeStatFiles(procfsRootDir,pids,procInfos,memInfo);
    ProcfsBasedProcessTree processTree=createProcessTree("100",procfsRootDir.getAbsolutePath(),new SystemClock());
    setSmapsInProceTree(processTree,smapEnabled);
    Assert.assertEquals("Virtual memory does not match",700000L,processTree.getVirtualMemorySize());
    Assert.assertEquals("Virtual memory (old API) does not match",700000L,processTree.getCumulativeVmem());
    String[] newPids={"500"};
    setupPidDirs(procfsRootDir,newPids);
    ProcessStatInfo[] newProcInfos=new ProcessStatInfo[1];
    newProcInfos[0]=new ProcessStatInfo(new String[]{"500","proc5","100","100","100","500000","500"});
    ProcessTreeSmapMemInfo[] newMemInfos=new ProcessTreeSmapMemInfo[1];
    newMemInfos[0]=new ProcessTreeSmapMemInfo("500");
    createMemoryMappingInfo(newMemInfos);
    writeStatFiles(procfsRootDir,newPids,newProcInfos,newMemInfos);
    processTree.updateProcessTree();
    Assert.assertEquals("vmem does not include new process",1200000L,processTree.getVirtualMemorySize());
    Assert.assertEquals("vmem (old API) does not include new process",1200000L,processTree.getCumulativeVmem());
    if (!smapEnabled) {
      long cumuRssMem=ProcfsBasedProcessTree.PAGE_SIZE > 0 ? 1200L * ProcfsBasedProcessTree.PAGE_SIZE : ResourceCalculatorProcessTree.UNAVAILABLE;
      Assert.assertEquals("rssmem does not include new process",cumuRssMem,processTree.getRssMemorySize());
      Assert.assertEquals("rssmem (old API) does not include new process",cumuRssMem,processTree.getCumulativeRssmem());
    }
 else {
      Assert.assertEquals("rssmem does not include new process",100 * KB_TO_BYTES * 4,processTree.getRssMemorySize());
      Assert.assertEquals("rssmem (old API) does not include new process",100 * KB_TO_BYTES * 4,processTree.getCumulativeRssmem());
    }
    Assert.assertEquals("vmem shouldn't have included new process",700000L,processTree.getVirtualMemorySize(1));
    Assert.assertEquals("vmem (old API) shouldn't have included new process",700000L,processTree.getCumulativeVmem(1));
    if (!smapEnabled) {
      long cumuRssMem=ProcfsBasedProcessTree.PAGE_SIZE > 0 ? 700L * ProcfsBasedProcessTree.PAGE_SIZE : ResourceCalculatorProcessTree.UNAVAILABLE;
      Assert.assertEquals("rssmem shouldn't have included new process",cumuRssMem,processTree.getRssMemorySize(1));
      Assert.assertEquals("rssmem (old API) shouldn't have included new process",cumuRssMem,processTree.getCumulativeRssmem(1));
    }
 else {
      Assert.assertEquals("rssmem shouldn't have included new process",100 * KB_TO_BYTES * 3,processTree.getRssMemorySize(1));
      Assert.assertEquals("rssmem (old API) shouldn't have included new process",100 * KB_TO_BYTES * 3,processTree.getCumulativeRssmem(1));
    }
    newPids=new String[]{"600"};
    setupPidDirs(procfsRootDir,newPids);
    newProcInfos=new ProcessStatInfo[1];
    newProcInfos[0]=new ProcessStatInfo(new String[]{"600","proc6","100","100","100","600000","600"});
    newMemInfos=new ProcessTreeSmapMemInfo[1];
    newMemInfos[0]=new ProcessTreeSmapMemInfo("600");
    createMemoryMappingInfo(newMemInfos);
    writeStatFiles(procfsRootDir,newPids,newProcInfos,newMemInfos);
    processTree.updateProcessTree();
    Assert.assertEquals("vmem shouldn't have included new processes",700000L,processTree.getVirtualMemorySize(2));
    Assert.assertEquals("vmem (old API) shouldn't have included new processes",700000L,processTree.getCumulativeVmem(2));
    if (!smapEnabled) {
      long cumuRssMem=ProcfsBasedProcessTree.PAGE_SIZE > 0 ? 700L * ProcfsBasedProcessTree.PAGE_SIZE : ResourceCalculatorProcessTree.UNAVAILABLE;
      Assert.assertEquals("rssmem shouldn't have included new processes",cumuRssMem,processTree.getRssMemorySize(2));
      Assert.assertEquals("rssmem (old API) shouldn't have included new processes",cumuRssMem,processTree.getCumulativeRssmem(2));
    }
 else {
      Assert.assertEquals("rssmem shouldn't have included new processes",100 * KB_TO_BYTES * 3,processTree.getRssMemorySize(2));
      Assert.assertEquals("rssmem (old API) shouldn't have included new processes",100 * KB_TO_BYTES * 3,processTree.getCumulativeRssmem(2));
    }
    Assert.assertEquals("vmem shouldn't have included new processes",1200000L,processTree.getVirtualMemorySize(1));
    Assert.assertEquals("vmem (old API) shouldn't have included new processes",1200000L,processTree.getCumulativeVmem(1));
    if (!smapEnabled) {
      long cumuRssMem=ProcfsBasedProcessTree.PAGE_SIZE > 0 ? 1200L * ProcfsBasedProcessTree.PAGE_SIZE : ResourceCalculatorProcessTree.UNAVAILABLE;
      Assert.assertEquals("rssmem shouldn't have included new processes",cumuRssMem,processTree.getRssMemorySize(1));
      Assert.assertEquals("rssmem (old API) shouldn't have included new processes",cumuRssMem,processTree.getCumulativeRssmem(1));
    }
 else {
      Assert.assertEquals("rssmem shouldn't have included new processes",100 * KB_TO_BYTES * 4,processTree.getRssMemorySize(1));
      Assert.assertEquals("rssmem (old API) shouldn't have included new processes",100 * KB_TO_BYTES * 4,processTree.getCumulativeRssmem(1));
    }
    Assert.assertEquals("Getting non-zero vmem for processes older than 3 iterations",0,processTree.getVirtualMemorySize(3));
    Assert.assertEquals("Getting non-zero vmem (old API) for processes older than 3 iterations",0,processTree.getCumulativeVmem(3));
    Assert.assertEquals("Getting non-zero rssmem for processes older than 3 iterations",0,processTree.getRssMemorySize(3));
    Assert.assertEquals("Getting non-zero rssmem (old API) for processes older than 3 iterations",0,processTree.getCumulativeRssmem(3));
  }
  finally {
    FileUtil.fullyDelete(procfsRootDir);
  }
}
