{
  String[] pids={"100","200","300","400","500","600"};
  File procfsRootDir=new File(TEST_ROOT_DIR,"proc");
  try {
    setupProcfsRootDir(procfsRootDir);
    setupPidDirs(procfsRootDir,pids);
    int numProcesses=pids.length;
    ProcessStatInfo[] procInfos=new ProcessStatInfo[numProcesses];
    procInfos[0]=new ProcessStatInfo(new String[]{"100","proc1","1","100","100","100000","100","1000","200"});
    procInfos[1]=new ProcessStatInfo(new String[]{"200","process two","100","100","100","200000","200","2000","400"});
    procInfos[2]=new ProcessStatInfo(new String[]{"300","proc3","200","100","100","300000","300","3000","600"});
    procInfos[3]=new ProcessStatInfo(new String[]{"400","proc4","200","100","100","400000","400","4000","800"});
    procInfos[4]=new ProcessStatInfo(new String[]{"500","proc5","400","100","100","400000","400","4000","800"});
    procInfos[5]=new ProcessStatInfo(new String[]{"600","proc6","1","1","1","400000","400","4000","800"});
    ProcessTreeSmapMemInfo[] memInfos=new ProcessTreeSmapMemInfo[6];
    memInfos[0]=new ProcessTreeSmapMemInfo("100");
    memInfos[1]=new ProcessTreeSmapMemInfo("200");
    memInfos[2]=new ProcessTreeSmapMemInfo("300");
    memInfos[3]=new ProcessTreeSmapMemInfo("400");
    memInfos[4]=new ProcessTreeSmapMemInfo("500");
    memInfos[5]=new ProcessTreeSmapMemInfo("600");
    String[] cmdLines=new String[numProcesses];
    cmdLines[0]="proc1 arg1 arg2";
    cmdLines[1]="process two arg3 arg4";
    cmdLines[2]="proc3 arg5 arg6";
    cmdLines[3]="proc4 arg7 arg8";
    cmdLines[4]="proc5 arg9 arg10";
    cmdLines[5]="proc6 arg11 arg12";
    createMemoryMappingInfo(memInfos);
    writeStatFiles(procfsRootDir,pids,procInfos,memInfos);
    writeCmdLineFiles(procfsRootDir,pids,cmdLines);
    ProcfsBasedProcessTree processTree=createProcessTree("100",procfsRootDir.getAbsolutePath(),SystemClock.getInstance());
    processTree.updateProcessTree();
    String processTreeDump=processTree.getProcessTreeDump();
    LOG.info("Process-tree dump follows: \n" + processTreeDump);
    Assert.assertTrue("Process-tree dump doesn't start with a proper header",processTreeDump.startsWith("\t|- PID PPID PGRPID SESSID CMD_NAME " + "USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) " + "RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n"));
    for (int i=0; i < 5; i++) {
      ProcessStatInfo p=procInfos[i];
      Assert.assertTrue("Process-tree dump doesn't contain the cmdLineDump of process " + p.pid,processTreeDump.contains("\t|- " + p.pid + " "+ p.ppid+ " "+ p.pgrpId+ " "+ p.session+ " ("+ p.name+ ") "+ p.utime+ " "+ p.stime+ " "+ p.vmem+ " "+ p.rssmemPage+ " "+ cmdLines[i]));
    }
    ProcessStatInfo p=procInfos[5];
    Assert.assertFalse("Process-tree dump shouldn't contain the cmdLineDump of process " + p.pid,processTreeDump.contains("\t|- " + p.pid + " "+ p.ppid+ " "+ p.pgrpId+ " "+ p.session+ " ("+ p.name+ ") "+ p.utime+ " "+ p.stime+ " "+ p.vmem+ " "+ cmdLines[5]));
  }
  finally {
    FileUtil.fullyDelete(procfsRootDir);
  }
}
