{
  ReadPortion[] results=new ReadPortion[dataBlkNum];
  for (int i=0; i < dataBlkNum; i++) {
    results[i]=new ReadPortion();
  }
  int cellIdxInBlk=(int)(startInBlk / (cellSize * dataBlkNum));
  final int blkIdxInGroup=(int)(startInBlk / cellSize % dataBlkNum);
  results[blkIdxInGroup].setStartOffsetInBlock(cellSize * cellIdxInBlk + startInBlk % cellSize);
  boolean crossStripe=false;
  for (int i=1; i < dataBlkNum; i++) {
    if (blkIdxInGroup + i >= dataBlkNum && !crossStripe) {
      cellIdxInBlk++;
      crossStripe=true;
    }
    results[(blkIdxInGroup + i) % dataBlkNum].setStartOffsetInBlock(cellSize * cellIdxInBlk);
  }
  int firstCellLen=Math.min(cellSize - (int)(startInBlk % cellSize),len);
  results[blkIdxInGroup].offsetsInBuf.add(bufOffset);
  results[blkIdxInGroup].lengths.add(firstCellLen);
  results[blkIdxInGroup].addReadLength(firstCellLen);
  int i=(blkIdxInGroup + 1) % dataBlkNum;
  for (int done=firstCellLen; done < len; done+=cellSize) {
    ReadPortion rp=results[i];
    rp.offsetsInBuf.add(done + bufOffset);
    final int readLen=Math.min(len - done,cellSize);
    rp.lengths.add(readLen);
    rp.addReadLength(readLen);
    i=(i + 1) % dataBlkNum;
  }
  return results;
}
