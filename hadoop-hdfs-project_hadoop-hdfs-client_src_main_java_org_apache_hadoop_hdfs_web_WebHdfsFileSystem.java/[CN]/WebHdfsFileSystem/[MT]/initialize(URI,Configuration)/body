{
  super.initialize(uri,conf);
  setConf(conf);
  UserParam.setUserPattern(conf.get(HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));
  boolean isOAuth=conf.getBoolean(HdfsClientConfigKeys.DFS_WEBHDFS_OAUTH_ENABLED_KEY,HdfsClientConfigKeys.DFS_WEBHDFS_OAUTH_ENABLED_DEFAULT);
  if (isOAuth) {
    LOG.info("Enabling OAuth2 in WebHDFS");
    connectionFactory=URLConnectionFactory.newOAuth2URLConnectionFactory(conf);
  }
 else {
    LOG.info("Not enabling OAuth2 in WebHDFS");
    connectionFactory=URLConnectionFactory.newDefaultURLConnectionFactory(conf);
  }
  ugi=UserGroupInformation.getCurrentUser();
  this.uri=URI.create(uri.getScheme() + "://" + uri.getAuthority());
  this.nnAddrs=resolveNNAddr();
  boolean isHA=HAUtilClient.isClientFailoverConfigured(conf,this.uri);
  boolean isLogicalUri=isHA && HAUtilClient.isLogicalUri(conf,this.uri);
  this.tokenServiceName=isLogicalUri ? HAUtilClient.buildTokenServiceForLogicalUri(uri,getScheme()) : SecurityUtil.buildTokenService(getCanonicalUri());
  if (!isHA) {
    this.retryPolicy=RetryUtils.getDefaultRetryPolicy(conf,HdfsClientConfigKeys.HttpClient.RETRY_POLICY_ENABLED_KEY,HdfsClientConfigKeys.HttpClient.RETRY_POLICY_ENABLED_DEFAULT,HdfsClientConfigKeys.HttpClient.RETRY_POLICY_SPEC_KEY,HdfsClientConfigKeys.HttpClient.RETRY_POLICY_SPEC_DEFAULT,HdfsConstants.SAFEMODE_EXCEPTION_CLASS_NAME);
  }
 else {
    int maxFailoverAttempts=conf.getInt(HdfsClientConfigKeys.HttpClient.FAILOVER_MAX_ATTEMPTS_KEY,HdfsClientConfigKeys.HttpClient.FAILOVER_MAX_ATTEMPTS_DEFAULT);
    int maxRetryAttempts=conf.getInt(HdfsClientConfigKeys.HttpClient.RETRY_MAX_ATTEMPTS_KEY,HdfsClientConfigKeys.HttpClient.RETRY_MAX_ATTEMPTS_DEFAULT);
    int failoverSleepBaseMillis=conf.getInt(HdfsClientConfigKeys.HttpClient.FAILOVER_SLEEPTIME_BASE_KEY,HdfsClientConfigKeys.HttpClient.FAILOVER_SLEEPTIME_BASE_DEFAULT);
    int failoverSleepMaxMillis=conf.getInt(HdfsClientConfigKeys.HttpClient.FAILOVER_SLEEPTIME_MAX_KEY,HdfsClientConfigKeys.HttpClient.FAILOVER_SLEEPTIME_MAX_DEFAULT);
    this.retryPolicy=RetryPolicies.failoverOnNetworkException(RetryPolicies.TRY_ONCE_THEN_FAIL,maxFailoverAttempts,maxRetryAttempts,failoverSleepBaseMillis,failoverSleepMaxMillis);
  }
  this.workingDir=makeQualified(new Path(getHomeDirectoryString(ugi)));
  this.canRefreshDelegationToken=UserGroupInformation.isSecurityEnabled();
  this.disallowFallbackToInsecureCluster=!conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY,CommonConfigurationKeys.IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_DEFAULT);
  this.delegationToken=null;
}
