{
  BloomMapFile.Writer writer=null;
  try {
    FileSystem ts=FileSystem.get(conf);
    String testFileName=TEST_FILE.toString();
    writer=new BloomMapFile.Writer(conf,ts,testFileName,IntWritable.class,Text.class,CompressionType.BLOCK,defaultCodec,defaultProgress);
    assertNotNull("testBloomMapFileConstructors error !!!",writer);
    writer.close();
    writer=new BloomMapFile.Writer(conf,ts,testFileName,IntWritable.class,Text.class,CompressionType.BLOCK,defaultProgress);
    assertNotNull("testBloomMapFileConstructors error !!!",writer);
    writer.close();
    writer=new BloomMapFile.Writer(conf,ts,testFileName,IntWritable.class,Text.class,CompressionType.BLOCK);
    assertNotNull("testBloomMapFileConstructors error !!!",writer);
    writer.close();
    writer=new BloomMapFile.Writer(conf,ts,testFileName,IntWritable.class,Text.class,CompressionType.RECORD,defaultCodec,defaultProgress);
    assertNotNull("testBloomMapFileConstructors error !!!",writer);
    writer.close();
    writer=new BloomMapFile.Writer(conf,ts,testFileName,IntWritable.class,Text.class,CompressionType.RECORD,defaultProgress);
    assertNotNull("testBloomMapFileConstructors error !!!",writer);
    writer.close();
    writer=new BloomMapFile.Writer(conf,ts,testFileName,IntWritable.class,Text.class,CompressionType.RECORD);
    assertNotNull("testBloomMapFileConstructors error !!!",writer);
    writer.close();
    writer=new BloomMapFile.Writer(conf,ts,testFileName,WritableComparator.get(Text.class),Text.class);
    assertNotNull("testBloomMapFileConstructors error !!!",writer);
    writer.close();
  }
 catch (  Exception ex) {
    fail("testBloomMapFileConstructors error !!!");
  }
 finally {
    IOUtils.cleanup(null,writer);
  }
}
