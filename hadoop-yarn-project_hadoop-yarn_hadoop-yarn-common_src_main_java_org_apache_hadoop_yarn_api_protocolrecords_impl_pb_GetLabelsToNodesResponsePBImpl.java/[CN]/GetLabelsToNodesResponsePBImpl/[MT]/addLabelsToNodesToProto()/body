{
  maybeInitBuilder();
  builder.clearLabelsToNodes();
  if (labelsToNodes == null) {
    return;
  }
  Iterable<LabelsToNodeIdsProto> iterable=new Iterable<LabelsToNodeIdsProto>(){
    @Override public Iterator<LabelsToNodeIdsProto> iterator(){
      return new Iterator<LabelsToNodeIdsProto>(){
        Iterator<Entry<NodeLabel,Set<NodeId>>> iter=labelsToNodes.entrySet().iterator();
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
        @Override public LabelsToNodeIdsProto next(){
          Entry<NodeLabel,Set<NodeId>> now=iter.next();
          Set<NodeIdProto> nodeProtoSet=new HashSet<NodeIdProto>();
          for (          NodeId n : now.getValue()) {
            nodeProtoSet.add(convertToProtoFormat(n));
          }
          return LabelsToNodeIdsProto.newBuilder().setNodeLabels(convertToProtoFormat(now.getKey())).addAllNodeId(nodeProtoSet).build();
        }
        @Override public boolean hasNext(){
          return iter.hasNext();
        }
      }
;
    }
  }
;
  builder.addAllLabelsToNodes(iterable);
}
