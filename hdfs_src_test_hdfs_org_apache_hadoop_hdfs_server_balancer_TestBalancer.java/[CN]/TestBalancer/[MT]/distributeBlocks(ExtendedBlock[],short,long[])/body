{
  long[] usedSpace=new long[distribution.length];
  System.arraycopy(distribution,0,usedSpace,0,distribution.length);
  List<List<Block>> blockReports=new ArrayList<List<Block>>(usedSpace.length);
  Block[][] results=new Block[usedSpace.length][];
  for (int i=0; i < usedSpace.length; i++) {
    blockReports.add(new ArrayList<Block>());
  }
  for (int i=0; i < blocks.length; i++) {
    for (int j=0; j < replicationFactor; j++) {
      boolean notChosen=true;
      while (notChosen) {
        int chosenIndex=r.nextInt(usedSpace.length);
        if (usedSpace[chosenIndex] > 0) {
          notChosen=false;
          blockReports.get(chosenIndex).add(blocks[i].getLocalBlock());
          usedSpace[chosenIndex]-=blocks[i].getNumBytes();
        }
      }
    }
  }
  for (int i=0; i < usedSpace.length; i++) {
    List<Block> nodeBlockList=blockReports.get(i);
    results[i]=nodeBlockList.toArray(new Block[nodeBlockList.size()]);
  }
  return results;
}
