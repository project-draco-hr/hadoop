{
  final Thread[] threads=new Thread[numThreads];
  final BenchResult[] results=new BenchResult[threads.length];
{
    final Constructor<? extends Crc32> ctor=clazz.getConstructor();
    for (int i=0; i < threads.length; i++) {
      final Crc32 crc=ctor.newInstance();
      final long byteProcessed=dataBufs[i].remaining() * trials;
      final int index=i;
      threads[i]=new Thread(){
        @Override public void run(){
          final long startTime=System.nanoTime();
          for (int i=0; i < trials; i++) {
            dataBufs[index].mark();
            crcBufs[index].mark();
            try {
              crc.verifyChunked(dataBufs[index],bytePerCrc,crcBufs[index],crc.getClass().getSimpleName(),dataBufs[index].position());
            }
 catch (            Throwable t) {
              results[index]=new BenchResult(t);
              return;
            }
 finally {
              dataBufs[index].reset();
              crcBufs[index].reset();
            }
          }
          final double secsElapsed=secondsElapsed(startTime);
          results[index]=new BenchResult(byteProcessed / secsElapsed / MB);
        }
      }
;
    }
  }
  for (  Thread t : threads) {
    t.start();
  }
  for (  Thread t : threads) {
    t.join();
  }
  double sum=0;
  for (int i=0; i < results.length; i++) {
    sum+=results[i].getMbps();
  }
  return new BenchResult(sum / results.length);
}
