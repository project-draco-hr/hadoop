{
  ResourceCalculator resCalc=plan.getResourceCalculator();
  Resource capacity=plan.getTotalCapacity();
  long step=plan.getStep();
  RLESparseResourceAllocation allocationRequests=new RLESparseResourceAllocation(plan.getResourceCalculator(),plan.getMinimumAllocation());
  long duration=stepRoundUp(rr.getDuration(),step);
  int windowSizeInDurations=(int)((stageDeadline - stageEarliestStart) / duration);
  int totalGangs=rr.getNumContainers() / rr.getConcurrency();
  int numContainersPerGang=rr.getConcurrency();
  Resource gang=Resources.multiply(rr.getCapability(),numContainersPerGang);
  int maxGangsPerUnit=(int)Math.max(Math.floor(((double)totalGangs) / windowSizeInDurations),1);
  maxGangsPerUnit=Math.max(maxGangsPerUnit / smoothnessFactor,1);
  if (windowSizeInDurations <= 0) {
    return null;
  }
  TreeSet<DurationInterval> durationIntervalsSortedByCost=new TreeSet<DurationInterval>(new Comparator<DurationInterval>(){
    @Override public int compare(    DurationInterval val1,    DurationInterval val2){
      int cmp=Double.compare(val1.getTotalCost(),val2.getTotalCost());
      if (cmp != 0) {
        return cmp;
      }
      return (-1) * Long.compare(val1.getEndTime(),val2.getEndTime());
    }
  }
);
  for (long intervalEnd=stageDeadline; intervalEnd >= stageEarliestStart + duration; intervalEnd-=duration) {
    long intervalStart=intervalEnd - duration;
    DurationInterval durationInterval=getDurationInterval(intervalStart,intervalEnd,planLoads,planModifications,capacity,resCalc,step);
    if (durationInterval.canAllocate(gang,capacity,resCalc)) {
      durationIntervalsSortedByCost.add(durationInterval);
    }
  }
  int remainingGangs=totalGangs;
  while (remainingGangs > 0) {
    if (durationIntervalsSortedByCost.isEmpty()) {
      break;
    }
    DurationInterval bestDurationInterval=durationIntervalsSortedByCost.first();
    int numGangsToAllocate=Math.min(maxGangsPerUnit,remainingGangs);
    remainingGangs-=numGangsToAllocate;
    ReservationInterval reservationInt=new ReservationInterval(bestDurationInterval.getStartTime(),bestDurationInterval.getEndTime());
    Resource reservationRes=Resources.multiply(rr.getCapability(),rr.getConcurrency() * numGangsToAllocate);
    planModifications.addInterval(reservationInt,reservationRes);
    allocationRequests.addInterval(reservationInt,reservationRes);
    durationIntervalsSortedByCost.remove(bestDurationInterval);
    DurationInterval updatedDurationInterval=getDurationInterval(bestDurationInterval.getStartTime(),bestDurationInterval.getStartTime() + duration,planLoads,planModifications,capacity,resCalc,step);
    if (updatedDurationInterval.canAllocate(gang,capacity,resCalc)) {
      durationIntervalsSortedByCost.add(updatedDurationInterval);
    }
  }
  Map<ReservationInterval,Resource> allocations=allocationRequests.toIntervalMap();
  if (remainingGangs <= 0) {
    return allocations;
  }
 else {
    for (    Map.Entry<ReservationInterval,Resource> tempAllocation : allocations.entrySet()) {
      planModifications.removeInterval(tempAllocation.getKey(),tempAllocation.getValue());
    }
    return null;
  }
}
