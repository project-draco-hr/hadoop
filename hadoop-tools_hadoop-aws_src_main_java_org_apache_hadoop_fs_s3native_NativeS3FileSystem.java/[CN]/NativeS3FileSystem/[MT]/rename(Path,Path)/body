{
  String srcKey=pathToKey(makeAbsolute(src));
  final String debugPreamble="Renaming '" + src + "' to '"+ dst+ "' - ";
  if (srcKey.length() == 0) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(debugPreamble + "returning false as cannot rename the root of a filesystem");
    }
    return false;
  }
  boolean srcIsFile;
  try {
    srcIsFile=getFileStatus(src).isFile();
  }
 catch (  FileNotFoundException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(debugPreamble + "returning false as src does not exist");
    }
    return false;
  }
  String dstKey=pathToKey(makeAbsolute(dst));
  try {
    boolean dstIsFile=getFileStatus(dst).isFile();
    if (dstIsFile) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(debugPreamble + "returning without rename as dst is an already existing file");
      }
      return srcKey.equals(dstKey);
    }
 else {
      if (LOG.isDebugEnabled()) {
        LOG.debug(debugPreamble + "using dst as output directory");
      }
      dstKey=pathToKey(makeAbsolute(new Path(dst,src.getName())));
    }
  }
 catch (  FileNotFoundException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(debugPreamble + "using dst as output destination");
    }
    try {
      if (getFileStatus(dst.getParent()).isFile()) {
        if (LOG.isDebugEnabled()) {
          LOG.debug(debugPreamble + "returning false as dst parent exists and is a file");
        }
        return false;
      }
    }
 catch (    FileNotFoundException ex) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(debugPreamble + "returning false as dst parent does not exist");
      }
      return false;
    }
  }
  if (srcKey.equals(dstKey)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(debugPreamble + "renamingToSelf; returning true");
    }
    return true;
  }
  if (srcIsFile) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(debugPreamble + "src is file, so doing copy then delete in S3");
    }
    store.copy(srcKey,dstKey);
    store.delete(srcKey);
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(debugPreamble + "src is directory, so copying contents");
    }
    if (dstKey.startsWith(srcKey + "/")) {
      if (LOG.isDebugEnabled()) {
        LOG.debug(debugPreamble + "cannot rename a directory to a subdirectory of self");
      }
      return false;
    }
    store.storeEmptyFile(dstKey + FOLDER_SUFFIX);
    List<String> keysToDelete=new ArrayList<String>();
    String priorLastKey=null;
    do {
      PartialListing listing=store.list(srcKey,S3_MAX_LISTING_LENGTH,priorLastKey,true);
      for (      FileMetadata file : listing.getFiles()) {
        keysToDelete.add(file.getKey());
        store.copy(file.getKey(),dstKey + file.getKey().substring(srcKey.length()));
      }
      priorLastKey=listing.getPriorLastKey();
    }
 while (priorLastKey != null);
    if (LOG.isDebugEnabled()) {
      LOG.debug(debugPreamble + "all files in src copied, now removing src files");
    }
    for (    String key : keysToDelete) {
      store.delete(key);
    }
    try {
      store.delete(srcKey + FOLDER_SUFFIX);
    }
 catch (    FileNotFoundException e) {
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(debugPreamble + "done");
    }
  }
  return true;
}
