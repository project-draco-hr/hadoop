{
  String cluster="testWriteFlowRunMetricsPrefix_cluster1";
  String user="testWriteFlowRunMetricsPrefix_user1";
  String flow="testWriteFlowRunMetricsPrefix_flow_name";
  String flowVersion="CF7022C10F1354";
  TimelineEntities te=new TimelineEntities();
  TimelineEntity entityApp1=TestFlowDataGenerator.getEntityMetricsApp1(System.currentTimeMillis());
  te.addEntity(entityApp1);
  HBaseTimelineWriterImpl hbi=null;
  Configuration c1=util.getConfiguration();
  try {
    hbi=new HBaseTimelineWriterImpl(c1);
    hbi.init(c1);
    String appName="application_11111111111111_1111";
    hbi.write(cluster,user,flow,flowVersion,1002345678919L,appName,te);
    te=new TimelineEntities();
    TimelineEntity entityApp2=TestFlowDataGenerator.getEntityMetricsApp2(System.currentTimeMillis());
    te.addEntity(entityApp2);
    appName="application_11111111111111_2222";
    hbi.write(cluster,user,flow,flowVersion,1002345678918L,appName,te);
    hbi.flush();
  }
  finally {
    if (hbi != null) {
      hbi.close();
    }
  }
  HBaseTimelineReaderImpl hbr=null;
  try {
    hbr=new HBaseTimelineReaderImpl();
    hbr.init(c1);
    hbr.start();
    TimelineFilterList metricsToRetrieve=new TimelineFilterList(Operator.OR,new TimelinePrefixFilter(TimelineCompareOp.EQUAL,METRIC1.substring(0,METRIC1.indexOf("_") + 1)));
    TimelineEntity entity=hbr.getEntity(new TimelineReaderContext(cluster,user,flow,1002345678919L,null,TimelineEntityType.YARN_FLOW_RUN.toString(),null),new TimelineDataToRetrieve(null,metricsToRetrieve,null,null));
    assertTrue(TimelineEntityType.YARN_FLOW_RUN.matches(entity.getType()));
    Set<TimelineMetric> metrics=entity.getMetrics();
    assertEquals(1,metrics.size());
    for (    TimelineMetric metric : metrics) {
      String id=metric.getId();
      Map<Long,Number> values=metric.getValues();
      assertEquals(1,values.size());
      Number value=null;
      for (      Number n : values.values()) {
        value=n;
      }
switch (id) {
case METRIC1:
        assertEquals(40L,value);
      break;
default :
    fail("unrecognized metric: " + id);
}
}
Set<TimelineEntity> entities=hbr.getEntities(new TimelineReaderContext(cluster,user,flow,null,null,TimelineEntityType.YARN_FLOW_RUN.toString(),null),new TimelineEntityFilters(),new TimelineDataToRetrieve(null,metricsToRetrieve,null,null));
assertEquals(2,entities.size());
int metricCnt=0;
for (TimelineEntity timelineEntity : entities) {
metricCnt+=timelineEntity.getMetrics().size();
}
assertEquals(2,metricCnt);
}
  finally {
if (hbr != null) {
hbr.close();
}
}
}
