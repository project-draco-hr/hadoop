{
  String cluster="atestFlushFlowRun_cluster1";
  String user="atestFlushFlowRun__user1";
  String flow="atestFlushFlowRun_flow_name";
  String flowVersion="AF1021C19F1351";
  long runid=1449526652000L;
  int start=10;
  int count=20000;
  int appIdSuffix=1;
  HBaseTimelineWriterImpl hbi=null;
  long insertTs=1449796654827L - count;
  long minTS=insertTs + 1;
  long startTs=insertTs;
  Configuration c1=util.getConfiguration();
  TimelineEntities te1=null;
  TimelineEntity entityApp1=null;
  TimelineEntity entityApp2=null;
  try {
    hbi=new HBaseTimelineWriterImpl(c1);
    hbi.init(c1);
    for (int i=start; i < count; i++) {
      String appName="application_1060350000000_" + appIdSuffix;
      insertTs++;
      te1=new TimelineEntities();
      entityApp1=TestFlowDataGenerator.getMinFlushEntity(insertTs);
      te1.addEntity(entityApp1);
      entityApp2=TestFlowDataGenerator.getMaxFlushEntity(insertTs);
      te1.addEntity(entityApp2);
      hbi.write(cluster,user,flow,flowVersion,runid,appName,te1);
      Thread.sleep(1);
      appName="application_1001199480000_7" + appIdSuffix;
      insertTs++;
      appIdSuffix++;
      te1=new TimelineEntities();
      entityApp1=TestFlowDataGenerator.getMinFlushEntity(insertTs);
      te1.addEntity(entityApp1);
      entityApp2=TestFlowDataGenerator.getMaxFlushEntity(insertTs);
      te1.addEntity(entityApp2);
      hbi.write(cluster,user,flow,flowVersion,runid,appName,te1);
      if (i % 1000 == 0) {
        hbi.flush();
        checkMinMaxFlush(c1,minTS,startTs,count,cluster,user,flow,runid,false);
      }
    }
  }
  finally {
    if (hbi != null) {
      hbi.flush();
      hbi.close();
    }
    checkMinMaxFlush(c1,minTS,startTs,count,cluster,user,flow,runid,true);
  }
}
