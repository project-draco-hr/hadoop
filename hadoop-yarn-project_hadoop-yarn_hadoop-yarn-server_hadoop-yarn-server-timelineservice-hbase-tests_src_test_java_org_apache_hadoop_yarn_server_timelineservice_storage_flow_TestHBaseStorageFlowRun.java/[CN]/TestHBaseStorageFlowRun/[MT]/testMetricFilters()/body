{
  String cluster="cluster1";
  String user="user1";
  String flow="flow_name1";
  TimelineEntities te=new TimelineEntities();
  TimelineEntity entityApp1=TestFlowDataGenerator.getEntityMetricsApp1(System.currentTimeMillis());
  te.addEntity(entityApp1);
  HBaseTimelineWriterImpl hbi=null;
  Configuration c1=util.getConfiguration();
  try {
    hbi=new HBaseTimelineWriterImpl(c1);
    hbi.init(c1);
    hbi.write(cluster,user,flow,"CF7022C10F1354",1002345678919L,"application_11111111111111_1111",te);
    te=new TimelineEntities();
    TimelineEntity entityApp2=TestFlowDataGenerator.getEntityMetricsApp2(System.currentTimeMillis());
    te.addEntity(entityApp2);
    hbi.write(cluster,user,flow,"CF7022C10F1354",1002345678918L,"application_11111111111111_2222",te);
    hbi.flush();
  }
  finally {
    hbi.close();
  }
  HBaseTimelineReaderImpl hbr=null;
  try {
    hbr=new HBaseTimelineReaderImpl();
    hbr.init(c1);
    hbr.start();
    TimelineFilterList list1=new TimelineFilterList();
    list1.addFilter(new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL,metric1,101));
    TimelineFilterList list2=new TimelineFilterList();
    list2.addFilter(new TimelineCompareFilter(TimelineCompareOp.LESS_THAN,metric1,43));
    list2.addFilter(new TimelineCompareFilter(TimelineCompareOp.EQUAL,metric2,57));
    TimelineFilterList metricFilterList=new TimelineFilterList(Operator.OR,list1,list2);
    Set<TimelineEntity> entities=hbr.getEntities(new TimelineReaderContext(cluster,user,flow,null,null,TimelineEntityType.YARN_FLOW_RUN.toString(),null),new TimelineEntityFilters(null,null,null,null,null,null,null,metricFilterList,null),new TimelineDataToRetrieve(null,null,EnumSet.of(Field.METRICS)));
    assertEquals(2,entities.size());
    int metricCnt=0;
    for (    TimelineEntity entity : entities) {
      metricCnt+=entity.getMetrics().size();
    }
    assertEquals(3,metricCnt);
    TimelineFilterList metricFilterList1=new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL,metric1,127),new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL,metric2,30));
    entities=hbr.getEntities(new TimelineReaderContext(cluster,user,flow,null,null,TimelineEntityType.YARN_FLOW_RUN.toString(),null),new TimelineEntityFilters(null,null,null,null,null,null,null,metricFilterList1,null),new TimelineDataToRetrieve(null,null,EnumSet.of(Field.METRICS)));
    assertEquals(1,entities.size());
    metricCnt=0;
    for (    TimelineEntity entity : entities) {
      metricCnt+=entity.getMetrics().size();
    }
    assertEquals(2,metricCnt);
    TimelineFilterList metricFilterList2=new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.LESS_THAN,metric1,32),new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL,metric2,57));
    entities=hbr.getEntities(new TimelineReaderContext(cluster,user,flow,null,null,TimelineEntityType.YARN_FLOW_RUN.toString(),null),new TimelineEntityFilters(null,null,null,null,null,null,null,metricFilterList2,null),new TimelineDataToRetrieve(null,null,EnumSet.of(Field.METRICS)));
    assertEquals(0,entities.size());
    TimelineFilterList metricFilterList3=new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.EQUAL,"s_metric",32));
    entities=hbr.getEntities(new TimelineReaderContext(cluster,user,flow,null,null,TimelineEntityType.YARN_FLOW_RUN.toString(),null),new TimelineEntityFilters(null,null,null,null,null,null,null,metricFilterList3,null),new TimelineDataToRetrieve(null,null,EnumSet.of(Field.METRICS)));
    assertEquals(0,entities.size());
    TimelineFilterList list3=new TimelineFilterList();
    list3.addFilter(new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL,metric1,101));
    TimelineFilterList list4=new TimelineFilterList();
    list4.addFilter(new TimelineCompareFilter(TimelineCompareOp.LESS_THAN,metric1,43));
    list4.addFilter(new TimelineCompareFilter(TimelineCompareOp.EQUAL,metric2,57));
    TimelineFilterList metricFilterList4=new TimelineFilterList(Operator.OR,list3,list4);
    TimelineFilterList metricsToRetrieve=new TimelineFilterList(Operator.OR,new TimelinePrefixFilter(TimelineCompareOp.EQUAL,metric2.substring(0,metric2.indexOf("_") + 1)));
    entities=hbr.getEntities(new TimelineReaderContext(cluster,user,flow,null,null,TimelineEntityType.YARN_FLOW_RUN.toString(),null),new TimelineEntityFilters(null,null,null,null,null,null,null,metricFilterList4,null),new TimelineDataToRetrieve(null,metricsToRetrieve,EnumSet.of(Field.ALL)));
    assertEquals(2,entities.size());
    metricCnt=0;
    for (    TimelineEntity entity : entities) {
      metricCnt+=entity.getMetrics().size();
    }
    assertEquals(1,metricCnt);
  }
  finally {
    hbr.close();
  }
}
