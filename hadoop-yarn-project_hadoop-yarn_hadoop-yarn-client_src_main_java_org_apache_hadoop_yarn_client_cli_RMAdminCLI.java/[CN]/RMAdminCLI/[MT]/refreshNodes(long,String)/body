{
  if (!"client".equals(trackingMode)) {
    throw new UnsupportedOperationException("Only client tracking mode is currently supported.");
  }
  ResourceManagerAdministrationProtocol adminProtocol=createAdminProtocol();
  RefreshNodesRequest gracefulRequest=RefreshNodesRequest.newInstance(DecommissionType.GRACEFUL);
  adminProtocol.refreshNodes(gracefulRequest);
  CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest=recordFactory.newRecordInstance(CheckForDecommissioningNodesRequest.class);
  long waitingTime;
  boolean nodesDecommissioning=true;
  for (waitingTime=0; waitingTime < timeout || timeout == -1; waitingTime++) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
    CheckForDecommissioningNodesResponse checkForDecommissioningNodes=adminProtocol.checkForDecommissioningNodes(checkForDecommissioningNodesRequest);
    Set<NodeId> decommissioningNodes=checkForDecommissioningNodes.getDecommissioningNodes();
    if (decommissioningNodes.isEmpty()) {
      nodesDecommissioning=false;
      break;
    }
 else {
      StringBuilder nodes=new StringBuilder();
      for (      NodeId nodeId : decommissioningNodes) {
        nodes.append(nodeId).append(",");
      }
      nodes.deleteCharAt(nodes.length() - 1);
      System.out.println("Nodes '" + nodes + "' are still decommissioning.");
    }
  }
  if (nodesDecommissioning) {
    System.out.println("Graceful decommissioning not completed in " + timeout + " seconds, issueing forceful decommissioning command.");
    RefreshNodesRequest forcefulRequest=RefreshNodesRequest.newInstance(DecommissionType.FORCEFUL);
    adminProtocol.refreshNodes(forcefulRequest);
  }
 else {
    System.out.println("Graceful decommissioning completed in " + waitingTime + " seconds.");
  }
  return 0;
}
