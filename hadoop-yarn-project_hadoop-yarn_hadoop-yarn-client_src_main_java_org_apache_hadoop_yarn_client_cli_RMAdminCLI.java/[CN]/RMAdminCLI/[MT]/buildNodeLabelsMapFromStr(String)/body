{
  Map<NodeId,Set<String>> map=new HashMap<NodeId,Set<String>>();
  for (  String nodeToLabels : args.split("[ \n]")) {
    nodeToLabels=nodeToLabels.trim();
    if (nodeToLabels.isEmpty() || nodeToLabels.startsWith("#")) {
      continue;
    }
    String[] splits=nodeToLabels.split("=");
    int labelsStartIndex=0;
    String nodeIdStr=splits[0];
    if (splits.length == 2) {
      splits=splits[1].split(",");
    }
 else     if (nodeToLabels.endsWith("=")) {
      splits=new String[0];
    }
 else {
      splits=nodeToLabels.split(",");
      nodeIdStr=splits[0];
      labelsStartIndex=1;
    }
    Preconditions.checkArgument(!nodeIdStr.trim().isEmpty(),"node name cannot be empty");
    NodeId nodeId=ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);
    map.put(nodeId,new HashSet<String>());
    for (int i=labelsStartIndex; i < splits.length; i++) {
      if (!splits[i].trim().isEmpty()) {
        map.get(nodeId).add(splits[i].trim());
      }
    }
    int nLabels=map.get(nodeId).size();
    Preconditions.checkArgument(nLabels <= 1,"%d labels specified on host=%s" + ", please note that we do not support specifying multiple" + " labels on a single host for now.",nLabels,nodeIdStr);
  }
  if (map.isEmpty()) {
    throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);
  }
  return map;
}
