{
  List<String> argsList=new ArrayList<String>();
  for (int i=0; i < args.length; i++) {
    if (args[i].equals("-directlyAccessNodeLabelStore")) {
      directlyAccessNodeLabelStore=true;
    }
 else {
      argsList.add(args[i]);
    }
  }
  args=argsList.toArray(new String[0]);
  YarnConfiguration yarnConf=getConf() == null ? new YarnConfiguration() : new YarnConfiguration(getConf());
  boolean isHAEnabled=yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED,YarnConfiguration.DEFAULT_RM_HA_ENABLED);
  if (args.length < 1) {
    printUsage("",isHAEnabled);
    return -1;
  }
  int exitCode=-1;
  int i=0;
  String cmd=args[i++];
  exitCode=0;
  if ("-help".equals(cmd)) {
    if (i < args.length) {
      printUsage(args[i],isHAEnabled);
    }
 else {
      printHelp("",isHAEnabled);
    }
    return exitCode;
  }
  if (USAGE.containsKey(cmd)) {
    if (isHAEnabled) {
      return super.run(args);
    }
    System.out.println("Cannot run " + cmd + " when ResourceManager HA is not enabled");
    return -1;
  }
  if ("-refreshAdminAcls".equals(cmd) || "-refreshQueues".equals(cmd) || "-refreshNodesResources".equals(cmd)|| "-refreshServiceAcl".equals(cmd)|| "-refreshUserToGroupsMappings".equals(cmd)|| "-refreshSuperUserGroupsConfiguration".equals(cmd)) {
    if (args.length != 1) {
      printUsage(cmd,isHAEnabled);
      return exitCode;
    }
  }
  try {
    if ("-refreshQueues".equals(cmd)) {
      exitCode=refreshQueues();
    }
 else     if ("-refreshNodes".equals(cmd)) {
      exitCode=handleRefreshNodes(args,cmd,isHAEnabled);
    }
 else     if ("-refreshNodesResources".equals(cmd)) {
      exitCode=refreshNodesResources();
    }
 else     if ("-refreshUserToGroupsMappings".equals(cmd)) {
      exitCode=refreshUserToGroupsMappings();
    }
 else     if ("-refreshSuperUserGroupsConfiguration".equals(cmd)) {
      exitCode=refreshSuperUserGroupsConfiguration();
    }
 else     if ("-refreshAdminAcls".equals(cmd)) {
      exitCode=refreshAdminAcls();
    }
 else     if ("-refreshServiceAcl".equals(cmd)) {
      exitCode=refreshServiceAcls();
    }
 else     if ("-refreshClusterMaxPriority".equals(cmd)) {
      exitCode=refreshClusterMaxPriority();
    }
 else     if ("-getGroups".equals(cmd)) {
      String[] usernames=Arrays.copyOfRange(args,i,args.length);
      exitCode=getGroups(usernames);
    }
 else     if ("-updateNodeResource".equals(cmd)) {
      exitCode=handleUpdateNodeResource(args,cmd,isHAEnabled);
    }
 else     if ("-addToClusterNodeLabels".equals(cmd)) {
      if (i >= args.length) {
        System.err.println(NO_LABEL_ERR_MSG);
        printUsage("",isHAEnabled);
        exitCode=-1;
      }
 else {
        exitCode=addToClusterNodeLabels(args[i]);
      }
    }
 else     if ("-removeFromClusterNodeLabels".equals(cmd)) {
      if (i >= args.length) {
        System.err.println(NO_LABEL_ERR_MSG);
        printUsage("",isHAEnabled);
        exitCode=-1;
      }
 else {
        exitCode=removeFromClusterNodeLabels(args[i]);
      }
    }
 else     if ("-replaceLabelsOnNode".equals(cmd)) {
      if (i >= args.length) {
        System.err.println(NO_MAPPING_ERR_MSG);
        printUsage("",isHAEnabled);
        exitCode=-1;
      }
 else {
        exitCode=replaceLabelsOnNodes(args[i]);
      }
    }
 else {
      exitCode=-1;
      System.err.println(cmd.substring(1) + ": Unknown command");
      printUsage("",isHAEnabled);
    }
  }
 catch (  IllegalArgumentException arge) {
    exitCode=-1;
    System.err.println(cmd.substring(1) + ": " + arge.getLocalizedMessage());
    printUsage(cmd,isHAEnabled);
  }
catch (  RemoteException e) {
    exitCode=-1;
    try {
      String[] content;
      content=e.getLocalizedMessage().split("\n");
      System.err.println(cmd.substring(1) + ": " + content[0]);
    }
 catch (    Exception ex) {
      System.err.println(cmd.substring(1) + ": " + ex.getLocalizedMessage());
    }
  }
catch (  Exception e) {
    exitCode=-1;
    System.err.println(cmd.substring(1) + ": " + e.getLocalizedMessage());
  }
  if (null != localNodeLabelsManager) {
    localNodeLabelsManager.stop();
  }
  return exitCode;
}
