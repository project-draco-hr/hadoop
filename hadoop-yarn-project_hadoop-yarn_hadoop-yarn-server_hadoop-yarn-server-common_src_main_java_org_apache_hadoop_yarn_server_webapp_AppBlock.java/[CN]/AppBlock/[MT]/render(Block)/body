{
  String webUiType=$(WEB_UI_TYPE);
  String aid=$(APPLICATION_ID);
  if (aid.isEmpty()) {
    puts("Bad request: requires Application ID");
    return;
  }
  try {
    appID=Apps.toAppID(aid);
  }
 catch (  Exception e) {
    puts("Invalid Application ID: " + aid);
    return;
  }
  UserGroupInformation callerUGI=getCallerUGI();
  ApplicationReport appReport;
  try {
    final GetApplicationReportRequest request=GetApplicationReportRequest.newInstance(appID);
    if (callerUGI == null) {
      appReport=appBaseProt.getApplicationReport(request).getApplicationReport();
    }
 else {
      appReport=callerUGI.doAs(new PrivilegedExceptionAction<ApplicationReport>(){
        @Override public ApplicationReport run() throws Exception {
          return appBaseProt.getApplicationReport(request).getApplicationReport();
        }
      }
);
    }
  }
 catch (  Exception e) {
    String message="Failed to read the application " + appID + ".";
    LOG.error(message,e);
    html.p()._(message)._();
    return;
  }
  if (appReport == null) {
    puts("Application not found: " + aid);
    return;
  }
  AppInfo app=new AppInfo(appReport);
  setTitle(join("Application ",aid));
  if (webUiType != null && webUiType.equals(YarnWebParams.RM_WEB_UI) && conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED,YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED)) {
    html.div().button().$onclick("confirmAction()").b("Kill Application")._()._();
    StringBuilder script=new StringBuilder();
    script.append("function confirmAction() {").append(" b = confirm(\"Are you sure?\");").append(" if (b == true) {").append(" $.ajax({").append(" type: 'PUT',").append(" url: '/ws/v1/cluster/apps/").append(aid).append("/state',").append(" contentType: 'application/json',").append(" data: '{\"state\":\"KILLED\"}',").append(" dataType: 'json'").append(" }).done(function(data){").append(" setTimeout(function(){").append(" location.href = '/cluster/app/").append(aid).append("';").append(" }, 1000);").append(" }).fail(function(data){").append(" console.log(data);").append(" });").append(" }").append("}");
    html.script().$type("text/javascript")._(script.toString())._();
  }
  String schedulerPath=WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) + "/cluster/scheduler?openQueues=" + app.getQueue();
  ResponseInfo overviewTable=info("Application Overview")._("User:",schedulerPath,app.getUser())._("Name:",app.getName())._("Application Type:",app.getType())._("Application Tags:",app.getApplicationTags() == null ? "" : app.getApplicationTags())._("Application Priority:",clarifyAppPriority(app.getPriority()))._("YarnApplicationState:",app.getAppState() == null ? UNAVAILABLE : clarifyAppState(app.getAppState()))._("Queue:",schedulerPath,app.getQueue())._("FinalStatus Reported by AM:",clairfyAppFinalStatus(app.getFinalAppStatus()))._("Started:",Times.format(app.getStartedTime()))._("Elapsed:",StringUtils.formatTime(Times.elapsed(app.getStartedTime(),app.getFinishedTime())))._("Tracking URL:",app.getTrackingUrl() == null || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app.getTrackingUrl()),app.getTrackingUrl() == null || app.getTrackingUrl().equals(UNAVAILABLE) ? "Unassigned" : app.getAppState() == YarnApplicationState.FINISHED || app.getAppState() == YarnApplicationState.FAILED || app.getAppState() == YarnApplicationState.KILLED ? "History" : "ApplicationMaster");
  if (webUiType != null && webUiType.equals(YarnWebParams.RM_WEB_UI)) {
    LogAggregationStatus status=getLogAggregationStatus();
    if (status == null) {
      overviewTable._("Log Aggregation Status:","N/A");
    }
 else     if (status == LogAggregationStatus.DISABLED || status == LogAggregationStatus.NOT_START || status == LogAggregationStatus.SUCCEEDED) {
      overviewTable._("Log Aggregation Status:",status.name());
    }
 else {
      overviewTable._("Log Aggregation Status:",root_url("logaggregationstatus",app.getAppId()),status.name());
    }
  }
  overviewTable._("Diagnostics:",app.getDiagnosticsInfo() == null ? "" : app.getDiagnosticsInfo());
  overviewTable._("Unmanaged Application:",app.isUnmanagedApp());
  Collection<ApplicationAttemptReport> attempts;
  try {
    final GetApplicationAttemptsRequest request=GetApplicationAttemptsRequest.newInstance(appID);
    if (callerUGI == null) {
      attempts=appBaseProt.getApplicationAttempts(request).getApplicationAttemptList();
    }
 else {
      attempts=callerUGI.doAs(new PrivilegedExceptionAction<Collection<ApplicationAttemptReport>>(){
        @Override public Collection<ApplicationAttemptReport> run() throws Exception {
          return appBaseProt.getApplicationAttempts(request).getApplicationAttemptList();
        }
      }
);
    }
  }
 catch (  Exception e) {
    String message="Failed to read the attempts of the application " + appID + ".";
    LOG.error(message,e);
    html.p()._(message)._();
    return;
  }
  createApplicationMetricsTable(html);
  html._(InfoBlock.class);
  generateApplicationTable(html,callerUGI,attempts);
}
