{
  super.serviceStart();
  LOG.info("Starting {}",getName());
  summaryStore.start();
  Configuration conf=getConfig();
  aclManager=new TimelineACLsManager(conf);
  aclManager.setTimelineStore(summaryStore);
  summaryTdm=new TimelineDataManager(summaryStore,aclManager);
  summaryTdm.init(conf);
  addService(summaryTdm);
  super.serviceStart();
  if (!fs.exists(activeRootPath)) {
    fs.mkdirs(activeRootPath);
    fs.setPermission(activeRootPath,ACTIVE_DIR_PERMISSION);
  }
  if (!fs.exists(doneRootPath)) {
    fs.mkdirs(doneRootPath);
    fs.setPermission(doneRootPath,DONE_DIR_PERMISSION);
  }
  objMapper=new ObjectMapper();
  objMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector());
  jsonFactory=new MappingJsonFactory(objMapper);
  final long scanIntervalSecs=conf.getLong(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS,YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT);
  final long cleanerIntervalSecs=conf.getLong(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS,YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS_DEFAULT);
  final int numThreads=conf.getInt(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS,YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS_DEFAULT);
  LOG.info("Scanning active directory {} every {} seconds",activeRootPath,scanIntervalSecs);
  LOG.info("Cleaning logs every {} seconds",cleanerIntervalSecs);
  executor=new ScheduledThreadPoolExecutor(numThreads,new ThreadFactoryBuilder().setNameFormat("EntityLogPluginWorker #%d").build());
  executor.scheduleAtFixedRate(new EntityLogScanner(),0,scanIntervalSecs,TimeUnit.SECONDS);
  executor.scheduleAtFixedRate(new EntityLogCleaner(),cleanerIntervalSecs,cleanerIntervalSecs,TimeUnit.SECONDS);
}
