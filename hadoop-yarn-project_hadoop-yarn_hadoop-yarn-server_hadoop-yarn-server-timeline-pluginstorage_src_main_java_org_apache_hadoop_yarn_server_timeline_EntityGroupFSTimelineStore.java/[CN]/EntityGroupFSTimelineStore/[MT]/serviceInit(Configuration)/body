{
  summaryStore=createSummaryStore();
  addService(summaryStore);
  long logRetainSecs=conf.getLong(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETAIN_SECONDS,YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETAIN_SECONDS_DEFAULT);
  logRetainMillis=logRetainSecs * 1000;
  LOG.info("Cleaner set to delete logs older than {} seconds",logRetainSecs);
  long unknownActiveSecs=conf.getLong(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_UNKNOWN_ACTIVE_SECONDS,YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_UNKNOWN_ACTIVE_SECONDS_DEFAULT);
  unknownActiveMillis=unknownActiveSecs * 1000;
  LOG.info("Unknown apps will be treated as complete after {} seconds",unknownActiveSecs);
  appCacheMaxSize=conf.getInt(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_APP_CACHE_SIZE,YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_APP_CACHE_SIZE_DEFAULT);
  LOG.info("Application cache size is {}",appCacheMaxSize);
  cachedLogs=Collections.synchronizedMap(new LinkedHashMap<TimelineEntityGroupId,EntityCacheItem>(appCacheMaxSize + 1,0.75f,true){
    @Override protected boolean removeEldestEntry(    Map.Entry<TimelineEntityGroupId,EntityCacheItem> eldest){
      if (super.size() > appCacheMaxSize) {
        TimelineEntityGroupId groupId=eldest.getKey();
        LOG.debug("Evicting {} due to space limitations",groupId);
        EntityCacheItem cacheItem=eldest.getValue();
        cacheItem.releaseCache(groupId);
        if (cacheItem.getAppLogs().isDone()) {
          appIdLogMap.remove(groupId.getApplicationId());
        }
        return true;
      }
      return false;
    }
  }
);
  cacheIdPlugins=loadPlugIns(conf);
  yarnClient=createAndInitYarnClient(conf);
  addIfService(yarnClient);
  activeRootPath=new Path(conf.get(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR,YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR_DEFAULT));
  doneRootPath=new Path(conf.get(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR,YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR_DEFAULT));
  fs=activeRootPath.getFileSystem(conf);
  CallerContext.setCurrent(new CallerContext.Builder(ATS_V15_SERVER_DFS_CALLER_CTXT).build());
  super.serviceInit(conf);
}
