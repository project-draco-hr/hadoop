{
  Collection<String> pluginNames=conf.getTrimmedStringCollection(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES);
  String pluginClasspath=conf.getTrimmed(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSPATH);
  String[] systemClasses=conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_SYSTEM_CLASSES);
  List<TimelineEntityGroupPlugin> pluginList=new LinkedList<TimelineEntityGroupPlugin>();
  ClassLoader customClassLoader=null;
  if (pluginClasspath != null && pluginClasspath.length() > 0) {
    try {
      customClassLoader=createPluginClassLoader(pluginClasspath,systemClasses);
    }
 catch (    IOException ioe) {
      LOG.warn("Error loading classloader",ioe);
    }
  }
  for (  final String name : pluginNames) {
    LOG.debug("Trying to load plugin class {}",name);
    TimelineEntityGroupPlugin cacheIdPlugin=null;
    try {
      if (customClassLoader != null) {
        LOG.debug("Load plugin {} with classpath: {}",name,pluginClasspath);
        Class<?> clazz=Class.forName(name,true,customClassLoader);
        Class<? extends TimelineEntityGroupPlugin> sClass=clazz.asSubclass(TimelineEntityGroupPlugin.class);
        cacheIdPlugin=ReflectionUtils.newInstance(sClass,conf);
      }
 else {
        LOG.debug("Load plugin class with system classpath");
        Class<?> clazz=conf.getClassByName(name);
        cacheIdPlugin=(TimelineEntityGroupPlugin)ReflectionUtils.newInstance(clazz,conf);
      }
    }
 catch (    Exception e) {
      LOG.warn("Error loading plugin " + name,e);
      throw new RuntimeException("No class defined for " + name,e);
    }
    LOG.info("Load plugin class {}",cacheIdPlugin.getClass().getName());
    pluginList.add(cacheIdPlugin);
  }
  return pluginList;
}
