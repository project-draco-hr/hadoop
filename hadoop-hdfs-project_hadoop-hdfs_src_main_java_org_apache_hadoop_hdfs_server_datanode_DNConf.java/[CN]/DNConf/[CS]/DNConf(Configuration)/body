{
  socketTimeout=conf.getInt(DFS_CLIENT_SOCKET_TIMEOUT_KEY,HdfsServerConstants.READ_TIMEOUT);
  socketWriteTimeout=conf.getInt(DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,HdfsServerConstants.WRITE_TIMEOUT);
  socketKeepaliveTimeout=conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_KEY,DFSConfigKeys.DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_DEFAULT);
  transferToAllowed=conf.getBoolean(DFS_DATANODE_TRANSFERTO_ALLOWED_KEY,DFS_DATANODE_TRANSFERTO_ALLOWED_DEFAULT);
  writePacketSize=conf.getInt(DFS_CLIENT_WRITE_PACKET_SIZE_KEY,DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT);
  readaheadLength=conf.getLong(DFSConfigKeys.DFS_DATANODE_READAHEAD_BYTES_KEY,DFSConfigKeys.DFS_DATANODE_READAHEAD_BYTES_DEFAULT);
  dropCacheBehindWrites=conf.getBoolean(DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_WRITES_KEY,DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_WRITES_DEFAULT);
  syncBehindWrites=conf.getBoolean(DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_KEY,DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_DEFAULT);
  dropCacheBehindReads=conf.getBoolean(DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_READS_KEY,DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_READS_DEFAULT);
  this.blockReportInterval=conf.getLong(DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,DFS_BLOCKREPORT_INTERVAL_MSEC_DEFAULT);
  long initBRDelay=conf.getLong(DFS_BLOCKREPORT_INITIAL_DELAY_KEY,DFS_BLOCKREPORT_INITIAL_DELAY_DEFAULT) * 1000L;
  if (initBRDelay >= blockReportInterval) {
    initBRDelay=0;
    DataNode.LOG.info("dfs.blockreport.initialDelay is greater than " + "dfs.blockreport.intervalMsec." + " Setting initial delay to 0 msec:");
  }
  initialBlockReportDelay=initBRDelay;
  heartBeatInterval=conf.getLong(DFS_HEARTBEAT_INTERVAL_KEY,DFS_HEARTBEAT_INTERVAL_DEFAULT) * 1000L;
  this.deleteReportInterval=100 * heartBeatInterval;
  this.syncOnClose=conf.getBoolean(DFS_DATANODE_SYNCONCLOSE_KEY,DFS_DATANODE_SYNCONCLOSE_DEFAULT);
}
