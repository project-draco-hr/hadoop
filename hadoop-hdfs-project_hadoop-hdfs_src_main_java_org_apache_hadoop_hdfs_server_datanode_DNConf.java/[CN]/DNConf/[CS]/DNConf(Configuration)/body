{
  this.conf=conf;
  socketTimeout=conf.getInt(DFS_CLIENT_SOCKET_TIMEOUT_KEY,HdfsConstants.READ_TIMEOUT);
  socketWriteTimeout=conf.getInt(DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,HdfsConstants.WRITE_TIMEOUT);
  socketKeepaliveTimeout=conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_KEY,DFSConfigKeys.DFS_DATANODE_SOCKET_REUSE_KEEPALIVE_DEFAULT);
  transferToAllowed=conf.getBoolean(DFS_DATANODE_TRANSFERTO_ALLOWED_KEY,DFS_DATANODE_TRANSFERTO_ALLOWED_DEFAULT);
  writePacketSize=conf.getInt(DFS_CLIENT_WRITE_PACKET_SIZE_KEY,DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT);
  readaheadLength=conf.getLong(HdfsClientConfigKeys.DFS_DATANODE_READAHEAD_BYTES_KEY,HdfsClientConfigKeys.DFS_DATANODE_READAHEAD_BYTES_DEFAULT);
  dropCacheBehindWrites=conf.getBoolean(DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_WRITES_KEY,DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_WRITES_DEFAULT);
  syncBehindWrites=conf.getBoolean(DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_KEY,DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_DEFAULT);
  syncBehindWritesInBackground=conf.getBoolean(DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_IN_BACKGROUND_KEY,DFSConfigKeys.DFS_DATANODE_SYNC_BEHIND_WRITES_IN_BACKGROUND_DEFAULT);
  dropCacheBehindReads=conf.getBoolean(DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_READS_KEY,DFSConfigKeys.DFS_DATANODE_DROP_CACHE_BEHIND_READS_DEFAULT);
  connectToDnViaHostname=conf.getBoolean(DFSConfigKeys.DFS_DATANODE_USE_DN_HOSTNAME,DFSConfigKeys.DFS_DATANODE_USE_DN_HOSTNAME_DEFAULT);
  this.blockReportInterval=conf.getLong(DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,DFS_BLOCKREPORT_INTERVAL_MSEC_DEFAULT);
  this.blockReportSplitThreshold=conf.getLong(DFS_BLOCKREPORT_SPLIT_THRESHOLD_KEY,DFS_BLOCKREPORT_SPLIT_THRESHOLD_DEFAULT);
  this.cacheReportInterval=conf.getLong(DFS_CACHEREPORT_INTERVAL_MSEC_KEY,DFS_CACHEREPORT_INTERVAL_MSEC_DEFAULT);
  this.dfsclientSlowIoWarningThresholdMs=conf.getLong(HdfsClientConfigKeys.DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_KEY,HdfsClientConfigKeys.DFS_CLIENT_SLOW_IO_WARNING_THRESHOLD_DEFAULT);
  this.datanodeSlowIoWarningThresholdMs=conf.getLong(DFSConfigKeys.DFS_DATANODE_SLOW_IO_WARNING_THRESHOLD_KEY,DFSConfigKeys.DFS_DATANODE_SLOW_IO_WARNING_THRESHOLD_DEFAULT);
  long initBRDelay=conf.getLong(DFS_BLOCKREPORT_INITIAL_DELAY_KEY,DFS_BLOCKREPORT_INITIAL_DELAY_DEFAULT) * 1000L;
  if (initBRDelay >= blockReportInterval) {
    initBRDelay=0;
    DataNode.LOG.info("dfs.blockreport.initialDelay is " + "greater than or equal to" + "dfs.blockreport.intervalMsec."+ " Setting initial delay to 0 msec:");
  }
  initialBlockReportDelayMs=initBRDelay;
  heartBeatInterval=conf.getLong(DFS_HEARTBEAT_INTERVAL_KEY,DFS_HEARTBEAT_INTERVAL_DEFAULT) * 1000L;
  this.syncOnClose=conf.getBoolean(DFS_DATANODE_SYNCONCLOSE_KEY,DFS_DATANODE_SYNCONCLOSE_DEFAULT);
  this.minimumNameNodeVersion=conf.get(DFS_DATANODE_MIN_SUPPORTED_NAMENODE_VERSION_KEY,DFS_DATANODE_MIN_SUPPORTED_NAMENODE_VERSION_DEFAULT);
  this.encryptDataTransfer=conf.getBoolean(DFS_ENCRYPT_DATA_TRANSFER_KEY,DFS_ENCRYPT_DATA_TRANSFER_DEFAULT);
  this.encryptionAlgorithm=conf.get(DFS_DATA_ENCRYPTION_ALGORITHM_KEY);
  this.trustedChannelResolver=TrustedChannelResolver.getInstance(conf);
  this.saslPropsResolver=DataTransferSaslUtil.getSaslPropertiesResolver(conf);
  this.ignoreSecurePortsForTesting=conf.getBoolean(IGNORE_SECURE_PORTS_FOR_TESTING_KEY,IGNORE_SECURE_PORTS_FOR_TESTING_DEFAULT);
  this.xceiverStopTimeout=conf.getLong(DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_KEY,DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_DEFAULT);
  this.maxLockedMemory=conf.getLong(DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,DFS_DATANODE_MAX_LOCKED_MEMORY_DEFAULT);
  this.restartReplicaExpiry=conf.getLong(DFS_DATANODE_RESTART_REPLICA_EXPIRY_KEY,DFS_DATANODE_RESTART_REPLICA_EXPIRY_DEFAULT) * 1000L;
  this.allowNonLocalLazyPersist=conf.getBoolean(DFS_DATANODE_NON_LOCAL_LAZY_PERSIST,DFS_DATANODE_NON_LOCAL_LAZY_PERSIST_DEFAULT);
}
