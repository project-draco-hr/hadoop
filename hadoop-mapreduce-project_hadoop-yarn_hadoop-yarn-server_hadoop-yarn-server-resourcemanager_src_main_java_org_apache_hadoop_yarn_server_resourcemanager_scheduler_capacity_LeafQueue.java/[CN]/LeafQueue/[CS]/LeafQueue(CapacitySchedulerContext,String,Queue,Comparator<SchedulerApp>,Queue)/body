{
  this.scheduler=cs;
  this.queueName=queueName;
  this.parent=parent;
  this.metrics=old != null ? old.getMetrics() : QueueMetrics.forQueue(getQueuePath(),parent,cs.getConfiguration().getEnableUserMetrics());
  this.minimumAllocation=cs.getMinimumResourceCapability();
  this.containerTokenSecretManager=cs.getContainerTokenSecretManager();
  float capacity=(float)cs.getConfiguration().getCapacity(getQueuePath()) / 100;
  float absoluteCapacity=parent.getAbsoluteCapacity() * capacity;
  float maximumCapacity=cs.getConfiguration().getMaximumCapacity(getQueuePath());
  float absoluteMaxCapacity=(maximumCapacity == CapacitySchedulerConfiguration.UNDEFINED) ? Float.MAX_VALUE : (parent.getAbsoluteCapacity() * maximumCapacity) / 100;
  int userLimit=cs.getConfiguration().getUserLimit(getQueuePath());
  float userLimitFactor=cs.getConfiguration().getUserLimitFactor(getQueuePath());
  int maxSystemJobs=cs.getConfiguration().getMaximumSystemApplications();
  int maxApplications=(int)(maxSystemJobs * absoluteCapacity);
  int maxApplicationsPerUser=(int)(maxApplications * (userLimit / 100.0f) * userLimitFactor);
  this.queueInfo=recordFactory.newRecordInstance(QueueInfo.class);
  this.queueInfo.setQueueName(queueName);
  this.queueInfo.setChildQueues(new ArrayList<QueueInfo>());
  QueueState state=cs.getConfiguration().getState(getQueuePath());
  Map<QueueACL,AccessControlList> acls=cs.getConfiguration().getAcls(getQueuePath());
  setupQueueConfigs(capacity,absoluteCapacity,maximumCapacity,absoluteMaxCapacity,userLimit,userLimitFactor,maxApplications,maxApplicationsPerUser,state,acls);
  LOG.info("DEBUG --- LeafQueue:" + " name=" + queueName + ", fullname="+ getQueuePath());
  this.applications=new TreeSet<SchedulerApp>(applicationComparator);
}
