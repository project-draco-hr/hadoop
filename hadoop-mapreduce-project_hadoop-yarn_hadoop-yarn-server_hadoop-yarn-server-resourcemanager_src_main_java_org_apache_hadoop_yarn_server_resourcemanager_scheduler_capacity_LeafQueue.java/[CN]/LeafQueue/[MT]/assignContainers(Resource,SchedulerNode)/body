{
  LOG.info("DEBUG --- assignContainers:" + " node=" + node.getHostName() + " #applications="+ activeApplications.size());
  RMContainer reservedContainer=node.getReservedContainer();
  if (reservedContainer != null) {
    SchedulerApp application=getApplication(reservedContainer.getApplicationAttemptId());
    return assignReservedContainer(application,node,reservedContainer,clusterResource);
  }
  for (  SchedulerApp application : activeApplications) {
    LOG.info("DEBUG --- pre-assignContainers for application " + application.getApplicationId());
    application.showRequests();
synchronized (application) {
      Resource userLimit=computeUserLimit(application,clusterResource,Resources.none());
      setUserResourceLimit(application,userLimit);
      for (      Priority priority : application.getPriorities()) {
        Resource required=application.getResourceRequest(priority,RMNode.ANY).getCapability();
        if (!needContainers(application,priority,required)) {
          continue;
        }
        if (!assignToQueue(clusterResource,required)) {
          return Resources.none();
        }
        userLimit=computeUserLimit(application,clusterResource,required);
        if (!assignToUser(application.getUser(),userLimit)) {
          break;
        }
        application.addSchedulingOpportunity(priority);
        Resource assigned=assignContainersOnNode(clusterResource,node,application,priority,null);
        if (Resources.greaterThan(assigned,Resources.none())) {
          Resource assignedResource=application.getResourceRequest(priority,RMNode.ANY).getCapability();
          allocateResource(clusterResource,application.getUser(),assignedResource);
          application.resetSchedulingOpportunities(priority);
          return assignedResource;
        }
 else {
          break;
        }
      }
    }
    LOG.info("DEBUG --- post-assignContainers for application " + application.getApplicationId());
    application.showRequests();
  }
  return Resources.none();
}
