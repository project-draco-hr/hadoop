{
  Runtime mockRuntime1=mock(Runtime.class);
  Runtime mockRuntime2=mock(Runtime.class);
  MiniDFSCluster cluster=null;
  try {
    Configuration conf=new Configuration();
    conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
    conf.set(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY,BKJMUtil.createJournalURI("/hotfailover").toString());
    BKJMUtil.addJournalManagerDefinition(conf);
    cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(0).manageNameDfsSharedDirs(false).build();
    NameNode nn1=cluster.getNameNode(0);
    NameNode nn2=cluster.getNameNode(1);
    FSEditLogTestUtil.setRuntimeForEditLog(nn1,mockRuntime1);
    FSEditLogTestUtil.setRuntimeForEditLog(nn2,mockRuntime2);
    cluster.waitActive();
    cluster.transitionToActive(0);
    Path p=new Path("/testBKJMfailover");
    FileSystem fs=HATestUtil.configureFailoverFs(cluster,conf);
    fs.mkdirs(p);
    cluster.shutdownNameNode(0);
    cluster.transitionToActive(1);
    assertTrue(fs.exists(p));
  }
  finally {
    verify(mockRuntime1,times(0)).exit(anyInt());
    verify(mockRuntime2,times(0)).exit(anyInt());
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
