{
  HdfsConfiguration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  try {
    fsTester=new TestFSRMStateStoreTester(cluster){
      Version VERSION_INFO=Version.newInstance(Integer.MAX_VALUE,0);
      @Override public Version getCurrentVersion() throws Exception {
        return VERSION_INFO;
      }
      @Override public RMStateStore getRMStateStore() throws Exception {
        YarnConfiguration conf=new YarnConfiguration();
        conf.set(YarnConfiguration.FS_RM_STATE_STORE_URI,workingDirPathURI.toString());
        conf.set(YarnConfiguration.FS_RM_STATE_STORE_RETRY_POLICY_SPEC,"100,6000");
        this.store=new TestFileSystemRMStore(conf){
          Version storedVersion=null;
          @Override public Version getCurrentVersion(){
            return VERSION_INFO;
          }
          @Override protected synchronized Version loadVersion() throws Exception {
            return storedVersion;
          }
          @Override protected synchronized void storeVersion() throws Exception {
            storedVersion=VERSION_INFO;
          }
        }
;
        return store;
      }
    }
;
    RMStateStore store=fsTester.getRMStateStore();
    Version defaultVersion=fsTester.getCurrentVersion();
    store.checkVersion();
    Assert.assertEquals(defaultVersion,store.loadVersion());
  }
  finally {
    cluster.shutdown();
  }
}
