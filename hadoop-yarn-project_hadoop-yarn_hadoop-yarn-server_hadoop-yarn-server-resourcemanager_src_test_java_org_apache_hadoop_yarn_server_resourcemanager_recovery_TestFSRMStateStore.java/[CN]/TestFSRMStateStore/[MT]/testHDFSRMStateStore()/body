{
  final HdfsConfiguration conf=new HdfsConfiguration();
  UserGroupInformation yarnAdmin=UserGroupInformation.createUserForTesting("yarn",new String[]{"admin"});
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  cluster.getFileSystem().mkdir(new Path("/yarn"),FsPermission.valueOf("-rwxrwxrwx"));
  cluster.getFileSystem().setOwner(new Path("/yarn"),"yarn","admin");
  final UserGroupInformation hdfsAdmin=UserGroupInformation.getCurrentUser();
  final StoreStateVerifier verifier=new StoreStateVerifier(){
    @Override void afterStoreApp(    final RMStateStore store,    final ApplicationId appId){
      try {
        Thread.sleep(5000);
        hdfsAdmin.doAs(new PrivilegedExceptionAction<Void>(){
          @Override public Void run() throws Exception {
            verifyFilesUnreadablebyHDFS(cluster,((FileSystemRMStateStore)store).getAppDir(appId));
            return null;
          }
        }
);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
    @Override void afterStoreAppAttempt(    final RMStateStore store,    final ApplicationAttemptId appAttId){
      try {
        Thread.sleep(5000);
        hdfsAdmin.doAs(new PrivilegedExceptionAction<Void>(){
          @Override public Void run() throws Exception {
            verifyFilesUnreadablebyHDFS(cluster,((FileSystemRMStateStore)store).getAppAttemptDir(appAttId));
            return null;
          }
        }
);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
    }
  }
;
  try {
    yarnAdmin.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        fsTester=new TestFSRMStateStoreTester(cluster,true);
        testRMAppStateStore(fsTester,verifier);
        return null;
      }
    }
);
  }
  finally {
    cluster.shutdown();
  }
}
