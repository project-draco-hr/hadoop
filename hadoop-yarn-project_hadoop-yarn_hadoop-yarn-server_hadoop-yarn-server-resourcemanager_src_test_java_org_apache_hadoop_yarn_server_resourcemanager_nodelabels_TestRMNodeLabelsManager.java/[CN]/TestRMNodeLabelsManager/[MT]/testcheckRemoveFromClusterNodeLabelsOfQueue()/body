{
class TestRMLabelManger extends RMNodeLabelsManager {
    @Override protected void checkRemoveFromClusterNodeLabelsOfQueue(    Collection<String> labelsToRemove) throws IOException {
      checkQueueCall=true;
    }
  }
  lmgr=new TestRMLabelManger();
  Configuration conf=new Configuration();
  File tempDir=File.createTempFile("nlb",".tmp");
  tempDir.delete();
  tempDir.mkdirs();
  tempDir.deleteOnExit();
  conf.set(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR,tempDir.getAbsolutePath());
  conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
  MockRM rm=new MockRM(conf){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return lmgr;
    }
  }
;
  lmgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("a"));
  lmgr.removeFromClusterNodeLabels(Arrays.asList(new String[]{"a"}));
  rm.getRMContext().setNodeLabelManager(lmgr);
  rm.start();
  lmgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("a"));
  Assert.assertEquals(false,checkQueueCall);
  lmgr.removeFromClusterNodeLabels(Arrays.asList(new String[]{"a"}));
  Assert.assertEquals(true,checkQueueCall);
  lmgr.stop();
  lmgr.close();
  rm.stop();
}
