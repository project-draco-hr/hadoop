{
  RMContext rmContext=mock(RMContext.class);
  Dispatcher syncDispatcher=new InlineDispatcher();
  SchedulerEventHandler schedEventsHandler=new SchedulerEventHandler();
  syncDispatcher.register(SchedulerEventType.class,schedEventsHandler);
  when(rmContext.getDispatcher()).thenReturn(syncDispatcher);
  mgr.setRMContext(rmContext);
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(toSet("p1","p2","p3"));
  mgr.activateNode(NodeId.newInstance("n1",1),SMALL_RESOURCE);
  mgr.activateNode(NodeId.newInstance("n2",1),SMALL_RESOURCE);
  mgr.activateNode(NodeId.newInstance("n3",1),SMALL_RESOURCE);
  mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p1"),toNodeId("n2:1"),toSet("p2"),toNodeId("n3"),toSet("p3")));
  assertTrue("Event should be sent when there is change in labels",schedEventsHandler.receivedEvent);
  assertEquals("3 node label mapping modified",3,schedEventsHandler.updatedNodeToLabels.size());
  ImmutableMap<NodeId,Set<String>> modifiedMap=ImmutableMap.of(toNodeId("n1:1"),toSet("p1"),toNodeId("n2:1"),toSet("p2"),toNodeId("n3:1"),toSet("p3"));
  assertEquals("Node label mapping is not matching",modifiedMap,schedEventsHandler.updatedNodeToLabels);
  schedEventsHandler.receivedEvent=false;
  mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1:1"),toSet("p1")));
  assertFalse("No event should be sent when there is no change in labels",schedEventsHandler.receivedEvent);
  schedEventsHandler.receivedEvent=false;
  mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n2:1"),toSet("p1"),toNodeId("n3"),toSet("p3")));
  assertTrue("Event should be sent when there is change in labels",schedEventsHandler.receivedEvent);
  assertEquals("Single node label mapping modified",1,schedEventsHandler.updatedNodeToLabels.size());
  assertCollectionEquals(toSet("p1"),schedEventsHandler.updatedNodeToLabels.get(toNodeId("n2:1")));
  schedEventsHandler.receivedEvent=false;
  mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n3"),toSet("p2")));
  assertTrue("Event should be sent when there is change in labels @ HOST",schedEventsHandler.receivedEvent);
  assertEquals("Single node label mapping modified",1,schedEventsHandler.updatedNodeToLabels.size());
  assertCollectionEquals(toSet("p2"),schedEventsHandler.updatedNodeToLabels.get(toNodeId("n3:1")));
  schedEventsHandler.receivedEvent=false;
  mgr.replaceLabelsOnNode(ImmutableMap.of(toNodeId("n1"),toSet("p2")));
  assertTrue("Event should be sent when labels are modified at host though labels were set @ NM level",schedEventsHandler.receivedEvent);
  assertEquals("Single node label mapping modified",1,schedEventsHandler.updatedNodeToLabels.size());
  assertCollectionEquals(toSet("p2"),schedEventsHandler.updatedNodeToLabels.get(toNodeId("n1:1")));
  schedEventsHandler.receivedEvent=false;
}
