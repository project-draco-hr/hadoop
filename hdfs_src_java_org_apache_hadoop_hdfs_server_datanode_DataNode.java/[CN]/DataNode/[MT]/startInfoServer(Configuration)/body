{
  InetSocketAddress infoSocAddr=DataNode.getInfoAddr(conf);
  String infoHost=infoSocAddr.getHostName();
  int tmpInfoPort=infoSocAddr.getPort();
  this.infoServer=(secureResources == null) ? new HttpServer("datanode",infoHost,tmpInfoPort,tmpInfoPort == 0,conf,new AccessControlList(conf.get(DFS_ADMIN," "))) : new HttpServer("datanode",infoHost,tmpInfoPort,tmpInfoPort == 0,conf,new AccessControlList(conf.get(DFS_ADMIN," ")),secureResources.getListener());
  if (LOG.isDebugEnabled()) {
    LOG.debug("Datanode listening on " + infoHost + ":"+ tmpInfoPort);
  }
  if (conf.getBoolean("dfs.https.enable",false)) {
    boolean needClientAuth=conf.getBoolean(DFS_CLIENT_HTTPS_NEED_AUTH_KEY,DFS_CLIENT_HTTPS_NEED_AUTH_DEFAULT);
    InetSocketAddress secInfoSocAddr=NetUtils.createSocketAddr(conf.get("dfs.datanode.https.address",infoHost + ":" + 0));
    Configuration sslConf=new HdfsConfiguration(false);
    sslConf.addResource(conf.get("dfs.https.server.keystore.resource","ssl-server.xml"));
    this.infoServer.addSslListener(secInfoSocAddr,sslConf,needClientAuth);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Datanode listening for SSL on " + secInfoSocAddr);
    }
  }
  this.infoServer.addInternalServlet(null,"/streamFile/*",StreamFile.class);
  this.infoServer.addInternalServlet(null,"/getFileChecksum/*",FileChecksumServlets.GetServlet.class);
  this.infoServer.setAttribute("datanode",this);
  this.infoServer.setAttribute(JspHelper.CURRENT_CONF,conf);
  this.infoServer.addServlet(null,"/blockScannerReport",DataBlockScanner.Servlet.class);
  this.infoServer.start();
}
