{
  this.socketTimeout=conf.getInt(DFS_CLIENT_SOCKET_TIMEOUT_KEY,HdfsConstants.READ_TIMEOUT);
  this.socketWriteTimeout=conf.getInt(DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,HdfsConstants.WRITE_TIMEOUT);
  this.transferToAllowed=conf.getBoolean("dfs.datanode.transferTo.allowed",true);
  this.writePacketSize=conf.getInt(DFS_CLIENT_WRITE_PACKET_SIZE_KEY,DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT);
  this.blockReportInterval=conf.getLong(DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,BLOCKREPORT_INTERVAL);
  this.initialBlockReportDelay=conf.getLong(DFS_BLOCKREPORT_INITIAL_DELAY_KEY,BLOCKREPORT_INITIAL_DELAY) * 1000L;
  if (this.initialBlockReportDelay >= blockReportInterval) {
    this.initialBlockReportDelay=0;
    LOG.info("dfs.blockreport.initialDelay is greater than " + "dfs.blockreport.intervalMsec." + " Setting initial delay to 0 msec:");
  }
  this.heartBeatInterval=conf.getLong(DFS_HEARTBEAT_INTERVAL_KEY,HEARTBEAT_INTERVAL) * 1000L;
  this.syncOnClose=conf.getBoolean(DFS_DATANODE_SYNCONCLOSE_KEY,DFS_DATANODE_SYNCONCLOSE_DEFAULT);
}
