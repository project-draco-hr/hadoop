{
  final InodeTree.ResolveResult<AbstractFileSystem> res=fsState.resolve(getUriPath(f),true);
  final RemoteIterator<FileStatus> fsIter=res.targetFileSystem.listStatusIterator(res.remainingPath);
  if (res.isInternalDir()) {
    return fsIter;
  }
  return new RemoteIterator<FileStatus>(){
    final RemoteIterator<FileStatus> myIter;
    final ChRootedFs targetFs;
{
      myIter=fsIter;
      targetFs=(ChRootedFs)res.targetFileSystem;
    }
    @Override public boolean hasNext() throws IOException {
      return myIter.hasNext();
    }
    @Override public FileStatus next() throws IOException {
      FileStatus status=myIter.next();
      String suffix=targetFs.stripOutRoot(status.getPath());
      return new ViewFsFileStatus(status,makeQualified(suffix.length() == 0 ? f : new Path(res.resolvedPath,suffix)));
    }
  }
;
}
