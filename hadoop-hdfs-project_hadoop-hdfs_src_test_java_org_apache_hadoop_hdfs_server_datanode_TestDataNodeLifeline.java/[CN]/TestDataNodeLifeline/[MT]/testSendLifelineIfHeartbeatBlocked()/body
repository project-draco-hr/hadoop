{
  int numLifelines=10;
  CountDownLatch lifelinesSent=new CountDownLatch(numLifelines);
  doAnswer(new LatchAwaitingAnswer<HeartbeatResponse>(lifelinesSent)).when(namenode).sendHeartbeat(any(DatanodeRegistration.class),any(StorageReport[].class),anyLong(),anyLong(),anyInt(),anyInt(),anyInt(),any(VolumeFailureSummary.class),anyBoolean());
  doAnswer(new LatchCountingAnswer<Void>(lifelinesSent)).when(lifelineNamenode).sendLifeline(any(DatanodeRegistration.class),any(StorageReport[].class),anyLong(),anyLong(),anyInt(),anyInt(),anyInt(),any(VolumeFailureSummary.class));
  while (!lifelinesSent.await(1,SECONDS)) {
    assertEquals("Expect DataNode to be kept alive by lifeline.",1,namesystem.getNumLiveDataNodes());
    assertEquals("Expect DataNode not marked dead due to lifeline.",0,namesystem.getNumDeadDataNodes());
    assertEquals("Expect DataNode not marked stale due to lifeline.",0,namesystem.getNumStaleDataNodes());
  }
  verify(lifelineNamenode,atLeastOnce()).sendLifeline(any(DatanodeRegistration.class),any(StorageReport[].class),anyLong(),anyLong(),anyInt(),anyInt(),anyInt(),any(VolumeFailureSummary.class));
  assertTrue("Expect metrics to count at least " + numLifelines + " calls.",getLongCounter("LifelinesNumOps",getMetrics(metrics.name())) >= numLifelines);
}
