{
  List<DatanodeStorageInfo> excessReplicas=new ArrayList<>();
  final Map<String,List<DatanodeStorageInfo>> rackMap=new HashMap<>();
  final List<DatanodeStorageInfo> moreThanOne=new ArrayList<>();
  final List<DatanodeStorageInfo> exactlyOne=new ArrayList<>();
  splitNodesWithRack(availableReplicas,delCandidates,rackMap,moreThanOne,exactlyOne);
  boolean firstOne=true;
  final DatanodeStorageInfo delNodeHintStorage=DatanodeStorageInfo.getDatanodeStorageInfo(delCandidates,delNodeHint);
  final DatanodeStorageInfo addedNodeStorage=DatanodeStorageInfo.getDatanodeStorageInfo(delCandidates,addedNode);
  while (delCandidates.size() - expectedNumOfReplicas > excessReplicas.size()) {
    final DatanodeStorageInfo cur;
    if (firstOne && useDelHint(delNodeHintStorage,addedNodeStorage,moreThanOne,exactlyOne,excessTypes)) {
      cur=delNodeHintStorage;
    }
 else {
      cur=chooseReplicaToDelete(moreThanOne,exactlyOne,excessTypes,rackMap);
    }
    firstOne=false;
    if (cur == null) {
      LOG.warn("No excess replica can be found. excessTypes: {}." + " moreThanOne: {}. exactlyOne: {}.",excessTypes,moreThanOne,exactlyOne);
      break;
    }
    adjustSetsWithChosenReplica(rackMap,moreThanOne,exactlyOne,cur);
    excessReplicas.add(cur);
  }
  return excessReplicas;
}
