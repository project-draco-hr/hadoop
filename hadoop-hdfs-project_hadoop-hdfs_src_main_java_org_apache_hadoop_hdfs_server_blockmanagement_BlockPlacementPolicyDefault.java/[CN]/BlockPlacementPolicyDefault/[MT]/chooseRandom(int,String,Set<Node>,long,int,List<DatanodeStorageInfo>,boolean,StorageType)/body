{
  int numOfAvailableNodes=clusterMap.countNumOfAvailableNodes(scope,excludedNodes);
  StringBuilder builder=null;
  if (LOG.isDebugEnabled()) {
    builder=debugLoggingBuilder.get();
    builder.setLength(0);
    builder.append("[");
  }
  boolean badTarget=false;
  DatanodeStorageInfo firstChosen=null;
  while (numOfReplicas > 0 && numOfAvailableNodes > 0) {
    DatanodeDescriptor chosenNode=(DatanodeDescriptor)clusterMap.chooseRandom(scope);
    if (excludedNodes.add(chosenNode)) {
      numOfAvailableNodes--;
      final DatanodeStorageInfo[] storages=DFSUtil.shuffle(chosenNode.getStorageInfos());
      int i;
      for (i=0; i < storages.length; i++) {
        final int newExcludedNodes=addIfIsGoodTarget(storages[i],excludedNodes,blocksize,maxNodesPerRack,considerLoad,results,avoidStaleNodes,storageType);
        if (newExcludedNodes >= 0) {
          numOfReplicas--;
          if (firstChosen == null) {
            firstChosen=storages[i];
          }
          numOfAvailableNodes-=newExcludedNodes;
          break;
        }
      }
      badTarget=(i == storages.length);
    }
  }
  if (numOfReplicas > 0) {
    String detail=enableDebugLogging;
    if (LOG.isDebugEnabled()) {
      if (badTarget && builder != null) {
        detail=builder.append("]").toString();
        builder.setLength(0);
      }
 else       detail="";
    }
    throw new NotEnoughReplicasException(detail);
  }
  return firstChosen;
}
