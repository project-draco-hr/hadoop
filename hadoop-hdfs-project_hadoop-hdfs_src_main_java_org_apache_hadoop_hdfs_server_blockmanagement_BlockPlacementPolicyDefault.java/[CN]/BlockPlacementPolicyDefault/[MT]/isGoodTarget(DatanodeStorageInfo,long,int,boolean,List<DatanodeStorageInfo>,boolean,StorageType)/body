{
  if (storage.getStorageType() != storageType) {
    logNodeIsNotChosen(storage,"storage types do not match, where the expected storage type is " + storageType);
    return false;
  }
  if (storage.getState() == State.READ_ONLY_SHARED) {
    logNodeIsNotChosen(storage,"storage is read-only");
    return false;
  }
  DatanodeDescriptor node=storage.getDatanodeDescriptor();
  if (node.isDecommissionInProgress() || node.isDecommissioned()) {
    logNodeIsNotChosen(storage,"the node is (being) decommissioned ");
    return false;
  }
  if (avoidStaleNodes) {
    if (node.isStale(this.staleInterval)) {
      logNodeIsNotChosen(storage,"the node is stale ");
      return false;
    }
  }
  final long requiredSize=blockSize * HdfsConstants.MIN_BLOCKS_FOR_WRITE;
  final long scheduledSize=blockSize * node.getBlocksScheduled();
  if (requiredSize > storage.getRemaining() - scheduledSize) {
    logNodeIsNotChosen(storage,"the node does not have enough space ");
    return false;
  }
  if (considerLoad) {
    final double maxLoad=2.0 * stats.getInServiceXceiverAverage();
    final int nodeLoad=node.getXceiverCount();
    if (nodeLoad > maxLoad) {
      logNodeIsNotChosen(storage,"the node is too busy (load:" + nodeLoad + " > "+ maxLoad+ ") ");
      return false;
    }
  }
  String rackname=node.getNetworkLocation();
  int counter=1;
  for (  DatanodeStorageInfo resultStorage : results) {
    if (rackname.equals(resultStorage.getDatanodeDescriptor().getNetworkLocation())) {
      counter++;
    }
  }
  if (counter > maxTargetPerRack) {
    logNodeIsNotChosen(storage,"the rack has too many chosen nodes ");
    return false;
  }
  return true;
}
