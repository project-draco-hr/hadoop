{
  long oldestHeartbeat=monotonicNow() - heartbeatInterval * tolerateHeartbeatMultiplier;
  DatanodeStorageInfo oldestHeartbeatStorage=null;
  long minSpace=Long.MAX_VALUE;
  DatanodeStorageInfo minSpaceStorage=null;
  for (  DatanodeStorageInfo storage : pickupReplicaSet(moreThanone,exactlyOne)) {
    if (!excessTypes.contains(storage.getStorageType())) {
      continue;
    }
    final DatanodeDescriptor node=storage.getDatanodeDescriptor();
    long free=node.getRemaining();
    long lastHeartbeat=node.getLastUpdateMonotonic();
    if (lastHeartbeat < oldestHeartbeat) {
      oldestHeartbeat=lastHeartbeat;
      oldestHeartbeatStorage=storage;
    }
    if (minSpace > free) {
      minSpace=free;
      minSpaceStorage=storage;
    }
  }
  final DatanodeStorageInfo storage;
  if (oldestHeartbeatStorage != null) {
    storage=oldestHeartbeatStorage;
  }
 else   if (minSpaceStorage != null) {
    storage=minSpaceStorage;
  }
 else {
    return null;
  }
  excessTypes.remove(storage.getStorageType());
  return storage;
}
