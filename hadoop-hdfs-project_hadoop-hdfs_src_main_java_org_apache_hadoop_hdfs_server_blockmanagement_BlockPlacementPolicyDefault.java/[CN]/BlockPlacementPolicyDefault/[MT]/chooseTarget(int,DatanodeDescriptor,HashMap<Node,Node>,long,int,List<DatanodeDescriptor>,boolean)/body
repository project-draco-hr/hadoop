{
  if (numOfReplicas == 0 || clusterMap.getNumOfLeaves() == 0) {
    return writer;
  }
  int totalReplicasExpected=numOfReplicas + results.size();
  int numOfResults=results.size();
  boolean newBlock=(numOfResults == 0);
  if (writer == null && !newBlock) {
    writer=results.get(0);
  }
  final HashMap<Node,Node> oldExcludedNodes=avoidStaleNodes ? new HashMap<Node,Node>(excludedNodes) : null;
  try {
    if (numOfResults == 0) {
      writer=chooseLocalNode(writer,excludedNodes,blocksize,maxNodesPerRack,results,avoidStaleNodes);
      if (--numOfReplicas == 0) {
        return writer;
      }
    }
    if (numOfResults <= 1) {
      chooseRemoteRack(1,results.get(0),excludedNodes,blocksize,maxNodesPerRack,results,avoidStaleNodes);
      if (--numOfReplicas == 0) {
        return writer;
      }
    }
    if (numOfResults <= 2) {
      if (clusterMap.isOnSameRack(results.get(0),results.get(1))) {
        chooseRemoteRack(1,results.get(0),excludedNodes,blocksize,maxNodesPerRack,results,avoidStaleNodes);
      }
 else       if (newBlock) {
        chooseLocalRack(results.get(1),excludedNodes,blocksize,maxNodesPerRack,results,avoidStaleNodes);
      }
 else {
        chooseLocalRack(writer,excludedNodes,blocksize,maxNodesPerRack,results,avoidStaleNodes);
      }
      if (--numOfReplicas == 0) {
        return writer;
      }
    }
    chooseRandom(numOfReplicas,NodeBase.ROOT,excludedNodes,blocksize,maxNodesPerRack,results,avoidStaleNodes);
  }
 catch (  NotEnoughReplicasException e) {
    LOG.warn("Not able to place enough replicas, still in need of " + (totalReplicasExpected - results.size()) + " to reach "+ totalReplicasExpected+ "\n"+ e.getMessage());
    if (avoidStaleNodes) {
      for (      Node node : results) {
        oldExcludedNodes.put(node,node);
      }
      numOfReplicas=totalReplicasExpected - results.size();
      return chooseTarget(numOfReplicas,writer,oldExcludedNodes,blocksize,maxNodesPerRack,results,false);
    }
  }
  return writer;
}
