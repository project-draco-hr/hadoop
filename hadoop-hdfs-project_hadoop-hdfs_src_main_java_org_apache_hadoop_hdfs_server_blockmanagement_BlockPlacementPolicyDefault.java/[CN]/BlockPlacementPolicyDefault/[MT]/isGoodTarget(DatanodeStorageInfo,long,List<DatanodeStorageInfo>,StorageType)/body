{
  if (storage.getStorageType() != requiredStorageType) {
    logNodeIsNotChosen(storage,"storage types do not match," + " where the required storage type is " + requiredStorageType);
    return false;
  }
  if (storage.getState() == State.READ_ONLY_SHARED) {
    logNodeIsNotChosen(storage,"storage is read-only");
    return false;
  }
  if (storage.getState() == State.FAILED) {
    logNodeIsNotChosen(storage,"storage has failed");
    return false;
  }
  DatanodeDescriptor node=storage.getDatanodeDescriptor();
  final long requiredSize=blockSize * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE;
  final long scheduledSize=blockSize * node.getBlocksScheduled(storage.getStorageType());
  final long remaining=node.getRemaining(storage.getStorageType());
  if (requiredSize > remaining - scheduledSize) {
    logNodeIsNotChosen(storage,"the node does not have enough " + storage.getStorageType() + " space"+ " (required="+ requiredSize+ ", scheduled="+ scheduledSize+ ", remaining="+ remaining+ ")");
    return false;
  }
  return true;
}
