{
  if (numOfReplicas == 0 || clusterMap.getNumOfLeaves() == 0) {
    return DatanodeStorageInfo.EMPTY_ARRAY;
  }
  if (excludedNodes == null) {
    excludedNodes=new HashSet<>();
  }
  int[] result=getMaxNodesPerRack(chosenStorage.size(),numOfReplicas);
  numOfReplicas=result[0];
  int maxNodesPerRack=result[1];
  final List<DatanodeStorageInfo> results=new ArrayList<>(chosenStorage);
  for (  DatanodeStorageInfo storage : chosenStorage) {
    addToExcludedNodes(storage.getDatanodeDescriptor(),excludedNodes);
  }
  boolean avoidStaleNodes=(stats != null && stats.isAvoidingStaleDataNodesForWrite());
  final Node localNode=chooseTarget(numOfReplicas,writer,excludedNodes,blocksize,maxNodesPerRack,results,avoidStaleNodes,storagePolicy,EnumSet.noneOf(StorageType.class),results.isEmpty());
  if (!returnChosenNodes) {
    results.removeAll(chosenStorage);
  }
  return getPipeline((writer != null && writer instanceof DatanodeDescriptor) ? writer : localNode,results.toArray(new DatanodeStorageInfo[results.size()]));
}
