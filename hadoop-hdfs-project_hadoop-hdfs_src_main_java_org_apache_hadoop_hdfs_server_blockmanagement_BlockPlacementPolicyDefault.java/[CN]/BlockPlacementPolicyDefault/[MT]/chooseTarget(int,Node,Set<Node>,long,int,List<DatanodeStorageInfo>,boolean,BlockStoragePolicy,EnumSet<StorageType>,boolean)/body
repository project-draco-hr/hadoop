{
  if (numOfReplicas == 0 || clusterMap.getNumOfLeaves() == 0) {
    return (writer instanceof DatanodeDescriptor) ? writer : null;
  }
  final int numOfResults=results.size();
  final int totalReplicasExpected=numOfReplicas + numOfResults;
  if ((writer == null || !(writer instanceof DatanodeDescriptor)) && !newBlock) {
    writer=results.get(0).getDatanodeDescriptor();
  }
  final Set<Node> oldExcludedNodes=new HashSet<>(excludedNodes);
  final List<StorageType> requiredStorageTypes=storagePolicy.chooseStorageTypes((short)totalReplicasExpected,DatanodeStorageInfo.toStorageTypes(results),unavailableStorages,newBlock);
  final EnumMap<StorageType,Integer> storageTypes=getRequiredStorageTypes(requiredStorageTypes);
  if (LOG.isTraceEnabled()) {
    LOG.trace("storageTypes=" + storageTypes);
  }
  try {
    if ((numOfReplicas=requiredStorageTypes.size()) == 0) {
      throw new NotEnoughReplicasException("All required storage types are unavailable: " + " unavailableStorages=" + unavailableStorages + ", storagePolicy="+ storagePolicy);
    }
    writer=chooseTargetInOrder(numOfReplicas,writer,excludedNodes,blocksize,maxNodesPerRack,results,avoidStaleNodes,newBlock,storageTypes);
  }
 catch (  NotEnoughReplicasException e) {
    final String message="Failed to place enough replicas, still in need of " + (totalReplicasExpected - results.size()) + " to reach "+ totalReplicasExpected+ " (unavailableStorages="+ unavailableStorages+ ", storagePolicy="+ storagePolicy+ ", newBlock="+ newBlock+ ")";
    if (LOG.isTraceEnabled()) {
      LOG.trace(message,e);
    }
 else {
      LOG.warn(message + " " + e.getMessage());
    }
    if (avoidStaleNodes) {
      for (      DatanodeStorageInfo resultStorage : results) {
        addToExcludedNodes(resultStorage.getDatanodeDescriptor(),oldExcludedNodes);
      }
      numOfReplicas=totalReplicasExpected - results.size();
      return chooseTarget(numOfReplicas,writer,oldExcludedNodes,blocksize,maxNodesPerRack,results,false,storagePolicy,unavailableStorages,newBlock);
    }
    boolean retry=false;
    for (    StorageType type : storageTypes.keySet()) {
      if (!unavailableStorages.contains(type)) {
        unavailableStorages.add(type);
        retry=true;
      }
    }
    if (retry) {
      for (      DatanodeStorageInfo resultStorage : results) {
        addToExcludedNodes(resultStorage.getDatanodeDescriptor(),oldExcludedNodes);
      }
      numOfReplicas=totalReplicasExpected - results.size();
      return chooseTarget(numOfReplicas,writer,oldExcludedNodes,blocksize,maxNodesPerRack,results,false,storagePolicy,unavailableStorages,newBlock);
    }
  }
  return writer;
}
