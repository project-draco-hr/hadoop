{
  int numOfAvailableNodes=clusterMap.countNumOfAvailableNodes(scope,excludedNodes);
  StringBuilder builder=null;
  if (LOG.isDebugEnabled()) {
    builder=debugLoggingBuilder.get();
    builder.setLength(0);
    builder.append("[");
  }
  boolean badTarget=false;
  DatanodeDescriptor firstChosen=null;
  while (numOfReplicas > 0 && numOfAvailableNodes > 0) {
    DatanodeDescriptor chosenNode=(DatanodeDescriptor)clusterMap.chooseRandom(scope);
    if (excludedNodes.add(chosenNode)) {
      numOfAvailableNodes--;
      int newExcludedNodes=addIfIsGoodTarget(chosenNode,excludedNodes,blocksize,maxNodesPerRack,considerLoad,results,avoidStaleNodes);
      if (newExcludedNodes >= 0) {
        numOfReplicas--;
        if (firstChosen == null) {
          firstChosen=chosenNode;
        }
        numOfAvailableNodes-=newExcludedNodes;
      }
 else {
        badTarget=true;
      }
    }
  }
  if (numOfReplicas > 0) {
    String detail=enableDebugLogging;
    if (LOG.isDebugEnabled()) {
      if (badTarget && builder != null) {
        detail=builder.append("]").toString();
        builder.setLength(0);
      }
 else       detail="";
    }
    throw new NotEnoughReplicasException(detail);
  }
  return firstChosen;
}
