{
  if (node.isDecommissionInProgress() || node.isDecommissioned()) {
    logNodeIsNotChosen(node,"the node is (being) decommissioned ");
    return false;
  }
  if (avoidStaleNodes) {
    if (node.isStale(this.staleInterval)) {
      logNodeIsNotChosen(node,"the node is stale ");
      return false;
    }
  }
  long remaining=node.getRemaining() - (node.getBlocksScheduled() * blockSize);
  if (blockSize * HdfsConstants.MIN_BLOCKS_FOR_WRITE > remaining) {
    logNodeIsNotChosen(node,"the node does not have enough space ");
    return false;
  }
  if (considerLoad) {
    double avgLoad=0;
    int size=clusterMap.getNumOfLeaves();
    if (size != 0 && stats != null) {
      avgLoad=(double)stats.getTotalLoad() / size;
    }
    if (node.getXceiverCount() > (2.0 * avgLoad)) {
      logNodeIsNotChosen(node,"the node is too busy ");
      return false;
    }
  }
  String rackname=node.getNetworkLocation();
  int counter=1;
  for (  Node result : results) {
    if (rackname.equals(result.getNetworkLocation())) {
      counter++;
    }
  }
  if (counter > maxTargetPerRack) {
    logNodeIsNotChosen(node,"the rack has too many chosen nodes ");
    return false;
  }
  return true;
}
