{
  int numOfAvailableNodes=clusterMap.countNumOfAvailableNodes(scope,excludedNodes);
  StringBuilder builder=null;
  if (LOG.isDebugEnabled()) {
    builder=debugLoggingBuilder.get();
    builder.setLength(0);
    builder.append("[");
  }
  boolean badTarget=false;
  DatanodeStorageInfo firstChosen=null;
  while (numOfReplicas > 0 && numOfAvailableNodes > 0) {
    DatanodeDescriptor chosenNode=chooseDataNode(scope);
    if (excludedNodes.add(chosenNode)) {
      if (LOG.isDebugEnabled()) {
        builder.append("\nNode ").append(NodeBase.getPath(chosenNode)).append(" [");
      }
      numOfAvailableNodes--;
      DatanodeStorageInfo storage=null;
      if (isGoodDatanode(chosenNode,maxNodesPerRack,considerLoad,results,avoidStaleNodes)) {
        for (Iterator<Map.Entry<StorageType,Integer>> iter=storageTypes.entrySet().iterator(); iter.hasNext(); ) {
          Map.Entry<StorageType,Integer> entry=iter.next();
          storage=chooseStorage4Block(chosenNode,blocksize,results,entry.getKey());
          if (storage != null) {
            numOfReplicas--;
            if (firstChosen == null) {
              firstChosen=storage;
            }
            numOfAvailableNodes-=addToExcludedNodes(chosenNode,excludedNodes);
            int num=entry.getValue();
            if (num == 1) {
              iter.remove();
            }
 else {
              entry.setValue(num - 1);
            }
            break;
          }
        }
      }
      if (LOG.isDebugEnabled()) {
        builder.append("\n]");
      }
      badTarget=(storage == null);
    }
  }
  if (numOfReplicas > 0) {
    String detail=enableDebugLogging;
    if (LOG.isDebugEnabled()) {
      if (badTarget && builder != null) {
        detail=builder.toString();
        builder.setLength(0);
      }
 else {
        detail="";
      }
    }
    throw new NotEnoughReplicasException(detail);
  }
  return firstChosen;
}
