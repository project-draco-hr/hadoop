{
  Resource totalResource=node.getTotalResource();
  maxAllocWriteLock.lock();
  try {
    if (add) {
      int nodeMemory=totalResource.getMemory();
      if (nodeMemory > maxNodeMemory) {
        maxNodeMemory=nodeMemory;
        maximumAllocation.setMemory(Math.min(configuredMaximumAllocation.getMemory(),maxNodeMemory));
      }
      int nodeVCores=totalResource.getVirtualCores();
      if (nodeVCores > maxNodeVCores) {
        maxNodeVCores=nodeVCores;
        maximumAllocation.setVirtualCores(Math.min(configuredMaximumAllocation.getVirtualCores(),maxNodeVCores));
      }
    }
 else {
      if (maxNodeMemory == totalResource.getMemory()) {
        maxNodeMemory=-1;
      }
      if (maxNodeVCores == totalResource.getVirtualCores()) {
        maxNodeVCores=-1;
      }
      if (maxNodeMemory == -1 || maxNodeVCores == -1) {
        for (        Map.Entry<NodeId,N> nodeEntry : nodes.entrySet()) {
          int nodeMemory=nodeEntry.getValue().getTotalResource().getMemory();
          if (nodeMemory > maxNodeMemory) {
            maxNodeMemory=nodeMemory;
          }
          int nodeVCores=nodeEntry.getValue().getTotalResource().getVirtualCores();
          if (nodeVCores > maxNodeVCores) {
            maxNodeVCores=nodeVCores;
          }
        }
        if (maxNodeMemory == -1) {
          maximumAllocation.setMemory(configuredMaximumAllocation.getMemory());
        }
 else {
          maximumAllocation.setMemory(Math.min(configuredMaximumAllocation.getMemory(),maxNodeMemory));
        }
        if (maxNodeVCores == -1) {
          maximumAllocation.setVirtualCores(configuredMaximumAllocation.getVirtualCores());
        }
 else {
          maximumAllocation.setVirtualCores(Math.min(configuredMaximumAllocation.getVirtualCores(),maxNodeVCores));
        }
      }
    }
  }
  finally {
    maxAllocWriteLock.unlock();
  }
}
