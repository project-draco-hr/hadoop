{
  JobConf conf=new JobConf(TestJavaSerialization.class);
  conf.setJobName("JavaSerialization");
  FileSystem fs=FileSystem.get(conf);
  cleanAndCreateInput(fs);
  conf.set("io.serializations","org.apache.hadoop.io.serializer.JavaSerialization," + "org.apache.hadoop.io.serializer.WritableSerialization");
  conf.setInputFormat(TextInputFormat.class);
  conf.setOutputKeyClass(String.class);
  conf.setOutputValueClass(Long.class);
  conf.setOutputKeyComparatorClass(JavaSerializationComparator.class);
  conf.setMapperClass(WordCountMapper.class);
  conf.setReducerClass(SumReducer.class);
  conf.set(MRConfig.FRAMEWORK_NAME,MRConfig.LOCAL_FRAMEWORK_NAME);
  FileInputFormat.setInputPaths(conf,INPUT_DIR);
  FileOutputFormat.setOutputPath(conf,OUTPUT_DIR);
  String inputFileContents=FileUtils.readFileToString(new File(INPUT_FILE.toUri().getPath()));
  assertTrue("Input file contents not as expected; contents are '" + inputFileContents + "', expected \"b a\n\" ",inputFileContents.equals("b a\n"));
  JobClient.runJob(conf);
  Path[] outputFiles=FileUtil.stat2Paths(fs.listStatus(OUTPUT_DIR,new Utils.OutputFileUtils.OutputFilesFilter()));
  assertEquals(1,outputFiles.length);
  InputStream is=fs.open(outputFiles[0]);
  String reduceOutput=org.apache.commons.io.IOUtils.toString(is);
  String[] lines=reduceOutput.split(System.getProperty("line.separator"));
  assertEquals("Unexpected output; received output '" + reduceOutput + "'","a\t1",lines[0]);
  assertEquals("Unexpected output; received output '" + reduceOutput + "'","b\t1",lines[1]);
  assertEquals("Reduce output has extra lines; output is '" + reduceOutput + "'",2,lines.length);
  is.close();
}
