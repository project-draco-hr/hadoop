{
  super(checksum,checksum.getBytesPerChecksum(),checksum.getChecksumSize());
  this.dfsClient=dfsClient;
  this.src=src;
  this.fileId=stat.getFileId();
  this.blockSize=stat.getBlockSize();
  this.blockReplication=stat.getReplication();
  this.fileEncryptionInfo=stat.getFileEncryptionInfo();
  this.progress=progress;
  this.cachingStrategy=new AtomicReference<CachingStrategy>(dfsClient.getDefaultWriteCachingStrategy());
  if ((progress != null) && DFSClient.LOG.isDebugEnabled()) {
    DFSClient.LOG.debug("Set non-null progress callback on DFSOutputStream " + src);
  }
  final int bytesPerChecksum=checksum.getBytesPerChecksum();
  if (bytesPerChecksum < 1 || blockSize % bytesPerChecksum != 0) {
    throw new IOException("io.bytes.per.checksum(" + bytesPerChecksum + ") and blockSize("+ blockSize+ ") do not match. "+ "blockSize should be a "+ "multiple of io.bytes.per.checksum");
  }
  this.checksum=checksum;
  this.dfsclientSlowLogThresholdMs=dfsClient.getConf().dfsclientSlowIoWarningThresholdMs;
}
