{
  if (needRefresh()) {
    long startTime=Time.monotonicNow();
    if (!appLogs.isDone()) {
      appLogs.parseSummaryLogs();
    }
 else     if (appLogs.getDetailLogs().isEmpty()) {
      appLogs.scanForLogs();
    }
    if (!appLogs.getDetailLogs().isEmpty()) {
      if (store == null) {
        activeStores.getAndIncrement();
        store=new LevelDBCacheTimelineStore(groupId.toString(),"LeveldbCache." + groupId);
        store.init(config);
        store.start();
      }
 else {
        metrics.incrCacheStaleRefreshes();
      }
      List<LogInfo> removeList=new ArrayList<>();
      try (TimelineDataManager tdm=new TimelineDataManager(store,aclManager)){
        tdm.init(config);
        tdm.start();
        for (        LogInfo log : appLogs.getDetailLogs()) {
          LOG.debug("Try refresh logs for {}",log.getFilename());
          if (log.matchesGroupId(groupId)) {
            Path appDirPath=appLogs.getAppDirPath();
            if (fs.exists(log.getPath(appDirPath))) {
              LOG.debug("Refresh logs for cache id {}",groupId);
              log.parseForStore(tdm,appDirPath,appLogs.isDone(),jsonFactory,objMapper,fs);
            }
 else {
              removeList.add(log);
              LOG.info("File {} no longer exists, removing it from log list",log.getPath(appDirPath));
            }
          }
        }
      }
       appLogs.getDetailLogs().removeAll(removeList);
    }
    updateRefreshTimeToNow();
    metrics.addCacheRefreshTime(Time.monotonicNow() - startTime);
  }
 else {
    LOG.debug("Cache new enough, skip refreshing");
    metrics.incrNoRefreshCacheRead();
  }
  return store;
}
