{
  final Path sdir1=new Path("/dir1");
  final Path sdir2=new Path("/dir2");
  hdfs.mkdirs(sdir1);
  hdfs.mkdirs(sdir2);
  final Path foo=new Path(sdir1,"foo");
  final Path bar=new Path(foo,"bar");
  DFSTestUtil.createFile(hdfs,bar,BLOCKSIZE,REPL,SEED);
  final Path dir2file=new Path(sdir2,"file");
  DFSTestUtil.createFile(hdfs,dir2file,BLOCKSIZE,REPL,SEED);
  SnapshotTestHelper.createSnapshot(hdfs,sdir1,"s1");
  INodeDirectory dir2=fsdir.getINode4Write(sdir2.toString()).asDirectory();
  INodeDirectory mockDir2=spy(dir2);
  doReturn(false).when(mockDir2).addChild((INode)anyObject(),anyBoolean(),(Snapshot)anyObject());
  INodeDirectory root=fsdir.getINode4Write("/").asDirectory();
  root.replaceChild(dir2,mockDir2);
  final Path newfoo=new Path(sdir2,"foo");
  boolean result=hdfs.rename(foo,newfoo);
  assertFalse(result);
  INodeDirectorySnapshottable dir1Node=(INodeDirectorySnapshottable)fsdir.getINode4Write(sdir1.toString());
  ReadOnlyList<INode> dir1Children=dir1Node.getChildrenList(null);
  assertEquals(1,dir1Children.size());
  assertEquals(foo.getName(),dir1Children.get(0).getLocalName());
  List<DirectoryDiff> dir1Diffs=dir1Node.getDiffs().asList();
  assertEquals(1,dir1Diffs.size());
  assertEquals("s1",dir1Diffs.get(0).snapshot.getRoot().getLocalName());
  ChildrenDiff childrenDiff=dir1Diffs.get(0).getChildrenDiff();
  assertEquals(0,childrenDiff.getList(ListType.DELETED).size());
  assertEquals(0,childrenDiff.getList(ListType.CREATED).size());
  INode fooNode=fsdir.getINode4Write(foo.toString());
  assertTrue(fooNode instanceof INodeDirectoryWithSnapshot);
  List<DirectoryDiff> fooDiffs=((INodeDirectoryWithSnapshot)fooNode).getDiffs().asList();
  assertEquals(1,fooDiffs.size());
  assertEquals("s1",fooDiffs.get(0).snapshot.getRoot().getLocalName());
  final Path foo_s1=SnapshotTestHelper.getSnapshotPath(sdir1,"s1","foo");
  INode fooNode_s1=fsdir.getINode(foo_s1.toString());
  assertTrue(fooNode_s1 == fooNode);
  assertFalse(hdfs.exists(newfoo));
  INodeDirectory dir2Node=fsdir.getINode4Write(sdir2.toString()).asDirectory();
  assertFalse(dir2Node instanceof INodeDirectoryWithSnapshot);
  ReadOnlyList<INode> dir2Children=dir2Node.getChildrenList(null);
  assertEquals(1,dir2Children.size());
  assertEquals(dir2file.getName(),dir2Children.get(0).getLocalName());
}
