{
  final Path test=new Path("/test");
  final Path dir1=new Path(test,"dir1");
  final Path dir2=new Path(test,"dir2");
  final Path sub_dir2=new Path(dir2,"subdir");
  final Path subsub_dir2=new Path(sub_dir2,"subdir");
  hdfs.mkdirs(dir1);
  hdfs.mkdirs(subsub_dir2);
  final Path foo=new Path(dir1,"foo");
  hdfs.mkdirs(foo);
  SnapshotTestHelper.createSnapshot(hdfs,dir1,"s1");
  SnapshotTestHelper.createSnapshot(hdfs,dir2,"s2");
  hdfs.setQuota(dir2,4,Long.MAX_VALUE - 1);
  try {
    hdfs.rename(foo,subsub_dir2,Rename.OVERWRITE);
    fail("Expect QuotaExceedException");
  }
 catch (  QuotaExceededException e) {
    String msg="Failed to record modification for snapshot: " + "The NameSpace quota (directories and files)" + " is exceeded: quota=4 file count=5";
    GenericTestUtils.assertExceptionContains(msg,e);
  }
  assertTrue(hdfs.exists(foo));
  INodeDirectory dir1Node=fsdir.getINode4Write(dir1.toString()).asDirectory();
  List<INode> childrenList=ReadOnlyList.Util.asList(dir1Node.getChildrenList(null));
  assertEquals(1,childrenList.size());
  INode fooNode=childrenList.get(0);
  assertTrue(fooNode.asDirectory().isWithSnapshot());
  assertSame(dir1Node,fooNode.getParent());
  List<DirectoryDiff> diffList=((INodeDirectorySnapshottable)dir1Node).getDiffs().asList();
  assertEquals(1,diffList.size());
  DirectoryDiff diff=diffList.get(0);
  assertTrue(diff.getChildrenDiff().getList(ListType.CREATED).isEmpty());
  assertTrue(diff.getChildrenDiff().getList(ListType.DELETED).isEmpty());
  INode dir2Node=fsdir.getINode4Write(dir2.toString());
  assertTrue(dir2Node.getClass() == INodeDirectorySnapshottable.class);
  Quota.Counts counts=dir2Node.computeQuotaUsage();
  assertEquals(4,counts.get(Quota.NAMESPACE));
  assertEquals(0,counts.get(Quota.DISKSPACE));
  childrenList=ReadOnlyList.Util.asList(dir2Node.asDirectory().getChildrenList(null));
  assertEquals(1,childrenList.size());
  INode subdir2Node=childrenList.get(0);
  assertTrue(subdir2Node.asDirectory().isWithSnapshot());
  assertSame(dir2Node,subdir2Node.getParent());
  assertSame(subdir2Node,fsdir.getINode4Write(sub_dir2.toString()));
  INode subsubdir2Node=fsdir.getINode4Write(subsub_dir2.toString());
  assertTrue(subsubdir2Node.getClass() == INodeDirectory.class);
  assertSame(subdir2Node,subsubdir2Node.getParent());
  diffList=((INodeDirectorySnapshottable)dir2Node).getDiffs().asList();
  assertEquals(1,diffList.size());
  diff=diffList.get(0);
  assertTrue(diff.getChildrenDiff().getList(ListType.CREATED).isEmpty());
  assertTrue(diff.getChildrenDiff().getList(ListType.DELETED).isEmpty());
  diffList=subdir2Node.asDirectory().getDiffs().asList();
  assertEquals(0,diffList.size());
}
