{
  final Path sdir1=new Path("/dir1");
  final Path sdir2=new Path("/dir2");
  final Path foo=new Path(sdir1,"foo");
  final Path bar=new Path(foo,"bar");
  DFSTestUtil.createFile(hdfs,bar,BLOCKSIZE,REPL,SEED);
  hdfs.mkdirs(sdir2);
  SnapshotTestHelper.createSnapshot(hdfs,sdir1,"s1");
  SnapshotTestHelper.createSnapshot(hdfs,sdir2,"s2");
  final Path foo2=new Path(sdir2,"foo");
  hdfs.rename(foo,foo2);
  final Path bar2=new Path(foo2,"bar2");
  DFSTestUtil.createFile(hdfs,bar2,BLOCKSIZE,REPL,SEED);
  final Path bar3=new Path(foo2,"bar3");
  DFSTestUtil.createFile(hdfs,bar3,BLOCKSIZE,REPL,SEED);
  hdfs.createSnapshot(sdir2,"s3");
  hdfs.rename(foo2,foo);
  hdfs.deleteSnapshot(sdir2,"s3");
  final INodeDirectorySnapshottable dir1Node=(INodeDirectorySnapshottable)fsdir.getINode4Write(sdir1.toString());
  Quota.Counts q1=dir1Node.getDirectoryWithQuotaFeature().getSpaceConsumed();
  assertEquals(9,q1.get(Quota.NAMESPACE));
  final INodeDirectorySnapshottable dir2Node=(INodeDirectorySnapshottable)fsdir.getINode4Write(sdir2.toString());
  Quota.Counts q2=dir2Node.getDirectoryWithQuotaFeature().getSpaceConsumed();
  assertEquals(2,q2.get(Quota.NAMESPACE));
  final Path foo_s1=SnapshotTestHelper.getSnapshotPath(sdir1,"s1",foo.getName());
  final INode fooRef=fsdir.getINode(foo_s1.toString());
  assertTrue(fooRef instanceof INodeReference.WithName);
  INodeReference.WithCount wc=(WithCount)fooRef.asReference().getReferredINode();
  assertEquals(2,wc.getReferenceCount());
  INodeDirectory fooNode=wc.getReferredINode().asDirectory();
  ReadOnlyList<INode> children=fooNode.getChildrenList(Snapshot.CURRENT_STATE_ID);
  assertEquals(3,children.size());
  assertEquals(bar.getName(),children.get(0).getLocalName());
  assertEquals(bar2.getName(),children.get(1).getLocalName());
  assertEquals(bar3.getName(),children.get(2).getLocalName());
  List<DirectoryDiff> diffList=fooNode.getDiffs().asList();
  assertEquals(1,diffList.size());
  Snapshot s1=dir1Node.getSnapshot(DFSUtil.string2Bytes("s1"));
  assertEquals(s1.getId(),diffList.get(0).getSnapshotId());
  ChildrenDiff diff=diffList.get(0).getChildrenDiff();
  assertEquals(2,diff.getList(ListType.CREATED).size());
  assertEquals(0,diff.getList(ListType.DELETED).size());
  final INode fooRef2=fsdir.getINode4Write(foo.toString());
  assertTrue(fooRef2 instanceof INodeReference.DstReference);
  INodeReference.WithCount wc2=(WithCount)fooRef2.asReference().getReferredINode();
  assertSame(wc,wc2);
  assertSame(fooRef2,wc.getParentReference());
  restartClusterAndCheckImage(true);
}
