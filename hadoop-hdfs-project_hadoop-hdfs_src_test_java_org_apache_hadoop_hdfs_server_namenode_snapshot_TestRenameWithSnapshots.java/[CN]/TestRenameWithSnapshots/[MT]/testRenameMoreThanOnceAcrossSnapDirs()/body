{
  final Path sdir1=new Path("/dir1");
  final Path sdir2=new Path("/dir2");
  final Path sdir3=new Path("/dir3");
  hdfs.mkdirs(sdir1);
  hdfs.mkdirs(sdir2);
  hdfs.mkdirs(sdir3);
  final Path foo_dir1=new Path(sdir1,"foo");
  final Path bar1_dir1=new Path(foo_dir1,"bar1");
  final Path bar2_dir1=new Path(sdir1,"bar");
  DFSTestUtil.createFile(hdfs,bar1_dir1,BLOCKSIZE,REPL,SEED);
  DFSTestUtil.createFile(hdfs,bar2_dir1,BLOCKSIZE,REPL,SEED);
  SnapshotTestHelper.createSnapshot(hdfs,sdir1,"s1");
  SnapshotTestHelper.createSnapshot(hdfs,sdir2,"s2");
  SnapshotTestHelper.createSnapshot(hdfs,sdir3,"s3");
  final Path foo_dir2=new Path(sdir2,"foo");
  hdfs.rename(foo_dir1,foo_dir2);
  final Path bar2_dir2=new Path(sdir2,"bar");
  hdfs.rename(bar2_dir1,bar2_dir2);
  restartClusterAndCheckImage(true);
  final Path bar1_dir2=new Path(foo_dir2,"bar1");
  hdfs.setReplication(bar1_dir2,REPL_1);
  hdfs.setReplication(bar2_dir2,REPL_1);
  final Path bar1_s1=SnapshotTestHelper.getSnapshotPath(sdir1,"s1","foo/bar1");
  final Path bar2_s1=SnapshotTestHelper.getSnapshotPath(sdir1,"s1","bar");
  final Path bar1_s2=SnapshotTestHelper.getSnapshotPath(sdir2,"s2","foo/bar1");
  final Path bar2_s2=SnapshotTestHelper.getSnapshotPath(sdir2,"s2","bar");
  assertTrue(hdfs.exists(bar1_s1));
  assertTrue(hdfs.exists(bar2_s1));
  assertFalse(hdfs.exists(bar1_s2));
  assertFalse(hdfs.exists(bar2_s2));
  FileStatus statusBar1=hdfs.getFileStatus(bar1_s1);
  assertEquals(REPL,statusBar1.getReplication());
  statusBar1=hdfs.getFileStatus(bar1_dir2);
  assertEquals(REPL_1,statusBar1.getReplication());
  FileStatus statusBar2=hdfs.getFileStatus(bar2_s1);
  assertEquals(REPL,statusBar2.getReplication());
  statusBar2=hdfs.getFileStatus(bar2_dir2);
  assertEquals(REPL_1,statusBar2.getReplication());
  final Path foo_dir3=new Path(sdir3,"foo");
  hdfs.rename(foo_dir2,foo_dir3);
  final Path bar2_dir3=new Path(sdir3,"bar");
  hdfs.rename(bar2_dir2,bar2_dir3);
  restartClusterAndCheckImage(true);
  final Path bar1_dir3=new Path(foo_dir3,"bar1");
  hdfs.setReplication(bar1_dir3,REPL_2);
  hdfs.setReplication(bar2_dir3,REPL_2);
  final Path bar1_s3=SnapshotTestHelper.getSnapshotPath(sdir3,"s3","foo/bar1");
  final Path bar2_s3=SnapshotTestHelper.getSnapshotPath(sdir3,"s3","bar");
  assertTrue(hdfs.exists(bar1_s1));
  assertTrue(hdfs.exists(bar2_s1));
  assertFalse(hdfs.exists(bar1_s2));
  assertFalse(hdfs.exists(bar2_s2));
  assertFalse(hdfs.exists(bar1_s3));
  assertFalse(hdfs.exists(bar2_s3));
  statusBar1=hdfs.getFileStatus(bar1_s1);
  assertEquals(REPL,statusBar1.getReplication());
  statusBar1=hdfs.getFileStatus(bar1_dir3);
  assertEquals(REPL_2,statusBar1.getReplication());
  statusBar2=hdfs.getFileStatus(bar2_s1);
  assertEquals(REPL,statusBar2.getReplication());
  statusBar2=hdfs.getFileStatus(bar2_dir3);
  assertEquals(REPL_2,statusBar2.getReplication());
  hdfs.rename(foo_dir3,foo_dir2);
  hdfs.rename(bar2_dir3,bar2_dir2);
  restartClusterAndCheckImage(true);
  hdfs.setReplication(bar1_dir2,REPL);
  hdfs.setReplication(bar2_dir2,REPL);
  assertTrue(hdfs.exists(bar1_s1));
  assertTrue(hdfs.exists(bar2_s1));
  assertFalse(hdfs.exists(bar1_s2));
  assertFalse(hdfs.exists(bar2_s2));
  assertFalse(hdfs.exists(bar1_s3));
  assertFalse(hdfs.exists(bar2_s3));
  statusBar1=hdfs.getFileStatus(bar1_s1);
  assertEquals(REPL,statusBar1.getReplication());
  statusBar1=hdfs.getFileStatus(bar1_dir2);
  assertEquals(REPL,statusBar1.getReplication());
  statusBar2=hdfs.getFileStatus(bar2_s1);
  assertEquals(REPL,statusBar2.getReplication());
  statusBar2=hdfs.getFileStatus(bar2_dir2);
  assertEquals(REPL,statusBar2.getReplication());
  hdfs.rename(foo_dir2,foo_dir1);
  hdfs.rename(bar2_dir2,bar2_dir1);
  INodeReference fooRef=fsdir.getINode4Write(foo_dir1.toString()).asReference();
  INodeReference.WithCount fooWithCount=(WithCount)fooRef.getReferredINode();
  assertEquals(2,fooWithCount.getReferenceCount());
  INodeDirectory foo=fooWithCount.asDirectory();
  assertEquals(1,foo.getDiffs().asList().size());
  INodeDirectory sdir1Node=fsdir.getINode(sdir1.toString()).asDirectory();
  Snapshot s1=sdir1Node.getSnapshot(DFSUtil.string2Bytes("s1"));
  assertEquals(s1.getId(),foo.getDirectoryWithSnapshotFeature().getLastSnapshotId());
  INodeFile bar1=fsdir.getINode4Write(bar1_dir1.toString()).asFile();
  assertEquals(1,bar1.getDiffs().asList().size());
  assertEquals(s1.getId(),bar1.getDiffs().getLastSnapshotId());
  INodeReference barRef=fsdir.getINode4Write(bar2_dir1.toString()).asReference();
  INodeReference.WithCount barWithCount=(WithCount)barRef.getReferredINode();
  assertEquals(2,barWithCount.getReferenceCount());
  INodeFile bar=barWithCount.asFile();
  assertEquals(1,bar.getDiffs().asList().size());
  assertEquals(s1.getId(),bar.getDiffs().getLastSnapshotId());
  restartClusterAndCheckImage(true);
  hdfs.delete(foo_dir1,true);
  restartClusterAndCheckImage(true);
  hdfs.delete(bar2_dir1,true);
  restartClusterAndCheckImage(true);
  assertTrue(hdfs.exists(bar1_s1));
  assertTrue(hdfs.exists(bar2_s1));
  assertFalse(hdfs.exists(bar1_s2));
  assertFalse(hdfs.exists(bar2_s2));
  assertFalse(hdfs.exists(bar1_s3));
  assertFalse(hdfs.exists(bar2_s3));
  assertFalse(hdfs.exists(foo_dir1));
  assertFalse(hdfs.exists(bar1_dir1));
  assertFalse(hdfs.exists(bar2_dir1));
  statusBar1=hdfs.getFileStatus(bar1_s1);
  assertEquals(REPL,statusBar1.getReplication());
  statusBar2=hdfs.getFileStatus(bar2_s1);
  assertEquals(REPL,statusBar2.getReplication());
  final Path foo_s1=SnapshotTestHelper.getSnapshotPath(sdir1,"s1","foo");
  fooRef=fsdir.getINode(foo_s1.toString()).asReference();
  fooWithCount=(WithCount)fooRef.getReferredINode();
  assertEquals(1,fooWithCount.getReferenceCount());
  barRef=fsdir.getINode(bar2_s1.toString()).asReference();
  barWithCount=(WithCount)barRef.getReferredINode();
  assertEquals(1,barWithCount.getReferenceCount());
}
