{
  final Path test=new Path("/test");
  final Path dir1=new Path(test,"dir1");
  final Path dir2=new Path(test,"dir2");
  final Path sub_dir2=new Path(dir2,"subdir");
  final Path subfile_dir2=new Path(sub_dir2,"subfile");
  hdfs.mkdirs(dir1);
  DFSTestUtil.createFile(hdfs,subfile_dir2,BLOCKSIZE,REPL,SEED);
  final Path foo=new Path(dir1,"foo");
  DFSTestUtil.createFile(hdfs,foo,BLOCKSIZE,REPL,SEED);
  SnapshotTestHelper.createSnapshot(hdfs,dir1,"s1");
  SnapshotTestHelper.createSnapshot(hdfs,dir2,"s2");
  hdfs.setQuota(dir2,5,Long.MAX_VALUE - 1);
  hdfs.rename(foo,subfile_dir2,Rename.OVERWRITE);
  INode dir2Node=fsdir.getINode4Write(dir2.toString());
  assertTrue(dir2Node.getClass() == INodeDirectorySnapshottable.class);
  Quota.Counts counts=dir2Node.computeQuotaUsage();
  assertEquals(7,counts.get(Quota.NAMESPACE));
  assertEquals(BLOCKSIZE * REPL * 2,counts.get(Quota.DISKSPACE));
}
