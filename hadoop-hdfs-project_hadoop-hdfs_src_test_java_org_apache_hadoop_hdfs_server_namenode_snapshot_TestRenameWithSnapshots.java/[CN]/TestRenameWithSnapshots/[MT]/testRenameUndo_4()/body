{
  final Path sdir1=new Path("/dir1");
  final Path sdir2=new Path("/dir2");
  final Path sdir3=new Path("/dir3");
  hdfs.mkdirs(sdir1);
  hdfs.mkdirs(sdir2);
  hdfs.mkdirs(sdir3);
  final Path foo=new Path(sdir1,"foo");
  final Path bar=new Path(foo,"bar");
  DFSTestUtil.createFile(hdfs,bar,BLOCKSIZE,REPL,SEED);
  final Path foo2=new Path(sdir2,"foo");
  hdfs.mkdirs(foo2);
  SnapshotTestHelper.createSnapshot(hdfs,sdir1,"s1");
  SnapshotTestHelper.createSnapshot(hdfs,sdir2,"s2");
  final Path foo3=new Path(sdir3,"foo");
  hdfs.rename(foo2,foo3);
  INode foo3Node=fsdir.getINode4Write(foo3.toString());
  assertTrue(foo3Node.isReference());
  INodeDirectory dir3=fsdir.getINode4Write(sdir3.toString()).asDirectory();
  INodeDirectory mockDir3=spy(dir3);
  doReturn(false).when(mockDir3).addChild((INode)Mockito.isNull(),anyBoolean(),(Snapshot)anyObject());
  Mockito.when(mockDir3.addChild((INode)Mockito.isNotNull(),anyBoolean(),(Snapshot)anyObject())).thenReturn(false).thenCallRealMethod();
  INodeDirectory root=fsdir.getINode4Write("/").asDirectory();
  root.replaceChild(dir3,mockDir3);
  foo3Node.setParent(mockDir3);
  try {
    hdfs.rename(foo,foo3,Rename.OVERWRITE);
    fail("the rename from " + foo + " to "+ foo3+ " should fail");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("rename from " + foo + " to "+ foo3+ " failed.",e);
  }
  final INode foo3Node_undo=fsdir.getINode4Write(foo3.toString());
  assertSame(foo3Node,foo3Node_undo);
  INodeReference.WithCount foo3_wc=(WithCount)foo3Node.asReference().getReferredINode();
  assertEquals(2,foo3_wc.getReferenceCount());
  assertSame(foo3Node,foo3_wc.getParentReference());
}
