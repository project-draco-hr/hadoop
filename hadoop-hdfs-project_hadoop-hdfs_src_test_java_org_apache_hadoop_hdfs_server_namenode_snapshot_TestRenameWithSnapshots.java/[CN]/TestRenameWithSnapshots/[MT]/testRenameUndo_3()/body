{
  final Path sdir1=new Path("/dir1");
  final Path sdir2=new Path("/dir2");
  final Path sdir3=new Path("/dir3");
  hdfs.mkdirs(sdir1);
  hdfs.mkdirs(sdir2);
  hdfs.mkdirs(sdir3);
  final Path foo=new Path(sdir1,"foo");
  final Path bar=new Path(foo,"bar");
  DFSTestUtil.createFile(hdfs,bar,BLOCKSIZE,REPL,SEED);
  SnapshotTestHelper.createSnapshot(hdfs,sdir1,"s1");
  SnapshotTestHelper.createSnapshot(hdfs,sdir2,"s2");
  INodeDirectory dir3=fsdir.getINode4Write(sdir3.toString()).asDirectory();
  INodeDirectory mockDir3=spy(dir3);
  doReturn(false).when(mockDir3).addChild((INode)anyObject(),anyBoolean(),Mockito.anyInt());
  INodeDirectory root=fsdir.getINode4Write("/").asDirectory();
  root.replaceChild(dir3,mockDir3,fsdir.getINodeMap());
  final Path foo_dir2=new Path(sdir2,"foo2");
  final Path foo_dir3=new Path(sdir3,"foo3");
  hdfs.rename(foo,foo_dir2);
  boolean result=hdfs.rename(foo_dir2,foo_dir3);
  assertFalse(result);
  INodeDirectory dir1Node=fsdir.getINode4Write(sdir1.toString()).asDirectory();
  Snapshot s1=dir1Node.getSnapshot(DFSUtil.string2Bytes("s1"));
  INodeDirectory dir2Node=fsdir.getINode4Write(sdir2.toString()).asDirectory();
  Snapshot s2=dir2Node.getSnapshot(DFSUtil.string2Bytes("s2"));
  ReadOnlyList<INode> dir2Children=dir2Node.getChildrenList(Snapshot.CURRENT_STATE_ID);
  assertEquals(1,dir2Children.size());
  List<DirectoryDiff> dir2Diffs=dir2Node.getDiffs().asList();
  assertEquals(1,dir2Diffs.size());
  assertEquals(s2.getId(),dir2Diffs.get(0).getSnapshotId());
  ChildrenDiff childrenDiff=dir2Diffs.get(0).getChildrenDiff();
  assertEquals(0,childrenDiff.getList(ListType.DELETED).size());
  assertEquals(1,childrenDiff.getList(ListType.CREATED).size());
  final Path foo_s2=SnapshotTestHelper.getSnapshotPath(sdir2,"s2","foo2");
  assertFalse(hdfs.exists(foo_s2));
  INode fooNode=fsdir.getINode4Write(foo_dir2.toString());
  assertTrue(childrenDiff.getList(ListType.CREATED).get(0) == fooNode);
  assertTrue(fooNode instanceof INodeReference.DstReference);
  List<DirectoryDiff> fooDiffs=fooNode.asDirectory().getDiffs().asList();
  assertEquals(1,fooDiffs.size());
  assertEquals(s1.getId(),fooDiffs.get(0).getSnapshotId());
  hdfs.createSnapshot(sdir2,"s3");
  result=hdfs.rename(foo_dir2,foo_dir3);
  assertFalse(result);
  dir2Node=fsdir.getINode4Write(sdir2.toString()).asDirectory();
  Snapshot s3=dir2Node.getSnapshot(DFSUtil.string2Bytes("s3"));
  fooNode=fsdir.getINode4Write(foo_dir2.toString());
  dir2Children=dir2Node.getChildrenList(Snapshot.CURRENT_STATE_ID);
  assertEquals(1,dir2Children.size());
  dir2Diffs=dir2Node.getDiffs().asList();
  assertEquals(2,dir2Diffs.size());
  assertEquals(s2.getId(),dir2Diffs.get(0).getSnapshotId());
  assertEquals(s3.getId(),dir2Diffs.get(1).getSnapshotId());
  childrenDiff=dir2Diffs.get(0).getChildrenDiff();
  assertEquals(0,childrenDiff.getList(ListType.DELETED).size());
  assertEquals(1,childrenDiff.getList(ListType.CREATED).size());
  assertTrue(childrenDiff.getList(ListType.CREATED).get(0) == fooNode);
  childrenDiff=dir2Diffs.get(1).getChildrenDiff();
  assertEquals(0,childrenDiff.getList(ListType.DELETED).size());
  assertEquals(0,childrenDiff.getList(ListType.CREATED).size());
  final Path foo_s3=SnapshotTestHelper.getSnapshotPath(sdir2,"s3","foo2");
  assertFalse(hdfs.exists(foo_s2));
  assertTrue(hdfs.exists(foo_s3));
  assertTrue(fooNode instanceof INodeReference.DstReference);
  fooDiffs=fooNode.asDirectory().getDiffs().asList();
  assertEquals(2,fooDiffs.size());
  assertEquals(s1.getId(),fooDiffs.get(0).getSnapshotId());
  assertEquals(s3.getId(),fooDiffs.get(1).getSnapshotId());
}
