{
  final Path sdir1=new Path("/dir1");
  final Path sdir2=new Path("/dir2");
  hdfs.mkdirs(sdir1);
  hdfs.mkdirs(sdir2);
  final Path foo=new Path(sdir2,"foo");
  final Path bar=new Path(foo,"bar");
  DFSTestUtil.createFile(hdfs,bar,BLOCKSIZE,REPL,SEED);
  SnapshotTestHelper.createSnapshot(hdfs,sdir1,"s1");
  SnapshotTestHelper.createSnapshot(hdfs,sdir2,"s2");
  SnapshotTestHelper.createSnapshot(hdfs,sdir2,"s3");
  final Path newfoo=new Path(sdir1,"foo");
  hdfs.rename(foo,newfoo);
  restartClusterAndCheckImage(true);
  final Path bar2=new Path(newfoo,"bar2");
  DFSTestUtil.createFile(hdfs,bar2,BLOCKSIZE,REPL,SEED);
  hdfs.createSnapshot(sdir1,"s4");
  hdfs.delete(newfoo,true);
  final Path bar2_s4=SnapshotTestHelper.getSnapshotPath(sdir1,"s4","foo/bar2");
  assertTrue(hdfs.exists(bar2_s4));
  final Path bar_s4=SnapshotTestHelper.getSnapshotPath(sdir1,"s4","foo/bar");
  assertTrue(hdfs.exists(bar_s4));
  hdfs.deleteSnapshot(sdir1,"s4");
  restartClusterAndCheckImage(true);
  Path bar_s3=SnapshotTestHelper.getSnapshotPath(sdir1,"s3","foo/bar");
  assertFalse(hdfs.exists(bar_s3));
  bar_s3=SnapshotTestHelper.getSnapshotPath(sdir2,"s3","foo/bar");
  assertTrue(hdfs.exists(bar_s3));
  Path bar2_s3=SnapshotTestHelper.getSnapshotPath(sdir1,"s3","foo/bar2");
  assertFalse(hdfs.exists(bar2_s3));
  bar2_s3=SnapshotTestHelper.getSnapshotPath(sdir2,"s3","foo/bar2");
  assertFalse(hdfs.exists(bar2_s3));
  hdfs.deleteSnapshot(sdir2,"s3");
  final Path bar_s2=SnapshotTestHelper.getSnapshotPath(sdir2,"s2","foo/bar");
  assertTrue(hdfs.exists(bar_s2));
  INodeDirectory sdir2Node=fsdir.getINode(sdir2.toString()).asDirectory();
  Snapshot s2=sdir2Node.getSnapshot(DFSUtil.string2Bytes("s2"));
  final Path foo_s2=SnapshotTestHelper.getSnapshotPath(sdir2,"s2","foo");
  INodeReference fooRef=fsdir.getINode(foo_s2.toString()).asReference();
  assertTrue(fooRef instanceof INodeReference.WithName);
  INodeReference.WithCount fooWC=(WithCount)fooRef.getReferredINode();
  assertEquals(1,fooWC.getReferenceCount());
  INodeDirectory fooDir=fooWC.getReferredINode().asDirectory();
  List<DirectoryDiff> diffs=fooDir.getDiffs().asList();
  assertEquals(1,diffs.size());
  assertEquals(s2.getId(),diffs.get(0).getSnapshotId());
  restartClusterAndCheckImage(true);
  hdfs.deleteSnapshot(sdir2,"s2");
  assertFalse(hdfs.exists(bar_s2));
  restartClusterAndCheckImage(true);
  Quota.Counts q=fsdir.getRoot().getDirectoryWithQuotaFeature().getSpaceConsumed();
  assertEquals(3,q.get(Quota.NAMESPACE));
  assertEquals(0,q.get(Quota.DISKSPACE));
  hdfs.deleteSnapshot(sdir1,"s1");
  restartClusterAndCheckImage(true);
  q=fsdir.getRoot().getDirectoryWithQuotaFeature().getSpaceConsumed();
  assertEquals(3,q.get(Quota.NAMESPACE));
  assertEquals(0,q.get(Quota.DISKSPACE));
}
