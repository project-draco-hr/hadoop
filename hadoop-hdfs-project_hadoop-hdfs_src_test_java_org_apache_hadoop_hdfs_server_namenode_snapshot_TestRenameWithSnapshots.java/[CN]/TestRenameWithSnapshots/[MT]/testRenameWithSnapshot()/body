{
  final String dirStr="/testRenameWithSnapshot";
  final String abcStr=dirStr + "/abc";
  final Path abc=new Path(abcStr);
  hdfs.mkdirs(abc,new FsPermission((short)0777));
  hdfs.allowSnapshot(abcStr);
  final Path foo=new Path(abc,"foo");
  DFSTestUtil.createFile(hdfs,foo,BLOCKSIZE,REPL,SEED);
  hdfs.createSnapshot(abc,"s0");
  final INode fooINode=fsdir.getINode(foo.toString());
  final String xyzStr=dirStr + "/xyz";
  final Path xyz=new Path(xyzStr);
  hdfs.mkdirs(xyz,new FsPermission((short)0777));
  final Path bar=new Path(xyz,"bar");
  hdfs.rename(foo,bar);
  final INode fooRef=fsdir.getINode(SnapshotTestHelper.getSnapshotPath(abc,"s0","foo").toString());
  Assert.assertTrue(fooRef.isReference());
  Assert.assertTrue(fooRef.asReference() instanceof INodeReference.WithName);
  final INodeReference.WithCount withCount=(INodeReference.WithCount)fooRef.asReference().getReferredINode();
  Assert.assertEquals(2,withCount.getReferenceCount());
  final INode barRef=fsdir.getINode(bar.toString());
  Assert.assertTrue(barRef.isReference());
  Assert.assertSame(withCount,barRef.asReference().getReferredINode());
  Assert.assertSame(fooINode,withCount.asReference().getReferredINode());
  hdfs.delete(bar,false);
  Assert.assertEquals(1,withCount.getReferenceCount());
}
