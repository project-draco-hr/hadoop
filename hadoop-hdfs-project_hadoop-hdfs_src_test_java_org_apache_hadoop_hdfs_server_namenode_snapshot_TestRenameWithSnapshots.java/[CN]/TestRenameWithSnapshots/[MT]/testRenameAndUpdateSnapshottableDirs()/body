{
  final Path sdir1=new Path("/dir1");
  final Path sdir2=new Path("/dir2");
  final Path foo=new Path(sdir1,"foo");
  final Path bar=new Path(sdir2,"bar");
  hdfs.mkdirs(foo);
  hdfs.mkdirs(bar);
  hdfs.allowSnapshot(foo);
  SnapshotTestHelper.createSnapshot(hdfs,bar,snap1);
  assertEquals(2,fsn.getSnapshottableDirListing().length);
  INodeDirectory fooNode=fsdir.getINode4Write(foo.toString()).asDirectory();
  long fooId=fooNode.getId();
  try {
    hdfs.rename(foo,bar,Rename.OVERWRITE);
    fail("Expect exception since " + bar + " is snapshottable and already has snapshots");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains(bar.toString() + " is snapshottable and already has snapshots",e);
  }
  hdfs.deleteSnapshot(bar,snap1);
  hdfs.rename(foo,bar,Rename.OVERWRITE);
  SnapshottableDirectoryStatus[] dirs=fsn.getSnapshottableDirListing();
  assertEquals(1,dirs.length);
  assertEquals(bar,dirs[0].getFullPath());
  assertEquals(fooId,dirs[0].getDirStatus().getFileId());
}
