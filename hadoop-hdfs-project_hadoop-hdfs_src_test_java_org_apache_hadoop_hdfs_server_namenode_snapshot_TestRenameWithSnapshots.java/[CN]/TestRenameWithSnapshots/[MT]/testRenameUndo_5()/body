{
  final Path test=new Path("/test");
  final Path dir1=new Path(test,"dir1");
  final Path dir2=new Path(test,"dir2");
  final Path subdir2=new Path(dir2,"subdir2");
  hdfs.mkdirs(dir1);
  hdfs.mkdirs(subdir2);
  final Path foo=new Path(dir1,"foo");
  final Path bar=new Path(foo,"bar");
  DFSTestUtil.createFile(hdfs,bar,BLOCKSIZE,REPL,SEED);
  SnapshotTestHelper.createSnapshot(hdfs,dir1,"s1");
  SnapshotTestHelper.createSnapshot(hdfs,dir2,"s2");
  hdfs.setQuota(dir2,4,Long.MAX_VALUE - 1);
  final Path foo2=new Path(subdir2,foo.getName());
  FSDirectory fsdir2=Mockito.spy(fsdir);
  Mockito.doThrow(new NSQuotaExceededException("fake exception")).when(fsdir2).addLastINode((INodesInPath)Mockito.anyObject(),(INode)Mockito.anyObject(),Mockito.anyBoolean());
  Whitebox.setInternalState(fsn,"dir",fsdir2);
  boolean rename=hdfs.rename(foo,foo2);
  assertFalse(rename);
  assertTrue(hdfs.exists(foo));
  assertTrue(hdfs.exists(bar));
  INodeDirectory dir1Node=fsdir2.getINode4Write(dir1.toString()).asDirectory();
  List<INode> childrenList=ReadOnlyList.Util.asList(dir1Node.getChildrenList(Snapshot.CURRENT_STATE_ID));
  assertEquals(1,childrenList.size());
  INode fooNode=childrenList.get(0);
  assertTrue(fooNode.asDirectory().isWithSnapshot());
  INode barNode=fsdir2.getINode4Write(bar.toString());
  assertTrue(barNode.getClass() == INodeFile.class);
  assertSame(fooNode,barNode.getParent());
  List<DirectoryDiff> diffList=dir1Node.getDiffs().asList();
  assertEquals(1,diffList.size());
  DirectoryDiff diff=diffList.get(0);
  assertTrue(diff.getChildrenDiff().getList(ListType.CREATED).isEmpty());
  assertTrue(diff.getChildrenDiff().getList(ListType.DELETED).isEmpty());
  INodeDirectory dir2Node=fsdir2.getINode4Write(dir2.toString()).asDirectory();
  assertTrue(dir2Node.isSnapshottable());
  QuotaCounts counts=dir2Node.computeQuotaUsage(fsdir.getBlockStoragePolicySuite());
  assertEquals(2,counts.getNameSpace());
  assertEquals(0,counts.getStorageSpace());
  childrenList=ReadOnlyList.Util.asList(dir2Node.asDirectory().getChildrenList(Snapshot.CURRENT_STATE_ID));
  assertEquals(1,childrenList.size());
  INode subdir2Node=childrenList.get(0);
  assertSame(dir2Node,subdir2Node.getParent());
  assertSame(subdir2Node,fsdir2.getINode4Write(subdir2.toString()));
  diffList=dir2Node.getDiffs().asList();
  assertEquals(1,diffList.size());
  diff=diffList.get(0);
  assertTrue(diff.getChildrenDiff().getList(ListType.CREATED).isEmpty());
  assertTrue(diff.getChildrenDiff().getList(ListType.DELETED).isEmpty());
}
