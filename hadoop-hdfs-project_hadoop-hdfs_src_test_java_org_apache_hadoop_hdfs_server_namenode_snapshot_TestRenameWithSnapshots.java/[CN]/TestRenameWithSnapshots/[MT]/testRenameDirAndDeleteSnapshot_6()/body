{
  final Path test=new Path("/test");
  final Path dir1=new Path(test,"dir1");
  final Path dir2=new Path(test,"dir2");
  hdfs.mkdirs(dir1);
  hdfs.mkdirs(dir2);
  final Path foo=new Path(dir2,"foo");
  final Path bar=new Path(foo,"bar");
  final Path file=new Path(bar,"file");
  DFSTestUtil.createFile(hdfs,file,BLOCKSIZE,REPL,SEED);
  SnapshotTestHelper.createSnapshot(hdfs,test,"s0");
  hdfs.delete(file,true);
  final Path newfoo=new Path(dir1,foo.getName());
  hdfs.rename(foo,newfoo);
  final Path foo_s0=SnapshotTestHelper.getSnapshotPath(test,"s0","dir2/foo");
  assertTrue("the snapshot path " + foo_s0 + " should exist",hdfs.exists(foo_s0));
  hdfs.deleteSnapshot(test,"s0");
  assertFalse("after deleting s0, " + foo_s0 + " should not exist",hdfs.exists(foo_s0));
  INodeDirectoryWithSnapshot dir2Node=(INodeDirectoryWithSnapshot)fsdir.getINode4Write(dir2.toString());
  assertTrue("the diff list of " + dir2 + " should be empty after deleting s0",dir2Node.getDiffs().asList().isEmpty());
  assertTrue(hdfs.exists(newfoo));
  INode fooRefNode=fsdir.getINode4Write(newfoo.toString());
  assertTrue(fooRefNode instanceof INodeReference.DstReference);
  INodeDirectory fooNode=fooRefNode.asDirectory();
  assertTrue(fooNode instanceof INodeDirectoryWithSnapshot);
  assertTrue(((INodeDirectoryWithSnapshot)fooNode).getDiffs().asList().isEmpty());
  INodeDirectory barNode=fooNode.getChildrenList(null).get(0).asDirectory();
  assertTrue(((INodeDirectoryWithSnapshot)barNode).getDiffs().asList().isEmpty());
  assertTrue(barNode.getChildrenList(null).isEmpty());
  restartClusterAndCheckImage();
}
