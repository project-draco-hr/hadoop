{
  final Path sdir1=new Path("/dir1");
  final Path sdir2=new Path("/dir2");
  final Path sdir3=new Path("/dir3");
  hdfs.mkdirs(sdir1);
  hdfs.mkdirs(sdir2);
  hdfs.mkdirs(sdir3);
  final Path foo_dir1=new Path(sdir1,"foo");
  final Path bar1_dir1=new Path(foo_dir1,"bar1");
  final Path bar_dir1=new Path(sdir1,"bar");
  DFSTestUtil.createFile(hdfs,bar1_dir1,BLOCKSIZE,REPL,SEED);
  DFSTestUtil.createFile(hdfs,bar_dir1,BLOCKSIZE,REPL,SEED);
  SnapshotTestHelper.createSnapshot(hdfs,sdir1,"s1");
  SnapshotTestHelper.createSnapshot(hdfs,sdir2,"s2");
  SnapshotTestHelper.createSnapshot(hdfs,sdir3,"s3");
  final Path foo_dir2=new Path(sdir2,"foo");
  hdfs.rename(foo_dir1,foo_dir2);
  final Path bar_dir2=new Path(sdir2,"bar");
  hdfs.rename(bar_dir1,bar_dir2);
  final Path bar1_dir2=new Path(foo_dir2,"bar1");
  hdfs.setReplication(bar1_dir2,REPL_1);
  hdfs.setReplication(bar_dir2,REPL_1);
  restartClusterAndCheckImage(true);
  SnapshotTestHelper.createSnapshot(hdfs,sdir1,"s11");
  SnapshotTestHelper.createSnapshot(hdfs,sdir2,"s22");
  SnapshotTestHelper.createSnapshot(hdfs,sdir3,"s33");
  final Path foo_dir3=new Path(sdir3,"foo");
  hdfs.rename(foo_dir2,foo_dir3);
  final Path bar_dir3=new Path(sdir3,"bar");
  hdfs.rename(bar_dir2,bar_dir3);
  final Path bar1_dir3=new Path(foo_dir3,"bar1");
  hdfs.setReplication(bar1_dir3,REPL_2);
  hdfs.setReplication(bar_dir3,REPL_2);
  restartClusterAndCheckImage(true);
  SnapshotTestHelper.createSnapshot(hdfs,sdir1,"s111");
  SnapshotTestHelper.createSnapshot(hdfs,sdir2,"s222");
  SnapshotTestHelper.createSnapshot(hdfs,sdir3,"s333");
  final Path bar1_s1=SnapshotTestHelper.getSnapshotPath(sdir1,"s1","foo/bar1");
  final Path bar1_s22=SnapshotTestHelper.getSnapshotPath(sdir2,"s22","foo/bar1");
  final Path bar1_s333=SnapshotTestHelper.getSnapshotPath(sdir3,"s333","foo/bar1");
  final Path bar_s1=SnapshotTestHelper.getSnapshotPath(sdir1,"s1","bar");
  final Path bar_s22=SnapshotTestHelper.getSnapshotPath(sdir2,"s22","bar");
  final Path bar_s333=SnapshotTestHelper.getSnapshotPath(sdir3,"s333","bar");
  assertTrue(hdfs.exists(bar1_s1));
  assertTrue(hdfs.exists(bar1_s22));
  assertTrue(hdfs.exists(bar1_s333));
  assertTrue(hdfs.exists(bar_s1));
  assertTrue(hdfs.exists(bar_s22));
  assertTrue(hdfs.exists(bar_s333));
  FileStatus statusBar1=hdfs.getFileStatus(bar1_s1);
  assertEquals(REPL,statusBar1.getReplication());
  statusBar1=hdfs.getFileStatus(bar1_dir3);
  assertEquals(REPL_2,statusBar1.getReplication());
  statusBar1=hdfs.getFileStatus(bar1_s22);
  assertEquals(REPL_1,statusBar1.getReplication());
  statusBar1=hdfs.getFileStatus(bar1_s333);
  assertEquals(REPL_2,statusBar1.getReplication());
  FileStatus statusBar=hdfs.getFileStatus(bar_s1);
  assertEquals(REPL,statusBar.getReplication());
  statusBar=hdfs.getFileStatus(bar_dir3);
  assertEquals(REPL_2,statusBar.getReplication());
  statusBar=hdfs.getFileStatus(bar_s22);
  assertEquals(REPL_1,statusBar.getReplication());
  statusBar=hdfs.getFileStatus(bar_s333);
  assertEquals(REPL_2,statusBar.getReplication());
  hdfs.rename(foo_dir3,foo_dir2);
  hdfs.rename(bar_dir3,bar_dir2);
  hdfs.setReplication(bar1_dir2,REPL);
  hdfs.setReplication(bar_dir2,REPL);
  restartClusterAndCheckImage(true);
  SnapshotTestHelper.createSnapshot(hdfs,sdir1,"s1111");
  SnapshotTestHelper.createSnapshot(hdfs,sdir2,"s2222");
  final Path bar1_s2222=SnapshotTestHelper.getSnapshotPath(sdir2,"s2222","foo/bar1");
  final Path bar_s2222=SnapshotTestHelper.getSnapshotPath(sdir2,"s2222","bar");
  assertTrue(hdfs.exists(bar1_s1));
  assertTrue(hdfs.exists(bar1_s22));
  assertTrue(hdfs.exists(bar1_s333));
  assertTrue(hdfs.exists(bar1_s2222));
  assertTrue(hdfs.exists(bar_s1));
  assertTrue(hdfs.exists(bar_s22));
  assertTrue(hdfs.exists(bar_s333));
  assertTrue(hdfs.exists(bar_s2222));
  statusBar1=hdfs.getFileStatus(bar1_s1);
  assertEquals(REPL,statusBar1.getReplication());
  statusBar1=hdfs.getFileStatus(bar1_dir2);
  assertEquals(REPL,statusBar1.getReplication());
  statusBar1=hdfs.getFileStatus(bar1_s22);
  assertEquals(REPL_1,statusBar1.getReplication());
  statusBar1=hdfs.getFileStatus(bar1_s333);
  assertEquals(REPL_2,statusBar1.getReplication());
  statusBar1=hdfs.getFileStatus(bar1_s2222);
  assertEquals(REPL,statusBar1.getReplication());
  statusBar=hdfs.getFileStatus(bar_s1);
  assertEquals(REPL,statusBar.getReplication());
  statusBar=hdfs.getFileStatus(bar_dir2);
  assertEquals(REPL,statusBar.getReplication());
  statusBar=hdfs.getFileStatus(bar_s22);
  assertEquals(REPL_1,statusBar.getReplication());
  statusBar=hdfs.getFileStatus(bar_s333);
  assertEquals(REPL_2,statusBar.getReplication());
  statusBar=hdfs.getFileStatus(bar_s2222);
  assertEquals(REPL,statusBar.getReplication());
  hdfs.rename(foo_dir2,foo_dir1);
  hdfs.rename(bar_dir2,bar_dir1);
  INodeReference fooRef=fsdir.getINode4Write(foo_dir1.toString()).asReference();
  INodeReference.WithCount fooWithCount=(WithCount)fooRef.getReferredINode();
  assertEquals(5,fooWithCount.getReferenceCount());
  INodeDirectoryWithSnapshot foo=(INodeDirectoryWithSnapshot)fooWithCount.asDirectory();
  List<DirectoryDiff> fooDiffs=foo.getDiffs().asList();
  assertEquals(4,fooDiffs.size());
  assertEquals("s2222",fooDiffs.get(3).snapshot.getRoot().getLocalName());
  assertEquals("s333",fooDiffs.get(2).snapshot.getRoot().getLocalName());
  assertEquals("s22",fooDiffs.get(1).snapshot.getRoot().getLocalName());
  assertEquals("s1",fooDiffs.get(0).snapshot.getRoot().getLocalName());
  INodeFileWithSnapshot bar1=(INodeFileWithSnapshot)fsdir.getINode4Write(bar1_dir1.toString()).asFile();
  List<FileDiff> bar1Diffs=bar1.getDiffs().asList();
  assertEquals(3,bar1Diffs.size());
  assertEquals("s333",bar1Diffs.get(2).snapshot.getRoot().getLocalName());
  assertEquals("s22",bar1Diffs.get(1).snapshot.getRoot().getLocalName());
  assertEquals("s1",bar1Diffs.get(0).snapshot.getRoot().getLocalName());
  INodeReference barRef=fsdir.getINode4Write(bar_dir1.toString()).asReference();
  INodeReference.WithCount barWithCount=(WithCount)barRef.getReferredINode();
  assertEquals(5,barWithCount.getReferenceCount());
  INodeFileWithSnapshot bar=(INodeFileWithSnapshot)barWithCount.asFile();
  List<FileDiff> barDiffs=bar.getDiffs().asList();
  assertEquals(4,barDiffs.size());
  assertEquals("s2222",barDiffs.get(3).snapshot.getRoot().getLocalName());
  assertEquals("s333",barDiffs.get(2).snapshot.getRoot().getLocalName());
  assertEquals("s22",barDiffs.get(1).snapshot.getRoot().getLocalName());
  assertEquals("s1",barDiffs.get(0).snapshot.getRoot().getLocalName());
  restartClusterAndCheckImage(true);
  hdfs.delete(foo_dir1,true);
  hdfs.delete(bar_dir1,true);
  restartClusterAndCheckImage(true);
  final Path bar1_s1111=SnapshotTestHelper.getSnapshotPath(sdir1,"s1111","foo/bar1");
  final Path bar_s1111=SnapshotTestHelper.getSnapshotPath(sdir1,"s1111","bar");
  assertTrue(hdfs.exists(bar1_s1));
  assertTrue(hdfs.exists(bar1_s22));
  assertTrue(hdfs.exists(bar1_s333));
  assertTrue(hdfs.exists(bar1_s2222));
  assertFalse(hdfs.exists(bar1_s1111));
  assertTrue(hdfs.exists(bar_s1));
  assertTrue(hdfs.exists(bar_s22));
  assertTrue(hdfs.exists(bar_s333));
  assertTrue(hdfs.exists(bar_s2222));
  assertFalse(hdfs.exists(bar_s1111));
  final Path foo_s2222=SnapshotTestHelper.getSnapshotPath(sdir2,"s2222","foo");
  fooRef=fsdir.getINode(foo_s2222.toString()).asReference();
  fooWithCount=(WithCount)fooRef.getReferredINode();
  assertEquals(4,fooWithCount.getReferenceCount());
  foo=(INodeDirectoryWithSnapshot)fooWithCount.asDirectory();
  fooDiffs=foo.getDiffs().asList();
  assertEquals(4,fooDiffs.size());
  assertEquals("s2222",fooDiffs.get(3).snapshot.getRoot().getLocalName());
  bar1Diffs=bar1.getDiffs().asList();
  assertEquals(3,bar1Diffs.size());
  assertEquals("s333",bar1Diffs.get(2).snapshot.getRoot().getLocalName());
  barRef=fsdir.getINode(bar_s2222.toString()).asReference();
  barWithCount=(WithCount)barRef.getReferredINode();
  assertEquals(4,barWithCount.getReferenceCount());
  bar=(INodeFileWithSnapshot)barWithCount.asFile();
  barDiffs=bar.getDiffs().asList();
  assertEquals(4,barDiffs.size());
  assertEquals("s2222",barDiffs.get(3).snapshot.getRoot().getLocalName());
}
