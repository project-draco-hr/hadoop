{
  Map<String,String> conf=new HashMap<String,String>();
  conf.put(CrossOriginFilter.ALLOWED_ORIGINS,"example.com");
  conf.put(CrossOriginFilter.ALLOWED_HEADERS,"X-Requested-With,Accept");
  conf.put(CrossOriginFilter.ALLOWED_METHODS,"GET,POST");
  FilterConfig filterConfig=new FilterConfigTest(conf);
  CrossOriginFilter filter=new CrossOriginFilter();
  filter.init(filterConfig);
  Assert.assertTrue("Allowed headers do not match",filter.getAllowedHeadersHeader().compareTo("X-Requested-With,Accept") == 0);
  Assert.assertTrue("Allowed methods do not match",filter.getAllowedMethodsHeader().compareTo("GET,POST") == 0);
  Assert.assertTrue(filter.areOriginsAllowed("example.com"));
  filter.destroy();
  conf.clear();
  conf.put(CrossOriginFilter.ALLOWED_ORIGINS,"newexample.com");
  conf.put(CrossOriginFilter.ALLOWED_HEADERS,"Content-Type,Origin");
  conf.put(CrossOriginFilter.ALLOWED_METHODS,"GET,HEAD");
  filterConfig=new FilterConfigTest(conf);
  filter.init(filterConfig);
  Assert.assertTrue("Allowed headers do not match",filter.getAllowedHeadersHeader().compareTo("Content-Type,Origin") == 0);
  Assert.assertTrue("Allowed methods do not match",filter.getAllowedMethodsHeader().compareTo("GET,HEAD") == 0);
  Assert.assertTrue(filter.areOriginsAllowed("newexample.com"));
  filter.destroy();
}
