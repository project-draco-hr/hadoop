{
  String[] nodesConfigStrArray=schedulerNodesConfigStr.split(";");
  for (  String p : nodesConfigStrArray) {
    String[] arr=p.split(" ");
    NodeId nodeId=NodeId.newInstance(arr[0].substring(0,arr[0].indexOf("=")),1);
    String partition=arr[0].substring(arr[0].indexOf("=") + 1,arr[0].length());
    FiCaSchedulerNode sn=mock(FiCaSchedulerNode.class);
    when(sn.getNodeID()).thenReturn(nodeId);
    when(sn.getPartition()).thenReturn(partition);
    Resource totalRes=Resources.createResource(0);
    if (arr.length > 1) {
      String res=arr[1];
      if (res.contains("res=")) {
        String resSring=res.substring(res.indexOf("res=") + "res=".length());
        totalRes=parseResourceFromString(resSring);
      }
    }
    when(sn.getTotalResource()).thenReturn(totalRes);
    when(sn.getUnallocatedResource()).thenReturn(Resources.clone(totalRes));
    when(sn.getTotalKillableResources()).thenReturn(Resources.none());
    List<RMContainer> liveContainers=new ArrayList<>();
    when(sn.getCopiedListOfRunningContainers()).thenReturn(liveContainers);
    nodeIdToSchedulerNodes.put(nodeId,sn);
    LOG.debug("add scheduler node, id=" + nodeId + ", partition="+ partition);
  }
}
