{
  int containerId=1;
  int start=containersConfig.indexOf("=") + 1;
  int end=-1;
  while (start < containersConfig.length()) {
    while (start < containersConfig.length() && containersConfig.charAt(start) != '(') {
      start++;
    }
    if (start >= containersConfig.length()) {
      throw new IllegalArgumentException("Error containers specification, line=" + containersConfig);
    }
    end=start + 1;
    while (end < containersConfig.length() && containersConfig.charAt(end) != ')') {
      end++;
    }
    if (end >= containersConfig.length()) {
      throw new IllegalArgumentException("Error containers specification, line=" + containersConfig);
    }
    String[] values=containersConfig.substring(start + 1,end).split(",");
    if (values.length != 6) {
      throw new IllegalArgumentException("Format to define container is:" + "(priority,resource,host,expression,repeat,reserved)");
    }
    Priority pri=Priority.newInstance(Integer.valueOf(values[0]));
    Resource res=parseResourceFromString(values[1]);
    NodeId host=NodeId.newInstance(values[2],1);
    String exp=values[3];
    int repeat=Integer.valueOf(values[4]);
    boolean reserved=Boolean.valueOf(values[5]);
    for (int i=0; i < repeat; i++) {
      Container c=mock(Container.class);
      when(c.getResource()).thenReturn(res);
      when(c.getPriority()).thenReturn(pri);
      RMContainerImpl rmc=mock(RMContainerImpl.class);
      when(rmc.getAllocatedNode()).thenReturn(host);
      when(rmc.getNodeLabelExpression()).thenReturn(exp);
      when(rmc.getAllocatedResource()).thenReturn(res);
      when(rmc.getContainer()).thenReturn(c);
      when(rmc.getApplicationAttemptId()).thenReturn(attemptId);
      when(rmc.getQueueName()).thenReturn(queueName);
      final ContainerId cId=ContainerId.newContainerId(attemptId,containerId);
      when(rmc.getContainerId()).thenReturn(cId);
      doAnswer(new Answer<Integer>(){
        @Override public Integer answer(        InvocationOnMock invocation) throws Throwable {
          return cId.compareTo(((RMContainer)invocation.getArguments()[0]).getContainerId());
        }
      }
).when(rmc).compareTo(any(RMContainer.class));
      if (containerId == 1) {
        when(rmc.isAMContainer()).thenReturn(true);
      }
      if (reserved) {
        reservedContainers.add(rmc);
        when(rmc.getReservedResource()).thenReturn(res);
      }
 else {
        liveContainers.add(rmc);
      }
      addContainerToSchedulerNode(host,rmc,reserved);
      String partition=null;
      if (exp.isEmpty() && !(partition=nodeIdToSchedulerNodes.get(host).getPartition()).isEmpty()) {
        LeafQueue queue=(LeafQueue)nameToCSQueues.get(queueName);
        Map<String,TreeSet<RMContainer>> ignoreExclusivityContainers=queue.getIgnoreExclusivityRMContainers();
        if (!ignoreExclusivityContainers.containsKey(partition)) {
          ignoreExclusivityContainers.put(partition,new TreeSet<RMContainer>());
        }
        ignoreExclusivityContainers.get(partition).add(rmc);
      }
      LOG.debug("add container to app=" + attemptId + " res="+ res+ " node="+ host+ " nodeLabelExpression="+ exp+ " partition="+ partition);
      containerId++;
    }
    start=end + 1;
  }
}
