{
  Map<Appender,Priority> levels=new HashMap<>();
  String logHierarchy=TestAdHocLogDumper.class.getName();
  String logFilename="test.log";
  Log log=LogFactory.getLog(logHierarchy);
  if (log instanceof Log4JLogger) {
    for (Enumeration appenders=Logger.getRootLogger().getAllAppenders(); appenders.hasMoreElements(); ) {
      Object obj=appenders.nextElement();
      if (obj instanceof AppenderSkeleton) {
        AppenderSkeleton appender=(AppenderSkeleton)obj;
        levels.put(appender,appender.getThreshold());
      }
    }
  }
  AdHocLogDumper dumper=new AdHocLogDumper(logHierarchy,logFilename);
  dumper.dumpLogs("DEBUG",1000);
  LOG.debug("test message 1");
  LOG.info("test message 2");
  File logFile=new File(logFilename);
  Assert.assertTrue(logFile.exists());
  Thread.sleep(2000);
  long lastWrite=logFile.lastModified();
  Assert.assertTrue(lastWrite < Time.now());
  Assert.assertTrue(logFile.length() != 0);
  if (log instanceof Log4JLogger) {
    for (Enumeration appenders=Logger.getRootLogger().getAllAppenders(); appenders.hasMoreElements(); ) {
      Object obj=appenders.nextElement();
      if (obj instanceof AppenderSkeleton) {
        AppenderSkeleton appender=(AppenderSkeleton)obj;
        Assert.assertEquals(levels.get(appender),appender.getThreshold());
      }
    }
  }
  boolean del=logFile.delete();
  if (!del) {
    LOG.info("Couldn't clean up after test");
  }
}
