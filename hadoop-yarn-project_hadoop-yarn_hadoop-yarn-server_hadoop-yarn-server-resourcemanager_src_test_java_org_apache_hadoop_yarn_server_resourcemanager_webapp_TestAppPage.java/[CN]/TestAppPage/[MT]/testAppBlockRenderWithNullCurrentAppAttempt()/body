{
  final ApplicationId APP_ID=ApplicationId.newInstance(1234L,0);
  Injector injector;
  RMApp app=mock(RMApp.class);
  when(app.getTrackingUrl()).thenReturn("http://host:123");
  when(app.getState()).thenReturn(RMAppState.FAILED);
  when(app.getApplicationId()).thenReturn(APP_ID);
  when(app.getApplicationType()).thenReturn("Type");
  when(app.getUser()).thenReturn("user");
  when(app.getName()).thenReturn("Name");
  when(app.getQueue()).thenReturn("queue");
  when(app.getDiagnostics()).thenReturn(new StringBuilder());
  when(app.getFinalApplicationStatus()).thenReturn(FinalApplicationStatus.FAILED);
  when(app.getFinalApplicationStatus()).thenReturn(FinalApplicationStatus.FAILED);
  when(app.getStartTime()).thenReturn(0L);
  when(app.getFinishTime()).thenReturn(0L);
  when(app.createApplicationState()).thenReturn(YarnApplicationState.FAILED);
  RMAppMetrics appMetrics=new RMAppMetrics(Resource.newInstance(0,0),0,0,0,0);
  when(app.getRMAppMetrics()).thenReturn(appMetrics);
  final RMContext rmContext=TestRMWebApp.mockRMContext(15,1,2,8);
  rmContext.getRMApps().put(APP_ID,app);
  injector=WebAppTests.createMockInjector(RMContext.class,rmContext,new Module(){
    @Override public void configure(    Binder binder){
      try {
        binder.bind(ResourceManager.class).toInstance(TestRMWebApp.mockRm(rmContext));
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  AppBlock instance=injector.getInstance(AppBlock.class);
  instance.set(YarnWebParams.APPLICATION_ID,APP_ID.toString());
  instance.render();
}
