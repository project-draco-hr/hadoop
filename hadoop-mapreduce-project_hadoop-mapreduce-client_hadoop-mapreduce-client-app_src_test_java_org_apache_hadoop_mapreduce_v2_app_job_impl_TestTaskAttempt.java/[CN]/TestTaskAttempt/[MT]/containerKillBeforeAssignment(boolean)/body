{
  MockEventHandler eventHandler=new MockEventHandler();
  ApplicationId appId=ApplicationId.newInstance(1,2);
  JobId jobId=MRBuilderUtils.newJobId(appId,1);
  TaskId taskId=MRBuilderUtils.newTaskId(jobId,1,TaskType.MAP);
  TaskAttemptImpl taImpl=new MapTaskAttemptImpl(taskId,1,eventHandler,mock(Path.class),1,mock(TaskSplitMetaInfo.class),new JobConf(),mock(TaskAttemptListener.class),mock(Token.class),new Credentials(),SystemClock.getInstance(),mock(AppContext.class));
  if (scheduleAttempt) {
    taImpl.handle(new TaskAttemptEvent(taImpl.getID(),TaskAttemptEventType.TA_SCHEDULE));
  }
  taImpl.handle(new TaskAttemptKillEvent(taImpl.getID(),"",true));
  assertEquals("Task attempt is not in KILLED state",taImpl.getState(),TaskAttemptState.KILLED);
  assertEquals("Task attempt's internal state is not KILLED",taImpl.getInternalState(),TaskAttemptStateInternal.KILLED);
  assertFalse("InternalError occurred",eventHandler.internalError);
  TaskEvent event=eventHandler.lastTaskEvent;
  assertEquals(TaskEventType.T_ATTEMPT_KILLED,event.getType());
  assertFalse(((TaskTAttemptKilledEvent)event).getRescheduleAttempt());
}
