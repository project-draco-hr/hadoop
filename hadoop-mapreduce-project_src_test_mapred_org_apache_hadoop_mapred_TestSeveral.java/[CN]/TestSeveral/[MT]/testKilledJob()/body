{
  JobConf conf=mrCluster.createJobConf();
  conf.setJobName("name * abc + Evalue]");
  conf.setInputFormat(TextInputFormat.class);
  conf.setOutputKeyClass(LongWritable.class);
  conf.setOutputValueClass(Text.class);
  conf.setMapperClass(KillMapper.class);
  conf.setOutputFormat(NullOutputFormat.class);
  conf.setNumReduceTasks(0);
  conf.setLong(JobContext.MAP_MAX_ATTEMPTS,2);
  final Path inDir=new Path("./wc/input");
  final Path outDir=new Path("./wc/output");
  final Path histDir=new Path("./wc/history");
  FileInputFormat.setInputPaths(conf,inDir);
  FileOutputFormat.setOutputPath(conf,outDir);
  clean(fs,outDir);
  makeInput(inDir,conf);
  JobClient jobClient=new JobClient(conf);
  RunningJob job=jobClient.submitJob(conf);
  while (job.getJobState() != JobStatus.RUNNING) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      break;
    }
  }
  job.killJob();
  job.waitForCompletion();
  assertTrue(job.isComplete());
  assertEquals(JobStatus.KILLED,job.getJobState());
  assertFalse("Missing event notification on killing a running job",myListener.contains(job.getID()));
  TestJobDirCleanup.verifyJobDirCleanup(mrCluster,numTT,job.getID());
}
