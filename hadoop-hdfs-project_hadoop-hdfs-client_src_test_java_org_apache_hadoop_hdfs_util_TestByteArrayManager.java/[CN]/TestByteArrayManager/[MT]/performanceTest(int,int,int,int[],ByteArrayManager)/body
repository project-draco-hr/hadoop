{
  final ExecutorService pool=Executors.newFixedThreadPool(nThreads);
  final List<Future<Void>> futures=new ArrayList<Future<Void>>(sleepTimeMSs.length);
  final long startTime=Time.monotonicNow();
  for (int i=0; i < sleepTimeMSs.length; i++) {
    final long sleepTime=sleepTimeMSs[i];
    futures.add(pool.submit(new Callable<Void>(){
      @Override public Void call() throws Exception {
        byte[] array=impl.newByteArray(arrayLength);
        sleepMs(sleepTime);
        impl.release(array);
        return null;
      }
    }
));
  }
  for (  Future<Void> f : futures) {
    f.get();
  }
  final long endTime=Time.monotonicNow();
  pool.shutdown();
  return endTime - startTime;
}
