{
  final long countResetTimePeriodMs=200L;
  final Counter c=new Counter(countResetTimePeriodMs);
  final int n=ThreadLocalRandom.current().nextInt(512) + 512;
  final List<Future<Integer>> futures=new ArrayList<Future<Integer>>(n);
  final ExecutorService pool=Executors.newFixedThreadPool(32);
  try {
    for (int i=0; i < n; i++) {
      futures.add(pool.submit(new Callable<Integer>(){
        @Override public Integer call() throws Exception {
          return (int)c.increment();
        }
      }
));
    }
    Collections.sort(futures,CMP);
  }
  finally {
    pool.shutdown();
  }
  Assert.assertEquals(n,futures.size());
  for (int i=0; i < n; i++) {
    Assert.assertEquals(i + 1,futures.get(i).get().intValue());
  }
  Assert.assertEquals(n,c.getCount());
  Thread.sleep(countResetTimePeriodMs + 100);
  Assert.assertEquals(1,c.increment());
}
