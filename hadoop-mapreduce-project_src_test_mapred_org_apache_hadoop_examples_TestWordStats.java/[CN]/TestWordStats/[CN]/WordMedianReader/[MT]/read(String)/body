{
  FileSystem fs=FileSystem.get(new Configuration());
  FileStatus[] files=fs.listStatus(new Path(path));
  int num=0;
  for (  FileStatus fileStat : files) {
    if (!fileStat.isFile())     continue;
    BufferedReader br=null;
    try {
      br=new BufferedReader(new InputStreamReader(fs.open(fileStat.getPath())));
      String line;
      while ((line=br.readLine()) != null) {
        StringTokenizer st=new StringTokenizer(line);
        String word;
        while (st.hasMoreTokens()) {
          word=st.nextToken();
          this.wordsRead++;
          if (this.map.get(word.length()) == null) {
            this.map.put(word.length(),1);
          }
 else {
            int count=this.map.get(word.length());
            this.map.put(word.length(),count + 1);
          }
        }
      }
    }
 catch (    IOException e) {
      System.out.println("Output could not be read!");
      throw e;
    }
 finally {
      br.close();
    }
  }
  int medianIndex1=(int)Math.ceil((this.wordsRead / 2.0));
  int medianIndex2=(int)Math.floor((this.wordsRead / 2.0));
  for (  Integer key : this.map.navigableKeySet()) {
    int prevNum=num;
    num+=this.map.get(key);
    if (medianIndex2 >= prevNum && medianIndex1 <= num) {
      return key;
    }
 else     if (medianIndex2 >= prevNum && medianIndex1 < num) {
      Integer nextCurrLen=this.map.navigableKeySet().iterator().next();
      double median=(key + nextCurrLen) / 2.0;
      return median;
    }
  }
  return -1;
}
