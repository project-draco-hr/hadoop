{
  if (LOG.isTraceEnabled()) {
    LOG.trace("GOT EXCEPITION",e);
  }
  if (e instanceof com.sun.jersey.api.NotFoundException) {
    return ((com.sun.jersey.api.NotFoundException)e).getResponse();
  }
  response.setContentType(null);
  if (e instanceof RemoteException) {
    e=((RemoteException)e).unwrapRemoteException();
  }
  final Response.Status s;
  if (e instanceof SecurityException) {
    s=Response.Status.UNAUTHORIZED;
  }
 else   if (e instanceof AuthorizationException) {
    s=Response.Status.UNAUTHORIZED;
  }
 else   if (e instanceof FileNotFoundException) {
    s=Response.Status.NOT_FOUND;
  }
 else   if (e instanceof NotFoundException) {
    s=Response.Status.NOT_FOUND;
  }
 else   if (e instanceof IOException) {
    s=Response.Status.NOT_FOUND;
  }
 else   if (e instanceof UnsupportedOperationException) {
    s=Response.Status.BAD_REQUEST;
  }
 else   if (e instanceof IllegalArgumentException) {
    s=Response.Status.BAD_REQUEST;
  }
 else   if (e instanceof NumberFormatException) {
    s=Response.Status.BAD_REQUEST;
  }
 else   if (e instanceof BadRequestException) {
    s=Response.Status.BAD_REQUEST;
  }
 else {
    LOG.warn("INTERNAL_SERVER_ERROR",e);
    s=Response.Status.INTERNAL_SERVER_ERROR;
  }
  final Map<String,Object> m=new TreeMap<String,Object>();
  m.put("exception",e.getClass().getSimpleName());
  m.put("message",e.getMessage());
  m.put("javaClassName",e.getClass().getName());
  final Map<String,Object> m2=new TreeMap<String,Object>();
  m2.put(RemoteException.class.getSimpleName(),m);
  final String js=JSON.toString(m2);
  return Response.status(s).type(MediaType.APPLICATION_JSON).entity(js).build();
}
