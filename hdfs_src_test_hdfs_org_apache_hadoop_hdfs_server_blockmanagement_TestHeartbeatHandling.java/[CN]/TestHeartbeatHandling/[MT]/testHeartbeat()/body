{
  final Configuration conf=new HdfsConfiguration();
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  try {
    cluster.waitActive();
    final FSNamesystem namesystem=cluster.getNamesystem();
    final HeartbeatManager hm=namesystem.getBlockManager().getDatanodeManager().getHeartbeatManager();
    final String poolId=namesystem.getBlockPoolId();
    final DatanodeRegistration nodeReg=DataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(0),poolId);
    final DatanodeDescriptor dd=NameNodeAdapter.getDatanode(namesystem,nodeReg);
    final int REMAINING_BLOCKS=1;
    final int MAX_REPLICATE_LIMIT=conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY,2);
    final int MAX_INVALIDATE_LIMIT=DFSConfigKeys.DFS_BLOCK_INVALIDATE_LIMIT_DEFAULT;
    final int MAX_INVALIDATE_BLOCKS=2 * MAX_INVALIDATE_LIMIT + REMAINING_BLOCKS;
    final int MAX_REPLICATE_BLOCKS=2 * MAX_REPLICATE_LIMIT + REMAINING_BLOCKS;
    final DatanodeDescriptor[] ONE_TARGET=new DatanodeDescriptor[1];
    try {
      namesystem.writeLock();
synchronized (hm) {
        for (int i=0; i < MAX_REPLICATE_BLOCKS; i++) {
          dd.addBlockToBeReplicated(new Block(i,0,GenerationStamp.FIRST_VALID_STAMP),ONE_TARGET);
        }
        DatanodeCommand[] cmds=sendHeartBeat(nodeReg,dd,namesystem);
        assertEquals(1,cmds.length);
        assertEquals(DatanodeProtocol.DNA_TRANSFER,cmds[0].getAction());
        assertEquals(MAX_REPLICATE_LIMIT,((BlockCommand)cmds[0]).getBlocks().length);
        ArrayList<Block> blockList=new ArrayList<Block>(MAX_INVALIDATE_BLOCKS);
        for (int i=0; i < MAX_INVALIDATE_BLOCKS; i++) {
          blockList.add(new Block(i,0,GenerationStamp.FIRST_VALID_STAMP));
        }
        dd.addBlocksToBeInvalidated(blockList);
        cmds=sendHeartBeat(nodeReg,dd,namesystem);
        assertEquals(2,cmds.length);
        assertEquals(DatanodeProtocol.DNA_TRANSFER,cmds[0].getAction());
        assertEquals(MAX_REPLICATE_LIMIT,((BlockCommand)cmds[0]).getBlocks().length);
        assertEquals(DatanodeProtocol.DNA_INVALIDATE,cmds[1].getAction());
        assertEquals(MAX_INVALIDATE_LIMIT,((BlockCommand)cmds[1]).getBlocks().length);
        cmds=sendHeartBeat(nodeReg,dd,namesystem);
        assertEquals(2,cmds.length);
        assertEquals(DatanodeProtocol.DNA_TRANSFER,cmds[0].getAction());
        assertEquals(REMAINING_BLOCKS,((BlockCommand)cmds[0]).getBlocks().length);
        assertEquals(DatanodeProtocol.DNA_INVALIDATE,cmds[1].getAction());
        assertEquals(MAX_INVALIDATE_LIMIT,((BlockCommand)cmds[1]).getBlocks().length);
        cmds=sendHeartBeat(nodeReg,dd,namesystem);
        assertEquals(1,cmds.length);
        assertEquals(DatanodeProtocol.DNA_INVALIDATE,cmds[0].getAction());
        assertEquals(REMAINING_BLOCKS,((BlockCommand)cmds[0]).getBlocks().length);
        cmds=sendHeartBeat(nodeReg,dd,namesystem);
        assertEquals(null,cmds);
      }
    }
  finally {
      namesystem.writeUnlock();
    }
  }
  finally {
    cluster.shutdown();
  }
}
