{
  boolean create=conf.getBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,FairSchedulerConfiguration.DEFAULT_ALLOW_UNDECLARED_POOLS);
  boolean userAsDefaultQueue=conf.getBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,FairSchedulerConfiguration.DEFAULT_USER_AS_DEFAULT_QUEUE);
  List<QueuePlacementRule> rules=new ArrayList<QueuePlacementRule>();
  rules.add(new QueuePlacementRule.Specified().initialize(create,null));
  if (userAsDefaultQueue) {
    rules.add(new QueuePlacementRule.User().initialize(create,null));
  }
  if (!userAsDefaultQueue || !create) {
    rules.add(new QueuePlacementRule.Default().initialize(true,null));
  }
  try {
    return new QueuePlacementPolicy(rules,configuredQueues,conf);
  }
 catch (  AllocationConfigurationException ex) {
    throw new RuntimeException("Should never hit exception when loading" + "placement policy from conf",ex);
  }
}
