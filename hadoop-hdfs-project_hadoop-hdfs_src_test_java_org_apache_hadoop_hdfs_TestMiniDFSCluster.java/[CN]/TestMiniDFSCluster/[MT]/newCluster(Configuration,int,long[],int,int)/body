{
  conf.setBoolean(DFSConfigKeys.DFS_DISK_BALANCER_ENABLED,true);
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,defaultBlockSize);
  conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,defaultBlockSize);
  conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1L);
  final String fileName="/" + UUID.randomUUID().toString();
  final Path filePath=new Path(fileName);
  Preconditions.checkNotNull(storageCapacities);
  Preconditions.checkArgument(storageCapacities.length == 2,"need to specify capacities for two storages.");
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).storageCapacities(storageCapacities).storageTypes(new StorageType[]{StorageType.DISK,StorageType.DISK}).storagesPerDatanode(2).build();
  cluster.waitActive();
  final short replicationFactor=(short)1;
  final Random r=new Random();
  FileSystem fs=cluster.getFileSystem(0);
  DFSTestUtil.createFile(fs,filePath,fileLen,replicationFactor,r.nextLong());
  DFSTestUtil.waitReplication(fs,filePath,replicationFactor);
  return cluster;
}
