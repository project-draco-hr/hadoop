{
  final ContainerStatus testCompleteContainer=TestNodeStatusUpdater.createContainerStatus(2,ContainerState.COMPLETE);
  final Container container=TestNodeStatusUpdater.getMockContainer(testCompleteContainer);
  NMContainerStatus report=createNMContainerStatus(2,ContainerState.COMPLETE);
  when(container.getNMContainerStatus()).thenReturn(report);
  NodeManager nm=new NodeManager(){
    int registerCount=0;
    @Override protected NodeStatusUpdater createNodeStatusUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker){
      return new TestNodeStatusUpdaterResync(context,dispatcher,healthChecker,metrics){
        @Override protected ResourceTracker createResourceTracker(){
          return new MockResourceTracker(){
            @Override public RegisterNodeManagerResponse registerNodeManager(            RegisterNodeManagerRequest request) throws YarnException, IOException {
              if (registerCount == 0) {
                try {
                  Assert.assertEquals(0,request.getNMContainerStatuses().size());
                }
 catch (                AssertionError error) {
                  error.printStackTrace();
                  assertionFailedInThread.set(true);
                }
                getNMContext().getContainers().put(testCompleteContainer.getContainerId(),container);
              }
 else {
                List<NMContainerStatus> statuses=request.getNMContainerStatuses();
                try {
                  Assert.assertEquals(1,statuses.size());
                  Assert.assertEquals(testCompleteContainer.getContainerId(),statuses.get(0).getContainerId());
                }
 catch (                AssertionError error) {
                  error.printStackTrace();
                  assertionFailedInThread.set(true);
                }
              }
              registerCount++;
              return super.registerNodeManager(request);
            }
            @Override public NodeHeartbeatResponse nodeHeartbeat(            NodeHeartbeatRequest request){
              List<ContainerStatus> statuses=request.getNodeStatus().getContainersStatuses();
              try {
                Assert.assertEquals(1,statuses.size());
                Assert.assertEquals(testCompleteContainer.getContainerId(),statuses.get(0).getContainerId());
              }
 catch (              AssertionError error) {
                error.printStackTrace();
                assertionFailedInThread.set(true);
              }
              return YarnServerBuilderUtils.newNodeHeartbeatResponse(1,NodeAction.RESYNC,null,null,null,null,1000L);
            }
          }
;
        }
      }
;
    }
  }
;
  YarnConfiguration conf=createNMConfig();
  nm.init(conf);
  nm.start();
  try {
    syncBarrier.await();
  }
 catch (  BrokenBarrierException e) {
  }
  Assert.assertFalse(assertionFailedInThread.get());
  nm.stop();
}
