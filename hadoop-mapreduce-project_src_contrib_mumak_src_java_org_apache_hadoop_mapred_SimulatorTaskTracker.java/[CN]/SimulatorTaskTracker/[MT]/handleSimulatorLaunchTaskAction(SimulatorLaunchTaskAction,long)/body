{
  if (LOG.isDebugEnabled()) {
    LOG.debug("Handling launch task action " + action);
  }
  Task task=action.getTask();
  TaskAttemptID taskId=task.getTaskID();
  if (tasks.containsKey(taskId)) {
    throw new IllegalArgumentException("Multiple launch of task id =" + taskId);
  }
  org.apache.hadoop.mapred.TaskAttemptID taskIdOldApi=org.apache.hadoop.mapred.TaskAttemptID.downgrade(taskId);
  TaskStatus status;
  int numSlotsRequired=task.getNumSlotsRequired();
  Counters emptyCounters=new Counters();
  if (task.isMapTask()) {
    status=new MapTaskStatus(taskIdOldApi,0f,numSlotsRequired,State.RUNNING,"","",taskTrackerName,Phase.MAP,emptyCounters);
    usedMapSlots+=numSlotsRequired;
    if (usedMapSlots > maxMapSlots) {
      throw new IllegalStateException("usedMapSlots exceeds maxMapSlots: " + usedMapSlots + " > "+ maxMapSlots);
    }
  }
 else {
    status=new ReduceTaskStatus(taskIdOldApi,0f,numSlotsRequired,State.RUNNING,"","",taskTrackerName,Phase.SHUFFLE,emptyCounters);
    usedReduceSlots+=numSlotsRequired;
    if (usedReduceSlots > maxReduceSlots) {
      throw new IllegalStateException("usedReduceSlots exceeds usedReduceSlots: " + usedReduceSlots + " > "+ usedReduceSlots);
    }
  }
  status.setStartTime(now);
  SimulatorTaskInProgress tip=new SimulatorTaskInProgress(action,status,now);
  tasks.put(taskId,tip);
  if (task.isMapTask()) {
    TaskAttemptCompletionEvent e=createTaskAttemptCompletionEvent(tip,now);
    return Collections.<SimulatorEvent>singletonList(e);
  }
 else {
    return SimulatorEngine.EMPTY_EVENTS;
  }
}
