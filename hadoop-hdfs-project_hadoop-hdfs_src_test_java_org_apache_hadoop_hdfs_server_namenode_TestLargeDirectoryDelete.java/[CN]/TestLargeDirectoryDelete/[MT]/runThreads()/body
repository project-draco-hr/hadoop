{
  final TestThread threads[]=new TestThread[2];
  threads[0]=new TestThread(){
    @Override protected void execute() throws Throwable {
      while (live) {
        try {
          int blockcount=getBlockCount();
          if (blockcount < TOTAL_BLOCKS && blockcount > 0) {
            String file="/tmp" + createOps;
            createFile(file,1);
            mc.getFileSystem().delete(new Path(file),true);
            createOps++;
          }
        }
 catch (        IOException ex) {
          LOG.info("createFile exception ",ex);
          break;
        }
      }
    }
  }
;
  threads[1]=new TestThread(){
    @Override protected void execute() throws Throwable {
      while (live) {
        try {
          int blockcount=getBlockCount();
          if (blockcount < TOTAL_BLOCKS && blockcount > 0) {
            mc.getNamesystem().writeLock();
            try {
              lockOps++;
            }
  finally {
              mc.getNamesystem().writeUnlock();
            }
            Thread.sleep(1);
          }
        }
 catch (        InterruptedException ex) {
          LOG.info("lockOperation exception ",ex);
          break;
        }
      }
    }
  }
;
  threads[0].start();
  threads[1].start();
  final long start=System.currentTimeMillis();
  FSNamesystem.BLOCK_DELETION_INCREMENT=1;
  mc.getFileSystem().delete(new Path("/root"),true);
  final long end=System.currentTimeMillis();
  threads[0].endThread();
  threads[1].endThread();
  LOG.info("Deletion took " + (end - start) + "msecs");
  LOG.info("createOperations " + createOps);
  LOG.info("lockOperations " + lockOps);
  Assert.assertTrue(lockOps + createOps > 0);
  threads[0].rethrow();
  threads[1].rethrow();
}
