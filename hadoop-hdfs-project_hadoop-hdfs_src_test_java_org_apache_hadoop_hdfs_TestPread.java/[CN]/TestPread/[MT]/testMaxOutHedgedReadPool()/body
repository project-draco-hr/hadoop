{
  isHedgedRead=true;
  Configuration conf=new Configuration();
  int numHedgedReadPoolThreads=5;
  final int initialHedgedReadTimeoutMillis=50000;
  final int fixedSleepIntervalMillis=50;
  conf.setInt(DFSConfigKeys.DFS_DFSCLIENT_HEDGED_READ_THREADPOOL_SIZE,numHedgedReadPoolThreads);
  conf.setLong(DFSConfigKeys.DFS_DFSCLIENT_HEDGED_READ_THRESHOLD_MILLIS,initialHedgedReadTimeoutMillis);
  DFSClientFaultInjector.instance=Mockito.mock(DFSClientFaultInjector.class);
  DFSClientFaultInjector injector=DFSClientFaultInjector.instance;
  Mockito.doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      Thread.sleep(fixedSleepIntervalMillis);
      return null;
    }
  }
).when(injector).startFetchFromDatanode();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).format(true).build();
  DistributedFileSystem fileSys=cluster.getFileSystem();
  DFSClient dfsClient=fileSys.getClient();
  DFSHedgedReadMetrics metrics=dfsClient.getHedgedReadMetrics();
  metrics.hedgedReadOps.set(0);
  metrics.hedgedReadOpsWin.set(0);
  metrics.hedgedReadOpsInCurThread.set(0);
  try {
    Path file1=new Path("hedgedReadMaxOut.dat");
    writeFile(fileSys,file1);
    pReadFile(fileSys,file1);
    assertTrue(metrics.getHedgedReadOps() == 0);
    assertTrue(metrics.getHedgedReadOpsInCurThread() == 0);
    dfsClient.setHedgedReadTimeout(50);
    pReadFile(fileSys,file1);
    assertTrue(metrics.getHedgedReadOps() > 0);
    assertTrue(metrics.getHedgedReadOpsInCurThread() == 0);
    int factor=10;
    int numHedgedReads=numHedgedReadPoolThreads * factor;
    long initialReadOpsValue=metrics.getHedgedReadOps();
    ExecutorService executor=Executors.newFixedThreadPool(numHedgedReads);
    ArrayList<Future<Void>> futures=new ArrayList<Future<Void>>();
    for (int i=0; i < numHedgedReads; i++) {
      futures.add(executor.submit(getPReadFileCallable(fileSys,file1)));
    }
    for (int i=0; i < numHedgedReads; i++) {
      futures.get(i).get();
    }
    assertTrue(metrics.getHedgedReadOps() > initialReadOpsValue);
    assertTrue(metrics.getHedgedReadOpsInCurThread() > 0);
    cleanupFile(fileSys,file1);
    executor.shutdown();
  }
  finally {
    fileSys.close();
    cluster.shutdown();
    Mockito.reset(injector);
  }
}
