{
  final NodeManager nm=new NodeManager(){
    @Override protected NodeStatusUpdater createNodeStatusUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker,    ContainerTokenSecretManager containerTokenSecretManager){
      return new MyNodeStatusUpdater(context,dispatcher,healthChecker,metrics,containerTokenSecretManager);
    }
  }
;
  YarnConfiguration conf=createNMConfig();
  nm.init(conf);
  Object[] services=nm.getServices().toArray();
  Object lastService=services[services.length - 1];
  Assert.assertTrue("last service is NOT the node status updater",lastService instanceof NodeStatusUpdater);
  new Thread(){
    public void run(){
      try {
        nm.start();
      }
 catch (      Error e) {
        TestNodeStatusUpdater.this.nmStartError=e;
      }
    }
  }
.start();
  System.out.println(" ----- thread already started.." + nm.getServiceState());
  int waitCount=0;
  while (nm.getServiceState() == STATE.INITED && waitCount++ != 20) {
    LOG.info("Waiting for NM to start..");
    Thread.sleep(1000);
  }
  if (nmStartError != null) {
    throw nmStartError;
  }
  if (nm.getServiceState() != STATE.STARTED) {
    Assert.fail("NodeManager failed to start");
  }
  while (heartBeatID <= 3) {
    Thread.sleep(500);
  }
  Assert.assertEquals("Number of registered NMs is wrong!!",1,this.registeredNodes.size());
  nm.stop();
}
