{
  Configuration conf=new HdfsConfiguration();
  final int DEFAULT_BLOCK_SIZE=100;
  conf.setBoolean(DFSConfigKeys.DFS_DISK_BALANCER_ENABLED,true);
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DEFAULT_BLOCK_SIZE);
  conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,DEFAULT_BLOCK_SIZE);
  String fileName="/tmp.txt";
  Path filePath=new Path(fileName);
  final int numDatanodes=1;
  final int dnIndex=0;
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build();
  FsVolumeImpl source=null;
  FsVolumeImpl dest=null;
  try {
    cluster.waitActive();
    Random r=new Random();
    FileSystem fs=cluster.getFileSystem(dnIndex);
    DFSTestUtil.createFile(fs,filePath,10 * 1024,(short)1,r.nextLong());
    DataNode dnNode=cluster.getDataNodes().get(dnIndex);
    FsDatasetSpi.FsVolumeReferences refs=dnNode.getFSDataset().getFsVolumeReferences();
    try {
      source=(FsVolumeImpl)refs.get(0);
      dest=(FsVolumeImpl)refs.get(1);
      DiskBalancerTestUtil.moveAllDataToDestVolume(dnNode.getFSDataset(),source,dest);
      assertTrue(DiskBalancerTestUtil.getBlockCount(source) == 0);
    }
  finally {
      refs.close();
    }
  }
  finally {
    cluster.shutdown();
  }
}
