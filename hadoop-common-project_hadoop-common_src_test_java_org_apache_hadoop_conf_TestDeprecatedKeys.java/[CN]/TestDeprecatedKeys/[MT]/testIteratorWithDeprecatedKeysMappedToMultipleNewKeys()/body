{
  Configuration conf=new Configuration();
  Configuration.addDeprecation("dK",new String[]{"nK1","nK2"});
  conf.set("k","v");
  conf.set("dK","V");
  assertEquals("V",conf.get("dK"));
  assertEquals("V",conf.get("nK1"));
  assertEquals("V",conf.get("nK2"));
  conf.set("nK1","VV");
  assertEquals("VV",conf.get("dK"));
  assertEquals("VV",conf.get("nK1"));
  assertEquals("VV",conf.get("nK2"));
  conf.set("nK2","VVV");
  assertEquals("VVV",conf.get("dK"));
  assertEquals("VVV",conf.get("nK2"));
  assertEquals("VVV",conf.get("nK1"));
  boolean kFound=false;
  boolean dKFound=false;
  boolean nK1Found=false;
  boolean nK2Found=false;
  for (  Map.Entry<String,String> entry : conf) {
    if (entry.getKey().equals("k")) {
      assertEquals("v",entry.getValue());
      kFound=true;
    }
    if (entry.getKey().equals("dK")) {
      assertEquals("VVV",entry.getValue());
      dKFound=true;
    }
    if (entry.getKey().equals("nK1")) {
      assertEquals("VVV",entry.getValue());
      nK1Found=true;
    }
    if (entry.getKey().equals("nK2")) {
      assertEquals("VVV",entry.getValue());
      nK2Found=true;
    }
  }
  assertTrue("regular Key not found",kFound);
  assertTrue("deprecated Key not found",dKFound);
  assertTrue("new Key 1 not found",nK1Found);
  assertTrue("new Key 2 not found",nK2Found);
}
