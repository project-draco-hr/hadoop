{
  if (args.size() == 0) {
    System.out.println(usageText);
    System.out.println(helpText + "\n");
    return 1;
  }
  String blockFile=StringUtils.popOptionWithArgument("-block",args);
  String metaFile=StringUtils.popOptionWithArgument("-meta",args);
  if (metaFile == null) {
    System.err.println("You must specify a meta file with -meta");
    return 1;
  }
  FileInputStream metaStream=null, dataStream=null;
  FileChannel metaChannel=null, dataChannel=null;
  DataInputStream checksumStream=null;
  try {
    BlockMetadataHeader header;
    try {
      metaStream=new FileInputStream(metaFile);
      checksumStream=new DataInputStream(metaStream);
      header=BlockMetadataHeader.readHeader(checksumStream);
      metaChannel=metaStream.getChannel();
      metaChannel.position(HEADER_LEN);
    }
 catch (    RuntimeException e) {
      System.err.println("Failed to read HDFS metadata file header for " + metaFile + ": "+ StringUtils.stringifyException(e));
      return 1;
    }
catch (    IOException e) {
      System.err.println("Failed to read HDFS metadata file header for " + metaFile + ": "+ StringUtils.stringifyException(e));
      return 1;
    }
    DataChecksum checksum=header.getChecksum();
    System.out.println("Checksum type: " + checksum.toString());
    if (blockFile == null) {
      return 0;
    }
    ByteBuffer metaBuf, dataBuf;
    try {
      dataStream=new FileInputStream(blockFile);
      dataChannel=dataStream.getChannel();
      final int CHECKSUMS_PER_BUF=1024 * 32;
      metaBuf=ByteBuffer.allocate(checksum.getChecksumSize() * CHECKSUMS_PER_BUF);
      dataBuf=ByteBuffer.allocate(checksum.getBytesPerChecksum() * CHECKSUMS_PER_BUF);
    }
 catch (    IOException e) {
      System.err.println("Failed to open HDFS block file for " + blockFile + ": "+ StringUtils.stringifyException(e));
      return 1;
    }
    long offset=0;
    while (true) {
      dataBuf.clear();
      int dataRead=-1;
      try {
        dataRead=dataChannel.read(dataBuf);
        if (dataRead < 0) {
          break;
        }
      }
 catch (      IOException e) {
        System.err.println("Got I/O error reading block file " + blockFile + "from disk at offset "+ dataChannel.position()+ ": "+ StringUtils.stringifyException(e));
        return 1;
      }
      try {
        int csumToRead=(((checksum.getBytesPerChecksum() - 1) + dataRead) / checksum.getBytesPerChecksum()) * checksum.getChecksumSize();
        metaBuf.clear();
        metaBuf.limit(csumToRead);
        metaChannel.read(metaBuf);
        dataBuf.flip();
        metaBuf.flip();
      }
 catch (      IOException e) {
        System.err.println("Got I/O error reading metadata file " + metaFile + "from disk at offset "+ metaChannel.position()+ ": "+ StringUtils.stringifyException(e));
        return 1;
      }
      try {
        checksum.verifyChunkedSums(dataBuf,metaBuf,blockFile,offset);
      }
 catch (      IOException e) {
        System.out.println("verifyChunkedSums error: " + StringUtils.stringifyException(e));
        return 1;
      }
      offset+=dataRead;
    }
    System.out.println("Checksum verification succeeded on block file " + blockFile);
    return 0;
  }
  finally {
    IOUtils.cleanup(null,metaStream,dataStream,checksumStream);
  }
}
