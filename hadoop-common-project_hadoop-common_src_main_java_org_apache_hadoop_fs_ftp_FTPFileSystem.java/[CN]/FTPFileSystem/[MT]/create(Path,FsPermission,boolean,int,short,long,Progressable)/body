{
  final FTPClient client=connect();
  Path workDir=new Path(client.printWorkingDirectory());
  Path absolute=makeAbsolute(workDir,file);
  FileStatus status;
  try {
    status=getFileStatus(client,file);
  }
 catch (  FileNotFoundException fnfe) {
    status=null;
  }
  if (status != null) {
    if (overwrite && !status.isDirectory()) {
      delete(client,file,false);
    }
 else {
      disconnect(client);
      throw new FileAlreadyExistsException("File already exists: " + file);
    }
  }
  Path parent=absolute.getParent();
  if (parent == null || !mkdirs(client,parent,FsPermission.getDirDefault())) {
    parent=(parent == null) ? new Path("/") : parent;
    disconnect(client);
    throw new IOException("create(): Mkdirs failed to create: " + parent);
  }
  client.allocate(bufferSize);
  client.changeWorkingDirectory(parent.toUri().getPath());
  FSDataOutputStream fos=new FSDataOutputStream(client.storeFileStream(file.getName()),statistics){
    @Override public void close() throws IOException {
      super.close();
      if (!client.isConnected()) {
        throw new FTPException("Client not connected");
      }
      boolean cmdCompleted=client.completePendingCommand();
      disconnect(client);
      if (!cmdCompleted) {
        throw new FTPException("Could not complete transfer, Reply Code - " + client.getReplyCode());
      }
    }
  }
;
  if (!FTPReply.isPositivePreliminary(client.getReplyCode())) {
    fos.close();
    throw new IOException("Unable to create file: " + file + ", Aborting");
  }
  return fos;
}
