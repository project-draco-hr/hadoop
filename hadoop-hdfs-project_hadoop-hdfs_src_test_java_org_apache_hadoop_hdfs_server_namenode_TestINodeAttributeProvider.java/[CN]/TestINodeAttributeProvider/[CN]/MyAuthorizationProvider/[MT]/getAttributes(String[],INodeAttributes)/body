{
  CALLED.add("getAttributes");
  final boolean useDefault=useDefault(pathElements);
  return new INodeAttributes(){
    @Override public boolean isDirectory(){
      return inode.isDirectory();
    }
    @Override public byte[] getLocalNameBytes(){
      return inode.getLocalNameBytes();
    }
    @Override public String getUserName(){
      return (useDefault) ? inode.getUserName() : "foo";
    }
    @Override public String getGroupName(){
      return (useDefault) ? inode.getGroupName() : "bar";
    }
    @Override public FsPermission getFsPermission(){
      return (useDefault) ? inode.getFsPermission() : new FsPermission(getFsPermissionShort());
    }
    @Override public short getFsPermissionShort(){
      return (useDefault) ? inode.getFsPermissionShort() : (short)getPermissionLong();
    }
    @Override public long getPermissionLong(){
      return (useDefault) ? inode.getPermissionLong() : 0770;
    }
    @Override public AclFeature getAclFeature(){
      AclFeature f;
      if (useDefault) {
        f=inode.getAclFeature();
      }
 else {
        AclEntry acl=new AclEntry.Builder().setType(AclEntryType.GROUP).setPermission(FsAction.ALL).setName("xxx").build();
        f=new AclFeature(AclEntryStatusFormat.toInt(Lists.newArrayList(acl)));
      }
      return f;
    }
    @Override public XAttrFeature getXAttrFeature(){
      return (useDefault) ? inode.getXAttrFeature() : null;
    }
    @Override public long getModificationTime(){
      return (useDefault) ? inode.getModificationTime() : 0;
    }
    @Override public long getAccessTime(){
      return (useDefault) ? inode.getAccessTime() : 0;
    }
  }
;
}
