{
  TimelineWriteResponse response=new TimelineWriteResponse();
  TimelineCollectorContext currContext=new TimelineCollectorContext(clusterId,userId,flowName,flowVersion,flowRunId,appId);
  String sql="UPSERT INTO " + ENTITY_TABLE_NAME + " ("+ StringUtils.join(PHOENIX_STORAGE_PK_LIST,",")+ ", creation_time, modified_time, configs) "+ "VALUES ("+ StringUtils.repeat("?,",PHOENIX_STORAGE_PK_LIST.length)+ "?, ?, ?)";
  if (LOG.isDebugEnabled()) {
    LOG.debug("TimelineEntity write SQL: " + sql);
  }
  try (Connection conn=getConnection();PreparedStatement ps=conn.prepareStatement(sql)){
    for (    TimelineEntity entity : entities.getEntities()) {
      int idx=setStringsForPrimaryKey(ps,currContext,entity,1);
      ps.setLong(idx++,entity.getCreatedTime());
      ps.setLong(idx++,entity.getModifiedTime());
      String configKeys=StringUtils.join(entity.getConfigs().keySet(),PHOENIX_STORAGE_SEPARATOR);
      ps.setString(idx++,configKeys);
      ps.execute();
      storeEntityVariableLengthFields(entity,currContext,conn);
      storeEvents(entity,currContext,conn);
      storeMetrics(entity,currContext,conn);
      conn.commit();
    }
  }
 catch (  SQLException se) {
    LOG.error("Failed to add entity to Phoenix " + se.getMessage());
    throw new IOException(se);
  }
catch (  Exception e) {
    LOG.error("Exception on getting connection: " + e.getMessage());
    throw new IOException(e);
  }
  return response;
}
