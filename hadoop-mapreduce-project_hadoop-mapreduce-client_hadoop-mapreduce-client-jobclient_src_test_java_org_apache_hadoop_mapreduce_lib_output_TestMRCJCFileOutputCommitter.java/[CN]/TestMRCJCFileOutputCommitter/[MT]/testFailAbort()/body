{
  Job job=Job.getInstance();
  Configuration conf=job.getConfiguration();
  conf.set(FileSystem.FS_DEFAULT_NAME_KEY,"faildel:///");
  conf.setClass("fs.faildel.impl",FakeFileSystem.class,FileSystem.class);
  conf.set(MRJobConfig.TASK_ATTEMPT_ID,attempt);
  FileOutputFormat.setOutputPath(job,outDir);
  JobContext jContext=new JobContextImpl(conf,taskID.getJobID());
  TaskAttemptContext tContext=new TaskAttemptContextImpl(conf,taskID);
  FileOutputCommitter committer=new FileOutputCommitter(outDir,tContext);
  committer.setupJob(jContext);
  committer.setupTask(tContext);
  TextOutputFormat<?,?> theOutputFormat=new TextOutputFormat();
  RecordWriter<?,?> theRecordWriter=theOutputFormat.getRecordWriter(tContext);
  writeOutput(theRecordWriter,tContext);
  Throwable th=null;
  try {
    committer.abortTask(tContext);
  }
 catch (  IOException ie) {
    th=ie;
  }
  assertNotNull(th);
  assertTrue(th instanceof IOException);
  assertTrue(th.getMessage().contains("fake delete failed"));
  File jobTmpDir=new File(committer.getJobAttemptPath(jContext).toUri().getPath());
  File taskTmpDir=new File(committer.getTaskAttemptPath(tContext).toUri().getPath());
  File expectedFile=new File(taskTmpDir,partFile);
  assertTrue(expectedFile + " does not exists",expectedFile.exists());
  th=null;
  try {
    committer.abortJob(jContext,JobStatus.State.FAILED);
  }
 catch (  IOException ie) {
    th=ie;
  }
  assertNotNull(th);
  assertTrue(th instanceof IOException);
  assertTrue(th.getMessage().contains("fake delete failed"));
  assertTrue("job temp dir does not exists",jobTmpDir.exists());
  FileUtil.fullyDelete(new File(outDir.toString()));
}
