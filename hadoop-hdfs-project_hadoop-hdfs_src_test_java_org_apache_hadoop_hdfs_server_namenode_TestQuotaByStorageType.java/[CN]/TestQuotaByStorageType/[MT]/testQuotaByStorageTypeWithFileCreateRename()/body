{
  final Path foo=new Path(dir,"foo");
  dfs.mkdirs(foo);
  Path createdFile1foo=new Path(foo,"created_file1.data");
  final Path bar=new Path(dir,"bar");
  dfs.mkdirs(bar);
  Path createdFile1bar=new Path(bar,"created_file1.data");
  dfs.setStoragePolicy(foo,HdfsConstants.ONESSD_STORAGE_POLICY_NAME);
  dfs.setStoragePolicy(bar,HdfsConstants.ONESSD_STORAGE_POLICY_NAME);
  dfs.setQuotaByStorageType(foo,StorageType.SSD,BLOCKSIZE * 4);
  dfs.setQuotaByStorageType(bar,StorageType.SSD,BLOCKSIZE * 2);
  INode fnode=fsdir.getINode4Write(foo.toString());
  assertTrue(fnode.isDirectory());
  assertTrue(fnode.isQuotaSet());
  long file1Len=BLOCKSIZE * 3;
  int bufLen=BLOCKSIZE / 16;
  DFSTestUtil.createFile(dfs,createdFile1foo,bufLen,file1Len,BLOCKSIZE,REPLICATION,seed);
  long ssdConsumed=fnode.asDirectory().getDirectoryWithQuotaFeature().getSpaceConsumed().getTypeSpaces().get(StorageType.SSD);
  assertEquals(file1Len,ssdConsumed);
  try {
    dfs.rename(createdFile1foo,createdFile1bar);
    fail("Should have failed with QuotaByStorageTypeExceededException ");
  }
 catch (  Throwable t) {
    LOG.info("Got expected exception ",t);
  }
}
