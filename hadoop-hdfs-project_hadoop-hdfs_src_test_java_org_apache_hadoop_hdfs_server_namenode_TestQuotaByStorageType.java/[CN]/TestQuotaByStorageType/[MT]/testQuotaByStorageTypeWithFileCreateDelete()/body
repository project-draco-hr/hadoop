{
  final Path foo=new Path(dir,"foo");
  Path createdFile1=new Path(foo,"created_file1.data");
  dfs.mkdirs(foo);
  dfs.setStoragePolicy(foo,HdfsConstants.ONESSD_STORAGE_POLICY_NAME);
  dfs.setQuotaByStorageType(foo,StorageType.SSD,BLOCKSIZE * 10);
  INode fnode=fsdir.getINode4Write(foo.toString());
  assertTrue(fnode.isDirectory());
  assertTrue(fnode.isQuotaSet());
  long file1Len=BLOCKSIZE * 2 + BLOCKSIZE / 2;
  int bufLen=BLOCKSIZE / 16;
  DFSTestUtil.createFile(dfs,createdFile1,bufLen,file1Len,BLOCKSIZE,REPLICATION,seed);
  long storageTypeConsumed=fnode.asDirectory().getDirectoryWithQuotaFeature().getSpaceConsumed().getTypeSpaces().get(StorageType.SSD);
  assertEquals(file1Len,storageTypeConsumed);
  dfs.delete(createdFile1,false);
  storageTypeConsumed=fnode.asDirectory().getDirectoryWithQuotaFeature().getSpaceConsumed().getTypeSpaces().get(StorageType.SSD);
  assertEquals(0,storageTypeConsumed);
  QuotaCounts counts=fnode.computeQuotaUsage(fsn.getBlockManager().getStoragePolicySuite(),true);
  assertEquals(fnode.dumpTreeRecursively().toString(),0,counts.getTypeSpaces().get(StorageType.SSD));
  ContentSummary cs=dfs.getContentSummary(foo);
  assertEquals(cs.getSpaceConsumed(),0);
  assertEquals(cs.getTypeConsumed(StorageType.SSD),0);
  assertEquals(cs.getTypeConsumed(StorageType.DISK),0);
}
