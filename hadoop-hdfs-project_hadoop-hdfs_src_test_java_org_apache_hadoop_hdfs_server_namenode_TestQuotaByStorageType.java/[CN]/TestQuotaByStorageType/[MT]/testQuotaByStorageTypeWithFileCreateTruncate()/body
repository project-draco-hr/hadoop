{
  final Path foo=new Path(dir,"foo");
  Path createdFile1=new Path(foo,"created_file1.data");
  dfs.mkdirs(foo);
  dfs.setStoragePolicy(foo,HdfsConstants.ONESSD_STORAGE_POLICY_NAME);
  dfs.setQuotaByStorageType(foo,StorageType.SSD,BLOCKSIZE * 4);
  INode fnode=fsdir.getINode4Write(foo.toString());
  assertTrue(fnode.isDirectory());
  assertTrue(fnode.isQuotaSet());
  long file1Len=BLOCKSIZE * 2;
  int bufLen=BLOCKSIZE / 16;
  DFSTestUtil.createFile(dfs,createdFile1,bufLen,file1Len,BLOCKSIZE,REPLICATION,seed);
  long ssdConsumed=fnode.asDirectory().getDirectoryWithQuotaFeature().getSpaceConsumed().getTypeSpaces().get(StorageType.SSD);
  assertEquals(file1Len,ssdConsumed);
  int newFile1Len=BLOCKSIZE;
  dfs.truncate(createdFile1,newFile1Len);
  ssdConsumed=fnode.asDirectory().getDirectoryWithQuotaFeature().getSpaceConsumed().getTypeSpaces().get(StorageType.SSD);
  assertEquals(newFile1Len,ssdConsumed);
  ContentSummary cs=dfs.getContentSummary(foo);
  assertEquals(cs.getSpaceConsumed(),newFile1Len * REPLICATION);
  assertEquals(cs.getTypeConsumed(StorageType.SSD),newFile1Len);
  assertEquals(cs.getTypeConsumed(StorageType.DISK),newFile1Len * 2);
}
