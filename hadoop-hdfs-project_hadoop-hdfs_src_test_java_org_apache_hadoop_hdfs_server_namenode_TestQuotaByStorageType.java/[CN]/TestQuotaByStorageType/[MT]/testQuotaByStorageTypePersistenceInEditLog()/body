{
  final String METHOD_NAME=GenericTestUtils.getMethodName();
  final Path testDir=new Path(dir,METHOD_NAME);
  Path createdFile1=new Path(testDir,"created_file1.data");
  dfs.mkdirs(testDir);
  dfs.setStoragePolicy(testDir,HdfsConstants.ONESSD_STORAGE_POLICY_NAME);
  final long SSD_QUOTA=BLOCKSIZE * 4;
  dfs.setQuotaByStorageType(testDir,StorageType.SSD,SSD_QUOTA);
  INode testDirNode=fsdir.getINode4Write(testDir.toString());
  assertTrue(testDirNode.isDirectory());
  assertTrue(testDirNode.isQuotaSet());
  long file1Len=BLOCKSIZE * 2;
  int bufLen=BLOCKSIZE / 16;
  DFSTestUtil.createFile(dfs,createdFile1,bufLen,file1Len,BLOCKSIZE,REPLICATION,seed);
  long ssdConsumed=testDirNode.asDirectory().getDirectoryWithQuotaFeature().getSpaceConsumed().getTypeSpaces().get(StorageType.SSD);
  assertEquals(file1Len,ssdConsumed);
  cluster.restartNameNode(true);
  INode testDirNodeAfterNNRestart=fsdir.getINode4Write(testDir.toString());
  assertTrue(testDirNode.isDirectory());
  assertTrue(testDirNode.isQuotaSet());
  QuotaCounts qc=testDirNodeAfterNNRestart.getQuotaCounts();
  assertEquals(SSD_QUOTA,qc.getTypeSpace(StorageType.SSD));
  for (  StorageType t : StorageType.getTypesSupportingQuota()) {
    if (t != StorageType.SSD) {
      assertEquals(HdfsConstants.QUOTA_RESET,qc.getTypeSpace(t));
    }
  }
  long ssdConsumedAfterNNRestart=testDirNodeAfterNNRestart.asDirectory().getDirectoryWithQuotaFeature().getSpaceConsumed().getTypeSpaces().get(StorageType.SSD);
  assertEquals(file1Len,ssdConsumedAfterNNRestart);
}
