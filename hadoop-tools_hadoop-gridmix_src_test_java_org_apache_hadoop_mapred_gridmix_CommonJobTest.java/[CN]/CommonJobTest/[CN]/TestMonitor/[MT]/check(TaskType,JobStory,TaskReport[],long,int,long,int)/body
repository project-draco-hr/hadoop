{
  long[] runInputRecords=new long[runTasks.length];
  long[] runInputBytes=new long[runTasks.length];
  long[] runOutputRecords=new long[runTasks.length];
  long[] runOutputBytes=new long[runTasks.length];
  long[] specInputRecords=new long[runTasks.length];
  long[] specInputBytes=new long[runTasks.length];
  long[] specOutputRecords=new long[runTasks.length];
  long[] specOutputBytes=new long[runTasks.length];
  for (int i=0; i < runTasks.length; ++i) {
    final TaskInfo specInfo;
    final Counters counters=runTasks[i].getCounters();
switch (type) {
case MAP:
      runInputBytes[i]=counters.findCounter("FileSystemCounters","HDFS_BYTES_READ").getValue() - counters.findCounter(TaskCounter.SPLIT_RAW_BYTES).getValue();
    runInputRecords[i]=(int)counters.findCounter(TaskCounter.MAP_INPUT_RECORDS).getValue();
  runOutputBytes[i]=counters.findCounter(TaskCounter.MAP_OUTPUT_BYTES).getValue();
runOutputRecords[i]=(int)counters.findCounter(TaskCounter.MAP_OUTPUT_RECORDS).getValue();
specInfo=spec.getTaskInfo(TaskType.MAP,i);
specInputRecords[i]=specInfo.getInputRecords();
specInputBytes[i]=specInfo.getInputBytes();
specOutputRecords[i]=specInfo.getOutputRecords();
specOutputBytes[i]=specInfo.getOutputBytes();
LOG.info(String.format(type + " SPEC: %9d -> %9d :: %5d -> %5d\n",specInputBytes[i],specOutputBytes[i],specInputRecords[i],specOutputRecords[i]));
LOG.info(String.format(type + " RUN:  %9d -> %9d :: %5d -> %5d\n",runInputBytes[i],runOutputBytes[i],runInputRecords[i],runOutputRecords[i]));
break;
case REDUCE:
runInputBytes[i]=0;
runInputRecords[i]=(int)counters.findCounter(TaskCounter.REDUCE_INPUT_RECORDS).getValue();
runOutputBytes[i]=counters.findCounter("FileSystemCounters","HDFS_BYTES_WRITTEN").getValue();
runOutputRecords[i]=(int)counters.findCounter(TaskCounter.REDUCE_OUTPUT_RECORDS).getValue();
specInfo=spec.getTaskInfo(TaskType.REDUCE,i);
specInputBytes[i]=0;
specInputRecords[i]=specInfo.getInputRecords();
specOutputRecords[i]=specInfo.getOutputRecords();
specOutputBytes[i]=specInfo.getOutputBytes();
LOG.info(String.format(type + " SPEC: (%9d) -> %9d :: %5d -> %5d\n",specInfo.getInputBytes(),specOutputBytes[i],specInputRecords[i],specOutputRecords[i]));
LOG.info(String.format(type + " RUN:  (%9d) -> %9d :: %5d -> %5d\n",counters.findCounter(TaskCounter.REDUCE_SHUFFLE_BYTES).getValue(),runOutputBytes[i],runInputRecords[i],runOutputRecords[i]));
break;
default :
fail("Unexpected type: " + type);
}
}
Arrays.sort(specInputBytes);
Arrays.sort(runInputBytes);
for (int i=0; i < runTasks.length; ++i) {
assertTrue("Mismatched " + type + " input bytes "+ specInputBytes[i]+ "/"+ runInputBytes[i],eqPlusMinus(runInputBytes[i],specInputBytes[i],extraInputBytes));
}
Arrays.sort(specInputRecords);
Arrays.sort(runInputRecords);
for (int i=0; i < runTasks.length; ++i) {
assertTrue("Mismatched " + type + " input records "+ specInputRecords[i]+ "/"+ runInputRecords[i],eqPlusMinus(runInputRecords[i],specInputRecords[i],extraInputRecords));
}
Arrays.sort(specOutputBytes);
Arrays.sort(runOutputBytes);
for (int i=0; i < runTasks.length; ++i) {
assertTrue("Mismatched " + type + " output bytes "+ specOutputBytes[i]+ "/"+ runOutputBytes[i],eqPlusMinus(runOutputBytes[i],specOutputBytes[i],extraOutputBytes));
}
Arrays.sort(specOutputRecords);
Arrays.sort(runOutputRecords);
for (int i=0; i < runTasks.length; ++i) {
assertTrue("Mismatched " + type + " output records "+ specOutputRecords[i]+ "/"+ runOutputRecords[i],eqPlusMinus(runOutputRecords[i],specOutputRecords[i],extraOutputRecords));
}
}
