{
  try {
    String userApprovedParamS=req.getParameter(ProxyUriUtils.PROXY_APPROVAL_PARAM);
    boolean userWasWarned=false;
    boolean userApproved=Boolean.valueOf(userApprovedParamS);
    boolean securityEnabled=isSecurityEnabled();
    final String remoteUser=req.getRemoteUser();
    final String pathInfo=req.getPathInfo();
    String[] parts=null;
    if (pathInfo != null) {
      parts=pathInfo.split("/",3);
    }
    if (parts == null || parts.length < 2) {
      LOG.warn("{} gave an invalid proxy path {}",remoteUser,pathInfo);
      notFound(resp,"Your path appears to be formatted incorrectly.");
      return;
    }
    String appId=parts[1];
    String rest=parts.length > 2 ? parts[2] : "";
    ApplicationId id=Apps.toAppID(appId);
    if (id == null) {
      LOG.warn("{} attempting to access {} that is invalid",remoteUser,appId);
      notFound(resp,appId + " appears to be formatted incorrectly.");
      return;
    }
    if (securityEnabled) {
      String cookieName=getCheckCookieName(id);
      Cookie[] cookies=req.getCookies();
      if (cookies != null) {
        for (        Cookie c : cookies) {
          if (cookieName.equals(c.getName())) {
            userWasWarned=true;
            userApproved=userApproved || Boolean.valueOf(c.getValue());
            break;
          }
        }
      }
    }
    boolean checkUser=securityEnabled && (!userWasWarned || !userApproved);
    ApplicationReport applicationReport;
    try {
      applicationReport=getApplicationReport(id);
    }
 catch (    ApplicationNotFoundException e) {
      applicationReport=null;
    }
    if (applicationReport == null) {
      LOG.warn("{} attempting to access {} that was not found",remoteUser,id);
      URI toFetch=ProxyUriUtils.getUriFromTrackingPlugins(id,this.trackingUriPlugins);
      if (toFetch != null) {
        ProxyUtils.sendRedirect(req,resp,toFetch.toString());
        return;
      }
      notFound(resp,"Application " + appId + " could not be found, "+ "please try the history server");
      return;
    }
    String original=applicationReport.getOriginalTrackingUrl();
    URI trackingUri;
    if (original == null || original.equals("N/A")) {
      ProxyUtils.sendRedirect(req,resp,StringHelper.pjoin(rmAppPageUrlBase,id.toString()));
      return;
    }
 else {
      if (ProxyUriUtils.getSchemeFromUrl(original).isEmpty()) {
        trackingUri=ProxyUriUtils.getUriFromAMUrl(WebAppUtils.getHttpSchemePrefix(conf),original);
      }
 else {
        trackingUri=new URI(original);
      }
    }
    String runningUser=applicationReport.getUser();
    if (checkUser && !runningUser.equals(remoteUser)) {
      LOG.info("Asking {} if they want to connect to the " + "app master GUI of {} owned by {}",remoteUser,appId,runningUser);
      warnUserPage(resp,ProxyUriUtils.getPathAndQuery(id,rest,req.getQueryString(),true),runningUser,id);
      return;
    }
    List<NameValuePair> queryPairs=URLEncodedUtils.parse(req.getQueryString(),null);
    UriBuilder builder=UriBuilder.fromUri(trackingUri);
    for (    NameValuePair pair : queryPairs) {
      builder.queryParam(pair.getName(),pair.getValue());
    }
    URI toFetch=builder.path(rest).build();
    LOG.info("{} is accessing unchecked {}" + " which is the app master GUI of {} owned by {}",remoteUser,toFetch,appId,runningUser);
switch (applicationReport.getYarnApplicationState()) {
case KILLED:
case FINISHED:
case FAILED:
      ProxyUtils.sendRedirect(req,resp,toFetch.toString());
    return;
default :
}
Cookie c=null;
if (userWasWarned && userApproved) {
  c=makeCheckCookie(id,true);
}
proxyLink(req,resp,toFetch,c,getProxyHost(),method);
}
 catch (URISyntaxException|YarnException e) {
throw new IOException(e);
}
}
