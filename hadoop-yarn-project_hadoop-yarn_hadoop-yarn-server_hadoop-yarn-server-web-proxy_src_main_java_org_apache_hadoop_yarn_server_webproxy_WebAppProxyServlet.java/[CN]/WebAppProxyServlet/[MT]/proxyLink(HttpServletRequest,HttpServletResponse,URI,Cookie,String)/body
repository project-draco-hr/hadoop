{
  DefaultHttpClient client=new DefaultHttpClient();
  client.getParams().setParameter(ClientPNames.COOKIE_POLICY,CookiePolicy.BROWSER_COMPATIBILITY).setBooleanParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS,true);
  InetAddress localAddress=InetAddress.getByName(proxyHost);
  if (LOG.isDebugEnabled()) {
    LOG.debug("local InetAddress for proxy host: {}",localAddress);
  }
  client.getParams().setParameter(ConnRoutePNames.LOCAL_ADDRESS,localAddress);
  HttpGet httpGet=new HttpGet(link);
  @SuppressWarnings("unchecked") Enumeration<String> names=req.getHeaderNames();
  while (names.hasMoreElements()) {
    String name=names.nextElement();
    if (passThroughHeaders.contains(name)) {
      String value=req.getHeader(name);
      if (LOG.isDebugEnabled()) {
        LOG.debug("REQ HEADER: {} : {}",name,value);
      }
      httpGet.setHeader(name,value);
    }
  }
  String user=req.getRemoteUser();
  if (user != null && !user.isEmpty()) {
    httpGet.setHeader("Cookie",PROXY_USER_COOKIE_NAME + "=" + URLEncoder.encode(user,"ASCII"));
  }
  OutputStream out=resp.getOutputStream();
  try {
    HttpResponse httpResp=client.execute(httpGet);
    resp.setStatus(httpResp.getStatusLine().getStatusCode());
    for (    Header header : httpResp.getAllHeaders()) {
      resp.setHeader(header.getName(),header.getValue());
    }
    if (c != null) {
      resp.addCookie(c);
    }
    InputStream in=httpResp.getEntity().getContent();
    if (in != null) {
      IOUtils.copyBytes(in,out,4096,true);
    }
  }
  finally {
    httpGet.releaseConnection();
  }
}
