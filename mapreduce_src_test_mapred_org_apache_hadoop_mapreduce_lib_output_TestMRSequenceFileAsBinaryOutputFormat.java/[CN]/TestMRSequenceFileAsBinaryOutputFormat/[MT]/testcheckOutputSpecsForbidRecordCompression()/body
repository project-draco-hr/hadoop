{
  Job job=Job.getInstance();
  FileSystem fs=FileSystem.getLocal(job.getConfiguration());
  Path outputdir=new Path(System.getProperty("test.build.data","/tmp") + "/output");
  fs.delete(outputdir,true);
  FileOutputFormat.setOutputPath(job,outputdir);
  SequenceFileAsBinaryOutputFormat.setCompressOutput(job,true);
  SequenceFileAsBinaryOutputFormat.setOutputCompressionType(job,CompressionType.BLOCK);
  try {
    new SequenceFileAsBinaryOutputFormat().checkOutputSpecs(job);
  }
 catch (  Exception e) {
    fail("Block compression should be allowed for " + "SequenceFileAsBinaryOutputFormat:Caught " + e.getClass().getName());
  }
  SequenceFileAsBinaryOutputFormat.setOutputCompressionType(job,CompressionType.RECORD);
  try {
    new SequenceFileAsBinaryOutputFormat().checkOutputSpecs(job);
    fail("Record compression should not be allowed for " + "SequenceFileAsBinaryOutputFormat");
  }
 catch (  InvalidJobConfException ie) {
  }
catch (  Exception e) {
    fail("Expected " + InvalidJobConfException.class.getName() + "but caught "+ e.getClass().getName());
  }
}
