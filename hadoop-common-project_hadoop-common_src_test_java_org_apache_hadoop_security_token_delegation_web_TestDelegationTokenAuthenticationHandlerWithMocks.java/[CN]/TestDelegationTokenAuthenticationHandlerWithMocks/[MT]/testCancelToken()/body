{
  DelegationTokenAuthenticator.DelegationTokenOperation op=DelegationTokenAuthenticator.DelegationTokenOperation.CANCELDELEGATIONTOKEN;
  HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
  HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
  Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString());
  Mockito.when(request.getMethod()).thenReturn(op.getHttpMethod());
  Assert.assertFalse(handler.managementOperation(null,request,response));
  Mockito.verify(response).sendError(Mockito.eq(HttpServletResponse.SC_BAD_REQUEST),Mockito.contains("requires the parameter [token]"));
  Mockito.reset(response);
  Token<DelegationTokenIdentifier> token=(Token<DelegationTokenIdentifier>)handler.getTokenManager().createToken(UserGroupInformation.getCurrentUser(),"foo");
  Mockito.when(request.getQueryString()).thenReturn(DelegationTokenAuthenticator.OP_PARAM + "=" + op.toString()+ "&"+ DelegationTokenAuthenticator.TOKEN_PARAM+ "="+ token.encodeToUrlString());
  Assert.assertFalse(handler.managementOperation(null,request,response));
  Mockito.verify(response).setStatus(HttpServletResponse.SC_OK);
  try {
    handler.getTokenManager().verifyToken(token);
    Assert.fail();
  }
 catch (  SecretManager.InvalidToken ex) {
  }
catch (  Throwable ex) {
    Assert.fail();
  }
}
