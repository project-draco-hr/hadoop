{
  Logger rootLogger=LogManager.getRootLogger();
  rootLogger.setLevel(Level.DEBUG);
  final DrainDispatcher dispatcher=new DrainDispatcher();
  MockRM rm=new MockRM(){
    @Override protected EventHandler<SchedulerEvent> createSchedulerEventDispatcher(){
      return new SchedulerEventDispatcher(this.scheduler){
        @Override public void handle(        SchedulerEvent event){
          scheduler.handle(event);
        }
      }
;
    }
    @Override protected Dispatcher createDispatcher(){
      return dispatcher;
    }
  }
;
  rm.start();
  MockNM nm1=rm.registerNode("127.0.0.1:1234",5000);
  RMApp app=rm.submitApp(2000);
  nm1.nodeHeartbeat(true);
  RMAppAttempt attempt=app.getCurrentAppAttempt();
  MockAM am=rm.sendAMLaunched(attempt.getAppAttemptId());
  am.registerAppAttempt();
  int request=2;
  am.allocate("127.0.0.1",1000,request,new ArrayList<ContainerId>());
  dispatcher.await();
  nm1.nodeHeartbeat(true);
  List<Container> conts=am.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
  int contReceived=conts.size();
  int waitCount=0;
  while (contReceived < request && waitCount++ < 200) {
    LOG.info("Got " + contReceived + " containers. Waiting to get "+ request);
    Thread.sleep(100);
    conts=am.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    dispatcher.await();
    contReceived+=conts.size();
    nm1.nodeHeartbeat(true);
  }
  Assert.assertEquals(request,contReceived);
  ArrayList<ContainerId> release=new ArrayList<ContainerId>();
  release.add(conts.get(0).getId());
  am.allocate(new ArrayList<ResourceRequest>(),release);
  dispatcher.await();
  Map<ApplicationId,List<ContainerStatus>> containerStatuses=new HashMap<ApplicationId,List<ContainerStatus>>();
  ArrayList<ContainerStatus> containerStatusList=new ArrayList<ContainerStatus>();
  containerStatusList.add(BuilderUtils.newContainerStatus(conts.get(0).getId(),ContainerState.RUNNING,"nothing",0));
  containerStatuses.put(app.getApplicationId(),containerStatusList);
  NodeHeartbeatResponse resp=nm1.nodeHeartbeat(containerStatuses,true);
  dispatcher.await();
  List<ContainerId> contsToClean=resp.getContainersToCleanup();
  int cleanedConts=contsToClean.size();
  waitCount=0;
  while (cleanedConts < 1 && waitCount++ < 200) {
    LOG.info("Waiting to get cleanup events.. cleanedConts: " + cleanedConts);
    Thread.sleep(100);
    resp=nm1.nodeHeartbeat(true);
    dispatcher.await();
    contsToClean=resp.getContainersToCleanup();
    cleanedConts+=contsToClean.size();
  }
  LOG.info("Got cleanup for " + contsToClean.get(0));
  Assert.assertEquals(1,cleanedConts);
  LOG.info("Testing container launch much after release and " + "NM getting cleanup");
  containerStatuses.clear();
  containerStatusList.clear();
  containerStatusList.add(BuilderUtils.newContainerStatus(conts.get(0).getId(),ContainerState.RUNNING,"nothing",0));
  containerStatuses.put(app.getApplicationId(),containerStatusList);
  resp=nm1.nodeHeartbeat(containerStatuses,true);
  dispatcher.await();
  contsToClean=resp.getContainersToCleanup();
  cleanedConts=contsToClean.size();
  waitCount=0;
  while (cleanedConts < 1 && waitCount++ < 200) {
    LOG.info("Waiting to get cleanup events.. cleanedConts: " + cleanedConts);
    Thread.sleep(100);
    resp=nm1.nodeHeartbeat(true);
    dispatcher.await();
    contsToClean=resp.getContainersToCleanup();
    cleanedConts+=contsToClean.size();
  }
  LOG.info("Got cleanup for " + contsToClean.get(0));
  Assert.assertEquals(1,cleanedConts);
  rm.stop();
}
