{
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,1);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  final DrainDispatcher dispatcher=new DrainDispatcher();
  MockRM rm1=new MockRM(conf,memStore){
    @Override protected Dispatcher createDispatcher(){
      return dispatcher;
    }
  }
;
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app0=rm1.submitApp(200);
  MockAM am0=launchAM(app0,rm1,nm1);
  nm1.nodeHeartbeat(am0.getApplicationAttemptId(),1,ContainerState.RUNNING);
  rm1.waitForState(app0.getApplicationId(),RMAppState.RUNNING);
  final DrainDispatcher dispatcher2=new DrainDispatcher();
  MockRM rm2=new MockRM(conf,memStore){
    @Override protected Dispatcher createDispatcher(){
      return dispatcher2;
    }
  }
;
  rm2.start();
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  nm1.registerNode(Arrays.asList(app0.getApplicationId()));
  rm2.waitForState(app0.getApplicationId(),RMAppState.ACCEPTED);
  NodeHeartbeatResponse response=nm1.nodeHeartbeat(am0.getApplicationAttemptId(),2,ContainerState.RUNNING);
  waitForContainerCleanup(dispatcher2,nm1,response);
  rm1.stop();
  rm2.stop();
}
