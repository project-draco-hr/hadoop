{
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,1);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm1=new MockRM(conf,memStore);
  rm1.start();
  int nmMemory=8192;
  int amMemory=1024;
  int containerMemory=2048;
  MockNM nm1=new MockNM("127.0.0.1:1234",nmMemory,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app0=rm1.submitApp(amMemory);
  MockAM am0=MockRM.launchAndRegisterAM(app0,rm1,nm1);
  int noOfContainers=1;
  List<Container> allocateContainers=am0.allocateAndWaitForContainers(noOfContainers,containerMemory,nm1);
  Assert.assertEquals(noOfContainers,allocateContainers.size());
  Container container=allocateContainers.get(0);
  nm1.nodeHeartbeat(am0.getApplicationAttemptId(),1,ContainerState.RUNNING);
  nm1.nodeHeartbeat(am0.getApplicationAttemptId(),container.getId().getContainerId(),ContainerState.RUNNING);
  rm1.waitForState(app0.getApplicationId(),RMAppState.RUNNING);
  ResourceScheduler rs=rm1.getRMContext().getScheduler();
  long allocatedMB=rs.getRootQueueMetrics().getAllocatedMB();
  Assert.assertEquals(amMemory + containerMemory,allocatedMB);
  List<NMContainerStatus> nMContainerStatusForApp=createNMContainerStatusForApp(am0);
  nm1.registerNode(nMContainerStatusForApp,Arrays.asList(app0.getApplicationId()));
  waitForClusterMemory(nm1,rs,amMemory);
  Assert.assertEquals(amMemory,rs.getRootQueueMetrics().getAllocatedMB());
  AllocateRequest req=AllocateRequest.newInstance(0,0F,new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>(),null);
  AllocateResponse allocate=am0.allocate(req);
  List<ContainerStatus> completedContainersStatuses=allocate.getCompletedContainersStatuses();
  Assert.assertEquals(noOfContainers,completedContainersStatuses.size());
  nm1.nodeHeartbeat(am0.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  waitForClusterMemory(nm1,rs,0);
  rm1.stop();
}
