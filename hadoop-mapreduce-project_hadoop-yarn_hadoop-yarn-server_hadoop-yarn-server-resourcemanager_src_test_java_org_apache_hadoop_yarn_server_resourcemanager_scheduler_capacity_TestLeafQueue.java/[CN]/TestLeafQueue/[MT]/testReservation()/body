{
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
  final String user_0="user_0";
  final String user_1="user_1";
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  SchedulerApp app_0=new SchedulerApp(appAttemptId_0,user_0,a,rmContext,null);
  a.submitApplication(app_0,user_0,A);
  final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
  SchedulerApp app_1=new SchedulerApp(appAttemptId_1,user_1,a,rmContext,null);
  a.submitApplication(app_1,user_1,A);
  String host_0="host_0";
  SchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,4 * GB);
  final int numNodes=1;
  Resource clusterResource=Resources.createResource(numNodes * (4 * GB));
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  Priority priority=TestUtils.createMockPriority(1);
  app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(RMNodeImpl.ANY,1 * GB,2,priority,recordFactory)));
  app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(RMNodeImpl.ANY,4 * GB,1,priority,recordFactory)));
  a.assignContainers(clusterResource,node_0);
  assertEquals(1 * GB,a.getUsedResources().getMemory());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(0,a.getMetrics().getReservedGB());
  assertEquals(1,a.getMetrics().getAllocatedGB());
  assertEquals(0,a.getMetrics().getAvailableGB());
  a.assignContainers(clusterResource,node_0);
  assertEquals(2 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(0,a.getMetrics().getReservedGB());
  assertEquals(2,a.getMetrics().getAllocatedGB());
  a.assignContainers(clusterResource,node_0);
  assertEquals(6 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentReservation().getMemory());
  assertEquals(2 * GB,node_0.getUsedResource().getMemory());
  assertEquals(4,a.getMetrics().getReservedGB());
  assertEquals(2,a.getMetrics().getAllocatedGB());
  a.completedContainer(clusterResource,app_0,node_0,app_0.getLiveContainers().iterator().next(),null,RMContainerEventType.KILL);
  a.assignContainers(clusterResource,node_0);
  assertEquals(5 * GB,a.getUsedResources().getMemory());
  assertEquals(1 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentReservation().getMemory());
  assertEquals(1 * GB,node_0.getUsedResource().getMemory());
  assertEquals(4,a.getMetrics().getReservedGB());
  assertEquals(1,a.getMetrics().getAllocatedGB());
  a.completedContainer(clusterResource,app_0,node_0,app_0.getLiveContainers().iterator().next(),null,RMContainerEventType.KILL);
  a.assignContainers(clusterResource,node_0);
  assertEquals(4 * GB,a.getUsedResources().getMemory());
  assertEquals(0 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentReservation().getMemory());
  assertEquals(4 * GB,node_0.getUsedResource().getMemory());
  assertEquals(0,a.getMetrics().getReservedGB());
  assertEquals(4,a.getMetrics().getAllocatedGB());
}
