{
  daemons=new ArrayList<StatsDaemon>();
  long start=0;
  try {
    numOpsExecuted=0;
    cumulativeTime=0;
    if (numThreads < 1)     return;
    int tIdx=0;
    int opsPerThread[]=new int[numThreads];
    for (int opsScheduled=0; opsScheduled < numOpsRequired; opsScheduled+=opsPerThread[tIdx++]) {
      opsPerThread[tIdx]=(numOpsRequired - opsScheduled) / (numThreads - tIdx);
      if (opsPerThread[tIdx] == 0)       opsPerThread[tIdx]=1;
    }
    for (; tIdx < numThreads; tIdx++)     opsPerThread[tIdx]=0;
    generateInputs(opsPerThread);
    setNameNodeLoggingLevel(logLevel);
    for (tIdx=0; tIdx < numThreads; tIdx++)     daemons.add(new StatsDaemon(tIdx,opsPerThread[tIdx],this));
    start=System.currentTimeMillis();
    LOG.info("Starting " + numOpsRequired + " "+ getOpName()+ "(s).");
    for (    StatsDaemon d : daemons)     d.start();
  }
  finally {
    while (isInPorgress()) {
    }
    elapsedTime=System.currentTimeMillis() - start;
    for (    StatsDaemon d : daemons) {
      incrementStats(d.localNumOpsExecuted,d.localCumulativeTime);
    }
  }
}
