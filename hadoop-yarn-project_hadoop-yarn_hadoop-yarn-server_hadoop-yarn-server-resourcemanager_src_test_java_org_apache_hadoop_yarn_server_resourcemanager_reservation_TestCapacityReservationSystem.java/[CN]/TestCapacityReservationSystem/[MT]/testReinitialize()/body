{
  ReservationSystemTestUtil testUtil=new ReservationSystemTestUtil();
  CapacityScheduler capScheduler=null;
  try {
    capScheduler=testUtil.mockCapacityScheduler(10);
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
  CapacityReservationSystem reservationSystem=new CapacityReservationSystem();
  CapacitySchedulerConfiguration conf=capScheduler.getConfiguration();
  RMContext mockContext=capScheduler.getRMContext();
  reservationSystem.setRMContext(mockContext);
  try {
    reservationSystem.reinitialize(capScheduler.getConfiguration(),mockContext);
  }
 catch (  YarnException e) {
    Assert.fail(e.getMessage());
  }
  String planQName=testUtil.getreservationQueueName();
  ReservationSystemTestUtil.validateReservationQueue(reservationSystem,planQName);
  String newQ="reservation";
  Assert.assertNull(reservationSystem.getPlan(newQ));
  testUtil.updateQueueConfiguration(conf,newQ);
  try {
    capScheduler.reinitialize(conf,mockContext);
  }
 catch (  IOException e) {
    Assert.fail(e.getMessage());
  }
  try {
    reservationSystem.reinitialize(conf,mockContext);
  }
 catch (  YarnException e) {
    Assert.fail(e.getMessage());
  }
  ReservationSystemTestUtil.validateNewReservationQueue(reservationSystem,newQ);
}
