{
  impl=ReflectionUtils.newInstance(conf.getClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,ShellBasedUnixGroupsMapping.class,GroupMappingServiceProvider.class),conf);
  cacheTimeout=conf.getLong(CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_CACHE_SECS,CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_CACHE_SECS_DEFAULT) * 1000;
  negativeCacheTimeout=conf.getLong(CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS,CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_NEGATIVE_CACHE_SECS_DEFAULT) * 1000;
  warningDeltaMs=conf.getLong(CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_CACHE_WARN_AFTER_MS,CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_CACHE_WARN_AFTER_MS_DEFAULT);
  reloadGroupsInBackground=conf.getBoolean(CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD,CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD_DEFAULT);
  reloadGroupsThreadCount=conf.getInt(CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD_THREADS,CommonConfigurationKeys.HADOOP_SECURITY_GROUPS_CACHE_BACKGROUND_RELOAD_THREADS_DEFAULT);
  parseStaticMapping(conf);
  this.timer=timer;
  this.cache=CacheBuilder.newBuilder().refreshAfterWrite(cacheTimeout,TimeUnit.MILLISECONDS).ticker(new TimerToTickerAdapter(timer)).expireAfterWrite(10 * cacheTimeout,TimeUnit.MILLISECONDS).build(new GroupCacheLoader());
  if (negativeCacheTimeout > 0) {
    Cache<String,Boolean> tempMap=CacheBuilder.newBuilder().expireAfterWrite(negativeCacheTimeout,TimeUnit.MILLISECONDS).ticker(new TimerToTickerAdapter(timer)).build();
    negativeCache=Collections.newSetFromMap(tempMap.asMap());
  }
  if (LOG.isDebugEnabled())   LOG.debug("Group mapping impl=" + impl.getClass().getName() + "; cacheTimeout="+ cacheTimeout+ "; warningDeltaMs="+ warningDeltaMs);
}
