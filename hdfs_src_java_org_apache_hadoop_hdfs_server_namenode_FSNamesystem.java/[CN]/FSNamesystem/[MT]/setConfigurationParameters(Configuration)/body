{
  fsOwner=UserGroupInformation.getCurrentUser();
  LOG.info("fsOwner=" + fsOwner);
  this.supergroup=conf.get(DFSConfigKeys.DFS_PERMISSIONS_SUPERUSERGROUP_KEY,DFSConfigKeys.DFS_PERMISSIONS_SUPERUSERGROUP_DEFAULT);
  this.isPermissionEnabled=conf.getBoolean(DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY,DFSConfigKeys.DFS_PERMISSIONS_ENABLED_DEFAULT);
  LOG.info("supergroup=" + supergroup);
  LOG.info("isPermissionEnabled=" + isPermissionEnabled);
  short filePermission=(short)conf.getInt(DFSConfigKeys.DFS_NAMENODE_UPGRADE_PERMISSION_KEY,DFSConfigKeys.DFS_NAMENODE_UPGRADE_PERMISSION_DEFAULT);
  this.defaultPermission=PermissionStatus.createImmutable(fsOwner.getShortUserName(),supergroup,new FsPermission(filePermission));
  long heartbeatInterval=conf.getLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT) * 1000;
  this.heartbeatRecheckInterval=conf.getInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT);
  this.heartbeatExpireInterval=2 * heartbeatRecheckInterval + 10 * heartbeatInterval;
  this.serverDefaults=new FsServerDefaults(conf.getLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DEFAULT_BLOCK_SIZE),conf.getInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,DEFAULT_BYTES_PER_CHECKSUM),conf.getInt(DFSConfigKeys.DFS_CLIENT_WRITE_PACKET_SIZE_KEY,DEFAULT_WRITE_PACKET_SIZE),(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,DEFAULT_REPLICATION_FACTOR),conf.getInt("io.file.buffer.size",DEFAULT_FILE_BUFFER_SIZE));
  this.maxFsObjects=conf.getLong(DFSConfigKeys.DFS_NAMENODE_MAX_OBJECTS_KEY,DFSConfigKeys.DFS_NAMENODE_MAX_OBJECTS_DEFAULT);
  this.blockInvalidateLimit=Math.max(this.blockInvalidateLimit,20 * (int)(heartbeatInterval / 1000));
  this.blockInvalidateLimit=conf.getInt(DFSConfigKeys.DFS_BLOCK_INVALIDATE_LIMIT_KEY,this.blockInvalidateLimit);
  LOG.info(DFSConfigKeys.DFS_BLOCK_INVALIDATE_LIMIT_KEY + "=" + this.blockInvalidateLimit);
  this.accessTimePrecision=conf.getLong(DFSConfigKeys.DFS_NAMENODE_ACCESSTIME_PRECISION_KEY,0);
  this.supportAppends=conf.getBoolean(DFSConfigKeys.DFS_SUPPORT_APPEND_KEY,DFSConfigKeys.DFS_SUPPORT_APPEND_DEFAULT);
  this.isBlockTokenEnabled=conf.getBoolean(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY,DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT);
  if (isBlockTokenEnabled) {
    this.blockKeyUpdateInterval=conf.getLong(DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY,DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_DEFAULT) * 60 * 1000L;
    this.blockTokenLifetime=conf.getLong(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY,DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_DEFAULT) * 60 * 1000L;
  }
  LOG.info("isBlockTokenEnabled=" + isBlockTokenEnabled + " blockKeyUpdateInterval="+ blockKeyUpdateInterval / (60 * 1000) + " min(s), blockTokenLifetime=" + blockTokenLifetime / (60 * 1000) + " min(s)");
  this.dtpReplaceDatanodeOnFailure=ReplaceDatanodeOnFailure.get(conf);
}
