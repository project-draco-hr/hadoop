{
  readLock();
  try {
    checkSuperuserPrivilege();
    DatanodeDescriptor node=getDatanode(datanode);
    if (node == null) {
      NameNode.stateChangeLog.warn("BLOCK* NameSystem.getBlocks: " + "Asking for blocks from an unrecorded node " + datanode.getName());
      throw new IllegalArgumentException("Unexpected exception.  Got getBlocks message for datanode " + datanode.getName() + ", but there is no info for it");
    }
    int numBlocks=node.numBlocks();
    if (numBlocks == 0) {
      return new BlocksWithLocations(new BlockWithLocations[0]);
    }
    Iterator<BlockInfo> iter=node.getBlockIterator();
    int startBlock=r.nextInt(numBlocks);
    for (int i=0; i < startBlock; i++) {
      iter.next();
    }
    List<BlockWithLocations> results=new ArrayList<BlockWithLocations>();
    long totalSize=0;
    BlockInfo curBlock;
    while (totalSize < size && iter.hasNext()) {
      curBlock=iter.next();
      if (!curBlock.isComplete())       continue;
      totalSize+=addBlock(curBlock,results);
    }
    if (totalSize < size) {
      iter=node.getBlockIterator();
      for (int i=0; i < startBlock && totalSize < size; i++) {
        curBlock=iter.next();
        if (!curBlock.isComplete())         continue;
        totalSize+=addBlock(curBlock,results);
      }
    }
    return new BlocksWithLocations(results.toArray(new BlockWithLocations[results.size()]));
  }
  finally {
    readUnlock();
  }
}
