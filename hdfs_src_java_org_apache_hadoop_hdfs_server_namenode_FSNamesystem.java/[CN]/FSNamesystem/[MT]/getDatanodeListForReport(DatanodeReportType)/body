{
  readLock();
  try {
    boolean listLiveNodes=type == DatanodeReportType.ALL || type == DatanodeReportType.LIVE;
    boolean listDeadNodes=type == DatanodeReportType.ALL || type == DatanodeReportType.DEAD;
    HashMap<String,String> mustList=new HashMap<String,String>();
    if (listDeadNodes) {
      Iterator<String> it=hostsReader.getHosts().iterator();
      while (it.hasNext()) {
        mustList.put(it.next(),"");
      }
      it=hostsReader.getExcludedHosts().iterator();
      while (it.hasNext()) {
        mustList.put(it.next(),"");
      }
    }
    ArrayList<DatanodeDescriptor> nodes=null;
synchronized (datanodeMap) {
      nodes=new ArrayList<DatanodeDescriptor>(datanodeMap.size() + mustList.size());
      Iterator<DatanodeDescriptor> it=datanodeMap.values().iterator();
      while (it.hasNext()) {
        DatanodeDescriptor dn=it.next();
        boolean isDead=isDatanodeDead(dn);
        if ((isDead && listDeadNodes) || (!isDead && listLiveNodes)) {
          nodes.add(dn);
        }
        mustList.remove(dn.getName());
        mustList.remove(dn.getHost());
        mustList.remove(dn.getHostName());
      }
    }
    if (listDeadNodes) {
      Iterator<String> it=mustList.keySet().iterator();
      while (it.hasNext()) {
        DatanodeDescriptor dn=new DatanodeDescriptor(new DatanodeID(it.next()));
        dn.setLastUpdate(0);
        nodes.add(dn);
      }
    }
    return nodes;
  }
  finally {
    readUnlock();
  }
}
