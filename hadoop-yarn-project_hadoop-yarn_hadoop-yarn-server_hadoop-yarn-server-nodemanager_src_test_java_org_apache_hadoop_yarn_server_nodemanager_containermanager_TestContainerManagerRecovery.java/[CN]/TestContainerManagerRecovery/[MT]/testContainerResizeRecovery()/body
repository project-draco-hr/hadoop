{
  conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED,true);
  conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED,true);
  NMStateStoreService stateStore=new NMMemoryStateStoreService();
  stateStore.init(conf);
  stateStore.start();
  Context context=createContext(conf,stateStore);
  ContainerManagerImpl cm=createContainerManager(context,delSrvc);
  cm.init(conf);
  cm.start();
  ApplicationId appId=ApplicationId.newInstance(0,1);
  ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId cid=ContainerId.newContainerId(attemptId,1);
  Map<String,String> containerEnv=Collections.emptyMap();
  Map<String,ByteBuffer> serviceData=Collections.emptyMap();
  Credentials containerCreds=new Credentials();
  DataOutputBuffer dob=new DataOutputBuffer();
  containerCreds.writeTokenStorageToStream(dob);
  ByteBuffer containerTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  Map<ApplicationAccessType,String> acls=Collections.emptyMap();
  File tmpDir=new File("target",this.getClass().getSimpleName() + "-tmpDir");
  File scriptFile=Shell.appendScriptExtension(tmpDir,"scriptFile");
  PrintWriter fileWriter=new PrintWriter(scriptFile);
  if (Shell.WINDOWS) {
    fileWriter.println("@ping -n 100 127.0.0.1 >nul");
  }
 else {
    fileWriter.write("\numask 0");
    fileWriter.write("\nexec sleep 100");
  }
  fileWriter.close();
  FileContext localFS=FileContext.getLocalFSFileContext();
  URL resource_alpha=ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));
  LocalResource rsrc_alpha=RecordFactoryProvider.getRecordFactory(null).newRecordInstance(LocalResource.class);
  rsrc_alpha.setResource(resource_alpha);
  rsrc_alpha.setSize(-1);
  rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);
  rsrc_alpha.setType(LocalResourceType.FILE);
  rsrc_alpha.setTimestamp(scriptFile.lastModified());
  String destinationFile="dest_file";
  Map<String,LocalResource> localResources=new HashMap<>();
  localResources.put(destinationFile,rsrc_alpha);
  List<String> commands=Arrays.asList(Shell.getRunScriptCommand(scriptFile));
  ContainerLaunchContext clc=ContainerLaunchContext.newInstance(localResources,containerEnv,commands,serviceData,containerTokens,acls);
  StartContainersResponse startResponse=startContainer(context,cm,cid,clc,null);
  assertTrue(startResponse.getFailedRequests().isEmpty());
  assertEquals(1,context.getApplications().size());
  Application app=context.getApplications().get(appId);
  assertNotNull(app);
  waitForNMContainerState(cm,cid,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING);
  Resource targetResource=Resource.newInstance(2048,2);
  IncreaseContainersResourceResponse increaseResponse=increaseContainersResource(context,cm,cid,targetResource);
  assertTrue(increaseResponse.getFailedRequests().isEmpty());
  ContainerStatus containerStatus=getContainerStatus(context,cm,cid);
  assertEquals(targetResource,containerStatus.getCapability());
  cm.stop();
  context=createContext(conf,stateStore);
  cm=createContainerManager(context);
  cm.init(conf);
  cm.start();
  assertEquals(1,context.getApplications().size());
  app=context.getApplications().get(appId);
  assertNotNull(app);
  containerStatus=getContainerStatus(context,cm,cid);
  assertEquals(targetResource,containerStatus.getCapability());
}
