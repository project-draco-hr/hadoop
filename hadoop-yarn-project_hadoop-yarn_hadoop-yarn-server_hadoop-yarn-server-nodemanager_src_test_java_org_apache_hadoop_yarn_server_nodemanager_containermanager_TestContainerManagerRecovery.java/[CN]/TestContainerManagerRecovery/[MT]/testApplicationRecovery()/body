{
  YarnConfiguration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED,true);
  conf.setBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED,true);
  conf.set(YarnConfiguration.NM_ADDRESS,"localhost:1234");
  conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE,true);
  conf.set(YarnConfiguration.YARN_ADMIN_ACL,"yarn_admin_user");
  NMStateStoreService stateStore=new NMMemoryStateStoreService();
  stateStore.init(conf);
  stateStore.start();
  Context context=createContext(conf,stateStore);
  ContainerManagerImpl cm=createContainerManager(context);
  cm.init(conf);
  cm.start();
  String appUser="app_user1";
  String modUser="modify_user1";
  String viewUser="view_user1";
  String enemyUser="enemy_user";
  ApplicationId appId=ApplicationId.newInstance(0,1);
  ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId cid=ContainerId.newContainerId(attemptId,1);
  Map<String,LocalResource> localResources=Collections.emptyMap();
  Map<String,String> containerEnv=Collections.emptyMap();
  List<String> containerCmds=Collections.emptyList();
  Map<String,ByteBuffer> serviceData=Collections.emptyMap();
  Credentials containerCreds=new Credentials();
  DataOutputBuffer dob=new DataOutputBuffer();
  containerCreds.writeTokenStorageToStream(dob);
  ByteBuffer containerTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  Map<ApplicationAccessType,String> acls=new HashMap<ApplicationAccessType,String>();
  acls.put(ApplicationAccessType.MODIFY_APP,modUser);
  acls.put(ApplicationAccessType.VIEW_APP,viewUser);
  ContainerLaunchContext clc=ContainerLaunchContext.newInstance(localResources,containerEnv,containerCmds,serviceData,containerTokens,acls);
  LogAggregationContext logAggregationContext=LogAggregationContext.newInstance("includePattern","excludePattern","includePatternInRollingAggregation","excludePatternInRollingAggregation");
  StartContainersResponse startResponse=startContainer(context,cm,cid,clc,logAggregationContext);
  assertTrue(startResponse.getFailedRequests().isEmpty());
  assertEquals(1,context.getApplications().size());
  Application app=context.getApplications().get(appId);
  assertNotNull(app);
  waitForAppState(app,ApplicationState.INITING);
  assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser),ApplicationAccessType.MODIFY_APP,appUser,appId));
  assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser),ApplicationAccessType.MODIFY_APP,appUser,appId));
  assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser),ApplicationAccessType.VIEW_APP,appUser,appId));
  assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser),ApplicationAccessType.VIEW_APP,appUser,appId));
  cm.stop();
  context=createContext(conf,stateStore);
  cm=createContainerManager(context);
  cm.init(conf);
  cm.start();
  assertEquals(1,context.getApplications().size());
  app=context.getApplications().get(appId);
  assertNotNull(app);
  LogAggregationContext recovered=((ApplicationImpl)app).getLogAggregationContext();
  assertNotNull(recovered);
  assertEquals(logAggregationContext.getIncludePattern(),recovered.getIncludePattern());
  assertEquals(logAggregationContext.getExcludePattern(),recovered.getExcludePattern());
  assertEquals(logAggregationContext.getRolledLogsIncludePattern(),recovered.getRolledLogsIncludePattern());
  assertEquals(logAggregationContext.getRolledLogsExcludePattern(),recovered.getRolledLogsExcludePattern());
  waitForAppState(app,ApplicationState.INITING);
  assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser),ApplicationAccessType.MODIFY_APP,appUser,appId));
  assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser),ApplicationAccessType.MODIFY_APP,appUser,appId));
  assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser),ApplicationAccessType.VIEW_APP,appUser,appId));
  assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser),ApplicationAccessType.VIEW_APP,appUser,appId));
  List<ApplicationId> finishedApps=new ArrayList<ApplicationId>();
  finishedApps.add(appId);
  cm.handle(new CMgrCompletedAppsEvent(finishedApps,CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER));
  waitForAppState(app,ApplicationState.APPLICATION_RESOURCES_CLEANINGUP);
  cm.stop();
  context=createContext(conf,stateStore);
  cm=createContainerManager(context);
  cm.init(conf);
  cm.start();
  assertEquals(1,context.getApplications().size());
  app=context.getApplications().get(appId);
  assertNotNull(app);
  waitForAppState(app,ApplicationState.APPLICATION_RESOURCES_CLEANINGUP);
  assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(modUser),ApplicationAccessType.MODIFY_APP,appUser,appId));
  assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser),ApplicationAccessType.MODIFY_APP,appUser,appId));
  assertTrue(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(viewUser),ApplicationAccessType.VIEW_APP,appUser,appId));
  assertFalse(context.getApplicationACLsManager().checkAccess(UserGroupInformation.createRemoteUser(enemyUser),ApplicationAccessType.VIEW_APP,appUser,appId));
  app.handle(new ApplicationEvent(app.getAppId(),ApplicationEventType.APPLICATION_RESOURCES_CLEANEDUP));
  assertEquals(app.getApplicationState(),ApplicationState.FINISHED);
  app.handle(new ApplicationEvent(app.getAppId(),ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED));
  cm.stop();
  context=createContext(conf,stateStore);
  cm=createContainerManager(context);
  cm.init(conf);
  cm.start();
  assertTrue(context.getApplications().isEmpty());
  cm.stop();
}
