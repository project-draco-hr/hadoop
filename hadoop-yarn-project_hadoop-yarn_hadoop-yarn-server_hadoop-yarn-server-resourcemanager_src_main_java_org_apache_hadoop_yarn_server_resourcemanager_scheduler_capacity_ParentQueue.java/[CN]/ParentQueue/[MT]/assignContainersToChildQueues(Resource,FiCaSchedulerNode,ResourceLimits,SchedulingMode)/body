{
  CSAssignment assignment=CSAssignment.NULL_ASSIGNMENT;
  Resource parentLimits=limits.getLimit();
  printChildQueues();
  for (Iterator<CSQueue> iter=sortAndGetChildrenAllocationIterator(node); iter.hasNext(); ) {
    CSQueue childQueue=iter.next();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Trying to assign to queue: " + childQueue.getQueuePath() + " stats: "+ childQueue);
    }
    ResourceLimits childLimits=getResourceLimitsOfChild(childQueue,cluster,parentLimits,node.getPartition());
    CSAssignment childAssignment=childQueue.assignContainers(cluster,node,childLimits,schedulingMode);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Assigned to queue: " + childQueue.getQueuePath() + " stats: "+ childQueue+ " --> "+ childAssignment.getResource()+ ", "+ childAssignment.getType());
    }
    if (Resources.greaterThan(resourceCalculator,cluster,childAssignment.getResource(),Resources.none())) {
      if (RMNodeLabelsManager.NO_LABEL.equals(node.getPartition())) {
        iter.remove();
        LOG.info("Re-sorting assigned queue: " + childQueue.getQueuePath() + " stats: "+ childQueue);
        childQueues.add(childQueue);
        if (LOG.isDebugEnabled()) {
          printChildQueues();
        }
      }
      assignment=childAssignment;
      break;
    }
 else     if (childAssignment.getSkippedType() == CSAssignment.SkippedType.QUEUE_LIMIT) {
      if (assignment.getSkippedType() != CSAssignment.SkippedType.QUEUE_LIMIT) {
        assignment=childAssignment;
      }
      Resource resourceToSubtract=Resources.max(resourceCalculator,cluster,childLimits.getHeadroom(),Resources.none());
      if (LOG.isDebugEnabled()) {
        LOG.debug("Decrease parentLimits " + parentLimits + " for "+ this.getQueueName()+ " by "+ resourceToSubtract+ " as childQueue="+ childQueue.getQueueName()+ " is blocked");
      }
      parentLimits=Resources.subtract(parentLimits,resourceToSubtract);
    }
  }
  return assignment;
}
