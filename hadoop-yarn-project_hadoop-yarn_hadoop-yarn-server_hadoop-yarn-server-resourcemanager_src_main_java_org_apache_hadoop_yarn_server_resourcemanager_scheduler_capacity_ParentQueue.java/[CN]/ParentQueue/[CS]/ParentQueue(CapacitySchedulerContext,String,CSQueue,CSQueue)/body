{
  minimumAllocation=cs.getMinimumResourceCapability();
  this.parent=parent;
  this.queueName=queueName;
  this.rootQueue=(parent == null);
  this.resourceCalculator=cs.getResourceCalculator();
  this.metrics=old != null ? old.getMetrics() : QueueMetrics.forQueue(getQueuePath(),parent,cs.getConfiguration().getEnableUserMetrics(),cs.getConf());
  float rawCapacity=cs.getConfiguration().getCapacity(getQueuePath());
  if (rootQueue && (rawCapacity != CapacitySchedulerConfiguration.MAXIMUM_CAPACITY_VALUE)) {
    throw new IllegalArgumentException("Illegal " + "capacity of " + rawCapacity + " for queue "+ queueName+ ". Must be "+ CapacitySchedulerConfiguration.MAXIMUM_CAPACITY_VALUE);
  }
  float capacity=(float)rawCapacity / 100;
  float parentAbsoluteCapacity=(rootQueue) ? 1.0f : parent.getAbsoluteCapacity();
  float absoluteCapacity=parentAbsoluteCapacity * capacity;
  float maximumCapacity=(float)cs.getConfiguration().getMaximumCapacity(getQueuePath()) / 100;
  float absoluteMaxCapacity=CSQueueUtils.computeAbsoluteMaximumCapacity(maximumCapacity,parent);
  QueueState state=cs.getConfiguration().getState(getQueuePath());
  Map<QueueACL,AccessControlList> acls=cs.getConfiguration().getAcls(getQueuePath());
  this.queueInfo=recordFactory.newRecordInstance(QueueInfo.class);
  this.queueInfo.setQueueName(queueName);
  this.queueInfo.setChildQueues(new ArrayList<QueueInfo>());
  setupQueueConfigs(cs.getClusterResource(),capacity,absoluteCapacity,maximumCapacity,absoluteMaxCapacity,state,acls);
  this.queueComparator=cs.getQueueComparator();
  this.childQueues=new TreeSet<CSQueue>(queueComparator);
  LOG.info("Initialized parent-queue " + queueName + " name="+ queueName+ ", fullname="+ getQueuePath());
}
