{
  Job job=Job.getInstance(getConf());
  job.setJarByClass(TimelineServicePerformanceV2.class);
  job.setMapperClass(SimpleEntityWriter.class);
  job.setInputFormatClass(SleepInputFormat.class);
  job.setOutputFormatClass(NullOutputFormat.class);
  job.setNumReduceTasks(0);
  if (!parseArgs(args,job)) {
    return -1;
  }
  Configuration conf=job.getConfiguration();
  conf.setLong(TIMELINE_SERVICE_PERFORMANCE_RUN_ID,System.currentTimeMillis());
  Date startTime=new Date();
  System.out.println("Job started: " + startTime);
  int ret=job.waitForCompletion(true) ? 0 : 1;
  org.apache.hadoop.mapreduce.Counters counters=job.getCounters();
  long writetime=counters.findCounter(PerfCounters.TIMELINE_SERVICE_WRITE_TIME).getValue();
  long writecounts=counters.findCounter(PerfCounters.TIMELINE_SERVICE_WRITE_COUNTER).getValue();
  long writesize=counters.findCounter(PerfCounters.TIMELINE_SERVICE_WRITE_KBS).getValue();
  double transacrate=writecounts * 1000 / (double)writetime;
  double iorate=writesize * 1000 / (double)writetime;
  int numMaps=Integer.parseInt(conf.get(MRJobConfig.NUM_MAPS));
  System.out.println("TRANSACTION RATE (per mapper): " + transacrate + " ops/s");
  System.out.println("IO RATE (per mapper): " + iorate + " KB/s");
  System.out.println("TRANSACTION RATE (total): " + transacrate * numMaps + " ops/s");
  System.out.println("IO RATE (total): " + iorate * numMaps + " KB/s");
  return ret;
}
