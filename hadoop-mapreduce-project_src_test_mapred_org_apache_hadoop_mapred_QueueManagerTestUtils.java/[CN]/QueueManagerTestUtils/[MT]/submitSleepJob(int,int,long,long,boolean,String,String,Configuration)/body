{
  clientConf.set(MRConfig.FRAMEWORK_NAME,MRConfig.CLASSIC_FRAMEWORK_NAME);
  clientConf.set(JTConfig.JT_IPC_ADDRESS,"localhost:" + miniMRCluster.getJobTrackerPort());
  UserGroupInformation ugi;
  if (userInfo != null) {
    String[] splits=userInfo.split(",");
    String[] groups=new String[splits.length - 1];
    System.arraycopy(splits,1,groups,0,splits.length - 1);
    ugi=UserGroupInformation.createUserForTesting(splits[0],groups);
  }
 else {
    ugi=UserGroupInformation.getCurrentUser();
  }
  if (queueName != null) {
    clientConf.set(JobContext.QUEUE_NAME,queueName);
  }
  final SleepJob sleep=new SleepJob();
  sleep.setConf(clientConf);
  Job job=ugi.doAs(new PrivilegedExceptionAction<Job>(){
    public Job run() throws IOException {
      return sleep.createJob(numMappers,numReducers,mapSleepTime,(int)mapSleepTime,reduceSleepTime,(int)reduceSleepTime);
    }
  }
);
  if (shouldComplete) {
    job.waitForCompletion(false);
  }
 else {
    job.submit();
    Cluster cluster=new Cluster(miniMRCluster.createJobConf());
    JobStatus[] status=miniMRCluster.getJobTrackerRunner().getJobTracker().jobsToComplete();
    JobID id=status[status.length - 1].getJobID();
    Job newJob=cluster.getJob(id);
    cluster.close();
    return newJob;
  }
  return job;
}
