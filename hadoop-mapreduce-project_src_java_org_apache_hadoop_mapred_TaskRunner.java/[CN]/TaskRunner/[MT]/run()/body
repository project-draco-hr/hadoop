{
  String errorInfo="Child Error";
  try {
    TaskAttemptID taskid=t.getTaskID();
    final LocalDirAllocator lDirAlloc=new LocalDirAllocator(MRConfig.LOCAL_DIR);
    final File workDir=formWorkDir(lDirAlloc,taskid,t.isTaskCleanupTask(),conf);
    tip.getUGI().doAs(new PrivilegedExceptionAction<Void>(){
      public Void run() throws IOException {
        taskDistributedCacheManager=tracker.getTrackerDistributedCacheManager().newTaskDistributedCacheManager(conf);
        taskDistributedCacheManager.setup(lDirAlloc,workDir,TaskTracker.getPrivateDistributedCacheDir(conf.getUser()),TaskTracker.getPublicDistributedCacheDir());
        return null;
      }
    }
);
    setupChildTaskConfiguration(lDirAlloc);
    List<String> classPaths=getClassPaths(conf,workDir,taskDistributedCacheManager);
    long logSize=TaskLog.getTaskLogLength(conf);
    Vector<String> vargs=getVMArgs(taskid,workDir,classPaths,logSize);
    tracker.addToMemoryManager(t.getTaskID(),t.isMapTask(),conf);
    List<String> setup=getVMSetupCmd();
    File[] logFiles=prepareLogFiles(taskid,t.isTaskCleanupTask());
    File stdout=logFiles[0];
    File stderr=logFiles[1];
    tracker.getTaskTrackerInstrumentation().reportTaskLaunch(taskid,stdout,stderr);
    Map<String,String> env=new HashMap<String,String>();
    errorInfo=getVMEnvironment(errorInfo,workDir,conf,env,taskid,logSize);
    launchJvmAndWait(setup,vargs,stdout,stderr,logSize,workDir,env);
    tracker.getTaskTrackerInstrumentation().reportTaskEnd(t.getTaskID());
    if (exitCodeSet) {
      if (!killed && exitCode != 0) {
        if (exitCode == 65) {
          tracker.getTaskTrackerInstrumentation().taskFailedPing(t.getTaskID());
        }
        throw new IOException("Task process exit with nonzero status of " + exitCode + ".");
      }
    }
  }
 catch (  FSError e) {
    LOG.fatal("FSError",e);
    try {
      tracker.internalFsError(t.getTaskID(),e.getMessage());
    }
 catch (    IOException ie) {
      LOG.fatal(t.getTaskID() + " reporting FSError",ie);
    }
  }
catch (  Throwable throwable) {
    LOG.warn(t.getTaskID() + " : " + errorInfo,throwable);
    Throwable causeThrowable=new Throwable(errorInfo,throwable);
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    causeThrowable.printStackTrace(new PrintStream(baos));
    try {
      tracker.internalReportDiagnosticInfo(t.getTaskID(),baos.toString());
    }
 catch (    IOException e) {
      LOG.warn(t.getTaskID() + " Reporting Diagnostics",e);
    }
  }
 finally {
    try {
      if (taskDistributedCacheManager != null) {
        taskDistributedCacheManager.release();
      }
    }
 catch (    IOException ie) {
      LOG.warn("Error releasing caches : Cache files might not have been cleaned up");
    }
    tip.reportTaskFinished(false);
  }
}
