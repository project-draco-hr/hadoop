{
  JobConf job=new JobConf(conf);
  dfs=newDFSCluster(job);
  FileSystem fs=dfs.getFileSystem();
  System.out.println("FileSystem " + fs.getUri());
  Path inputDir=new Path("/foo/");
  String fileName="part-0000";
  createInputs(fs,inputDir,fileName);
  TextInputFormat.addInputPath(job,inputDir);
  TextInputFormat inFormat=new TextInputFormat();
  inFormat.configure(job);
  InputSplit[] splits=inFormat.getSplits(job,1);
  FileStatus fileStatus=fs.getFileStatus(new Path(inputDir,fileName));
  BlockLocation[] locations=fs.getFileBlockLocations(fileStatus,0,fileStatus.getLen());
  System.out.println("Made splits");
  for (int i=0; i < splits.length; ++i) {
    FileSplit fileSplit=(FileSplit)splits[i];
    System.out.println("File split: " + fileSplit);
    for (    String h : fileSplit.getLocations()) {
      System.out.println("Location: " + h);
    }
    System.out.println("Block: " + locations[i]);
    assertEquals(locations[i].getOffset(),fileSplit.getStart());
    assertEquals(locations[i].getLength(),fileSplit.getLength());
    String[] blockLocs=locations[i].getHosts();
    String[] splitLocs=fileSplit.getLocations();
    assertEquals(2,blockLocs.length);
    assertEquals(2,splitLocs.length);
    assertTrue((blockLocs[0].equals(splitLocs[0]) && blockLocs[1].equals(splitLocs[1])) || (blockLocs[1].equals(splitLocs[0]) && blockLocs[0].equals(splitLocs[1])));
  }
  assertEquals("Expected value of " + FileInputFormat.NUM_INPUT_FILES,1,job.getLong(FileInputFormat.NUM_INPUT_FILES,0));
}
