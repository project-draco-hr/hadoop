{
  if (argv.length < 1) {
    printUsage("");
    return -1;
  }
  int exitCode=-1;
  int i=0;
  String cmd=argv[i++];
  if ("-showConfig".equals(cmd)) {
    if (argv.length < 1) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-recover".equals(cmd)) {
    if (argv.length < 3) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-fsck".equals(cmd)) {
    if ((argv.length < 1) || (argv.length > 2)) {
      printUsage(cmd);
      return exitCode;
    }
  }
  try {
    if ("-showConfig".equals(cmd)) {
      initializeRpc(conf,RaidNode.getAddress(conf));
      exitCode=showConfig(cmd,argv,i);
    }
 else     if ("-recover".equals(cmd)) {
      initializeRpc(conf,RaidNode.getAddress(conf));
      exitCode=recoverAndPrint(cmd,argv,i);
    }
 else     if ("-recoverBlocks".equals(cmd)) {
      initializeLocal(conf);
      recoverBlocks(argv,i);
      exitCode=0;
    }
 else     if ("-fsck".equals(cmd)) {
      if (argv.length == 1) {
        exitCode=fsck("/");
      }
 else {
        exitCode=fsck(argv[1]);
      }
    }
 else {
      exitCode=-1;
      System.err.println(cmd.substring(1) + ": Unknown command");
      printUsage("");
    }
  }
 catch (  IllegalArgumentException arge) {
    exitCode=-1;
    System.err.println(cmd.substring(1) + ": " + arge.getLocalizedMessage());
    printUsage(cmd);
  }
catch (  RemoteException e) {
    exitCode=-1;
    try {
      String[] content;
      content=e.getLocalizedMessage().split("\n");
      System.err.println(cmd.substring(1) + ": " + content[0]);
    }
 catch (    Exception ex) {
      System.err.println(cmd.substring(1) + ": " + ex.getLocalizedMessage());
    }
  }
catch (  IOException e) {
    exitCode=-1;
    System.err.println(cmd.substring(1) + ": " + e.getLocalizedMessage());
  }
catch (  Exception re) {
    exitCode=-1;
    System.err.println(cmd.substring(1) + ": " + re.getLocalizedMessage());
  }
 finally {
  }
  return exitCode;
}
