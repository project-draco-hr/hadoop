{
  StringBuilder excludeHosts=new StringBuilder();
  if (isLegacyHostsFile) {
    if (maintenanceHosts != null && maintenanceHosts.size() > 0) {
      throw new UnsupportedOperationException("maintenance support isn't supported by legacy hosts file");
    }
    for (    String hostNameAndPort : decommissionHostNameAndPorts) {
      excludeHosts.append(hostNameAndPort).append("\n");
    }
    DFSTestUtil.writeFile(localFileSys,excludeFile,excludeHosts.toString());
  }
 else {
    HashSet<DatanodeAdminProperties> allDNs=new HashSet<>();
    if (decommissionHostNameAndPorts != null) {
      for (      String hostNameAndPort : decommissionHostNameAndPorts) {
        DatanodeAdminProperties dn=new DatanodeAdminProperties();
        String[] hostAndPort=hostNameAndPort.split(":");
        dn.setHostName(hostAndPort[0]);
        dn.setPort(Integer.parseInt(hostAndPort[1]));
        dn.setAdminState(AdminStates.DECOMMISSIONED);
        allDNs.add(dn);
      }
    }
    if (maintenanceHosts != null) {
      for (      Map.Entry<String,Long> hostEntry : maintenanceHosts.entrySet()) {
        DatanodeAdminProperties dn=new DatanodeAdminProperties();
        String[] hostAndPort=hostEntry.getKey().split(":");
        dn.setHostName(hostAndPort[0]);
        dn.setPort(Integer.parseInt(hostAndPort[1]));
        dn.setAdminState(AdminStates.IN_MAINTENANCE);
        dn.setMaintenanceExpireTimeInMS(hostEntry.getValue());
        allDNs.add(dn);
      }
    }
    CombinedHostsFileWriter.writeFile(combinedFile.toString(),allDNs);
  }
}
