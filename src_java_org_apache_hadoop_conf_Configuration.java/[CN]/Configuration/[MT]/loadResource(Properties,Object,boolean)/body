{
  try {
    DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();
    docBuilderFactory.setIgnoringComments(true);
    docBuilderFactory.setNamespaceAware(true);
    try {
      docBuilderFactory.setXIncludeAware(true);
    }
 catch (    UnsupportedOperationException e) {
      LOG.error("Failed to set setXIncludeAware(true) for parser " + docBuilderFactory + ":"+ e,e);
    }
    DocumentBuilder builder=docBuilderFactory.newDocumentBuilder();
    Document doc=null;
    Element root=null;
    if (name instanceof URL) {
      URL url=(URL)name;
      if (url != null) {
        if (!quiet) {
          LOG.info("parsing " + url);
        }
        doc=builder.parse(url.toString());
      }
    }
 else     if (name instanceof String) {
      URL url=getResource((String)name);
      if (url != null) {
        if (!quiet) {
          LOG.info("parsing " + url);
        }
        doc=builder.parse(url.toString());
      }
    }
 else     if (name instanceof Path) {
      File file=new File(((Path)name).toUri().getPath()).getAbsoluteFile();
      if (file.exists()) {
        if (!quiet) {
          LOG.info("parsing " + file);
        }
        InputStream in=new BufferedInputStream(new FileInputStream(file));
        try {
          doc=builder.parse(in);
        }
  finally {
          in.close();
        }
      }
    }
 else     if (name instanceof InputStream) {
      try {
        doc=builder.parse((InputStream)name);
      }
  finally {
        ((InputStream)name).close();
      }
    }
 else     if (name instanceof Element) {
      root=(Element)name;
    }
    if (doc == null && root == null) {
      if (quiet)       return;
      throw new RuntimeException(name + " not found");
    }
    if (root == null) {
      root=doc.getDocumentElement();
    }
    if (!"configuration".equals(root.getTagName()))     LOG.fatal("bad conf file: top-level element not <configuration>");
    NodeList props=root.getChildNodes();
    for (int i=0; i < props.getLength(); i++) {
      Node propNode=props.item(i);
      if (!(propNode instanceof Element))       continue;
      Element prop=(Element)propNode;
      if ("configuration".equals(prop.getTagName())) {
        loadResource(properties,prop,quiet);
        continue;
      }
      if (!"property".equals(prop.getTagName()))       LOG.warn("bad conf file: element not <property>");
      NodeList fields=prop.getChildNodes();
      String attr=null;
      String value=null;
      boolean finalParameter=false;
      for (int j=0; j < fields.getLength(); j++) {
        Node fieldNode=fields.item(j);
        if (!(fieldNode instanceof Element))         continue;
        Element field=(Element)fieldNode;
        if ("name".equals(field.getTagName()) && field.hasChildNodes())         attr=((Text)field.getFirstChild()).getData().trim();
        if ("value".equals(field.getTagName()) && field.hasChildNodes())         value=((Text)field.getFirstChild()).getData();
        if ("final".equals(field.getTagName()) && field.hasChildNodes())         finalParameter="true".equals(((Text)field.getFirstChild()).getData());
      }
      if (attr != null) {
        if (value != null) {
          if (!finalParameters.contains(attr)) {
            properties.setProperty(attr,value);
            if (storeResource) {
              updatingResource.put(attr,name.toString());
            }
          }
 else {
            LOG.warn(name + ":a attempt to override final parameter: " + attr+ ";  Ignoring.");
          }
        }
        if (finalParameter) {
          finalParameters.add(attr);
        }
      }
    }
  }
 catch (  IOException e) {
    LOG.fatal("error parsing conf file: " + e);
    throw new RuntimeException(e);
  }
catch (  DOMException e) {
    LOG.fatal("error parsing conf file: " + e);
    throw new RuntimeException(e);
  }
catch (  SAXException e) {
    LOG.fatal("error parsing conf file: " + e);
    throw new RuntimeException(e);
  }
catch (  ParserConfigurationException e) {
    LOG.fatal("error parsing conf file: " + e);
    throw new RuntimeException(e);
  }
}
