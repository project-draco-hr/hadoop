{
  final Path file=new Path("/file1");
  FSDataOutputStream out=null;
  try {
    out=dfs.create(file,(short)1);
    DFSTestUtil.writeAndFlushStripedOutputStream((DFSStripedOutputStream)out.getWrappedStream(),DFS_BYTES_PER_CHECKSUM_DEFAULT);
    FSDirectory fsdir=cluster.getNamesystem().getFSDirectory();
    INodeFile fileNode=fsdir.getINode4Write(file.toString()).asFile();
    BlockInfo[] blocks=fileNode.getBlocks();
    assertEquals(1,blocks.length);
    Assert.assertTrue(blocks[0].isStriped());
    checkStripedBlockUC((BlockInfoStriped)fileNode.getLastBlock(),true);
    cluster.restartNameNode(true);
    fsdir=cluster.getNamesystem().getFSDirectory();
    fileNode=fsdir.getINode4Write(file.toString()).asFile();
    blocks=fileNode.getBlocks();
    assertEquals(1,blocks.length);
    Assert.assertTrue(blocks[0].isStriped());
    checkStripedBlockUC((BlockInfoStriped)fileNode.getLastBlock(),false);
    dfs=cluster.getFileSystem();
    dfs.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_ENTER);
    dfs.saveNamespace();
    dfs.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE);
    cluster.restartNameNode(true);
    fsdir=cluster.getNamesystem().getFSDirectory();
    fileNode=fsdir.getINode4Write(file.toString()).asFile();
    blocks=fileNode.getBlocks();
    assertEquals(1,blocks.length);
    Assert.assertTrue(blocks[0].isStriped());
    checkStripedBlockUC((BlockInfoStriped)fileNode.getLastBlock(),false);
  }
  finally {
    IOUtils.cleanup(null,out);
  }
}
