{
  Logger rootLogger=LogManager.getRootLogger();
  rootLogger.setLevel(Level.DEBUG);
  final YarnConfiguration conf=new YarnConfiguration(new JobConf());
  conf.set(JHAdminConfig.MR_HISTORY_PRINCIPAL,"RandomOrc/localhost@apache.org");
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(conf);
  final JobHistoryServer jobHistoryServer=new JobHistoryServer(){
    protected void doSecureLogin(    Configuration conf) throws IOException {
    }
  }
;
  jobHistoryServer.init(conf);
  jobHistoryServer.start();
  UserGroupInformation loggedInUser=UserGroupInformation.getCurrentUser();
  loggedInUser.setAuthenticationMethod(AuthenticationMethod.KERBEROS);
  DelegationToken token=loggedInUser.doAs(new PrivilegedExceptionAction<DelegationToken>(){
    @Override public DelegationToken run() throws YarnRemoteException {
      GetDelegationTokenRequest request=Records.newRecord(GetDelegationTokenRequest.class);
      request.setRenewer("OneRenewerToRuleThemAll");
      return jobHistoryServer.getClientService().getClientHandler().getDelegationToken(request).getDelegationToken();
    }
  }
);
  UserGroupInformation ugi=UserGroupInformation.createRemoteUser("TheDarkLord");
  ugi.addToken(new Token<MRDelegationTokenIdentifier>(token.getIdentifier().array(),token.getPassword().array(),new Text(token.getKind()),new Text(token.getService())));
  final YarnRPC rpc=YarnRPC.create(conf);
  MRClientProtocol userUsingDT=ugi.doAs(new PrivilegedAction<MRClientProtocol>(){
    @Override public MRClientProtocol run(){
      return (MRClientProtocol)rpc.getProxy(HSClientProtocol.class,jobHistoryServer.getClientService().getBindAddress(),conf);
    }
  }
);
  GetJobReportRequest jobReportRequest=Records.newRecord(GetJobReportRequest.class);
  jobReportRequest.setJobId(MRBuilderUtils.newJobId(123456,1,1));
  try {
    userUsingDT.getJobReport(jobReportRequest);
  }
 catch (  YarnRemoteException e) {
    Assert.assertEquals("Unknown job job_123456_0001",e.getMessage());
  }
}
