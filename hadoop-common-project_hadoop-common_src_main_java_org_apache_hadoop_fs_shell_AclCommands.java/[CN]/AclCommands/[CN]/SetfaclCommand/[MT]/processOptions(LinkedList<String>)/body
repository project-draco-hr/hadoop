{
  cf.parse(args);
  setRecursive(cf.getOpt("R"));
  boolean bothRemoveOptions=cf.getOpt("b") && cf.getOpt("k");
  boolean bothModifyOptions=cf.getOpt("m") && cf.getOpt("x");
  boolean oneRemoveOption=cf.getOpt("b") || cf.getOpt("k");
  boolean oneModifyOption=cf.getOpt("m") || cf.getOpt("x");
  boolean setOption=cf.getOpt("-set");
  if ((bothRemoveOptions || bothModifyOptions) || (oneRemoveOption && oneModifyOption) || (setOption && (oneRemoveOption || oneModifyOption))) {
    throw new HadoopIllegalArgumentException("Specified flags contains both remove and modify flags");
  }
  if (oneModifyOption || setOption) {
    if (args.size() < 2) {
      throw new HadoopIllegalArgumentException("<acl_spec> is missing");
    }
    aclEntries=AclEntry.parseAclSpec(args.removeFirst(),!cf.getOpt("x"));
  }
  if (args.isEmpty()) {
    throw new HadoopIllegalArgumentException("<path> is missing");
  }
  if (args.size() > 1) {
    throw new HadoopIllegalArgumentException("Too many arguments");
  }
  if (isRecursive() && (oneModifyOption || setOption)) {
    accessAclEntries=Lists.newArrayList();
    for (    AclEntry entry : aclEntries) {
      if (entry.getScope() == AclEntryScope.ACCESS) {
        accessAclEntries.add(entry);
      }
    }
  }
}
