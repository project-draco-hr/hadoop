{
  Random r=new Random(System.currentTimeMillis());
  Path tmpBaseDir=new Path("/tmp/wc-" + r.nextInt());
  final Path inDir=new Path(tmpBaseDir,"input");
  final Path outDir=new Path(tmpBaseDir,"output");
  String input="The quick brown fox\nhas many silly\nred fox sox\n";
  FileSystem inFs=inDir.getFileSystem(conf);
  FileSystem outFs=outDir.getFileSystem(conf);
  outFs.delete(outDir,true);
  if (!inFs.mkdirs(inDir)) {
    throw new IOException("Mkdirs failed to create " + inDir.toString());
  }
{
    DataOutputStream file=inFs.create(new Path(inDir,"part-0"));
    file.writeBytes(input);
    file.close();
  }
  Job job=Job.getInstance(conf,"word count");
  job.setJarByClass(TestLocalModeWithNewApis.class);
  job.setMapperClass(TokenizerMapper.class);
  job.setCombinerClass(IntSumReducer.class);
  job.setReducerClass(IntSumReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(IntWritable.class);
  FileInputFormat.addInputPath(job,inDir);
  FileOutputFormat.setOutputPath(job,outDir);
  assertEquals(job.waitForCompletion(true),true);
  String output=readOutput(outDir,conf);
  assertEquals("The\t1\nbrown\t1\nfox\t2\nhas\t1\nmany\t1\n" + "quick\t1\nred\t1\nsilly\t1\nsox\t1\n",output);
  outFs.delete(tmpBaseDir,true);
}
