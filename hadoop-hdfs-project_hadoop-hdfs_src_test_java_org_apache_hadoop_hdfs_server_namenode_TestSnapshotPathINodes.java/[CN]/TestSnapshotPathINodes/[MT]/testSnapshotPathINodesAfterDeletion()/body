{
  hdfs.allowSnapshot(sub1);
  hdfs.createSnapshot(sub1,"s2");
  hdfs.delete(file1,false);
  final Snapshot snapshot;
{
    String snapshotPath=sub1.toString() + "/.snapshot/s2/file1";
    String[] names=INode.getPathNames(snapshotPath);
    byte[][] components=INode.getPathComponents(names);
    INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
    assertEquals(nodesInPath.length(),components.length - 1);
    snapshot=getSnapshot(nodesInPath,"s2",3);
    assertSnapshot(nodesInPath,true,snapshot,3);
    final INode inode=nodesInPath.getLastINode();
    assertEquals(file1.getName(),inode.getLocalName());
    assertTrue(inode.asFile().isWithSnapshot());
  }
  String[] names=INode.getPathNames(file1.toString());
  byte[][] components=INode.getPathComponents(names);
  INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
  assertEquals(nodesInPath.length(),components.length);
  assertEquals(getNumNonNull(nodesInPath),components.length - 1);
  assertSnapshot(nodesInPath,false,snapshot,-1);
  assertNull(nodesInPath.getINode(components.length - 1));
  assertEquals(nodesInPath.getINode(components.length - 2).getFullPathName(),sub1.toString());
  assertEquals(nodesInPath.getINode(components.length - 3).getFullPathName(),dir.toString());
  hdfs.deleteSnapshot(sub1,"s2");
  hdfs.disallowSnapshot(sub1);
}
