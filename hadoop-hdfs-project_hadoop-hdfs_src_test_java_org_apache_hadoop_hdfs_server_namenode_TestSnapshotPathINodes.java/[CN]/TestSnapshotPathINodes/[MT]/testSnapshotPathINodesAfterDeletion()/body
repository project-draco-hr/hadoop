{
  hdfs.allowSnapshot(sub1.toString());
  hdfs.createSnapshot(sub1,"s2");
  hdfs.delete(file1,false);
  final Snapshot snapshot;
{
    String snapshotPath=sub1.toString() + "/.snapshot/s2/file1";
    String[] names=INode.getPathNames(snapshotPath);
    byte[][] components=INode.getPathComponents(names);
    INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components);
    INode[] inodes=nodesInPath.getINodes();
    assertEquals(inodes.length,components.length - 1);
    snapshot=getSnapshot(nodesInPath,"s2");
    assertSnapshot(nodesInPath,true,snapshot,3);
    final INode inode=inodes[inodes.length - 1];
    assertEquals(file1.getName(),inode.getLocalName());
    assertEquals(INodeFileWithSnapshot.class,inode.getClass());
  }
  String[] names=INode.getPathNames(file1.toString());
  byte[][] components=INode.getPathComponents(names);
  INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components);
  INode[] inodes=nodesInPath.getINodes();
  assertEquals(inodes.length,components.length);
  assertEquals(nodesInPath.getNumNonNull(),components.length - 1);
  assertSnapshot(nodesInPath,false,snapshot,-1);
  assertNull(inodes[components.length - 1]);
  assertEquals(inodes[components.length - 2].getFullPathName(),sub1.toString());
  assertEquals(inodes[components.length - 3].getFullPathName(),dir.toString());
}
