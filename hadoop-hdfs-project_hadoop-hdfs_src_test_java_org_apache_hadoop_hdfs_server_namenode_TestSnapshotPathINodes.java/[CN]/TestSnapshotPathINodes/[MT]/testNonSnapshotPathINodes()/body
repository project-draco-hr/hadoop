{
  byte[][] components=INode.getPathComponents(file1.toString());
  INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
  assertEquals(nodesInPath.length(),components.length);
  assertSnapshot(nodesInPath,false,null,-1);
  for (int i=0; i < components.length; i++) {
    assertEquals(components[i],nodesInPath.getPathComponent(i));
  }
  assertTrue("file1=" + file1 + ", nodesInPath="+ nodesInPath,nodesInPath.getINode(components.length - 1) != null);
  assertEquals(nodesInPath.getINode(components.length - 1).getFullPathName(),file1.toString());
  assertEquals(nodesInPath.getINode(components.length - 2).getFullPathName(),sub1.toString());
  assertEquals(nodesInPath.getINode(components.length - 3).getFullPathName(),dir.toString());
  assertEquals(Path.SEPARATOR,nodesInPath.getPath(0));
  assertEquals(dir.toString(),nodesInPath.getPath(1));
  assertEquals(sub1.toString(),nodesInPath.getPath(2));
  assertEquals(file1.toString(),nodesInPath.getPath(3));
  assertEquals(file1.getParent().toString(),nodesInPath.getParentINodesInPath().getPath());
  nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
  assertEquals(nodesInPath.length(),components.length);
  assertSnapshot(nodesInPath,false,null,-1);
  assertEquals(nodesInPath.getLastINode().getFullPathName(),file1.toString());
}
