{
  byte[][] components=INode.getPathComponents(file1.toString());
  INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
  assertEquals(nodesInPath.length(),components.length);
  assertEquals(nodesInPath.getINode(components.length - 1).getFullPathName(),file1.toString());
  final long modTime=nodesInPath.getINode(nodesInPath.length() - 1).getModificationTime();
  hdfs.allowSnapshot(sub1);
  hdfs.createSnapshot(sub1,"s3");
  DFSTestUtil.appendFile(hdfs,file1,"the content for appending");
  String snapshotPath=sub1.toString() + "/.snapshot/s3/file1";
  components=INode.getPathComponents(snapshotPath);
  INodesInPath ssNodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
  assertEquals(ssNodesInPath.length(),components.length - 1);
  final Snapshot s3=getSnapshot(ssNodesInPath,"s3",3);
  assertSnapshot(ssNodesInPath,true,s3,3);
  INode snapshotFileNode=ssNodesInPath.getLastINode();
  assertEquals(snapshotFileNode.getLocalName(),file1.getName());
  assertTrue(snapshotFileNode.asFile().isWithSnapshot());
  assertEquals(modTime,snapshotFileNode.getModificationTime(ssNodesInPath.getPathSnapshotId()));
  components=INode.getPathComponents(file1.toString());
  INodesInPath newNodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
  assertSnapshot(newNodesInPath,false,s3,-1);
  assertEquals(newNodesInPath.length(),components.length);
  final int last=components.length - 1;
  assertEquals(newNodesInPath.getINode(last).getFullPathName(),file1.toString());
  Assert.assertFalse(modTime == newNodesInPath.getINode(last).getModificationTime());
  hdfs.deleteSnapshot(sub1,"s3");
  hdfs.disallowSnapshot(sub1);
}
