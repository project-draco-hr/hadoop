{
  hdfs.allowSnapshot(sub1);
  hdfs.createSnapshot(sub1,"s1");
  String snapshotPath=sub1.toString() + "/.snapshot/s1/file1";
  byte[][] components=INode.getPathComponents(snapshotPath);
  INodesInPath nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
  assertEquals(nodesInPath.length(),components.length - 1);
  final Snapshot snapshot=getSnapshot(nodesInPath,"s1",3);
  assertSnapshot(nodesInPath,true,snapshot,3);
  INode snapshotFileNode=nodesInPath.getLastINode();
  assertINodeFile(snapshotFileNode,file1);
  assertTrue(snapshotFileNode.getParent().isWithSnapshot());
  nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
  assertEquals(nodesInPath.length(),components.length - 1);
  assertSnapshot(nodesInPath,true,snapshot,3);
  assertINodeFile(nodesInPath.getLastINode(),file1);
  String dotSnapshotPath=sub1.toString() + "/.snapshot";
  components=INode.getPathComponents(dotSnapshotPath);
  nodesInPath=INodesInPath.resolve(fsdir.rootDir,components,false);
  assertEquals(nodesInPath.length(),components.length);
  assertSnapshot(nodesInPath,true,snapshot,-1);
  assertNull(nodesInPath.getLastINode());
  assertEquals(nodesInPath.getINode(-2).getFullPathName(),sub1.toString());
  assertTrue(nodesInPath.getINode(-2).isDirectory());
  String[] invalidPathComponent={"invalidDir","foo",".snapshot","bar"};
  Path invalidPath=new Path(invalidPathComponent[0]);
  for (int i=1; i < invalidPathComponent.length; i++) {
    invalidPath=new Path(invalidPath,invalidPathComponent[i]);
    try {
      hdfs.getFileStatus(invalidPath);
      Assert.fail();
    }
 catch (    FileNotFoundException fnfe) {
      System.out.println("The exception is expected: " + fnfe);
    }
  }
  hdfs.deleteSnapshot(sub1,"s1");
  hdfs.disallowSnapshot(sub1);
}
