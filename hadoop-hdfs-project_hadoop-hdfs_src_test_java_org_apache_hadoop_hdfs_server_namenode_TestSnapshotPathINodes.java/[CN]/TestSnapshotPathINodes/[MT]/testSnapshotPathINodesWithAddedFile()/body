{
  hdfs.allowSnapshot(sub1.toString());
  hdfs.createSnapshot(sub1,"s4");
  final Path file3=new Path(sub1,"file3");
  DFSTestUtil.createFile(hdfs,file3,1024,REPLICATION,seed);
{
    String snapshotPath=sub1.toString() + "/.snapshot/s4/file3";
    String[] names=INode.getPathNames(snapshotPath);
    byte[][] components=INode.getPathComponents(names);
    INodesInPath nodesInPath=fsdir.rootDir.getExistingPathINodes(components,components.length,false);
    INode[] inodes=nodesInPath.getINodes();
    assertEquals(inodes.length,components.length - 1);
    assertEquals(nodesInPath.getNumNonNull(),components.length - 2);
    s4=getSnapshot(nodesInPath,"s4");
    assertSnapshot(nodesInPath,true,s4,3);
    assertNull(inodes[inodes.length - 1]);
  }
  String[] names=INode.getPathNames(file3.toString());
  byte[][] components=INode.getPathComponents(names);
  INodesInPath nodesInPath=fsdir.rootDir.getExistingPathINodes(components,components.length,false);
  INode[] inodes=nodesInPath.getINodes();
  assertEquals(inodes.length,components.length);
  assertSnapshot(nodesInPath,false,s4,-1);
  assertEquals(inodes[components.length - 1].getFullPathName(),file3.toString());
  assertEquals(inodes[components.length - 2].getFullPathName(),sub1.toString());
  assertEquals(inodes[components.length - 3].getFullPathName(),dir.toString());
}
