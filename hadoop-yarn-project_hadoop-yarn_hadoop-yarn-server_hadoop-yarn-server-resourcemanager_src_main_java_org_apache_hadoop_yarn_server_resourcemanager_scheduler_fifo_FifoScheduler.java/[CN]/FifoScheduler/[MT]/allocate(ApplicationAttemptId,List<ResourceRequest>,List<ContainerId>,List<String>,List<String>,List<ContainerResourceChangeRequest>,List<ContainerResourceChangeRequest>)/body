{
  FiCaSchedulerApp application=getApplicationAttempt(applicationAttemptId);
  if (application == null) {
    LOG.error("Calling allocate on removed " + "or non existant application " + applicationAttemptId);
    return EMPTY_ALLOCATION;
  }
  SchedulerUtils.normalizeRequests(ask,resourceCalculator,clusterResource,minimumAllocation,getMaximumResourceCapability());
  releaseContainers(release,application);
synchronized (application) {
    if (application.isStopped()) {
      LOG.info("Calling allocate on a stopped " + "application " + applicationAttemptId);
      return EMPTY_ALLOCATION;
    }
    if (!ask.isEmpty()) {
      LOG.debug("allocate: pre-update" + " applicationId=" + applicationAttemptId + " application="+ application);
      application.showRequests();
      application.updateResourceRequests(ask);
      LOG.debug("allocate: post-update" + " applicationId=" + applicationAttemptId + " application="+ application);
      application.showRequests();
      LOG.debug("allocate:" + " applicationId=" + applicationAttemptId + " #ask="+ ask.size());
    }
    if (application.isWaitingForAMContainer()) {
      application.updateAMBlacklist(blacklistAdditions,blacklistRemovals);
    }
 else {
      application.updateBlacklist(blacklistAdditions,blacklistRemovals);
    }
    Resource headroom=application.getHeadroom();
    application.setApplicationHeadroomForMetrics(headroom);
    return new Allocation(application.pullNewlyAllocatedContainers(),headroom,null,null,null,application.pullUpdatedNMTokens());
  }
}
