{
  LOG.debug("assignContainers:" + " node=" + node.getRMNode().getNodeAddress() + " application="+ application.getApplicationId().getId()+ " priority="+ schedulerKey.getPriority().getPriority()+ " assignableContainers="+ assignableContainers+ " request="+ request+ " type="+ type);
  Resource capability=request.getCapability();
  int availableContainers=(int)(node.getUnallocatedResource().getMemorySize() / capability.getMemorySize());
  int assignedContainers=Math.min(assignableContainers,availableContainers);
  if (assignedContainers > 0) {
    for (int i=0; i < assignedContainers; ++i) {
      NodeId nodeId=node.getRMNode().getNodeID();
      ContainerId containerId=BuilderUtils.newContainerId(application.getApplicationAttemptId(),application.getNewContainerId());
      Container container=BuilderUtils.newContainer(containerId,nodeId,node.getRMNode().getHttpAddress(),capability,schedulerKey.getPriority(),null);
      RMContainer rmContainer=application.allocate(type,node,schedulerKey,request,container);
      node.allocateContainer(rmContainer);
      increaseUsedResources(rmContainer);
    }
  }
  return assignedContainers;
}
