{
  final long fileSize=DEFAULT_BLOCK_SIZE * 5;
  final String testFile=new String("/testfile");
  final Path path=new Path(testFile);
  DFSTestUtil.createFile(cluster.getFileSystem(),path,fileSize,REPLICATION_FACTOR,1000L);
  refreshDatanodeAdminProperties2();
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      boolean successful=true;
      LocatedBlocks locatedBlocks;
      try {
        locatedBlocks=cluster.getFileSystem().getClient().getLocatedBlocks(path.toString(),0,fileSize);
      }
 catch (      IOException ioe) {
        return false;
      }
      for (      LocatedBlock block : locatedBlocks.getLocatedBlocks()) {
        Set<DatanodeInfo> locs=new HashSet<>();
        for (        DatanodeInfo datanodeInfo : block.getLocations()) {
          if (datanodeInfo.getAdminState() == DatanodeInfo.AdminStates.NORMAL) {
            locs.add(datanodeInfo);
          }
        }
        for (        DatanodeID datanodeID : expectedDatanodeIDs) {
          successful=successful && locs.contains(datanodeID);
        }
      }
      return successful;
    }
  }
,1000,60000);
  LocatedBlocks locatedBlocks;
  locatedBlocks=cluster.getFileSystem().getClient().getLocatedBlocks(path.toString(),0,fileSize);
  for (  LocatedBlock block : locatedBlocks.getLocatedBlocks()) {
    BlockPlacementStatus status=cluster.getNamesystem().getBlockManager().getBlockPlacementPolicy().verifyBlockPlacement(block.getLocations(),REPLICATION_FACTOR);
    assertTrue(status.isPlacementPolicySatisfied());
  }
}
