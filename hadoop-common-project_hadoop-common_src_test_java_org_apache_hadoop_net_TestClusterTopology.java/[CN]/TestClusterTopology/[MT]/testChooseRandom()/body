{
  NetworkTopology cluster=new NetworkTopology();
  NodeElement node1=getNewNode("node1","/d1/r1");
  cluster.add(node1);
  NodeElement node2=getNewNode("node2","/d1/r2");
  cluster.add(node2);
  NodeElement node3=getNewNode("node3","/d1/r3");
  cluster.add(node3);
  NodeElement node4=getNewNode("node4","/d1/r3");
  cluster.add(node4);
  int numIterations=100;
  HashMap<String,Integer> histogram=new HashMap<String,Integer>();
  for (int i=0; i < numIterations; i++) {
    String randomNode=cluster.chooseRandom(NodeBase.ROOT).getName();
    if (!histogram.containsKey(randomNode)) {
      histogram.put(randomNode,0);
    }
    histogram.put(randomNode,histogram.get(randomNode) + 1);
  }
  assertEquals("Random is not selecting all nodes",4,histogram.size());
  ChiSquareTest chiSquareTest=new ChiSquareTest();
  double[] expected=new double[histogram.size()];
  long[] observed=new long[histogram.size()];
  int j=0;
  for (  Integer occurrence : histogram.values()) {
    expected[j]=1.0 * numIterations / histogram.size();
    observed[j]=occurrence;
    j++;
  }
  boolean chiSquareTestRejected=chiSquareTest.chiSquareTest(expected,observed,0.01);
  assertFalse("Not choosing nodes randomly",chiSquareTestRejected);
  histogram=new HashMap<String,Integer>();
  for (int i=0; i < numIterations; i++) {
    String randomNode=cluster.chooseRandom("~/d1/r3").getName();
    if (!histogram.containsKey(randomNode)) {
      histogram.put(randomNode,0);
    }
    histogram.put(randomNode,histogram.get(randomNode) + 1);
  }
  assertEquals("Random is not selecting the nodes it should",2,histogram.size());
}
