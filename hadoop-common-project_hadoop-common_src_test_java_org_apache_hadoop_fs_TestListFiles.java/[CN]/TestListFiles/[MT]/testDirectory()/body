{
  fs.mkdirs(DIR1);
  RemoteIterator<LocatedFileStatus> itor=fs.listFiles(DIR1,true);
  assertFalse(itor.hasNext());
  itor=fs.listFiles(DIR1,false);
  assertFalse(itor.hasNext());
  writeFile(fs,FILE2,FILE_LEN);
  itor=fs.listFiles(DIR1,true);
  LocatedFileStatus stat=itor.next();
  assertFalse(itor.hasNext());
  assertTrue(stat.isFile());
  assertEquals(FILE_LEN,stat.getLen());
  assertEquals(fs.makeQualified(FILE2),stat.getPath());
  assertEquals(1,stat.getBlockLocations().length);
  itor=fs.listFiles(DIR1,false);
  stat=itor.next();
  assertFalse(itor.hasNext());
  assertTrue(stat.isFile());
  assertEquals(FILE_LEN,stat.getLen());
  assertEquals(fs.makeQualified(FILE2),stat.getPath());
  assertEquals(1,stat.getBlockLocations().length);
  writeFile(fs,FILE1,FILE_LEN);
  writeFile(fs,FILE3,FILE_LEN);
  Set<Path> filesToFind=new HashSet<Path>();
  filesToFind.add(fs.makeQualified(FILE1));
  filesToFind.add(fs.makeQualified(FILE2));
  filesToFind.add(fs.makeQualified(FILE3));
  itor=fs.listFiles(TEST_DIR,true);
  stat=itor.next();
  assertTrue(stat.isFile());
  assertTrue("Path " + stat.getPath() + " unexpected",filesToFind.remove(stat.getPath()));
  stat=itor.next();
  assertTrue(stat.isFile());
  assertTrue("Path " + stat.getPath() + " unexpected",filesToFind.remove(stat.getPath()));
  stat=itor.next();
  assertTrue(stat.isFile());
  assertTrue("Path " + stat.getPath() + " unexpected",filesToFind.remove(stat.getPath()));
  assertFalse(itor.hasNext());
  assertTrue(filesToFind.isEmpty());
  itor=fs.listFiles(TEST_DIR,false);
  stat=itor.next();
  assertTrue(stat.isFile());
  assertEquals(fs.makeQualified(FILE1),stat.getPath());
  assertFalse(itor.hasNext());
  fs.delete(TEST_DIR,true);
}
