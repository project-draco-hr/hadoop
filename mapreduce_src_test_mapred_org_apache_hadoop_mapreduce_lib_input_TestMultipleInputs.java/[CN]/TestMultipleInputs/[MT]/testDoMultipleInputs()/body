{
  Path in1Dir=getDir(IN1_DIR);
  Path in2Dir=getDir(IN2_DIR);
  Path outDir=getDir(OUT_DIR);
  Configuration conf=createJobConf();
  FileSystem fs=FileSystem.get(conf);
  fs.delete(outDir,true);
  DataOutputStream file1=fs.create(new Path(in1Dir,"part-0"));
  file1.writeBytes("a\nb\nc\nd\ne");
  file1.close();
  DataOutputStream file2=fs.create(new Path(in2Dir,"part-0"));
  file2.writeBytes("a\tblah\nb\tblah\nc\tblah\nd\tblah\ne\tblah");
  file2.close();
  Job job=Job.getInstance(conf);
  job.setJobName("mi");
  MultipleInputs.addInputPath(job,in1Dir,TextInputFormat.class,MapClass.class);
  MultipleInputs.addInputPath(job,in2Dir,KeyValueTextInputFormat.class,KeyValueMapClass.class);
  job.setMapOutputKeyClass(Text.class);
  job.setMapOutputValueClass(Text.class);
  job.setOutputKeyClass(NullWritable.class);
  job.setOutputValueClass(Text.class);
  job.setReducerClass(ReducerClass.class);
  FileOutputFormat.setOutputPath(job,outDir);
  boolean success=false;
  try {
    success=job.waitForCompletion(true);
  }
 catch (  InterruptedException ie) {
    throw new RuntimeException(ie);
  }
catch (  ClassNotFoundException instante) {
    throw new RuntimeException(instante);
  }
  if (!success)   throw new RuntimeException("Job failed!");
  BufferedReader output=new BufferedReader(new InputStreamReader(fs.open(new Path(outDir,"part-r-00000"))));
  assertTrue(output.readLine().equals("a 2"));
  assertTrue(output.readLine().equals("b 2"));
  assertTrue(output.readLine().equals("c 2"));
  assertTrue(output.readLine().equals("d 2"));
  assertTrue(output.readLine().equals("e 2"));
}
