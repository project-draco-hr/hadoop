{
  final Path foo1=new Path("/foo1");
  final Path foo2=new Path("/foo2");
  final Path bar=new Path(foo1,"bar");
  final Path f1=new Path(bar,"f1");
  final Path f2=new Path(bar,"f2");
  dfs.mkdirs(foo2);
  DFSTestUtil.createFile(dfs,f1,BLOCKSIZE,REPLICATION,0L);
  DFSTestUtil.createFile(dfs,f2,BLOCKSIZE,REPLICATION,0L);
  SnapshotTestHelper.createSnapshot(dfs,foo1,"s1");
  SnapshotTestHelper.createSnapshot(dfs,foo2,"s2");
  INode f2Node=fsdir.getINode4Write(f2.toString());
  dfs.delete(f2,true);
  final Path bar2=new Path(foo2,"bar2");
  dfs.rename(bar,bar2);
  SnapshotTestHelper.createSnapshot(dfs,foo1,"s3");
  SnapshotTestHelper.createSnapshot(dfs,foo2,"s4");
  Path barPath=SnapshotTestHelper.getSnapshotPath(foo1,"s1",bar.getName());
  INode barNode=fsdir.getINode(barPath.toString());
  Assert.assertTrue(barNode instanceof INodeReference.WithName);
  INode bar2Node=fsdir.getINode(bar2.toString());
  Assert.assertTrue(bar2Node instanceof INodeReference.DstReference);
  byte[][] barComponents=FSDirectory.getPathComponentsWithSnapshot(barNode);
  byte[][] bar2Components=FSDirectory.getPathComponentsWithSnapshot(bar2Node);
  DFSTestUtil.checkComponentsEquals(INode.getPathComponents(barPath.toString()),barComponents);
  DFSTestUtil.checkComponentsEquals(INode.getPathComponents(bar2.toString()),bar2Components);
  byte[][] f2Components=FSDirectory.getPathComponentsWithSnapshot(f2Node);
  Path deletedf2=SnapshotTestHelper.getSnapshotPath(foo1,"s1","bar/f2");
  DFSTestUtil.checkComponentsEquals(INode.getPathComponents(deletedf2.toString()),f2Components);
  final Path newf1=new Path(bar2,f1.getName());
  INode f1Node=fsdir.getINode(newf1.toString());
  Assert.assertTrue(dfs.delete(newf1,true));
  Path deletedf1=SnapshotTestHelper.getSnapshotPath(foo2,"s4","bar2/f1");
  byte[][] f1Components=FSDirectory.getPathComponentsWithSnapshot(f1Node);
  DFSTestUtil.checkComponentsEquals(INode.getPathComponents(deletedf1.toString()),f1Components);
}
