{
  Configuration conf=new Configuration();
  HftpFileSystem fs=new HftpFileSystem();
  Token<?> token=new Token<TokenIdentifier>(new byte[0],new byte[0],DelegationTokenIdentifier.HDFS_DELEGATION_KIND,new Text("127.0.0.1:8020"));
  Credentials cred=new Credentials();
  cred.addToken(HftpFileSystem.TOKEN_KIND,token);
  ByteArrayOutputStream os=new ByteArrayOutputStream();
  cred.write(new DataOutputStream(os));
  HttpURLConnection conn=mock(HttpURLConnection.class);
  doReturn(new ByteArrayInputStream(os.toByteArray())).when(conn).getInputStream();
  doReturn(HttpURLConnection.HTTP_OK).when(conn).getResponseCode();
  URLConnectionFactory factory=mock(URLConnectionFactory.class);
  doReturn(conn).when(factory).openConnection(Mockito.<URL>any(),anyBoolean());
  fs.initialize(new URI("hftp://127.0.0.1:8020"),conf);
  fs.connectionFactory=factory;
  UserGroupInformation ugi=UserGroupInformation.createUserForTesting("foo",new String[]{"bar"});
  TokenAspect<HftpFileSystem> tokenAspect=new TokenAspect<HftpFileSystem>(fs,HftpFileSystem.TOKEN_KIND);
  tokenAspect.initDelegationToken(ugi);
  tokenAspect.ensureTokenInitialized();
  Assert.assertSame(HftpFileSystem.TOKEN_KIND,fs.getRenewToken().getKind());
  Token<?> tok=(Token<?>)Whitebox.getInternalState(fs,"delegationToken");
  Assert.assertNotSame("Not making a copy of the remote token",token,tok);
  Assert.assertEquals(token.getKind(),tok.getKind());
}
