{
  checkParameters(inputs,outputs);
  int dataLen=inputs[0].remaining();
  if (dataLen == 0) {
    return;
  }
  ensureLength(inputs,false,dataLen);
  ensureLength(outputs,false,dataLen);
  boolean usingDirectBuffer=inputs[0].isDirect();
  if (usingDirectBuffer) {
    doEncode(inputs,outputs);
    return;
  }
  int[] inputOffsets=new int[inputs.length];
  int[] outputOffsets=new int[outputs.length];
  byte[][] newInputs=new byte[inputs.length][];
  byte[][] newOutputs=new byte[outputs.length][];
  ByteBuffer buffer;
  for (int i=0; i < inputs.length; ++i) {
    buffer=inputs[i];
    inputOffsets[i]=buffer.position();
    newInputs[i]=buffer.array();
  }
  for (int i=0; i < outputs.length; ++i) {
    buffer=outputs[i];
    outputOffsets[i]=buffer.position();
    newOutputs[i]=buffer.array();
  }
  doEncode(newInputs,inputOffsets,dataLen,newOutputs,outputOffsets);
  for (int i=0; i < inputs.length; ++i) {
    buffer=inputs[i];
    buffer.position(buffer.position() + dataLen);
  }
}
