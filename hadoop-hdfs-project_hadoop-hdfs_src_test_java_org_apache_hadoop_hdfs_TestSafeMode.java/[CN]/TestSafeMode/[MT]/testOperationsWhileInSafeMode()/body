{
  final Path file1=new Path("/file1");
  assertFalse(dfs.setSafeMode(SafeModeAction.SAFEMODE_GET));
  DFSTestUtil.createFile(fs,file1,1024,(short)1,0);
  assertTrue("Could not enter SM",dfs.setSafeMode(SafeModeAction.SAFEMODE_ENTER));
  runFsFun("Set quota while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      ((DistributedFileSystem)fs).setQuota(file1,1,1);
    }
  }
);
  runFsFun("Set perm while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.setPermission(file1,FsPermission.getDefault());
    }
  }
);
  runFsFun("Set owner while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.setOwner(file1,"user","group");
    }
  }
);
  runFsFun("Set repl while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.setReplication(file1,(short)1);
    }
  }
);
  runFsFun("Append file while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      DFSTestUtil.appendFile(fs,file1,"new bytes");
    }
  }
);
  runFsFun("Truncate file while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.truncate(file1,0);
    }
  }
);
  runFsFun("Delete file while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.delete(file1,false);
    }
  }
);
  runFsFun("Rename file while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.rename(file1,new Path("file2"));
    }
  }
);
  runFsFun("Set time while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.setTimes(file1,0,0);
    }
  }
);
  runFsFun("modifyAclEntries while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.modifyAclEntries(file1,Lists.<AclEntry>newArrayList());
    }
  }
);
  runFsFun("removeAclEntries while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.removeAclEntries(file1,Lists.<AclEntry>newArrayList());
    }
  }
);
  runFsFun("removeDefaultAcl while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.removeDefaultAcl(file1);
    }
  }
);
  runFsFun("removeAcl while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.removeAcl(file1);
    }
  }
);
  runFsFun("setAcl while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.setAcl(file1,Lists.<AclEntry>newArrayList());
    }
  }
);
  runFsFun("setXAttr while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.setXAttr(file1,"user.a1",null);
    }
  }
);
  runFsFun("removeXAttr while in SM",new FSRun(){
    @Override public void run(    FileSystem fs) throws IOException {
      fs.removeXAttr(file1,"user.a1");
    }
  }
);
  try {
    DFSTestUtil.readFile(fs,file1);
  }
 catch (  IOException ioe) {
    fail("Set times failed while in SM");
  }
  try {
    fs.getAclStatus(file1);
  }
 catch (  IOException ioe) {
    fail("getAclStatus failed while in SM");
  }
  UserGroupInformation ugiX=UserGroupInformation.createRemoteUser("userX");
  FileSystem myfs=ugiX.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws IOException {
      return FileSystem.get(conf);
    }
  }
);
  myfs.access(file1,FsAction.READ);
  try {
    myfs.access(file1,FsAction.WRITE);
    fail("The access call should have failed.");
  }
 catch (  AccessControlException e) {
  }
  assertFalse("Could not leave SM",dfs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE));
}
