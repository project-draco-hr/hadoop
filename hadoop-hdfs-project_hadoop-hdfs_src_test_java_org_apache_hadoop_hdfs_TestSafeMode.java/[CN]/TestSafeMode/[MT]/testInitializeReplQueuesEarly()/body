{
  LOG.info("Starting testInitializeReplQueuesEarly");
  BlockManagerTestUtil.setWritingPrefersLocalNode(cluster.getNamesystem().getBlockManager(),false);
  cluster.startDataNodes(conf,2,true,StartupOption.REGULAR,null);
  cluster.waitActive();
  LOG.info("Creating files");
  DFSTestUtil.createFile(fs,TEST_PATH,15 * BLOCK_SIZE,(short)1,1L);
  LOG.info("Stopping all DataNodes");
  List<DataNodeProperties> dnprops=Lists.newLinkedList();
  dnprops.add(cluster.stopDataNode(0));
  dnprops.add(cluster.stopDataNode(0));
  dnprops.add(cluster.stopDataNode(0));
  cluster.getConfiguration(0).setFloat(DFSConfigKeys.DFS_NAMENODE_REPL_QUEUE_THRESHOLD_PCT_KEY,1f / 15f);
  LOG.info("Restarting NameNode");
  cluster.restartNameNode();
  final NameNode nn=cluster.getNameNode();
  String status=nn.getNamesystem().getSafemode();
  assertEquals("Safe mode is ON. The reported blocks 0 needs additional " + "14 blocks to reach the threshold 0.9990 of total blocks 15." + NEWLINE + "The number of live datanodes 0 has reached the minimum number 0. "+ "Safe mode will be turned off automatically once the thresholds "+ "have been reached.",status);
  assertFalse("Mis-replicated block queues should not be initialized " + "until threshold is crossed",NameNodeAdapter.safeModeInitializedReplQueues(nn));
  LOG.info("Restarting one DataNode");
  cluster.restartDataNode(dnprops.remove(0));
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      return getLongCounter("StorageBlockReportOps",getMetrics(NN_METRICS)) == cluster.getStoragesPerDatanode();
    }
  }
,10,10000);
  final long safe=NameNodeAdapter.getSafeModeSafeBlocks(nn);
  assertTrue("Expected first block report to make some blocks safe.",safe > 0);
  assertTrue("Did not expect first block report to make all blocks safe.",safe < 15);
  assertTrue(NameNodeAdapter.safeModeInitializedReplQueues(nn));
  BlockManagerTestUtil.updateState(nn.getNamesystem().getBlockManager());
  long underReplicatedBlocks=nn.getNamesystem().getUnderReplicatedBlocks();
  while (underReplicatedBlocks != (15 - safe)) {
    LOG.info("UnderReplicatedBlocks expected=" + (15 - safe) + ", actual="+ underReplicatedBlocks);
    Thread.sleep(100);
    BlockManagerTestUtil.updateState(nn.getNamesystem().getBlockManager());
    underReplicatedBlocks=nn.getNamesystem().getUnderReplicatedBlocks();
  }
  cluster.restartDataNodes();
}
