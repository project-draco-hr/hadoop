{
  boolean isCapacityScheduler=rm.getResourceScheduler() instanceof CapacityScheduler;
  assumeTrue("Currently this test is only supported on CapacityScheduler",isCapacityScheduler);
  CapacitySchedulerConfiguration csconf=new CapacitySchedulerConfiguration();
  csconf.setAcl("root",QueueACL.ADMINISTER_QUEUE,"someuser");
  csconf.setAcl("root.default",QueueACL.ADMINISTER_QUEUE,"someuser");
  rm.getResourceScheduler().reinitialize(csconf,rm.getRMContext());
  rm.start();
  MockNM amNodeManager=rm.registerNode("127.0.0.1:1234",2048);
  String[] mediaTypes={MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML};
  for (  String mediaType : mediaTypes) {
    RMApp app=rm.submitApp(CONTAINER_MB,"test","someuser");
    amNodeManager.nodeHeartbeat(true);
    ClientResponse response=this.constructWebResource("apps",app.getApplicationId().toString(),"state").accept(mediaType).get(ClientResponse.class);
    AppState info=response.getEntity(AppState.class);
    info.setState(YarnApplicationState.KILLED.toString());
    response=this.constructWebResource("apps",app.getApplicationId().toString(),"state").accept(mediaType).entity(info,MediaType.APPLICATION_XML).put(ClientResponse.class);
    if (!isAuthenticationEnabled()) {
      assertEquals(Status.UNAUTHORIZED,response.getClientResponseStatus());
    }
 else {
      assertEquals(Status.FORBIDDEN,response.getClientResponseStatus());
    }
  }
  rm.stop();
  return;
}
