{
  client().addFilter(new LoggingFilter(System.out));
  String lrKey="example";
  String queueName="testqueue";
  String[] queues={"default","testqueue"};
  CapacitySchedulerConfiguration csconf=new CapacitySchedulerConfiguration();
  csconf.setQueues("root",queues);
  csconf.setCapacity("root.default",50.0f);
  csconf.setCapacity("root.testqueue",50.0f);
  rm.getResourceScheduler().reinitialize(csconf,rm.getRMContext());
  String appName="test";
  String appType="test-type";
  String urlPath="apps";
  String appId=testGetNewApplication(acceptMedia);
  List<String> commands=new ArrayList<>();
  commands.add("/bin/sleep 5");
  HashMap<String,String> environment=new HashMap<>();
  environment.put("APP_VAR","ENV_SETTING");
  HashMap<ApplicationAccessType,String> acls=new HashMap<>();
  acls.put(ApplicationAccessType.MODIFY_APP,"testuser1, testuser2");
  acls.put(ApplicationAccessType.VIEW_APP,"testuser3, testuser4");
  Set<String> tags=new HashSet<>();
  tags.add("tag1");
  tags.add("tag 2");
  CredentialsInfo credentials=new CredentialsInfo();
  HashMap<String,String> tokens=new HashMap<>();
  HashMap<String,String> secrets=new HashMap<>();
  secrets.put("secret1",Base64.encodeBase64String("mysecret".getBytes("UTF8")));
  credentials.setSecrets(secrets);
  credentials.setTokens(tokens);
  ApplicationSubmissionContextInfo appInfo=new ApplicationSubmissionContextInfo();
  appInfo.setApplicationId(appId);
  appInfo.setApplicationName(appName);
  appInfo.setMaxAppAttempts(2);
  appInfo.setQueue(queueName);
  appInfo.setApplicationType(appType);
  appInfo.setPriority(0);
  HashMap<String,LocalResourceInfo> lr=new HashMap<>();
  LocalResourceInfo y=new LocalResourceInfo();
  y.setUrl(new URI("http://www.test.com/file.txt"));
  y.setSize(100);
  y.setTimestamp(System.currentTimeMillis());
  y.setType(LocalResourceType.FILE);
  y.setVisibility(LocalResourceVisibility.APPLICATION);
  lr.put(lrKey,y);
  appInfo.getContainerLaunchContextInfo().setResources(lr);
  appInfo.getContainerLaunchContextInfo().setCommands(commands);
  appInfo.getContainerLaunchContextInfo().setEnvironment(environment);
  appInfo.getContainerLaunchContextInfo().setAcls(acls);
  appInfo.getContainerLaunchContextInfo().getAuxillaryServiceData().put("test",Base64.encodeBase64URLSafeString("value12".getBytes("UTF8")));
  appInfo.getContainerLaunchContextInfo().setCredentials(credentials);
  appInfo.getResource().setMemory(1024);
  appInfo.getResource().setvCores(1);
  appInfo.setApplicationTags(tags);
  String includePattern="file1";
  String excludePattern="file2";
  String rolledLogsIncludePattern="file3";
  String rolledLogsExcludePattern="file4";
  String className="policy_class";
  String parameters="policy_parameter";
  LogAggregationContextInfo logAggregationContextInfo=new LogAggregationContextInfo();
  logAggregationContextInfo.setIncludePattern(includePattern);
  logAggregationContextInfo.setExcludePattern(excludePattern);
  logAggregationContextInfo.setRolledLogsIncludePattern(rolledLogsIncludePattern);
  logAggregationContextInfo.setRolledLogsExcludePattern(rolledLogsExcludePattern);
  logAggregationContextInfo.setLogAggregationPolicyClassName(className);
  logAggregationContextInfo.setLogAggregationPolicyParameters(parameters);
  appInfo.setLogAggregationContextInfo(logAggregationContextInfo);
  long attemptFailuresValidityInterval=5000;
  appInfo.setAttemptFailuresValidityInterval(attemptFailuresValidityInterval);
  String reservationId=ReservationId.newInstance(System.currentTimeMillis(),1).toString();
  appInfo.setReservationId(reservationId);
  ClientResponse response=this.constructWebResource(urlPath).accept(acceptMedia).entity(appInfo,contentMedia).post(ClientResponse.class);
  if (!this.isAuthenticationEnabled()) {
    assertEquals(Status.UNAUTHORIZED,response.getClientResponseStatus());
    return;
  }
  assertEquals(Status.ACCEPTED,response.getClientResponseStatus());
  assertTrue(!response.getHeaders().getFirst(HttpHeaders.LOCATION).isEmpty());
  String locURL=response.getHeaders().getFirst(HttpHeaders.LOCATION);
  assertTrue(locURL.contains("/apps/application"));
  appId=locURL.substring(locURL.indexOf("/apps/") + "/apps/".length());
  WebResource res=resource().uri(new URI(locURL));
  res=res.queryParam("user.name",webserviceUserName);
  response=res.get(ClientResponse.class);
  assertEquals(Status.OK,response.getClientResponseStatus());
  RMApp app=rm.getRMContext().getRMApps().get(ApplicationId.fromString(appId));
  assertEquals(appName,app.getName());
  assertEquals(webserviceUserName,app.getUser());
  assertEquals(2,app.getMaxAppAttempts());
  if (app.getQueue().contains("root.")) {
    queueName="root." + queueName;
  }
  assertEquals(queueName,app.getQueue());
  assertEquals(appType,app.getApplicationType());
  assertEquals(tags,app.getApplicationTags());
  ContainerLaunchContext ctx=app.getApplicationSubmissionContext().getAMContainerSpec();
  assertEquals(commands,ctx.getCommands());
  assertEquals(environment,ctx.getEnvironment());
  assertEquals(acls,ctx.getApplicationACLs());
  Map<String,LocalResource> appLRs=ctx.getLocalResources();
  assertTrue(appLRs.containsKey(lrKey));
  LocalResource exampleLR=appLRs.get(lrKey);
  assertEquals(URL.fromURI(y.getUrl()),exampleLR.getResource());
  assertEquals(y.getSize(),exampleLR.getSize());
  assertEquals(y.getTimestamp(),exampleLR.getTimestamp());
  assertEquals(y.getType(),exampleLR.getType());
  assertEquals(y.getPattern(),exampleLR.getPattern());
  assertEquals(y.getVisibility(),exampleLR.getVisibility());
  Credentials cs=new Credentials();
  ByteArrayInputStream str=new ByteArrayInputStream(app.getApplicationSubmissionContext().getAMContainerSpec().getTokens().array());
  DataInputStream di=new DataInputStream(str);
  cs.readTokenStorageStream(di);
  Text key=new Text("secret1");
  assertTrue("Secrets missing from credentials object",cs.getAllSecretKeys().contains(key));
  assertEquals("mysecret",new String(cs.getSecretKey(key),"UTF-8"));
  ApplicationSubmissionContext asc=app.getApplicationSubmissionContext();
  LogAggregationContext lac=asc.getLogAggregationContext();
  assertEquals(includePattern,lac.getIncludePattern());
  assertEquals(excludePattern,lac.getExcludePattern());
  assertEquals(rolledLogsIncludePattern,lac.getRolledLogsIncludePattern());
  assertEquals(rolledLogsExcludePattern,lac.getRolledLogsExcludePattern());
  assertEquals(className,lac.getLogAggregationPolicyClassName());
  assertEquals(parameters,lac.getLogAggregationPolicyParameters());
  assertEquals(attemptFailuresValidityInterval,asc.getAttemptFailuresValidityInterval());
  assertEquals(reservationId,app.getReservationId().toString());
  response=this.constructWebResource("apps",appId).accept(acceptMedia).get(ClientResponse.class);
  assertEquals(Status.OK,response.getClientResponseStatus());
}
