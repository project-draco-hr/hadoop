{
  WebResource r=resource();
  Map<JobId,Job> jobsMap=appContext.getAllJobs();
  for (  JobId id : jobsMap.keySet()) {
    String jobId=MRApps.toString(id);
    String tid="task_1234_0_0_m_0";
    try {
      r.path("ws").path("v1").path("history").path("mapreduce").path("jobs").path(jobId).path("tasks").path(tid).get(JSONObject.class);
      fail("should have thrown exception on invalid uri");
    }
 catch (    UniformInterfaceException ue) {
      ClientResponse response=ue.getResponse();
      assertEquals(Status.NOT_FOUND,response.getClientResponseStatus());
      assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
      JSONObject msg=response.getEntity(JSONObject.class);
      JSONObject exception=msg.getJSONObject("RemoteException");
      assertEquals("incorrect number of elements",3,exception.length());
      String message=exception.getString("message");
      String type=exception.getString("exception");
      String classname=exception.getString("javaClassName");
      WebServicesTestUtils.checkStringMatch("exception message","java.lang.Exception: task not found with id task_1234_0_0_m_0",message);
      WebServicesTestUtils.checkStringMatch("exception type","NotFoundException",type);
      WebServicesTestUtils.checkStringMatch("exception classname","org.apache.hadoop.yarn.webapp.NotFoundException",classname);
    }
  }
}
