{
  config=new HdfsConfiguration();
  hdfsDir=new File(MiniDFSCluster.getBaseDirectory()).getCanonicalFile();
  if (hdfsDir.exists() && !FileUtil.fullyDelete(hdfsDir)) {
    throw new IOException("Could not delete hdfs directory '" + hdfsDir + "'");
  }
  hdfsDir.mkdirs();
  path1=new File(hdfsDir,"name1");
  path2=new File(hdfsDir,"name2");
  path3=new File(hdfsDir,"name3");
  path1.mkdir();
  path2.mkdir();
  path3.mkdir();
  if (!path2.exists() || !path3.exists() || !path1.exists()) {
    throw new IOException("Couldn't create dfs.name dirs in " + hdfsDir.getAbsolutePath());
  }
  String dfs_name_dir=new String(path1.getPath() + "," + path2.getPath());
  System.out.println("configuring hdfsdir is " + hdfsDir.getAbsolutePath() + "; dfs_name_dir = "+ dfs_name_dir+ ";dfs_name_edits_dir(only)="+ path3.getPath());
  config.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,dfs_name_dir);
  config.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,dfs_name_dir + "," + path3.getPath());
  config.set(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY,new File(hdfsDir,"secondary").getPath());
  FileSystem.setDefaultUri(config,"hdfs://" + NAME_NODE_HOST + "0");
  config.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,"0.0.0.0:0");
  config.setBoolean(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_RESTORE_KEY,true);
}
