{
  int numDatanodes=0;
  cluster=new MiniDFSCluster.Builder(config).numDataNodes(numDatanodes).manageNameDfsDirs(false).build();
  cluster.waitActive();
  SecondaryNameNode secondary=new SecondaryNameNode(config);
  System.out.println("****testStorageRestore: Cluster and SNN started");
  printStorages(cluster.getNameNode().getFSImage());
  FileSystem fs=cluster.getFileSystem();
  Path path=new Path("/","test");
  assertTrue(fs.mkdirs(path));
  System.out.println("****testStorageRestore: dir 'test' created, invalidating storage...");
  invalidateStorage(cluster.getNameNode().getFSImage(),ImmutableSet.of(path2,path3));
  printStorages(cluster.getNameNode().getFSImage());
  System.out.println("****testStorageRestore: storage invalidated");
  path=new Path("/","test1");
  assertTrue(fs.mkdirs(path));
  System.out.println("****testStorageRestore: dir 'test1' created");
  FSImageTestUtil.assertFileContentsDifferent(2,new File(path1,"current/" + getInProgressEditsFileName(1)),new File(path2,"current/" + getInProgressEditsFileName(1)),new File(path3,"current/" + getInProgressEditsFileName(1)));
  FSImageTestUtil.assertFileContentsSame(new File(path2,"current/" + getInProgressEditsFileName(1)),new File(path3,"current/" + getInProgressEditsFileName(1)));
  System.out.println("****testStorageRestore: checkfiles(false) run");
  secondary.doCheckpoint();
  FSImageTestUtil.assertFileContentsSame(new File(path1,"current/" + getImageFileName(4)),new File(path2,"current/" + getImageFileName(4)));
  assertFalse("Should not have any image in an edits-only directory",new File(path3,"current/" + getImageFileName(4)).exists());
  assertTrue("Should have finalized logs in the directory that didn't fail",new File(path1,"current/" + getFinalizedEditsFileName(1,4)).exists());
  assertFalse("Should not have finalized logs in the failed directories",new File(path2,"current/" + getFinalizedEditsFileName(1,4)).exists());
  assertFalse("Should not have finalized logs in the failed directories",new File(path3,"current/" + getFinalizedEditsFileName(1,4)).exists());
  FSImageTestUtil.assertFileContentsSame(new File(path1,"current/" + getInProgressEditsFileName(5)),new File(path2,"current/" + getInProgressEditsFileName(5)),new File(path3,"current/" + getInProgressEditsFileName(5)));
  String md5BeforeEdit=FSImageTestUtil.getFileMD5(new File(path1,"current/" + getInProgressEditsFileName(5)));
  FSImageTestUtil.assertFileContentsSame(new File(path1,"current/" + getImageFileName(0)),new File(path2,"current/" + getImageFileName(0)));
  path=new Path("/","test2");
  assertTrue(fs.mkdirs(path));
  String md5AfterEdit=FSImageTestUtil.getFileMD5(new File(path1,"current/" + getInProgressEditsFileName(5)));
  assertFalse(md5BeforeEdit.equals(md5AfterEdit));
  FSImageTestUtil.assertFileContentsSame(new File(path1,"current/" + getInProgressEditsFileName(5)),new File(path2,"current/" + getInProgressEditsFileName(5)),new File(path3,"current/" + getInProgressEditsFileName(5)));
  secondary.shutdown();
  cluster.shutdown();
  FSImageTestUtil.assertFileContentsSame(new File(path1,"current/" + getFinalizedEditsFileName(5,7)),new File(path2,"current/" + getFinalizedEditsFileName(5,7)),new File(path3,"current/" + getFinalizedEditsFileName(5,7)));
}
