{
  Composite panel=new Composite(parent,SWT.FILL);
  panel.setLayout(new GridLayout(2,false));
  GridData data;
{
    Composite subpanel=new Composite(panel,SWT.FILL);
    subpanel.setLayout(new GridLayout(2,false));
    data=new GridData();
    data.horizontalSpan=2;
    data.horizontalAlignment=SWT.FILL;
    subpanel.setLayoutData(data);
    locationName=createConfLabelText(this,subpanel,ConfProp.PI_LOCATION_NAME,"&Location name:");
  }
{
    Group groupMR=new Group(panel,SWT.SHADOW_NONE);
    groupMR.setText("Map/Reduce Master");
    groupMR.setToolTipText("Address of the Map/Reduce master node " + "(the Job Tracker).");
    GridLayout layout=new GridLayout(2,false);
    groupMR.setLayout(layout);
    data=new GridData();
    data.verticalAlignment=SWT.FILL;
    data.horizontalAlignment=SWT.CENTER;
    data.widthHint=250;
    groupMR.setLayoutData(data);
    Label label=new Label(groupMR,SWT.NONE);
    label.setText("Host:");
    data=new GridData(GridData.BEGINNING,GridData.CENTER,false,true);
    label.setLayoutData(data);
    textJTHost=createConfText(this,groupMR,ConfProp.PI_JOB_TRACKER_HOST);
    data=new GridData(GridData.FILL,GridData.CENTER,true,true);
    textJTHost.setLayoutData(data);
    label=new Label(groupMR,SWT.NONE);
    label.setText("Port:");
    data=new GridData(GridData.BEGINNING,GridData.CENTER,false,true);
    label.setLayoutData(data);
    textJTPort=createConfText(this,groupMR,ConfProp.PI_JOB_TRACKER_PORT);
    data=new GridData(GridData.FILL,GridData.CENTER,true,true);
    textJTPort.setLayoutData(data);
  }
{
    Group groupDFS=new Group(panel,SWT.SHADOW_NONE);
    groupDFS.setText("DFS Master");
    groupDFS.setToolTipText("Address of the Distributed FileSystem " + "master node (the Name Node).");
    GridLayout layout=new GridLayout(2,false);
    groupDFS.setLayout(layout);
    data=new GridData();
    data.horizontalAlignment=SWT.CENTER;
    data.widthHint=250;
    groupDFS.setLayoutData(data);
    colocateMasters=createConfCheckButton(this,groupDFS,ConfProp.PI_COLOCATE_MASTERS,"Use M/R Master host");
    data=new GridData();
    data.horizontalSpan=2;
    colocateMasters.setLayoutData(data);
    Label label=new Label(groupDFS,SWT.NONE);
    data=new GridData();
    label.setText("Host:");
    label.setLayoutData(data);
    textNNHost=createConfText(this,groupDFS,ConfProp.PI_NAME_NODE_HOST);
    label=new Label(groupDFS,SWT.NONE);
    data=new GridData();
    label.setText("Port:");
    label.setLayoutData(data);
    textNNPort=createConfText(this,groupDFS,ConfProp.PI_NAME_NODE_PORT);
  }
{
    Composite subpanel=new Composite(panel,SWT.FILL);
    subpanel.setLayout(new GridLayout(2,false));
    data=new GridData();
    data.horizontalSpan=2;
    data.horizontalAlignment=SWT.FILL;
    subpanel.setLayoutData(data);
    userName=createConfLabelText(this,subpanel,ConfProp.PI_USER_NAME,"&User name:");
  }
{
    Group groupSOCKS=new Group(panel,SWT.SHADOW_NONE);
    groupSOCKS.setText("SOCKS proxy");
    groupSOCKS.setToolTipText("Address of the SOCKS proxy to use " + "to connect to the infrastructure.");
    GridLayout layout=new GridLayout(2,false);
    groupSOCKS.setLayout(layout);
    data=new GridData();
    data.horizontalAlignment=SWT.CENTER;
    data.horizontalSpan=2;
    data.widthHint=250;
    groupSOCKS.setLayoutData(data);
    useSocksProxy=createConfCheckButton(this,groupSOCKS,ConfProp.PI_SOCKS_PROXY_ENABLE,"Enable SOCKS proxy");
    data=new GridData();
    data.horizontalSpan=2;
    useSocksProxy.setLayoutData(data);
    Label label=new Label(groupSOCKS,SWT.NONE);
    data=new GridData();
    label.setText("Host:");
    label.setLayoutData(data);
    socksProxyHost=createConfText(this,groupSOCKS,ConfProp.PI_SOCKS_PROXY_HOST);
    label=new Label(groupSOCKS,SWT.NONE);
    data=new GridData();
    label.setText("Port:");
    label.setLayoutData(data);
    socksProxyPort=createConfText(this,groupSOCKS,ConfProp.PI_SOCKS_PROXY_PORT);
  }
  reloadConfProp(ConfProp.PI_COLOCATE_MASTERS);
  reloadConfProp(ConfProp.PI_SOCKS_PROXY_ENABLE);
  reloadConfProp(ConfProp.PI_JOB_TRACKER_HOST);
  return panel;
}
