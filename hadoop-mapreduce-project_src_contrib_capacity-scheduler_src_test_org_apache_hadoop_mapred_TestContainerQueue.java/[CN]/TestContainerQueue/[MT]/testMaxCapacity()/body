{
  this.setUp(4,1,1);
  taskTrackerManager.addJobInProgressListener(scheduler.jobQueuesManager);
  AbstractQueue rt=QueueHierarchyBuilder.createRootAbstractQueue();
  QueueSchedulingContext a1=new QueueSchedulingContext("R.a",25,50,-1);
  QueueSchedulingContext a2=new QueueSchedulingContext("R.b",25,30,-1);
  QueueSchedulingContext a3=new QueueSchedulingContext("R.c",50,-1,-1);
  AbstractQueue q=new JobQueue(rt,a1);
  AbstractQueue q1=new JobQueue(rt,a2);
  AbstractQueue q2=new JobQueue(rt,a3);
  scheduler.jobQueuesManager.addQueue((JobQueue)q);
  scheduler.jobQueuesManager.addQueue((JobQueue)q1);
  scheduler.jobQueuesManager.addQueue((JobQueue)q2);
  scheduler.setRoot(rt);
  rt.update(4,4);
  scheduler.updateContextInfoForTests();
  taskTrackerManager.submitJobAndInit(JobStatus.PREP,20,20,"R.a","u1");
  Map<String,String> expectedStrings=new HashMap<String,String>();
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000001_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000001_0 on tt1");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000002_0 on tt2");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000002_0 on tt2");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt2",expectedStrings);
  assertNull(scheduler.assignTasks(taskTrackerManager.getTaskTracker("tt3")));
}
