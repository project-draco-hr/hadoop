{
  Preconditions.checkArgument(capability != null,"The Resource to be requested should not be null ");
  Preconditions.checkArgument(priority != null,"The priority at which to request containers should not be null ");
  List<LinkedHashSet<T>> list=new LinkedList<LinkedHashSet<T>>();
  Map<String,TreeMap<Resource,ResourceRequestInfo>> remoteRequests=this.remoteRequestsTable.get(priority);
  if (remoteRequests == null) {
    return list;
  }
  TreeMap<Resource,ResourceRequestInfo> reqMap=remoteRequests.get(resourceName);
  if (reqMap == null) {
    return list;
  }
  ResourceRequestInfo resourceRequestInfo=reqMap.get(capability);
  if (resourceRequestInfo != null && !resourceRequestInfo.containerRequests.isEmpty()) {
    list.add(resourceRequestInfo.containerRequests);
    return list;
  }
  SortedMap<Resource,ResourceRequestInfo> tailMap=reqMap.tailMap(capability);
  for (  Map.Entry<Resource,ResourceRequestInfo> entry : tailMap.entrySet()) {
    if (canFit(entry.getKey(),capability) && !entry.getValue().containerRequests.isEmpty()) {
      list.add(entry.getValue().containerRequests);
    }
  }
  return list;
}
