{
  Map<String,TreeMap<Resource,ResourceRequestInfo>> remoteRequests=this.remoteRequestsTable.get(priority);
  if (remoteRequests == null) {
    remoteRequests=new HashMap<String,TreeMap<Resource,ResourceRequestInfo>>();
    this.remoteRequestsTable.put(priority,remoteRequests);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Added priority=" + priority);
    }
  }
  TreeMap<Resource,ResourceRequestInfo> reqMap=remoteRequests.get(resourceName);
  if (reqMap == null) {
    reqMap=new TreeMap<Resource,ResourceRequestInfo>(new ResourceReverseMemoryThenCpuComparator());
    remoteRequests.put(resourceName,reqMap);
  }
  ResourceRequestInfo resourceRequestInfo=reqMap.get(capability);
  if (resourceRequestInfo == null) {
    resourceRequestInfo=new ResourceRequestInfo(priority,resourceName,capability,relaxLocality);
    reqMap.put(capability,resourceRequestInfo);
  }
  resourceRequestInfo.remoteRequest.setNumContainers(resourceRequestInfo.remoteRequest.getNumContainers() + 1);
  if (relaxLocality) {
    resourceRequestInfo.containerRequests.add(req);
  }
  resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);
  addResourceRequestToAsk(resourceRequestInfo.remoteRequest);
  if (LOG.isDebugEnabled()) {
    LOG.debug("addResourceRequest:" + " applicationId=" + " priority=" + priority.getPriority() + " resourceName="+ resourceName+ " numContainers="+ resourceRequestInfo.remoteRequest.getNumContainers()+ " #asks="+ ask.size());
  }
}
