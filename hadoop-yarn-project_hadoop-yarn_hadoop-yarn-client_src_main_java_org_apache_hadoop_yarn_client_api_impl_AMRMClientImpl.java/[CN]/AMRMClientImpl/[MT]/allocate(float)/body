{
  Preconditions.checkArgument(progressIndicator >= 0,"Progress indicator should not be negative");
  AllocateResponse allocateResponse=null;
  ArrayList<ResourceRequest> askList=null;
  ArrayList<ContainerId> releaseList=null;
  AllocateRequest allocateRequest=null;
  try {
synchronized (this) {
      askList=new ArrayList<ResourceRequest>(ask.size());
      for (      ResourceRequest r : ask) {
        askList.add(ResourceRequest.newInstance(r.getPriority(),r.getResourceName(),r.getCapability(),r.getNumContainers(),r.getRelaxLocality()));
      }
      releaseList=new ArrayList<ContainerId>(release);
      ask.clear();
      release.clear();
      allocateRequest=AllocateRequest.newInstance(appAttemptId,lastResponseId,progressIndicator,askList,releaseList,null);
    }
    allocateResponse=rmClient.allocate(allocateRequest);
synchronized (this) {
      clusterNodeCount=allocateResponse.getNumClusterNodes();
      lastResponseId=allocateResponse.getResponseId();
      clusterAvailableResources=allocateResponse.getAvailableResources();
      if (!allocateResponse.getNMTokens().isEmpty()) {
        populateNMTokens(allocateResponse);
      }
    }
  }
  finally {
    if (allocateResponse == null) {
synchronized (this) {
        release.addAll(releaseList);
        for (        ResourceRequest oldAsk : askList) {
          if (!ask.contains(oldAsk)) {
            ask.add(oldAsk);
          }
        }
      }
    }
  }
  return allocateResponse;
}
