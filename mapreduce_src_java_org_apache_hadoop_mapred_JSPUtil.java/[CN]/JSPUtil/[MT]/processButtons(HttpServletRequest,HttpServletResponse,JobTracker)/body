{
  String user=request.getRemoteUser();
  if (privateActionsAllowed(tracker.conf) && request.getParameter("killJobs") != null) {
    String[] jobs=request.getParameterValues("jobCheckBox");
    if (jobs != null) {
      boolean notAuthorized=false;
      String errMsg="User " + user + " failed to kill the following job(s)!<br><br>";
      for (      String job : jobs) {
        final JobID jobId=JobID.forName(job);
        if (user != null) {
          UserGroupInformation ugi=UserGroupInformation.createRemoteUser(user);
          try {
            ugi.doAs(new PrivilegedExceptionAction<Void>(){
              public Void run() throws IOException {
                tracker.killJob(jobId);
                return null;
              }
            }
);
          }
 catch (          AccessControlException e) {
            errMsg=errMsg.concat("<br>" + e.getMessage());
            notAuthorized=true;
            continue;
          }
        }
 else {
          tracker.killJob(jobId);
        }
      }
      if (notAuthorized) {
        errMsg=errMsg.concat("<br><hr><a href=\"jobtracker.jsp\">Go back to JobTracker</a><br>");
        setErrorAndForward(errMsg,request,response);
        return false;
      }
    }
  }
  if (privateActionsAllowed(tracker.conf) && request.getParameter("changeJobPriority") != null) {
    String[] jobs=request.getParameterValues("jobCheckBox");
    if (jobs != null) {
      final JobPriority jobPri=JobPriority.valueOf(request.getParameter("setJobPriority"));
      boolean notAuthorized=false;
      String errMsg="User " + user + " failed to set priority for the following job(s)!<br><br>";
      for (      String job : jobs) {
        final JobID jobId=JobID.forName(job);
        if (user != null) {
          UserGroupInformation ugi=UserGroupInformation.createRemoteUser(user);
          try {
            ugi.doAs(new PrivilegedExceptionAction<Void>(){
              public Void run() throws IOException {
                tracker.setJobPriority(jobId,jobPri);
                return null;
              }
            }
);
          }
 catch (          AccessControlException e) {
            errMsg=errMsg.concat("<br>" + e.getMessage());
            notAuthorized=true;
            continue;
          }
        }
 else {
          tracker.setJobPriority(jobId,jobPri);
        }
      }
      if (notAuthorized) {
        errMsg=errMsg.concat("<br><hr><a href=\"jobtracker.jsp\">Go back to JobTracker</a><br>");
        setErrorAndForward(errMsg,request,response);
        return false;
      }
    }
  }
  return true;
}
