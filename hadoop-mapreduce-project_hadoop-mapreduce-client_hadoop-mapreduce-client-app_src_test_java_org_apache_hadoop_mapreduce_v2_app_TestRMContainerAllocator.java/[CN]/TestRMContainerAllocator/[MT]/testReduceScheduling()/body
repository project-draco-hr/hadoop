{
  int totalMaps=10;
  int succeededMaps=1;
  int scheduledMaps=10;
  int scheduledReduces=0;
  int assignedMaps=2;
  int assignedReduces=0;
  int mapResourceReqt=1024;
  int reduceResourceReqt=2 * 1024;
  int numPendingReduces=4;
  float maxReduceRampupLimit=0.5f;
  float reduceSlowStart=0.2f;
  RMContainerAllocator allocator=mock(RMContainerAllocator.class);
  doCallRealMethod().when(allocator).scheduleReduces(anyInt(),anyInt(),anyInt(),anyInt(),anyInt(),anyInt(),anyInt(),anyInt(),anyInt(),anyFloat(),anyFloat());
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator,never()).setIsReduceStarted(true);
  allocator.scheduleReduces(totalMaps,succeededMaps,0,scheduledReduces,totalMaps - succeededMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator,never()).setIsReduceStarted(true);
  verify(allocator,never()).scheduleAllReduces();
  succeededMaps=3;
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator,times(1)).setIsReduceStarted(true);
  doReturn(100 * 1024).when(allocator).getMemLimit();
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator).rampUpReduces(anyInt());
  verify(allocator,never()).rampDownReduces(anyInt());
  scheduledReduces=3;
  doReturn(10 * 1024).when(allocator).getMemLimit();
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator).rampDownReduces(anyInt());
  scheduledMaps=2;
  assignedReduces=2;
  doReturn(10 * 1024).when(allocator).getMemLimit();
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator,times(2)).rampDownReduces(anyInt());
}
