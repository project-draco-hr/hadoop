{
  long submitTime=System.currentTimeMillis();
  Configuration conf=new YarnConfiguration();
  RMStateStore store=stateStoreHelper.getRMStateStore();
  TestDispatcher dispatcher=new TestDispatcher();
  store.setRMDispatcher(dispatcher);
  AMRMTokenSecretManager appTokenMgr=new AMRMTokenSecretManager(conf);
  ClientToAMTokenSecretManagerInRM clientToAMTokenMgr=new ClientToAMTokenSecretManagerInRM();
  ApplicationAttemptId attemptId1=ConverterUtils.toApplicationAttemptId("appattempt_1352994193343_0001_000001");
  ApplicationId appId1=attemptId1.getApplicationId();
  storeApp(store,appId1,submitTime);
  Token<AMRMTokenIdentifier> appAttemptToken1=generateAMRMToken(attemptId1,appTokenMgr);
  HashSet<Token<?>> attemptTokenSet1=new HashSet<Token<?>>();
  attemptTokenSet1.add(appAttemptToken1);
  SecretKey clientTokenKey1=clientToAMTokenMgr.registerApplication(attemptId1);
  ContainerId containerId1=storeAttempt(store,attemptId1,"container_1352994193343_0001_01_000001",appAttemptToken1,clientTokenKey1,dispatcher);
  String appAttemptIdStr2="appattempt_1352994193343_0001_000002";
  ApplicationAttemptId attemptId2=ConverterUtils.toApplicationAttemptId(appAttemptIdStr2);
  Token<AMRMTokenIdentifier> appAttemptToken2=generateAMRMToken(attemptId2,appTokenMgr);
  HashSet<Token<?>> attemptTokenSet2=new HashSet<Token<?>>();
  attemptTokenSet2.add(appAttemptToken2);
  SecretKey clientTokenKey2=clientToAMTokenMgr.registerApplication(attemptId2);
  ContainerId containerId2=storeAttempt(store,attemptId2,"container_1352994193343_0001_02_000001",appAttemptToken2,clientTokenKey2,dispatcher);
  ApplicationAttemptId attemptIdRemoved=ConverterUtils.toApplicationAttemptId("appattempt_1352994193343_0002_000001");
  ApplicationId appIdRemoved=attemptIdRemoved.getApplicationId();
  storeApp(store,appIdRemoved,submitTime);
  storeAttempt(store,attemptIdRemoved,"container_1352994193343_0002_01_000001",null,null,dispatcher);
  RMApp mockRemovedApp=mock(RMApp.class);
  HashMap<ApplicationAttemptId,RMAppAttempt> attempts=new HashMap<ApplicationAttemptId,RMAppAttempt>();
  ApplicationSubmissionContext context=new ApplicationSubmissionContextPBImpl();
  context.setApplicationId(appIdRemoved);
  when(mockRemovedApp.getSubmitTime()).thenReturn(submitTime);
  when(mockRemovedApp.getApplicationSubmissionContext()).thenReturn(context);
  when(mockRemovedApp.getAppAttempts()).thenReturn(attempts);
  RMAppAttempt mockRemovedAttempt=mock(RMAppAttempt.class);
  when(mockRemovedAttempt.getAppAttemptId()).thenReturn(attemptIdRemoved);
  attempts.put(attemptIdRemoved,mockRemovedAttempt);
  store.removeApplication(mockRemovedApp);
  Thread.sleep(1000);
  store.close();
  store=stateStoreHelper.getRMStateStore();
  RMState state=store.loadState();
  Map<ApplicationId,ApplicationState> rmAppState=state.getApplicationState();
  ApplicationState appState=rmAppState.get(appId1);
  assertNotNull(appState);
  assertEquals(submitTime,appState.getSubmitTime());
  assertEquals(appId1,appState.getApplicationSubmissionContext().getApplicationId());
  ApplicationAttemptState attemptState=appState.getAttempt(attemptId1);
  assertNotNull(attemptState);
  assertEquals(attemptId1,attemptState.getAttemptId());
  assertEquals(containerId1,attemptState.getMasterContainer().getId());
  HashSet<Token<?>> savedTokens=new HashSet<Token<?>>();
  savedTokens.addAll(attemptState.getAppAttemptCredentials().getAllTokens());
  assertEquals(attemptTokenSet1,savedTokens);
  assertArrayEquals(clientTokenKey1.getEncoded(),attemptState.getAppAttemptCredentials().getSecretKey(RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME));
  attemptState=appState.getAttempt(attemptId2);
  assertNotNull(attemptState);
  assertEquals(attemptId2,attemptState.getAttemptId());
  assertEquals(containerId2,attemptState.getMasterContainer().getId());
  savedTokens.clear();
  savedTokens.addAll(attemptState.getAppAttemptCredentials().getAllTokens());
  assertEquals(attemptTokenSet2,savedTokens);
  assertArrayEquals(clientTokenKey2.getEncoded(),attemptState.getAppAttemptCredentials().getSecretKey(RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME));
  assertTrue(stateStoreHelper.isFinalStateValid());
  store.close();
}
