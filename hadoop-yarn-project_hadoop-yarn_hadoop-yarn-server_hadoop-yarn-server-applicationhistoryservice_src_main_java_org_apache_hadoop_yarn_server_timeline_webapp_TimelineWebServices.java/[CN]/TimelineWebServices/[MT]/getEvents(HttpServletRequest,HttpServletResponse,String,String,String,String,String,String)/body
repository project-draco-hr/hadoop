{
  init(res);
  TimelineEvents events=null;
  try {
    UserGroupInformation callerUGI=getUser(req);
    events=store.getEntityTimelines(parseStr(entityType),parseArrayStr(entityId,","),parseLongStr(limit),parseLongStr(windowStart),parseLongStr(windowEnd),parseArrayStr(eventType,","));
    if (events != null) {
      Iterator<TimelineEvents.EventsOfOneEntity> eventsItr=events.getAllEvents().iterator();
      while (eventsItr.hasNext()) {
        TimelineEvents.EventsOfOneEntity eventsOfOneEntity=eventsItr.next();
        try {
          TimelineEntity entity=store.getEntity(eventsOfOneEntity.getEntityId(),eventsOfOneEntity.getEntityType(),EnumSet.of(Field.PRIMARY_FILTERS));
          if (!timelineACLsManager.checkAccess(callerUGI,entity)) {
            eventsItr.remove();
          }
        }
 catch (        Exception e) {
          LOG.error("Error when verifying access for user " + callerUGI + " on the events of the timeline entity "+ new EntityIdentifier(eventsOfOneEntity.getEntityId(),eventsOfOneEntity.getEntityType()),e);
          eventsItr.remove();
        }
      }
    }
  }
 catch (  NumberFormatException e) {
    throw new BadRequestException("windowStart, windowEnd or limit is not a numeric value.");
  }
catch (  IOException e) {
    LOG.error("Error getting entity timelines",e);
    throw new WebApplicationException(e,Response.Status.INTERNAL_SERVER_ERROR);
  }
  if (events == null) {
    return new TimelineEvents();
  }
  return events;
}
