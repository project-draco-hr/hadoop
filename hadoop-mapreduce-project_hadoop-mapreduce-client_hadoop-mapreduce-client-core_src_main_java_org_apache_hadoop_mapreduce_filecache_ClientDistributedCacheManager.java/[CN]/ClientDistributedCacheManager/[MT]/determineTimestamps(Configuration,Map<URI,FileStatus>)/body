{
  URI[] tarchives=DistributedCache.getCacheArchives(job);
  if (tarchives != null) {
    FileStatus status=getFileStatus(job,tarchives[0],statCache);
    StringBuilder archiveFileSizes=new StringBuilder(String.valueOf(status.getLen()));
    StringBuilder archiveTimestamps=new StringBuilder(String.valueOf(status.getModificationTime()));
    for (int i=1; i < tarchives.length; i++) {
      status=getFileStatus(job,tarchives[i],statCache);
      archiveFileSizes.append(",");
      archiveFileSizes.append(String.valueOf(status.getLen()));
      archiveTimestamps.append(",");
      archiveTimestamps.append(String.valueOf(status.getModificationTime()));
    }
    job.set(MRJobConfig.CACHE_ARCHIVES_SIZES,archiveFileSizes.toString());
    setArchiveTimestamps(job,archiveTimestamps.toString());
  }
  URI[] tfiles=DistributedCache.getCacheFiles(job);
  if (tfiles != null) {
    FileStatus status=getFileStatus(job,tfiles[0],statCache);
    StringBuilder fileSizes=new StringBuilder(String.valueOf(status.getLen()));
    StringBuilder fileTimestamps=new StringBuilder(String.valueOf(status.getModificationTime()));
    for (int i=1; i < tfiles.length; i++) {
      status=getFileStatus(job,tfiles[i],statCache);
      fileSizes.append(",");
      fileSizes.append(String.valueOf(status.getLen()));
      fileTimestamps.append(",");
      fileTimestamps.append(String.valueOf(status.getModificationTime()));
    }
    job.set(MRJobConfig.CACHE_FILES_SIZES,fileSizes.toString());
    setFileTimestamps(job,fileTimestamps.toString());
  }
}
