{
  @SuppressWarnings("unchecked") Map<String,String> env=Shell.WINDOWS ? new CaseInsensitiveMap(callerEnv) : callerEnv;
  String[] classPathEntries=inputClassPath.split(File.pathSeparator);
  for (int i=0; i < classPathEntries.length; ++i) {
    classPathEntries[i]=StringUtils.replaceTokens(classPathEntries[i],StringUtils.ENV_VAR_PATTERN,env);
  }
  File workingDir=new File(pwd.toString());
  if (!workingDir.mkdirs()) {
    LOG.debug("mkdirs false for " + workingDir + ", execution will continue");
  }
  StringBuilder unexpandedWildcardClasspath=new StringBuilder();
  List<String> classPathEntryList=new ArrayList<String>(classPathEntries.length);
  for (  String classPathEntry : classPathEntries) {
    if (classPathEntry.length() == 0) {
      continue;
    }
    if (classPathEntry.endsWith("*")) {
      boolean foundWildCardJar=false;
      Path globPath=new Path(classPathEntry).suffix("{.jar,.JAR}");
      FileStatus[] wildcardJars=FileContext.getLocalFSFileContext().util().globStatus(globPath);
      if (wildcardJars != null) {
        for (        FileStatus wildcardJar : wildcardJars) {
          foundWildCardJar=true;
          classPathEntryList.add(wildcardJar.getPath().toUri().toURL().toExternalForm());
        }
      }
      if (!foundWildCardJar) {
        unexpandedWildcardClasspath.append(File.pathSeparator);
        unexpandedWildcardClasspath.append(classPathEntry);
      }
    }
 else {
      File fileCpEntry=null;
      if (!new Path(classPathEntry).isAbsolute()) {
        fileCpEntry=new File(targetDir.toString(),classPathEntry);
      }
 else {
        fileCpEntry=new File(classPathEntry);
      }
      String classPathEntryUrl=fileCpEntry.toURI().toURL().toExternalForm();
      if (classPathEntry.endsWith(Path.SEPARATOR) && !classPathEntryUrl.endsWith(Path.SEPARATOR)) {
        classPathEntryUrl=classPathEntryUrl + Path.SEPARATOR;
      }
      classPathEntryList.add(classPathEntryUrl);
    }
  }
  String jarClassPath=StringUtils.join(" ",classPathEntryList);
  Manifest jarManifest=new Manifest();
  jarManifest.getMainAttributes().putValue(Attributes.Name.MANIFEST_VERSION.toString(),"1.0");
  jarManifest.getMainAttributes().putValue(Attributes.Name.CLASS_PATH.toString(),jarClassPath);
  File classPathJar=File.createTempFile("classpath-",".jar",workingDir);
  FileOutputStream fos=null;
  BufferedOutputStream bos=null;
  JarOutputStream jos=null;
  try {
    fos=new FileOutputStream(classPathJar);
    bos=new BufferedOutputStream(fos);
    jos=new JarOutputStream(bos,jarManifest);
  }
  finally {
    IOUtils.cleanup(LOG,jos,bos,fos);
  }
  String[] jarCp={classPathJar.getCanonicalPath(),unexpandedWildcardClasspath.toString()};
  return jarCp;
}
