{
  MiniDFSCluster cluster=null;
  int numDataNodes=4;
  String testFile="/replication-test-file";
  Path testPath=new Path(testFile);
  byte buffer[]=new byte[1024];
  for (int i=0; i < buffer.length; i++) {
    buffer[i]='1';
  }
  try {
    Configuration conf=new HdfsConfiguration();
    conf.set(DFSConfigKeys.DFS_REPLICATION_KEY,Integer.toString(numDataNodes));
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build();
    cluster.waitActive();
    DFSClient dfsClient=new DFSClient(new InetSocketAddress("localhost",cluster.getNameNodePort()),conf);
    OutputStream out=cluster.getFileSystem().create(testPath);
    out.write(buffer);
    out.close();
    waitForBlockReplication(testFile,dfsClient.getNamenode(),numDataNodes,-1);
    ExtendedBlock block=dfsClient.getNamenode().getBlockLocations(testFile,0,Long.MAX_VALUE).get(0).getBlock();
    cluster.shutdown();
    for (int i=0; i < 25; i++) {
      buffer[i]='0';
    }
    int fileCount=0;
    for (int dnIndex=0; dnIndex < 3; dnIndex++) {
      File blockFile=cluster.getBlockFile(dnIndex,block);
      LOG.info("Checking for file " + blockFile);
      if (blockFile != null && blockFile.exists()) {
        if (fileCount == 0) {
          LOG.info("Deleting file " + blockFile);
          assertTrue(blockFile.delete());
        }
 else {
          LOG.info("Corrupting file " + blockFile);
          long len=blockFile.length();
          assertTrue(len > 50);
          RandomAccessFile blockOut=new RandomAccessFile(blockFile,"rw");
          try {
            blockOut.seek(len / 3);
            blockOut.write(buffer,0,25);
          }
  finally {
            blockOut.close();
          }
        }
        fileCount++;
      }
    }
    assertEquals(3,fileCount);
    LOG.info("Restarting minicluster after deleting a replica and corrupting 2 crcs");
    conf=new HdfsConfiguration();
    conf.set(DFSConfigKeys.DFS_REPLICATION_KEY,Integer.toString(numDataNodes));
    conf.set(DFSConfigKeys.DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY,Integer.toString(2));
    conf.set("dfs.datanode.block.write.timeout.sec",Integer.toString(5));
    conf.set(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY,"0.75f");
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes * 2).format(false).build();
    cluster.waitActive();
    dfsClient=new DFSClient(new InetSocketAddress("localhost",cluster.getNameNodePort()),conf);
    waitForBlockReplication(testFile,dfsClient.getNamenode(),numDataNodes,-1);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
