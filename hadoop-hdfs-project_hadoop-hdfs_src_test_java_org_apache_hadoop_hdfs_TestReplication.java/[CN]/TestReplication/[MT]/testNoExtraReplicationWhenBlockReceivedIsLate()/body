{
  LOG.info("Test block replication when blockReceived is late");
  final short numDataNodes=3;
  final short replication=3;
  final Configuration conf=new Configuration();
  conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,1024);
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build();
  final String testFile="/replication-test-file";
  final Path testPath=new Path(testFile);
  final BlockManager bm=cluster.getNameNode().getNamesystem().getBlockManager();
  try {
    cluster.waitActive();
    NameNode nn=cluster.getNameNode();
    DataNode dn=cluster.getDataNodes().get(0);
    DatanodeProtocolClientSideTranslatorPB spy=DataNodeTestUtils.spyOnBposToNN(dn,nn);
    DelayAnswer delayer=new GenericTestUtils.DelayAnswer(LOG);
    Mockito.doAnswer(delayer).when(spy).blockReceivedAndDeleted(Mockito.<DatanodeRegistration>anyObject(),Mockito.anyString(),Mockito.<StorageReceivedDeletedBlocks[]>anyObject());
    FileSystem fs=cluster.getFileSystem();
    DFSTestUtil.createFile(fs,testPath,1500,replication,0);
    BlockManagerTestUtil.computeAllPendingWork(bm);
    assertTrue(pendingReplicationCount(bm) > 0);
    delayer.waitForCall();
    delayer.proceed();
    delayer.waitForResult();
    for (    DataNode d : cluster.getDataNodes()) {
      DataNodeTestUtils.triggerHeartbeat(d);
    }
    try {
      GenericTestUtils.waitFor(new Supplier<Boolean>(){
        @Override public Boolean get(){
          return pendingReplicationCount(bm) == 0;
        }
      }
,100,3000);
    }
 catch (    TimeoutException e) {
      fail("timed out while waiting for no pending replication.");
    }
    assertNoReplicationWasPerformed(cluster);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
