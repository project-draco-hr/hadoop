{
  ResourceWeights sharesOfCluster1=new ResourceWeights();
  ResourceWeights sharesOfCluster2=new ResourceWeights();
  ResourceWeights sharesOfMinShare1=new ResourceWeights();
  ResourceWeights sharesOfMinShare2=new ResourceWeights();
  ResourceType[] resourceOrder1=new ResourceType[NUM_RESOURCES];
  ResourceType[] resourceOrder2=new ResourceType[NUM_RESOURCES];
  calculateShares(s1.getResourceUsage(),clusterCapacity,sharesOfCluster1,resourceOrder1,s1.getWeights());
  calculateShares(s1.getResourceUsage(),s1.getMinShare(),sharesOfMinShare1,null,ResourceWeights.NEUTRAL);
  calculateShares(s2.getResourceUsage(),clusterCapacity,sharesOfCluster2,resourceOrder2,s2.getWeights());
  calculateShares(s2.getResourceUsage(),s2.getMinShare(),sharesOfMinShare2,null,ResourceWeights.NEUTRAL);
  boolean s1Needy=sharesOfMinShare1.getWeight(resourceOrder1[0]) < 1.0f;
  boolean s2Needy=sharesOfMinShare2.getWeight(resourceOrder2[0]) < 1.0f;
  int res=0;
  if (!s2Needy && !s1Needy) {
    res=compareShares(sharesOfCluster1,sharesOfCluster2,resourceOrder1,resourceOrder2);
  }
 else   if (s1Needy && !s2Needy) {
    res=-1;
  }
 else   if (s2Needy && !s1Needy) {
    res=1;
  }
 else {
    res=compareShares(sharesOfMinShare1,sharesOfMinShare2,resourceOrder1,resourceOrder2);
  }
  if (res == 0) {
    res=(int)(s1.getStartTime() - s2.getStartTime());
  }
  return res;
}
