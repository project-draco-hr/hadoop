{
  StringBuffer sb=new StringBuffer();
  for (int i=0; i < columns; i++) {
    Object obj=values.get(i);
    Integer type=types.get(i);
switch (type) {
case Types.NULL:
      sb.append("");
    break;
case Types.BIGINT:
  if (obj instanceof Long) {
    sb.append(obj.toString());
    break;
  }
case Types.INTEGER:
if (obj instanceof Integer) {
  sb.append(obj.toString());
  break;
}
case Types.TINYINT:
case Types.SMALLINT:
if (obj instanceof Short) {
sb.append(obj.toString());
break;
}
if (obj instanceof LongWritable) {
sb.append(((LongWritable)obj).get());
break;
}
if (obj instanceof VLongWritable) {
sb.append(((VLongWritable)obj).get());
break;
}
if (obj instanceof VIntWritable) {
sb.append(((VIntWritable)obj).get());
break;
}
case Types.REAL:
case Types.DECIMAL:
case Types.NUMERIC:
if (obj instanceof BigDecimal) {
sb.append(obj.toString());
break;
}
case Types.DOUBLE:
if (obj instanceof Double) {
sb.append(obj.toString());
break;
}
if (obj instanceof DoubleWritable) {
sb.append(((DoubleWritable)obj).get());
break;
}
case Types.FLOAT:
if (obj instanceof Float) {
sb.append(obj.toString());
break;
}
if (obj instanceof FloatWritable) {
sb.append(((FloatWritable)obj).get());
break;
}
case Types.BINARY:
case Types.LONGVARBINARY:
case Types.VARBINARY:
if (obj == null) sb.append("");
 else sb.append(ByteBuffer.wrap((byte[])obj).asCharBuffer());
break;
case Types.BIT:
case Types.BOOLEAN:
if (obj instanceof Boolean) {
if ((Boolean)obj) sb.append("true");
 else sb.append("false");
break;
}
if (obj instanceof BooleanWritable) {
if (((BooleanWritable)obj).get()) sb.append("true");
 else sb.append("false");
break;
}
case Types.LONGNVARCHAR:
case Types.LONGVARCHAR:
case Types.NCHAR:
case Types.NVARCHAR:
case Types.VARCHAR:
if (obj instanceof String) {
sb.append((String)obj);
break;
}
if (obj instanceof byte[]) {
sb.append((byte[])obj);
break;
}
if (obj instanceof BytesWritable) {
sb.append(((BytesWritable)obj).getBytes());
break;
}
case Types.CHAR:
if (obj instanceof Character) {
sb.append((Character)obj);
break;
}
if (obj instanceof ByteWritable) {
sb.append(((ByteWritable)obj).get());
break;
}
case Types.DATE:
case Types.TIME:
case Types.TIMESTAMP:
if (obj instanceof java.util.Date) sb.append(sqlfmt.format((java.util.Date)obj));
 else if (obj instanceof Date) sb.append(sqlfmt.format((Date)obj));
 else if (obj instanceof Time) sb.append(sqlfmt.format((Time)obj));
 else if (obj instanceof Timestamp) sb.append(sqlfmt.format((Timestamp)obj));
break;
default :
if (obj == null) sb.append("");
 else throw new RuntimeException("Unknown type value " + types.get(i));
}
if (i < columns - 1) sb.append(delimiterArg);
 else sb.append(terminatorArg);
}
return sb.toString();
}
