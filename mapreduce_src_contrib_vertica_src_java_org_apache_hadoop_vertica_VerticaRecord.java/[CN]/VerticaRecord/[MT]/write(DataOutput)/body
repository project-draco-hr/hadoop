{
  out.writeInt(columns);
  for (int i=0; i < columns; i++) {
    Object obj=values.get(i);
    Integer type=types.get(i);
    if (obj == null)     out.writeInt(Types.NULL);
 else     out.writeInt(type);
  }
  for (int i=0; i < columns; i++) {
    Object obj=values.get(i);
    Integer type=types.get(i);
    if (obj == null)     continue;
switch (type) {
case Types.BIGINT:
      out.writeLong((Long)obj);
    break;
case Types.INTEGER:
  out.writeInt((Integer)obj);
break;
case Types.TINYINT:
case Types.SMALLINT:
out.writeShort((Short)obj);
break;
case Types.REAL:
case Types.DECIMAL:
case Types.NUMERIC:
Text.writeString(out,obj.toString());
break;
case Types.DOUBLE:
out.writeDouble((Double)obj);
break;
case Types.FLOAT:
out.writeFloat((Float)obj);
break;
case Types.BINARY:
case Types.LONGVARBINARY:
case Types.VARBINARY:
Text.writeString(out,StringUtils.byteToHexString((byte[])obj));
break;
case Types.BIT:
case Types.BOOLEAN:
out.writeBoolean((Boolean)obj);
break;
case Types.CHAR:
out.writeChar((Character)obj);
break;
case Types.LONGNVARCHAR:
case Types.LONGVARCHAR:
case Types.NCHAR:
case Types.NVARCHAR:
case Types.VARCHAR:
Text.writeString(out,(String)obj);
break;
case Types.DATE:
if (obj instanceof java.util.Date) {
if (dateString) Text.writeString(out,datefmt.format((java.util.Date)obj));
 else out.writeLong(((java.util.Date)obj).getTime());
}
 else {
if (dateString) Text.writeString(out,datefmt.format((Date)obj));
 else out.writeLong(((Date)obj).getTime());
}
break;
case Types.TIME:
if (dateString) Text.writeString(out,timefmt.format((Time)obj));
 else out.writeLong(((Time)obj).getTime());
break;
case Types.TIMESTAMP:
if (dateString) Text.writeString(out,tmstmpfmt.format((Timestamp)obj));
 else out.writeLong(((Timestamp)obj).getTime());
break;
default :
throw new IOException("Unknown type value " + types.get(i));
}
}
}
