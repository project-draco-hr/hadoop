{
  this.monitoringInterval=conf.getLong(YarnConfiguration.NM_CONTAINER_MON_INTERVAL_MS,conf.getLong(YarnConfiguration.NM_RESOURCE_MON_INTERVAL_MS,YarnConfiguration.DEFAULT_NM_RESOURCE_MON_INTERVAL_MS));
  Class<? extends ResourceCalculatorPlugin> clazz=conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,conf.getClass(YarnConfiguration.NM_MON_RESOURCE_CALCULATOR,null,ResourceCalculatorPlugin.class),ResourceCalculatorPlugin.class);
  this.resourceCalculatorPlugin=ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz,conf);
  LOG.info(" Using ResourceCalculatorPlugin : " + this.resourceCalculatorPlugin);
  processTreeClass=conf.getClass(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE,null,ResourceCalculatorProcessTree.class);
  this.conf=conf;
  LOG.info(" Using ResourceCalculatorProcessTree : " + this.processTreeClass);
  this.containerMetricsEnabled=conf.getBoolean(YarnConfiguration.NM_CONTAINER_METRICS_ENABLE,YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_ENABLE);
  this.containerMetricsPeriodMs=conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_PERIOD_MS,YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_PERIOD_MS);
  this.containerMetricsUnregisterDelayMs=conf.getLong(YarnConfiguration.NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS,YarnConfiguration.DEFAULT_NM_CONTAINER_METRICS_UNREGISTER_DELAY_MS);
  long configuredPMemForContainers=NodeManagerHardwareUtils.getContainerMemoryMB(this.resourceCalculatorPlugin,conf) * 1024 * 1024L;
  long configuredVCoresForContainers=NodeManagerHardwareUtils.getVCores(this.resourceCalculatorPlugin,conf);
  this.maxPmemAllottedForContainers=configuredPMemForContainers;
  this.maxVCoresAllottedForContainers=configuredVCoresForContainers;
  vmemRatio=conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);
  Preconditions.checkArgument(vmemRatio > 0.99f,YarnConfiguration.NM_VMEM_PMEM_RATIO + " should be at least 1.0");
  this.maxVmemAllottedForContainers=(long)(vmemRatio * configuredPMemForContainers);
  pmemCheckEnabled=conf.getBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,YarnConfiguration.DEFAULT_NM_PMEM_CHECK_ENABLED);
  vmemCheckEnabled=conf.getBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,YarnConfiguration.DEFAULT_NM_VMEM_CHECK_ENABLED);
  LOG.info("Physical memory check enabled: " + pmemCheckEnabled);
  LOG.info("Virtual memory check enabled: " + vmemCheckEnabled);
  containersMonitorEnabled=isEnabled();
  LOG.info("ContainersMonitor enabled: " + containersMonitorEnabled);
  nodeCpuPercentageForYARN=NodeManagerHardwareUtils.getNodeCpuPercentage(conf);
  if (pmemCheckEnabled) {
    long totalPhysicalMemoryOnNM=UNKNOWN_MEMORY_LIMIT;
    if (this.resourceCalculatorPlugin != null) {
      totalPhysicalMemoryOnNM=this.resourceCalculatorPlugin.getPhysicalMemorySize();
      if (totalPhysicalMemoryOnNM <= 0) {
        LOG.warn("NodeManager's totalPmem could not be calculated. " + "Setting it to " + UNKNOWN_MEMORY_LIMIT);
        totalPhysicalMemoryOnNM=UNKNOWN_MEMORY_LIMIT;
      }
    }
    if (totalPhysicalMemoryOnNM != UNKNOWN_MEMORY_LIMIT && this.maxPmemAllottedForContainers > totalPhysicalMemoryOnNM * 0.80f) {
      LOG.warn("NodeManager configured with " + TraditionalBinaryPrefix.long2String(maxPmemAllottedForContainers,"",1) + " physical memory allocated to containers, which is more than "+ "80% of the total physical memory available ("+ TraditionalBinaryPrefix.long2String(totalPhysicalMemoryOnNM,"",1)+ "). Thrashing might happen.");
    }
  }
  super.serviceInit(conf);
}
