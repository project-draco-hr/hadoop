{
  ContainerId containerId=monitoringEvent.getContainerId();
  if (!containersMonitorEnabled) {
    if (monitoringEvent.getType() == ContainersMonitorEventType.CHANGE_MONITORING_CONTAINER_RESOURCE) {
      ChangeMonitoringContainerResourceEvent changeEvent=(ChangeMonitoringContainerResourceEvent)monitoringEvent;
      changeContainerResource(containerId,changeEvent.getResource());
    }
    return;
  }
switch (monitoringEvent.getType()) {
case START_MONITORING_CONTAINER:
    ContainerStartMonitoringEvent startEvent=(ContainerStartMonitoringEvent)monitoringEvent;
  LOG.info("Starting resource-monitoring for " + containerId);
updateContainerMetrics(monitoringEvent);
trackingContainers.put(containerId,new ProcessTreeInfo(containerId,null,null,startEvent.getVmemLimit(),startEvent.getPmemLimit(),startEvent.getCpuVcores()));
break;
case STOP_MONITORING_CONTAINER:
LOG.info("Stopping resource-monitoring for " + containerId);
updateContainerMetrics(monitoringEvent);
trackingContainers.remove(containerId);
break;
case CHANGE_MONITORING_CONTAINER_RESOURCE:
ChangeMonitoringContainerResourceEvent changeEvent=(ChangeMonitoringContainerResourceEvent)monitoringEvent;
ProcessTreeInfo processTreeInfo=trackingContainers.get(containerId);
if (processTreeInfo == null) {
LOG.warn("Failed to track container " + containerId.toString() + ". It may have already completed.");
break;
}
LOG.info("Changing resource-monitoring for " + containerId);
updateContainerMetrics(monitoringEvent);
long pmemLimit=changeEvent.getResource().getMemory() * 1024L * 1024L;
long vmemLimit=(long)(pmemLimit * vmemRatio);
int cpuVcores=changeEvent.getResource().getVirtualCores();
processTreeInfo.setResourceLimit(pmemLimit,vmemLimit,cpuVcores);
changeContainerResource(containerId,changeEvent.getResource());
break;
default :
}
}
