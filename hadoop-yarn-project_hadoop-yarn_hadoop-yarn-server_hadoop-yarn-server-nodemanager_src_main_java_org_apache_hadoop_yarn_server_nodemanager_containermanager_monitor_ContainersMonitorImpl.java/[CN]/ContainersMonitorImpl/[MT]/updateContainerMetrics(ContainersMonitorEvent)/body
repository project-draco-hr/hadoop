{
  if (!containerMetricsEnabled || monitoringEvent == null) {
    return;
  }
  ContainerId containerId=monitoringEvent.getContainerId();
  ContainerMetrics usageMetrics;
  int vmemLimitMBs;
  int pmemLimitMBs;
  int cpuVcores;
switch (monitoringEvent.getType()) {
case START_MONITORING_CONTAINER:
    usageMetrics=ContainerMetrics.forContainer(containerId,containerMetricsPeriodMs,containerMetricsUnregisterDelayMs);
  ContainerStartMonitoringEvent startEvent=(ContainerStartMonitoringEvent)monitoringEvent;
usageMetrics.recordStateChangeDurations(startEvent.getLaunchDuration(),startEvent.getLocalizationDuration());
cpuVcores=startEvent.getCpuVcores();
vmemLimitMBs=(int)(startEvent.getVmemLimit() >> 20);
pmemLimitMBs=(int)(startEvent.getPmemLimit() >> 20);
usageMetrics.recordResourceLimit(vmemLimitMBs,pmemLimitMBs,cpuVcores);
break;
case STOP_MONITORING_CONTAINER:
usageMetrics=ContainerMetrics.getContainerMetrics(containerId);
if (usageMetrics != null) {
usageMetrics.finished();
}
break;
case CHANGE_MONITORING_CONTAINER_RESOURCE:
usageMetrics=ContainerMetrics.forContainer(containerId,containerMetricsPeriodMs,containerMetricsUnregisterDelayMs);
ChangeMonitoringContainerResourceEvent changeEvent=(ChangeMonitoringContainerResourceEvent)monitoringEvent;
Resource resource=changeEvent.getResource();
pmemLimitMBs=(int)resource.getMemorySize();
vmemLimitMBs=(int)(pmemLimitMBs * vmemRatio);
cpuVcores=resource.getVirtualCores();
usageMetrics.recordResourceLimit(vmemLimitMBs,pmemLimitMBs,cpuVcores);
break;
default :
break;
}
}
