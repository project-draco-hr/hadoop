{
  Configuration conf=getConf();
  conf.setInt(DFSConfigKeys.DFS_HA_LOGROLL_PERIOD_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_ALL_NAMESNODES_RETRY_KEY,100);
  MiniDFSNNTopology topology=new MiniDFSNNTopology().addNameservice(new MiniDFSNNTopology.NSConf("ns1").addNN(new MiniDFSNNTopology.NNConf("nn1").setIpcPort(ServerSocketUtil.getPort(0,100))).addNN(new MiniDFSNNTopology.NNConf("nn2").setIpcPort(ServerSocketUtil.getPort(0,100))).addNN(new MiniDFSNNTopology.NNConf("nn3").setIpcPort(ServerSocketUtil.getPort(0,100))));
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(topology).numDataNodes(0).build();
  try {
    cluster.transitionToStandby(0);
    cluster.transitionToStandby(1);
    cluster.transitionToStandby(2);
    try {
      waitForLogRollInSharedDir(cluster,3);
      fail("After all NN become Standby state, Standby NN should roll log, " + "but it will be failed");
    }
 catch (    TimeoutException ignore) {
    }
    cluster.transitionToActive(0);
    waitForLogRollInSharedDir(cluster,3);
  }
  finally {
    cluster.shutdown();
  }
}
