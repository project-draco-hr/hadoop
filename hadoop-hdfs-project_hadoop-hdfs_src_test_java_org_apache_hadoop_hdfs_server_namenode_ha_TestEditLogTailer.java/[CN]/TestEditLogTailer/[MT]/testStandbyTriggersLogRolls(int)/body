{
  Configuration conf=getConf();
  conf.setInt(DFSConfigKeys.DFS_HA_LOGROLL_PERIOD_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_ALL_NAMESNODES_RETRY_KEY,100);
  MiniDFSCluster cluster=null;
  for (int i=0; i < 5; i++) {
    try {
      int[] ports=ServerSocketUtil.getPorts(3);
      MiniDFSNNTopology topology=new MiniDFSNNTopology().addNameservice(new MiniDFSNNTopology.NSConf("ns1").addNN(new MiniDFSNNTopology.NNConf("nn1").setIpcPort(ports[0])).addNN(new MiniDFSNNTopology.NNConf("nn2").setIpcPort(ports[1])).addNN(new MiniDFSNNTopology.NNConf("nn3").setIpcPort(ports[2])));
      cluster=new MiniDFSCluster.Builder(conf).nnTopology(topology).numDataNodes(0).build();
      break;
    }
 catch (    BindException e) {
      continue;
    }
  }
  if (cluster == null) {
    fail("failed to start mini cluster.");
  }
  try {
    cluster.transitionToActive(activeIndex);
    waitForLogRollInSharedDir(cluster,3);
  }
  finally {
    cluster.shutdown();
  }
}
