{
  Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_ALL_NAMESNODES_RETRY_KEY,100);
  HAUtil.setAllowStandbyReads(conf,true);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(0).build();
  cluster.waitActive();
  cluster.transitionToActive(0);
  NameNode nn1=cluster.getNameNode(0);
  NameNode nn2=cluster.getNameNode(1);
  try {
    for (int i=0; i < DIRS_TO_MAKE / 2; i++) {
      NameNodeAdapter.mkdirs(nn1,getDirPath(i),new PermissionStatus("test","test",new FsPermission((short)00755)),true);
    }
    HATestUtil.waitForStandbyToCatchUp(nn1,nn2);
    for (int i=0; i < DIRS_TO_MAKE / 2; i++) {
      assertTrue(NameNodeAdapter.getFileInfo(nn2,getDirPath(i),false).isDir());
    }
    for (int i=DIRS_TO_MAKE / 2; i < DIRS_TO_MAKE; i++) {
      NameNodeAdapter.mkdirs(nn1,getDirPath(i),new PermissionStatus("test","test",new FsPermission((short)00755)),true);
    }
    HATestUtil.waitForStandbyToCatchUp(nn1,nn2);
    for (int i=DIRS_TO_MAKE / 2; i < DIRS_TO_MAKE; i++) {
      assertTrue(NameNodeAdapter.getFileInfo(nn2,getDirPath(i),false).isDir());
    }
  }
  finally {
    cluster.shutdown();
  }
}
