{
  fileSystemTestHelper.createFile(fsView,"/user/foo");
  Assert.assertTrue("Created file should be type file",fsView.isFile(new Path("/user/foo")));
  Assert.assertTrue("Target of created file should be type file",fsTarget.isFile(new Path(targetTestRoot,"user/foo")));
  Assert.assertTrue("Delete should suceed",fsView.delete(new Path("/user/foo"),false));
  Assert.assertFalse("File should not exist after delete",fsView.exists(new Path("/user/foo")));
  Assert.assertFalse("Target File should not exist after delete",fsTarget.exists(new Path(targetTestRoot,"user/foo")));
  fileSystemTestHelper.createFile(fsView,"/internalDir/linkToDir2/foo");
  Assert.assertTrue("Created file should be type file",fsView.isFile(new Path("/internalDir/linkToDir2/foo")));
  Assert.assertTrue("Target of created file should be type file",fsTarget.isFile(new Path(targetTestRoot,"dir2/foo")));
  Assert.assertTrue("Delete should suceed",fsView.delete(new Path("/internalDir/linkToDir2/foo"),false));
  Assert.assertFalse("File should not exist after delete",fsView.exists(new Path("/internalDir/linkToDir2/foo")));
  Assert.assertFalse("Target File should not exist after delete",fsTarget.exists(new Path(targetTestRoot,"dir2/foo")));
  fileSystemTestHelper.createFile(fsView,"/internalDir/internalDir2/linkToDir3/foo");
  Assert.assertTrue("Created file should be type file",fsView.isFile(new Path("/internalDir/internalDir2/linkToDir3/foo")));
  Assert.assertTrue("Target of created file should be type file",fsTarget.isFile(new Path(targetTestRoot,"dir3/foo")));
  fileSystemTestHelper.createFile(fsView,"/internalDir/linkToDir2/missingDir/miss2/foo");
  Assert.assertTrue("Created file should be type file",fsView.isFile(new Path("/internalDir/linkToDir2/missingDir/miss2/foo")));
  Assert.assertTrue("Target of created file should be type file",fsTarget.isFile(new Path(targetTestRoot,"dir2/missingDir/miss2/foo")));
  Assert.assertTrue("Delete should succeed",fsView.delete(new Path("/internalDir/internalDir2/linkToDir3/foo"),false));
  Assert.assertFalse("File should not exist after delete",fsView.exists(new Path("/internalDir/internalDir2/linkToDir3/foo")));
  Assert.assertFalse("Target File should not exist after delete",fsTarget.exists(new Path(targetTestRoot,"dir3/foo")));
  fsView.mkdirs(fileSystemTestHelper.getTestRootPath(fsView,"/user/dirX"));
  Assert.assertTrue("New dir should be type dir",fsView.isDirectory(new Path("/user/dirX")));
  Assert.assertTrue("Target of new dir should be of type dir",fsTarget.isDirectory(new Path(targetTestRoot,"user/dirX")));
  fsView.mkdirs(fileSystemTestHelper.getTestRootPath(fsView,"/user/dirX/dirY"));
  Assert.assertTrue("New dir should be type dir",fsView.isDirectory(new Path("/user/dirX/dirY")));
  Assert.assertTrue("Target of new dir should be of type dir",fsTarget.isDirectory(new Path(targetTestRoot,"user/dirX/dirY")));
  Assert.assertTrue("Delete should succeed",fsView.delete(new Path("/user/dirX/dirY"),false));
  Assert.assertFalse("File should not exist after delete",fsView.exists(new Path("/user/dirX/dirY")));
  Assert.assertFalse("Target File should not exist after delete",fsTarget.exists(new Path(targetTestRoot,"user/dirX/dirY")));
  Assert.assertTrue("Delete should succeed",fsView.delete(new Path("/user/dirX"),false));
  Assert.assertFalse("File should not exist after delete",fsView.exists(new Path("/user/dirX")));
  Assert.assertFalse(fsTarget.exists(new Path(targetTestRoot,"user/dirX")));
  fileSystemTestHelper.createFile(fsView,"/user/foo");
  fsView.rename(new Path("/user/foo"),new Path("/user/fooBar"));
  Assert.assertFalse("Renamed src should not exist",fsView.exists(new Path("/user/foo")));
  Assert.assertFalse("Renamed src should not exist in target",fsTarget.exists(new Path(targetTestRoot,"user/foo")));
  Assert.assertTrue("Renamed dest should  exist as file",fsView.isFile(fileSystemTestHelper.getTestRootPath(fsView,"/user/fooBar")));
  Assert.assertTrue("Renamed dest should  exist as file in target",fsTarget.isFile(new Path(targetTestRoot,"user/fooBar")));
  fsView.mkdirs(new Path("/user/dirFoo"));
  fsView.rename(new Path("/user/dirFoo"),new Path("/user/dirFooBar"));
  Assert.assertFalse("Renamed src should not exist",fsView.exists(new Path("/user/dirFoo")));
  Assert.assertFalse("Renamed src should not exist in target",fsTarget.exists(new Path(targetTestRoot,"user/dirFoo")));
  Assert.assertTrue("Renamed dest should  exist as dir",fsView.isDirectory(fileSystemTestHelper.getTestRootPath(fsView,"/user/dirFooBar")));
  Assert.assertTrue("Renamed dest should  exist as dir in target",fsTarget.isDirectory(new Path(targetTestRoot,"user/dirFooBar")));
  fsView.mkdirs(new Path("/targetRoot/dirFoo"));
  Assert.assertTrue(fsView.exists(new Path("/targetRoot/dirFoo")));
  boolean dirFooPresent=false;
  for (  FileStatus fileStatus : listStatusInternal(located,new Path("/targetRoot/"))) {
    if (fileStatus.getPath().getName().equals("dirFoo")) {
      dirFooPresent=true;
    }
  }
  Assert.assertTrue(dirFooPresent);
}
