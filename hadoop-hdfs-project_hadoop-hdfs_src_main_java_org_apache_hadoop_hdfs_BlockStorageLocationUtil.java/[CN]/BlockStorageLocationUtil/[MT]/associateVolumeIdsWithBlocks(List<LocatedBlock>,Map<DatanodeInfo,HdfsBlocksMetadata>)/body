{
  Map<Long,LocatedBlock> blockIdToLocBlock=new HashMap<Long,LocatedBlock>();
  for (  LocatedBlock b : blocks) {
    blockIdToLocBlock.put(b.getBlock().getBlockId(),b);
  }
  Map<LocatedBlock,List<VolumeId>> blockVolumeIds=new HashMap<LocatedBlock,List<VolumeId>>();
  for (  LocatedBlock b : blocks) {
    ArrayList<VolumeId> l=new ArrayList<VolumeId>(b.getLocations().length);
    for (int i=0; i < b.getLocations().length; i++) {
      l.add(null);
    }
    blockVolumeIds.put(b,l);
  }
  for (  Map.Entry<DatanodeInfo,HdfsBlocksMetadata> entry : metadatas.entrySet()) {
    DatanodeInfo datanode=entry.getKey();
    HdfsBlocksMetadata metadata=entry.getValue();
    if (metadata == null) {
      continue;
    }
    long[] metaBlockIds=metadata.getBlockIds();
    List<byte[]> metaVolumeIds=metadata.getVolumeIds();
    List<Integer> metaVolumeIndexes=metadata.getVolumeIndexes();
    for (int j=0; j < metaBlockIds.length; j++) {
      int volumeIndex=metaVolumeIndexes.get(j);
      long blockId=metaBlockIds[j];
      if (volumeIndex == Integer.MAX_VALUE || volumeIndex >= metaVolumeIds.size() || !blockIdToLocBlock.containsKey(blockId)) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("No data for block " + blockId);
        }
        continue;
      }
      byte[] volumeId=metaVolumeIds.get(volumeIndex);
      HdfsVolumeId id=new HdfsVolumeId(volumeId);
      LocatedBlock locBlock=blockIdToLocBlock.get(blockId);
      DatanodeInfo[] dnInfos=locBlock.getLocations();
      int index=-1;
      for (int k=0; k < dnInfos.length; k++) {
        if (dnInfos[k].equals(datanode)) {
          index=k;
          break;
        }
      }
      if (index < 0) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Datanode responded with a block volume id we did" + " not request, omitting.");
        }
        continue;
      }
      List<VolumeId> volumeIds=blockVolumeIds.get(locBlock);
      volumeIds.set(index,id);
    }
  }
  return blockVolumeIds;
}
