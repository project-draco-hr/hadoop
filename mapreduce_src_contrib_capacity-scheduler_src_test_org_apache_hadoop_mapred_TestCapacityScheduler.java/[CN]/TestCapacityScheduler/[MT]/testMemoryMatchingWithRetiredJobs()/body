{
  LOG.debug("Starting cluster with 1 tasktracker, 2 map and 2 reduce slots");
  taskTrackerManager=new FakeTaskTrackerManager(1,2,2);
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",100.0f,true,100));
  taskTrackerManager.addQueues(new String[]{"default"});
  scheduler.setTaskTrackerManager(taskTrackerManager);
  LOG.debug("Assume TT has 2GB for maps and 2GB for reduces");
  scheduler.getConf().setLong(JTConfig.JT_MAX_MAPMEMORY_MB,2 * 1024L);
  scheduler.getConf().setLong(MRConfig.MAPMEMORY_MB,512);
  scheduler.getConf().setLong(JTConfig.JT_MAX_REDUCEMEMORY_MB,2 * 1024L);
  scheduler.getConf().setLong(MRConfig.REDUCEMEMORY_MB,512);
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  LOG.debug("Submitting a normal job with 2 maps and 2 reduces");
  JobConf jConf=new JobConf();
  jConf.setNumMapTasks(2);
  jConf.setNumReduceTasks(2);
  jConf.setMemoryForMapTask(512);
  jConf.setMemoryForReduceTask(512);
  jConf.setQueueName("default");
  jConf.setUser("u1");
  FakeJobInProgress job1=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  Map<String,String> expectedStrings=new HashMap<String,String>();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000001_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000001_0 on tt1");
  List<Task> t=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  checkOccupiedSlots("default",TaskType.MAP,1,1,50.0f);
  checkOccupiedSlots("default",TaskType.REDUCE,1,1,50.0f);
  checkMemReservedForTasksOnTT("tt1",512L,512L);
  taskTrackerManager.killJob(job1.getJobID(),false);
  checkOccupiedSlots("default",TaskType.MAP,0,0,0.0f);
  checkOccupiedSlots("default",TaskType.REDUCE,0,0,0.0f);
  taskTrackerManager.retireJob(job1.getJobID());
  LOG.debug("Submitting another normal job with 2 maps and 2 reduces");
  jConf=new JobConf();
  jConf.setNumMapTasks(2);
  jConf.setNumReduceTasks(2);
  jConf.setMemoryForMapTask(512);
  jConf.setMemoryForReduceTask(512);
  jConf.setQueueName("default");
  jConf.setUser("u1");
  FakeJobInProgress job2=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0002_m_000001_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_000001_0 on tt1");
  List<Task> t1=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  checkOccupiedSlots("default",TaskType.MAP,1,1,50);
  checkOccupiedSlots("default",TaskType.REDUCE,1,1,50);
  checkMemReservedForTasksOnTT("tt1",1024L,1024L);
  assertNull(scheduler.assignTasks(tracker("tt1")));
  for (  Task task : t) {
    taskTrackerManager.finishTask(task.getTaskID().toString(),job1);
  }
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0002_m_000002_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_000002_0 on tt1");
  t=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  checkOccupiedSlots("default",TaskType.MAP,1,2,100.0f);
  checkOccupiedSlots("default",TaskType.REDUCE,1,2,100.0f);
  checkMemReservedForTasksOnTT("tt1",1024L,1024L);
}
