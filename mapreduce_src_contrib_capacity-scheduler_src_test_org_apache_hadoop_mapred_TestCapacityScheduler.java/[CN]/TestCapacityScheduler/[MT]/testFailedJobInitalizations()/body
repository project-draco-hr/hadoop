{
  String[] qs={"default"};
  taskTrackerManager.addQueues(qs);
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",100.0f,true,100));
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  JobQueuesManager mgr=scheduler.jobQueuesManager;
  FakeJobInProgress job=new FakeFailingJobInProgress(new JobID("test",++jobCounter),new JobConf(),taskTrackerManager,"u1",UtilsForTests.getJobTracker());
  job.getStatus().setRunState(JobStatus.PREP);
  taskTrackerManager.submitJob(job);
  assertEquals("Waiting job list does not contain submitted job",1,mgr.getJobQueue("default").getWaitingJobCount());
  assertTrue("Waiting job does not contain submitted job",mgr.getJobQueue("default").getWaitingJobs().contains(job));
  controlledInitializationPoller.selectJobsToInitialize();
  assertEquals("Waiting job list contains submitted job",0,mgr.getJobQueue("default").getWaitingJobCount());
  assertFalse("Waiting job contains submitted job",mgr.getJobQueue("default").getWaitingJobs().contains(job));
  assertFalse("Waiting job contains submitted job",mgr.getJobQueue("default").getRunningJobs().contains(job));
}
