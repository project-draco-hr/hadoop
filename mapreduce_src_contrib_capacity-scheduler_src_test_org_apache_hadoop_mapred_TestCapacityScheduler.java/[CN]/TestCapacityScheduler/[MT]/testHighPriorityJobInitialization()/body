{
  String[] qs={"default"};
  taskTrackerManager.addQueues(qs);
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",100.0f,true,100));
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  JobInitializationPoller initPoller=scheduler.getInitializationPoller();
  Set<JobID> initializedJobsList=initPoller.getInitializedJobList();
  taskTrackerManager.submitJobs(3,3,"default");
  controlledInitializationPoller.selectJobsToInitialize();
  assertEquals(initializedJobsList.size(),6);
  FakeJobInProgress u4j1=taskTrackerManager.submitJob(JobStatus.PREP,1,1,"default","u4");
  FakeJobInProgress u4j2=taskTrackerManager.submitJob(JobStatus.PREP,1,1,"default","u4");
  controlledInitializationPoller.selectJobsToInitialize();
  assertEquals(initializedJobsList.size(),6);
  assertFalse("Contains U4J1 high priority job ",initializedJobsList.contains(u4j1.getJobID()));
  assertFalse("Contains U4J2 Normal priority job ",initializedJobsList.contains(u4j2.getJobID()));
  taskTrackerManager.setPriority(u4j1,JobPriority.VERY_HIGH);
  controlledInitializationPoller.selectJobsToInitialize();
  assertEquals(initializedJobsList.size(),7);
  assertTrue("Does not contain U4J1 high priority job ",initializedJobsList.contains(u4j1.getJobID()));
  assertFalse("Contains U4J2 Normal priority job ",initializedJobsList.contains(u4j2.getJobID()));
  controlledInitializationPoller.stopRunning();
}
