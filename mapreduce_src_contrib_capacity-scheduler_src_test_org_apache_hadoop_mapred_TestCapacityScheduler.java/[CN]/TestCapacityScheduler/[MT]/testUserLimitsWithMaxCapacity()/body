{
  setUp(2,2,2);
  String[] qs={"default"};
  taskTrackerManager.addQueues(qs);
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",50.0f,true,50));
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  scheduler.getRoot().getChildren().get(0).getQueueSchedulingContext().setMaxCapacityPercent(75);
  FakeJobInProgress fjob1=taskTrackerManager.submitJobAndInit(JobStatus.PREP,10,10,"default","u1");
  FakeJobInProgress fjob2=taskTrackerManager.submitJobAndInit(JobStatus.PREP,10,10,"default","u2");
  HashMap<String,String> expectedStrings=new HashMap<String,String>();
  expectedStrings.put(MAP,"attempt_test_0001_m_000001_0 on tt1");
  expectedStrings.put(REDUCE,"attempt_test_0001_r_000001_0 on tt1");
  List<Task> tasks=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  expectedStrings.put(MAP,"attempt_test_0002_m_000001_0 on tt1");
  expectedStrings.put(REDUCE,"attempt_test_0002_r_000001_0 on tt1");
  tasks=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  expectedStrings.put(MAP,"attempt_test_0001_m_000002_0 on tt2");
  expectedStrings.put(REDUCE,"attempt_test_0001_r_000002_0 on tt2");
  tasks=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt2",expectedStrings);
  assertNull(scheduler.assignTasks(tracker("tt2")));
}
