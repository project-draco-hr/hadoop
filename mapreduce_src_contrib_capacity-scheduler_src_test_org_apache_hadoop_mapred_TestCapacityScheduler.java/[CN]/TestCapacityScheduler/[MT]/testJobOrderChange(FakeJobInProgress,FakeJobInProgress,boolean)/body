{
  String queueName=waiting ? "waiting" : "running";
  JobInProgress[] jobs=getJobsInQueue(waiting);
  assertTrue(queueName + " queue doesnt contain job #1 in right order",jobs[0].getJobID().equals(fjob1.getJobID()));
  assertTrue(queueName + " queue doesnt contain job #2 in right order",jobs[1].getJobID().equals(fjob2.getJobID()));
  taskTrackerManager.setStartTime(fjob2,fjob1.startTime - 1);
  jobs=getJobsInQueue(waiting);
  assertTrue("Start time change didnt not work as expected for job #2 in " + queueName + " queue",jobs[0].getJobID().equals(fjob2.getJobID()));
  assertTrue("Start time change didnt not work as expected for job #1 in" + queueName + " queue",jobs[1].getJobID().equals(fjob1.getJobID()));
  assertEquals("Start-time change garbled the " + queueName + " queue",2,jobs.length);
  taskTrackerManager.setPriority(fjob1,JobPriority.HIGH);
  jobs=getJobsInQueue(waiting);
  assertTrue("Priority change didnt not work as expected for job #1 in " + queueName + " queue",jobs[0].getJobID().equals(fjob1.getJobID()));
  assertTrue("Priority change didnt not work as expected for job #2 in " + queueName + " queue",jobs[1].getJobID().equals(fjob2.getJobID()));
  assertEquals("Priority change has garbled the " + queueName + " queue",2,jobs.length);
  taskTrackerManager.setStartTime(fjob1,fjob2.startTime - 1);
  taskTrackerManager.setPriority(fjob1,JobPriority.NORMAL);
}
