{
  taskTrackerManager=new FakeTaskTrackerManager(1,10,10);
  scheduler.setTaskTrackerManager(taskTrackerManager);
  String[] qs={"default"};
  taskTrackerManager.addQueues(qs);
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",100.0f,true,50));
  scheduler.getConf().setLong(JTConfig.JT_MAX_MAPMEMORY_MB,2 * 1024);
  scheduler.getConf().setLong(MRConfig.MAPMEMORY_MB,1 * 1024);
  scheduler.getConf().setLong(JTConfig.JT_MAX_REDUCEMEMORY_MB,2 * 1024);
  scheduler.getConf().setLong(MRConfig.REDUCEMEMORY_MB,1 * 1024);
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  JobConf jConf=new JobConf(conf);
  jConf.setMemoryForMapTask(1 * 1024);
  jConf.setMemoryForReduceTask(1 * 1024);
  jConf.setNumMapTasks(6);
  jConf.setNumReduceTasks(6);
  jConf.setUser("u1");
  jConf.setQueueName("default");
  FakeJobInProgress job1=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  LOG.debug("Submit one high memory(2GB maps, 2GB reduces) job of " + "6 map and 6 reduce tasks");
  jConf=new JobConf(conf);
  jConf.setMemoryForMapTask(2 * 1024);
  jConf.setMemoryForReduceTask(2 * 1024);
  jConf.setNumMapTasks(6);
  jConf.setNumReduceTasks(6);
  jConf.setQueueName("default");
  jConf.setUser("u2");
  FakeJobInProgress job2=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  Map<String,String> expectedStrings=new HashMap<String,String>();
  for (int i=0; i < 5; i++) {
    expectedStrings.clear();
    expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_00000" + (i + 1) + "_0 on tt1");
    expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_00000" + (i + 1) + "_0 on tt1");
    checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  }
  for (int i=0; i < 2; i++) {
    expectedStrings.clear();
    expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0002_m_00000" + (i + 1) + "_0 on tt1");
    expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_00000" + (i + 1) + "_0 on tt1");
    checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  }
  assertNull(scheduler.assignTasks(tracker("tt1")));
}
