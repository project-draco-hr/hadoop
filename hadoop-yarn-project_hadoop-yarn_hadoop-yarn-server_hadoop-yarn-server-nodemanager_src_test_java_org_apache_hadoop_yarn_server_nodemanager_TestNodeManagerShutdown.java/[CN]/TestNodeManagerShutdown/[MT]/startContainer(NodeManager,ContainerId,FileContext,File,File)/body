{
  File scriptFile=createUnhaltingScriptFile(cId,scriptFileDir,processStartFile);
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  NodeId nodeId=BuilderUtils.newNodeId(InetAddress.getByName("localhost").getCanonicalHostName(),12345);
  URL localResourceUri=ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));
  LocalResource localResource=recordFactory.newRecordInstance(LocalResource.class);
  localResource.setResource(localResourceUri);
  localResource.setSize(-1);
  localResource.setVisibility(LocalResourceVisibility.APPLICATION);
  localResource.setType(LocalResourceType.FILE);
  localResource.setTimestamp(scriptFile.lastModified());
  String destinationFile="dest_file";
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  localResources.put(destinationFile,localResource);
  containerLaunchContext.setLocalResources(localResources);
  List<String> commands=Arrays.asList(Shell.getRunScriptCommand(scriptFile));
  containerLaunchContext.setCommands(commands);
  final InetSocketAddress containerManagerBindAddress=NetUtils.createSocketAddrForHost("127.0.0.1",12345);
  UserGroupInformation currentUser=UserGroupInformation.createRemoteUser(cId.toString());
  org.apache.hadoop.security.token.Token<NMTokenIdentifier> nmToken=ConverterUtils.convertFromYarn(nm.getNMContext().getNMTokenSecretManager().createNMToken(cId.getApplicationAttemptId(),nodeId,user),containerManagerBindAddress);
  currentUser.addToken(nmToken);
  ContainerManagementProtocol containerManager=currentUser.doAs(new PrivilegedAction<ContainerManagementProtocol>(){
    @Override public ContainerManagementProtocol run(){
      Configuration conf=new Configuration();
      YarnRPC rpc=YarnRPC.create(conf);
      InetSocketAddress containerManagerBindAddress=NetUtils.createSocketAddrForHost("127.0.0.1",12345);
      return (ContainerManagementProtocol)rpc.getProxy(ContainerManagementProtocol.class,containerManagerBindAddress,conf);
    }
  }
);
  StartContainerRequest scRequest=StartContainerRequest.newInstance(containerLaunchContext,TestContainerManager.createContainerToken(cId,0,nodeId,user,nm.getNMContext().getContainerTokenSecretManager()));
  List<StartContainerRequest> list=new ArrayList<StartContainerRequest>();
  list.add(scRequest);
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  List<ContainerId> containerIds=new ArrayList<ContainerId>();
  containerIds.add(cId);
  GetContainerStatusesRequest request=GetContainerStatusesRequest.newInstance(containerIds);
  ContainerStatus containerStatus=containerManager.getContainerStatuses(request).getContainerStatuses().get(0);
  Assert.assertEquals(ContainerState.RUNNING,containerStatus.getState());
}
