{
  if (fields == null)   return null;
  HashMap<String,String> retVal=new HashMap<String,String>();
  String propRegex="^[A-Za-z][A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)+$";
  Pattern p=Pattern.compile(propRegex);
  int totalFields=0;
  String value;
  for (  Field f : fields) {
    if (configDebug) {
      System.out.println("Field: " + f);
    }
    if (!Modifier.isStatic(f.getModifiers()) || !Modifier.isPublic(f.getModifiers()) || !Modifier.isFinal(f.getModifiers())) {
      continue;
    }
    if (!f.getType().getName().equals("java.lang.String")) {
      continue;
    }
    try {
      value=(String)f.get(null);
    }
 catch (    IllegalAccessException iaException) {
      continue;
    }
    if (configDebug) {
      System.out.println("  Value: " + value);
    }
    if (value.endsWith(".xml") || value.endsWith(".") || value.endsWith("-"))     continue;
    if (configurationPropsToSkipCompare != null) {
      if (configurationPropsToSkipCompare.contains(value)) {
        continue;
      }
    }
    boolean skipPrefix=false;
    if (configurationPrefixToSkipCompare != null) {
      for (      String cfgPrefix : configurationPrefixToSkipCompare) {
        if (value.startsWith(cfgPrefix)) {
          skipPrefix=true;
          break;
        }
      }
    }
    if (skipPrefix) {
      continue;
    }
    Matcher m=p.matcher(value);
    if (!m.find()) {
      if (configDebug) {
        System.out.println("  Passes Regex: false");
      }
      continue;
    }
    if (configDebug) {
      System.out.println("  Passes Regex: true");
    }
    if (!retVal.containsKey(value)) {
      retVal.put(value,f.getName());
    }
 else {
      if (configDebug) {
        System.out.println("ERROR: Already found key for property " + value);
      }
    }
  }
  return retVal;
}
