{
  if (fields == null) {
    return null;
  }
  HashMap<String,String> retVal=new HashMap<String,String>();
  String propRegex="^[A-Za-z][A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)+$";
  Pattern p=Pattern.compile(propRegex);
  int totalFields=0;
  String value;
  for (  Field f : fields) {
    if (!Modifier.isStatic(f.getModifiers()) || !Modifier.isPublic(f.getModifiers()) || !Modifier.isFinal(f.getModifiers())) {
      continue;
    }
    if (f.getName().startsWith("DEFAULT_") || f.getName().endsWith("_DEFAULT")) {
      if (retVal.containsKey(f.getName())) {
        continue;
      }
      try {
        if (f.getType().getName().equals("java.lang.String")) {
          String sValue=(String)f.get(null);
          retVal.put(f.getName(),sValue);
        }
 else         if (f.getType().getName().equals("short")) {
          short shValue=(short)f.get(null);
          retVal.put(f.getName(),Integer.toString(shValue));
        }
 else         if (f.getType().getName().equals("int")) {
          int iValue=(int)f.get(null);
          retVal.put(f.getName(),Integer.toString(iValue));
        }
 else         if (f.getType().getName().equals("long")) {
          long lValue=(long)f.get(null);
          retVal.put(f.getName(),Long.toString(lValue));
        }
 else         if (f.getType().getName().equals("float")) {
          float fValue=(float)f.get(null);
          retVal.put(f.getName(),Float.toString(fValue));
        }
 else         if (f.getType().getName().equals("double")) {
          double dValue=(double)f.get(null);
          retVal.put(f.getName(),Double.toString(dValue));
        }
 else         if (f.getType().getName().equals("boolean")) {
          boolean bValue=(boolean)f.get(null);
          retVal.put(f.getName(),Boolean.toString(bValue));
        }
 else {
          if (defaultDebug) {
            System.out.println("Config variable " + f.getName() + " has unknown type "+ f.getType().getName());
          }
        }
      }
 catch (      IllegalAccessException iaException) {
        iaException.printStackTrace();
      }
    }
  }
  return retVal;
}
