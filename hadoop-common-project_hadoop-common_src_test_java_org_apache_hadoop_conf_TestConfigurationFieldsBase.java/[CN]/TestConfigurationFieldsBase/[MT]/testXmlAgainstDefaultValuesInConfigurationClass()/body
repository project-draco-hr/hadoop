{
  assertTrue(xmlFilename != null);
  assertTrue(configurationMemberVariables != null);
  assertTrue(configurationDefaultVariables != null);
  HashSet<String> xmlPropertiesWithEmptyValue=new HashSet<String>();
  HashSet<String> configPropertiesWithNoDefaultConfig=new HashSet<String>();
  HashMap<String,String> xmlPropertiesMatchingConfigDefault=new HashMap<String,String>();
  HashMap<HashMap<String,String>,HashMap<String,String>> mismatchingXmlConfig=new HashMap<HashMap<String,String>,HashMap<String,String>>();
  for (  Map.Entry<String,String> xEntry : xmlKeyValueMap.entrySet()) {
    String xmlProperty=xEntry.getKey();
    String xmlDefaultValue=xEntry.getValue();
    String configProperty=configurationMemberVariables.get(xmlProperty);
    if (configProperty != null) {
      String defaultConfigName=null;
      String defaultConfigValue=null;
      String defaultNameCheck1="DEFAULT_" + configProperty;
      String defaultValueCheck1=configurationDefaultVariables.get(defaultNameCheck1);
      String defaultNameCheck2=null;
      if (configProperty.endsWith("_KEY")) {
        defaultNameCheck2=configProperty.substring(0,configProperty.length() - 4) + "_DEFAULT";
      }
      String defaultValueCheck2=configurationDefaultVariables.get(defaultNameCheck2);
      String defaultNameCheck3=configProperty + "_DEFAULT";
      String defaultValueCheck3=configurationDefaultVariables.get(defaultNameCheck3);
      if (defaultValueCheck1 != null) {
        defaultConfigName=defaultNameCheck1;
        defaultConfigValue=defaultValueCheck1;
      }
 else       if (defaultValueCheck2 != null) {
        defaultConfigName=defaultNameCheck2;
        defaultConfigValue=defaultValueCheck2;
      }
 else       if (defaultValueCheck3 != null) {
        defaultConfigName=defaultNameCheck3;
        defaultConfigValue=defaultValueCheck3;
      }
      if (defaultConfigValue != null) {
        if (xmlDefaultValue == null) {
          xmlPropertiesWithEmptyValue.add(xmlProperty);
        }
 else         if (!xmlDefaultValue.equals(defaultConfigValue)) {
          HashMap<String,String> xmlEntry=new HashMap<String,String>();
          xmlEntry.put(xmlProperty,xmlDefaultValue);
          HashMap<String,String> configEntry=new HashMap<String,String>();
          configEntry.put(defaultConfigName,defaultConfigValue);
          mismatchingXmlConfig.put(xmlEntry,configEntry);
        }
 else {
          xmlPropertiesMatchingConfigDefault.put(xmlProperty,defaultConfigName);
        }
      }
 else {
        configPropertiesWithNoDefaultConfig.add(configProperty);
      }
    }
 else {
    }
  }
  System.out.println(this.xmlFilename + " has " + mismatchingXmlConfig.size()+ " properties that do not match the default Config value");
  if (mismatchingXmlConfig.size() == 0) {
    System.out.println("  (None)");
  }
 else {
    for (    Map.Entry<HashMap<String,String>,HashMap<String,String>> xcEntry : mismatchingXmlConfig.entrySet()) {
      HashMap<String,String> xmlMap=xcEntry.getKey();
      HashMap<String,String> configMap=xcEntry.getValue();
      for (      Map.Entry<String,String> xmlEntry : xmlMap.entrySet()) {
        System.out.println("  XML Property: " + xmlEntry.getKey());
        System.out.println("  XML Value:    " + xmlEntry.getValue());
      }
      for (      Map.Entry<String,String> configEntry : configMap.entrySet()) {
        System.out.println("  Config Name:  " + configEntry.getKey());
        System.out.println("  Config Value: " + configEntry.getValue());
      }
      System.out.println("");
    }
  }
  System.out.println();
  System.out.println("Configuration(s) have " + configPropertiesWithNoDefaultConfig.size() + " properties with no corresponding default member variable.  These"+ " will need to be verified manually.");
  if (configPropertiesWithNoDefaultConfig.size() == 0) {
    System.out.println("  (None)");
  }
 else {
    Iterator<String> cItr=configPropertiesWithNoDefaultConfig.iterator();
    while (cItr.hasNext()) {
      System.out.println("  " + cItr.next());
    }
  }
  System.out.println();
  System.out.println(this.xmlFilename + " has " + xmlPropertiesWithEmptyValue.size()+ " properties with empty values");
  if (xmlPropertiesWithEmptyValue.size() == 0) {
    System.out.println("  (None)");
  }
 else {
    Iterator<String> xItr=xmlPropertiesWithEmptyValue.iterator();
    while (xItr.hasNext()) {
      System.out.println("  " + xItr.next());
    }
  }
  System.out.println();
  System.out.println(this.xmlFilename + " has " + xmlPropertiesMatchingConfigDefault.size()+ " properties which match a corresponding Config variable");
  if (xmlPropertiesMatchingConfigDefault.size() == 0) {
    System.out.println("  (None)");
  }
 else {
    for (    Map.Entry<String,String> xcEntry : xmlPropertiesMatchingConfigDefault.entrySet()) {
      System.out.println("  " + xcEntry.getKey() + " / "+ xcEntry.getValue());
    }
  }
  System.out.println();
  System.out.println();
  System.out.println("=====");
  System.out.println();
}
