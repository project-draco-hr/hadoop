{
  Block[] blocks=new Block[]{new Block(21),new Block(22)};
  DatanodeInfo[][] dnInfos=new DatanodeInfo[][]{new DatanodeInfo[1],new DatanodeInfo[2]};
  dnInfos[0][0]=new DatanodeInfo();
  dnInfos[1][0]=new DatanodeInfo();
  dnInfos[1][1]=new DatanodeInfo();
  BlockCommand bc=new BlockCommand(DatanodeProtocol.DNA_TRANSFER,"bp1",blocks,dnInfos);
  BlockCommandProto bcProto=PBHelper.convert(bc);
  BlockCommand bc2=PBHelper.convert(bcProto);
  assertEquals(bc.getAction(),bc2.getAction());
  assertEquals(bc.getBlocks().length,bc2.getBlocks().length);
  Block[] blocks2=bc2.getBlocks();
  for (int i=0; i < blocks.length; i++) {
    assertEquals(blocks[i],blocks2[i]);
  }
  DatanodeInfo[][] dnInfos2=bc2.getTargets();
  assertEquals(dnInfos.length,dnInfos2.length);
  for (int i=0; i < dnInfos.length; i++) {
    DatanodeInfo[] d1=dnInfos[i];
    DatanodeInfo[] d2=dnInfos2[i];
    assertEquals(d1.length,d2.length);
    for (int j=0; j < d1.length; j++) {
      compare(d1[j],d2[j]);
    }
  }
}
