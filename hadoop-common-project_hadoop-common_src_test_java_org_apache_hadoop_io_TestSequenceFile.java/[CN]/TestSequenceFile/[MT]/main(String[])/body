{
  int count=1024 * 1024;
  int megabytes=1;
  int factor=10;
  boolean create=true;
  boolean rwonly=false;
  boolean check=false;
  boolean fast=false;
  boolean merge=false;
  String compressType="NONE";
  String compressionCodec="org.apache.hadoop.io.compress.DefaultCodec";
  Path file=null;
  int seed=new Random().nextInt();
  String usage="Usage: testsequencefile " + "[-count N] " + "[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] "+ "-codec <compressionCodec> "+ "[[-rwonly] | {[-megabytes M] [-factor F] [-nocreate] [-fast] [-merge]}] "+ " file";
  if (args.length == 0) {
    System.err.println(usage);
    System.exit(-1);
  }
  FileSystem fs=null;
  try {
    for (int i=0; i < args.length; ++i) {
      if (args[i] == null) {
        continue;
      }
 else       if (args[i].equals("-count")) {
        count=Integer.parseInt(args[++i]);
      }
 else       if (args[i].equals("-megabytes")) {
        megabytes=Integer.parseInt(args[++i]);
      }
 else       if (args[i].equals("-factor")) {
        factor=Integer.parseInt(args[++i]);
      }
 else       if (args[i].equals("-seed")) {
        seed=Integer.parseInt(args[++i]);
      }
 else       if (args[i].equals("-rwonly")) {
        rwonly=true;
      }
 else       if (args[i].equals("-nocreate")) {
        create=false;
      }
 else       if (args[i].equals("-check")) {
        check=true;
      }
 else       if (args[i].equals("-fast")) {
        fast=true;
      }
 else       if (args[i].equals("-merge")) {
        merge=true;
      }
 else       if (args[i].equals("-compressType")) {
        compressType=args[++i];
      }
 else       if (args[i].equals("-codec")) {
        compressionCodec=args[++i];
      }
 else {
        file=new Path(args[i]);
      }
    }
    TestSequenceFile test=new TestSequenceFile();
    fs=file.getFileSystem(test.conf);
    LOG.info("count = " + count);
    LOG.info("megabytes = " + megabytes);
    LOG.info("factor = " + factor);
    LOG.info("create = " + create);
    LOG.info("seed = " + seed);
    LOG.info("rwonly = " + rwonly);
    LOG.info("check = " + check);
    LOG.info("fast = " + fast);
    LOG.info("merge = " + merge);
    LOG.info("compressType = " + compressType);
    LOG.info("compressionCodec = " + compressionCodec);
    LOG.info("file = " + file);
    if (rwonly && (!create || merge || fast)) {
      System.err.println(usage);
      System.exit(-1);
    }
    CompressionType compressionType=CompressionType.valueOf(compressType);
    CompressionCodec codec=(CompressionCodec)ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec),test.conf);
    if (rwonly || (create && !merge)) {
      test.writeTest(fs,count,seed,file,compressionType,codec);
      test.readTest(fs,count,seed,file);
    }
    if (!rwonly) {
      if (merge) {
        test.mergeTest(fs,count,seed,file,compressionType,fast,factor,megabytes);
      }
 else {
        test.sortTest(fs,count,megabytes,factor,fast,file);
      }
    }
    if (check) {
      test.checkSort(fs,count,seed,file);
    }
  }
  finally {
    if (fs != null) {
      fs.close();
    }
  }
}
