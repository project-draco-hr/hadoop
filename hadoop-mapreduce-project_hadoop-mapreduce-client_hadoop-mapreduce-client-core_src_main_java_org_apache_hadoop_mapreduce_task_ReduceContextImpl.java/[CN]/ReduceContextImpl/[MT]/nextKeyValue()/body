{
  if (!hasMore) {
    key=null;
    value=null;
    return false;
  }
  firstValue=!nextKeyIsSame;
  DataInputBuffer nextKey=input.getKey();
  currentRawKey.set(nextKey.getData(),nextKey.getPosition(),nextKey.getLength() - nextKey.getPosition());
  buffer.reset(currentRawKey.getBytes(),0,currentRawKey.getLength());
  key=keyDeserializer.deserialize(key);
  DataInputBuffer nextVal=input.getValue();
  buffer.reset(nextVal.getData(),nextVal.getPosition(),nextVal.getLength() - nextVal.getPosition());
  value=valueDeserializer.deserialize(value);
  currentKeyLength=nextKey.getLength() - nextKey.getPosition();
  currentValueLength=nextVal.getLength() - nextVal.getPosition();
  if (isMarked) {
    backupStore.write(nextKey,nextVal);
  }
  hasMore=input.next();
  if (hasMore) {
    nextKey=input.getKey();
    nextKeyIsSame=comparator.compare(currentRawKey.getBytes(),0,currentRawKey.getLength(),nextKey.getData(),nextKey.getPosition(),nextKey.getLength() - nextKey.getPosition()) == 0;
  }
 else {
    nextKeyIsSame=false;
  }
  inputValueCounter.increment(1);
  return true;
}
