{
  ((Log4JLogger)NamenodeWebHdfsMethods.LOG).getLogger().setLevel(Level.ALL);
  final String uri=WebHdfsFileSystem.SCHEME + "://" + config.get(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY);
  final UserGroupInformation ugi=UserGroupInformation.createUserForTesting("JobTracker",new String[]{"user"});
  final WebHdfsFileSystem webhdfs=ugi.doAs(new PrivilegedExceptionAction<WebHdfsFileSystem>(){
    @Override public WebHdfsFileSystem run() throws Exception {
      return (WebHdfsFileSystem)FileSystem.get(new URI(uri),config);
    }
  }
);
  final Token<DelegationTokenIdentifier> token=webhdfs.getDelegationToken("JobTracker");
  DelegationTokenIdentifier identifier=new DelegationTokenIdentifier();
  byte[] tokenId=token.getIdentifier();
  identifier.readFields(new DataInputStream(new ByteArrayInputStream(tokenId)));
  LOG.info("A valid token should have non-null password, and should be renewed successfully");
  Assert.assertTrue(null != dtSecretManager.retrievePassword(identifier));
  dtSecretManager.renewToken(token,"JobTracker");
}
