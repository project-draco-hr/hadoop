{
  CapacityScheduler scheduler=(CapacityScheduler)rm.getResourceScheduler();
  RMApp app=rm.submitApp(GB,"test-move-1","user_0",null,"b1");
  ApplicationAttemptId appAttemptId=rm.getApplicationReport(app.getApplicationId()).getCurrentApplicationAttemptId();
  List<ApplicationAttemptId> appsInB1=scheduler.getAppsInQueue("b1");
  assertEquals(1,appsInB1.size());
  List<ApplicationAttemptId> appsInB=scheduler.getAppsInQueue("b");
  assertEquals(1,appsInB.size());
  assertTrue(appsInB.contains(appAttemptId));
  List<ApplicationAttemptId> appsInA=scheduler.getAppsInQueue("a");
  assertTrue(appsInA.isEmpty());
  String queue=scheduler.getApplicationAttempt(appsInB1.get(0)).getQueue().getQueueName();
  Assert.assertTrue(queue.equals("b1"));
  List<ApplicationAttemptId> appsInRoot=scheduler.getAppsInQueue("root");
  assertTrue(appsInRoot.contains(appAttemptId));
  assertEquals(1,appsInRoot.size());
  String defQName="a" + ReservationConstants.DEFAULT_QUEUE_SUFFIX;
  ReservationQueue defQ=new ReservationQueue(scheduler,defQName,(PlanQueue)scheduler.getQueue("a"));
  scheduler.addQueue(defQ);
  defQ.setEntitlement(new QueueEntitlement(1f,1f));
  List<ApplicationAttemptId> appsInDefQ=scheduler.getAppsInQueue(defQName);
  assertTrue(appsInDefQ.isEmpty());
  scheduler.moveApplication(app.getApplicationId(),"a");
  appsInDefQ=scheduler.getAppsInQueue(defQName);
  assertEquals(1,appsInDefQ.size());
  queue=scheduler.getApplicationAttempt(appsInDefQ.get(0)).getQueue().getQueueName();
  Assert.assertTrue(queue.equals(defQName));
  appsInA=scheduler.getAppsInQueue("a");
  assertTrue(appsInA.contains(appAttemptId));
  assertEquals(1,appsInA.size());
  appsInRoot=scheduler.getAppsInQueue("root");
  assertTrue(appsInRoot.contains(appAttemptId));
  assertEquals(1,appsInRoot.size());
  appsInB1=scheduler.getAppsInQueue("b1");
  assertTrue(appsInB1.isEmpty());
  appsInB=scheduler.getAppsInQueue("b");
  assertTrue(appsInB.isEmpty());
  rm.stop();
}
