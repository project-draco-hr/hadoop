{
  final String METHOD_NAME=GenericTestUtils.getMethodName();
  Path filePath=new Path("/" + METHOD_NAME + ".dat");
  final int DN_N1=DN_N0 + 1;
  ArrayList<Block> blocks=writeFile(METHOD_NAME,FILE_SIZE,filePath);
  startDNandWait(filePath,true);
  int randIndex=rand.nextInt(blocks.size());
  Block corruptedBlock=blocks.get(randIndex);
  String secondNode=cluster.getDataNodes().get(DN_N1).getStorageId();
  if (LOG.isDebugEnabled()) {
    LOG.debug("Working with " + secondNode);
    LOG.debug("BlockGS before " + blocks.get(randIndex).getGenerationStamp());
  }
  corruptBlockGS(corruptedBlock);
  if (LOG.isDebugEnabled()) {
    LOG.debug("BlockGS after " + blocks.get(randIndex).getGenerationStamp());
    LOG.debug("Done corrupting GS of " + corruptedBlock.getBlockName());
  }
  DataNode dn=cluster.getDataNodes().get(DN_N1);
  String poolId=cluster.getNamesystem().getBlockPoolId();
  DatanodeRegistration dnR=dn.getDNRegistrationForBP(poolId);
  cluster.getNameNode().blockReport(dnR,poolId,new BlockListAsLongs(blocks,null).getBlockListAsLongs());
  printStats();
  assertEquals("Wrong number of Corrupted blocks",1,cluster.getNamesystem().getCorruptReplicaBlocks() + cluster.getNamesystem().getPendingDeletionBlocks());
  if (randIndex == 0)   randIndex++;
 else   randIndex--;
  corruptedBlock=blocks.get(randIndex);
  corruptBlockLen(corruptedBlock);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Done corrupting length of " + corruptedBlock.getBlockName());
  }
  cluster.getNameNode().blockReport(dnR,poolId,new BlockListAsLongs(blocks,null).getBlockListAsLongs());
  printStats();
  assertEquals("Wrong number of Corrupted blocks",2,cluster.getNamesystem().getCorruptReplicaBlocks() + cluster.getNamesystem().getPendingReplicationBlocks() + cluster.getNamesystem().getPendingDeletionBlocks());
  printStats();
}
