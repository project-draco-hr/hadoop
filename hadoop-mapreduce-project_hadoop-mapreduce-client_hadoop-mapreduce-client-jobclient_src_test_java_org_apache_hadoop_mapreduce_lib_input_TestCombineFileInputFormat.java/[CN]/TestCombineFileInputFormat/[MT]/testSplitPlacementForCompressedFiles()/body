{
  MiniDFSCluster dfs=null;
  FileSystem fileSys=null;
  try {
    Configuration conf=new Configuration();
    conf.setBoolean("dfs.replication.considerLoad",false);
    dfs=new MiniDFSCluster(conf,1,true,rack1,hosts1);
    dfs.waitActive();
    fileSys=dfs.getFileSystem();
    if (!fileSys.mkdirs(inDir)) {
      throw new IOException("Mkdirs failed to create " + inDir.toString());
    }
    Path file1=new Path(dir1 + "/file1.gz");
    FileStatus f1=writeGzipFile(conf,file1,(short)1,1);
    Path file5=new Path(dir5 + "/file5.gz");
    FileStatus f5=writeGzipFile(conf,file5,(short)1,1);
    DummyInputFormat inFormat=new DummyInputFormat();
    Job job=Job.getInstance(conf);
    FileInputFormat.setInputPaths(job,dir1 + "," + dir5);
    List<InputSplit> splits=inFormat.getSplits(job);
    System.out.println("Made splits(Test0): " + splits.size());
    for (    InputSplit split : splits) {
      System.out.println("File split(Test0): " + split);
    }
    assertEquals(1,splits.size());
    CombineFileSplit fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(2,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file1.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f1.getLen(),fileSplit.getLength(0));
    assertEquals(file5.getName(),fileSplit.getPath(1).getName());
    assertEquals(0,fileSplit.getOffset(1));
    assertEquals(f5.getLen(),fileSplit.getLength(1));
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
    dfs.startDataNodes(conf,1,true,null,rack2,hosts2,null);
    dfs.waitActive();
    Path file2=new Path(dir2 + "/file2.gz");
    FileStatus f2=writeGzipFile(conf,file2,(short)2,2);
    inFormat=new DummyInputFormat();
    FileInputFormat.setInputPaths(job,dir1 + "," + dir2);
    inFormat.setMinSplitSizeRack(f1.getLen());
    splits=inFormat.getSplits(job);
    System.out.println("Made splits(Test1): " + splits.size());
    for (    InputSplit split : splits) {
      System.out.println("File split(Test1): " + split);
    }
    assertEquals(2,splits.size());
    fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file2.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f2.getLen(),fileSplit.getLength(0));
    assertEquals(hosts2[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(1);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file1.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f1.getLen(),fileSplit.getLength(0));
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
    dfs.startDataNodes(conf,1,true,null,rack3,hosts3,null);
    dfs.waitActive();
    Path file3=new Path(dir3 + "/file3.gz");
    FileStatus f3=writeGzipFile(conf,file3,(short)3,3);
    inFormat=new DummyInputFormat();
    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3);
    inFormat.setMinSplitSizeRack(f1.getLen());
    splits=inFormat.getSplits(job);
    for (    InputSplit split : splits) {
      System.out.println("File split(Test2): " + split);
    }
    assertEquals(3,splits.size());
    fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file3.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f3.getLen(),fileSplit.getLength(0));
    assertEquals(hosts3[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(1);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file2.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f2.getLen(),fileSplit.getLength(0));
    assertEquals(hosts2[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(2);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file1.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f1.getLen(),fileSplit.getLength(0));
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
    Path file4=new Path(dir4 + "/file4.gz");
    FileStatus f4=writeGzipFile(conf,file4,(short)3,3);
    inFormat=new DummyInputFormat();
    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);
    inFormat.setMinSplitSizeRack(f1.getLen());
    splits=inFormat.getSplits(job);
    for (    InputSplit split : splits) {
      System.out.println("File split(Test3): " + split);
    }
    assertEquals(3,splits.size());
    fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(2,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file3.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f3.getLen(),fileSplit.getLength(0));
    assertEquals(file4.getName(),fileSplit.getPath(1).getName());
    assertEquals(0,fileSplit.getOffset(1));
    assertEquals(f4.getLen(),fileSplit.getLength(1));
    assertEquals(hosts3[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(1);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file2.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f2.getLen(),fileSplit.getLength(0));
    assertEquals(hosts2[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(2);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file1.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f1.getLen(),fileSplit.getLength(0));
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
    inFormat=new DummyInputFormat();
    inFormat.setMinSplitSizeNode(f1.getLen());
    inFormat.setMaxSplitSize(f1.getLen());
    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);
    splits=inFormat.getSplits(job);
    for (    InputSplit split : splits) {
      System.out.println("File split(Test4): " + split);
    }
    assertEquals(4,splits.size());
    fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file3.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f3.getLen(),fileSplit.getLength(0));
    assertEquals(hosts3[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(1);
    assertEquals(file2.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f2.getLen(),fileSplit.getLength(0));
    assertEquals(hosts2[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(2);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file1.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f1.getLen(),fileSplit.getLength(0));
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(3);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file4.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f4.getLen(),fileSplit.getLength(0));
    assertEquals(hosts3[0],fileSplit.getLocations()[0]);
    inFormat=new DummyInputFormat();
    inFormat.setMinSplitSizeNode(f1.getLen());
    inFormat.setMaxSplitSize(2 * f1.getLen());
    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);
    splits=inFormat.getSplits(job);
    for (    InputSplit split : splits) {
      System.out.println("File split(Test5): " + split);
    }
    assertEquals(3,splits.size());
    fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(2,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file3.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f3.getLen(),fileSplit.getLength(0));
    assertEquals(file4.getName(),fileSplit.getPath(1).getName());
    assertEquals(0,fileSplit.getOffset(1));
    assertEquals(f4.getLen(),fileSplit.getLength(1));
    assertEquals(hosts3[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(1);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file2.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f2.getLen(),fileSplit.getLength(0));
    assertEquals(hosts2[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(2);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file1.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f1.getLen(),fileSplit.getLength(0));
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
    inFormat=new DummyInputFormat();
    inFormat.setMinSplitSizeNode(2 * f1.getLen());
    inFormat.setMaxSplitSize(4 * f1.getLen());
    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);
    splits=inFormat.getSplits(job);
    for (    InputSplit split : splits) {
      System.out.println("File split(Test6): " + split);
    }
    assertEquals(2,splits.size());
    fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(2,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(file3.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f3.getLen(),fileSplit.getLength(0));
    assertEquals(file4.getName(),fileSplit.getPath(1).getName());
    assertEquals(0,fileSplit.getOffset(1));
    assertEquals(f4.getLen(),fileSplit.getLength(1));
    assertEquals(hosts3[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(1);
    assertEquals(2,fileSplit.getNumPaths());
    assertEquals(file1.getName(),fileSplit.getPath(0).getName());
    assertEquals(0,fileSplit.getOffset(0));
    assertEquals(f1.getLen(),fileSplit.getLength(0));
    assertEquals(file2.getName(),fileSplit.getPath(1).getName());
    assertEquals(0,fileSplit.getOffset(1),BLOCKSIZE);
    assertEquals(f2.getLen(),fileSplit.getLength(1));
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
    inFormat=new DummyInputFormat();
    inFormat.setMaxSplitSize(4 * f1.getLen());
    inFormat.setMinSplitSizeRack(4 * f1.getLen());
    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);
    splits=inFormat.getSplits(job);
    for (    InputSplit split : splits) {
      System.out.println("File split(Test7): " + split);
    }
    assertEquals(1,splits.size());
    fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(4,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
    inFormat=new DummyInputFormat();
    inFormat.setMinSplitSizeNode(4 * f1.getLen());
    FileInputFormat.setInputPaths(job,dir1 + "," + dir2+ ","+ dir3+ ","+ dir4);
    splits=inFormat.getSplits(job);
    for (    InputSplit split : splits) {
      System.out.println("File split(Test8): " + split);
    }
    assertEquals(1,splits.size());
    fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(4,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
    inFormat=new DummyInputFormat();
    FileInputFormat.addInputPath(job,inDir);
    inFormat.setMinSplitSizeRack(1);
    inFormat.createPool(new TestFilter(dir1),new TestFilter(dir2));
    splits=inFormat.getSplits(job);
    for (    InputSplit split : splits) {
      System.out.println("File split(Test9): " + split);
    }
    assertEquals(3,splits.size());
    fileSplit=(CombineFileSplit)splits.get(0);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(hosts2[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(1);
    assertEquals(1,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(hosts1[0],fileSplit.getLocations()[0]);
    fileSplit=(CombineFileSplit)splits.get(2);
    assertEquals(2,fileSplit.getNumPaths());
    assertEquals(1,fileSplit.getLocations().length);
    assertEquals(hosts3[0],fileSplit.getLocations()[0]);
    int numPools=100;
    int numFiles=1000;
    DummyInputFormat1 inFormat1=new DummyInputFormat1();
    for (int i=0; i < numFiles; i++) {
      FileInputFormat.setInputPaths(job,file1);
    }
    inFormat1.setMinSplitSizeRack(1);
    final Path dirNoMatch1=new Path(inDir,"/dirxx");
    final Path dirNoMatch2=new Path(inDir,"/diryy");
    for (int i=0; i < numPools; i++) {
      inFormat1.createPool(new TestFilter(dirNoMatch1),new TestFilter(dirNoMatch2));
    }
    long start=System.currentTimeMillis();
    splits=inFormat1.getSplits(job);
    long end=System.currentTimeMillis();
    System.out.println("Elapsed time for " + numPools + " pools "+ " and "+ numFiles+ " files is "+ ((end - start))+ " milli seconds.");
  }
  finally {
    if (dfs != null) {
      dfs.shutdown();
    }
  }
}
