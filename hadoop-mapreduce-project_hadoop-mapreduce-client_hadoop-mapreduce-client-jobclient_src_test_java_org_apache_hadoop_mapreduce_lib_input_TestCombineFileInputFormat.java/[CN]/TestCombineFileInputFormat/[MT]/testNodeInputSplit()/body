{
  DummyInputFormat inFormat=new DummyInputFormat();
  int numBlocks=12;
  long totLength=0;
  long blockSize=100;
  long maxSize=200;
  long minSizeNode=50;
  long minSizeRack=50;
  String[] locations={"h1","h2"};
  String[] racks=new String[0];
  Path path=new Path("hdfs://file");
  OneBlockInfo[] blocks=new OneBlockInfo[numBlocks];
  for (int i=0; i < numBlocks; ++i) {
    blocks[i]=new OneBlockInfo(path,i * blockSize,blockSize,locations,racks);
    totLength+=blockSize;
  }
  List<InputSplit> splits=new ArrayList<InputSplit>();
  HashMap<String,Set<String>> rackToNodes=new HashMap<String,Set<String>>();
  HashMap<String,List<OneBlockInfo>> rackToBlocks=new HashMap<String,List<OneBlockInfo>>();
  HashMap<OneBlockInfo,String[]> blockToNodes=new HashMap<OneBlockInfo,String[]>();
  HashMap<String,Set<OneBlockInfo>> nodeToBlocks=new HashMap<String,Set<OneBlockInfo>>();
  OneFileInfo.populateBlockInfo(blocks,rackToBlocks,blockToNodes,nodeToBlocks,rackToNodes);
  inFormat.createSplits(nodeToBlocks,blockToNodes,rackToBlocks,totLength,maxSize,minSizeNode,minSizeRack,splits);
  int expectedSplitCount=(int)(totLength / maxSize);
  assertEquals(expectedSplitCount,splits.size());
  HashMultiset<String> nodeSplits=HashMultiset.create();
  for (int i=0; i < expectedSplitCount; ++i) {
    InputSplit inSplit=splits.get(i);
    assertEquals(maxSize,inSplit.getLength());
    assertEquals(1,inSplit.getLocations().length);
    nodeSplits.add(inSplit.getLocations()[0]);
  }
  assertEquals(3,nodeSplits.count(locations[0]));
  assertEquals(3,nodeSplits.count(locations[1]));
}
