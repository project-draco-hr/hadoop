{
  DummyInputFormat inFormat=new DummyInputFormat();
  int numBlocks=60;
  long totLength=0;
  long blockSize=100;
  int numNodes=10;
  long minSizeNode=50;
  long minSizeRack=50;
  int maxSplitSize=200;
  String[] locations=new String[numNodes];
  for (int i=0; i < numNodes; i++) {
    locations[i]="h" + i;
  }
  String[] racks=new String[0];
  Path path=new Path("hdfs://file");
  OneBlockInfo[] blocks=new OneBlockInfo[numBlocks];
  int hostCountBase=0;
  for (int i=0; i < numBlocks; i++) {
    int localHostCount=hostCountBase;
    String[] blockHosts=new String[3];
    for (int j=0; j < 3; j++) {
      int hostNum=localHostCount % numNodes;
      blockHosts[j]="h" + hostNum;
      localHostCount++;
    }
    hostCountBase++;
    blocks[i]=new OneBlockInfo(path,i * blockSize,blockSize,blockHosts,racks);
    totLength+=blockSize;
  }
  List<InputSplit> splits=new ArrayList<InputSplit>();
  HashMap<String,Set<String>> rackToNodes=new HashMap<String,Set<String>>();
  HashMap<String,List<OneBlockInfo>> rackToBlocks=new HashMap<String,List<OneBlockInfo>>();
  HashMap<OneBlockInfo,String[]> blockToNodes=new HashMap<OneBlockInfo,String[]>();
  Map<String,Set<OneBlockInfo>> nodeToBlocks=new TreeMap<String,Set<OneBlockInfo>>();
  OneFileInfo.populateBlockInfo(blocks,rackToBlocks,blockToNodes,nodeToBlocks,rackToNodes);
  inFormat.createSplits(nodeToBlocks,blockToNodes,rackToBlocks,totLength,maxSplitSize,minSizeNode,minSizeRack,splits);
  int expectedSplitCount=(int)(totLength / maxSplitSize);
  Assert.assertEquals(expectedSplitCount,splits.size());
  int numLocalSplits=0;
  for (  InputSplit inputSplit : splits) {
    Assert.assertEquals(maxSplitSize,inputSplit.getLength());
    if (inputSplit.getLocations().length == 1) {
      numLocalSplits++;
    }
  }
  Assert.assertTrue(numLocalSplits >= 0.9 * splits.size());
}
