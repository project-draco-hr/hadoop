def main():
    parser = OptionParser(usage='usage: %prog --version VERSION [--version VERSION2 ...]', epilog='Markdown-formatted CHANGES and RELEASENOTES files will be stored in a directory named after the highest version provided.')
    parser.add_option('-v', '--version', dest='versions', action='append', type='string', help='versions in JIRA to include in releasenotes', metavar='VERSION')
    parser.add_option('-m', '--master', dest='master', action='store_true', help='only create the master, merged project files')
    parser.add_option('-i', '--index', dest='index', action='store_true', help='build an index file')
    parser.add_option('-u', '--usetoday', dest='usetoday', action='store_true', help='use current date for unreleased versions')
    (options, args) = parser.parse_args()
    if (options.versions == None):
        options.versions = []
    if (len(args) > 2):
        options.versions.append(args[2])
    if (len(options.versions) <= 0):
        parser.error('At least one version needs to be supplied')
    versions = [Version(v) for v in options.versions]
    versions.sort()
    maxVersion = str(versions[(-1)])
    jlist = JiraIter(versions)
    version = maxVersion
    if (version in releaseVersion):
        reldate = releaseVersion[version]
    elif options.usetoday:
        reldate = strftime('%Y-%m-%d', gmtime())
    else:
        reldate = 'Unreleased'
    if (not os.path.exists(version)):
        os.mkdir(version)
    if options.master:
        reloutputs = Outputs('%(ver)s/RELEASENOTES.%(ver)s.md', '%(ver)s/RELEASENOTES.%(key)s.%(ver)s.md', [], {'ver': maxVersion, 'date': reldate, })
        choutputs = Outputs('%(ver)s/CHANGES.%(ver)s.md', '%(ver)s/CHANGES.%(key)s.%(ver)s.md', [], {'ver': maxVersion, 'date': reldate, })
    else:
        reloutputs = Outputs('%(ver)s/RELEASENOTES.%(ver)s.md', '%(ver)s/RELEASENOTES.%(key)s.%(ver)s.md', ['HADOOP', 'HDFS', 'MAPREDUCE', 'YARN'], {'ver': maxVersion, 'date': reldate, })
        choutputs = Outputs('%(ver)s/CHANGES.%(ver)s.md', '%(ver)s/CHANGES.%(key)s.%(ver)s.md', ['HADOOP', 'HDFS', 'MAPREDUCE', 'YARN'], {'ver': maxVersion, 'date': reldate, })
    reloutputs.writeAll(asflicense)
    choutputs.writeAll(asflicense)
    relhead = '# Hadoop %(key)s %(ver)s Release Notes\n\nThese release notes cover new developer and user-facing incompatibilities, features, and major improvements.\n\n'
    chhead = '# Hadoop Changelog\n\n## Release %(ver)s - %(date)s\n\n'
    reloutputs.writeAll(relhead)
    choutputs.writeAll(chhead)
    incompatlist = []
    buglist = []
    improvementlist = []
    newfeaturelist = []
    subtasklist = []
    tasklist = []
    testlist = []
    otherlist = []
    for jira in sorted(jlist):
        if jira.getIncompatibleChange():
            incompatlist.append(jira)
        elif (jira.getType() == 'Bug'):
            buglist.append(jira)
        elif (jira.getType() == 'Improvement'):
            improvementlist.append(jira)
        elif (jira.getType() == 'New Feature'):
            newfeaturelist.append(jira)
        elif (jira.getType() == 'Sub-task'):
            subtasklist.append(jira)
        elif (jira.getType() == 'Task'):
            tasklist.append(jira)
        elif (jira.getType() == 'Test'):
            testlist.append(jira)
        else:
            otherlist.append(jira)
        line = ('* [%s](https://issues.apache.org/jira/browse/%s) | *%s* | **%s**\n' % (notableclean(jira.getId()), notableclean(jira.getId()), notableclean(jira.getPriority()), notableclean(jira.getSummary())))
        if (jira.getIncompatibleChange() and (len(jira.getReleaseNote()) == 0)):
            reloutputs.writeKeyRaw(jira.getProject(), '\n---\n\n')
            reloutputs.writeKeyRaw(jira.getProject(), line)
            line = '\n**WARNING: No release note provided for this incompatible change.**\n\n'
            print ('WARNING: incompatible change %s lacks release notes.' % notableclean(jira.getId()))
            reloutputs.writeKeyRaw(jira.getProject(), line)
        if (len(jira.getReleaseNote()) > 0):
            reloutputs.writeKeyRaw(jira.getProject(), '\n---\n\n')
            reloutputs.writeKeyRaw(jira.getProject(), line)
            line = ('\n%s\n\n' % tableclean(jira.getReleaseNote()))
            reloutputs.writeKeyRaw(jira.getProject(), line)
    reloutputs.writeAll('\n\n')
    reloutputs.close()
    choutputs.writeAll('### INCOMPATIBLE CHANGES:\n\n')
    choutputs.writeAll('| JIRA | Summary | Priority | Component | Reporter | Contributor |\n')
    choutputs.writeAll('|:---- |:---- | :--- |:---- |:---- |:---- |\n')
    choutputs.writeList(incompatlist)
    choutputs.writeAll('\n\n### NEW FEATURES:\n\n')
    choutputs.writeAll('| JIRA | Summary | Priority | Component | Reporter | Contributor |\n')
    choutputs.writeAll('|:---- |:---- | :--- |:---- |:---- |:---- |\n')
    choutputs.writeList(newfeaturelist)
    choutputs.writeAll('\n\n### IMPROVEMENTS:\n\n')
    choutputs.writeAll('| JIRA | Summary | Priority | Component | Reporter | Contributor |\n')
    choutputs.writeAll('|:---- |:---- | :--- |:---- |:---- |:---- |\n')
    choutputs.writeList(improvementlist)
    choutputs.writeAll('\n\n### BUG FIXES:\n\n')
    choutputs.writeAll('| JIRA | Summary | Priority | Component | Reporter | Contributor |\n')
    choutputs.writeAll('|:---- |:---- | :--- |:---- |:---- |:---- |\n')
    choutputs.writeList(buglist)
    choutputs.writeAll('\n\n### TESTS:\n\n')
    choutputs.writeAll('| JIRA | Summary | Priority | Component | Reporter | Contributor |\n')
    choutputs.writeAll('|:---- |:---- | :--- |:---- |:---- |:---- |\n')
    choutputs.writeList(testlist)
    choutputs.writeAll('\n\n### SUB-TASKS:\n\n')
    choutputs.writeAll('| JIRA | Summary | Priority | Component | Reporter | Contributor |\n')
    choutputs.writeAll('|:---- |:---- | :--- |:---- |:---- |:---- |\n')
    choutputs.writeList(subtasklist)
    choutputs.writeAll('\n\n### OTHER:\n\n')
    choutputs.writeAll('| JIRA | Summary | Priority | Component | Reporter | Contributor |\n')
    choutputs.writeAll('|:---- |:---- | :--- |:---- |:---- |:---- |\n')
    choutputs.writeList(otherlist)
    choutputs.writeList(tasklist)
    choutputs.writeAll('\n\n')
    choutputs.close()
    if options.index:
        buildindex(options.master)
