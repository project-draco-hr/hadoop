def __init__(self, versions):
    self.versions = versions
    resp = urllib.urlopen('https://issues.apache.org/jira/rest/api/2/field')
    data = json.loads(resp.read())
    self.fieldIdMap = {}
    for part in data:
        self.fieldIdMap[part['name']] = part['id']
    self.jiras = []
    at = 0
    end = 1
    count = 100
    while (at < end):
        params = urllib.urlencode({'jql': (("project in (HADOOP,HDFS,MAPREDUCE,YARN) and fixVersion in ('" + "' , '".join([str(v).replace('-SNAPSHOT', '') for v in versions])) + "') and resolution = Fixed"), 'startAt': at, 'maxResults': count, })
        resp = urllib.urlopen(('https://issues.apache.org/jira/rest/api/2/search?%s' % params))
        data = json.loads(resp.read())
        if data.has_key('errorMessages'):
            raise Exception(data['errorMessages'])
        at = (data['startAt'] + data['maxResults'])
        end = data['total']
        self.jiras.extend(data['issues'])
        needaversion = False
        for j in versions:
            v = str(j).replace('-SNAPSHOT', '')
            if (v not in releaseVersion):
                needaversion = True
        if (needaversion is True):
            for i in range(len(data['issues'])):
                for j in range(len(data['issues'][i]['fields']['fixVersions'])):
                    if ('releaseDate' in data['issues'][i]['fields']['fixVersions'][j]):
                        releaseVersion[data['issues'][i]['fields']['fixVersions'][j]['name']] = data['issues'][i]['fields']['fixVersions'][j]['releaseDate']
    self.iter = self.jiras.__iter__()
