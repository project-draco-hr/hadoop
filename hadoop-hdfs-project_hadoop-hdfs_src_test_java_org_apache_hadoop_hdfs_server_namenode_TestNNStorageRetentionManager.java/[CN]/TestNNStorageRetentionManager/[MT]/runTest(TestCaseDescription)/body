{
  StoragePurger mockPurger=Mockito.mock(NNStorageRetentionManager.StoragePurger.class);
  ArgumentCaptor<FSImageFile> imagesPurgedCaptor=ArgumentCaptor.forClass(FSImageFile.class);
  ArgumentCaptor<EditLogFile> logsPurgedCaptor=ArgumentCaptor.forClass(EditLogFile.class);
  new NNStorageRetentionManager(conf,tc.mockStorage(),tc.mockEditLog(mockPurger),mockPurger).purgeOldStorage(NameNodeFile.IMAGE);
  Mockito.verify(mockPurger,Mockito.atLeast(0)).purgeImage(imagesPurgedCaptor.capture());
  Mockito.verify(mockPurger,Mockito.atLeast(0)).purgeLog(logsPurgedCaptor.capture());
  Set<String> purgedPaths=Sets.newLinkedHashSet();
  for (  FSImageFile purged : imagesPurgedCaptor.getAllValues()) {
    purgedPaths.add(fileToPath(purged.getFile()));
  }
  Assert.assertEquals(Joiner.on(",").join(filesToPaths(tc.expectedPurgedImages)),Joiner.on(",").join(purgedPaths));
  purgedPaths.clear();
  for (  EditLogFile purged : logsPurgedCaptor.getAllValues()) {
    purgedPaths.add(fileToPath(purged.getFile()));
  }
  Assert.assertEquals(Joiner.on(",").join(filesToPaths(tc.expectedPurgedLogs)),Joiner.on(",").join(purgedPaths));
}
