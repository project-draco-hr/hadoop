{
  String TEST_ROOT_DIR=new Path(System.getProperty("test.build.data","/tmp")).toString().replace(' ','+');
  conf.set("test.build.data",TEST_ROOT_DIR);
  final Path inDir=new Path(indir);
  final Path outDir=new Path(outdir);
  FileSystem fs=FileSystem.get(conf);
  fs.delete(outDir,true);
  if (!fs.mkdirs(inDir)) {
    throw new IOException("Mkdirs failed to create " + inDir.toString());
  }
{
    System.out.println("HERE:" + inDir);
    DataOutputStream file=fs.create(new Path(inDir,"part-0"));
    file.writeBytes(input);
    file.close();
  }
  conf.setJobName("cachetest");
  conf.setOutputKeyClass(Text.class);
  conf.setOutputValueClass(IntWritable.class);
  conf.setCombinerClass(MRCaching.ReduceClass.class);
  conf.setReducerClass(MRCaching.ReduceClass.class);
  FileInputFormat.setInputPaths(conf,inDir);
  FileOutputFormat.setOutputPath(conf,outDir);
  conf.setNumMapTasks(1);
  conf.setNumReduceTasks(1);
  conf.setSpeculativeExecution(false);
  URI[] uris=new URI[6];
  if (!withSymlink) {
    conf.setMapperClass(MRCaching.MapClass.class);
    uris[0]=fs.getUri().resolve(cacheDir + "/test.txt");
    uris[1]=fs.getUri().resolve(cacheDir + "/test.jar");
    uris[2]=fs.getUri().resolve(cacheDir + "/test.zip");
    uris[3]=fs.getUri().resolve(cacheDir + "/test.tgz");
    uris[4]=fs.getUri().resolve(cacheDir + "/test.tar.gz");
    uris[5]=fs.getUri().resolve(cacheDir + "/test.tar");
  }
 else {
    DistributedCache.createSymlink(conf);
    conf.setMapperClass(MRCaching.MapClass2.class);
    uris[0]=fs.getUri().resolve(cacheDir + "/test.txt#" + "test.txt");
    uris[1]=fs.getUri().resolve(cacheDir + "/test.jar#" + "testjar");
    uris[2]=fs.getUri().resolve(cacheDir + "/test.zip#" + "testzip");
    uris[3]=fs.getUri().resolve(cacheDir + "/test.tgz#" + "testtgz");
    uris[4]=fs.getUri().resolve(cacheDir + "/test.tar.gz#" + "testtargz");
    uris[5]=fs.getUri().resolve(cacheDir + "/test.tar#" + "testtar");
  }
  DistributedCache.addCacheFile(uris[0],conf);
  long[] fileSizes=new long[1];
  fileSizes[0]=fs.getFileStatus(new Path(uris[0].getPath())).getLen();
  long[] archiveSizes=new long[5];
  for (int i=1; i < 6; i++) {
    DistributedCache.addCacheArchive(uris[i],conf);
    archiveSizes[i - 1]=fs.getFileStatus(new Path(uris[i].getPath())).getLen();
  }
  RunningJob job=JobClient.runJob(conf);
  int count=0;
  Path result=new Path(TEST_ROOT_DIR + "/test.txt");
{
    BufferedReader file=new BufferedReader(new InputStreamReader(FileSystem.getLocal(conf).open(result)));
    String line=file.readLine();
    while (line != null) {
      if (!testStr.equals(line))       return new TestResult(job,false);
      count++;
      line=file.readLine();
    }
    file.close();
  }
  if (count != 6)   return new TestResult(job,false);
  validateCacheFileSizes(job.getConfiguration(),fileSizes,MRJobConfig.CACHE_FILES_SIZES);
  validateCacheFileSizes(job.getConfiguration(),archiveSizes,MRJobConfig.CACHE_ARCHIVES_SIZES);
  return new TestResult(job,true);
}
