{
  boolean isNodeDown=(downnode != null);
  assertTrue("Not HDFS:" + fileSys.getUri(),fileSys instanceof DistributedFileSystem);
  DFSClient.DFSDataInputStream dis=(DFSClient.DFSDataInputStream)((DistributedFileSystem)fileSys).open(name);
  Collection<LocatedBlock> dinfo=dis.getAllBlocks();
  for (  LocatedBlock blk : dinfo) {
    int hasdown=0;
    DatanodeInfo[] nodes=blk.getLocations();
    for (int j=0; j < nodes.length; j++) {
      if (isNodeDown && nodes[j].getName().equals(downnode)) {
        hasdown++;
        if (!nodes[j].isDecommissioned()) {
          return "For block " + blk.getBlock() + " replica on "+ nodes[j].getName()+ " is given as downnode, "+ "but is not decommissioned";
        }
        if (j != nodes.length - 1) {
          return "For block " + blk.getBlock() + " decommissioned node "+ nodes[j].getName()+ " was not last node in list: "+ (j + 1)+ " of "+ nodes.length;
        }
        LOG.info("Block " + blk.getBlock() + " replica on "+ nodes[j].getName()+ " is decommissioned.");
      }
 else {
        if (nodes[j].isDecommissioned()) {
          return "For block " + blk.getBlock() + " replica on "+ nodes[j].getName()+ " is unexpectedly decommissioned";
        }
      }
    }
    LOG.info("Block " + blk.getBlock() + " has "+ hasdown+ " decommissioned replica.");
    if (Math.min(numDatanodes,repl + hasdown) != nodes.length) {
      return "Wrong number of replicas for block " + blk.getBlock() + ": "+ nodes.length+ ", expected "+ Math.min(numDatanodes,repl + hasdown);
    }
  }
  return null;
}
