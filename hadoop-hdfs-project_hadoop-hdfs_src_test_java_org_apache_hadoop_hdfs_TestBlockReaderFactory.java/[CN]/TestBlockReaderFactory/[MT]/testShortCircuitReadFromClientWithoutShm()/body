{
  TemporarySocketDirectory sockDir=new TemporarySocketDirectory();
  Configuration clientConf=createShortCircuitConf("testShortCircuitReadWithoutShm",sockDir);
  Configuration serverConf=new Configuration(clientConf);
  DFSInputStream.tcpReadsDisabledForTesting=true;
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(serverConf).numDataNodes(1).build();
  cluster.waitActive();
  clientConf.setInt(DFS_SHORT_CIRCUIT_SHARED_MEMORY_WATCHER_INTERRUPT_CHECK_MS,0);
  clientConf.set(DFS_CLIENT_CONTEXT,"testShortCircuitReadFromClientWithoutShm_clientContext");
  final DistributedFileSystem fs=(DistributedFileSystem)FileSystem.get(cluster.getURI(0),clientConf);
  final String TEST_FILE="/test_file";
  final int TEST_FILE_LEN=4000;
  final int SEED=0xFADEC;
  DFSTestUtil.createFile(fs,new Path(TEST_FILE),TEST_FILE_LEN,(short)1,SEED);
  byte contents[]=DFSTestUtil.readFileBuffer(fs,new Path(TEST_FILE));
  byte expected[]=DFSTestUtil.calculateFileContentsFromSeed(SEED,TEST_FILE_LEN);
  Assert.assertTrue(Arrays.equals(contents,expected));
  final ShortCircuitCache cache=fs.dfs.getClientContext().getShortCircuitCache();
  Assert.assertEquals(null,cache.getDfsClientShmManager());
  cluster.shutdown();
  sockDir.close();
}
