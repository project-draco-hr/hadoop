' Higher level data types and type related classes.\n\n    Supported Types (Verification and Display):\n\n      address        - validates ip:port and host:port tcp addresses\n      ip_address     - validates and IP address\n      net_address    - validates an IP like address, ie netmask\n      hostname       - validates a hostname with DNS\n      eaddress       - validates a single email address or a comma\n                       seperated list of email addresses\n      http_version   - validates a value is a http version (1.0/1.1)\n      tcp_port       - validates a value to be a valid tcp port (2-65535)\n      bool           - validates value is (0, 1, true, false) / converts\n                       true -> 1 and false -> 0\n      directory      - validates a values is a directory / resolves path to\n                       absolute path\n      file           - validates a value is a file / resolves path to absolute\n                       path\n      float          - validates a value is a float, converts string to float\n      pos_float      - validates a value is a float and >= 0, converts string\n                       to float\n      pos_num        - same as pos_float\n      neg_float      - validates a value is a float and < 0, converts string to\n                       float\n      int            - validates a value is an integer, converts string to\n                       integer\n      pos_int        - validates a value is an integer and >= 0, converts\n                       string to integer\n      neg_int        - validates a values is an integer and < 0, converts\n                       striing to integer\n      freq           - frequency, positive integer\n      size           - validates a size in bytes, kb, mb, kb, and tb\n                       (int > 0 post fixed with K, M, G, or T) also converts\n                       value to integer bytes\n      range          - numeric range, x-y normalized to a tuple, if a single\n                       number is supplie a single element tuple is returned\n      timestamp      - utc timestamp of the form YYYYMMDDHHMMSS\n      user_account   - UNIX user account name\n      user_group     - UNIX group name\n      string         - arbitrarily long string\n      list           - comma seperated list of strings of arbitrary length,\n      keyval         - comma seperated list of key=value pairs, key does not \n                       need to be unique.\n      uri            - a uri '
import sys, os, socket, pwd, grp, stat, re, re, string, pprint, urlparse
from tcp import tcpSocket, check_net_address, check_ip_address
from util import check_timestamp
types = {'directory': {'db': 'string', 'units': None, }, 'address': {'db': 'string', 'units': None, }, 'ip_address': {'db': 'string', 'units': None, }, 'net_address': {'db': 'string', 'units': None, }, 'bool': {'db': 'bool', 'units': None, }, 'int': {'db': 'integer', 'units': None, }, 'float': {'db': 'float', 'units': None, }, 'pos_int': {'db': 'integer', 'units': None, }, 'neg_int': {'db': 'integer', 'units': None, }, 'pos_num': {'db': 'float', 'units': None, }, 'pos_float': {'db': 'float', 'units': None, }, 'neg_float': {'db': 'float', 'units': None, }, 'string': {'db': 'string', 'units': None, }, 'list': {'db': 'string', 'units': None, }, 'file': {'db': 'string', 'units': None, }, 'size': {'db': 'integer', 'units': 'bytes', }, 'freq': {'db': 'integer', 'units': 'hz', }, 'eaddress': {'db': 'string', 'units': None, }, 'tcp_port': {'db': 'integer', 'units': None, }, 'http_version': {'db': 'float', 'units': None, }, 'range': {'db': 'string', 'units': None, }, 'hostname': {'db': 'string', 'units': None, }, 'user_account': {'db': 'string', 'units': None, }, 'user_group': {'db': 'string', 'units': None, }, 'timestamp': {'db': 'timestamp', 'units': None, }, 'keyval': {'db': 'string', 'units': None, }, 'uri': {'db': 'string', 'units': None, }, '': {'db': 'string', 'units': None, }, }
dbTypes = {'string': {'type': 'varchar', 'store': 'type_strings_0', 'table': True, }, 'integer': {'type': 'bigint', 'store': 'integers', 'table': False, }, 'float': {'type': 'real', 'store': 'floats', 'table': False, }, 'bool': {'type': 'boolean', 'store': 'bools', 'table': False, }, 'timestamp': {'type': 'timestamp(0)', 'store': 'timestamps', 'table': False, }, }
reSizeFormat = re.compile('^(\\d+)(k|m|g|t|p|kb|mb|gb|tb|pb)$', flags=2)
reDash = re.compile('\\s*-\\s*')
sizeFactors = {'b': 1, 'bytes': 1, 'k': 1024, 'kb': 1024, 'm': 1048576, 'mb': 1048576, 'g': 1073741824, 'gb': 1073741824, 't': 1099511627776, 'tb': 1099511627776, 'p': 1125899906842624, 'pb': 1125899906842624, }
freqFactors = {'hz': 1, 'khz': 1000, 'mhz': 1000000, 'ghz': 1000000000, 'thz': 1000000000000, 'phz': 1000000000000000, }
sizeMap = [{'factor': sizeFactors['b'], 'long': 'byte', 'short': 'byte', }, {'factor': sizeFactors['k'], 'long': 'Kilobyte', 'short': 'KB', }, {'factor': sizeFactors['m'], 'long': 'Megabyte', 'short': 'MB', }, {'factor': sizeFactors['g'], 'long': 'Gigabyte', 'short': 'GB', }, {'factor': sizeFactors['t'], 'long': 'Terabyte', 'short': 'TB', }, {'factor': sizeFactors['p'], 'long': 'Petabyte', 'short': 'PB', }]
freqMap = [{'factor': freqFactors['hz'], 'long': 'Hertz', 'short': 'Hz', }, {'factor': freqFactors['khz'], 'long': 'Kilohertz', 'short': 'KHz', }, {'factor': freqFactors['mhz'], 'long': 'Megahertz', 'short': 'MHz', }, {'factor': freqFactors['ghz'], 'long': 'Gigahertz', 'short': 'GHz', }, {'factor': freqFactors['thz'], 'long': 'Terahertz', 'short': 'THz', }, {'factor': freqFactors['phz'], 'long': 'Petahertz', 'short': 'PHz', }]
reListString = '(?<!\\\\),'
reList = re.compile(reListString)
reKeyVal = '(?<!\\\\)='
reKeyVal = re.compile(reKeyVal)
typeValidatorInstance = typeValidator()
