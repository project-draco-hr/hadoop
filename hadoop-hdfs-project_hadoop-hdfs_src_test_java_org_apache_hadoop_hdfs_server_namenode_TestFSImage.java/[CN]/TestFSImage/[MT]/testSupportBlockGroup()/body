{
  final short GROUP_SIZE=(short)(testECPolicy.getNumDataUnits() + testECPolicy.getNumParityUnits());
  final int BLOCK_SIZE=8 * 1024 * 1024;
  Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,BLOCK_SIZE);
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(GROUP_SIZE).build();
    cluster.waitActive();
    DistributedFileSystem fs=cluster.getFileSystem();
    fs.getClient().getNamenode().setErasureCodingPolicy("/",testECPolicy);
    Path file=new Path("/striped");
    FSDataOutputStream out=fs.create(file);
    byte[] bytes=DFSTestUtil.generateSequentialBytes(0,BLOCK_SIZE);
    out.write(bytes);
    out.close();
    fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
    fs.saveNamespace();
    fs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
    cluster.restartNameNodes();
    fs=cluster.getFileSystem();
    assertTrue(fs.exists(file));
    FSNamesystem fsn=cluster.getNamesystem();
    INodeFile inode=fsn.dir.getINode(file.toString()).asFile();
    assertTrue(inode.isStriped());
    BlockInfo[] blks=inode.getBlocks();
    assertEquals(1,blks.length);
    assertTrue(blks[0].isStriped());
    assertEquals(testECPolicy.getNumDataUnits(),((BlockInfoStriped)blks[0]).getDataBlockNum());
    assertEquals(testECPolicy.getNumParityUnits(),((BlockInfoStriped)blks[0]).getParityBlockNum());
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
