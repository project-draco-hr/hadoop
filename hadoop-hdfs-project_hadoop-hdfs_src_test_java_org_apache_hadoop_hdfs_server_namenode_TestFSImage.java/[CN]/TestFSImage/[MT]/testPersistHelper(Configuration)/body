{
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).build();
    cluster.waitActive();
    FSNamesystem fsn=cluster.getNamesystem();
    DistributedFileSystem fs=cluster.getFileSystem();
    final Path dir=new Path("/abc/def");
    final Path file1=new Path(dir,"f1");
    final Path file2=new Path(dir,"f2");
    fs.create(file1).close();
    FSDataOutputStream out=fs.create(file2);
    out.writeBytes("hello");
    ((DFSOutputStream)out.getWrappedStream()).hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
    fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
    fs.saveNamespace();
    fs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
    cluster.restartNameNode();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    assertTrue(fs.isDirectory(dir));
    assertTrue(fs.exists(file1));
    assertTrue(fs.exists(file2));
    INodeFile file2Node=fsn.dir.getINode4Write(file2.toString()).asFile();
    assertEquals("hello".length(),file2Node.computeFileSize());
    assertTrue(file2Node.isUnderConstruction());
    BlockInfoContiguous[] blks=file2Node.getBlocks();
    assertEquals(1,blks.length);
    assertEquals(BlockUCState.UNDER_CONSTRUCTION,blks[0].getBlockUCState());
    Lease lease=fsn.leaseManager.getLease(file2Node);
    Assert.assertNotNull(lease);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
