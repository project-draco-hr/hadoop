{
  HashMap<String,DiskErrorInformation> ret=new HashMap<String,DiskErrorInformation>();
  for (  final String dir : dirs) {
    String msg;
    try {
      File testDir=new File(dir);
      DiskChecker.checkDir(testDir);
      float diskUtilizationPercentageCutoff=goodDirs.contains(dir) ? diskUtilizationPercentageCutoffHigh : diskUtilizationPercentageCutoffLow;
      if (isDiskUsageOverPercentageLimit(testDir,diskUtilizationPercentageCutoff)) {
        msg="used space above threshold of " + diskUtilizationPercentageCutoff + "%";
        ret.put(dir,new DiskErrorInformation(DiskErrorCause.DISK_FULL,msg));
        continue;
      }
 else       if (isDiskFreeSpaceUnderLimit(testDir)) {
        msg="free space below limit of " + diskUtilizationSpaceCutoff + "MB";
        ret.put(dir,new DiskErrorInformation(DiskErrorCause.DISK_FULL,msg));
        continue;
      }
      verifyDirUsingMkdir(testDir);
    }
 catch (    IOException ie) {
      ret.put(dir,new DiskErrorInformation(DiskErrorCause.OTHER,ie.getMessage()));
    }
  }
  return ret;
}
