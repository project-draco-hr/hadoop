{
  boolean setChanged=false;
  Set<String> preCheckGoodDirs=null;
  Set<String> preCheckFullDirs=null;
  Set<String> preCheckOtherErrorDirs=null;
  List<String> failedDirs=null;
  List<String> allLocalDirs=null;
  this.readLock.lock();
  try {
    preCheckGoodDirs=new HashSet<String>(localDirs);
    preCheckFullDirs=new HashSet<String>(fullDirs);
    preCheckOtherErrorDirs=new HashSet<String>(errorDirs);
    failedDirs=DirectoryCollection.concat(errorDirs,fullDirs);
    allLocalDirs=DirectoryCollection.concat(localDirs,failedDirs);
  }
  finally {
    this.readLock.unlock();
  }
  Map<String,DiskErrorInformation> dirsFailedCheck=testDirs(allLocalDirs,preCheckGoodDirs);
  this.writeLock.lock();
  try {
    localDirs.clear();
    errorDirs.clear();
    fullDirs.clear();
    for (    Map.Entry<String,DiskErrorInformation> entry : dirsFailedCheck.entrySet()) {
      String dir=entry.getKey();
      DiskErrorInformation errorInformation=entry.getValue();
switch (entry.getValue().cause) {
case DISK_FULL:
        fullDirs.add(entry.getKey());
      break;
case OTHER:
    errorDirs.add(entry.getKey());
  break;
default :
LOG.warn(entry.getValue().cause + " is unknown for disk error.");
break;
}
if (preCheckGoodDirs.contains(dir)) {
LOG.warn("Directory " + dir + " error, "+ errorInformation.message+ ", removing from list of valid directories");
setChanged=true;
numFailures++;
}
}
for (String dir : allLocalDirs) {
if (!dirsFailedCheck.containsKey(dir)) {
localDirs.add(dir);
if (preCheckFullDirs.contains(dir) || preCheckOtherErrorDirs.contains(dir)) {
setChanged=true;
LOG.info("Directory " + dir + " passed disk check, adding to list of valid directories.");
}
}
}
Set<String> postCheckFullDirs=new HashSet<String>(fullDirs);
Set<String> postCheckOtherDirs=new HashSet<String>(errorDirs);
for (String dir : preCheckFullDirs) {
if (postCheckOtherDirs.contains(dir)) {
LOG.warn("Directory " + dir + " error "+ dirsFailedCheck.get(dir).message);
}
}
for (String dir : preCheckOtherErrorDirs) {
if (postCheckFullDirs.contains(dir)) {
LOG.warn("Directory " + dir + " error "+ dirsFailedCheck.get(dir).message);
}
}
setGoodDirsDiskUtilizationPercentage();
if (setChanged) {
for (DirsChangeListener listener : dirsChangeListeners) {
listener.onDirsChanged();
}
}
return setChanged;
}
  finally {
this.writeLock.unlock();
}
}
