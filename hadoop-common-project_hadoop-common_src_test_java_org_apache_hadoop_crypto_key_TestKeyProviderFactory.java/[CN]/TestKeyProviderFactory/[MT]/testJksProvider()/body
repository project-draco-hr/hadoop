{
  Configuration conf=new Configuration();
  final Path jksPath=new Path(tmpDir.toString(),"test.jks");
  final String ourUrl=JavaKeyStoreProvider.SCHEME_NAME + "://file" + jksPath.toUri();
  File file=new File(tmpDir,"test.jks");
  file.delete();
  conf.set(KeyProviderFactory.KEY_PROVIDER_PATH,ourUrl);
  checkSpecificProvider(conf,ourUrl);
  conf.set(KeyProviderFactory.KEY_PROVIDER_PATH,ourUrl.replace(JavaKeyStoreProvider.SCHEME_NAME,FailureInjectingJavaKeyStoreProvider.SCHEME_NAME));
  KeyProvider provider=KeyProviderFactory.getProviders(conf).get(0);
  FailureInjectingJavaKeyStoreProvider fProvider=(FailureInjectingJavaKeyStoreProvider)provider;
  fProvider.setWriteFail(true);
  provider.createKey("key5",new byte[]{1},KeyProvider.options(conf).setBitLength(8));
  assertNotNull(provider.getCurrentKey("key5"));
  try {
    provider.flush();
    Assert.fail("Should not succeed");
  }
 catch (  Exception e) {
  }
  Assert.assertNull(provider.getCurrentKey("key5"));
  fProvider.setWriteFail(false);
  fProvider.setBackupFail(true);
  provider.createKey("key6",new byte[]{1},KeyProvider.options(conf).setBitLength(8));
  assertNotNull(provider.getCurrentKey("key6"));
  try {
    provider.flush();
    Assert.fail("Should not succeed");
  }
 catch (  Exception e) {
  }
  Assert.assertNull(provider.getCurrentKey("key6"));
  conf.set(KeyProviderFactory.KEY_PROVIDER_PATH,ourUrl.replace(FailureInjectingJavaKeyStoreProvider.SCHEME_NAME,JavaKeyStoreProvider.SCHEME_NAME));
  Path path=ProviderUtils.unnestUri(new URI(ourUrl));
  FileSystem fs=path.getFileSystem(conf);
  FileStatus s=fs.getFileStatus(path);
  assertTrue(s.getPermission().toString().equals("rwx------"));
  assertTrue(file + " should exist",file.isFile());
  File oldFile=new File(file.getPath() + "_OLD");
  file.renameTo(oldFile);
  file.delete();
  file.createNewFile();
  assertTrue(oldFile.exists());
  provider=KeyProviderFactory.getProviders(conf).get(0);
  assertTrue(file.exists());
  assertTrue(oldFile + "should be deleted",!oldFile.exists());
  verifyAfterReload(file,provider);
  assertTrue(!oldFile.exists());
  File newFile=new File(file.getPath() + "_NEW");
  newFile.createNewFile();
  try {
    provider=KeyProviderFactory.getProviders(conf).get(0);
    Assert.fail("_NEW and current file should not exist together !!");
  }
 catch (  Exception e) {
  }
 finally {
    if (newFile.exists()) {
      newFile.delete();
    }
  }
  file.renameTo(newFile);
  file.delete();
  try {
    provider=KeyProviderFactory.getProviders(conf).get(0);
    Assert.assertFalse(newFile.exists());
    Assert.assertFalse(oldFile.exists());
  }
 catch (  Exception e) {
    Assert.fail("JKS should load from _NEW file !!");
  }
  verifyAfterReload(file,provider);
  newFile.createNewFile();
  file.renameTo(oldFile);
  file.delete();
  try {
    provider=KeyProviderFactory.getProviders(conf).get(0);
    Assert.assertFalse(newFile.exists());
    Assert.assertFalse(oldFile.exists());
  }
 catch (  Exception e) {
    Assert.fail("JKS should load from _OLD file !!");
  }
 finally {
    if (newFile.exists()) {
      newFile.delete();
    }
  }
  verifyAfterReload(file,provider);
  fs.setPermission(path,new FsPermission("777"));
  checkPermissionRetention(conf,ourUrl,path);
}
