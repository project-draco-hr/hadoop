{
  KeyProvider provider=KeyProviderFactory.getProviders(conf).get(0);
  byte[] key1=new byte[16];
  byte[] key2=new byte[16];
  byte[] key3=new byte[16];
  for (int i=0; i < key1.length; ++i) {
    key1[i]=(byte)i;
    key2[i]=(byte)(i * 2);
    key3[i]=(byte)(i * 3);
  }
  assertEquals(null,provider.getKeyVersion("no-such-key"));
  assertEquals(null,provider.getMetadata("key"));
  try {
    provider.createKey("key3",key3,KeyProvider.options(conf));
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
  KeyProvider.Metadata meta=provider.getMetadata("key3");
  assertEquals(KeyProvider.DEFAULT_CIPHER,meta.getCipher());
  assertEquals(KeyProvider.DEFAULT_BITLENGTH,meta.getBitLength());
  assertEquals(1,meta.getVersions());
  assertArrayEquals(key3,provider.getCurrentKey("key3").getMaterial());
  assertEquals("key3@0",provider.getCurrentKey("key3").getVersionName());
  try {
    provider.createKey("key3",key3,KeyProvider.options(conf));
    assertTrue("should throw",false);
  }
 catch (  IOException e) {
    assertEquals("Key key3 already exists in " + ourUrl,e.getMessage());
  }
  provider.deleteKey("key3");
  try {
    provider.deleteKey("key3");
    assertTrue("should throw",false);
  }
 catch (  IOException e) {
    assertEquals("Key key3 does not exist in " + ourUrl,e.getMessage());
  }
  provider.createKey("key3",key3,KeyProvider.options(conf));
  try {
    provider.createKey("key4",key3,KeyProvider.options(conf).setBitLength(8));
    assertTrue("should throw",false);
  }
 catch (  IOException e) {
    assertEquals("Wrong key length. Required 8, but got 128",e.getMessage());
  }
  provider.createKey("key4",new byte[]{1},KeyProvider.options(conf).setBitLength(8));
  provider.rollNewVersion("key4",new byte[]{2});
  meta=provider.getMetadata("key4");
  assertEquals(2,meta.getVersions());
  assertArrayEquals(new byte[]{2},provider.getCurrentKey("key4").getMaterial());
  assertArrayEquals(new byte[]{1},provider.getKeyVersion("key4@0").getMaterial());
  assertEquals("key4@1",provider.getCurrentKey("key4").getVersionName());
  try {
    provider.rollNewVersion("key4",key1);
    assertTrue("should throw",false);
  }
 catch (  IOException e) {
    assertEquals("Wrong key length. Required 8, but got 128",e.getMessage());
  }
  try {
    provider.rollNewVersion("no-such-key",key1);
    assertTrue("should throw",false);
  }
 catch (  IOException e) {
    assertEquals("Key no-such-key not found",e.getMessage());
  }
  provider.flush();
  provider=KeyProviderFactory.getProviders(conf).get(0);
  assertArrayEquals(new byte[]{2},provider.getCurrentKey("key4").getMaterial());
  assertArrayEquals(key3,provider.getCurrentKey("key3").getMaterial());
  assertEquals("key3@0",provider.getCurrentKey("key3").getVersionName());
  List<String> keys=provider.getKeys();
  assertTrue("Keys should have been returned.",keys.size() == 2);
  assertTrue("Returned Keys should have included key3.",keys.contains("key3"));
  assertTrue("Returned Keys should have included key4.",keys.contains("key4"));
  List<KeyVersion> kvl=provider.getKeyVersions("key3");
  assertTrue("KeyVersions should have been returned for key3.",kvl.size() == 1);
  assertTrue("KeyVersions should have included key3@0.",kvl.get(0).getVersionName().equals("key3@0"));
  assertArrayEquals(key3,kvl.get(0).getMaterial());
}
