{
  Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,500);
  conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1L);
  cluster=new MiniDFSCluster.Builder(conf).build();
  cluster.waitActive();
  String poolId=cluster.getNamesystem().getBlockPoolId();
  DataNode dn=cluster.getDataNodes().get(0);
  DatanodeRegistration reg=DataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(0),poolId);
  waitForDatanodeState(reg.getStorageID(),true,20000);
  dn.shutdown();
  waitForDatanodeState(reg.getStorageID(),false,20000);
  DatanodeProtocol dnp=cluster.getNameNode();
  Block[] blocks=new Block[]{new Block(0)};
  String[] delHints=new String[]{""};
  try {
    dnp.blockReceived(reg,poolId,blocks,delHints);
    Assert.fail("Expected IOException is not thrown");
  }
 catch (  IOException ex) {
  }
  long[] blockReport=new long[]{0L,0L,0L};
  try {
    dnp.blockReport(reg,poolId,blockReport);
    Assert.fail("Expected IOException is not thrown");
  }
 catch (  IOException ex) {
  }
  DatanodeCommand[] cmd=dnp.sendHeartbeat(reg,0,0,0,0,0,0,0);
  Assert.assertEquals(1,cmd.length);
  Assert.assertEquals(cmd[0].getAction(),DatanodeCommand.REGISTER.getAction());
}
