{
  Client client=createClient();
  try {
    URI uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/app/cluster1/application_1111111111_1111?"+ "userid=user1&fields=ALL&flowname=flow_name&flowrunid=1002345678919");
    ClientResponse resp=getResponse(client,uri);
    TimelineEntity entity=resp.getEntity(TimelineEntity.class);
    assertNotNull(entity);
    assertEquals("application_1111111111_1111",entity.getId());
    assertEquals(2,entity.getMetrics().size());
    TimelineMetric m1=newMetric(TimelineMetric.Type.TIME_SERIES,"HDFS_BYTES_READ",ts - 100000,31L);
    m1.addValue(ts - 80000,57L);
    TimelineMetric m2=newMetric(TimelineMetric.Type.TIME_SERIES,"MAP_SLOT_MILLIS",ts - 100000,2L);
    m2.addValue(ts - 80000,40L);
    for (    TimelineMetric metric : entity.getMetrics()) {
      assertTrue(verifyMetrics(metric,m1,m2));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/app/application_1111111111_2222?userid=user1"+ "&fields=metrics&flowname=flow_name&flowrunid=1002345678919");
    resp=getResponse(client,uri);
    entity=resp.getEntity(TimelineEntity.class);
    assertNotNull(entity);
    assertEquals("application_1111111111_2222",entity.getId());
    assertEquals(1,entity.getMetrics().size());
    TimelineMetric m3=newMetric(TimelineMetric.Type.TIME_SERIES,"MAP_SLOT_MILLIS",ts - 100000,5L);
    m2.addValue(ts - 80000,101L);
    for (    TimelineMetric metric : entity.getMetrics()) {
      assertTrue(verifyMetrics(metric,m3));
    }
  }
  finally {
    client.destroy();
  }
}
