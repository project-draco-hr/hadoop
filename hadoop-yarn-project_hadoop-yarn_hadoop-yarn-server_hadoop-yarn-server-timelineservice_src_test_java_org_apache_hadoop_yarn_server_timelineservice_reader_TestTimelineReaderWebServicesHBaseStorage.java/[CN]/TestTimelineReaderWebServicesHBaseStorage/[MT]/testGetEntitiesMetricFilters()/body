{
  Client client=createClient();
  try {
    URI uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?metricfilters=HDFS_BYTES_READ%20lt%2060%20OR%20"+ "HDFS_BYTES_READ%20eq%20157");
    ClientResponse resp=getResponse(client,uri);
    Set<TimelineEntity> entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    for (    TimelineEntity entity : entities) {
      assertTrue(entity.getId().equals("entity1") || entity.getId().equals("entity2"));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?metricfilters=HDFS_BYTES_READ%20lt%2060%20AND%20"+ "MAP_SLOT_MILLIS%20gt%2040");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(0,entities.size());
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?metricfilters=(HDFS_BYTES_READ%20lt%2060%20AND%20"+ "MAP_SLOT_MILLIS%20gt%2040)%20OR%20(MAP1_SLOT_MILLIS%20ge"+ "%20140%20AND%20MAP11_SLOT_MILLIS%20le%20122)");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(1,entities.size());
    int metricCnt=0;
    for (    TimelineEntity entity : entities) {
      metricCnt+=entity.getMetrics().size();
      assertTrue(entity.getId().equals("entity2"));
    }
    assertEquals(0,metricCnt);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?metricfilters=(HDFS_BYTES_READ%20lt%2060%20AND%20"+ "MAP_SLOT_MILLIS%20gt%2040)%20OR%20(MAP1_SLOT_MILLIS%20ge"+ "%20140%20AND%20MAP11_SLOT_MILLIS%20le%20122)&fields=METRICS");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(1,entities.size());
    metricCnt=0;
    for (    TimelineEntity entity : entities) {
      metricCnt+=entity.getMetrics().size();
      assertTrue(entity.getId().equals("entity2"));
    }
    assertEquals(3,metricCnt);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?metricfilters=(HDFS_BYTES_READ%20lt%2060%20AND%20"+ "MAP_SLOT_MILLIS%20gt%2040)%20OR%20(MAP1_SLOT_MILLIS%20ge"+ "%20140%20AND%20MAP11_SLOT_MILLIS%20le%20122)&metricstoretrieve="+ "!(HDFS)");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(1,entities.size());
    metricCnt=0;
    for (    TimelineEntity entity : entities) {
      metricCnt+=entity.getMetrics().size();
      assertTrue(entity.getId().equals("entity2"));
      for (      TimelineMetric metric : entity.getMetrics()) {
        assertTrue(metric.getId().startsWith("MAP1"));
      }
    }
    assertEquals(2,metricCnt);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?metricfilters=MAP11_SLOT_MILLIS%20ne%20100");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    for (    TimelineEntity entity : entities) {
      assertTrue(entity.getId().equals("entity1") || entity.getId().equals("entity2"));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?metricfilters=MAP11_SLOT_MILLIS%20ene%20100");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(1,entities.size());
    for (    TimelineEntity entity : entities) {
      assertTrue(entity.getId().equals("entity2"));
    }
  }
  finally {
    client.destroy();
  }
}
