{
  Client client=createClient();
  try {
    URI uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/cluster1");
    ClientResponse resp=getResponse(client,uri);
    Set<FlowActivityEntity> entities=resp.getEntity(new GenericType<Set<FlowActivityEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    for (    FlowActivityEntity entity : entities) {
      assertTrue((entity.getId().endsWith("@flow_name") && entity.getFlowRuns().size() == 2) || (entity.getId().endsWith("@flow_name2") && entity.getFlowRuns().size() == 1));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<FlowActivityEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/cluster1?limit=1");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<FlowActivityEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(1,entities.size());
    DateFormat fmt=TimelineReaderWebServices.DATE_FORMAT.get();
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/cluster1?daterange="+ fmt.format(dayTs)+ "-"+ fmt.format(dayTs + (2 * 86400000L)));
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<FlowActivityEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    for (    FlowActivityEntity entity : entities) {
      assertTrue((entity.getId().endsWith("@flow_name") && entity.getFlowRuns().size() == 2) || (entity.getId().endsWith("@flow_name2") && entity.getFlowRuns().size() == 1));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/cluster1?daterange="+ fmt.format(dayTs + (4 * 86400000L)));
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<FlowActivityEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(0,entities.size());
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/cluster1?daterange=-"+ fmt.format(dayTs + (2 * 86400000L)));
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<FlowActivityEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/cluster1?daterange="+ fmt.format(dayTs - (2 * 86400000L))+ "-");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<FlowActivityEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/cluster1?daterange=20150711:20150714");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/cluster1?daterange=20150714-20150711");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/cluster1?daterange=2015071129-20150712");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows/cluster1?daterange=20150711-2015071243");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
  }
  finally {
    client.destroy();
  }
}
