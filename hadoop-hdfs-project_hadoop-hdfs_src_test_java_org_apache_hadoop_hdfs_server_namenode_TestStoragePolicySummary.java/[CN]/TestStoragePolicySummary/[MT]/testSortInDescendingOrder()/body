{
  BlockStoragePolicySuite bsps=BlockStoragePolicySuite.createDefaultSuite();
  StoragePolicySummary sts=new StoragePolicySummary(bsps.getAllPolicies());
  BlockStoragePolicy hot=bsps.getPolicy("HOT");
  BlockStoragePolicy warm=bsps.getPolicy("WARM");
  BlockStoragePolicy cold=bsps.getPolicy("COLD");
  sts.add(new StorageType[]{StorageType.DISK,StorageType.DISK,StorageType.DISK},hot);
  sts.add(new StorageType[]{StorageType.DISK,StorageType.DISK,StorageType.DISK},hot);
  sts.add(new StorageType[]{StorageType.DISK,StorageType.ARCHIVE,StorageType.ARCHIVE},warm);
  sts.add(new StorageType[]{StorageType.ARCHIVE,StorageType.DISK,StorageType.ARCHIVE},warm);
  sts.add(new StorageType[]{StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.DISK},warm);
  sts.add(new StorageType[]{StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE},cold);
  sts.add(new StorageType[]{StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE},cold);
  sts.add(new StorageType[]{StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE},cold);
  sts.add(new StorageType[]{StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE},cold);
  Map<String,Long> actualOutput=convertToStringMap(sts);
  Assert.assertEquals(3,actualOutput.size());
  Map<String,Long> expectedOutput=new LinkedHashMap<>();
  expectedOutput.put("COLD|ARCHIVE:3(COLD)",4l);
  expectedOutput.put("WARM|DISK:1,ARCHIVE:2(WARM)",3l);
  expectedOutput.put("HOT|DISK:3(HOT)",2l);
  Assert.assertEquals(expectedOutput.toString(),actualOutput.toString());
}
