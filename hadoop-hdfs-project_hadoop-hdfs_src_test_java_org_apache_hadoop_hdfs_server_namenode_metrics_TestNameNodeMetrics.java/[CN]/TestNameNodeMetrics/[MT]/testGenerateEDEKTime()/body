{
  Configuration conf=new HdfsConfiguration();
  FileSystemTestHelper fsHelper=new FileSystemTestHelper();
  String testRoot=fsHelper.getTestRootDir();
  File testRootDir=new File(testRoot).getAbsoluteFile();
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_KEY_PROVIDER_PATH,JavaKeyStoreProvider.SCHEME_NAME + "://file" + new Path(testRootDir.toString(),"test.jks").toUri());
  conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,true);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_LIST_ENCRYPTION_ZONES_NUM_RESPONSES,2);
  try (MiniDFSCluster clusterEDEK=new MiniDFSCluster.Builder(conf).numDataNodes(1).build()){
    DistributedFileSystem fsEDEK=clusterEDEK.getFileSystem();
    FileSystemTestWrapper fsWrapper=new FileSystemTestWrapper(fsEDEK);
    HdfsAdmin dfsAdmin=new HdfsAdmin(clusterEDEK.getURI(),conf);
    fsEDEK.getClient().setKeyProvider(clusterEDEK.getNameNode().getNamesystem().getProvider());
    String testKey="test_key";
    DFSTestUtil.createKey(testKey,clusterEDEK,conf);
    final Path zoneParent=new Path("/zones");
    final Path zone1=new Path(zoneParent,"zone1");
    fsWrapper.mkdir(zone1,FsPermission.getDirDefault(),true);
    dfsAdmin.createEncryptionZone(zone1,"test_key",EnumSet.of(CreateEncryptionZoneFlag.NO_TRASH));
    MetricsRecordBuilder rb=getMetrics(NN_METRICS);
    for (int i=0; i < 3; i++) {
      Path filePath=new Path("/zones/zone1/testfile-" + i);
      DFSTestUtil.createFile(fsEDEK,filePath,1024,(short)3,1L);
      assertQuantileGauges("GenerateEDEKTime1s",rb);
    }
  }
 }
