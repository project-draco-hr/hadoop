{
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<pool name=\"poolA\">");
  out.println("<minMaps>1</minMaps>");
  out.println("<minReduces>2</minReduces>");
  out.println("</pool>");
  out.println("<pool name=\"poolB\">");
  out.println("<minMaps>2</minMaps>");
  out.println("<minReduces>1</minReduces>");
  out.println("</pool>");
  out.println("</allocations>");
  out.close();
  scheduler.getPoolManager().reloadAllocs();
  Pool defaultPool=scheduler.getPoolManager().getPool("default");
  Pool poolA=scheduler.getPoolManager().getPool("poolA");
  Pool poolB=scheduler.getPoolManager().getPool("poolB");
  JobInProgress job1=submitJob(JobStatus.RUNNING,10,10);
  JobInfo info1=scheduler.infos.get(job1);
  assertEquals(0,info1.mapSchedulable.getRunningTasks());
  assertEquals(0,info1.reduceSchedulable.getRunningTasks());
  assertEquals(10,info1.mapSchedulable.getDemand());
  assertEquals(10,info1.reduceSchedulable.getDemand());
  assertEquals(4.0,info1.mapSchedulable.getFairShare());
  assertEquals(4.0,info1.reduceSchedulable.getFairShare());
  advanceTime(200);
  JobInProgress job2=submitJob(JobStatus.RUNNING,10,10,"poolA");
  JobInfo info2=scheduler.infos.get(job2);
  advanceTime(100);
  JobInProgress job3=submitJob(JobStatus.RUNNING,10,10,"poolB");
  JobInfo info3=scheduler.infos.get(job3);
  assertEquals(0,defaultPool.getMapSchedulable().getMinShare());
  assertEquals(0,defaultPool.getReduceSchedulable().getMinShare());
  assertEquals(1.0,info1.mapSchedulable.getFairShare());
  assertEquals(1.0,info1.reduceSchedulable.getFairShare());
  assertEquals(1,poolA.getMapSchedulable().getMinShare());
  assertEquals(2,poolA.getReduceSchedulable().getMinShare());
  assertEquals(1.0,info2.mapSchedulable.getFairShare());
  assertEquals(2.0,info2.reduceSchedulable.getFairShare());
  assertEquals(2,poolB.getMapSchedulable().getMinShare());
  assertEquals(1,poolB.getReduceSchedulable().getMinShare());
  assertEquals(2.0,info3.mapSchedulable.getFairShare());
  assertEquals(1.0,info3.reduceSchedulable.getFairShare());
  advanceTime(100);
  checkAssignment("tt1","attempt_test_0002_m_000000_0 on tt1");
  checkAssignment("tt1","attempt_test_0002_r_000000_0 on tt1");
  checkAssignment("tt1","attempt_test_0003_m_000000_0 on tt1");
  checkAssignment("tt1","attempt_test_0003_r_000000_0 on tt1");
  checkAssignment("tt2","attempt_test_0003_m_000001_0 on tt2");
  checkAssignment("tt2","attempt_test_0002_r_000001_0 on tt2");
  checkAssignment("tt2","attempt_test_0001_m_000000_0 on tt2");
  checkAssignment("tt2","attempt_test_0001_r_000000_0 on tt2");
}
