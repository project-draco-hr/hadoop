{
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<pool name=\"default\">");
  out.println("<maxRunningJobs>2</maxRunningJobs>");
  out.println("</pool>");
  out.println("</allocations>");
  out.close();
  scheduler.getPoolManager().reloadAllocs();
  JobInProgress job1=submitJobNotInitialized(JobStatus.PREP,10,10);
  assertTrue(((FakeJobInProgress)job1).inited());
  job1.getStatus().setRunState(JobStatus.RUNNING);
  JobInfo info1=scheduler.infos.get(job1);
  advanceTime(10);
  JobInProgress job2=submitJobNotInitialized(JobStatus.PREP,10,10);
  assertTrue(((FakeJobInProgress)job2).inited());
  job2.getStatus().setRunState(JobStatus.RUNNING);
  JobInfo info2=scheduler.infos.get(job2);
  advanceTime(10);
  JobInProgress job3=submitJobNotInitialized(JobStatus.PREP,10,10);
  JobInfo info3=scheduler.infos.get(job3);
  advanceTime(10);
  JobInProgress job4=submitJobNotInitialized(JobStatus.PREP,10,10);
  JobInfo info4=scheduler.infos.get(job4);
  assertTrue(((FakeJobInProgress)job1).inited());
  assertTrue(((FakeJobInProgress)job2).inited());
  assertFalse(((FakeJobInProgress)job3).inited());
  assertFalse(((FakeJobInProgress)job4).inited());
  assertEquals(2.0,info1.mapSchedulable.getFairShare());
  assertEquals(2.0,info1.reduceSchedulable.getFairShare());
  assertEquals(2.0,info2.mapSchedulable.getFairShare());
  assertEquals(2.0,info2.reduceSchedulable.getFairShare());
  assertEquals(0.0,info3.mapSchedulable.getFairShare());
  assertEquals(0.0,info3.reduceSchedulable.getFairShare());
  assertEquals(0.0,info4.mapSchedulable.getFairShare());
  assertEquals(0.0,info4.reduceSchedulable.getFairShare());
  checkAssignment("tt1","attempt_test_0001_m_000000_0 on tt1");
  checkAssignment("tt1","attempt_test_0001_r_000000_0 on tt1");
  checkAssignment("tt1","attempt_test_0002_m_000000_0 on tt1");
  checkAssignment("tt1","attempt_test_0002_r_000000_0 on tt1");
  advanceTime(100);
  checkAssignment("tt2","attempt_test_0001_m_000001_0 on tt2");
  checkAssignment("tt2","attempt_test_0001_r_000001_0 on tt2");
  checkAssignment("tt2","attempt_test_0002_m_000001_0 on tt2");
  checkAssignment("tt2","attempt_test_0002_r_000001_0 on tt2");
}
