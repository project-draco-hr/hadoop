{
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<pool name=\"default\">");
  out.println("<schedulingMode>fair</schedulingMode>");
  out.println("</pool>");
  out.println("<pool name=\"poolA\">");
  out.println("<schedulingMode>fair</schedulingMode>");
  out.println("</pool>");
  out.println("</allocations>");
  out.close();
  scheduler.getPoolManager().reloadAllocs();
  Pool defaultPool=scheduler.getPoolManager().getPool("default");
  Pool poolA=scheduler.getPoolManager().getPool("poolA");
  JobInProgress job1=submitJob(JobStatus.RUNNING,1,3);
  assertEquals(1,defaultPool.getMapSchedulable().getDemand());
  assertEquals(3,defaultPool.getReduceSchedulable().getDemand());
  assertEquals(0,poolA.getMapSchedulable().getDemand());
  assertEquals(0,poolA.getReduceSchedulable().getDemand());
  scheduler.getPoolManager().setPool(job1,"poolA");
  assertEquals("poolA",scheduler.getPoolManager().getPoolName(job1));
  defaultPool.getMapSchedulable().updateDemand();
  defaultPool.getReduceSchedulable().updateDemand();
  poolA.getMapSchedulable().updateDemand();
  poolA.getReduceSchedulable().updateDemand();
  assertEquals(0,defaultPool.getMapSchedulable().getDemand());
  assertEquals(0,defaultPool.getReduceSchedulable().getDemand());
  assertEquals(1,poolA.getMapSchedulable().getDemand());
  assertEquals(3,poolA.getReduceSchedulable().getDemand());
  scheduler.getPoolManager().setPool(job1,"default");
  assertEquals("default",scheduler.getPoolManager().getPoolName(job1));
  defaultPool.getMapSchedulable().updateDemand();
  defaultPool.getReduceSchedulable().updateDemand();
  poolA.getMapSchedulable().updateDemand();
  poolA.getReduceSchedulable().updateDemand();
  assertEquals(1,defaultPool.getMapSchedulable().getDemand());
  assertEquals(3,defaultPool.getReduceSchedulable().getDemand());
  assertEquals(0,poolA.getMapSchedulable().getDemand());
  assertEquals(0,poolA.getReduceSchedulable().getDemand());
}
