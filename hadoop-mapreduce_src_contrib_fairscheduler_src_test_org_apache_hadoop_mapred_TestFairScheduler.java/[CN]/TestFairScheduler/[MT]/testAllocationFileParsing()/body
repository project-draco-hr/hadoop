{
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<pool name=\"poolA\">");
  out.println("<minMaps>1</minMaps>");
  out.println("<minReduces>2</minReduces>");
  out.println("</pool>");
  out.println("<pool name=\"poolB\">");
  out.println("<minMaps>2</minMaps>");
  out.println("<minReduces>1</minReduces>");
  out.println("</pool>");
  out.println("<pool name=\"poolC\">");
  out.println("<minMaps>2</minMaps>");
  out.println("</pool>");
  out.println("<pool name=\"poolD\">");
  out.println("<maxRunningJobs>3</maxRunningJobs>");
  out.println("</pool>");
  out.println("<pool name=\"poolE\">");
  out.println("<minSharePreemptionTimeout>60</minSharePreemptionTimeout>");
  out.println("</pool>");
  out.println("<poolMaxJobsDefault>15</poolMaxJobsDefault>");
  out.println("<userMaxJobsDefault>5</userMaxJobsDefault>");
  out.println("<user name=\"user1\">");
  out.println("<maxRunningJobs>10</maxRunningJobs>");
  out.println("</user>");
  out.println("<defaultMinSharePreemptionTimeout>120" + "</defaultMinSharePreemptionTimeout>");
  out.println("<fairSharePreemptionTimeout>300</fairSharePreemptionTimeout>");
  out.println("</allocations>");
  out.close();
  PoolManager poolManager=scheduler.getPoolManager();
  poolManager.reloadAllocs();
  assertEquals(6,poolManager.getPools().size());
  assertEquals(0,poolManager.getAllocation(Pool.DEFAULT_POOL_NAME,TaskType.MAP));
  assertEquals(0,poolManager.getAllocation(Pool.DEFAULT_POOL_NAME,TaskType.REDUCE));
  assertEquals(1,poolManager.getAllocation("poolA",TaskType.MAP));
  assertEquals(2,poolManager.getAllocation("poolA",TaskType.REDUCE));
  assertEquals(2,poolManager.getAllocation("poolB",TaskType.MAP));
  assertEquals(1,poolManager.getAllocation("poolB",TaskType.REDUCE));
  assertEquals(2,poolManager.getAllocation("poolC",TaskType.MAP));
  assertEquals(0,poolManager.getAllocation("poolC",TaskType.REDUCE));
  assertEquals(0,poolManager.getAllocation("poolD",TaskType.MAP));
  assertEquals(0,poolManager.getAllocation("poolD",TaskType.REDUCE));
  assertEquals(0,poolManager.getAllocation("poolE",TaskType.MAP));
  assertEquals(0,poolManager.getAllocation("poolE",TaskType.REDUCE));
  assertEquals(15,poolManager.getPoolMaxJobs(Pool.DEFAULT_POOL_NAME));
  assertEquals(15,poolManager.getPoolMaxJobs("poolA"));
  assertEquals(15,poolManager.getPoolMaxJobs("poolB"));
  assertEquals(15,poolManager.getPoolMaxJobs("poolC"));
  assertEquals(3,poolManager.getPoolMaxJobs("poolD"));
  assertEquals(15,poolManager.getPoolMaxJobs("poolE"));
  assertEquals(10,poolManager.getUserMaxJobs("user1"));
  assertEquals(5,poolManager.getUserMaxJobs("user2"));
  assertEquals(120000,poolManager.getMinSharePreemptionTimeout(Pool.DEFAULT_POOL_NAME));
  assertEquals(120000,poolManager.getMinSharePreemptionTimeout("poolA"));
  assertEquals(120000,poolManager.getMinSharePreemptionTimeout("poolB"));
  assertEquals(120000,poolManager.getMinSharePreemptionTimeout("poolC"));
  assertEquals(120000,poolManager.getMinSharePreemptionTimeout("poolD"));
  assertEquals(120000,poolManager.getMinSharePreemptionTimeout("poolA"));
  assertEquals(60000,poolManager.getMinSharePreemptionTimeout("poolE"));
  assertEquals(300000,poolManager.getFairSharePreemptionTimeout());
}
