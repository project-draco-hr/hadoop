{
  this.conf=conf;
  int nodeIpCacheTimeout=conf.getInt(YarnConfiguration.RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS,YarnConfiguration.DEFAULT_RM_NODE_IP_CACHE_EXPIRY_INTERVAL_SECS);
  if (nodeIpCacheTimeout <= 0) {
    resolver=new DirectResolver();
  }
 else {
    resolver=new CachedResolver(SystemClock.getInstance(),nodeIpCacheTimeout);
    addIfService(resolver);
  }
  try {
    this.includesFile=conf.get(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,YarnConfiguration.DEFAULT_RM_NODES_INCLUDE_FILE_PATH);
    this.excludesFile=conf.get(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,YarnConfiguration.DEFAULT_RM_NODES_EXCLUDE_FILE_PATH);
    this.hostsReader=createHostsFileReader(this.includesFile,this.excludesFile);
    setDecomissionedNMs();
    printConfiguredHosts();
  }
 catch (  YarnException ex) {
    disableHostsFileReader(ex);
  }
catch (  IOException ioe) {
    disableHostsFileReader(ioe);
  }
  final int nodeRemovalTimeout=conf.getInt(YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,YarnConfiguration.DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);
  nodeRemovalCheckInterval=(Math.min(nodeRemovalTimeout / 2,600000));
  removalTimer=new Timer("Node Removal Timer");
  removalTimer.schedule(new TimerTask(){
    @Override public void run(){
      long now=Time.monotonicNow();
      for (      Map.Entry<NodeId,RMNode> entry : rmContext.getInactiveRMNodes().entrySet()) {
        NodeId nodeId=entry.getKey();
        RMNode rmNode=entry.getValue();
        if (isUntrackedNode(rmNode.getHostName())) {
          if (rmNode.getUntrackedTimeStamp() == 0) {
            rmNode.setUntrackedTimeStamp(now);
          }
 else           if (now - rmNode.getUntrackedTimeStamp() > nodeRemovalTimeout) {
            RMNode result=rmContext.getInactiveRMNodes().remove(nodeId);
            if (result != null) {
              ClusterMetrics clusterMetrics=ClusterMetrics.getMetrics();
              if (rmNode.getState() == NodeState.SHUTDOWN) {
                clusterMetrics.decrNumShutdownNMs();
              }
 else {
                clusterMetrics.decrDecommisionedNMs();
              }
              LOG.info("Removed " + result.getHostName() + " from inactive nodes list");
            }
          }
        }
 else {
          rmNode.setUntrackedTimeStamp(0);
        }
      }
    }
  }
,nodeRemovalCheckInterval,nodeRemovalCheckInterval);
  super.serviceInit(conf);
}
