{
  configuration.set(YarnConfiguration.PROXY_ADDRESS,"localhost:9090");
  configuration.setInt("hadoop.http.max.threads",5);
  WebAppProxyServerForTest proxy=new WebAppProxyServerForTest();
  proxy.init(configuration);
  proxy.start();
  int proxyPort=proxy.proxy.proxyServer.getConnectorAddress(0).getPort();
  AppReportFetcherForTest appReportFetcher=proxy.proxy.appReportFetcher;
  try {
    configuration.setBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,false);
    ApplicationId app=ApplicationId.newInstance(0,0);
    appReportFetcher.answer=6;
    URL url=new URL("http://localhost:" + proxyPort + "/proxy/"+ app.toString());
    HttpURLConnection proxyConn=(HttpURLConnection)url.openConnection();
    proxyConn.connect();
    try {
      proxyConn.getResponseCode();
    }
 catch (    ConnectException e) {
    }
    String appAddressInRm=WebAppUtils.getResolvedRMWebAppURLWithScheme(configuration) + "/cluster" + "/app/"+ app.toString();
    assertTrue("Webapp proxy servlet should have redirected to RM",proxyConn.getURL().toString().equals(appAddressInRm));
    configuration.setBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,true);
    proxyConn=(HttpURLConnection)url.openConnection();
    proxyConn.connect();
    try {
      proxyConn.getResponseCode();
    }
 catch (    ConnectException e) {
    }
    String appAddressInAhs=WebAppUtils.getHttpSchemePrefix(configuration) + WebAppUtils.getAHSWebAppURLWithoutScheme(configuration) + "/applicationhistory"+ "/apps/"+ app.toString();
    assertTrue("Webapp proxy servlet should have redirected to AHS",proxyConn.getURL().toString().equals(appAddressInAhs));
  }
  finally {
    proxy.close();
  }
}
