{
  String version="MRBenchmark.0.0.2";
  System.out.println(version);
  String usage="Usage: mrbench " + "[-baseDir <base DFS path for output/input, default is /benchmarks/MRBench>] " + "[-jar <local path to job jar file containing Mapper and Reducer implementations, default is current jar file>] "+ "[-numRuns <number of times to run the job, default is 1>] "+ "[-maps <number of maps for each run, default is 2>] "+ "[-reduces <number of reduces for each run, default is 1>] "+ "[-inputLines <number of input lines to generate, default is 1>] "+ "[-inputType <type of input to generate, one of ascending (default), descending, random>] "+ "[-verbose]";
  String jarFile=null;
  int inputLines=1;
  int numRuns=1;
  int numMaps=2;
  int numReduces=1;
  boolean verbose=false;
  Order inputSortOrder=Order.ASCENDING;
  for (int i=0; i < args.length; i++) {
    if (args[i].equals("-jar")) {
      jarFile=args[++i];
    }
 else     if (args[i].equals("-numRuns")) {
      numRuns=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-baseDir")) {
      BASE_DIR=new Path(args[++i]);
    }
 else     if (args[i].equals("-maps")) {
      numMaps=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-reduces")) {
      numReduces=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-inputLines")) {
      inputLines=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-inputType")) {
      String s=args[++i];
      if (s.equalsIgnoreCase("ascending")) {
        inputSortOrder=Order.ASCENDING;
      }
 else       if (s.equalsIgnoreCase("descending")) {
        inputSortOrder=Order.DESCENDING;
      }
 else       if (s.equalsIgnoreCase("random")) {
        inputSortOrder=Order.RANDOM;
      }
 else {
        inputSortOrder=null;
      }
    }
 else     if (args[i].equals("-verbose")) {
      verbose=true;
    }
 else {
      System.err.println(usage);
      System.exit(-1);
    }
  }
  if (numRuns < 1 || numMaps < 1 || numReduces < 1 || inputLines < 0 || inputSortOrder == null) {
    System.err.println(usage);
    return -1;
  }
  JobConf jobConf=setupJob(numMaps,numReduces,jarFile);
  FileSystem fs=FileSystem.get(jobConf);
  Path inputFile=new Path(INPUT_DIR,"input_" + (new Random()).nextInt() + ".txt");
  generateTextFile(fs,inputFile,inputLines,inputSortOrder);
  fs.mkdirs(BASE_DIR);
  ArrayList<Long> execTimes=new ArrayList<Long>();
  try {
    execTimes=runJobInSequence(jobConf,numRuns);
  }
  finally {
    fs.delete(BASE_DIR,true);
  }
  if (verbose) {
    System.out.println("Total MapReduce jobs executed: " + numRuns);
    System.out.println("Total lines of data per job: " + inputLines);
    System.out.println("Maps per job: " + numMaps);
    System.out.println("Reduces per job: " + numReduces);
  }
  int i=0;
  long totalTime=0;
  for (  Long time : execTimes) {
    totalTime+=time.longValue();
    if (verbose) {
      System.out.println("Total milliseconds for task: " + (++i) + " = "+ time);
    }
  }
  long avgTime=totalTime / numRuns;
  System.out.println("DataLines\tMaps\tReduces\tAvgTime (milliseconds)");
  System.out.println(inputLines + "\t\t" + numMaps+ "\t"+ numReduces+ "\t"+ avgTime);
  return 0;
}
