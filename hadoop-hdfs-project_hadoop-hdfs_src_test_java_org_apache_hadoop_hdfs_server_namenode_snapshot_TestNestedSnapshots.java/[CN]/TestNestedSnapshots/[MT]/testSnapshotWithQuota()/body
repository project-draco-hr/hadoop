{
  final String dirStr="/testSnapshotWithQuota/dir";
  final Path dir=new Path(dirStr);
  hdfs.mkdirs(dir,new FsPermission((short)0777));
  hdfs.allowSnapshot(dir);
  final int NS_QUOTA=6;
  hdfs.setQuota(dir,NS_QUOTA,HdfsConstants.QUOTA_DONT_SET);
  final Path foo=new Path(dir,"foo");
  final Path f1=new Path(foo,"f1");
  DFSTestUtil.createFile(hdfs,f1,BLOCKSIZE,REPLICATION,SEED);
{
    final Path snapshotPath=hdfs.createSnapshot(dir);
    final String snapshotName=snapshotPath.getName();
    Assert.assertTrue("snapshotName=" + snapshotName,Pattern.matches("s\\d\\d\\d\\d\\d\\d\\d\\d-\\d\\d\\d\\d\\d\\d\\.\\d\\d\\d",snapshotName));
    final Path parent=snapshotPath.getParent();
    Assert.assertEquals(HdfsConstants.DOT_SNAPSHOT_DIR,parent.getName());
    Assert.assertEquals(dir,parent.getParent());
  }
  final Path f2=new Path(foo,"f2");
  DFSTestUtil.createFile(hdfs,f2,BLOCKSIZE,REPLICATION,SEED);
  try {
    final Path f3=new Path(foo,"f3");
    DFSTestUtil.createFile(hdfs,f3,BLOCKSIZE,REPLICATION,SEED);
    Assert.fail();
  }
 catch (  NSQuotaExceededException e) {
    SnapshotTestHelper.LOG.info("The exception is expected.",e);
  }
  try {
    hdfs.createSnapshot(dir);
    Assert.fail();
  }
 catch (  NSQuotaExceededException e) {
    SnapshotTestHelper.LOG.info("The exception is expected.",e);
  }
  try {
    hdfs.setPermission(f1,new FsPermission((short)0));
    Assert.fail();
  }
 catch (  RemoteException e) {
    Assert.assertSame(NSQuotaExceededException.class,e.unwrapRemoteException().getClass());
    SnapshotTestHelper.LOG.info("The exception is expected.",e);
  }
  hdfs.setPermission(f2,new FsPermission((short)0));
  hdfs.setQuota(dir,NS_QUOTA + 2,HdfsConstants.QUOTA_DONT_SET);
  hdfs.createSnapshot(dir,"s1");
  hdfs.setPermission(foo,new FsPermission((short)0444));
}
