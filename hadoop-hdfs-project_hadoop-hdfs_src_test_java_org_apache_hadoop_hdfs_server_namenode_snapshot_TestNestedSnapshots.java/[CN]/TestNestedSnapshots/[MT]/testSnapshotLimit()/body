{
  final int step=1000;
  final String dirStr="/testSnapshotLimit/dir";
  final Path dir=new Path(dirStr);
  hdfs.mkdirs(dir,new FsPermission((short)0777));
  hdfs.allowSnapshot(dir);
  int s=0;
  for (; s < SNAPSHOT_LIMIT; s++) {
    final String snapshotName="s" + s;
    hdfs.createSnapshot(dir,snapshotName);
    if (s % step == 0) {
      final Path file=new Path(dirStr,"f" + s);
      DFSTestUtil.createFile(hdfs,file,BLOCKSIZE,REPLICATION,SEED);
    }
  }
  try {
    hdfs.createSnapshot(dir,"s" + s);
    Assert.fail("Expected to fail to create snapshot, but didn't.");
  }
 catch (  IOException ioe) {
    SnapshotTestHelper.LOG.info("The exception is expected.",ioe);
  }
  for (int f=0; f < SNAPSHOT_LIMIT; f+=step) {
    final String file="f" + f;
    s=RANDOM.nextInt(step);
    for (; s < SNAPSHOT_LIMIT; s+=RANDOM.nextInt(step)) {
      final Path p=SnapshotTestHelper.getSnapshotPath(dir,"s" + s,file);
      Assert.assertEquals(s > f,hdfs.exists(p));
    }
  }
}
