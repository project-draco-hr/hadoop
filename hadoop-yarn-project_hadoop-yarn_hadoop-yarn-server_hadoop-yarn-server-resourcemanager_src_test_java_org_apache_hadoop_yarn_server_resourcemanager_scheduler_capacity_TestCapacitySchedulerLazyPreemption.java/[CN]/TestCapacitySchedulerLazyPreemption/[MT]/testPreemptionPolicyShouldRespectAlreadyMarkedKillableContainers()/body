{
  MockRM rm1=new MockRM(conf);
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",8 * GB);
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"a");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  am1.allocate("*",1 * GB,6,new ArrayList<ContainerId>());
  for (int i=0; i < 6; i++) {
    cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  }
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  Assert.assertEquals(7,schedulerApp1.getLiveContainers().size());
  RMApp app2=rm1.submitApp(1 * GB,"app","user",null,"c");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm1);
  Assert.assertEquals(0 * GB,cs.getNode(nm1.getNodeId()).getUnallocatedResource().getMemorySize());
  am2.allocate("*",1 * GB,1,new ArrayList<ContainerId>());
  ProportionalCapacityPreemptionPolicy editPolicy=(ProportionalCapacityPreemptionPolicy)getSchedulingEditPolicy(rm1);
  editPolicy.editSchedule();
  editPolicy.editSchedule();
  PreemptionManager pm=cs.getPreemptionManager();
  waitKillableContainersSize(pm,"a",RMNodeLabelsManager.NO_LABEL,1);
  Assert.assertEquals(0,editPolicy.getToPreemptContainers().size());
  editPolicy.editSchedule();
  Assert.assertEquals(0,editPolicy.getToPreemptContainers().size());
  Set<ContainerId> previousKillableContainers=new HashSet<>(pm.getKillableContainersMap("a",RMNodeLabelsManager.NO_LABEL).keySet());
  am2.allocate("*",1 * GB,2,new ArrayList<ContainerId>());
  editPolicy.editSchedule();
  Assert.assertEquals(1,editPolicy.getToPreemptContainers().size());
  editPolicy.editSchedule();
  Assert.assertEquals(0,editPolicy.getToPreemptContainers().size());
  Map<ContainerId,RMContainer> killableContainers=waitKillableContainersSize(pm,"a",RMNodeLabelsManager.NO_LABEL,2);
  Assert.assertTrue(Sets.difference(previousKillableContainers,killableContainers.keySet()).isEmpty());
}
