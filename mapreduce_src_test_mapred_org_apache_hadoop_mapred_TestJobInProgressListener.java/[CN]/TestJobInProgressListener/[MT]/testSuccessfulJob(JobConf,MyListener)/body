{
  LOG.info("Testing job-success");
  Path inDir=new Path(TEST_ROOT_DIR + "/jiplistenerjob/input");
  Path outDir=new Path(TEST_ROOT_DIR + "/jiplistenerjob/output");
  job.setNumMapTasks(1);
  job.setNumReduceTasks(0);
  RunningJob rJob=UtilsForTests.runJobSucceed(job,inDir,outDir);
  rJob.waitForCompletion();
  assertFalse("Missing event notification for a successful job",myListener.contains(rJob.getID()));
  assertEquals("Job failed!",JobStatus.SUCCEEDED,rJob.getJobState());
  LOG.info("Testing job with no task job with setup and cleanup");
  job.setNumMapTasks(0);
  job.setNumReduceTasks(0);
  outDir=new Path(TEST_ROOT_DIR + "/jiplistenerjob/output-no-tasks");
  rJob=UtilsForTests.runJobSucceed(job,inDir,outDir);
  rJob.waitForCompletion();
  assertFalse("Missing event notification for a successful job with no tasks",myListener.contains(rJob.getID(),true));
  assertEquals("Job failed!",JobStatus.SUCCEEDED,rJob.getJobState());
  LOG.info("Testing job with no-set-cleanup no task");
  outDir=new Path(TEST_ROOT_DIR + "/jiplistenerjob/output-no-tasks-no-set");
  Job j=MapReduceTestUtil.createJob(mr.createJobConf(),inDir,outDir,0,0);
  j.setJobSetupCleanupNeeded(false);
  j.setOutputFormatClass(TestNoJobSetupCleanup.MyOutputFormat.class);
  j.submit();
  j.waitForCompletion(true);
  JobID id=JobID.downgrade(j.getJobID());
  assertFalse("Missing event notification on no-set-cleanup no task job",myListener.contains(id,true));
  assertEquals("Job status doesnt reflect success",JobStatus.SUCCEEDED,rJob.getJobState());
}
