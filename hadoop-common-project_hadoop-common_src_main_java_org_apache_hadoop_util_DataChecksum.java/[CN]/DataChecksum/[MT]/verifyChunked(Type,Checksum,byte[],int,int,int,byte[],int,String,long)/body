{
  final int dataEnd=dataOffset + dataLength;
  int i=dataOffset;
  int j=crcsOffset;
  for (final int n=dataEnd - bytesPerCrc + 1; i < n; i+=bytesPerCrc, j+=4) {
    algorithm.reset();
    algorithm.update(data,i,bytesPerCrc);
    final int computed=(int)algorithm.getValue();
    final int expected=((crcs[j] << 24) + ((crcs[j + 1] << 24) >>> 8)) + (((crcs[j + 2] << 24) >>> 16) + ((crcs[j + 3] << 24) >>> 24));
    if (computed != expected) {
      final long errPos=basePos + i - dataOffset;
      throwChecksumException(type,algorithm,filename,errPos,expected,computed);
    }
  }
  final int remainder=dataEnd - i;
  if (remainder > 0) {
    algorithm.reset();
    algorithm.update(data,i,remainder);
    final int computed=(int)algorithm.getValue();
    final int expected=((crcs[j] << 24) + ((crcs[j + 1] << 24) >>> 8)) + (((crcs[j + 2] << 24) >>> 16) + ((crcs[j + 3] << 24) >>> 24));
    if (computed != expected) {
      final long errPos=basePos + i - dataOffset;
      throwChecksumException(type,algorithm,filename,errPos,expected,computed);
    }
  }
}
