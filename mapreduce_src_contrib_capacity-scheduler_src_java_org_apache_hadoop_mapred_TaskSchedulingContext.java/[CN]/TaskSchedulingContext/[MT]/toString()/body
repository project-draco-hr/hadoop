{
  float occupiedSlotsAsPercent=getCapacity() != 0 ? ((float)getNumSlotsOccupied() * 100 / getCapacity()) : 0;
  StringBuffer sb=new StringBuffer();
  sb.append("Capacity: " + getCapacity() + " slots\n");
  if (getMaxCapacity() >= 0) {
    sb.append("Maximum capacity: " + getMaxCapacity() + " slots\n");
  }
  sb.append(String.format("Used capacity: %d (%.1f%% of Capacity)\n",Integer.valueOf(getNumSlotsOccupied()),Float.valueOf(occupiedSlotsAsPercent)));
  sb.append(String.format("Running tasks: %d\n",Integer.valueOf(getNumRunningTasks())));
  if (getNumSlotsOccupied() != 0) {
    sb.append("Active users:\n");
    for (    Map.Entry<String,Integer> entry : getNumSlotsOccupiedByUser().entrySet()) {
      if ((entry.getValue() == null) || (entry.getValue().intValue() <= 0)) {
        continue;
      }
      sb.append("User '" + entry.getKey() + "': ");
      int numSlotsOccupiedByThisUser=entry.getValue().intValue();
      float p=(float)numSlotsOccupiedByThisUser * 100 / getNumSlotsOccupied();
      sb.append(String.format("%d (%.1f%% of used capacity)\n",Long.valueOf(numSlotsOccupiedByThisUser),Float.valueOf(p)));
    }
  }
  return sb.toString();
}
