{
  LOG.debug("creating " + factor + " files with "+ count / factor + " records");
  SequenceFile.Writer[] writers=new SequenceFile.Writer[factor];
  Path[] names=new Path[factor];
  Path[] sortedNames=new Path[factor];
  for (int i=0; i < factor; i++) {
    names[i]=file.suffix("." + i);
    sortedNames[i]=names[i].suffix(".sorted");
    fs.delete(names[i],true);
    fs.delete(sortedNames[i],true);
    writers[i]=SequenceFile.createWriter(fs,conf,names[i],RandomDatum.class,RandomDatum.class,compressionType);
  }
  RandomDatum.Generator generator=new RandomDatum.Generator(seed);
  for (int i=0; i < count; i++) {
    generator.next();
    RandomDatum key=generator.getKey();
    RandomDatum value=generator.getValue();
    writers[i % factor].append(key,value);
  }
  for (int i=0; i < factor; i++)   writers[i].close();
  for (int i=0; i < factor; i++) {
    LOG.debug("sorting file " + i + " with "+ count / factor + " records");
    newSorter(fs,fast,megabytes,factor).sort(names[i],sortedNames[i]);
  }
  LOG.info("merging " + factor + " files with "+ count / factor + " debug");
  fs.delete(new Path(file + ".sorted"),true);
  newSorter(fs,fast,megabytes,factor).merge(sortedNames,file.suffix(".sorted"));
}
