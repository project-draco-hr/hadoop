{
  conf=new Configuration();
  conf.setLong(DFS_BLOCK_SIZE_KEY,BLOCK_SIZE);
  conf.setInt(DFS_NAMENODE_LAZY_PERSIST_FILE_SCRUB_INTERVAL_SEC,LAZY_WRITE_FILE_SCRUBBER_INTERVAL_SEC);
  conf.setLong(DFS_HEARTBEAT_INTERVAL_KEY,HEARTBEAT_INTERVAL_SEC);
  conf.setInt(DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,HEARTBEAT_RECHECK_INTERVAL_MSEC);
  conf.setInt(DFS_DATANODE_LAZY_WRITER_INTERVAL_SEC,LAZY_WRITER_INTERVAL_SEC);
  conf.setInt(DFS_DATANODE_RAM_DISK_LOW_WATERMARK_REPLICAS,EVICTION_LOW_WATERMARK);
  conf.setBoolean(DFS_CLIENT_READ_SHORTCIRCUIT_KEY,useSCR);
  long[] capacities=null;
  if (hasTransientStorage && ramDiskReplicaCapacity >= 0) {
    long ramDiskStorageLimit=((long)ramDiskReplicaCapacity * BLOCK_SIZE) + (BLOCK_SIZE - 1);
    capacities=new long[]{ramDiskStorageLimit,-1};
  }
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(REPL_FACTOR).storageCapacities(capacities).storageTypes(hasTransientStorage ? new StorageType[]{RAM_DISK,DEFAULT} : null).build();
  fs=cluster.getFileSystem();
  client=fs.getClient();
  try {
    jmx=initJMX();
  }
 catch (  Exception e) {
    fail("Failed initialize JMX for testing: " + e);
  }
  LOG.info("Cluster startup complete");
}
