{
  boolean wasFailed=tip.isFailed();
  boolean wasSpeculating=tip.isSpeculating();
  tip.incompleteSubTask(taskid,this.status);
  decrementSpeculativeCount(wasSpeculating,tip);
  boolean isRunning=tip.isRunning();
  boolean isComplete=tip.isComplete();
  if (wasAttemptRunning) {
    if (!tip.isJobCleanupTask() && !tip.isJobSetupTask()) {
      if (tip.isMapTask()) {
        runningMapTasks-=1;
      }
 else {
        runningReduceTasks-=1;
      }
    }
    meterTaskAttempt(tip,status);
  }
  if (wasRunning && !isRunning) {
    if (tip.isJobCleanupTask()) {
      launchedCleanup=false;
    }
 else     if (tip.isJobSetupTask()) {
      launchedSetup=false;
    }
 else     if (tip.isMapTask()) {
      if (!isComplete) {
        retireMap(tip);
        failMap(tip);
      }
    }
 else {
      if (!isComplete) {
        retireReduce(tip);
        failReduce(tip);
      }
    }
  }
  if (wasComplete && !isComplete) {
    if (tip.isMapTask()) {
      failMap(tip);
      finishedMapTasks-=1;
    }
  }
  TaskStatus taskStatus=tip.getTaskStatus(taskid);
  String taskTrackerName=taskStatus.getTaskTracker();
  String taskTrackerHostName=convertTrackerNameToHostName(taskTrackerName);
  int taskTrackerPort=-1;
  TaskTrackerStatus taskTrackerStatus=(taskTracker == null) ? null : taskTracker.getStatus();
  if (taskTrackerStatus != null) {
    taskTrackerPort=taskTrackerStatus.getHttpPort();
  }
  long startTime=taskStatus.getStartTime();
  long finishTime=taskStatus.getFinishTime();
  List<String> taskDiagnosticInfo=tip.getDiagnosticInfo(taskid);
  String diagInfo=taskDiagnosticInfo == null ? "" : StringUtils.arrayToString(taskDiagnosticInfo.toArray(new String[0]));
  TaskType taskType=getTaskType(tip);
  TaskAttemptStartedEvent tse=new TaskAttemptStartedEvent(taskid,taskType,startTime,taskTrackerName,taskTrackerPort,-1);
  jobHistory.logEvent(tse,taskid.getJobID());
  ProgressSplitsBlock splits=tip.getSplits(taskStatus.getTaskID());
  TaskAttemptUnsuccessfulCompletionEvent tue=new TaskAttemptUnsuccessfulCompletionEvent(taskid,taskType,taskStatus.getRunState().toString(),finishTime,taskTrackerHostName,-1,diagInfo,splits.burst());
  jobHistory.logEvent(tue,taskid.getJobID());
  if (!tip.isJobCleanupTask() && !tip.isJobSetupTask()) {
    if (tip.isMapTask()) {
      failedMapTasks++;
    }
 else {
      failedReduceTasks++;
    }
  }
  if (status.getRunState() == TaskStatus.State.FAILED) {
    addTrackerTaskFailure(taskTrackerName,taskTracker);
  }
  jobtracker.markCompletedTaskAttempt(status.getTaskTracker(),taskid);
  if (!wasFailed && tip.isFailed()) {
    boolean killJob=tip.isJobCleanupTask() || tip.isJobSetupTask() ? true : tip.isMapTask() ? ((++failedMapTIPs * 100) > (mapFailuresPercent * numMapTasks)) : ((++failedReduceTIPs * 100) > (reduceFailuresPercent * numReduceTasks));
    if (killJob) {
      LOG.info("Aborting job " + profile.getJobID());
      TaskFailedEvent tfe=new TaskFailedEvent(tip.getTIPId(),finishTime,taskType,diagInfo,TaskStatus.State.FAILED.toString(),null);
      jobHistory.logEvent(tfe,tip.getJob().getJobID());
      if (tip.isJobCleanupTask()) {
        if (tip.isMapTask()) {
          cleanup[1].kill();
        }
 else {
          cleanup[0].kill();
        }
        terminateJob(JobStatus.FAILED);
      }
 else {
        if (tip.isJobSetupTask()) {
          killSetupTip(!tip.isMapTask());
        }
        fail();
      }
    }
    if (!tip.isJobCleanupTask() && !tip.isJobSetupTask()) {
      if (tip.isMapTask()) {
        jobCounters.incrCounter(JobCounter.NUM_FAILED_MAPS,1);
      }
 else {
        jobCounters.incrCounter(JobCounter.NUM_FAILED_REDUCES,1);
      }
    }
  }
}
