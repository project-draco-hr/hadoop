{
  DiskBalancerTestUtil util=new DiskBalancerTestUtil();
  DiskBalancerDataNode node=util.createRandomDataNode(new StorageType[]{StorageType.DISK,StorageType.RAM_DISK},3);
  TreeSet<DiskBalancerVolume> sortedQueue=node.getVolumeSets().get(StorageType.DISK.toString()).getSortedQueue();
  List<DiskBalancerVolume> reverseList=new LinkedList<>();
  List<DiskBalancerVolume> highList=new LinkedList<>();
  int queueSize=sortedQueue.size();
  for (int x=0; x < queueSize; x++) {
    reverseList.add(sortedQueue.first());
    highList.add(sortedQueue.first());
  }
  Collections.reverse(reverseList);
  for (int x=0; x < queueSize; x++) {
    Assert.assertEquals(reverseList.get(x).getCapacity(),highList.get(x).getCapacity());
    Assert.assertEquals(reverseList.get(x).getReserved(),highList.get(x).getReserved());
    Assert.assertEquals(reverseList.get(x).getUsed(),highList.get(x).getUsed());
  }
}
