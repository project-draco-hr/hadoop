{
  final int numDataUnits=rsRawDecoder.getNumDataUnits();
  final int numParityUnits=rsRawDecoder.getNumParityUnits();
  final int numTotalUnits=numDataUnits + numParityUnits;
  final int subPacketSize=getSubPacketSize();
  ByteBuffer fisrtValidInput=HHUtil.findFirstValidInput(inputs);
  final int bufSize=fisrtValidInput.remaining();
  if (inputs.length != numTotalUnits * getSubPacketSize()) {
    throw new IllegalArgumentException("Invalid inputs length");
  }
  if (outputs.length != erasedIndexes.length * getSubPacketSize()) {
    throw new IllegalArgumentException("Invalid outputs length");
  }
  ByteBuffer[][] newIn=new ByteBuffer[subPacketSize][numTotalUnits];
  for (int i=0; i < subPacketSize; ++i) {
    for (int j=0; j < numTotalUnits; ++j) {
      newIn[i][j]=inputs[i * numTotalUnits + j];
    }
  }
  ByteBuffer[][] newOut=new ByteBuffer[subPacketSize][erasedIndexes.length];
  for (int i=0; i < subPacketSize; ++i) {
    for (int j=0; j < erasedIndexes.length; ++j) {
      newOut[i][j]=outputs[i * erasedIndexes.length + j];
    }
  }
  if (erasedIndexes.length == 1 && erasedIndexes[0] < numDataUnits) {
    doDecodeSingle(newIn,newOut,erasedIndexes[0],bufSize,fisrtValidInput.isDirect());
  }
 else {
    doDecodeMultiAndParity(newIn,newOut,erasedIndexes,bufSize);
  }
}
