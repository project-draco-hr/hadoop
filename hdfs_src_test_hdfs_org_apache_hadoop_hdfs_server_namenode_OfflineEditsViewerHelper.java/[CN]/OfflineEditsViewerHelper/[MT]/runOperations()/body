{
  LOG.info("Creating edits by performing fs operations");
  DistributedFileSystem dfs=(DistributedFileSystem)cluster.getFileSystem();
  FileContext fc=FileContext.getFileContext(cluster.getURI(0),config);
  Path pathFileCreate=new Path("/file_create");
  FSDataOutputStream s=dfs.create(pathFileCreate);
  s.close();
  Path pathFileMoved=new Path("/file_moved");
  dfs.rename(pathFileCreate,pathFileMoved);
  dfs.delete(pathFileMoved,false);
  Path pathDirectoryMkdir=new Path("/directory_mkdir");
  dfs.mkdirs(pathDirectoryMkdir);
  s=dfs.create(pathFileCreate);
  s.close();
  dfs.setReplication(pathFileCreate,(short)1);
  Short permission=0777;
  dfs.setPermission(pathFileCreate,new FsPermission(permission));
  dfs.setOwner(pathFileCreate,new String("newOwner"),null);
  long mtime=1285195527000L;
  long atime=mtime;
  dfs.setTimes(pathFileCreate,mtime,atime);
  dfs.setQuota(pathDirectoryMkdir,1000L,FSConstants.QUOTA_DONT_SET);
  fc.rename(pathFileCreate,pathFileMoved,Rename.NONE);
  Path pathConcatTarget=new Path("/file_concat_target");
  Path[] pathConcatFiles=new Path[2];
  pathConcatFiles[0]=new Path("/file_concat_0");
  pathConcatFiles[1]=new Path("/file_concat_1");
  long length=blockSize * 3;
  short replication=1;
  long seed=1;
  DFSTestUtil.createFile(dfs,pathConcatTarget,length,replication,seed);
  DFSTestUtil.createFile(dfs,pathConcatFiles[0],length,replication,seed);
  DFSTestUtil.createFile(dfs,pathConcatFiles[1],length,replication,seed);
  dfs.concat(pathConcatTarget,pathConcatFiles);
  Path pathSymlink=new Path("/file_symlink");
  fc.createSymlink(pathConcatTarget,pathSymlink,false);
  final Token<DelegationTokenIdentifier> token=dfs.getDelegationToken("JobTracker");
  UserGroupInformation longUgi=UserGroupInformation.createRemoteUser("JobTracker/foo.com@FOO.COM");
  UserGroupInformation shortUgi=UserGroupInformation.createRemoteUser("JobTracker");
  try {
    longUgi.doAs(new PrivilegedExceptionAction<Object>(){
      public Object run() throws IOException {
        final DistributedFileSystem dfs=(DistributedFileSystem)cluster.getFileSystem();
        dfs.renewDelegationToken(token);
        dfs.cancelDelegationToken(token);
        return null;
      }
    }
);
  }
 catch (  InterruptedException e) {
    throw new IOException("renewDelegationToken threw InterruptedException",e);
  }
  cluster.getNameNode().getFSImage().getEditLog().logSync();
  String filePath="/hard-lease-recovery-test";
  byte[] bytes="foo-bar-baz".getBytes();
  DFSClientAdapter.stopLeaseRenewer(dfs.getClient());
  FSDataOutputStream leaseRecoveryPath=dfs.create(new Path(filePath));
  leaseRecoveryPath.write(bytes);
  leaseRecoveryPath.hflush();
  cluster.setLeasePeriod(60 * 1000,1000);
  LocatedBlocks locatedBlocks;
  do {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      LOG.info("Innocuous exception",e);
    }
    locatedBlocks=DFSClientAdapter.callGetBlockLocations(cluster.getNameNode(),filePath,0L,bytes.length);
  }
 while (locatedBlocks.isUnderConstruction());
}
