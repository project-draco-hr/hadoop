{
  System.out.println("Startup of the name-node in the checkpoint directory.");
  String primaryDirs=conf.get(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY);
  String primaryEditsDirs=conf.get(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY);
  String checkpointDirs=conf.get(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_DIR_KEY);
  String checkpointEditsDirs=conf.get(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_EDITS_DIR_KEY);
  NameNode nn=startNameNode(conf,checkpointDirs,checkpointEditsDirs,StartupOption.REGULAR);
  System.out.println("Startup of secondary in the same dir as the primary.");
  SecondaryNameNode secondary=null;
  try {
    secondary=startSecondaryNameNode(conf);
    assertFalse(secondary.getFSImage().getStorage().isLockSupported(0));
    secondary.shutdown();
  }
 catch (  IOException e) {
    assertTrue(secondary == null);
  }
  nn.stop();
  nn=null;
  System.out.println("Startup of primary in the same dir as the secondary.");
  nn=startNameNode(conf,primaryDirs,primaryEditsDirs,StartupOption.REGULAR);
  boolean succeed=false;
  do {
    try {
      secondary=startSecondaryNameNode(conf);
      succeed=true;
    }
 catch (    IOException ie) {
      System.out.println("Try again: " + ie.getLocalizedMessage());
    }
  }
 while (!succeed);
  nn.stop();
  nn=null;
  try {
    nn=startNameNode(conf,checkpointDirs,checkpointEditsDirs,StartupOption.REGULAR);
    assertFalse(nn.getFSImage().getStorage().isLockSupported(0));
    nn.stop();
    nn=null;
  }
 catch (  IOException e) {
    assertTrue(nn == null);
  }
  System.out.println("Startup of two secondaries in the same dir.");
  nn=startNameNode(conf,primaryDirs,primaryEditsDirs,StartupOption.REGULAR);
  SecondaryNameNode secondary2=null;
  try {
    secondary2=startSecondaryNameNode(conf);
    assertFalse(secondary2.getFSImage().getStorage().isLockSupported(0));
    secondary2.shutdown();
  }
 catch (  IOException e) {
    assertTrue(secondary2 == null);
  }
  nn.stop();
  nn=null;
  secondary.shutdown();
  System.out.println("Import a checkpoint with existing primary image.");
  try {
    nn=startNameNode(conf,primaryDirs,primaryEditsDirs,StartupOption.IMPORT);
    assertTrue(false);
  }
 catch (  IOException e) {
    assertTrue(nn == null);
  }
  System.out.println("Import a checkpoint with existing primary image.");
  List<URI> nameDirs=(List<URI>)FSNamesystem.getNamespaceDirs(conf);
  List<URI> nameEditsDirs=(List<URI>)FSNamesystem.getNamespaceEditsDirs(conf);
  long fsimageLength=new File(new File(nameDirs.get(0).getPath(),"current"),NameNodeFile.IMAGE.getName()).length();
  for (  URI uri : nameDirs) {
    File dir=new File(uri.getPath());
    if (dir.exists())     if (!(FileUtil.fullyDelete(dir)))     throw new IOException("Cannot remove directory: " + dir);
    if (!dir.mkdirs())     throw new IOException("Cannot create directory " + dir);
  }
  for (  URI uri : nameEditsDirs) {
    File dir=new File(uri.getPath());
    if (dir.exists())     if (!(FileUtil.fullyDelete(dir)))     throw new IOException("Cannot remove directory: " + dir);
    if (!dir.mkdirs())     throw new IOException("Cannot create directory " + dir);
  }
  nn=startNameNode(conf,primaryDirs,primaryEditsDirs,StartupOption.IMPORT);
  FSImage image=nn.getFSImage();
  for (Iterator<StorageDirectory> it=image.getStorage().dirIterator(NameNodeDirType.IMAGE); it.hasNext(); ) {
    assertTrue(image.getStorage().getStorageFile(it.next(),NameNodeFile.IMAGE).length() == fsimageLength);
  }
  nn.stop();
  nn=startNameNode(conf,primaryDirs,primaryEditsDirs,StartupOption.REGULAR);
  Collection<URI> secondaryDirs=FSImage.getCheckpointDirs(conf,null);
  for (  URI uri : secondaryDirs) {
    File dir=new File(uri.getPath());
    Storage.rename(new File(dir,"current"),new File(dir,"lastcheckpoint.tmp"));
  }
  secondary=startSecondaryNameNode(conf);
  secondary.shutdown();
  for (  URI uri : secondaryDirs) {
    File dir=new File(uri.getPath());
    assertTrue(new File(dir,"current").exists());
    assertFalse(new File(dir,"lastcheckpoint.tmp").exists());
  }
  for (  URI uri : secondaryDirs) {
    File dir=new File(uri.getPath());
    Storage.rename(new File(dir,"previous.checkpoint"),new File(dir,"lastcheckpoint.tmp"));
  }
  secondary=startSecondaryNameNode(conf);
  secondary.shutdown();
  for (  URI uri : secondaryDirs) {
    File dir=new File(uri.getPath());
    assertTrue(new File(dir,"current").exists());
    assertTrue(new File(dir,"previous.checkpoint").exists());
    assertFalse(new File(dir,"lastcheckpoint.tmp").exists());
  }
  nn.stop();
  nn=null;
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build();
  cluster.waitActive();
  cluster.shutdown();
}
