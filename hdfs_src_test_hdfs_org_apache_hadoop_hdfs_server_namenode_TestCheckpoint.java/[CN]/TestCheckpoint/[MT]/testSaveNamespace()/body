{
  MiniDFSCluster cluster=null;
  DistributedFileSystem fs=null;
  FileContext fc;
  try {
    Configuration conf=new HdfsConfiguration();
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build();
    cluster.waitActive();
    fs=(DistributedFileSystem)(cluster.getFileSystem());
    fc=FileContext.getFileContext(cluster.getURI(0));
    DFSAdmin admin=new DFSAdmin(conf);
    String[] args=new String[]{"-saveNamespace"};
    try {
      admin.run(args);
    }
 catch (    IOException eIO) {
      assertTrue(eIO.getLocalizedMessage().contains("Safe mode should be turned ON"));
    }
catch (    Exception e) {
      throw new IOException(e);
    }
    Path file=new Path("namespace.dat");
    writeFile(fs,file,replication);
    checkFile(fs,file,replication);
    Path symlink=new Path("file.link");
    fc.createSymlink(file,symlink,false);
    assertTrue(fc.getFileLinkStatus(symlink).isSymlink());
    Collection<URI> editsDirs=cluster.getNameEditsDirs(0);
    for (    URI uri : editsDirs) {
      File ed=new File(uri.getPath());
      assertTrue(new File(ed,"current/edits").length() > Integer.SIZE / Byte.SIZE);
    }
    fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
    try {
      admin.run(args);
    }
 catch (    Exception e) {
      throw new IOException(e);
    }
    for (    URI uri : editsDirs) {
      File ed=new File(uri.getPath());
      assertTrue(new File(ed,"current/edits").length() == Integer.SIZE / Byte.SIZE);
    }
    cluster.shutdown();
    cluster=null;
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build();
    cluster.waitActive();
    fs=(DistributedFileSystem)(cluster.getFileSystem());
    checkFile(fs,file,replication);
    fc=FileContext.getFileContext(cluster.getURI(0));
    assertTrue(fc.getFileLinkStatus(symlink).isSymlink());
  }
  finally {
    if (fs != null)     fs.close();
    if (cluster != null)     cluster.shutdown();
  }
}
