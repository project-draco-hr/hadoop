{
  System.out.println("Starting testSecondaryNamenodeError 1");
  Path file1=new Path("checkpointxx.dat");
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build();
  cluster.waitActive();
  FileSystem fileSys=cluster.getFileSystem();
  try {
    assertTrue(!fileSys.exists(file1));
    SecondaryNameNode secondary=startSecondaryNameNode(conf);
    ErrorSimulator.setErrorSimulation(0);
    try {
      secondary.doCheckpoint();
      assertTrue(false);
    }
 catch (    IOException e) {
    }
    ErrorSimulator.clearErrorSimulation(0);
    secondary.shutdown();
    writeFile(fileSys,file1,replication);
    checkFile(fileSys,file1,replication);
  }
  finally {
    fileSys.close();
    cluster.shutdown();
  }
  System.out.println("Starting testSecondaryNamenodeError 2");
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build();
  cluster.waitActive();
  FSImage image=cluster.getNameNode().getFSImage();
  for (Iterator<StorageDirectory> it=image.getStorage().dirIterator(NameNodeDirType.IMAGE); it.hasNext(); ) {
    StorageDirectory sd=it.next();
    assertFalse(image.getStorage().getStorageFile(sd,NameNodeFile.IMAGE_NEW).exists());
  }
  for (Iterator<StorageDirectory> it=image.getStorage().dirIterator(NameNodeDirType.EDITS); it.hasNext(); ) {
    StorageDirectory sd=it.next();
    assertFalse(image.getStorage().getEditNewFile(sd).exists());
    File edits=image.getStorage().getEditFile(sd);
    assertTrue(edits.exists());
    long editsLen=edits.length();
    assertTrue(editsLen == Integer.SIZE / Byte.SIZE);
  }
  fileSys=cluster.getFileSystem();
  try {
    checkFile(fileSys,file1,replication);
    cleanupFile(fileSys,file1);
    SecondaryNameNode secondary=startSecondaryNameNode(conf);
    secondary.doCheckpoint();
    secondary.shutdown();
  }
  finally {
    fileSys.close();
    cluster.shutdown();
  }
}
