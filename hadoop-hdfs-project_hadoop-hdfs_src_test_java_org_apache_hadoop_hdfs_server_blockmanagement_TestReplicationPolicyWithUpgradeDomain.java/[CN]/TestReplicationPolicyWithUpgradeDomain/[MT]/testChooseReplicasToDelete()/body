{
  Collection<DatanodeStorageInfo> nonExcess=new ArrayList<>();
  nonExcess.add(storages[0]);
  nonExcess.add(storages[1]);
  nonExcess.add(storages[2]);
  nonExcess.add(storages[3]);
  List<DatanodeStorageInfo> excessReplicas;
  BlockStoragePolicySuite POLICY_SUITE=BlockStoragePolicySuite.createDefaultSuite();
  BlockStoragePolicy storagePolicy=POLICY_SUITE.getDefaultPolicy();
  DatanodeDescriptor delHintNode=storages[0].getDatanodeDescriptor();
  List<StorageType> excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
  excessReplicas=replicator.chooseReplicasToDelete(nonExcess,3,excessTypes,storages[3].getDatanodeDescriptor(),delHintNode);
  assertTrue(excessReplicas.size() == 1);
  assertTrue(excessReplicas.contains(storages[0]));
  delHintNode=storages[1].getDatanodeDescriptor();
  excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
  excessReplicas=replicator.chooseReplicasToDelete(nonExcess,3,excessTypes,storages[3].getDatanodeDescriptor(),delHintNode);
  assertTrue(excessReplicas.size() == 1);
  assertTrue(excessReplicas.contains(storages[0]));
  nonExcess.clear();
  nonExcess.add(storages[0]);
  nonExcess.add(storages[1]);
  nonExcess.add(storages[4]);
  nonExcess.add(storages[8]);
  excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
  excessReplicas=replicator.chooseReplicasToDelete(nonExcess,3,excessTypes,storages[8].getDatanodeDescriptor(),null);
  assertTrue(excessReplicas.size() == 1);
  assertTrue(excessReplicas.contains(storages[1]));
  nonExcess.clear();
  nonExcess.add(storages[0]);
  nonExcess.add(storages[1]);
  nonExcess.add(storages[4]);
  nonExcess.add(storages[5]);
  excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
  excessReplicas=replicator.chooseReplicasToDelete(nonExcess,3,excessTypes,storages[8].getDatanodeDescriptor(),null);
  assertTrue(excessReplicas.size() == 1);
  assertTrue(excessReplicas.contains(storages[1]) || excessReplicas.contains(storages[4]));
  nonExcess.clear();
  nonExcess.add(storages[0]);
  nonExcess.add(storages[1]);
  nonExcess.add(storages[2]);
  nonExcess.add(storages[3]);
  DatanodeStorageInfo excessStorage=DFSTestUtil.createDatanodeStorageInfo("Storage-excess-ID","localhost",delHintNode.getNetworkLocation(),"foo.com",StorageType.ARCHIVE,delHintNode.getUpgradeDomain());
  nonExcess.add(excessStorage);
  excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
  excessReplicas=replicator.chooseReplicasToDelete(nonExcess,3,excessTypes,storages[3].getDatanodeDescriptor(),null);
  assertTrue(excessReplicas.size() == 2);
  assertTrue(excessReplicas.contains(storages[0]));
  assertTrue(excessReplicas.contains(excessStorage));
  DatanodeStorageInfo excessSSD=DFSTestUtil.createDatanodeStorageInfo("Storage-excess-SSD-ID","localhost",storages[0].getDatanodeDescriptor().getNetworkLocation(),"foo.com",StorageType.SSD,null);
  DatanodeStorageInfo[] ssds={excessSSD};
  DatanodeDescriptor ssdNodes[]=DFSTestUtil.toDatanodeDescriptor(ssds);
  ssdNodes[0].setUpgradeDomain(Integer.toString(4));
  nonExcess.clear();
  nonExcess.add(excessSSD);
  nonExcess.add(storages[3]);
  nonExcess.add(storages[7]);
  nonExcess.add(storages[8]);
  excessTypes=storagePolicy.chooseExcess((short)3,DatanodeStorageInfo.toStorageTypes(nonExcess));
  excessReplicas=replicator.chooseReplicasToDelete(nonExcess,3,excessTypes,storages[3].getDatanodeDescriptor(),storages[7].getDatanodeDescriptor());
  assertEquals(1,excessReplicas.size());
  assertTrue(excessReplicas.contains(excessSSD));
}
