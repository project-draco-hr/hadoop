{
  FileSystem rootFs=FileSystem.get(conf);
  Path p1=new Path("/p1");
  rootFs.mkdirs(p1);
  rootFs.setOwner(p1,USER1_NAME,GROUP1_NAME);
  fs=USER1.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws Exception {
      return FileSystem.get(conf);
    }
  }
);
  fs.setPermission(p1,new FsPermission((short)0444));
  fs.access(p1,FsAction.READ);
  try {
    fs.access(p1,FsAction.WRITE);
    fail("The access call should have failed.");
  }
 catch (  AccessControlException e) {
    assertTrue("Permission denied messages must carry the username",e.getMessage().contains(USER1_NAME));
    assertTrue("Permission denied messages must carry the path parent",e.getMessage().contains(p1.getParent().toUri().getPath()));
  }
  Path badPath=new Path("/bad/bad");
  try {
    fs.access(badPath,FsAction.READ);
    fail("The access call should have failed");
  }
 catch (  FileNotFoundException e) {
  }
}
