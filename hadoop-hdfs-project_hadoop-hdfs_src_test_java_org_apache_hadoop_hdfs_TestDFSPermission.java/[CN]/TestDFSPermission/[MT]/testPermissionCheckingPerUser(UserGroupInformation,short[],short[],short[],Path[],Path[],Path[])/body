{
  boolean[] isDirEmpty=new boolean[NUM_TEST_PERMISSIONS];
  login(SUPERUSER);
  for (int i=0; i < NUM_TEST_PERMISSIONS; i++) {
    create(OpType.CREATE,files[i]);
    create(OpType.MKDIRS,dirs[i]);
    fs.setOwner(files[i],USER1_NAME,GROUP2_NAME);
    fs.setOwner(dirs[i],USER1_NAME,GROUP2_NAME);
    checkOwnership(dirs[i],USER1_NAME,GROUP2_NAME);
    checkOwnership(files[i],USER1_NAME,GROUP2_NAME);
    FsPermission fsPermission=new FsPermission(filePermission[i]);
    fs.setPermission(files[i],fsPermission);
    fs.setPermission(dirs[i],fsPermission);
    isDirEmpty[i]=(fs.listStatus(dirs[i]).length == 0);
  }
  login(ugi);
  for (int i=0; i < NUM_TEST_PERMISSIONS; i++) {
    testCreateMkdirs(ugi,new Path(parentDirs[i],FILE_DIR_NAME),ancestorPermission[i],parentPermission[i]);
    testOpen(ugi,files[i],ancestorPermission[i],parentPermission[i],filePermission[i]);
    testSetReplication(ugi,files[i],ancestorPermission[i],parentPermission[i],filePermission[i]);
    testSetTimes(ugi,files[i],ancestorPermission[i],parentPermission[i],filePermission[i]);
    testStats(ugi,files[i],ancestorPermission[i],parentPermission[i]);
    testList(ugi,files[i],dirs[i],ancestorPermission[i],parentPermission[i],filePermission[i]);
    int next=i == NUM_TEST_PERMISSIONS - 1 ? 0 : i + 1;
    testRename(ugi,files[i],files[next],ancestorPermission[i],parentPermission[i],ancestorPermission[next],parentPermission[next]);
    testDeleteFile(ugi,files[i],ancestorPermission[i],parentPermission[i]);
    testDeleteDir(ugi,dirs[i],ancestorPermission[i],parentPermission[i],filePermission[i],null,isDirEmpty[i]);
  }
  checkNonExistentFile();
}
