{
  short uMask=DEFAULT_UMASK;
  PermissionGenerator generator=new PermissionGenerator(r);
  FsPermission permission=new FsPermission(DEFAULT_PERMISSION);
  for (short i=0; i < NUM_TEST_PERMISSIONS; i++) {
    uMask=generator.next();
    initFileSystem(uMask);
    createAndCheckPermission(op,FILE_DIR_PATH,uMask,permission,true);
    closeFileSystem();
  }
  uMask=DEFAULT_UMASK;
  initFileSystem(uMask);
  createAndCheckPermission(op,FILE_DIR_PATH,uMask,new FsPermission((short)0643),true);
  closeFileSystem();
  uMask=(short)0222;
  initFileSystem(uMask);
  createAndCheckPermission(op,FILE_DIR_PATH,uMask,new FsPermission((short)0643),false);
  closeFileSystem();
  uMask=(short)0111;
  initFileSystem(uMask);
  fs.setPermission(FILE_DIR_PATH,new FsPermission(uMask));
  short expectedPermission=(short)0111;
  checkPermission(FILE_DIR_PATH,expectedPermission,true);
  closeFileSystem();
  uMask=DEFAULT_UMASK;
  initFileSystem(uMask);
  assertFalse("File shouldn't exists",fs.exists(NON_EXISTENT_PATH));
  createAndCheckPermission(op,NON_EXISTENT_PATH,uMask,new FsPermission(DEFAULT_PERMISSION),false);
  Path parent=NON_EXISTENT_PATH.getParent();
  checkPermission(parent,getPermission(parent.getParent()),true);
  closeFileSystem();
}
