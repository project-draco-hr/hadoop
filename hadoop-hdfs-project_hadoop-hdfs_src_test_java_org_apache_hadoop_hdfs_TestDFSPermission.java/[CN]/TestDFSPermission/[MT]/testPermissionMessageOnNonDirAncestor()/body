{
  FileSystem rootFs=FileSystem.get(conf);
  Path p4=new Path("/p4");
  rootFs.mkdirs(p4);
  rootFs.setOwner(p4,USER1_NAME,GROUP1_NAME);
  final Path fpath=new Path("/p4/file");
  DataOutputStream out=rootFs.create(fpath);
  out.writeBytes("dhruba: " + fpath);
  out.close();
  rootFs.setOwner(fpath,USER1_NAME,GROUP1_NAME);
  assertTrue(rootFs.exists(fpath));
  fs=USER1.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws Exception {
      return FileSystem.get(conf);
    }
  }
);
  final Path nfpath=new Path("/p4/file/nonexisting");
  assertFalse(rootFs.exists(nfpath));
  try {
    fs.exists(nfpath);
    fail("The exists call should have failed.");
  }
 catch (  AccessControlException e) {
    assertTrue("Permission denied messages must carry file path",e.getMessage().contains(fpath.getName()));
    assertTrue("Permission denied messages must specify existing_file is not " + "a directory, when checked on /existing_file/non_existing_name",e.getMessage().contains("is not a directory"));
  }
}
