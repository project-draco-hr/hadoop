{
  boolean overwrite=false;
  if (options != null) {
    for (    Rename option : options) {
      if (option == Rename.OVERWRITE) {
        overwrite=true;
      }
    }
  }
  Rename2RequestProto req=Rename2RequestProto.newBuilder().setSrc(src).setDst(dst).setOverwriteDest(overwrite).build();
  try {
    if (Client.isAsynchronousMode()) {
      rpcProxy.rename2(null,req);
      final Callable<Message> returnMessageCallback=ProtobufRpcEngine.getReturnMessageCallback();
      Callable<Void> callBack=new Callable<Void>(){
        @Override public Void call() throws Exception {
          returnMessageCallback.call();
          return null;
        }
      }
;
      RETURN_VALUE_CALLBACK.set(callBack);
    }
 else {
      rpcProxy.rename2(null,req);
    }
  }
 catch (  ServiceException e) {
    throw ProtobufHelper.getRemoteException(e);
  }
}
