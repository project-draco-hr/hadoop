{
  ApplicationId appId=ApplicationId.newInstance(1,1);
  ApplicationReport mockReport=mock(ApplicationReport.class);
  when(mockReport.getApplicationId()).thenReturn(appId);
  GetApplicationsResponse mockAppsResponse=mock(GetApplicationsResponse.class);
  when(mockAppsResponse.getApplicationList()).thenReturn(Arrays.asList(new ApplicationReport[]{mockReport}));
  ClientRMService mockClientSvc=mock(ClientRMService.class);
  when(mockClientSvc.getApplications(isA(GetApplicationsRequest.class),anyBoolean())).thenReturn(mockAppsResponse);
  ResourceManager mockRM=mock(ResourceManager.class);
  RMContextImpl rmContext=new RMContextImpl(null,null,null,null,null,null,null,null,null,null);
  when(mockRM.getRMContext()).thenReturn(rmContext);
  when(mockRM.getClientRMService()).thenReturn(mockClientSvc);
  rmContext.setNodeLabelManager(mock(RMNodeLabelsManager.class));
  RMWebServices webSvc=new RMWebServices(mockRM,new Configuration(),mock(HttpServletResponse.class));
  final Set<String> emptySet=Collections.unmodifiableSet(Collections.<String>emptySet());
  HttpServletRequest mockHsr=mock(HttpServletRequest.class);
  AppsInfo appsInfo=webSvc.getApps(mockHsr,null,emptySet,null,null,null,null,null,null,null,null,emptySet,emptySet);
  assertTrue(appsInfo.getApps().isEmpty());
  appsInfo=webSvc.getApps(mockHsr,null,emptySet,"FAILED",null,null,null,null,null,null,null,emptySet,emptySet);
  assertTrue(appsInfo.getApps().isEmpty());
}
