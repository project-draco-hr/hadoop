{
  updateCurrentThreadName("Replacing block " + block + " from "+ delHint);
  DataOutputStream replyOut=new DataOutputStream(getOutputStream());
  checkAccess(replyOut,true,block,blockToken,Op.REPLACE_BLOCK,BlockTokenIdentifier.AccessMode.REPLACE);
  if (!dataXceiverServer.balanceThrottler.acquire()) {
    String msg="Not able to receive block " + block.getBlockId() + " from "+ peer.getRemoteAddressString()+ " because threads "+ "quota is exceeded.";
    LOG.warn(msg);
    sendResponse(ERROR,msg);
    return;
  }
  Socket proxySock=null;
  DataOutputStream proxyOut=null;
  Status opStatus=SUCCESS;
  String errMsg=null;
  BlockReceiver blockReceiver=null;
  DataInputStream proxyReply=null;
  boolean IoeDuringCopyBlockOperation=false;
  try {
    if (proxySource.equals(datanode.getDatanodeId())) {
      ReplicaInfo oldReplica=datanode.data.moveBlockAcrossStorage(block,storageType);
      if (oldReplica != null) {
        LOG.info("Moved " + block + " from StorageType "+ oldReplica.getVolume().getStorageType()+ " to "+ storageType);
      }
    }
 else {
      block.setNumBytes(dataXceiverServer.estimateBlockSize);
      final String dnAddr=proxySource.getXferAddr(connectToDnViaHostname);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Connecting to datanode " + dnAddr);
      }
      InetSocketAddress proxyAddr=NetUtils.createSocketAddr(dnAddr);
      proxySock=datanode.newSocket();
      NetUtils.connect(proxySock,proxyAddr,dnConf.socketTimeout);
      proxySock.setSoTimeout(dnConf.socketTimeout);
      proxySock.setKeepAlive(true);
      OutputStream unbufProxyOut=NetUtils.getOutputStream(proxySock,dnConf.socketWriteTimeout);
      InputStream unbufProxyIn=NetUtils.getInputStream(proxySock);
      DataEncryptionKeyFactory keyFactory=datanode.getDataEncryptionKeyFactoryForBlock(block);
      IOStreamPair saslStreams=datanode.saslClient.socketSend(proxySock,unbufProxyOut,unbufProxyIn,keyFactory,blockToken,proxySource);
      unbufProxyOut=saslStreams.out;
      unbufProxyIn=saslStreams.in;
      proxyOut=new DataOutputStream(new BufferedOutputStream(unbufProxyOut,smallBufferSize));
      proxyReply=new DataInputStream(new BufferedInputStream(unbufProxyIn,ioFileBufferSize));
      IoeDuringCopyBlockOperation=true;
      new Sender(proxyOut).copyBlock(block,blockToken);
      IoeDuringCopyBlockOperation=false;
      BlockOpResponseProto copyResponse=BlockOpResponseProto.parseFrom(PBHelperClient.vintPrefixed(proxyReply));
      String logInfo="copy block " + block + " from "+ proxySock.getRemoteSocketAddress();
      DataTransferProtoUtil.checkBlockOpStatus(copyResponse,logInfo);
      ReadOpChecksumInfoProto checksumInfo=copyResponse.getReadOpChecksumInfo();
      DataChecksum remoteChecksum=DataTransferProtoUtil.fromProto(checksumInfo.getChecksum());
      blockReceiver=getBlockReceiver(block,storageType,proxyReply,proxySock.getRemoteSocketAddress().toString(),proxySock.getLocalSocketAddress().toString(),null,0,0,0,"",null,datanode,remoteChecksum,CachingStrategy.newDropBehind(),false,false);
      blockReceiver.receiveBlock(null,null,replyOut,null,dataXceiverServer.balanceThrottler,null,true);
      final Replica r=blockReceiver.getReplica();
      datanode.notifyNamenodeReceivedBlock(block,delHint,r.getStorageUuid(),r.isOnTransientStorage());
      LOG.info("Moved " + block + " from "+ peer.getRemoteAddressString()+ ", delHint="+ delHint);
    }
  }
 catch (  IOException ioe) {
    opStatus=ERROR;
    errMsg="opReplaceBlock " + block + " received exception "+ ioe;
    LOG.info(errMsg);
    if (!IoeDuringCopyBlockOperation) {
      incrDatanodeNetworkErrors();
    }
    throw ioe;
  }
 finally {
    if (opStatus == SUCCESS && proxyReply != null) {
      try {
        proxyReply.readChar();
      }
 catch (      IOException ignored) {
      }
    }
    dataXceiverServer.balanceThrottler.release();
    try {
      sendResponse(opStatus,errMsg);
    }
 catch (    IOException ioe) {
      LOG.warn("Error writing reply back to " + peer.getRemoteAddressString());
      incrDatanodeNetworkErrors();
    }
    IOUtils.closeStream(proxyOut);
    IOUtils.closeStream(blockReceiver);
    IOUtils.closeStream(proxyReply);
    IOUtils.closeStream(replyOut);
  }
  datanode.metrics.addReplaceBlockOp(elapsed());
}
