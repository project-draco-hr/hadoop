{
  updateCurrentThreadName("Passing file descriptors for block " + blk);
  BlockOpResponseProto.Builder bld=BlockOpResponseProto.newBuilder();
  FileInputStream fis[]=null;
  try {
    if (peer.getDomainSocket() == null) {
      throw new IOException("You cannot pass file descriptors over " + "anything but a UNIX domain socket.");
    }
    fis=datanode.requestShortCircuitFdsForRead(blk,token,maxVersion);
    bld.setStatus(SUCCESS);
    bld.setShortCircuitAccessVersion(DataNode.CURRENT_BLOCK_FORMAT_VERSION);
  }
 catch (  ShortCircuitFdsVersionException e) {
    bld.setStatus(ERROR_UNSUPPORTED);
    bld.setShortCircuitAccessVersion(DataNode.CURRENT_BLOCK_FORMAT_VERSION);
    bld.setMessage(e.getMessage());
  }
catch (  ShortCircuitFdsUnsupportedException e) {
    bld.setStatus(ERROR_UNSUPPORTED);
    bld.setMessage(e.getMessage());
  }
catch (  InvalidToken e) {
    bld.setStatus(ERROR_ACCESS_TOKEN);
    bld.setMessage(e.getMessage());
  }
catch (  IOException e) {
    bld.setStatus(ERROR);
    bld.setMessage(e.getMessage());
  }
  try {
    bld.build().writeDelimitedTo(socketOut);
    if (fis != null) {
      FileDescriptor fds[]=new FileDescriptor[fis.length];
      for (int i=0; i < fds.length; i++) {
        fds[i]=fis[i].getFD();
      }
      byte buf[]=new byte[]{(byte)0};
      peer.getDomainSocket().sendFileDescriptors(fds,buf,0,buf.length);
    }
  }
  finally {
    if (ClientTraceLog.isInfoEnabled()) {
      DatanodeRegistration dnR=datanode.getDNRegistrationForBP(blk.getBlockPoolId());
      BlockSender.ClientTraceLog.info(String.format(String.format("src: %s, dest: %s, op: %s, blockid: %s, srvID: %s, " + "success: %b","127.0.0.1","127.0.0.1","REQUEST_SHORT_CIRCUIT_FDS",blk.getBlockId(),dnR.getStorageID(),(fis != null))));
    }
    if (fis != null) {
      IOUtils.cleanup(LOG,fis);
    }
  }
}
