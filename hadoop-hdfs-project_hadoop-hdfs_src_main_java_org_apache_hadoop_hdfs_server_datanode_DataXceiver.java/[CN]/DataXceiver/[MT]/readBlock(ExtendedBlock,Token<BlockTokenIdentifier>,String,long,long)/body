{
  previousOpClientName=clientName;
  OutputStream baseStream=NetUtils.getOutputStream(s,dnConf.socketWriteTimeout);
  DataOutputStream out=new DataOutputStream(new BufferedOutputStream(baseStream,HdfsConstants.SMALL_BUFFER_SIZE));
  checkAccess(out,true,block,blockToken,Op.READ_BLOCK,BlockTokenSecretManager.AccessMode.READ);
  BlockSender blockSender=null;
  DatanodeRegistration dnR=datanode.getDNRegistrationForBP(block.getBlockPoolId());
  final String clientTraceFmt=clientName.length() > 0 && ClientTraceLog.isInfoEnabled() ? String.format(DN_CLIENTTRACE_FORMAT,localAddress,remoteAddress,"%d","HDFS_READ",clientName,"%d",dnR.getStorageID(),block,"%d") : dnR + " Served block " + block+ " to "+ remoteAddress;
  updateCurrentThreadName("Sending block " + block);
  try {
    try {
      blockSender=new BlockSender(block,blockOffset,length,true,false,datanode,clientTraceFmt);
    }
 catch (    IOException e) {
      String msg="opReadBlock " + block + " received exception "+ e;
      LOG.info(msg);
      sendResponse(s,ERROR,msg,dnConf.socketWriteTimeout);
      throw e;
    }
    writeSuccessWithChecksumInfo(blockSender,getStreamWithTimeout(s,dnConf.socketWriteTimeout));
    long read=blockSender.sendBlock(out,baseStream,null);
    if (blockSender.didSendEntireByteRange()) {
      try {
        ClientReadStatusProto stat=ClientReadStatusProto.parseFrom(HdfsProtoUtil.vintPrefixed(in));
        if (!stat.hasStatus()) {
          LOG.warn("Client " + s.getInetAddress() + " did not send a valid status "+ "code after reading. Will close connection.");
          IOUtils.closeStream(out);
        }
      }
 catch (      IOException ioe) {
        LOG.debug("Error reading client status response. Will close connection.",ioe);
        IOUtils.closeStream(out);
      }
    }
 else {
      IOUtils.closeStream(out);
    }
    datanode.metrics.incrBytesRead((int)read);
    datanode.metrics.incrBlocksRead();
  }
 catch (  SocketException ignored) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(dnR + ":Ignoring exception while serving " + block+ " to "+ remoteAddress,ignored);
    }
    datanode.metrics.incrBlocksRead();
    IOUtils.closeStream(out);
  }
catch (  IOException ioe) {
    LOG.warn(dnR + ":Got exception while serving " + block+ " to "+ remoteAddress,ioe);
    throw ioe;
  }
 finally {
    IOUtils.closeStream(blockSender);
  }
  datanode.metrics.addReadBlockOp(elapsed());
  datanode.metrics.incrReadsFromClient(isLocal);
}
