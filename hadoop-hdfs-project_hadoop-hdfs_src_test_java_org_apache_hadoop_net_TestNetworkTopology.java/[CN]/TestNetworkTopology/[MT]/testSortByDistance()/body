{
  DatanodeDescriptor[] testNodes=new DatanodeDescriptor[3];
  testNodes[0]=dataNodes[1];
  testNodes[1]=dataNodes[2];
  testNodes[2]=dataNodes[0];
  cluster.sortByDistance(dataNodes[0],testNodes,testNodes.length,0xDEADBEEF);
  assertTrue(testNodes[0] == dataNodes[0]);
  assertTrue(testNodes[1] == dataNodes[1]);
  assertTrue(testNodes[2] == dataNodes[2]);
  DatanodeDescriptor[] dtestNodes=new DatanodeDescriptor[5];
  dtestNodes[0]=dataNodes[8];
  dtestNodes[1]=dataNodes[12];
  dtestNodes[2]=dataNodes[11];
  dtestNodes[3]=dataNodes[9];
  dtestNodes[4]=dataNodes[10];
  cluster.sortByDistance(dataNodes[8],dtestNodes,dtestNodes.length - 2,0xDEADBEEF);
  assertTrue(dtestNodes[0] == dataNodes[8]);
  assertTrue(dtestNodes[1] == dataNodes[11]);
  assertTrue(dtestNodes[2] == dataNodes[12]);
  assertTrue(dtestNodes[3] == dataNodes[9]);
  assertTrue(dtestNodes[4] == dataNodes[10]);
  testNodes[0]=dataNodes[1];
  testNodes[1]=dataNodes[3];
  testNodes[2]=dataNodes[0];
  cluster.sortByDistance(dataNodes[0],testNodes,testNodes.length,0xDEADBEEF);
  assertTrue(testNodes[0] == dataNodes[0]);
  assertTrue(testNodes[1] == dataNodes[1]);
  assertTrue(testNodes[2] == dataNodes[3]);
  testNodes[0]=dataNodes[5];
  testNodes[1]=dataNodes[3];
  testNodes[2]=dataNodes[1];
  cluster.sortByDistance(dataNodes[0],testNodes,testNodes.length,0xDEADBEEF);
  assertTrue(testNodes[0] == dataNodes[1]);
  assertTrue(testNodes[1] == dataNodes[3]);
  assertTrue(testNodes[2] == dataNodes[5]);
  testNodes[0]=dataNodes[1];
  testNodes[1]=dataNodes[5];
  testNodes[2]=dataNodes[3];
  cluster.sortByDistance(dataNodes[0],testNodes,testNodes.length,0xDEADBEEF);
  assertTrue(testNodes[0] == dataNodes[1]);
  assertTrue(testNodes[1] == dataNodes[3]);
  assertTrue(testNodes[2] == dataNodes[5]);
  testNodes[0]=dataNodes[1];
  testNodes[1]=dataNodes[5];
  testNodes[2]=dataNodes[3];
  cluster.sortByDistance(dataNodes[0],testNodes,testNodes.length,0xDEAD);
  assertTrue(testNodes[0] == dataNodes[1]);
  assertTrue(testNodes[1] == dataNodes[5]);
  assertTrue(testNodes[2] == dataNodes[3]);
  DatanodeDescriptor first=null;
  boolean foundRandom=false;
  for (int i=5; i <= 7; i++) {
    testNodes[0]=dataNodes[5];
    testNodes[1]=dataNodes[6];
    testNodes[2]=dataNodes[7];
    cluster.sortByDistance(dataNodes[i],testNodes,testNodes.length,0xBEADED + i);
    if (first == null) {
      first=testNodes[0];
    }
 else {
      if (first != testNodes[0]) {
        foundRandom=true;
        break;
      }
    }
  }
  assertTrue("Expected to find a different first location",foundRandom);
}
