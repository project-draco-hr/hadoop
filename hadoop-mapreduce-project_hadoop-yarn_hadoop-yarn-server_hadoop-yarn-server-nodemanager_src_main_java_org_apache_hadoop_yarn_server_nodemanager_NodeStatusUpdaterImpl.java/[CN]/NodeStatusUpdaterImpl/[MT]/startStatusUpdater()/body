{
  new Thread("Node Status Updater"){
    @Override @SuppressWarnings("unchecked") public void run(){
      int lastHeartBeatID=0;
      while (!isStopped) {
        try {
synchronized (heartbeatMonitor) {
            heartbeatMonitor.wait(heartBeatInterval);
          }
          NodeStatus nodeStatus=getNodeStatus();
          nodeStatus.setResponseId(lastHeartBeatID);
          NodeHeartbeatRequest request=recordFactory.newRecordInstance(NodeHeartbeatRequest.class);
          request.setNodeStatus(nodeStatus);
          HeartbeatResponse response=resourceTracker.nodeHeartbeat(request).getHeartbeatResponse();
          if (response.getNodeAction() == NodeAction.SHUTDOWN) {
            LOG.info("Recieved SHUTDOWN signal from Resourcemanager as part of heartbeat," + " hence shutting down.");
            NodeStatusUpdaterImpl.this.stop();
            break;
          }
          if (response.getNodeAction() == NodeAction.REBOOT) {
            LOG.info("Node is out of sync with ResourceManager," + " hence shutting down.");
            NodeStatusUpdaterImpl.this.stop();
            break;
          }
          lastHeartBeatID=response.getResponseId();
          List<ContainerId> containersToCleanup=response.getContainersToCleanupList();
          if (containersToCleanup.size() != 0) {
            dispatcher.getEventHandler().handle(new CMgrCompletedContainersEvent(containersToCleanup));
          }
          List<ApplicationId> appsToCleanup=response.getApplicationsToCleanupList();
          trackAppsForKeepAlive(appsToCleanup);
          if (appsToCleanup.size() != 0) {
            dispatcher.getEventHandler().handle(new CMgrCompletedAppsEvent(appsToCleanup));
          }
        }
 catch (        Throwable e) {
          LOG.error("Caught exception in status-updater",e);
        }
      }
    }
  }
.start();
}
