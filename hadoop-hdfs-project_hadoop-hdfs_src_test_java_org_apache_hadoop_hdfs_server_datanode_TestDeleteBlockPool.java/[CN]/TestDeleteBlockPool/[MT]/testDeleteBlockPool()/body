{
  Configuration conf=new Configuration();
  MiniDFSCluster cluster=null;
  try {
    conf.set(DFSConfigKeys.DFS_NAMESERVICES,"namesServerId1,namesServerId2");
    cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleFederatedTopology(conf.get(DFSConfigKeys.DFS_NAMESERVICES))).numDataNodes(2).build();
    cluster.waitActive();
    FileSystem fs1=cluster.getFileSystem(0);
    FileSystem fs2=cluster.getFileSystem(1);
    DFSTestUtil.createFile(fs1,new Path("/alpha"),1024,(short)2,54);
    DFSTestUtil.createFile(fs2,new Path("/beta"),1024,(short)2,54);
    DataNode dn1=cluster.getDataNodes().get(0);
    DataNode dn2=cluster.getDataNodes().get(1);
    String bpid1=cluster.getNamesystem(0).getBlockPoolId();
    String bpid2=cluster.getNamesystem(1).getBlockPoolId();
    try {
      dn1.deleteBlockPool(bpid1,true);
      fail("Must not delete a running block pool");
    }
 catch (    IOException expected) {
    }
    Configuration nn1Conf=cluster.getConfiguration(1);
    nn1Conf.set(DFSConfigKeys.DFS_NAMESERVICES,"namesServerId2");
    dn1.refreshNamenodes(nn1Conf);
    assertEquals(1,dn1.getAllBpOs().size());
    try {
      dn1.deleteBlockPool(bpid1,false);
      fail("Must not delete if any block files exist unless " + "force is true");
    }
 catch (    IOException expected) {
    }
    cluster.getFsDatasetTestUtils(0).verifyBlockPoolExists(bpid1);
    dn1.deleteBlockPool(bpid1,true);
    cluster.getFsDatasetTestUtils(0).verifyBlockPoolMissing(bpid1);
    fs1.delete(new Path("/alpha"),true);
    while (cluster.getFsDatasetTestUtils(1).getStoredReplicas(bpid1).hasNext()) {
      try {
        Thread.sleep(3000);
      }
 catch (      Exception ignored) {
      }
    }
    cluster.shutdownNameNode(0);
    try {
      dn2.deleteBlockPool(bpid1,true);
      fail("Must not delete a running block pool");
    }
 catch (    IOException expected) {
    }
    dn2.refreshNamenodes(nn1Conf);
    assertEquals(1,dn2.getAllBpOs().size());
    cluster.getFsDatasetTestUtils(1).verifyBlockPoolExists(bpid1);
    dn2.deleteBlockPool(bpid1,false);
    cluster.getFsDatasetTestUtils(1).verifyBlockPoolMissing(bpid1);
    cluster.getFsDatasetTestUtils(0).verifyBlockPoolExists(bpid2);
    cluster.getFsDatasetTestUtils(1).verifyBlockPoolExists(bpid2);
    Path gammaFile=new Path("/gamma");
    DFSTestUtil.createFile(fs2,gammaFile,1024,(short)1,55);
    fs2.setReplication(gammaFile,(short)2);
    DFSTestUtil.waitReplication(fs2,gammaFile,(short)2);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
