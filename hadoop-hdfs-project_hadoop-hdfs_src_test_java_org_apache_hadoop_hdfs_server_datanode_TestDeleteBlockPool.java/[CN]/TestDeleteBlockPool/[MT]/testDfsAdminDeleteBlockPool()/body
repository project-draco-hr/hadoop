{
  Configuration conf=new Configuration();
  MiniDFSCluster cluster=null;
  try {
    conf.set(DFSConfigKeys.DFS_FEDERATION_NAMESERVICES,"namesServerId1,namesServerId2");
    cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleFederatedTopology(2)).numDataNodes(1).build();
    cluster.waitActive();
    FileSystem fs1=cluster.getFileSystem(0);
    FileSystem fs2=cluster.getFileSystem(1);
    DFSTestUtil.createFile(fs1,new Path("/alpha"),1024,(short)1,54);
    DFSTestUtil.createFile(fs2,new Path("/beta"),1024,(short)1,54);
    DataNode dn1=cluster.getDataNodes().get(0);
    String bpid1=cluster.getNamesystem(0).getBlockPoolId();
    String bpid2=cluster.getNamesystem(1).getBlockPoolId();
    File dn1StorageDir1=cluster.getInstanceStorageDir(0,0);
    File dn1StorageDir2=cluster.getInstanceStorageDir(0,1);
    Configuration nn1Conf=cluster.getConfiguration(0);
    nn1Conf.set(DFSConfigKeys.DFS_FEDERATION_NAMESERVICES,"namesServerId1");
    dn1.refreshNamenodes(nn1Conf);
    Assert.assertEquals(1,dn1.getAllBpOs().length);
    DFSAdmin admin=new DFSAdmin(nn1Conf);
    String dn1Address=dn1.getDatanodeId().getHost() + ":" + dn1.getIpcPort();
    String[] args={"-deleteBlockPool",dn1Address,bpid2};
    int ret=admin.run(args);
    Assert.assertFalse(0 == ret);
    verifyBlockPoolDirectories(true,dn1StorageDir1,bpid2);
    verifyBlockPoolDirectories(true,dn1StorageDir2,bpid2);
    String[] forceArgs={"-deleteBlockPool",dn1Address,bpid2,"force"};
    ret=admin.run(forceArgs);
    Assert.assertEquals(0,ret);
    verifyBlockPoolDirectories(false,dn1StorageDir1,bpid2);
    verifyBlockPoolDirectories(false,dn1StorageDir2,bpid2);
    verifyBlockPoolDirectories(true,dn1StorageDir1,bpid1);
    verifyBlockPoolDirectories(true,dn1StorageDir2,bpid1);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
