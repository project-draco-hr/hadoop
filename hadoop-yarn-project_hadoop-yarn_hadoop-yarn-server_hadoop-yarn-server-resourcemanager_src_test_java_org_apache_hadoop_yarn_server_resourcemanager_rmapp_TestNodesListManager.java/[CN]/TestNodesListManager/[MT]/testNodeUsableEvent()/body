{
  Logger rootLogger=LogManager.getRootLogger();
  rootLogger.setLevel(Level.DEBUG);
  final Dispatcher dispatcher=getDispatcher();
  YarnConfiguration conf=new YarnConfiguration();
  MockRM rm=new MockRM(conf){
    @Override protected Dispatcher createDispatcher(){
      return dispatcher;
    }
  }
;
  rm.start();
  MockNM nm1=rm.registerNode("h1:1234",28000);
  NodesListManager nodesListManager=rm.getNodesListManager();
  Resource clusterResource=Resource.newInstance(28000,8);
  RMNode rmnode=MockNodes.newNodeInfo(1,clusterResource);
  RMApp killrmApp=rm.submitApp(200);
  rm.killApp(killrmApp.getApplicationId());
  rm.waitForState(killrmApp.getApplicationId(),RMAppState.KILLED);
  RMApp finshrmApp=rm.submitApp(2000);
  nm1.nodeHeartbeat(true);
  RMAppAttempt attempt=finshrmApp.getCurrentAppAttempt();
  MockAM am=rm.sendAMLaunched(attempt.getAppAttemptId());
  am.registerAppAttempt();
  am.unregisterAppAttempt();
  nm1.nodeHeartbeat(attempt.getAppAttemptId(),1,ContainerState.COMPLETE);
  rm.waitForState(am.getApplicationAttemptId(),RMAppAttemptState.FINISHED);
  RMApp subrmApp=rm.submitApp(200);
  nodesListManager.handle(new NodesListManagerEvent(NodesListManagerEventType.NODE_USABLE,rmnode));
  if (applist.size() > 0) {
    Assert.assertTrue("Event based on running app expected " + subrmApp.getApplicationId(),applist.contains(subrmApp.getApplicationId()));
    Assert.assertFalse("Event based on finish app not expected " + finshrmApp.getApplicationId(),applist.contains(finshrmApp.getApplicationId()));
    Assert.assertFalse("Event based on killed app not expected " + killrmApp.getApplicationId(),applist.contains(killrmApp.getApplicationId()));
  }
 else {
    Assert.fail("Events received should have beeen more than 1");
  }
  applist.clear();
  nodesListManager.handle(new NodesListManagerEvent(NodesListManagerEventType.NODE_UNUSABLE,rmnode));
  if (applist.size() > 0) {
    Assert.assertTrue("Event based on running app expected " + subrmApp.getApplicationId(),applist.contains(subrmApp.getApplicationId()));
    Assert.assertFalse("Event based on finish app not expected " + finshrmApp.getApplicationId(),applist.contains(finshrmApp.getApplicationId()));
    Assert.assertFalse("Event based on killed app not expected " + killrmApp.getApplicationId(),applist.contains(killrmApp.getApplicationId()));
  }
 else {
    Assert.fail("Events received should have beeen more than 1");
  }
}
