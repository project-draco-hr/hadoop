{
  writer.print("Queue Name : ");
  writer.println(queueInfo.getQueueName());
  writer.print("\tState : ");
  writer.println(queueInfo.getQueueState());
  DecimalFormat df=new DecimalFormat("#.0");
  writer.print("\tCapacity : ");
  writer.println(df.format(queueInfo.getCapacity() * 100) + "%");
  writer.print("\tCurrent Capacity : ");
  writer.println(df.format(queueInfo.getCurrentCapacity() * 100) + "%");
  writer.print("\tMaximum Capacity : ");
  writer.println(df.format(queueInfo.getMaximumCapacity() * 100) + "%");
  writer.print("\tDefault Node Label expression : ");
  String nodeLabelExpression=queueInfo.getDefaultNodeLabelExpression();
  nodeLabelExpression=(nodeLabelExpression == null || nodeLabelExpression.trim().isEmpty()) ? NodeLabel.DEFAULT_NODE_LABEL_PARTITION : nodeLabelExpression;
  writer.println(nodeLabelExpression);
  Set<String> nodeLabels=queueInfo.getAccessibleNodeLabels();
  StringBuilder labelList=new StringBuilder();
  writer.print("\tAccessible Node Labels : ");
  for (  String nodeLabel : nodeLabels) {
    if (labelList.length() > 0) {
      labelList.append(',');
    }
    labelList.append(nodeLabel);
  }
  writer.println(labelList.toString());
}
