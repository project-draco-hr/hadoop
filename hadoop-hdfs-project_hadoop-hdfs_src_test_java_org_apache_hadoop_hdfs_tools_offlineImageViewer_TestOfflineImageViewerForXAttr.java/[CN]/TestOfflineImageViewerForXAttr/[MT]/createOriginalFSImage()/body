{
  MiniDFSCluster cluster=null;
  Configuration conf=new Configuration();
  try {
    cluster=new MiniDFSCluster.Builder(conf).build();
    cluster.waitActive();
    DistributedFileSystem hdfs=cluster.getFileSystem();
    Path dir=new Path("/dir1");
    hdfs.mkdirs(dir);
    hdfs.setXAttr(dir,"user.attr1","value1".getBytes());
    hdfs.setXAttr(dir,"user.attr2","value2".getBytes());
    hdfs.setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_ENTER,false);
    hdfs.saveNamespace();
    List<XAttr> attributes=new ArrayList<XAttr>();
    attributes.add(XAttrHelper.buildXAttr("user.attr1","value1".getBytes()));
    attr1JSon=JsonUtil.toJsonString(attributes,null);
    attributes.add(XAttrHelper.buildXAttr("user.attr2","value2".getBytes()));
    originalFsimage=FSImageTestUtil.findLatestImageFile(FSImageTestUtil.getFSImage(cluster.getNameNode()).getStorage().getStorageDir(0));
    if (originalFsimage == null) {
      throw new RuntimeException("Didn't generate or can't find fsimage");
    }
    LOG.debug("original FS image file is " + originalFsimage);
  }
  finally {
    if (cluster != null)     cluster.shutdown();
  }
}
