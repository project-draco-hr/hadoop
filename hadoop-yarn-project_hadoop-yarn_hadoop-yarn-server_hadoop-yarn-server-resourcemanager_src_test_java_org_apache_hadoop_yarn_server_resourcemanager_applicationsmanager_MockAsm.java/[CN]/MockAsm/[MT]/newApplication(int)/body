{
  final ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(newAppID(i),0);
  final Container masterContainer=Records.newRecord(Container.class);
  ContainerId containerId=ContainerId.newInstance(appAttemptId,0);
  masterContainer.setId(containerId);
  masterContainer.setNodeHttpAddress("node:port");
  final String user=newUserName();
  final String name=newAppName();
  final String queue=newQueue();
  final long start=123456 + i * 1000;
  final long finish=234567 + i * 1000;
  final String type=YarnConfiguration.DEFAULT_APPLICATION_TYPE;
  YarnApplicationState[] allStates=YarnApplicationState.values();
  final YarnApplicationState state=allStates[i % allStates.length];
  final int maxAppAttempts=i % 1000;
  return new ApplicationBase(){
    @Override public ApplicationId getApplicationId(){
      return appAttemptId.getApplicationId();
    }
    @Override public String getUser(){
      return user;
    }
    @Override public String getName(){
      return name;
    }
    @Override public String getApplicationType(){
      return type;
    }
    @Override public String getQueue(){
      return queue;
    }
    @Override public long getStartTime(){
      return start;
    }
    @Override public long getFinishTime(){
      return finish;
    }
    @Override public String getTrackingUrl(){
      return null;
    }
    @Override public YarnApplicationState createApplicationState(){
      return state;
    }
    @Override public StringBuilder getDiagnostics(){
      return new StringBuilder();
    }
    @Override public float getProgress(){
      return (float)Math.random();
    }
    @Override public FinalApplicationStatus getFinalApplicationStatus(){
      return FinalApplicationStatus.UNDEFINED;
    }
    @Override public RMAppAttempt getCurrentAppAttempt(){
      return null;
    }
    @Override public int getMaxAppAttempts(){
      return maxAppAttempts;
    }
    @Override public Set<String> getApplicationTags(){
      return null;
    }
  }
;
}
