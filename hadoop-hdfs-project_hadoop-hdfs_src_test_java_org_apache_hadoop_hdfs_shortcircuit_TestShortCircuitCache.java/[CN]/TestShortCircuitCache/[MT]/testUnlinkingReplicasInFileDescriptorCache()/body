{
  BlockReaderTestUtil.enableShortCircuitShmTracing();
  TemporarySocketDirectory sockDir=new TemporarySocketDirectory();
  Configuration conf=createShortCircuitConf("testUnlinkingReplicasInFileDescriptorCache",sockDir);
  conf.setLong(DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_EXPIRY_MS_KEY,1000000000L);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  cluster.waitActive();
  DistributedFileSystem fs=cluster.getFileSystem();
  final ShortCircuitCache cache=fs.getClient().getClientContext().getShortCircuitCache();
  cache.getDfsClientShmManager().visit(new Visitor(){
    @Override public void visit(    HashMap<DatanodeInfo,PerDatanodeVisitorInfo> info) throws IOException {
      Assert.assertEquals(0,info.size());
    }
  }
);
  final Path TEST_PATH=new Path("/test_file");
  final int TEST_FILE_LEN=8193;
  final int SEED=0xFADE0;
  DFSTestUtil.createFile(fs,TEST_PATH,TEST_FILE_LEN,(short)1,SEED);
  byte contents[]=DFSTestUtil.readFileBuffer(fs,TEST_PATH);
  byte expected[]=DFSTestUtil.calculateFileContentsFromSeed(SEED,TEST_FILE_LEN);
  Assert.assertTrue(Arrays.equals(contents,expected));
  final DatanodeInfo datanode=new DatanodeInfo(cluster.getDataNodes().get(0).getDatanodeId());
  cache.getDfsClientShmManager().visit(new Visitor(){
    @Override public void visit(    HashMap<DatanodeInfo,PerDatanodeVisitorInfo> info) throws IOException {
      Assert.assertTrue(info.get(datanode).full.isEmpty());
      Assert.assertFalse(info.get(datanode).disabled);
      Assert.assertEquals(1,info.get(datanode).notFull.values().size());
      DfsClientShm shm=info.get(datanode).notFull.values().iterator().next();
      Assert.assertFalse(shm.isDisconnected());
    }
  }
);
  fs.delete(TEST_PATH,false);
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    MutableBoolean done=new MutableBoolean(true);
    @Override public Boolean get(){
      try {
        done.setValue(true);
        cache.getDfsClientShmManager().visit(new Visitor(){
          @Override public void visit(          HashMap<DatanodeInfo,PerDatanodeVisitorInfo> info) throws IOException {
            Assert.assertTrue(info.get(datanode).full.isEmpty());
            Assert.assertFalse(info.get(datanode).disabled);
            Assert.assertEquals(1,info.get(datanode).notFull.values().size());
            DfsClientShm shm=info.get(datanode).notFull.values().iterator().next();
            for (Iterator<Slot> iter=shm.slotIterator(); iter.hasNext(); ) {
              Slot slot=iter.next();
              if (slot.isValid()) {
                done.setValue(false);
              }
            }
          }
        }
);
      }
 catch (      IOException e) {
        LOG.error("error running visitor",e);
      }
      return done.booleanValue();
    }
  }
,10,60000);
  cluster.shutdown();
  sockDir.close();
}
