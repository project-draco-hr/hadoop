{
  BlockReaderTestUtil.enableShortCircuitShmTracing();
  TemporarySocketDirectory sockDir=new TemporarySocketDirectory();
  Configuration conf=createShortCircuitConf("testAllocShm",sockDir);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  cluster.waitActive();
  DistributedFileSystem fs=cluster.getFileSystem();
  final ShortCircuitCache cache=fs.getClient().getClientContext().getShortCircuitCache();
  cache.getDfsClientShmManager().visit(new Visitor(){
    @Override public void visit(    HashMap<DatanodeInfo,PerDatanodeVisitorInfo> info) throws IOException {
      Assert.assertEquals(0,info.size());
    }
  }
);
  DomainPeer peer=getDomainPeerToDn(conf);
  MutableBoolean usedPeer=new MutableBoolean(false);
  ExtendedBlockId blockId=new ExtendedBlockId(123,"xyz");
  final DatanodeInfo datanode=new DatanodeInfo(cluster.getDataNodes().get(0).getDatanodeId());
  Slot slot=cache.allocShmSlot(datanode,peer,usedPeer,blockId,"testAllocShm_client");
  Assert.assertNotNull(slot);
  Assert.assertTrue(usedPeer.booleanValue());
  cache.getDfsClientShmManager().visit(new Visitor(){
    @Override public void visit(    HashMap<DatanodeInfo,PerDatanodeVisitorInfo> info) throws IOException {
      Assert.assertEquals(1,info.size());
      PerDatanodeVisitorInfo vinfo=info.get(datanode);
      Assert.assertFalse(vinfo.disabled);
      Assert.assertEquals(0,vinfo.full.size());
      Assert.assertEquals(1,vinfo.notFull.size());
    }
  }
);
  cache.scheduleSlotReleaser(slot);
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      final MutableBoolean done=new MutableBoolean(false);
      try {
        cache.getDfsClientShmManager().visit(new Visitor(){
          @Override public void visit(          HashMap<DatanodeInfo,PerDatanodeVisitorInfo> info) throws IOException {
            done.setValue(info.get(datanode).full.isEmpty() && info.get(datanode).notFull.isEmpty());
          }
        }
);
      }
 catch (      IOException e) {
        LOG.error("error running visitor",e);
      }
      return done.booleanValue();
    }
  }
,10,60000);
  cluster.shutdown();
  sockDir.close();
}
