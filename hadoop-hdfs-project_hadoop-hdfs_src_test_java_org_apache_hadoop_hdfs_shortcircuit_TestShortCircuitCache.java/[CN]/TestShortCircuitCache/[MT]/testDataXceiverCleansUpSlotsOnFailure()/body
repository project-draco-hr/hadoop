{
  BlockReaderTestUtil.enableShortCircuitShmTracing();
  TemporarySocketDirectory sockDir=new TemporarySocketDirectory();
  Configuration conf=createShortCircuitConf("testDataXceiverCleansUpSlotsOnFailure",sockDir);
  conf.setLong(DFS_CLIENT_READ_SHORTCIRCUIT_STREAMS_CACHE_EXPIRY_MS_KEY,1000000000L);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  cluster.waitActive();
  DistributedFileSystem fs=cluster.getFileSystem();
  final Path TEST_PATH1=new Path("/test_file1");
  final Path TEST_PATH2=new Path("/test_file2");
  final int TEST_FILE_LEN=4096;
  final int SEED=0xFADE1;
  DFSTestUtil.createFile(fs,TEST_PATH1,TEST_FILE_LEN,(short)1,SEED);
  DFSTestUtil.createFile(fs,TEST_PATH2,TEST_FILE_LEN,(short)1,SEED);
  DFSTestUtil.readFileBuffer(fs,TEST_PATH1);
  fs.getClient().getConf().brfFailureInjector=new TestCleanupFailureInjector();
  try {
    DFSTestUtil.readFileBuffer(fs,TEST_PATH2);
  }
 catch (  Throwable t) {
    GenericTestUtils.assertExceptionContains("TCP reads were disabled for " + "testing, but we failed to do a non-TCP read.",t);
  }
  ShortCircuitRegistry registry=cluster.getDataNodes().get(0).getShortCircuitRegistry();
  registry.visit(new ShortCircuitRegistry.Visitor(){
    @Override public void accept(    HashMap<ShmId,RegisteredShm> segments,    HashMultimap<ExtendedBlockId,Slot> slots){
      Assert.assertEquals(1,segments.size());
      Assert.assertEquals(1,slots.size());
    }
  }
);
  cluster.shutdown();
  sockDir.close();
}
