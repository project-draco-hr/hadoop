{
  MiniDFSCluster cluster=null;
  try {
    final UserGroupInformation DFS_UGI=createUGI("dfs",true);
    final UserGroupInformation USER_UGI=createUGI("user",false);
    final Configuration dfsConf=new Configuration();
    cluster=new MiniDFSCluster(dfsConf,2,true,null);
    cluster.waitActive();
    final String httpAdd=dfsConf.get("dfs.http.address");
    final URI nnURI=FileSystem.getDefaultUri(dfsConf);
    final String nnUri=nnURI.toString();
    FileSystem fs1=DFS_UGI.doAs(new PrivilegedExceptionAction<FileSystem>(){
      public FileSystem run() throws IOException {
        return FileSystem.get(nnURI,dfsConf);
      }
    }
);
    final Path home=createHomeDirectory(fs1,USER_UGI);
    final Configuration userConf=new Configuration();
    final FileSystem fs=USER_UGI.doAs(new PrivilegedExceptionAction<FileSystem>(){
      public FileSystem run() throws IOException {
        return FileSystem.get(nnURI,userConf);
      }
    }
);
    final Path srcrootpath=new Path(home,"src_root");
    final String srcrootdir=srcrootpath.toString();
    final Path dstrootpath=new Path(home,"dst_root");
    final String dstrootdir=dstrootpath.toString();
    final DistCp distcp=USER_UGI.doAs(new PrivilegedExceptionAction<DistCp>(){
      public DistCp run(){
        return new DistCp(userConf);
      }
    }
);
    FileSystem.mkdirs(fs,srcrootpath,new FsPermission((short)0700));
    final String[] args={"hftp://" + httpAdd + srcrootdir,nnUri + dstrootdir};
{
      fs.setPermission(srcrootpath,new FsPermission((short)0));
      USER_UGI.doAs(new PrivilegedExceptionAction<Void>(){
        public Void run() throws Exception {
          assertEquals(-3,ToolRunner.run(distcp,args));
          return null;
        }
      }
);
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
