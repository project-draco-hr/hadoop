{
  RPC.setProtocolEngine(conf,ClientNamenodeProtocolPB.class,ProtobufRpcEngine.class);
  final RetryPolicy defaultPolicy=RetryUtils.getDefaultRetryPolicy(conf,DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY,DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_DEFAULT,DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_KEY,DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_SPEC_DEFAULT,SafeModeException.class);
  final long version=RPC.getProtocolVersion(ClientNamenodeProtocolPB.class);
  ClientNamenodeProtocolPB proxy=RPC.getProtocolProxy(ClientNamenodeProtocolPB.class,version,address,ugi,conf,NetUtils.getDefaultSocketFactory(conf),0,defaultPolicy).getProxy();
  if (withRetries) {
    RetryPolicy createPolicy=RetryPolicies.retryUpToMaximumCountWithFixedSleep(5,HdfsConstants.LEASE_SOFTLIMIT_PERIOD,TimeUnit.MILLISECONDS);
    Map<Class<? extends Exception>,RetryPolicy> remoteExceptionToPolicyMap=new HashMap<Class<? extends Exception>,RetryPolicy>();
    remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,createPolicy);
    Map<Class<? extends Exception>,RetryPolicy> exceptionToPolicyMap=new HashMap<Class<? extends Exception>,RetryPolicy>();
    exceptionToPolicyMap.put(RemoteException.class,RetryPolicies.retryByRemoteException(defaultPolicy,remoteExceptionToPolicyMap));
    RetryPolicy methodPolicy=RetryPolicies.retryByException(defaultPolicy,exceptionToPolicyMap);
    Map<String,RetryPolicy> methodNameToPolicyMap=new HashMap<String,RetryPolicy>();
    methodNameToPolicyMap.put("create",methodPolicy);
    proxy=(ClientNamenodeProtocolPB)RetryProxy.create(ClientNamenodeProtocolPB.class,new DefaultFailoverProxyProvider<ClientNamenodeProtocolPB>(ClientNamenodeProtocolPB.class,proxy),methodNameToPolicyMap,defaultPolicy);
  }
  return new ClientNamenodeProtocolTranslatorPB(proxy);
}
