{
  ClientNamenodeProtocolPB proxy=(ClientNamenodeProtocolPB)NameNodeProxies.createNameNodeProxy(address,conf,ugi,ClientNamenodeProtocolPB.class,0);
  if (withRetries) {
    RetryPolicy createPolicy=RetryPolicies.retryUpToMaximumCountWithFixedSleep(5,HdfsConstants.LEASE_SOFTLIMIT_PERIOD,TimeUnit.MILLISECONDS);
    Map<Class<? extends Exception>,RetryPolicy> remoteExceptionToPolicyMap=new HashMap<Class<? extends Exception>,RetryPolicy>();
    remoteExceptionToPolicyMap.put(AlreadyBeingCreatedException.class,createPolicy);
    Map<Class<? extends Exception>,RetryPolicy> exceptionToPolicyMap=new HashMap<Class<? extends Exception>,RetryPolicy>();
    exceptionToPolicyMap.put(RemoteException.class,RetryPolicies.retryByRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL,remoteExceptionToPolicyMap));
    RetryPolicy methodPolicy=RetryPolicies.retryByException(RetryPolicies.TRY_ONCE_THEN_FAIL,exceptionToPolicyMap);
    Map<String,RetryPolicy> methodNameToPolicyMap=new HashMap<String,RetryPolicy>();
    methodNameToPolicyMap.put("create",methodPolicy);
    proxy=(ClientNamenodeProtocolPB)RetryProxy.create(ClientNamenodeProtocolPB.class,proxy,methodNameToPolicyMap);
  }
  return new ClientNamenodeProtocolTranslatorPB(proxy);
}
