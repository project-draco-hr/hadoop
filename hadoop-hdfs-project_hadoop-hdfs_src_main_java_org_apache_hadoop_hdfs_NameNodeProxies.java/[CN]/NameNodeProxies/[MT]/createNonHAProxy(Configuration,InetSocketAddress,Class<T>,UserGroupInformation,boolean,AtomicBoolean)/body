{
  Text dtService=SecurityUtil.buildTokenService(nnAddr);
  T proxy;
  if (xface == ClientProtocol.class) {
    proxy=(T)createNNProxyWithClientProtocol(nnAddr,conf,ugi,withRetries,fallbackToSimpleAuth);
  }
 else   if (xface == JournalProtocol.class) {
    proxy=(T)createNNProxyWithJournalProtocol(nnAddr,conf,ugi);
  }
 else   if (xface == NamenodeProtocol.class) {
    proxy=(T)createNNProxyWithNamenodeProtocol(nnAddr,conf,ugi,withRetries);
  }
 else   if (xface == GetUserMappingsProtocol.class) {
    proxy=(T)createNNProxyWithGetUserMappingsProtocol(nnAddr,conf,ugi);
  }
 else   if (xface == RefreshUserMappingsProtocol.class) {
    proxy=(T)createNNProxyWithRefreshUserMappingsProtocol(nnAddr,conf,ugi);
  }
 else   if (xface == RefreshAuthorizationPolicyProtocol.class) {
    proxy=(T)createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,conf,ugi);
  }
 else   if (xface == RefreshCallQueueProtocol.class) {
    proxy=(T)createNNProxyWithRefreshCallQueueProtocol(nnAddr,conf,ugi);
  }
 else {
    String message="Unsupported protocol found when creating the proxy " + "connection to NameNode: " + ((xface != null) ? xface.getClass().getName() : "null");
    LOG.error(message);
    throw new IllegalStateException(message);
  }
  return new ProxyAndInfo<T>(proxy,dtService,nnAddr);
}
