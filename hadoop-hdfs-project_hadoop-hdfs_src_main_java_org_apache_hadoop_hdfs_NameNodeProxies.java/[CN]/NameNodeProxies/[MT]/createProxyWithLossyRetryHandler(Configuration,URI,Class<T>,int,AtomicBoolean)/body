{
  Preconditions.checkArgument(numResponseToDrop > 0);
  AbstractNNFailoverProxyProvider<T> failoverProxyProvider=createFailoverProxyProvider(config,nameNodeUri,xface,true,fallbackToSimpleAuth);
  if (failoverProxyProvider != null) {
    int delay=config.getInt(HdfsClientConfigKeys.Failover.SLEEPTIME_BASE_KEY,HdfsClientConfigKeys.Failover.SLEEPTIME_BASE_DEFAULT);
    int maxCap=config.getInt(HdfsClientConfigKeys.Failover.SLEEPTIME_MAX_KEY,HdfsClientConfigKeys.Failover.SLEEPTIME_MAX_DEFAULT);
    int maxFailoverAttempts=config.getInt(HdfsClientConfigKeys.Failover.MAX_ATTEMPTS_KEY,HdfsClientConfigKeys.Failover.MAX_ATTEMPTS_DEFAULT);
    int maxRetryAttempts=config.getInt(HdfsClientConfigKeys.Retry.MAX_ATTEMPTS_KEY,HdfsClientConfigKeys.Retry.MAX_ATTEMPTS_DEFAULT);
    InvocationHandler dummyHandler=new LossyRetryInvocationHandler<T>(numResponseToDrop,failoverProxyProvider,RetryPolicies.failoverOnNetworkException(RetryPolicies.TRY_ONCE_THEN_FAIL,maxFailoverAttempts,Math.max(numResponseToDrop + 1,maxRetryAttempts),delay,maxCap));
    T proxy=(T)Proxy.newProxyInstance(failoverProxyProvider.getInterface().getClassLoader(),new Class[]{xface},dummyHandler);
    Text dtService;
    if (failoverProxyProvider.useLogicalURI()) {
      dtService=HAUtilClient.buildTokenServiceForLogicalUri(nameNodeUri,HdfsConstants.HDFS_URI_SCHEME);
    }
 else {
      dtService=SecurityUtil.buildTokenService(NameNode.getAddress(nameNodeUri));
    }
    return new ProxyAndInfo<T>(proxy,dtService,NameNode.getAddress(nameNodeUri));
  }
 else {
    LOG.warn("Currently creating proxy using " + "LossyRetryInvocationHandler requires NN HA setup");
    return null;
  }
}
