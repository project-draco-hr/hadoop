{
  MetricsRecord record=mock(MetricsRecord.class);
  when(record.tags()).thenReturn(Lists.newArrayList(new MetricsTag(KafkaMetricsInfo.KafkaTag,"test_tag")));
  when(record.timestamp()).thenReturn(System.currentTimeMillis());
  AbstractMetric metric=new AbstractMetric(KafkaMetricsInfo.KafkaCounter){
    @Override public Number value(){
      return new Integer(123);
    }
    @Override public MetricType type(){
      return null;
    }
    @Override public void visit(    MetricsVisitor visitor){
    }
  }
;
  Iterable<AbstractMetric> metrics=Lists.newArrayList(metric);
  when(record.name()).thenReturn("Kafka record name");
  when(record.metrics()).thenReturn(metrics);
  SubsetConfiguration conf=mock(SubsetConfiguration.class);
  when(conf.getString(KafkaSink.BROKER_LIST)).thenReturn("localhost:9092");
  String topic="myTestKafkaTopic";
  when(conf.getString(KafkaSink.TOPIC)).thenReturn(topic);
  kafkaSink=new KafkaSink();
  kafkaSink.init(conf);
  Producer<Integer,byte[]> mockProducer=mock(KafkaProducer.class);
  kafkaSink.setProducer(mockProducer);
  StringBuilder jsonLines=recordToJson(record);
  if (LOG.isDebugEnabled()) {
    LOG.debug("kafka message: " + jsonLines.toString());
  }
  Future<RecordMetadata> f=mock(Future.class);
  when(mockProducer.send((ProducerRecord)anyObject())).thenReturn(f);
  kafkaSink.putMetrics(record);
  ArgumentCaptor<ProducerRecord> argument=ArgumentCaptor.forClass(ProducerRecord.class);
  verify(mockProducer).send(argument.capture());
  ProducerRecord<Integer,byte[]> data=(argument.getValue());
  String jsonResult=new String(data.value());
  if (LOG.isDebugEnabled()) {
    LOG.debug("kafka result: " + jsonResult);
  }
  assertEquals(jsonLines.toString(),jsonResult);
}
