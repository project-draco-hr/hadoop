{
  final Path in=new Path("foo").makeQualified(GridmixTestUtils.dfs);
  final Path out=GridmixTestUtils.DEST.makeQualified(GridmixTestUtils.dfs);
  final Path root=new Path("/user");
  Configuration conf=null;
  try {
    final String[] required={"-D" + FilePool.GRIDMIX_MIN_FILE + "=0","-D" + Gridmix.GRIDMIX_OUT_DIR + "="+ out,"-D" + Gridmix.GRIDMIX_USR_RSV + "="+ EchoUserResolver.class.getName(),"-D" + JobCreator.GRIDMIX_JOB_TYPE + "="+ JobCreator.SLEEPJOB.name(),"-D" + SleepJob.GRIDMIX_SLEEP_INTERVAL + "="+ "10"};
    final String[] mandatory={"-generate",String.valueOf(GENDATA) + "m",in.toString(),"-"};
    ArrayList<String> argv=new ArrayList<String>(required.length + optional.length + mandatory.length);
    for (    String s : required) {
      argv.add(s);
    }
    for (    String s : optional) {
      argv.add(s);
    }
    for (    String s : mandatory) {
      argv.add(s);
    }
    DebugGridmix client=new DebugGridmix();
    conf=new Configuration();
    conf.setEnum(GridmixJobSubmissionPolicy.JOB_SUBMISSION_POLICY,policy);
    conf.set("mapreduce.job.hdfs-servers","");
    conf=GridmixTestUtils.mrCluster.createJobConf(new JobConf(conf));
    GridmixTestUtils.dfs.mkdirs(root,new FsPermission((short)0777));
    GridmixTestUtils.dfs.setPermission(root,new FsPermission((short)0777));
    String[] args=argv.toArray(new String[argv.size()]);
    System.out.println("Command line arguments:");
    for (int i=0; i < args.length; ++i) {
      System.out.printf("    [%d] %s\n",i,args[i]);
    }
    int res=ToolRunner.run(conf,client,args);
    assertEquals("Client exited with nonzero status",0,res);
    client.checkMonitor();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    in.getFileSystem(conf).delete(in,true);
    out.getFileSystem(conf).delete(out,true);
    root.getFileSystem(conf).delete(root,true);
  }
}
