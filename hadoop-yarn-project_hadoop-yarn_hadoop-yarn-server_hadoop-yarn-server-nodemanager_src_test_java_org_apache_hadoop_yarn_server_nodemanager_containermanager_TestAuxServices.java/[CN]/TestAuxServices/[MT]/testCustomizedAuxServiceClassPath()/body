{
  Configuration conf=new YarnConfiguration();
  conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,new String[]{"ServiceC"});
  conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT,"ServiceC"),ServiceC.class,Service.class);
  @SuppressWarnings("resource") AuxServices aux=new AuxServices();
  aux.init(conf);
  aux.start();
  Map<String,ByteBuffer> meta=aux.getMetaData();
  String auxName="";
  Set<String> defaultAuxClassPath=null;
  Assert.assertTrue(meta.size() == 1);
  for (  Entry<String,ByteBuffer> i : meta.entrySet()) {
    auxName=i.getKey();
    String auxClassPath=Charsets.UTF_8.decode(i.getValue()).toString();
    defaultAuxClassPath=new HashSet<String>(Arrays.asList(StringUtils.getTrimmedStrings(auxClassPath)));
  }
  Assert.assertTrue(auxName.equals("ServiceC"));
  aux.serviceStop();
  File rootDir=GenericTestUtils.getTestDir(getClass().getSimpleName());
  if (!rootDir.exists()) {
    rootDir.mkdirs();
  }
  File testJar=null;
  try {
    testJar=JarFinder.makeClassLoaderTestJar(this.getClass(),rootDir,"test-runjar.jar",2048,ServiceC.class.getName());
    conf=new YarnConfiguration();
    conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,new String[]{"ServiceC"});
    conf.set(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT,"ServiceC"),ServiceC.class.getName());
    conf.set(String.format(YarnConfiguration.NM_AUX_SERVICES_CLASSPATH,"ServiceC"),testJar.getAbsolutePath());
    String systemClasses="-org.apache.hadoop." + "," + ApplicationClassLoader.SYSTEM_CLASSES_DEFAULT;
    conf.set(String.format(YarnConfiguration.NM_AUX_SERVICES_SYSTEM_CLASSES,"ServiceC"),systemClasses);
    aux=new AuxServices();
    aux.init(conf);
    aux.start();
    meta=aux.getMetaData();
    Assert.assertTrue(meta.size() == 1);
    Set<String> customizedAuxClassPath=null;
    for (    Entry<String,ByteBuffer> i : meta.entrySet()) {
      Assert.assertTrue(auxName.equals(i.getKey()));
      String classPath=Charsets.UTF_8.decode(i.getValue()).toString();
      customizedAuxClassPath=new HashSet<String>(Arrays.asList(StringUtils.getTrimmedStrings(classPath)));
      Assert.assertTrue(classPath.contains(testJar.getName()));
    }
    aux.stop();
    Set<String> mutalClassPath=Sets.intersection(defaultAuxClassPath,customizedAuxClassPath);
    Assert.assertTrue(mutalClassPath.isEmpty());
  }
  finally {
    if (testJar != null) {
      testJar.delete();
      rootDir.delete();
    }
  }
}
