{
  Configuration conf=new Configuration();
  conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,new String[]{"Asrv","Bsrv"});
  conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT,"Asrv"),ServiceA.class,Service.class);
  conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT,"Bsrv"),ServiceB.class,Service.class);
  conf.setInt("A.expected.init",1);
  conf.setInt("B.expected.stop",1);
  final AuxServices aux=new AuxServices();
  aux.init(conf);
  aux.start();
  ApplicationId appId1=ApplicationId.newInstance(0,65);
  ByteBuffer buf=ByteBuffer.allocate(6);
  buf.putChar('A');
  buf.putInt(65);
  buf.flip();
  AuxServicesEvent event=new AuxServicesEvent(AuxServicesEventType.APPLICATION_INIT,"user0",appId1,"Asrv",buf);
  aux.handle(event);
  ApplicationId appId2=ApplicationId.newInstance(0,66);
  event=new AuxServicesEvent(AuxServicesEventType.APPLICATION_STOP,"user0",appId2,"Bsrv",null);
  aux.handle(event);
  Collection<AuxiliaryService> servs=aux.getServices();
  for (  AuxiliaryService serv : servs) {
    ArrayList<Integer> appIds=((LightService)serv).getAppIdsStopped();
    assertEquals("app not properly stopped",1,appIds.size());
    assertTrue("wrong app stopped",appIds.contains((Integer)66));
  }
  for (  AuxiliaryService serv : servs) {
    assertNull(((LightService)serv).containerId);
    assertNull(((LightService)serv).resource);
  }
  ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId1,1);
  ContainerTokenIdentifier cti=new ContainerTokenIdentifier(ContainerId.newInstance(attemptId,1),"","",Resource.newInstance(1,1),0,0,0,Priority.newInstance(0),0);
  Container container=new ContainerImpl(null,null,null,null,null,null,cti);
  ContainerId containerId=container.getContainerId();
  Resource resource=container.getResource();
  event=new AuxServicesEvent(AuxServicesEventType.CONTAINER_INIT,container);
  aux.handle(event);
  for (  AuxiliaryService serv : servs) {
    assertEquals(containerId,((LightService)serv).containerId);
    assertEquals(resource,((LightService)serv).resource);
    ((LightService)serv).containerId=null;
    ((LightService)serv).resource=null;
  }
  event=new AuxServicesEvent(AuxServicesEventType.CONTAINER_STOP,container);
  aux.handle(event);
  for (  AuxiliaryService serv : servs) {
    assertEquals(containerId,((LightService)serv).containerId);
    assertEquals(resource,((LightService)serv).resource);
  }
}
