{
  TokenWithConf tokenWithConf=null;
  while (true) {
    try {
      tokenWithConf=queue.take();
      final TokenWithConf current=tokenWithConf;
      if (LOG.isDebugEnabled()) {
        LOG.debug("Canceling token " + tokenWithConf.token.getService());
      }
      UserGroupInformation.getLoginUser().doAs(new PrivilegedExceptionAction<Void>(){
        @Override public Void run() throws Exception {
          current.token.cancel(current.conf);
          return null;
        }
      }
);
    }
 catch (    IOException e) {
      LOG.warn("Failed to cancel token " + tokenWithConf.token + " "+ StringUtils.stringifyException(e));
    }
catch (    InterruptedException ie) {
      return;
    }
catch (    Throwable t) {
      LOG.warn("Got exception " + StringUtils.stringifyException(t) + ". Exiting..");
      System.exit(-1);
    }
  }
}
