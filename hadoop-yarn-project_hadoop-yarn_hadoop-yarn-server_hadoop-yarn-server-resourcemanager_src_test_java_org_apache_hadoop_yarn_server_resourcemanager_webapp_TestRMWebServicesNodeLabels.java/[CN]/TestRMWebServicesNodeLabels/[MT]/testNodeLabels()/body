{
  WebResource r=resource();
  ClientResponse response;
  NodeLabelsInfo nlsifo=new NodeLabelsInfo();
  nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("a"));
  response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsifo,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertEquals(1,nlsifo.getNodeLabels().size());
  for (  NodeLabelInfo nl : nlsifo.getNodeLabelsInfo()) {
    assertEquals("a",nl.getName());
    assertTrue(nl.getExclusivity());
  }
  nlsifo=new NodeLabelsInfo();
  nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("b",false));
  response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsifo,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertEquals(2,nlsifo.getNodeLabels().size());
  for (  NodeLabelInfo nl : nlsifo.getNodeLabelsInfo()) {
    if (nl.getName().equals("b")) {
      assertFalse(nl.getExclusivity());
    }
  }
  MultivaluedMapImpl params=new MultivaluedMapImpl();
  params.add("labels","a");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  params=new MultivaluedMapImpl();
  params.add("labels","b");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid1:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  params=new MultivaluedMapImpl();
  params.add("labels","b");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid2:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("label-mappings").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  LabelsToNodesInfo ltni=response.getEntity(LabelsToNodesInfo.class);
  assertEquals(2,ltni.getLabelsToNodes().size());
  NodeIDsInfo nodes=ltni.getLabelsToNodes().get(new NodeLabelInfo("b",false));
  assertTrue(nodes.getNodeIDs().contains("nid2:0"));
  assertTrue(nodes.getNodeIDs().contains("nid1:0"));
  nodes=ltni.getLabelsToNodes().get(new NodeLabelInfo("a"));
  assertTrue(nodes.getNodeIDs().contains("nid:0"));
  params=new MultivaluedMapImpl();
  params.add("labels","a");
  response=r.path("ws").path("v1").path("cluster").path("label-mappings").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  ltni=response.getEntity(LabelsToNodesInfo.class);
  assertEquals(1,ltni.getLabelsToNodes().size());
  nodes=ltni.getLabelsToNodes().get(new NodeLabelInfo("a"));
  assertTrue(nodes.getNodeIDs().contains("nid:0"));
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertTrue(nlsifo.getNodeLabelsInfo().contains(new NodeLabelInfo("a")));
  params=new MultivaluedMapImpl();
  params.add("labels","b");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertTrue(nlsifo.getNodeLabelsInfo().contains(new NodeLabelInfo("b",false)));
  NodeToLabelsEntryList ntli=new NodeToLabelsEntryList();
  ArrayList<String> labels=new ArrayList<String>();
  labels.add("a");
  NodeToLabelsEntry nli=new NodeToLabelsEntry("nid:0",labels);
  ntli.getNodeToLabels().add(nli);
  response=r.path("ws").path("v1").path("cluster").path("replace-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(ntli,NodeToLabelsEntryList.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  NodeToLabelsInfo ntlinfo=response.getEntity(NodeToLabelsInfo.class);
  NodeLabelsInfo nlinfo=ntlinfo.getNodeToLabels().get("nid:0");
  assertEquals(1,nlinfo.getNodeLabels().size());
  assertTrue(nlinfo.getNodeLabelsInfo().contains(new NodeLabelInfo("a")));
  params=new MultivaluedMapImpl();
  params.add("labels","");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertTrue(nlsifo.getNodeLabelsInfo().isEmpty());
  params=new MultivaluedMapImpl();
  params.add("labels","a");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertTrue(nlsifo.getNodeLabelsInfo().contains(new NodeLabelInfo("a")));
  params=new MultivaluedMapImpl();
  params.add("labels","b");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",notUserName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertTrue(nlsifo.getNodeLabelsInfo().contains(new NodeLabelInfo("a")));
  response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",notUserName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\":\"c\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertEquals(2,nlsifo.getNodeLabels().size());
  params=new MultivaluedMapImpl();
  params.add("labels","b");
  response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertEquals(1,nlsifo.getNodeLabels().size());
  for (  NodeLabelInfo nl : nlsifo.getNodeLabelsInfo()) {
    assertEquals("a",nl.getName());
    assertTrue(nl.getExclusivity());
  }
  params=new MultivaluedMapImpl();
  params.add("labels","a");
  response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertEquals(0,nlsifo.getNodeLabels().size());
  nlsifo=new NodeLabelsInfo();
  nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("x",false));
  nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("y",false));
  response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsifo,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
  params=new MultivaluedMapImpl();
  params.add("labels","y");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  rmWebService.isCentralizedNodeLabelConfiguration=false;
  ntli=new NodeToLabelsEntryList();
  labels=new ArrayList<String>();
  labels.add("x");
  nli=new NodeToLabelsEntry("nid:0",labels);
  ntli.getNodeToLabels().add(nli);
  response=r.path("ws").path("v1").path("cluster").path("replace-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(ntli,NodeToLabelsEntryList.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  ntlinfo=response.getEntity(NodeToLabelsInfo.class);
  nlinfo=ntlinfo.getNodeToLabels().get("nid:0");
  assertEquals(1,nlinfo.getNodeLabels().size());
  assertFalse(nlinfo.getNodeLabelsInfo().contains(new NodeLabelInfo("x",false)));
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabelName\": [\"x\"]}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("get-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  ntlinfo=response.getEntity(NodeToLabelsInfo.class);
  nlinfo=ntlinfo.getNodeToLabels().get("nid:0");
  assertEquals(1,nlinfo.getNodeLabels().size());
  assertFalse(nlinfo.getNodeLabelsInfo().contains(new NodeLabelInfo("x",false)));
  params=new MultivaluedMapImpl();
  params.add("labels","x");
  response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertEquals(new NodeLabelInfo("y",false),nlsifo.getNodeLabelsInfo().get(0));
  assertEquals("y",nlsifo.getNodeLabelsInfo().get(0).getName());
  assertFalse(nlsifo.getNodeLabelsInfo().get(0).getExclusivity());
  params=new MultivaluedMapImpl();
  params.add("labels","y");
  response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertTrue(nlsifo.getNodeLabelsInfo().isEmpty());
  nlsifo=new NodeLabelsInfo();
  nlsifo.getNodeLabelsInfo().add(new NodeLabelInfo("z",false));
  response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(nlsifo,NodeLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  nlsifo=response.getEntity(NodeLabelsInfo.class);
  assertEquals("z",nlsifo.getNodeLabelsInfo().get(0).getName());
  assertFalse(nlsifo.getNodeLabelsInfo().get(0).getExclusivity());
  assertEquals(1,nlsifo.getNodeLabels().size());
}
