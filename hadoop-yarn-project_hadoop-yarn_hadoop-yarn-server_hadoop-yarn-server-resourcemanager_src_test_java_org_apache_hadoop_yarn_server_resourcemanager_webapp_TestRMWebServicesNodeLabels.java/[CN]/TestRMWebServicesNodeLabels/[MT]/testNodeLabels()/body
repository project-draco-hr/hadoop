{
  WebResource r=resource();
  ClientResponse response;
  JSONObject json;
  JSONArray jarr;
  response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\":\"a\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  json=response.getEntity(JSONObject.class);
  assertEquals("a",json.getString("nodeLabels"));
  response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\":\"b\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  json=response.getEntity(JSONObject.class);
  jarr=json.getJSONArray("nodeLabels");
  assertEquals(2,jarr.length());
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\": [\"a\"]}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid1:0").path("replace-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\": [\"b\"]}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid2:0").path("replace-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\": [\"b\"]}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("label-mappings").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  LabelsToNodesInfo ltni=response.getEntity(LabelsToNodesInfo.class);
  assertEquals(2,ltni.getLabelsToNodes().size());
  NodeIDsInfo nodes=ltni.getLabelsToNodes().get("b");
  assertTrue(nodes.getNodeIDs().contains("nid2:0"));
  assertTrue(nodes.getNodeIDs().contains("nid1:0"));
  nodes=ltni.getLabelsToNodes().get("a");
  assertTrue(nodes.getNodeIDs().contains("nid:0"));
  MultivaluedMapImpl params=new MultivaluedMapImpl();
  params.add("labels","a");
  response=r.path("ws").path("v1").path("cluster").path("label-mappings").queryParam("user.name",userName).queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  ltni=response.getEntity(LabelsToNodesInfo.class);
  assertEquals(1,ltni.getLabelsToNodes().size());
  nodes=ltni.getLabelsToNodes().get("a");
  assertTrue(nodes.getNodeIDs().contains("nid:0"));
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  json=response.getEntity(JSONObject.class);
  assertEquals("a",json.getString("nodeLabels"));
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\":\"b\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  json=response.getEntity(JSONObject.class);
  assertEquals("b",json.getString("nodeLabels"));
  NodeToLabelsInfo ntli=new NodeToLabelsInfo();
  NodeLabelsInfo nli=new NodeLabelsInfo();
  nli.getNodeLabels().add("a");
  ntli.getNodeToLabels().put("nid:0",nli);
  response=r.path("ws").path("v1").path("cluster").path("replace-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(ntli,NodeToLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  ntli=response.getEntity(NodeToLabelsInfo.class);
  nli=ntli.getNodeToLabels().get("nid:0");
  assertEquals(1,nli.getNodeLabels().size());
  assertTrue(nli.getNodeLabels().contains("a"));
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  json=response.getEntity(JSONObject.class);
  assertEquals("",json.getString("nodeLabels"));
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\": \"a\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  json=response.getEntity(JSONObject.class);
  assertEquals("a",json.getString("nodeLabels"));
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",notUserName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\": [\"b\"]}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("get-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  json=response.getEntity(JSONObject.class);
  assertEquals("a",json.getString("nodeLabels"));
  response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",notUserName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\":\"c\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  json=response.getEntity(JSONObject.class);
  jarr=json.getJSONArray("nodeLabels");
  assertEquals(2,jarr.length());
  response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\":\"b\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  json=response.getEntity(JSONObject.class);
  assertEquals("a",json.getString("nodeLabels"));
  response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\":\"a\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  String res=response.getEntity(String.class);
  assertTrue(res.equals("null"));
  response=r.path("ws").path("v1").path("cluster").path("add-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\":[\"x\",\"y\"]}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\": [\"y\"]}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  rmWebService.isDistributedNodeLabelConfiguration=true;
  ntli=new NodeToLabelsInfo();
  nli=new NodeLabelsInfo();
  nli.getNodeLabels().add("x");
  ntli.getNodeToLabels().put("nid:0",nli);
  response=r.path("ws").path("v1").path("cluster").path("replace-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity(toJson(ntli,NodeToLabelsInfo.class),MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  ntli=response.getEntity(NodeToLabelsInfo.class);
  nli=ntli.getNodeToLabels().get("nid:0");
  assertEquals(1,nli.getNodeLabels().size());
  assertFalse(nli.getNodeLabels().contains("x"));
  response=r.path("ws").path("v1").path("cluster").path("nodes").path("nid:0").path("replace-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\": [\"x\"]}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  LOG.info("posted node nodelabel");
  response=r.path("ws").path("v1").path("cluster").path("get-node-to-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  ntli=response.getEntity(NodeToLabelsInfo.class);
  nli=ntli.getNodeToLabels().get("nid:0");
  assertEquals(1,nli.getNodeLabels().size());
  assertFalse(nli.getNodeLabels().contains("x"));
  response=r.path("ws").path("v1").path("cluster").path("remove-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).entity("{\"nodeLabels\":\"x\"}",MediaType.APPLICATION_JSON).post(ClientResponse.class);
  response=r.path("ws").path("v1").path("cluster").path("get-node-labels").queryParam("user.name",userName).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  json=response.getEntity(JSONObject.class);
  assertEquals("y",json.getString("nodeLabels"));
}
