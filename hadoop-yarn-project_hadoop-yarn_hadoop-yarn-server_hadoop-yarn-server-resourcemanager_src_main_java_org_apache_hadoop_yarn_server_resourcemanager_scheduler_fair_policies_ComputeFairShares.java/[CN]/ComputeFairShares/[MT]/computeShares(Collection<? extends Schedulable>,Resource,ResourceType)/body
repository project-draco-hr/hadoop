{
  if (schedulables.isEmpty()) {
    return;
  }
  int totalMaxShare=0;
  for (  Schedulable sched : schedulables) {
    int maxShare=getResourceValue(sched.getMaxShare(),type);
    if (maxShare == Integer.MAX_VALUE) {
      totalMaxShare=Integer.MAX_VALUE;
      break;
    }
 else {
      totalMaxShare+=maxShare;
    }
  }
  int totalResource=Math.min(totalMaxShare,getResourceValue(totalResources,type));
  double rMax=1.0;
  while (resourceUsedWithWeightToResourceRatio(rMax,schedulables,type) < totalResource) {
    rMax*=2.0;
  }
  double left=0;
  double right=rMax;
  for (int i=0; i < COMPUTE_FAIR_SHARES_ITERATIONS; i++) {
    double mid=(left + right) / 2.0;
    if (resourceUsedWithWeightToResourceRatio(mid,schedulables,type) < totalResource) {
      left=mid;
    }
 else {
      right=mid;
    }
  }
  for (  Schedulable sched : schedulables) {
    setResourceValue(computeShare(sched,right,type),sched.getFairShare(),type);
  }
}
