{
  if (args.length == 0) {
    return printUsage();
  }
  Configuration conf=getConf();
  JobClient client=new JobClient(conf);
  ClusterStatus cluster=client.getClusterStatus();
  int numMapsPerHost=conf.getInt(MAPS_PER_HOST,10);
  long numBytesToWritePerMap=conf.getLong(BYTES_PER_MAP,1 * 1024 * 1024* 1024);
  if (numBytesToWritePerMap == 0) {
    System.err.println("Cannot have " + BYTES_PER_MAP + " set to 0");
    return -2;
  }
  long totalBytesToWrite=conf.getLong(TOTAL_BYTES,numMapsPerHost * numBytesToWritePerMap * cluster.getTaskTrackers());
  int numMaps=(int)(totalBytesToWrite / numBytesToWritePerMap);
  if (numMaps == 0 && totalBytesToWrite > 0) {
    numMaps=1;
    conf.setLong(BYTES_PER_MAP,totalBytesToWrite);
  }
  conf.setInt(MRJobConfig.NUM_MAPS,numMaps);
  Job job=new Job(conf);
  job.setJarByClass(RandomTextWriter.class);
  job.setJobName("random-text-writer");
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  job.setInputFormatClass(RandomWriter.RandomInputFormat.class);
  job.setMapperClass(RandomTextMapper.class);
  Class<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;
  List<String> otherArgs=new ArrayList<String>();
  for (int i=0; i < args.length; ++i) {
    try {
      if ("-outFormat".equals(args[i])) {
        outputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);
      }
 else {
        otherArgs.add(args[i]);
      }
    }
 catch (    ArrayIndexOutOfBoundsException except) {
      System.out.println("ERROR: Required parameter missing from " + args[i - 1]);
      return printUsage();
    }
  }
  job.setOutputFormatClass(outputFormatClass);
  FileOutputFormat.setOutputPath(job,new Path(otherArgs.get(0)));
  System.out.println("Running " + numMaps + " maps.");
  job.setNumReduceTasks(0);
  Date startTime=new Date();
  System.out.println("Job started: " + startTime);
  int ret=job.waitForCompletion(true) ? 0 : 1;
  Date endTime=new Date();
  System.out.println("Job ended: " + endTime);
  System.out.println("The job took " + (endTime.getTime() - startTime.getTime()) / 1000 + " seconds.");
  return ret;
}
