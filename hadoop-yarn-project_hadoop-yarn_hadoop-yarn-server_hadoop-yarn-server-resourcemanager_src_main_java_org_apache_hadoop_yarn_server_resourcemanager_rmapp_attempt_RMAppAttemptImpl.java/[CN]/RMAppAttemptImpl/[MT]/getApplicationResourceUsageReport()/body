{
  this.readLock.lock();
  try {
    int numUsedContainers=0;
    int numReservedContainers=0;
    Resource currentConsumption=Resources.createResource(0,0);
    Resource reservedResources=Resources.createResource(0,0);
    SchedulerAppReport schedApp=scheduler.getSchedulerAppInfo(this.getAppAttemptId());
    Collection<RMContainer> liveContainers;
    Collection<RMContainer> reservedContainers;
    if (schedApp != null) {
      liveContainers=schedApp.getLiveContainers();
      reservedContainers=schedApp.getReservedContainers();
      if (liveContainers != null) {
        numUsedContainers=liveContainers.size();
        for (        RMContainer lc : liveContainers) {
          Resources.addTo(currentConsumption,lc.getContainer().getResource());
        }
      }
      if (reservedContainers != null) {
        numReservedContainers=reservedContainers.size();
        for (        RMContainer rc : reservedContainers) {
          Resources.addTo(reservedResources,rc.getContainer().getResource());
        }
      }
    }
    return BuilderUtils.newApplicationResourceUsageReport(numUsedContainers,numReservedContainers,currentConsumption,reservedResources,Resources.add(currentConsumption,reservedResources));
  }
  finally {
    this.readLock.unlock();
  }
}
