{
  rememberTargetTransitions(event,transitionToDo,targetFinalState);
  String diags=null;
  String finalTrackingUrl=null;
  FinalApplicationStatus finalStatus=null;
switch (event.getType()) {
case APP_REJECTED:
    RMAppAttemptRejectedEvent rejectedEvent=(RMAppAttemptRejectedEvent)event;
  diags=rejectedEvent.getMessage();
break;
case LAUNCH_FAILED:
RMAppAttemptLaunchFailedEvent launchFaileEvent=(RMAppAttemptLaunchFailedEvent)event;
diags=launchFaileEvent.getMessage();
break;
case REGISTERED:
diags=getUnexpectedAMRegisteredDiagnostics();
break;
case UNREGISTERED:
RMAppAttemptUnregistrationEvent unregisterEvent=(RMAppAttemptUnregistrationEvent)event;
diags=unregisterEvent.getDiagnostics();
finalTrackingUrl=sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());
finalStatus=unregisterEvent.getFinalApplicationStatus();
break;
case CONTAINER_FINISHED:
RMAppAttemptContainerFinishedEvent finishEvent=(RMAppAttemptContainerFinishedEvent)event;
diags=getAMContainerCrashedDiagnostics(finishEvent);
break;
case KILL:
break;
case EXPIRE:
diags=getAMExpiredDiagnostics(event);
break;
default :
break;
}
RMStateStore rmStore=rmContext.getStateStore();
ApplicationAttemptState attemptState=new ApplicationAttemptState(applicationAttemptId,getMasterContainer(),rmStore.getCredentialsFromAppAttempt(this),startTime,stateToBeStored,finalTrackingUrl,diags,finalStatus);
LOG.info("Updating application attempt " + applicationAttemptId + " with final state: "+ targetedFinalState);
rmStore.updateApplicationAttemptState(attemptState);
}
