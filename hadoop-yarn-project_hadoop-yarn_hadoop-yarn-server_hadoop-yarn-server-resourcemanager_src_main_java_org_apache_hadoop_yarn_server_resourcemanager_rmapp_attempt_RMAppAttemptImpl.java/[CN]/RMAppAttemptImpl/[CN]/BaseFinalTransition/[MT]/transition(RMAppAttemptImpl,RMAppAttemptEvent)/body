{
  ApplicationAttemptId appAttemptId=appAttempt.getAppAttemptId();
  appAttempt.masterService.unregisterAttempt(appAttemptId);
  ApplicationId applicationId=appAttemptId.getApplicationId();
  RMAppEvent appEvent=null;
  boolean keepContainersAcrossAppAttempts=false;
switch (finalAttemptState) {
case FINISHED:
{
      appEvent=new RMAppFinishedAttemptEvent(applicationId,appAttempt.getDiagnostics());
    }
  break;
case KILLED:
{
  appAttempt.invalidateAMHostAndPort();
  appEvent=new RMAppFailedAttemptEvent(applicationId,RMAppEventType.ATTEMPT_KILLED,"Application killed by user.",false);
}
break;
case FAILED:
{
appAttempt.invalidateAMHostAndPort();
if (appAttempt.submissionContext.getKeepContainersAcrossApplicationAttempts() && !appAttempt.submissionContext.getUnmanagedAM()) {
if (!appAttempt.shouldCountTowardsMaxAttemptRetry()) {
  keepContainersAcrossAppAttempts=true;
}
 else if (!appAttempt.maybeLastAttempt) {
  keepContainersAcrossAppAttempts=true;
}
}
appEvent=new RMAppFailedAttemptEvent(applicationId,RMAppEventType.ATTEMPT_FAILED,appAttempt.getDiagnostics(),keepContainersAcrossAppAttempts);
}
break;
default :
{
LOG.error("Cannot get this state!! Error!!");
}
break;
}
appAttempt.eventHandler.handle(appEvent);
appAttempt.eventHandler.handle(new AppAttemptRemovedSchedulerEvent(appAttemptId,finalAttemptState,keepContainersAcrossAppAttempts));
appAttempt.removeCredentials(appAttempt);
appAttempt.rmContext.getRMApplicationHistoryWriter().applicationAttemptFinished(appAttempt,finalAttemptState);
appAttempt.rmContext.getSystemMetricsPublisher().appAttemptFinished(appAttempt,finalAttemptState,appAttempt.rmContext.getRMApps().get(appAttempt.applicationAttemptId.getApplicationId()),System.currentTimeMillis());
}
