def find_flaky_tests(jenkins_url, job_name, num_prev_days):
    global numRunsToExamine
    all_failing = dict()
    builds = list_builds(jenkins_url, job_name)
    min_time = (int(time.time()) - (SECONDS_PER_DAY * num_prev_days))
    builds = [b for b in builds if ((int(b['timestamp']) / 1000) > min_time)]
    failing_build_urls = [(b['url'], b['timestamp']) for b in builds if (b['result'] in ('UNSTABLE', 'FAILURE'))]
    tnum = len(builds)
    num = len(failing_build_urls)
    numRunsToExamine = tnum
    logging.info(((((((('    THERE ARE ' + str(num)) + ' builds (out of ') + str(tnum)) + ') that have failed tests in the past ') + str(num_prev_days)) + ' days') + ('.', ', as listed below:\n')[(num > 0)]))
    for failed_build_with_time in failing_build_urls:
        failed_build = failed_build_with_time[0]
        jobConsoleOutput = (failed_build + 'Console')
        testReport = (failed_build + 'testReport')
        testReportApiJson = (testReport + '/api/json')
        ts = (float(failed_build_with_time[1]) / 1000.0)
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        logging.info((((('===>%s' % str(testReport)) + ' (') + st) + ')'))
        failing = find_failing_tests(testReportApiJson, jobConsoleOutput)
        if failing:
            for ftest in failing:
                logging.info(('    Failed test: %s' % ftest))
                all_failing[ftest] = (all_failing.get(ftest, 0) + 1)
    return all_failing
