{
  ApplicationReport report=rmClient.getApplicationReport(attemptId.getApplicationId());
  if (report.getYarnApplicationState() != YarnApplicationState.ACCEPTED) {
    throw new YarnException("Umanaged AM must be in ACCEPTED state before launching");
  }
  Credentials credentials=new Credentials();
  Token<AMRMTokenIdentifier> token=rmClient.getAMRMToken(attemptId.getApplicationId());
  credentials.addToken(token.getService(),token);
  File tokenFile=File.createTempFile("unmanagedAMRMToken","",new File(System.getProperty("user.dir")));
  try {
    FileUtil.chmod(tokenFile.getAbsolutePath(),"600");
  }
 catch (  InterruptedException ex) {
    throw new RuntimeException(ex);
  }
  tokenFile.deleteOnExit();
  DataOutputStream os=new DataOutputStream(new FileOutputStream(tokenFile,true));
  credentials.writeTokenStorageToStream(os);
  os.close();
  Map<String,String> env=System.getenv();
  ArrayList<String> envAMList=new ArrayList<String>();
  boolean setClasspath=false;
  for (  Map.Entry<String,String> entry : env.entrySet()) {
    String key=entry.getKey();
    String value=entry.getValue();
    if (key.equals("CLASSPATH")) {
      setClasspath=true;
      if (classpath != null) {
        value=value + File.pathSeparator + classpath;
      }
    }
    envAMList.add(key + "=" + value);
  }
  if (!setClasspath && classpath != null) {
    envAMList.add("CLASSPATH=" + classpath);
  }
  ContainerId containerId=ContainerId.newInstance(attemptId,0);
  String hostname=InetAddress.getLocalHost().getHostName();
  envAMList.add(Environment.CONTAINER_ID.name() + "=" + containerId);
  envAMList.add(Environment.NM_HOST.name() + "=" + hostname);
  envAMList.add(Environment.NM_HTTP_PORT.name() + "=0");
  envAMList.add(Environment.NM_PORT.name() + "=0");
  envAMList.add(Environment.LOCAL_DIRS.name() + "= /tmp");
  envAMList.add(ApplicationConstants.APP_SUBMIT_TIME_ENV + "=" + System.currentTimeMillis());
  envAMList.add(ApplicationConstants.CONTAINER_TOKEN_FILE_ENV_NAME + "=" + tokenFile.getAbsolutePath());
  String[] envAM=new String[envAMList.size()];
  Process amProc=Runtime.getRuntime().exec(amCmd,envAMList.toArray(envAM));
  final BufferedReader errReader=new BufferedReader(new InputStreamReader(amProc.getErrorStream()));
  final BufferedReader inReader=new BufferedReader(new InputStreamReader(amProc.getInputStream()));
  Thread errThread=new Thread(){
    @Override public void run(){
      try {
        String line=errReader.readLine();
        while ((line != null) && !isInterrupted()) {
          System.err.println(line);
          line=errReader.readLine();
        }
      }
 catch (      IOException ioe) {
        LOG.warn("Error reading the error stream",ioe);
      }
    }
  }
;
  Thread outThread=new Thread(){
    @Override public void run(){
      try {
        String line=inReader.readLine();
        while ((line != null) && !isInterrupted()) {
          System.out.println(line);
          line=inReader.readLine();
        }
      }
 catch (      IOException ioe) {
        LOG.warn("Error reading the out stream",ioe);
      }
    }
  }
;
  try {
    errThread.start();
    outThread.start();
  }
 catch (  IllegalStateException ise) {
  }
  try {
    int exitCode=amProc.waitFor();
    LOG.info("AM process exited with value: " + exitCode);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
 finally {
    amCompleted=true;
  }
  try {
    errThread.join();
    outThread.join();
    errReader.close();
    inReader.close();
  }
 catch (  InterruptedException ie) {
    LOG.info("ShellExecutor: Interrupted while reading the error/out stream",ie);
  }
catch (  IOException ioe) {
    LOG.warn("Error while closing the error/out stream",ioe);
  }
  amProc.destroy();
}
