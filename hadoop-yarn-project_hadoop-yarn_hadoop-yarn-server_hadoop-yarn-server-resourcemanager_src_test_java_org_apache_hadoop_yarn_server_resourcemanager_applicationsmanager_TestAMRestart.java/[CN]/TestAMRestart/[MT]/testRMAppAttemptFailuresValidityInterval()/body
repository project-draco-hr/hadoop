{
  YarnConfiguration conf=new YarnConfiguration();
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
  conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,false);
  conf.set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",8000,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app=rm1.submitApp(200,60000);
  MockAM am=MockRM.launchAM(app,rm1,nm1);
  nm1.nodeHeartbeat(am.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm1.waitForState(am.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  rm1.waitForState(app.getApplicationId(),RMAppState.ACCEPTED);
  Assert.assertEquals(2,app.getAppAttempts().size());
  Assert.assertTrue(((RMAppAttemptImpl)app.getCurrentAppAttempt()).mayBeLastAttempt());
  MockAM am_2=MockRM.launchAndRegisterAM(app,rm1,nm1);
  rm1.waitForState(am_2.getApplicationAttemptId(),RMAppAttemptState.RUNNING);
  nm1.nodeHeartbeat(am_2.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm1.waitForState(am_2.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  rm1.waitForState(app.getApplicationId(),RMAppState.FAILED);
  ControlledClock clock=new ControlledClock();
  RMAppImpl app1=(RMAppImpl)rm1.submitApp(200,10000);
  app1.setSystemClock(clock);
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  nm1.nodeHeartbeat(am1.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm1.waitForState(am1.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  Thread.sleep(15 * 1000);
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  Assert.assertEquals(2,app1.getAppAttempts().size());
  RMAppAttempt attempt2=app1.getCurrentAppAttempt();
  Assert.assertTrue(((RMAppAttemptImpl)attempt2).mayBeLastAttempt());
  MockAM am2=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  rm1.waitForState(am2.getApplicationAttemptId(),RMAppAttemptState.RUNNING);
  clock.setTime(System.currentTimeMillis() + 10 * 1000);
  nm1.nodeHeartbeat(am2.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm1.waitForState(am2.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  Assert.assertEquals(3,app1.getAppAttempts().size());
  RMAppAttempt attempt3=app1.getCurrentAppAttempt();
  clock.reset();
  MockAM am3=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  rm1.waitForState(am3.getApplicationAttemptId(),RMAppAttemptState.RUNNING);
  @SuppressWarnings("resource") MockRM rm2=new MockRM(conf,memStore);
  rm2.start();
  ApplicationStateData app1State=memStore.getState().getApplicationState().get(app1.getApplicationId());
  Assert.assertEquals(1,app1State.getFirstAttemptId());
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  NMContainerStatus status=Records.newRecord(NMContainerStatus.class);
  status.setContainerExitStatus(ContainerExitStatus.KILLED_BY_RESOURCEMANAGER);
  status.setContainerId(attempt3.getMasterContainer().getId());
  status.setContainerState(ContainerState.COMPLETE);
  status.setDiagnostics("");
  nm1.registerNode(Collections.singletonList(status),null);
  rm2.waitForState(attempt3.getAppAttemptId(),RMAppAttemptState.FAILED);
  Thread.sleep(15 * 1000);
  Assert.assertEquals(2,app1State.getAttemptCount());
  rm2.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  MockAM am4=rm2.waitForNewAMToLaunchAndRegister(app1.getApplicationId(),4,nm1);
  clock.setTime(System.currentTimeMillis() + 10 * 1000);
  nm1.nodeHeartbeat(am4.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm2.waitForState(am4.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  Assert.assertEquals(2,app1State.getAttemptCount());
  rm2.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  MockAM am5=rm2.waitForNewAMToLaunchAndRegister(app1.getApplicationId(),5,nm1);
  clock.reset();
  rm2.waitForState(am5.getApplicationAttemptId(),RMAppAttemptState.RUNNING);
  nm1.nodeHeartbeat(am5.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm2.waitForState(am5.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  Assert.assertEquals(2,app1State.getAttemptCount());
  rm2.waitForState(app1.getApplicationId(),RMAppState.FAILED);
  rm1.stop();
  rm2.stop();
}
