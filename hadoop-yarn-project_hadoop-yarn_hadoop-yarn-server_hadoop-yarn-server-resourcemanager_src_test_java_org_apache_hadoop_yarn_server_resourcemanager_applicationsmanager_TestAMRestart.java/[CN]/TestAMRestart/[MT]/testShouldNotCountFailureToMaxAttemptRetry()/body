{
  YarnConfiguration conf=new YarnConfiguration();
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,1);
  conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
  conf.set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",8000,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app1=rm1.submitApp(200);
  RMAppAttempt attempt1=app1.getCurrentAppAttempt();
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  CapacityScheduler scheduler=(CapacityScheduler)rm1.getResourceScheduler();
  ContainerId amContainer=ContainerId.newInstance(am1.getApplicationAttemptId(),1);
  scheduler.killContainer(scheduler.getRMContainer(amContainer));
  am1.waitForState(RMAppAttemptState.FAILED);
  Assert.assertTrue(!attempt1.shouldCountTowardsMaxAttemptRetry());
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  ApplicationState appState=memStore.getState().getApplicationState().get(app1.getApplicationId());
  MockAM am2=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMAppAttempt attempt2=app1.getCurrentAppAttempt();
  Assert.assertTrue(((RMAppAttemptImpl)attempt2).mayBeLastAttempt());
  ContainerId amContainer2=ContainerId.newInstance(am2.getApplicationAttemptId(),1);
  scheduler.killContainer(scheduler.getRMContainer(amContainer2));
  am2.waitForState(RMAppAttemptState.FAILED);
  Assert.assertTrue(!attempt2.shouldCountTowardsMaxAttemptRetry());
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  MockAM am3=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMAppAttempt attempt3=app1.getCurrentAppAttempt();
  Assert.assertTrue(((RMAppAttemptImpl)attempt3).mayBeLastAttempt());
  ContainerStatus containerStatus=Records.newRecord(ContainerStatus.class);
  containerStatus.setContainerId(attempt3.getMasterContainer().getId());
  containerStatus.setDiagnostics("mimic NM disk_failure");
  containerStatus.setState(ContainerState.COMPLETE);
  containerStatus.setExitStatus(ContainerExitStatus.DISKS_FAILED);
  Map<ApplicationId,List<ContainerStatus>> conts=new HashMap<ApplicationId,List<ContainerStatus>>();
  conts.put(app1.getApplicationId(),Collections.singletonList(containerStatus));
  nm1.nodeHeartbeat(conts,true);
  am3.waitForState(RMAppAttemptState.FAILED);
  Assert.assertTrue(!attempt3.shouldCountTowardsMaxAttemptRetry());
  Assert.assertEquals(ContainerExitStatus.DISKS_FAILED,appState.getAttempt(am3.getApplicationAttemptId()).getAMContainerExitStatus());
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  MockAM am4=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMAppAttempt attempt4=app1.getCurrentAppAttempt();
  Assert.assertTrue(((RMAppAttemptImpl)attempt4).mayBeLastAttempt());
  MockNM nm2=new MockNM("127.0.0.1:2234",8000,rm1.getResourceTrackerService());
  nm2.registerNode();
  nm1.nodeHeartbeat(false);
  am4.waitForState(RMAppAttemptState.FAILED);
  Assert.assertTrue(!attempt4.shouldCountTowardsMaxAttemptRetry());
  Assert.assertEquals(ContainerExitStatus.ABORTED,appState.getAttempt(am4.getApplicationAttemptId()).getAMContainerExitStatus());
  nm2.nodeHeartbeat(true);
  MockAM am5=rm1.waitForNewAMToLaunchAndRegister(app1.getApplicationId(),5,nm2);
  RMAppAttempt attempt5=app1.getCurrentAppAttempt();
  Assert.assertTrue(((RMAppAttemptImpl)attempt5).mayBeLastAttempt());
  nm2.nodeHeartbeat(am5.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  am5.waitForState(RMAppAttemptState.FAILED);
  Assert.assertTrue(attempt5.shouldCountTowardsMaxAttemptRetry());
  rm1.waitForState(app1.getApplicationId(),RMAppState.FAILED);
  Assert.assertEquals(5,app1.getAppAttempts().size());
  rm1.stop();
}
