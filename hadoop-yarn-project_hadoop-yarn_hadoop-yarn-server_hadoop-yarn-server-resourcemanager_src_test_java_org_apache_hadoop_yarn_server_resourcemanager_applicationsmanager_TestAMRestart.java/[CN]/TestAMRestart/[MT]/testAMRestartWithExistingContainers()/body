{
  YarnConfiguration conf=new YarnConfiguration();
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,2);
  MockRM rm1=new MockRM(conf);
  rm1.start();
  RMApp app1=rm1.submitApp(200,"name","user",new HashMap<ApplicationAccessType,String>(),false,"default",-1,null,"MAPREDUCE",false,true);
  MockNM nm1=new MockNM("127.0.0.1:1234",10240,rm1.getResourceTrackerService());
  nm1.registerNode();
  MockNM nm2=new MockNM("127.0.0.1:2351",4089,rm1.getResourceTrackerService());
  nm2.registerNode();
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  int NUM_CONTAINERS=3;
  allocateContainers(nm1,am1,NUM_CONTAINERS);
  nm1.nodeHeartbeat(am1.getApplicationAttemptId(),2,ContainerState.RUNNING);
  ContainerId containerId2=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  rm1.waitForState(nm1,containerId2,RMContainerState.RUNNING);
  nm1.nodeHeartbeat(am1.getApplicationAttemptId(),3,ContainerState.RUNNING);
  ContainerId containerId3=ContainerId.newContainerId(am1.getApplicationAttemptId(),3);
  rm1.waitForState(nm1,containerId3,RMContainerState.RUNNING);
  ContainerId containerId4=ContainerId.newContainerId(am1.getApplicationAttemptId(),4);
  rm1.waitForState(nm1,containerId4,RMContainerState.ACQUIRED);
  am1.allocate("127.0.0.1",1024,1,new ArrayList<ContainerId>());
  nm1.nodeHeartbeat(true);
  ContainerId containerId5=ContainerId.newContainerId(am1.getApplicationAttemptId(),5);
  rm1.waitForState(nm1,containerId5,RMContainerState.ALLOCATED);
  am1.allocate("127.0.0.1",6000,1,new ArrayList<ContainerId>());
  ContainerId containerId6=ContainerId.newContainerId(am1.getApplicationAttemptId(),6);
  nm1.nodeHeartbeat(true);
  SchedulerApplicationAttempt schedulerAttempt=((AbstractYarnScheduler)rm1.getResourceScheduler()).getCurrentAttemptForContainer(containerId6);
  while (schedulerAttempt.getReservedContainers().isEmpty()) {
    System.out.println("Waiting for container " + containerId6 + " to be reserved.");
    nm1.nodeHeartbeat(true);
    Thread.sleep(200);
  }
  Assert.assertEquals(containerId6,schedulerAttempt.getReservedContainers().get(0).getContainerId());
  nm1.nodeHeartbeat(am1.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm1.waitForState(am1.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  Thread.sleep(3000);
  rm1.waitForState(nm1,containerId2,RMContainerState.RUNNING);
  Assert.assertNull(rm1.getResourceScheduler().getRMContainer(containerId4));
  Assert.assertNull(rm1.getResourceScheduler().getRMContainer(containerId5));
  rm1.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  ApplicationAttemptId newAttemptId=app1.getCurrentAppAttempt().getAppAttemptId();
  Assert.assertFalse(newAttemptId.equals(am1.getApplicationAttemptId()));
  MockAM am2=rm1.launchAM(app1,rm1,nm1);
  RegisterApplicationMasterResponse registerResponse=am2.registerAppAttempt();
  Assert.assertEquals(2,registerResponse.getContainersFromPreviousAttempts().size());
  boolean containerId2Exists=false, containerId3Exists=false;
  for (  Container container : registerResponse.getContainersFromPreviousAttempts()) {
    if (container.getId().equals(containerId2)) {
      containerId2Exists=true;
    }
    if (container.getId().equals(containerId3)) {
      containerId3Exists=true;
    }
  }
  Assert.assertTrue(containerId2Exists && containerId3Exists);
  rm1.waitForState(app1.getApplicationId(),RMAppState.RUNNING);
  nm1.nodeHeartbeat(am1.getApplicationAttemptId(),3,ContainerState.COMPLETE);
  RMAppAttempt newAttempt=app1.getRMAppAttempt(am2.getApplicationAttemptId());
  waitForContainersToFinish(4,newAttempt);
  boolean container3Exists=false, container4Exists=false, container5Exists=false, container6Exists=false;
  for (  ContainerStatus status : newAttempt.getJustFinishedContainers()) {
    if (status.getContainerId().equals(containerId3)) {
      container3Exists=true;
    }
    if (status.getContainerId().equals(containerId4)) {
      container4Exists=true;
    }
    if (status.getContainerId().equals(containerId5)) {
      container5Exists=true;
    }
    if (status.getContainerId().equals(containerId6)) {
      container6Exists=true;
    }
  }
  Assert.assertTrue(container3Exists && container4Exists && container5Exists&& container6Exists);
  rm1.waitForState(nm1,containerId2,RMContainerState.RUNNING);
  SchedulerApplicationAttempt schedulerNewAttempt=((AbstractYarnScheduler)rm1.getResourceScheduler()).getCurrentAttemptForContainer(containerId2);
  MockRM.finishAMAndVerifyAppState(app1,rm1,nm1,am2);
  Assert.assertFalse(schedulerNewAttempt.getLiveContainers().contains(containerId2));
  System.out.println("New attempt's just finished containers: " + newAttempt.getJustFinishedContainers());
  waitForContainersToFinish(5,newAttempt);
  rm1.stop();
}
