{
  this.streams=builder.streams;
  this.dataIn=builder.streams[0].getChannel();
  this.dataPos=builder.dataPos;
  this.checksumIn=builder.streams[1].getChannel();
  this.checksum=builder.header.getChecksum();
  this.verifyChecksum=builder.verifyChecksum && (this.checksum.getChecksumType().id != DataChecksum.CHECKSUM_NULL);
  this.mlocked=new AtomicBoolean(builder.mlocked);
  this.filename=builder.filename;
  this.datanodeID=builder.datanodeID;
  this.fisCache=builder.fisCache;
  this.block=builder.block;
  this.bytesPerChecksum=checksum.getBytesPerChecksum();
  this.checksumSize=checksum.getChecksumSize();
  this.maxAllocatedChunks=(bytesPerChecksum == 0) ? 0 : ((builder.bufferSize + bytesPerChecksum - 1) / bytesPerChecksum);
  int maxReadaheadChunks=(bytesPerChecksum == 0) ? 0 : ((Math.min(builder.bufferSize,builder.maxReadahead) + bytesPerChecksum - 1) / bytesPerChecksum);
  if (maxReadaheadChunks == 0) {
    this.zeroReadaheadRequested=true;
    maxReadaheadChunks=1;
  }
 else {
    this.zeroReadaheadRequested=false;
  }
  this.maxReadaheadLength=maxReadaheadChunks * bytesPerChecksum;
}
