{
  this.dataIn=dataIn;
  this.checksumIn=checksumIn;
  this.startOffset=Math.max(startOffset,0);
  this.filename=filename;
  this.datanodeID=datanodeID;
  this.block=block;
  checksumIn.getChannel().position(0);
  BlockMetadataHeader header=BlockMetadataHeader.readHeader(new DataInputStream(new BufferedInputStream(checksumIn,BlockMetadataHeader.getHeaderSize())));
  short version=header.getVersion();
  if (version != BlockMetadataHeader.VERSION) {
    throw new IOException("Wrong version (" + version + ") of the "+ "metadata file for "+ filename+ ".");
  }
  if (!verifyChecksum) {
    this.verifyChecksum=false;
  }
 else {
    this.verifyChecksum=!conf.getBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY,DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_DEFAULT);
  }
  long firstChunkOffset;
  if (this.verifyChecksum) {
    this.checksum=header.getChecksum();
    this.bytesPerChecksum=this.checksum.getBytesPerChecksum();
    this.checksumSize=this.checksum.getChecksumSize();
    firstChunkOffset=startOffset - (startOffset % checksum.getBytesPerChecksum());
    this.offsetFromChunkBoundary=(int)(startOffset - firstChunkOffset);
    int chunksPerChecksumRead=getSlowReadBufferNumChunks(conf,bytesPerChecksum);
    slowReadBuff=bufferPool.getBuffer(bytesPerChecksum * chunksPerChecksumRead);
    checksumBuff=bufferPool.getBuffer(checksumSize * chunksPerChecksumRead);
    slowReadBuff.flip();
    checksumBuff.flip();
    long checkSumOffset=(firstChunkOffset / bytesPerChecksum) * checksumSize;
    IOUtils.skipFully(checksumIn,checkSumOffset);
  }
 else {
    firstChunkOffset=startOffset;
    this.checksum=null;
    this.bytesPerChecksum=0;
    this.checksumSize=0;
    this.offsetFromChunkBoundary=0;
  }
  boolean success=false;
  try {
    this.dataIn.getChannel().position(firstChunkOffset);
    success=true;
  }
  finally {
    if (!success) {
      if (slowReadBuff != null)       bufferPool.returnBuffer(slowReadBuff);
      if (checksumBuff != null)       bufferPool.returnBuffer(checksumBuff);
    }
  }
}
