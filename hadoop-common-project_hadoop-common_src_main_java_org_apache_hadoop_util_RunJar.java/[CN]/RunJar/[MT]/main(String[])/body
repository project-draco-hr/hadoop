{
  String usage="RunJar jarFile [mainClass] args...";
  if (args.length < 1) {
    System.err.println(usage);
    System.exit(-1);
  }
  int firstArg=0;
  String fileName=args[firstArg++];
  File file=new File(fileName);
  String mainClassName=null;
  JarFile jarFile;
  try {
    jarFile=new JarFile(fileName);
  }
 catch (  IOException io) {
    throw new IOException("Error opening job jar: " + fileName).initCause(io);
  }
  Manifest manifest=jarFile.getManifest();
  if (manifest != null) {
    mainClassName=manifest.getMainAttributes().getValue("Main-Class");
  }
  jarFile.close();
  if (mainClassName == null) {
    if (args.length < 2) {
      System.err.println(usage);
      System.exit(-1);
    }
    mainClassName=args[firstArg++];
  }
  mainClassName=mainClassName.replaceAll("/",".");
  File tmpDir=new File(new Configuration().get("hadoop.tmp.dir"));
  ensureDirectory(tmpDir);
  final File workDir;
  try {
    workDir=File.createTempFile("hadoop-unjar","",tmpDir);
  }
 catch (  IOException ioe) {
    System.err.println("Error creating temp dir in hadoop.tmp.dir " + tmpDir + " due to "+ ioe.getMessage());
    System.exit(-1);
    return;
  }
  if (!workDir.delete()) {
    System.err.println("Delete failed for " + workDir);
    System.exit(-1);
  }
  ensureDirectory(workDir);
  Runtime.getRuntime().addShutdownHook(new Thread(){
    public void run(){
      FileUtil.fullyDelete(workDir);
    }
  }
);
  unJar(file,workDir);
  ArrayList<URL> classPath=new ArrayList<URL>();
  classPath.add(new File(workDir + "/").toURI().toURL());
  classPath.add(file.toURI().toURL());
  classPath.add(new File(workDir,"classes/").toURI().toURL());
  File[] libs=new File(workDir,"lib").listFiles();
  if (libs != null) {
    for (int i=0; i < libs.length; i++) {
      classPath.add(libs[i].toURI().toURL());
    }
  }
  ClassLoader loader=new URLClassLoader(classPath.toArray(new URL[0]));
  Thread.currentThread().setContextClassLoader(loader);
  Class<?> mainClass=Class.forName(mainClassName,true,loader);
  Method main=mainClass.getMethod("main",new Class[]{Array.newInstance(String.class,0).getClass()});
  String[] newArgs=Arrays.asList(args).subList(firstArg,args.length).toArray(new String[0]);
  try {
    main.invoke(null,new Object[]{newArgs});
  }
 catch (  InvocationTargetException e) {
    throw e.getTargetException();
  }
}
