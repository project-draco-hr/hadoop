{
  String usage="RunJar jarFile [mainClass] args...";
  if (args.length < 1) {
    System.err.println(usage);
    System.exit(-1);
  }
  int firstArg=0;
  String fileName=args[firstArg++];
  File file=new File(fileName);
  if (!file.exists() || !file.isFile()) {
    System.err.println("JAR does not exist or is not a normal file: " + file.getCanonicalPath());
    System.exit(-1);
  }
  String mainClassName=null;
  JarFile jarFile;
  try {
    jarFile=new JarFile(fileName);
  }
 catch (  IOException io) {
    throw new IOException("Error opening job jar: " + fileName).initCause(io);
  }
  Manifest manifest=jarFile.getManifest();
  if (manifest != null) {
    mainClassName=manifest.getMainAttributes().getValue("Main-Class");
  }
  jarFile.close();
  if (mainClassName == null) {
    if (args.length < 2) {
      System.err.println(usage);
      System.exit(-1);
    }
    mainClassName=args[firstArg++];
  }
  mainClassName=mainClassName.replaceAll("/",".");
  File tmpDir=new File(System.getProperty("java.io.tmpdir"));
  ensureDirectory(tmpDir);
  final File workDir;
  try {
    workDir=File.createTempFile("hadoop-unjar","",tmpDir);
  }
 catch (  IOException ioe) {
    System.err.println("Error creating temp dir in java.io.tmpdir " + tmpDir + " due to "+ ioe.getMessage());
    System.exit(-1);
    return;
  }
  if (!workDir.delete()) {
    System.err.println("Delete failed for " + workDir);
    System.exit(-1);
  }
  ensureDirectory(workDir);
  ShutdownHookManager.get().addShutdownHook(new Runnable(){
    @Override public void run(){
      FileUtil.fullyDelete(workDir);
    }
  }
,SHUTDOWN_HOOK_PRIORITY);
  unJar(file,workDir);
  ClassLoader loader=createClassLoader(file,workDir);
  Thread.currentThread().setContextClassLoader(loader);
  Class<?> mainClass=Class.forName(mainClassName,true,loader);
  Method main=mainClass.getMethod("main",String[].class);
  List<String> newArgsSubList=Arrays.asList(args).subList(firstArg,args.length);
  String[] newArgs=newArgsSubList.toArray(new String[newArgsSubList.size()]);
  try {
    main.invoke(null,new Object[]{newArgs});
  }
 catch (  InvocationTargetException e) {
    throw e.getTargetException();
  }
}
