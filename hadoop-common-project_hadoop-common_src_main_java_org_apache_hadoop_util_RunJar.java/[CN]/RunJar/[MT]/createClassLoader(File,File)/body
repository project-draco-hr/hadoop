{
  ClassLoader loader;
  if (useClientClassLoader()) {
    StringBuilder sb=new StringBuilder();
    sb.append(workDir).append("/").append(File.pathSeparator).append(file).append(File.pathSeparator).append(workDir).append("/classes/").append(File.pathSeparator).append(workDir).append("/lib/*");
    String hadoopClasspath=getHadoopClasspath();
    if (hadoopClasspath != null && !hadoopClasspath.isEmpty()) {
      sb.append(File.pathSeparator).append(hadoopClasspath);
    }
    String clientClasspath=sb.toString();
    String systemClasses=getSystemClasses();
    List<String> systemClassesList=systemClasses == null ? null : Arrays.asList(StringUtils.getTrimmedStrings(systemClasses));
    loader=new ApplicationClassLoader(clientClasspath,getClass().getClassLoader(),systemClassesList);
  }
 else {
    List<URL> classPath=new ArrayList<>();
    classPath.add(new File(workDir + "/").toURI().toURL());
    classPath.add(file.toURI().toURL());
    classPath.add(new File(workDir,"classes/").toURI().toURL());
    File[] libs=new File(workDir,"lib").listFiles();
    if (libs != null) {
      for (      File lib : libs) {
        classPath.add(lib.toURI().toURL());
      }
    }
    loader=new URLClassLoader(classPath.toArray(new URL[classPath.size()]));
  }
  return loader;
}
