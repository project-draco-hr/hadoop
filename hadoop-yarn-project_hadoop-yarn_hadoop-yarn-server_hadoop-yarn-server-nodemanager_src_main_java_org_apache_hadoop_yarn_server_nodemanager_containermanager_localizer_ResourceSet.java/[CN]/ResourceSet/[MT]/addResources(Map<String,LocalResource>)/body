{
  if (localResourceMap == null || localResourceMap.isEmpty()) {
    return null;
  }
  Map<LocalResourceRequest,Set<String>> allResources=new HashMap<>();
  List<LocalResourceRequest> publicList=new ArrayList<>();
  List<LocalResourceRequest> privateList=new ArrayList<>();
  List<LocalResourceRequest> appList=new ArrayList<>();
  for (  Map.Entry<String,LocalResource> rsrc : localResourceMap.entrySet()) {
    LocalResource resource=rsrc.getValue();
    LocalResourceRequest req=new LocalResourceRequest(rsrc.getValue());
    allResources.putIfAbsent(req,new HashSet<>());
    allResources.get(req).add(rsrc.getKey());
    storeSharedCacheUploadPolicy(req,resource.getShouldBeUploadedToSharedCache());
switch (resource.getVisibility()) {
case PUBLIC:
      publicList.add(req);
    break;
case PRIVATE:
  privateList.add(req);
break;
case APPLICATION:
appList.add(req);
break;
default :
break;
}
}
Map<LocalResourceVisibility,Collection<LocalResourceRequest>> req=new LinkedHashMap<>();
if (!publicList.isEmpty()) {
publicRsrcs.addAll(publicList);
req.put(LocalResourceVisibility.PUBLIC,publicList);
}
if (!privateList.isEmpty()) {
privateRsrcs.addAll(privateList);
req.put(LocalResourceVisibility.PRIVATE,privateList);
}
if (!appList.isEmpty()) {
appRsrcs.addAll(appList);
req.put(LocalResourceVisibility.APPLICATION,appList);
}
if (!allResources.isEmpty()) {
this.pendingResources.putAll(allResources);
}
return req;
}
