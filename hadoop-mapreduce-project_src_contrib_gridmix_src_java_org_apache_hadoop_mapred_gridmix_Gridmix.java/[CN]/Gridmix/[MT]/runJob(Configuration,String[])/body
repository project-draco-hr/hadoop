{
  if (argv.length < 2) {
    LOG.error("Too few arguments to Gridmix.\n");
    printUsage(System.err);
    return ARGS_ERROR;
  }
  long genbytes=-1L;
  String traceIn=null;
  Path ioPath=null;
  URI userRsrc=null;
  try {
    userResolver=ReflectionUtils.newInstance(conf.getClass(GRIDMIX_USR_RSV,SubmitterUserResolver.class,UserResolver.class),conf);
    for (int i=0; i < argv.length - 2; ++i) {
      if ("-generate".equals(argv[i])) {
        genbytes=StringUtils.TraditionalBinaryPrefix.string2long(argv[++i]);
        if (genbytes <= 0) {
          LOG.error("size of input data to be generated specified using " + "-generate option should be nonnegative.\n");
          return ARGS_ERROR;
        }
      }
 else       if ("-users".equals(argv[i])) {
        userRsrc=new URI(argv[++i]);
      }
 else {
        LOG.error("Unknown option " + argv[i] + " specified.\n");
        printUsage(System.err);
        return ARGS_ERROR;
      }
    }
    if (userResolver.needsTargetUsersList()) {
      if (userRsrc != null) {
        if (!userResolver.setTargetUsers(userRsrc,conf)) {
          LOG.warn("Ignoring the user resource '" + userRsrc + "'.");
        }
      }
 else {
        LOG.error(userResolver.getClass() + " needs target user list. Use -users option.\n");
        printUsage(System.err);
        return ARGS_ERROR;
      }
    }
 else     if (userRsrc != null) {
      LOG.warn("Ignoring the user resource '" + userRsrc + "'.");
    }
    ioPath=new Path(argv[argv.length - 2]);
    traceIn=argv[argv.length - 1];
  }
 catch (  Exception e) {
    LOG.error(e.toString() + "\n");
    if (LOG.isDebugEnabled()) {
      e.printStackTrace();
    }
    printUsage(System.err);
    return ARGS_ERROR;
  }
  final FileSystem inputFs=ioPath.getFileSystem(conf);
  ioPath=ioPath.makeQualified(inputFs);
  boolean succeeded=false;
  try {
    succeeded=FileSystem.mkdirs(inputFs,ioPath,new FsPermission((short)0777));
  }
 catch (  IOException e) {
  }
 finally {
    if (!succeeded) {
      LOG.error("Failed creation of <ioPath> directory " + ioPath + "\n");
      return STARTUP_FAILED_ERROR;
    }
  }
  return start(conf,traceIn,ioPath,genbytes,userResolver);
}
