{
  actual=new byte[FILE_SIZE];
  stm.seek(0);
  int offset;
  for (offset=0; offset < BLOCK_SIZE + BYTES_PER_SUM; offset+=BYTES_PER_SUM) {
    assertEquals(stm.getPos(),offset);
    stm.readFully(actual,offset,BYTES_PER_SUM);
  }
  stm.readFully(actual,offset,FILE_SIZE - BLOCK_SIZE - BYTES_PER_SUM);
  assertEquals(stm.getPos(),FILE_SIZE);
  checkAndEraseData(actual,0,expected,"Read Sanity Test");
  stm.seek(0L);
  assertEquals(stm.getPos(),0L);
  stm.readFully(actual,0,HALF_CHUNK_SIZE);
  assertEquals(stm.getPos(),HALF_CHUNK_SIZE);
  stm.readFully(actual,HALF_CHUNK_SIZE,BLOCK_SIZE - HALF_CHUNK_SIZE);
  assertEquals(stm.getPos(),BLOCK_SIZE);
  stm.readFully(actual,BLOCK_SIZE,BYTES_PER_SUM + HALF_CHUNK_SIZE);
  assertEquals(stm.getPos(),BLOCK_SIZE + BYTES_PER_SUM + HALF_CHUNK_SIZE);
  stm.readFully(actual,2 * BLOCK_SIZE - HALF_CHUNK_SIZE,FILE_SIZE - (2 * BLOCK_SIZE - HALF_CHUNK_SIZE));
  assertEquals(stm.getPos(),FILE_SIZE);
  checkAndEraseData(actual,0,expected,"Read Sanity Test");
  stm.seek(0L);
  stm.readFully(actual,0,BYTES_PER_SUM + HALF_CHUNK_SIZE);
  assertEquals(stm.getPos(),BYTES_PER_SUM + HALF_CHUNK_SIZE);
  stm.readFully(actual,BYTES_PER_SUM + HALF_CHUNK_SIZE,BYTES_PER_SUM);
  assertEquals(stm.getPos(),BLOCK_SIZE + HALF_CHUNK_SIZE);
  stm.readFully(actual,BLOCK_SIZE + HALF_CHUNK_SIZE,FILE_SIZE - BLOCK_SIZE - HALF_CHUNK_SIZE);
  assertEquals(stm.getPos(),FILE_SIZE);
  checkAndEraseData(actual,0,expected,"Read Sanity Test");
}
