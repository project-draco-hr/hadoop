{
  FileSystem fs=FileSystem.get(createJobConf());
  Path rootDataDir=new Path(System.getProperty("test.build.data","."),"TestLocalJobControlData");
  Path indir=new Path(rootDataDir,"indir");
  Path outdir_1=new Path(rootDataDir,"outdir_1");
  Path outdir_2=new Path(rootDataDir,"outdir_2");
  Path outdir_3=new Path(rootDataDir,"outdir_3");
  Path outdir_4=new Path(rootDataDir,"outdir_4");
  JobControlTestUtils.cleanData(fs,indir);
  JobControlTestUtils.generateData(fs,indir);
  JobControlTestUtils.cleanData(fs,outdir_1);
  JobControlTestUtils.cleanData(fs,outdir_2);
  JobControlTestUtils.cleanData(fs,outdir_3);
  JobControlTestUtils.cleanData(fs,outdir_4);
  ArrayList<Job> dependingJobs=null;
  ArrayList<Path> inPaths_1=new ArrayList<Path>();
  inPaths_1.add(indir);
  JobConf jobConf_1=JobControlTestUtils.createCopyJob(inPaths_1,outdir_1);
  Job job_1=new Job(jobConf_1,dependingJobs);
  ArrayList<Path> inPaths_2=new ArrayList<Path>();
  inPaths_2.add(indir);
  JobConf jobConf_2=JobControlTestUtils.createCopyJob(inPaths_2,outdir_2);
  Job job_2=new Job(jobConf_2,dependingJobs);
  ArrayList<Path> inPaths_3=new ArrayList<Path>();
  inPaths_3.add(outdir_1);
  inPaths_3.add(outdir_2);
  JobConf jobConf_3=JobControlTestUtils.createCopyJob(inPaths_3,outdir_3);
  dependingJobs=new ArrayList<Job>();
  dependingJobs.add(job_1);
  dependingJobs.add(job_2);
  Job job_3=new Job(jobConf_3,dependingJobs);
  ArrayList<Path> inPaths_4=new ArrayList<Path>();
  inPaths_4.add(outdir_3);
  JobConf jobConf_4=JobControlTestUtils.createCopyJob(inPaths_4,outdir_4);
  dependingJobs=new ArrayList<Job>();
  dependingJobs.add(job_3);
  Job job_4=new Job(jobConf_4,dependingJobs);
  JobControl theControl=new JobControl("Test");
  theControl.addJob(job_1);
  theControl.addJob(job_2);
  theControl.addJob(job_3);
  theControl.addJob(job_4);
  Thread theController=new Thread(theControl);
  theController.start();
  while (!theControl.allFinished()) {
    LOG.debug("Jobs in waiting state: " + theControl.getWaitingJobs().size());
    LOG.debug("Jobs in ready state: " + theControl.getReadyJobs().size());
    LOG.debug("Jobs in running state: " + theControl.getRunningJobs().size());
    LOG.debug("Jobs in success state: " + theControl.getSuccessfulJobs().size());
    LOG.debug("Jobs in failed state: " + theControl.getFailedJobs().size());
    LOG.debug("\n");
    try {
      Thread.sleep(5000);
    }
 catch (    Exception e) {
    }
  }
  assertEquals("Some jobs failed",0,theControl.getFailedJobs().size());
  theControl.stop();
}
