{
  raidConf=new Configuration(conf);
  raidConf.set(RaidNode.RAID_LOCATION_KEY,RAID_DIR);
  raidConf.setInt("raid.blockfix.interval",1000);
  raidConf.setLong("har.block.size",BLOCK_SIZE * 3);
  conf.set("raid.classname","org.apache.hadoop.raid.LocalRaidNode");
  rnode=RaidNode.createRaidNode(null,raidConf);
  for (  Path filePath : filePaths) {
    long waitStart=System.currentTimeMillis();
    boolean raided=false;
    Path parityFilePath=new Path(RAID_DIR,filePath.toString().substring(1));
    while (!raided) {
      try {
        FileStatus[] listPaths=dfs.listStatus(raidPath);
        if (listPaths != null) {
          if (doHar) {
            for (            FileStatus f : listPaths) {
              if (f.getPath().toString().endsWith(".har")) {
                final Path indexPath=new Path(f.getPath(),"_index");
                final FileStatus indexFileStatus=dfs.getFileStatus(indexPath);
                final HarIndex harIndex=new HarIndex(dfs.open(indexPath),indexFileStatus.getLen());
                final HarIndex.IndexEntry indexEntry=harIndex.findEntryByFileName(parityFilePath.toString());
                if (indexEntry != null) {
                  LOG.info("raid file " + parityFilePath.toString() + " found in Har archive: "+ f.getPath().toString()+ " ts="+ indexEntry.mtime);
                  raided=true;
                  break;
                }
              }
            }
          }
 else {
            for (            FileStatus f : listPaths) {
              Path found=new Path(f.getPath().toUri().getPath());
              if (parityFilePath.equals(found)) {
                LOG.info("raid file found: " + f.getPath().toString());
                raided=true;
                break;
              }
            }
          }
        }
      }
 catch (      FileNotFoundException ignore) {
      }
      if (!raided) {
        if (System.currentTimeMillis() > waitStart + 40000L) {
          LOG.error("parity file not created after 40s");
          throw new IOException("parity file not HARed after 40s");
        }
 else {
          try {
            Thread.sleep(1000);
          }
 catch (          InterruptedException ignore) {
          }
        }
      }
    }
  }
  rnode.stop();
  rnode.join();
  rnode=null;
  LOG.info("test file raided");
}
