{
  final Path fileName=new Path("/test.txt");
  final int fileLen=1;
  DFSTestUtil.createFile(fs,fileName,1,(short)1,1L);
  DFSTestUtil.waitReplication(fs,fileName,(short)1);
  LocatedBlocks blocks=NameNodeAdapter.getBlockLocations(cluster.getNameNode(),fileName.toString(),0,(long)fileLen);
  assertEquals("Should only find 1 block",blocks.locatedBlockCount(),1);
  LocatedBlock block=blocks.get(0);
  cluster.startDataNodes(conf,1,true,null,null);
  cluster.waitActive();
  final int sndNode=1;
  DataNode datanode=cluster.getDataNodes().get(sndNode);
  FsDatasetTestUtils utils=cluster.getFsDatasetTestUtils(datanode);
  InetSocketAddress target=datanode.getXferAddress();
  Socket s=new Socket(target.getAddress(),target.getPort());
  DataOutputStream out=new DataOutputStream(s.getOutputStream());
  DataChecksum checksum=DataChecksum.newDataChecksum(DataChecksum.Type.CRC32,512);
  new Sender(out).writeBlock(block.getBlock(),StorageType.DEFAULT,BlockTokenSecretManager.DUMMY_TOKEN,"",new DatanodeInfo[0],new StorageType[0],null,BlockConstructionStage.PIPELINE_SETUP_CREATE,1,0L,0L,0L,checksum,CachingStrategy.newDefaultStrategy(),false,false,null);
  out.flush();
  out.close();
  String bpid=cluster.getNamesystem().getBlockPoolId();
  while (utils.getStoredReplicas(bpid).hasNext()) {
    Thread.sleep(100);
  }
  fs.setReplication(fileName,(short)2);
  DFSTestUtil.waitReplication(fs,fileName,(short)1);
  fs.delete(fileName,false);
}
