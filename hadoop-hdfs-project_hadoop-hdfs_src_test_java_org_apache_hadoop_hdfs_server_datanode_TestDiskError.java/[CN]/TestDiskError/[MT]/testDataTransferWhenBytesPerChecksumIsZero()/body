{
  DataNode dn0=cluster.getDataNodes().get(0);
  BlockScanner mockScanner=Mockito.mock(BlockScanner.class);
  Mockito.when(mockScanner.isEnabled()).thenReturn(false);
  dn0.setBlockScanner(mockScanner);
  Path filePath=new Path("test.dat");
  FSDataOutputStream out=fs.create(filePath,(short)1);
  out.write(1);
  out.hflush();
  out.close();
  ExtendedBlock block=DFSTestUtil.getFirstBlock(fs,filePath);
  File metadataFile=cluster.getBlockMetadataFile(0,block);
  RandomAccessFile raFile=new RandomAccessFile(metadataFile,"rw");
  raFile.seek(2);
  raFile.writeByte(0);
  raFile.writeInt(0);
  raFile.close();
  String datanodeId0=dn0.getDatanodeUuid();
  LocatedBlock lb=DFSTestUtil.getAllBlocks(fs,filePath).get(0);
  String storageId=lb.getStorageIDs()[0];
  cluster.startDataNodes(conf,1,true,null,null);
  DataNode dn1=null;
  for (int i=0; i < cluster.getDataNodes().size(); i++) {
    if (!cluster.getDataNodes().get(i).equals(datanodeId0)) {
      dn1=cluster.getDataNodes().get(i);
      break;
    }
  }
  DatanodeDescriptor dnd1=NameNodeAdapter.getDatanode(cluster.getNamesystem(),dn1.getDatanodeId());
  dn0.transferBlock(block,new DatanodeInfo[]{dnd1},new StorageType[]{StorageType.DISK});
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  Mockito.verify(mockScanner).markSuspectBlock(Mockito.eq(storageId),Mockito.eq(block));
}
