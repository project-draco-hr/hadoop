{
  initDirs(conf,user,appId,lfs,localDirs);
  final Credentials creds=new Credentials();
  DataInputStream credFile=null;
  try {
    Path tokenPath=new Path(String.format(TOKEN_FILE_NAME_FMT,localizerId));
    credFile=lfs.open(tokenPath);
    creds.readTokenStorageStream(credFile);
    lfs.delete(tokenPath,false);
  }
  finally {
    if (credFile != null) {
      credFile.close();
    }
  }
  UserGroupInformation remoteUser=UserGroupInformation.createRemoteUser(user);
  remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));
  final LocalizationProtocol nodeManager=remoteUser.doAs(new PrivilegedAction<LocalizationProtocol>(){
    @Override public LocalizationProtocol run(){
      return getProxy(nmAddr);
    }
  }
);
  UserGroupInformation ugi=UserGroupInformation.createRemoteUser(user);
  for (  Token<? extends TokenIdentifier> token : creds.getAllTokens()) {
    ugi.addToken(token);
  }
  ExecutorService exec=null;
  try {
    exec=createDownloadThreadPool();
    CompletionService<Path> ecs=createCompletionService(exec);
    localizeFiles(nodeManager,ecs,ugi);
    return;
  }
 catch (  Throwable e) {
    throw new IOException(e);
  }
 finally {
    try {
      if (exec != null) {
        exec.shutdownNow();
      }
      LocalDirAllocator.removeContext(appCacheDirContextName);
    }
  finally {
      closeFileSystems(ugi);
    }
  }
}
