{
  if (args.length < 4) {
    usage();
  }
  Path bigMapInput=null;
  Path outputPath=null;
  boolean createInput=false;
  long fileSizeInMB=3 * 1024;
  for (int i=0; i < args.length; ++i) {
    if ("-input".equals(args[i])) {
      bigMapInput=new Path(args[++i]);
    }
 else     if ("-output".equals(args[i])) {
      outputPath=new Path(args[++i]);
    }
 else     if ("-create".equals(args[i])) {
      createInput=true;
      fileSizeInMB=Long.parseLong(args[++i]);
    }
 else {
      usage();
    }
  }
  FileSystem fs=FileSystem.get(getConf());
  JobConf jobConf=new JobConf(getConf(),BigMapOutput.class);
  jobConf.setJobName("BigMapOutput");
  jobConf.setInputFormat(NonSplitableSequenceFileInputFormat.class);
  jobConf.setOutputFormat(SequenceFileOutputFormat.class);
  FileInputFormat.setInputPaths(jobConf,bigMapInput);
  if (fs.exists(outputPath)) {
    fs.delete(outputPath,true);
  }
  FileOutputFormat.setOutputPath(jobConf,outputPath);
  jobConf.setMapperClass(IdentityMapper.class);
  jobConf.setReducerClass(IdentityReducer.class);
  jobConf.setOutputKeyClass(BytesWritable.class);
  jobConf.setOutputValueClass(BytesWritable.class);
  if (createInput) {
    createBigMapInputFile(jobConf,fs,bigMapInput,fileSizeInMB);
  }
  Date startTime=new Date();
  System.out.println("Job started: " + startTime);
  JobClient.runJob(jobConf);
  Date end_time=new Date();
  System.out.println("Job ended: " + end_time);
  return 0;
}
