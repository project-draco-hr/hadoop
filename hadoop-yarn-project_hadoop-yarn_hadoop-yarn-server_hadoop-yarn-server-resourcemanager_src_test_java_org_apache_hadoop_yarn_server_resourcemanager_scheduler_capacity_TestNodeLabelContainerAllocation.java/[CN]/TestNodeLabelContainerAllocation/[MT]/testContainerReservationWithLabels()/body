{
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y","z"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x"),NodeId.newInstance("h2",0),toSet("y"),NodeId.newInstance("h3",0),toSet("x")));
  MockRM rm1=new MockRM(TestUtils.getConfigurationWithDefaultQueueLabels(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",8 * GB);
  rm1.registerNode("h2:1234",8 * GB);
  rm1.registerNode("h3:1234",8 * GB);
  ContainerId containerId;
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"a1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  am1.allocate("*",4 * GB,2,new ArrayList<ContainerId>());
  containerId=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  LeafQueue leafQueue=(LeafQueue)cs.getQueue("a1");
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  checkTaskContainersHost(am1.getApplicationAttemptId(),containerId,rm1,"h1");
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  Assert.assertEquals(2,schedulerApp1.getLiveContainers().size());
  Assert.assertTrue(schedulerApp1.getReservedContainers().size() > 0);
  Assert.assertEquals(9 * GB,cs.getRootQueue().getQueueResourceUsage().getUsed("x").getMemory());
  Assert.assertEquals(4 * GB,cs.getRootQueue().getQueueResourceUsage().getReserved("x").getMemory());
  Assert.assertEquals(4 * GB,leafQueue.getQueueResourceUsage().getReserved("x").getMemory());
  am1.allocate("*",4 * GB,0,new ArrayList<ContainerId>());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  Assert.assertEquals(5 * GB,cs.getRootQueue().getQueueResourceUsage().getUsed("x").getMemory());
  Assert.assertEquals(0,cs.getRootQueue().getQueueResourceUsage().getReserved("x").getMemory());
  Assert.assertEquals(0,leafQueue.getQueueResourceUsage().getReserved("x").getMemory());
  rm1.close();
}
