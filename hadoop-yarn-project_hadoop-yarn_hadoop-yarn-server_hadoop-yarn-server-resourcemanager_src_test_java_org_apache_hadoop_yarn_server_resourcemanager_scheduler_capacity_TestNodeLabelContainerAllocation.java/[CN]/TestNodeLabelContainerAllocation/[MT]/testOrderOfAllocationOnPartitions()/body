{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration(this.conf);
  csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"a","b","c","d"});
  csConf.setCapacityByLabel(CapacitySchedulerConfiguration.ROOT,"x",100);
  final String A=CapacitySchedulerConfiguration.ROOT + ".a";
  csConf.setCapacity(A,25);
  csConf.setAccessibleNodeLabels(A,toSet("x"));
  csConf.setCapacityByLabel(A,"x",30);
  final String B=CapacitySchedulerConfiguration.ROOT + ".b";
  csConf.setCapacity(B,25);
  csConf.setAccessibleNodeLabels(B,toSet("x"));
  csConf.setCapacityByLabel(B,"x",70);
  final String C=CapacitySchedulerConfiguration.ROOT + ".c";
  csConf.setAccessibleNodeLabels(C,Collections.<String>emptySet());
  csConf.setCapacity(C,25);
  final String D=CapacitySchedulerConfiguration.ROOT + ".d";
  csConf.setAccessibleNodeLabels(D,Collections.<String>emptySet());
  csConf.setCapacity(D,25);
  mgr.addToCluserNodeLabels(ImmutableSet.of(NodeLabel.newInstance("x",false)));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  MockRM rm=new MockRM(csConf){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.getRMContext().setNodeLabelManager(mgr);
  rm.start();
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  MockNM nm1=rm.registerNode("h1:1234",10 * GB);
  MockNM nm2=rm.registerNode("h2:1234",10 * GB);
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"a");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm2);
  RMApp app2=rm.submitApp(1 * GB,"app","user",null,"b");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm,nm2);
  RMApp app3=rm.submitApp(1 * GB,"app","user",null,"c");
  MockAM am3=MockRM.launchAndRegisterAM(app3,rm,nm2);
  RMApp app4=rm.submitApp(1 * GB,"app","user",null,"d");
  MockAM am4=MockRM.launchAndRegisterAM(app4,rm,nm2);
  am1.allocate("*",1 * GB,1,new ArrayList<ContainerId>(),"x");
  am2.allocate("*",1 * GB,1,new ArrayList<ContainerId>(),"x");
  doNMHeartbeat(rm,nm1.getNodeId(),1);
  checkNumOfContainersInAnAppOnGivenNode(1,nm1.getNodeId(),cs.getApplicationAttempt(am2.getApplicationAttemptId()));
  am2.allocate("*",1 * GB,1,new ArrayList<ContainerId>(),"x");
  doNMHeartbeat(rm,nm1.getNodeId(),1);
  checkNumOfContainersInAnAppOnGivenNode(1,nm1.getNodeId(),cs.getApplicationAttempt(am1.getApplicationAttemptId()));
  am1.allocate("*",1 * GB,1,new ArrayList<ContainerId>(),"");
  am2.allocate("*",1 * GB,1,new ArrayList<ContainerId>(),"");
  doNMHeartbeat(rm,nm1.getNodeId(),2);
  checkNumOfContainersInAnAppOnGivenNode(2,nm1.getNodeId(),cs.getApplicationAttempt(am2.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(1,nm1.getNodeId(),cs.getApplicationAttempt(am1.getApplicationAttemptId()));
  doNMHeartbeat(rm,nm1.getNodeId(),2);
  checkNumOfContainersInAnAppOnGivenNode(2,nm1.getNodeId(),cs.getApplicationAttempt(am2.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(2,nm1.getNodeId(),cs.getApplicationAttempt(am1.getApplicationAttemptId()));
  am2.allocate("*",1 * GB,1,new ArrayList<ContainerId>(),"");
  am3.allocate("*",1 * GB,2,new ArrayList<ContainerId>(),"");
  am4.allocate("*",1 * GB,2,new ArrayList<ContainerId>(),"");
  doNMHeartbeat(rm,nm1.getNodeId(),2);
  checkNumOfContainersInAnAppOnGivenNode(2,nm1.getNodeId(),cs.getApplicationAttempt(am1.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(3,nm1.getNodeId(),cs.getApplicationAttempt(am2.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(0,nm1.getNodeId(),cs.getApplicationAttempt(am3.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(0,nm1.getNodeId(),cs.getApplicationAttempt(am4.getApplicationAttemptId()));
  doNMHeartbeat(rm,nm1.getNodeId(),1);
  checkNumOfContainersInAnAppOnGivenNode(2,nm1.getNodeId(),cs.getApplicationAttempt(am1.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(3,nm1.getNodeId(),cs.getApplicationAttempt(am2.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(1,nm1.getNodeId(),cs.getApplicationAttempt(am3.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(0,nm1.getNodeId(),cs.getApplicationAttempt(am4.getApplicationAttemptId()));
  doNMHeartbeat(rm,nm1.getNodeId(),1);
  checkNumOfContainersInAnAppOnGivenNode(2,nm1.getNodeId(),cs.getApplicationAttempt(am1.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(3,nm1.getNodeId(),cs.getApplicationAttempt(am2.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(1,nm1.getNodeId(),cs.getApplicationAttempt(am3.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(1,nm1.getNodeId(),cs.getApplicationAttempt(am4.getApplicationAttemptId()));
  doNMHeartbeat(rm,nm1.getNodeId(),1);
  checkNumOfContainersInAnAppOnGivenNode(2,nm1.getNodeId(),cs.getApplicationAttempt(am1.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(3,nm1.getNodeId(),cs.getApplicationAttempt(am2.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(2,nm1.getNodeId(),cs.getApplicationAttempt(am3.getApplicationAttemptId()));
  checkNumOfContainersInAnAppOnGivenNode(1,nm1.getNodeId(),cs.getApplicationAttempt(am4.getApplicationAttemptId()));
}
