{
  mgr.addToCluserNodeLabels(ImmutableSet.of(NodeLabel.newInstance("x"),NodeLabel.newInstance("y",false)));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("y")));
  MockRM rm1=new MockRM(TestUtils.getConfigurationWithQueueLabels(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",8 * GB);
  MockNM nm2=rm1.registerNode("h2:1234",100 * GB);
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"b1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm2);
  RMApp app2=rm1.submitApp(1 * GB,"app","user",null,"b1");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm2);
  am1.allocate("*",1 * GB,8,new ArrayList<ContainerId>());
  am2.allocate("*",1 * GB,8,new ArrayList<ContainerId>(),"y");
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  RMNode rmNode2=rm1.getRMContext().getRMNodes().get(nm2.getNodeId());
  for (int i=0; i < 50; i++) {
    cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
    cs.handle(new NodeUpdateSchedulerEvent(rmNode2));
  }
  FiCaSchedulerApp schedulerApp1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  FiCaSchedulerApp schedulerApp2=cs.getApplicationAttempt(am2.getApplicationAttemptId());
  checkNumOfContainersInAnAppOnGivenNode(0,nm1.getNodeId(),schedulerApp1);
  checkNumOfContainersInAnAppOnGivenNode(9,nm2.getNodeId(),schedulerApp1);
  checkNumOfContainersInAnAppOnGivenNode(8,nm1.getNodeId(),schedulerApp2);
  checkNumOfContainersInAnAppOnGivenNode(1,nm2.getNodeId(),schedulerApp2);
  rm1.close();
}
