{
  mgr.addToCluserNodeLabels(ImmutableSet.of("x","y"));
  mgr.updateNodeLabels(Arrays.asList(NodeLabel.newInstance("x",false)));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  MockRM rm1=new MockRM(TestUtils.getConfigurationWithQueueLabels(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",8 * GB);
  MockNM nm2=rm1.registerNode("h2:1234",100 * GB);
  ContainerId nextContainerId;
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"b1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm2);
  am1.allocate("*",1 * GB,6,1,new ArrayList<ContainerId>(),"");
  for (int i=2; i < 2 + 6; i++) {
    nextContainerId=ContainerId.newContainerId(am1.getApplicationAttemptId(),i);
    Assert.assertTrue(rm1.waitForState(Arrays.asList(nm1,nm2),nextContainerId,RMContainerState.ALLOCATED,10 * 1000));
  }
  checkLaunchedContainerNumOnNode(rm1,nm1.getNodeId(),0);
  checkLaunchedContainerNumOnNode(rm1,nm2.getNodeId(),7);
  rm1.close();
}
