{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration(this.conf);
  csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"a","b"});
  csConf.setCapacityByLabel(CapacitySchedulerConfiguration.ROOT,"x",100);
  final String A=CapacitySchedulerConfiguration.ROOT + ".a";
  csConf.setCapacity(A,10);
  csConf.setAccessibleNodeLabels(A,toSet("x"));
  csConf.setCapacityByLabel(A,"x",50);
  csConf.setMaximumCapacityByLabel(A,"x",50);
  final String B=CapacitySchedulerConfiguration.ROOT + ".b";
  csConf.setCapacity(B,90);
  csConf.setAccessibleNodeLabels(B,toSet("x"));
  csConf.setCapacityByLabel(B,"x",50);
  csConf.setMaximumCapacityByLabel(B,"x",50);
  csConf.setQueues(A,new String[]{"a1","a2"});
  final String A1=A + ".a1";
  csConf.setCapacity(A1,50);
  csConf.setAccessibleNodeLabels(A1,toSet("x"));
  csConf.setCapacityByLabel(A1,"x",50);
  csConf.setMaximumCapacityByLabel(A1,"x",100);
  csConf.setUserLimitFactor(A1,100.0f);
  final String A2=A + ".a2";
  csConf.setCapacity(A2,50);
  csConf.setAccessibleNodeLabels(A2,toSet("x"));
  csConf.setCapacityByLabel(A2,"x",50);
  csConf.setMaximumCapacityByLabel(A2,"x",100);
  csConf.setUserLimitFactor(A2,100.0f);
  mgr.addToCluserNodeLabels(ImmutableSet.of(NodeLabel.newInstance("x",false)));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  MockRM rm=new MockRM(csConf){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.getRMContext().setNodeLabelManager(mgr);
  rm.start();
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  MockNM nm1=new MockNM("h1:1234",24 * GB,rm.getResourceTrackerService());
  nm1.registerNode();
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"a1","x");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm1);
  am1.allocate("*",4 * GB,2,new ArrayList<ContainerId>(),"x");
  doNMHeartbeat(rm,nm1.getNodeId(),10);
  checkNumOfContainersInAnAppOnGivenNode(3,nm1.getNodeId(),cs.getApplicationAttempt(am1.getApplicationAttemptId()));
  RMApp app2=rm.submitApp(2 * GB,"app","user",null,"a2","x");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm,nm1);
  am2.allocate("*",2 * GB,2,new ArrayList<ContainerId>(),"x");
  doNMHeartbeat(rm,nm1.getNodeId(),10);
  checkNumOfContainersInAnAppOnGivenNode(1,nm1.getNodeId(),cs.getApplicationAttempt(am2.getApplicationAttemptId()));
}
