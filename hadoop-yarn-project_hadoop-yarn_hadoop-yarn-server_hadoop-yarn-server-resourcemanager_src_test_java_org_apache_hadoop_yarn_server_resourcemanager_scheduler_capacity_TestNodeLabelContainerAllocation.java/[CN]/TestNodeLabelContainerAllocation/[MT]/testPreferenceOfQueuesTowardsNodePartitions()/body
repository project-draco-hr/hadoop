{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration(this.conf);
  csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"a","b","c"});
  csConf.setCapacityByLabel(CapacitySchedulerConfiguration.ROOT,"x",100);
  final String A=CapacitySchedulerConfiguration.ROOT + ".a";
  csConf.setCapacity(A,33);
  csConf.setAccessibleNodeLabels(A,toSet("x"));
  csConf.setCapacityByLabel(A,"x",33);
  csConf.setQueues(A,new String[]{"a1","a2"});
  final String B=CapacitySchedulerConfiguration.ROOT + ".b";
  csConf.setCapacity(B,33);
  csConf.setAccessibleNodeLabels(B,toSet("x"));
  csConf.setCapacityByLabel(B,"x",33);
  csConf.setQueues(B,new String[]{"b1","b2"});
  final String C=CapacitySchedulerConfiguration.ROOT + ".c";
  csConf.setCapacity(C,34);
  csConf.setAccessibleNodeLabels(C,toSet("x"));
  csConf.setCapacityByLabel(C,"x",34);
  csConf.setQueues(C,new String[]{"c1","c2"});
  final String A1=A + ".a1";
  csConf.setCapacity(A1,50);
  csConf.setCapacityByLabel(A1,"x",100);
  csConf.setDefaultNodeLabelExpression(A1,"x");
  final String A2=A + ".a2";
  csConf.setCapacity(A2,50);
  csConf.setCapacityByLabel(A2,"x",0);
  final String B1=B + ".b1";
  csConf.setCapacity(B1,50);
  csConf.setCapacityByLabel(B1,"x",100);
  csConf.setDefaultNodeLabelExpression(B1,"x");
  final String B2=B + ".b2";
  csConf.setCapacity(B2,50);
  csConf.setCapacityByLabel(B2,"x",0);
  final String C1=C + ".c1";
  csConf.setCapacity(C1,50);
  csConf.setCapacityByLabel(C1,"x",100);
  csConf.setDefaultNodeLabelExpression(C1,"x");
  final String C2=C + ".c2";
  csConf.setCapacity(C2,50);
  csConf.setCapacityByLabel(C2,"x",0);
  mgr.addToCluserNodeLabels(ImmutableSet.of("x","y"));
  mgr.updateNodeLabels(Arrays.asList(NodeLabel.newInstance("x",false)));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  MockRM rm1=new MockRM(csConf){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",20 * GB);
  MockNM nm2=rm1.registerNode("h2:1234",100 * GB);
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"a1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  RMApp app2=rm1.submitApp(1 * GB,"app","user",null,"a2");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm2);
  RMApp app3=rm1.submitApp(1 * GB,"app","user",null,"b1");
  MockAM am3=MockRM.launchAndRegisterAM(app3,rm1,nm1);
  RMApp app4=rm1.submitApp(1 * GB,"app","user",null,"b2");
  MockAM am4=MockRM.launchAndRegisterAM(app4,rm1,nm2);
  RMApp app5=rm1.submitApp(1 * GB,"app","user",null,"c1");
  MockAM am5=MockRM.launchAndRegisterAM(app5,rm1,nm1);
  RMApp app6=rm1.submitApp(1 * GB,"app","user",null,"c2");
  MockAM am6=MockRM.launchAndRegisterAM(app6,rm1,nm2);
  am1.allocate("*",1 * GB,5,new ArrayList<ContainerId>());
  am2.allocate("*",1 * GB,5,new ArrayList<ContainerId>());
  am3.allocate("*",1 * GB,5,new ArrayList<ContainerId>());
  am4.allocate("*",1 * GB,5,new ArrayList<ContainerId>());
  am5.allocate("*",1 * GB,5,new ArrayList<ContainerId>());
  am6.allocate("*",1 * GB,5,new ArrayList<ContainerId>());
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  for (int i=0; i < 15; i++) {
    cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  }
  checkLaunchedContainerNumOnNode(rm1,nm1.getNodeId(),18);
  checkPendingResource(rm1,1,am1.getApplicationAttemptId(),0 * GB);
  checkPendingResource(rm1,1,am2.getApplicationAttemptId(),5 * GB);
  checkPendingResource(rm1,1,am3.getApplicationAttemptId(),0 * GB);
  checkPendingResource(rm1,1,am4.getApplicationAttemptId(),5 * GB);
  checkPendingResource(rm1,1,am5.getApplicationAttemptId(),0 * GB);
  checkPendingResource(rm1,1,am6.getApplicationAttemptId(),5 * GB);
  rm1.close();
}
