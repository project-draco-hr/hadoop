{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration(this.conf);
  csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"a","b"});
  csConf.setCapacityByLabel(CapacitySchedulerConfiguration.ROOT,"x",100);
  final String A=CapacitySchedulerConfiguration.ROOT + ".a";
  csConf.setCapacity(A,50);
  csConf.setAccessibleNodeLabels(A,toSet("x"));
  csConf.setCapacityByLabel(A,"x",50);
  csConf.setQueues(A,new String[]{"a1","a2"});
  final String A1=A + ".a1";
  csConf.setCapacity(A1,50);
  csConf.setAccessibleNodeLabels(A1,toSet("x"));
  csConf.setCapacityByLabel(A1,"x",50);
  final String A2=A + ".a2";
  csConf.setCapacity(A2,50);
  csConf.setAccessibleNodeLabels(A2,toSet("x"));
  csConf.setCapacityByLabel(A2,"x",50);
  final String B=CapacitySchedulerConfiguration.ROOT + ".b";
  csConf.setCapacity(B,50);
  csConf.setAccessibleNodeLabels(B,toSet("x"));
  csConf.setCapacityByLabel(B,"x",50);
  mgr.addToCluserNodeLabels(ImmutableSet.of("x"));
  mgr.updateNodeLabels(Arrays.asList(NodeLabel.newInstance("x",false)));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  MockRM rm=new MockRM(csConf){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.getRMContext().setNodeLabelManager(mgr);
  rm.start();
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  checkQueueUsedCapacity("a",cs,"x",0f,0f);
  checkQueueUsedCapacity("a",cs,"",0f,0f);
  checkQueueUsedCapacity("a1",cs,"x",0f,0f);
  checkQueueUsedCapacity("a1",cs,"",0f,0f);
  checkQueueUsedCapacity("a2",cs,"x",0f,0f);
  checkQueueUsedCapacity("a2",cs,"",0f,0f);
  checkQueueUsedCapacity("b",cs,"x",0f,0f);
  checkQueueUsedCapacity("b",cs,"",0f,0f);
  checkQueueUsedCapacity("root",cs,"x",0f,0f);
  checkQueueUsedCapacity("root",cs,"",0f,0f);
  MockNM nm1=rm.registerNode("h1:1234",10 * GB);
  MockNM nm2=rm.registerNode("h2:1234",10 * GB);
  checkQueueUsedCapacity("a",cs,"x",0f,0f);
  checkQueueUsedCapacity("a",cs,"",0f,0f);
  checkQueueUsedCapacity("a1",cs,"x",0f,0f);
  checkQueueUsedCapacity("a1",cs,"",0f,0f);
  checkQueueUsedCapacity("a2",cs,"x",0f,0f);
  checkQueueUsedCapacity("a2",cs,"",0f,0f);
  checkQueueUsedCapacity("b",cs,"x",0f,0f);
  checkQueueUsedCapacity("b",cs,"",0f,0f);
  checkQueueUsedCapacity("root",cs,"x",0f,0f);
  checkQueueUsedCapacity("root",cs,"",0f,0f);
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"a1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm2);
  am1.allocate("*",1 * GB,1,new ArrayList<ContainerId>());
  doNMHeartbeat(rm,nm2.getNodeId(),10);
  checkQueueUsedCapacity("a",cs,"x",0f,0f);
  checkQueueUsedCapacity("a",cs,"",0.4f,0.2f);
  checkQueueUsedCapacity("a1",cs,"x",0f,0f);
  checkQueueUsedCapacity("a1",cs,"",0.8f,0.2f);
  checkQueueUsedCapacity("a2",cs,"x",0f,0f);
  checkQueueUsedCapacity("a2",cs,"",0f,0f);
  checkQueueUsedCapacity("b",cs,"x",0f,0f);
  checkQueueUsedCapacity("b",cs,"",0f,0f);
  checkQueueUsedCapacity("root",cs,"x",0f,0f);
  checkQueueUsedCapacity("root",cs,"",0.2f,0.2f);
  am1.allocate("*",1 * GB,2,new ArrayList<ContainerId>(),"x");
  doNMHeartbeat(rm,nm1.getNodeId(),10);
  checkQueueUsedCapacity("a",cs,"x",0.4f,0.2f);
  checkQueueUsedCapacity("a",cs,"",0.4f,0.2f);
  checkQueueUsedCapacity("a1",cs,"x",0.8f,0.2f);
  checkQueueUsedCapacity("a1",cs,"",0.8f,0.2f);
  checkQueueUsedCapacity("a2",cs,"x",0f,0f);
  checkQueueUsedCapacity("a2",cs,"",0f,0f);
  checkQueueUsedCapacity("b",cs,"x",0f,0f);
  checkQueueUsedCapacity("b",cs,"",0f,0f);
  checkQueueUsedCapacity("root",cs,"x",0.2f,0.2f);
  checkQueueUsedCapacity("root",cs,"",0.2f,0.2f);
  RMApp app2=rm.submitApp(1 * GB,"app","user",null,"a2");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm,nm2);
  am2.allocate("*",1 * GB,1,new ArrayList<ContainerId>(),"x");
  doNMHeartbeat(rm,nm1.getNodeId(),10);
  checkQueueUsedCapacity("a",cs,"x",0.6f,0.3f);
  checkQueueUsedCapacity("a",cs,"",0.6f,0.3f);
  checkQueueUsedCapacity("a1",cs,"x",0.8f,0.2f);
  checkQueueUsedCapacity("a1",cs,"",0.8f,0.2f);
  checkQueueUsedCapacity("a2",cs,"x",0.4f,0.1f);
  checkQueueUsedCapacity("a2",cs,"",0.4f,0.1f);
  checkQueueUsedCapacity("b",cs,"x",0f,0f);
  checkQueueUsedCapacity("b",cs,"",0f,0f);
  checkQueueUsedCapacity("root",cs,"x",0.3f,0.3f);
  checkQueueUsedCapacity("root",cs,"",0.3f,0.3f);
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h3",0),toSet("x")));
  rm.registerNode("h3:1234",10 * GB);
  rm.registerNode("h4:1234",10 * GB);
  waitSchedulerNodeJoined(rm,4);
  checkQueueUsedCapacity("a",cs,"x",0.3f,0.15f);
  checkQueueUsedCapacity("a",cs,"",0.3f,0.15f);
  checkQueueUsedCapacity("a1",cs,"x",0.4f,0.1f);
  checkQueueUsedCapacity("a1",cs,"",0.4f,0.1f);
  checkQueueUsedCapacity("a2",cs,"x",0.2f,0.05f);
  checkQueueUsedCapacity("a2",cs,"",0.2f,0.05f);
  checkQueueUsedCapacity("b",cs,"x",0f,0f);
  checkQueueUsedCapacity("b",cs,"",0f,0f);
  checkQueueUsedCapacity("root",cs,"x",0.15f,0.15f);
  checkQueueUsedCapacity("root",cs,"",0.15f,0.15f);
  csConf.setCapacity(A,100);
  csConf.setCapacityByLabel(A,"x",100);
  csConf.setCapacity(B,0);
  csConf.setCapacityByLabel(B,"x",0);
  cs.reinitialize(csConf,rm.getRMContext());
  checkQueueUsedCapacity("a",cs,"x",0.15f,0.15f);
  checkQueueUsedCapacity("a",cs,"",0.15f,0.15f);
  checkQueueUsedCapacity("a1",cs,"x",0.2f,0.1f);
  checkQueueUsedCapacity("a1",cs,"",0.2f,0.1f);
  checkQueueUsedCapacity("a2",cs,"x",0.1f,0.05f);
  checkQueueUsedCapacity("a2",cs,"",0.1f,0.05f);
  checkQueueUsedCapacity("b",cs,"x",0f,0f);
  checkQueueUsedCapacity("b",cs,"",0f,0f);
  checkQueueUsedCapacity("root",cs,"x",0.15f,0.15f);
  checkQueueUsedCapacity("root",cs,"",0.15f,0.15f);
  am1.allocate(null,Arrays.asList(ContainerId.newContainerId(am1.getApplicationAttemptId(),2),ContainerId.newContainerId(am1.getApplicationAttemptId(),3),ContainerId.newContainerId(am1.getApplicationAttemptId(),4)));
  checkQueueUsedCapacity("a",cs,"x",0.05f,0.05f);
  checkQueueUsedCapacity("a",cs,"",0.10f,0.10f);
  checkQueueUsedCapacity("a1",cs,"x",0.0f,0.0f);
  checkQueueUsedCapacity("a1",cs,"",0.1f,0.05f);
  checkQueueUsedCapacity("a2",cs,"x",0.1f,0.05f);
  checkQueueUsedCapacity("a2",cs,"",0.1f,0.05f);
  checkQueueUsedCapacity("b",cs,"x",0f,0f);
  checkQueueUsedCapacity("b",cs,"",0f,0f);
  checkQueueUsedCapacity("root",cs,"x",0.05f,0.05f);
  checkQueueUsedCapacity("root",cs,"",0.10f,0.10f);
  rm.close();
}
