{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration(this.conf);
  csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"a","b"});
  csConf.setCapacityByLabel(CapacitySchedulerConfiguration.ROOT,"x",100);
  final String A=CapacitySchedulerConfiguration.ROOT + ".a";
  csConf.setCapacity(A,50);
  csConf.setAccessibleNodeLabels(A,toSet("x"));
  csConf.setCapacityByLabel(A,"x",50);
  csConf.setMaximumCapacityByLabel(A,"x",50);
  final String B=CapacitySchedulerConfiguration.ROOT + ".b";
  csConf.setCapacity(B,50);
  csConf.setAccessibleNodeLabels(B,toSet("x"));
  csConf.setCapacityByLabel(B,"x",50);
  csConf.setMaximumCapacityByLabel(B,"x",50);
  mgr.addToCluserNodeLabels(ImmutableSet.of("x"));
  mgr.updateNodeLabels(Arrays.asList(NodeLabel.newInstance("x",false)));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  MockRM rm1=new MockRM(csConf){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",10 * GB);
  MockNM nm2=rm1.registerNode("h2:1234",10 * GB);
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"a");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm2);
  am1.allocate("*",1 * GB,10,new ArrayList<ContainerId>());
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  SchedulerNode schedulerNode1=cs.getSchedulerNode(nm1.getNodeId());
  for (int i=0; i < 50; i++) {
    cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  }
  Assert.assertEquals(10,schedulerNode1.getNumContainers());
  rm1.close();
}
