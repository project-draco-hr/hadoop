{
  this.conf=conf;
  this.clock=clock;
  this.jobFile=remoteJobConfFile;
  ReadWriteLock readWriteLock=new ReentrantReadWriteLock();
  readLock=readWriteLock.readLock();
  writeLock=readWriteLock.writeLock();
  this.attempts=Collections.emptyMap();
  maxAttempts=getMaxAttempts();
  taskId=recordFactory.newRecordInstance(TaskId.class);
  taskId.setJobId(jobId);
  taskId.setId(partition);
  taskId.setTaskType(taskType);
  this.partition=partition;
  this.taskAttemptListener=taskAttemptListener;
  this.eventHandler=eventHandler;
  this.committer=committer;
  this.fsTokens=fsTokens;
  this.jobToken=jobToken;
  this.metrics=metrics;
  if (completedTasksFromPreviousRun != null && completedTasksFromPreviousRun.contains(taskId)) {
    LOG.info("Task is from previous run " + taskId);
    startCount=startCount - 1;
  }
  nextAttemptNumber=(startCount - 1) * 1000;
  stateMachine=stateMachineFactory.make(this);
}
