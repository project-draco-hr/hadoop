{
  long timeWindow=1000000L;
  Resource clusterCapacity=Resource.newInstance(500 * 100 * 1024,500 * 32);
  step=1000L;
  ReservationSystemTestUtil testUtil=new ReservationSystemTestUtil();
  CapacityScheduler scheduler=testUtil.mockCapacityScheduler(500 * 100);
  String reservationQ=testUtil.getFullReservationQueueName();
  float instConstraint=100;
  float avgConstraint=100;
  ReservationSchedulerConfiguration conf=ReservationSystemTestUtil.createConf(reservationQ,timeWindow,instConstraint,avgConstraint);
  CapacityOverTimePolicy policy=new CapacityOverTimePolicy();
  policy.init(reservationQ,conf);
  plan=new InMemoryPlan(scheduler.getRootQueueMetrics(),policy,agent,clusterCapacity,step,res,minAlloc,maxAlloc,"dedicated",null,true);
  int acc=0;
  List<ReservationDefinition> list=new ArrayList<ReservationDefinition>();
  for (long i=0; i < numJobs; i++) {
    list.add(ReservationSystemTestUtil.generateRandomRR(rand,i));
  }
  long start=System.currentTimeMillis();
  for (int i=0; i < numJobs; i++) {
    try {
      if (agent.createReservation(ReservationSystemTestUtil.getNewReservationId(),"u" + i % 100,plan,list.get(i))) {
        acc++;
      }
    }
 catch (    PlanningException p) {
    }
  }
  long end=System.currentTimeMillis();
  System.out.println("Submitted " + numJobs + " jobs "+ " accepted "+ acc+ " in "+ (end - start)+ "ms");
}
