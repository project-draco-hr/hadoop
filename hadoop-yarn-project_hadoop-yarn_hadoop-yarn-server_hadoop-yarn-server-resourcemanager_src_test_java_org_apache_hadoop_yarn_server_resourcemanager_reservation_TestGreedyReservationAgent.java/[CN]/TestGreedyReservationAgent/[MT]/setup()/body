{
  long seed=rand.nextLong();
  rand.setSeed(seed);
  Log.info("Running with seed: " + seed);
  long timeWindow=1000000L;
  Resource clusterCapacity=Resource.newInstance(100 * 1024,100);
  step=1000L;
  ReservationSystemTestUtil testUtil=new ReservationSystemTestUtil();
  CapacityScheduler scheduler=testUtil.mockCapacityScheduler(125);
  String reservationQ=testUtil.getFullReservationQueueName();
  CapacitySchedulerConfiguration capConf=scheduler.getConfiguration();
  capConf.setReservationWindow(reservationQ,timeWindow);
  capConf.setMaximumCapacity(reservationQ,100);
  capConf.setAverageCapacity(reservationQ,100);
  CapacityOverTimePolicy policy=new CapacityOverTimePolicy();
  policy.init(reservationQ,capConf,new HashSet<String>());
  agent=new GreedyReservationAgent();
  QueueMetrics queueMetrics=QueueMetrics.forQueue("dedicated",mock(ParentQueue.class),false,capConf);
  plan=new InMemoryPlan(queueMetrics,policy,agent,clusterCapacity,step,res,minAlloc,maxAlloc,"dedicated",null,true);
}
