{
  final Path foo=new Path(dir,"foo");
  final Path bar=new Path(foo,"bar");
  long currentFileLen=BLOCKSIZE;
  DFSTestUtil.createFile(dfs,bar,currentFileLen,REPLICATION,seed);
  dfs.setQuota(foo,Long.MAX_VALUE - 1,Long.MAX_VALUE - 1);
  DFSTestUtil.appendFile(dfs,bar,BLOCKSIZE / 2);
  currentFileLen+=(BLOCKSIZE / 2);
  INodeDirectory fooNode=fsdir.getINode4Write(foo.toString()).asDirectory();
  assertTrue(fooNode.isQuotaSet());
  QuotaCounts quota=fooNode.getDirectoryWithQuotaFeature().getSpaceConsumed();
  long ns=quota.getNameSpace();
  long ds=quota.getStorageSpace();
  assertEquals(2,ns);
  assertEquals(currentFileLen * REPLICATION,ds);
  ContentSummary c=dfs.getContentSummary(foo);
  assertEquals(c.getSpaceConsumed(),ds);
  DFSTestUtil.appendFile(dfs,bar,BLOCKSIZE);
  currentFileLen+=BLOCKSIZE;
  quota=fooNode.getDirectoryWithQuotaFeature().getSpaceConsumed();
  ns=quota.getNameSpace();
  ds=quota.getStorageSpace();
  assertEquals(2,ns);
  assertEquals(currentFileLen * REPLICATION,ds);
  c=dfs.getContentSummary(foo);
  assertEquals(c.getSpaceConsumed(),ds);
  DFSTestUtil.appendFile(dfs,bar,BLOCKSIZE * 3 + BLOCKSIZE / 8);
  currentFileLen+=(BLOCKSIZE * 3 + BLOCKSIZE / 8);
  quota=fooNode.getDirectoryWithQuotaFeature().getSpaceConsumed();
  ns=quota.getNameSpace();
  ds=quota.getStorageSpace();
  assertEquals(2,ns);
  assertEquals(currentFileLen * REPLICATION,ds);
  c=dfs.getContentSummary(foo);
  assertEquals(c.getSpaceConsumed(),ds);
}
