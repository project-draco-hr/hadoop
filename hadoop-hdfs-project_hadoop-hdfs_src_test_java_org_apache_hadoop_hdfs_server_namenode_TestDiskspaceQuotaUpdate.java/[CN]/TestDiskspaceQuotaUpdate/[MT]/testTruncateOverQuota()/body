{
  final Path dir=new Path("/TestTruncateOverquota");
  final Path file=new Path(dir,"file");
  dfs.mkdirs(dir);
  DFSTestUtil.createFile(dfs,file,BLOCKSIZE / 2,REPLICATION,seed);
  dfs.setQuota(dir,Long.MAX_VALUE - 1,1);
  final INodeDirectory dirNode=fsdir.getINode4Write(dir.toString()).asDirectory();
  final long spaceUsed=dirNode.getDirectoryWithQuotaFeature().getSpaceConsumed().getStorageSpace();
  try {
    dfs.truncate(file,BLOCKSIZE / 2 - 1);
    Assert.fail("truncate didn't fail");
  }
 catch (  RemoteException e) {
    assertTrue(e.getClassName().contains("DSQuotaExceededException"));
  }
  INodeFile inode=fsdir.getINode(file.toString()).asFile();
  Assert.assertNotNull(inode);
  Assert.assertFalse("should not be UC",inode.isUnderConstruction());
  Assert.assertNull("should not have a lease",cluster.getNamesystem().getLeaseManager().getLeaseByPath(file.toString()));
  final long newSpaceUsed=dirNode.getDirectoryWithQuotaFeature().getSpaceConsumed().getStorageSpace();
  assertEquals(spaceUsed,newSpaceUsed);
  dfs.recoverLease(file);
  cluster.restartNameNodes();
}
