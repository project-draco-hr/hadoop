{
  Logger rootLogger=LogManager.getRootLogger();
  rootLogger.setLevel(Level.DEBUG);
  MyContainerManagerImpl containerManager=new MyContainerManagerImpl();
  MockRMWithCustomAMLauncher rm=new MockRMWithCustomAMLauncher(containerManager);
  rm.start();
  MockNM nm1=rm.registerNode("h1:1234",5120);
  RMApp app=rm.submitApp(2000);
  nm1.nodeHeartbeat(true);
  int waitCount=0;
  while (containerManager.launched == false && waitCount++ < 20) {
    LOG.info("Waiting for AM Launch to happen..");
    Thread.sleep(1000);
  }
  Assert.assertTrue(containerManager.launched);
  RMAppAttempt attempt=app.getCurrentAppAttempt();
  ApplicationAttemptId appAttemptId=attempt.getAppAttemptId();
  Assert.assertEquals(appAttemptId.toString(),containerManager.attemptIdAtContainerManager);
  Assert.assertEquals(app.getSubmitTime(),containerManager.submitTimeAtContainerManager);
  Assert.assertEquals(app.getRMAppAttempt(appAttemptId).getSubmissionContext().getAMContainerSpec().getContainerId().toString(),containerManager.containerIdAtContainerManager);
  Assert.assertEquals(nm1.getHttpAddress(),containerManager.nmAddressAtContainerManager);
  MockAM am=new MockAM(rm.getRMContext(),rm.getApplicationMasterService(),appAttemptId);
  am.registerAppAttempt();
  am.unregisterAppAttempt();
  waitCount=0;
  while (containerManager.cleanedup == false && waitCount++ < 20) {
    LOG.info("Waiting for AM Cleanup to happen..");
    Thread.sleep(1000);
  }
  Assert.assertTrue(containerManager.cleanedup);
  am.waitForState(RMAppAttemptState.FINISHED);
  rm.stop();
}
