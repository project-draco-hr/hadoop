{
  LocalizerHeartbeatResponse response=recordFactory.newRecordInstance(LocalizerHeartbeatResponse.class);
  String user=context.getUser();
  ApplicationId applicationId=context.getContainerId().getApplicationAttemptId().getApplicationId();
  LocalizerAction action=LocalizerAction.LIVE;
  for (  LocalResourceStatus stat : remoteResourceStatuses) {
    LocalResource rsrc=stat.getResource();
    LocalResourceRequest req=null;
    try {
      req=new LocalResourceRequest(rsrc);
    }
 catch (    URISyntaxException e) {
    }
    LocalizerResourceRequestEvent assoc=scheduled.get(req);
    if (assoc == null) {
      LOG.error("Unknown resource reported: " + req);
      continue;
    }
switch (stat.getStatus()) {
case FETCH_SUCCESS:
      try {
        getLocalResourcesTracker(req.getVisibility(),user,applicationId).handle(new ResourceLocalizedEvent(req,ConverterUtils.getPathFromYarnURL(stat.getLocalPath()),stat.getLocalSize()));
      }
 catch (      URISyntaxException e) {
      }
    assoc.getResource().unlock();
  scheduled.remove(req);
break;
case FETCH_PENDING:
break;
case FETCH_FAILURE:
final String diagnostics=stat.getException().toString();
LOG.warn(req + " failed: " + diagnostics);
response.setLocalizerAction(LocalizerAction.DIE);
getLocalResourcesTracker(req.getVisibility(),user,applicationId).handle(new ResourceFailedLocalizationEvent(req,diagnostics));
assoc.getResource().unlock();
scheduled.remove(req);
break;
default :
LOG.info("Unknown status: " + stat.getStatus());
action=LocalizerAction.DIE;
getLocalResourcesTracker(req.getVisibility(),user,applicationId).handle(new ResourceFailedLocalizationEvent(req,stat.getException().getMessage()));
break;
}
}
if (action == LocalizerAction.DIE) {
response.setLocalizerAction(action);
return response;
}
List<ResourceLocalizationSpec> rsrcs=new ArrayList<ResourceLocalizationSpec>();
LocalResource next=findNextResource();
if (next != null) {
try {
ResourceLocalizationSpec resource=NodeManagerBuilderUtils.newResourceLocalizationSpec(next,getPathForLocalization(next));
rsrcs.add(resource);
}
 catch (IOException e) {
LOG.error("local path for PRIVATE localization could not be " + "found. Disks might have failed.",e);
}
catch (IllegalArgumentException e) {
LOG.error("Inorrect path for PRIVATE localization." + next.getResource().getFile(),e);
}
catch (URISyntaxException e) {
}
}
 else if (pending.isEmpty()) {
action=LocalizerAction.DIE;
}
response.setLocalizerAction(action);
response.setResourceSpecs(rsrcs);
return response;
}
