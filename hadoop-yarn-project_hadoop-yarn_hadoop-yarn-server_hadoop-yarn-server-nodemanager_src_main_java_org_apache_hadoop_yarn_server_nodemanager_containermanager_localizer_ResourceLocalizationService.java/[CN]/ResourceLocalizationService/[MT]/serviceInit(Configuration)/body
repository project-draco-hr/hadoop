{
  this.validateConf(conf);
  this.publicRsrc=new LocalResourcesTrackerImpl(null,null,dispatcher,true,conf,stateStore);
  this.recordFactory=RecordFactoryProvider.getRecordFactory(conf);
  try {
    lfs=getLocalFileContext(conf);
    lfs.setUMask(new FsPermission((short)FsPermission.DEFAULT_UMASK));
    if (!stateStore.canRecover() || stateStore.isNewlyCreated()) {
      cleanUpLocalDirs(lfs,delService);
      initializeLocalDirs(lfs);
      initializeLogDirs(lfs);
    }
  }
 catch (  Exception e) {
    throw new YarnRuntimeException("Failed to initialize LocalizationService",e);
  }
  cacheTargetSize=conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_TARGET_SIZE_MB,YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_TARGET_SIZE_MB) << 20;
  cacheCleanupPeriod=conf.getLong(YarnConfiguration.NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS,YarnConfiguration.DEFAULT_NM_LOCALIZER_CACHE_CLEANUP_INTERVAL_MS);
  localizationServerAddress=conf.getSocketAddr(YarnConfiguration.NM_BIND_HOST,YarnConfiguration.NM_LOCALIZER_ADDRESS,YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);
  localizerTracker=createLocalizerTracker(conf);
  addService(localizerTracker);
  dispatcher.register(LocalizerEventType.class,localizerTracker);
  localDirsChangeListener=new DirsChangeListener(){
    @Override public void onDirsChanged(){
      checkAndInitializeLocalDirs();
    }
  }
;
  logDirsChangeListener=new DirsChangeListener(){
    @Override public void onDirsChanged(){
      initializeLogDirs(lfs);
    }
  }
;
  super.serviceInit(conf);
}
