{
  HdfsAdmin hdfsAdmin=new HdfsAdmin(FileSystem.getDefaultUri(conf),conf);
  FileSystem fs=FileSystem.get(conf);
  final Path foo=new Path("/foo");
  final Path bar=new Path(foo,"bar");
  final Path wow=new Path(bar,"wow");
  DFSTestUtil.createFile(fs,wow,SIZE,REPL,0);
  final BlockStoragePolicySuite suite=BlockStoragePolicySuite.createDefaultSuite();
  final BlockStoragePolicy warm=suite.getPolicy("WARM");
  final BlockStoragePolicy cold=suite.getPolicy("COLD");
  final BlockStoragePolicy hot=suite.getPolicy("HOT");
  hdfsAdmin.setStoragePolicy(foo,warm.getName());
  hdfsAdmin.setStoragePolicy(bar,cold.getName());
  hdfsAdmin.setStoragePolicy(wow,hot.getName());
  assertEquals(hdfsAdmin.getStoragePolicy(foo),warm);
  assertEquals(hdfsAdmin.getStoragePolicy(bar),cold);
  assertEquals(hdfsAdmin.getStoragePolicy(wow),hot);
  hdfsAdmin.unsetStoragePolicy(foo);
  hdfsAdmin.unsetStoragePolicy(bar);
  hdfsAdmin.unsetStoragePolicy(wow);
  assertEquals(hdfsAdmin.getStoragePolicy(foo),hot);
  assertEquals(hdfsAdmin.getStoragePolicy(bar),hot);
  assertEquals(hdfsAdmin.getStoragePolicy(wow),hot);
  Set<String> policyNamesSet1=new HashSet<>();
  for (  BlockStoragePolicySpi policy : hdfsAdmin.getAllStoragePolicies()) {
    policyNamesSet1.add(policy.getName());
  }
  Set<String> policyNamesSet2=new HashSet<>();
  for (  BlockStoragePolicy policy : suite.getAllPolicies()) {
    policyNamesSet2.add(policy.getName());
  }
  Assert.assertTrue(Sets.difference(policyNamesSet1,policyNamesSet2).isEmpty());
  Assert.assertTrue(Sets.difference(policyNamesSet2,policyNamesSet1).isEmpty());
}
