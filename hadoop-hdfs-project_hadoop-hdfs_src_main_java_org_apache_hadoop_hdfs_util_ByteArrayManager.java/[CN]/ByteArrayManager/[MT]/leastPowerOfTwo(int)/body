{
  if (n <= 0) {
    throw new HadoopIllegalArgumentException("n = " + n + " <= 0");
  }
  final int highestOne=Integer.highestOneBit(n);
  if (highestOne == n) {
    return n;
  }
  final int roundUp=highestOne << 1;
  if (roundUp < 0) {
    final long overflow=((long)highestOne) << 1;
    throw new ArithmeticException("Overflow: for n = " + n + ", the least power of two (the least"+ " integer x with x >= n and x a power of two) = "+ overflow+ " > Integer.MAX_VALUE = "+ Integer.MAX_VALUE);
  }
  return roundUp;
}
