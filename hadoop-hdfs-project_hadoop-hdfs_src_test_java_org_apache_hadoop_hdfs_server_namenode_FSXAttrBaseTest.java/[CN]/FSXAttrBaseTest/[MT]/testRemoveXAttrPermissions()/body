{
  FileSystem.mkdirs(fs,path,FsPermission.createImmutable((short)0750));
  fs.setXAttr(path,name1,value1,EnumSet.of(XAttrSetFlag.CREATE));
  fs.setXAttr(path,name2,value2,EnumSet.of(XAttrSetFlag.CREATE));
  fs.setXAttr(path,name3,null,EnumSet.of(XAttrSetFlag.CREATE));
  try {
    fs.removeXAttr(path,name2);
    fs.removeXAttr(path,name2);
    Assert.fail("expected IOException");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("No matching attributes found",e);
  }
  final String expectedExceptionString="An XAttr name must be prefixed " + "with user/trusted/security/system, followed by a '.'";
  try {
    fs.removeXAttr(path,"wackynamespace.foo");
    Assert.fail("expected IOException");
  }
 catch (  RemoteException e) {
    assertEquals("Unexpected RemoteException: " + e,e.getClassName(),HadoopIllegalArgumentException.class.getCanonicalName());
    GenericTestUtils.assertExceptionContains(expectedExceptionString,e);
  }
catch (  HadoopIllegalArgumentException e) {
    GenericTestUtils.assertExceptionContains(expectedExceptionString,e);
  }
  final UserGroupInformation user=UserGroupInformation.createUserForTesting("user",new String[]{"mygroup"});
  fs.setXAttr(path,"trusted.foo","1234".getBytes());
  try {
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        userFs.removeXAttr(path,"trusted.foo");
        return null;
      }
    }
);
    Assert.fail("expected IOException");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("User doesn't have permission",e);
  }
 finally {
    fs.removeXAttr(path,"trusted.foo");
  }
  fs.setPermission(path,new FsPermission((short)0700));
  try {
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        userFs.removeXAttr(path,name1);
        return null;
      }
    }
);
    Assert.fail("expected IOException");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("Permission denied",e);
  }
  final Path childDir=new Path(path,"child" + pathCount);
  FileSystem.mkdirs(fs,childDir,FsPermission.createImmutable((short)0700));
  fs.setXAttr(childDir,name1,"1234".getBytes());
  try {
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        userFs.removeXAttr(childDir,name1);
        return null;
      }
    }
);
    Assert.fail("expected IOException");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("Permission denied",e);
  }
  fs.setPermission(path,new FsPermission((short)0704));
  try {
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        userFs.removeXAttr(childDir,name1);
        return null;
      }
    }
);
    Assert.fail("expected IOException");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("Permission denied",e);
  }
  fs.setPermission(path,new FsPermission((short)0701));
  fs.setPermission(childDir,new FsPermission((short)0701));
  try {
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        userFs.removeXAttr(childDir,name1);
        return null;
      }
    }
);
    Assert.fail("expected IOException");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("Permission denied",e);
  }
  fs.setPermission(path,new FsPermission((short)0701));
  fs.setPermission(childDir,new FsPermission((short)0706));
  user.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      final FileSystem userFs=dfsCluster.getFileSystem();
      userFs.removeXAttr(childDir,name1);
      return null;
    }
  }
);
}
