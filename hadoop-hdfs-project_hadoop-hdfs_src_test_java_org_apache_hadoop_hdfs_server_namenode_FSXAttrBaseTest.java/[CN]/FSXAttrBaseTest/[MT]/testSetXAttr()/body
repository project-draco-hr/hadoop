{
  FileSystem.mkdirs(fs,path,FsPermission.createImmutable((short)0750));
  fs.setXAttr(path,name1,value1,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
  Map<String,byte[]> xattrs=fs.getXAttrs(path);
  Assert.assertEquals(xattrs.size(),1);
  Assert.assertArrayEquals(value1,xattrs.get(name1));
  fs.removeXAttr(path,name1);
  try {
    fs.setXAttr(path,null,value1,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
    Assert.fail("Setting xattr with null name should fail.");
  }
 catch (  NullPointerException e) {
    GenericTestUtils.assertExceptionContains("XAttr name cannot be null",e);
  }
catch (  RemoteException e) {
    GenericTestUtils.assertExceptionContains("XAttr name cannot be null",e);
  }
  try {
    fs.setXAttr(path,"user.",value1,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
    Assert.fail("Setting xattr with empty name should fail.");
  }
 catch (  RemoteException e) {
    assertEquals("Unexpected RemoteException: " + e,e.getClassName(),HadoopIllegalArgumentException.class.getCanonicalName());
    GenericTestUtils.assertExceptionContains("XAttr name cannot be empty",e);
  }
catch (  HadoopIllegalArgumentException e) {
    GenericTestUtils.assertExceptionContains("XAttr name cannot be empty",e);
  }
  try {
    fs.setXAttr(path,"a1",value1,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
    Assert.fail("Setting xattr with invalid name prefix or without " + "name prefix should fail.");
  }
 catch (  RemoteException e) {
    assertEquals("Unexpected RemoteException: " + e,e.getClassName(),HadoopIllegalArgumentException.class.getCanonicalName());
    GenericTestUtils.assertExceptionContains("XAttr name must be prefixed",e);
  }
catch (  HadoopIllegalArgumentException e) {
    GenericTestUtils.assertExceptionContains("XAttr name must be prefixed",e);
  }
  fs.setXAttr(path,name1,value1);
  xattrs=fs.getXAttrs(path);
  Assert.assertEquals(xattrs.size(),1);
  Assert.assertArrayEquals(value1,xattrs.get(name1));
  fs.removeXAttr(path,name1);
  fs.setXAttr(path,name1,value1,EnumSet.of(XAttrSetFlag.CREATE));
  fs.setXAttr(path,name1,newValue1,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
  xattrs=fs.getXAttrs(path);
  Assert.assertEquals(xattrs.size(),1);
  Assert.assertArrayEquals(newValue1,xattrs.get(name1));
  fs.removeXAttr(path,name1);
  fs.setXAttr(path,name1,value1);
  fs.setXAttr(path,name2,value2);
  fs.setXAttr(path,name3,null);
  try {
    fs.setXAttr(path,name4,null);
    Assert.fail("Setting xattr should fail if total number of xattrs " + "for inode exceeds max limit.");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("Cannot add additional XAttr",e);
  }
  fs.removeXAttr(path,name1);
  fs.removeXAttr(path,name2);
  fs.removeXAttr(path,name3);
  String longName="user.0123456789abcdefX0123456789abcdefX0123456789abcdef";
  try {
    fs.setXAttr(path,longName,null);
    Assert.fail("Setting xattr should fail if name is too long.");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("XAttr is too big",e);
    GenericTestUtils.assertExceptionContains("total size is 50",e);
  }
  byte[] longValue=new byte[MAX_SIZE];
  try {
    fs.setXAttr(path,"user.a",longValue);
    Assert.fail("Setting xattr should fail if value is too long.");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("XAttr is too big",e);
    GenericTestUtils.assertExceptionContains("total size is 38",e);
  }
  String name="user.111";
  byte[] value=new byte[MAX_SIZE - 3];
  fs.setXAttr(path,name,value);
}
