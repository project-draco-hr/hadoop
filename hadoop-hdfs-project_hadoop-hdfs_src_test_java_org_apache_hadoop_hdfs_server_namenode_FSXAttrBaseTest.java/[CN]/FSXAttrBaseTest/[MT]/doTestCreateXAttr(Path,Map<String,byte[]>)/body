{
  FileSystem.mkdirs(fs,usePath,FsPermission.createImmutable((short)0750));
  fs.setXAttr(usePath,name1,value1,EnumSet.of(XAttrSetFlag.CREATE));
  Map<String,byte[]> xattrs=fs.getXAttrs(usePath);
  Assert.assertEquals(xattrs.size(),1);
  Assert.assertArrayEquals(value1,xattrs.get(name1));
  fs.removeXAttr(usePath,name1);
  xattrs=fs.getXAttrs(usePath);
  Assert.assertEquals(xattrs.size(),0);
  fs.setXAttr(usePath,name1,value1,EnumSet.of(XAttrSetFlag.CREATE));
  try {
    fs.setXAttr(usePath,name1,value1,EnumSet.of(XAttrSetFlag.CREATE));
    Assert.fail("Creating xattr which already exists should fail.");
  }
 catch (  IOException e) {
  }
  fs.removeXAttr(usePath,name1);
  for (  Map.Entry<String,byte[]> ent : expectedXAttrs.entrySet()) {
    fs.setXAttr(usePath,ent.getKey(),ent.getValue(),EnumSet.of(XAttrSetFlag.CREATE));
  }
  xattrs=fs.getXAttrs(usePath);
  Assert.assertEquals(xattrs.size(),expectedXAttrs.size());
  for (  Map.Entry<String,byte[]> ent : expectedXAttrs.entrySet()) {
    final byte[] val=(ent.getValue() == null) ? new byte[0] : ent.getValue();
    Assert.assertArrayEquals(val,xattrs.get(ent.getKey()));
  }
  restart(false);
  initFileSystem();
  xattrs=fs.getXAttrs(usePath);
  Assert.assertEquals(xattrs.size(),expectedXAttrs.size());
  for (  Map.Entry<String,byte[]> ent : expectedXAttrs.entrySet()) {
    final byte[] val=(ent.getValue() == null) ? new byte[0] : ent.getValue();
    Assert.assertArrayEquals(val,xattrs.get(ent.getKey()));
  }
  restart(true);
  initFileSystem();
  xattrs=fs.getXAttrs(usePath);
  Assert.assertEquals(xattrs.size(),expectedXAttrs.size());
  for (  Map.Entry<String,byte[]> ent : expectedXAttrs.entrySet()) {
    final byte[] val=(ent.getValue() == null) ? new byte[0] : ent.getValue();
    Assert.assertArrayEquals(val,xattrs.get(ent.getKey()));
  }
  for (  Map.Entry<String,byte[]> ent : expectedXAttrs.entrySet()) {
    fs.removeXAttr(usePath,ent.getKey());
  }
}
