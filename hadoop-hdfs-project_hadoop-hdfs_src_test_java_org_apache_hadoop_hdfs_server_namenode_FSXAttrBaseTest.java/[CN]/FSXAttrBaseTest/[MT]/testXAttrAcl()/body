{
  FileSystem.mkdirs(fs,path,FsPermission.createImmutable((short)0750));
  fs.setOwner(path,BRUCE.getUserName(),null);
  FileSystem fsAsBruce=createFileSystem(BRUCE);
  FileSystem fsAsDiana=createFileSystem(DIANA);
  fsAsBruce.setXAttr(path,name1,value1);
  Map<String,byte[]> xattrs;
  try {
    xattrs=fsAsDiana.getXAttrs(path);
    Assert.fail("Diana should not have read access to get xattrs");
  }
 catch (  AccessControlException e) {
  }
  fsAsBruce.modifyAclEntries(path,Lists.newArrayList(aclEntry(ACCESS,USER,DIANA.getUserName(),READ)));
  xattrs=fsAsDiana.getXAttrs(path);
  Assert.assertArrayEquals(value1,xattrs.get(name1));
  try {
    fsAsDiana.removeXAttr(path,name1);
    Assert.fail("Diana should not have write access to remove xattrs");
  }
 catch (  AccessControlException e) {
  }
  try {
    fsAsDiana.setXAttr(path,name2,value2);
    Assert.fail("Diana should not have write access to set xattrs");
  }
 catch (  AccessControlException e) {
  }
  fsAsBruce.modifyAclEntries(path,Lists.newArrayList(aclEntry(ACCESS,USER,DIANA.getUserName(),ALL)));
  fsAsDiana.setXAttr(path,name2,value2);
  Assert.assertArrayEquals(value2,fsAsDiana.getXAttrs(path).get(name2));
  fsAsDiana.removeXAttr(path,name1);
  fsAsDiana.removeXAttr(path,name2);
}
