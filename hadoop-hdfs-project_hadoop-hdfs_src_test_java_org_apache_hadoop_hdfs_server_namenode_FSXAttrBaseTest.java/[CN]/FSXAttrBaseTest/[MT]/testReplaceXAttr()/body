{
  FileSystem.mkdirs(fs,path,FsPermission.createImmutable((short)0750));
  fs.setXAttr(path,name1,value1,EnumSet.of(XAttrSetFlag.CREATE));
  fs.setXAttr(path,name1,newValue1,EnumSet.of(XAttrSetFlag.REPLACE));
  Map<String,byte[]> xattrs=fs.getXAttrs(path);
  Assert.assertEquals(xattrs.size(),1);
  Assert.assertArrayEquals(newValue1,xattrs.get(name1));
  fs.removeXAttr(path,name1);
  try {
    fs.setXAttr(path,name1,value1,EnumSet.of(XAttrSetFlag.REPLACE));
    Assert.fail("Replacing xattr which does not exist should fail.");
  }
 catch (  IOException e) {
  }
  fs.setXAttr(path,name1,value1,EnumSet.of(XAttrSetFlag.CREATE));
  fs.setXAttr(path,name2,value2,EnumSet.of(XAttrSetFlag.CREATE));
  fs.setXAttr(path,name2,null,EnumSet.of(XAttrSetFlag.REPLACE));
  xattrs=fs.getXAttrs(path);
  Assert.assertEquals(xattrs.size(),2);
  Assert.assertArrayEquals(value1,xattrs.get(name1));
  Assert.assertArrayEquals(new byte[0],xattrs.get(name2));
  restart(false);
  initFileSystem();
  xattrs=fs.getXAttrs(path);
  Assert.assertEquals(xattrs.size(),2);
  Assert.assertArrayEquals(value1,xattrs.get(name1));
  Assert.assertArrayEquals(new byte[0],xattrs.get(name2));
  restart(true);
  initFileSystem();
  xattrs=fs.getXAttrs(path);
  Assert.assertEquals(xattrs.size(),2);
  Assert.assertArrayEquals(value1,xattrs.get(name1));
  Assert.assertArrayEquals(new byte[0],xattrs.get(name2));
  fs.removeXAttr(path,name1);
  fs.removeXAttr(path,name2);
}
