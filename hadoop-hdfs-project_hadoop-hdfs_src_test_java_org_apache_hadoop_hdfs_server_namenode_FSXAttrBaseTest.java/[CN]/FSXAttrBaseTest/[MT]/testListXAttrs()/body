{
  final UserGroupInformation user=UserGroupInformation.createUserForTesting("user",new String[]{"mygroup"});
  try {
    fs.listXAttrs(path);
    fail("expected FileNotFoundException");
  }
 catch (  FileNotFoundException e) {
    GenericTestUtils.assertExceptionContains("cannot find",e);
  }
  FileSystem.mkdirs(fs,path,FsPermission.createImmutable((short)0750));
  final List<String> noXAttrs=fs.listXAttrs(path);
  assertTrue("XAttrs were found?",noXAttrs.size() == 0);
  fs.setXAttr(path,name1,value1,EnumSet.of(XAttrSetFlag.CREATE));
  fs.setXAttr(path,name2,value2,EnumSet.of(XAttrSetFlag.CREATE));
  final List<String> xattrNames=fs.listXAttrs(path);
  assertTrue(xattrNames.contains(name1));
  assertTrue(xattrNames.contains(name2));
  assertTrue(xattrNames.size() == 2);
  fs.setPermission(path,new FsPermission((short)0704));
  final Path childDir=new Path(path,"child" + pathCount);
  FileSystem.mkdirs(fs,childDir,FsPermission.createImmutable((short)0700));
  fs.setXAttr(childDir,name1,"1234".getBytes());
  try {
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        userFs.listXAttrs(childDir);
        return null;
      }
    }
);
    fail("expected IOException");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("Permission denied",e);
  }
  fs.setPermission(path,new FsPermission((short)0702));
  try {
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        userFs.listXAttrs(childDir);
        return null;
      }
    }
);
    fail("expected IOException");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("Permission denied",e);
  }
  fs.setPermission(path,new FsPermission((short)0701));
  user.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      final FileSystem userFs=dfsCluster.getFileSystem();
      userFs.listXAttrs(childDir);
      return null;
    }
  }
);
  fs.setXAttr(childDir,"trusted.myxattr","1234".getBytes());
  user.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      final FileSystem userFs=dfsCluster.getFileSystem();
      assertTrue(userFs.listXAttrs(childDir).size() == 1);
      return null;
    }
  }
);
  assertTrue(fs.listXAttrs(childDir).size() == 2);
}
