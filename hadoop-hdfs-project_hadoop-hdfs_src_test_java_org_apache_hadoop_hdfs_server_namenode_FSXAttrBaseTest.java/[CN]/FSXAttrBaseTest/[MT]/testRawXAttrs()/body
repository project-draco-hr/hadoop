{
  final UserGroupInformation user=UserGroupInformation.createUserForTesting("user",new String[]{"mygroup"});
  FileSystem.mkdirs(fs,path,FsPermission.createImmutable((short)0750));
  fs.setXAttr(rawPath,raw1,value1,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
{
    final byte[] value=fs.getXAttr(rawPath,raw1);
    Assert.assertArrayEquals(value,value1);
  }
{
    final Map<String,byte[]> xattrs=fs.getXAttrs(rawPath);
    Assert.assertEquals(xattrs.size(),1);
    Assert.assertArrayEquals(value1,xattrs.get(raw1));
    fs.removeXAttr(rawPath,raw1);
  }
{
    fs.setXAttr(rawPath,raw1,value1,EnumSet.of(XAttrSetFlag.CREATE));
    fs.setXAttr(rawPath,raw1,newValue1,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
    final Map<String,byte[]> xattrs=fs.getXAttrs(rawPath);
    Assert.assertEquals(xattrs.size(),1);
    Assert.assertArrayEquals(newValue1,xattrs.get(raw1));
    fs.removeXAttr(rawPath,raw1);
  }
{
    fs.setXAttr(rawPath,raw1,value1,EnumSet.of(XAttrSetFlag.CREATE));
    fs.setXAttr(rawPath,raw2,value2,EnumSet.of(XAttrSetFlag.CREATE));
    final List<String> xattrNames=fs.listXAttrs(rawPath);
    assertTrue(xattrNames.contains(raw1));
    assertTrue(xattrNames.contains(raw2));
    assertTrue(xattrNames.size() == 2);
    fs.removeXAttr(rawPath,raw1);
    fs.removeXAttr(rawPath,raw2);
  }
{
    fs.setXAttr(rawPath,raw1,value1,EnumSet.of(XAttrSetFlag.CREATE));
    fs.setXAttr(rawPath,raw2,value2,EnumSet.of(XAttrSetFlag.CREATE));
    final List<String> xattrNames=fs.listXAttrs(path);
    assertTrue(xattrNames.size() == 0);
    fs.removeXAttr(rawPath,raw1);
    fs.removeXAttr(rawPath,raw2);
  }
{
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        try {
          userFs.setXAttr(path,raw1,value1);
          fail("setXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.setXAttr(rawPath,raw1,value1);
          fail("setXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.getXAttrs(rawPath);
          fail("getXAttrs should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.getXAttrs(path);
          fail("getXAttrs should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.getXAttr(rawPath,raw1);
          fail("getXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.getXAttr(path,raw1);
          fail("getXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        return null;
      }
    }
);
  }
{
    fs.setXAttr(rawPath,raw1,value1);
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final FileSystem userFs=dfsCluster.getFileSystem();
        try {
          userFs.getXAttr(rawPath,raw1);
          fail("getXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        try {
          userFs.getXAttr(path,raw1);
          fail("getXAttr should have thrown");
        }
 catch (        AccessControlException e) {
        }
        final List<String> xattrNames=userFs.listXAttrs(path);
        assertTrue(xattrNames.size() == 0);
        try {
          userFs.listXAttrs(rawPath);
          fail("listXAttrs on raw path should have thrown");
        }
 catch (        AccessControlException e) {
        }
        return null;
      }
    }
);
    fs.removeXAttr(rawPath,raw1);
  }
}
