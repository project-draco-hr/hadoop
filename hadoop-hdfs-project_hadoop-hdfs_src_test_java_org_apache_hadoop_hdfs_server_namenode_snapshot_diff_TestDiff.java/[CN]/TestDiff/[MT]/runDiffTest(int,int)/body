{
  final int width=findWidth(startSize + numModifications);
  System.out.println("\nstartSize=" + startSize + ", numModifications="+ numModifications+ ", width="+ width);
  final List<INode> previous=new ArrayList<INode>();
  int n=0;
  for (; n < startSize; n++) {
    previous.add(newINode(n,width));
  }
  final List<INode> current=new ArrayList<INode>(previous);
  final List<Diff<byte[],INode>> diffs=new ArrayList<Diff<byte[],INode>>();
  for (int j=0; j < 5; j++) {
    diffs.add(new Diff<byte[],INode>());
  }
  for (int m=0; m < numModifications; m++) {
    final int j=m * diffs.size() / numModifications;
    final int nextOperation=current.isEmpty() ? 1 : RANDOM.nextInt(3) + 1;
switch (nextOperation) {
case 1:
{
        final INode i=newINode(n++,width);
        create(i,current,diffs.get(j));
        break;
      }
case 2:
{
      final INode i=current.get(RANDOM.nextInt(current.size()));
      delete(i,current,diffs.get(j));
      break;
    }
case 3:
{
    final INode i=current.get(RANDOM.nextInt(current.size()));
    modify(i,current,diffs.get(j));
    break;
  }
}
}
{
List<INode> c=previous;
for (int i=0; i < diffs.size(); i++) {
c=diffs.get(i).apply2Previous(c);
}
if (!hasIdenticalElements(current,c)) {
System.out.println("previous = " + previous);
System.out.println();
System.out.println("current  = " + current);
System.out.println("c        = " + c);
throw new AssertionError("current and c are not identical.");
}
List<INode> p=current;
for (int i=diffs.size() - 1; i >= 0; i--) {
p=diffs.get(i).apply2Current(p);
}
if (!hasIdenticalElements(previous,p)) {
System.out.println("previous = " + previous);
System.out.println("p        = " + p);
System.out.println();
System.out.println("current  = " + current);
throw new AssertionError("previous and p are not identical.");
}
}
final Diff<byte[],INode> combined=diffs.get(0);
for (int i=1; i < diffs.size(); i++) {
combined.combinePosterior(diffs.get(i),null);
}
{
final List<INode> c=combined.apply2Previous(previous);
if (!hasIdenticalElements(current,c)) {
System.out.println("previous = " + previous);
System.out.println();
System.out.println("current  = " + current);
System.out.println("c        = " + c);
throw new AssertionError("current and c are not identical.");
}
final List<INode> p=combined.apply2Current(current);
if (!hasIdenticalElements(previous,p)) {
System.out.println("previous = " + previous);
System.out.println("p        = " + p);
System.out.println();
System.out.println("current  = " + current);
throw new AssertionError("previous and p are not identical.");
}
}
{
for (int m=0; m < n; m++) {
final INode inode=newINode(m,width);
{
  final Container<INode> r=combined.accessPrevious(inode.getKey());
  final INode computed;
  if (r != null) {
    computed=r.getElement();
  }
 else {
    final int i=Diff.search(current,inode.getKey());
    computed=i < 0 ? null : current.get(i);
  }
  final int j=Diff.search(previous,inode.getKey());
  final INode expected=j < 0 ? null : previous.get(j);
  Assert.assertTrue(computed == expected);
}
{
  final Container<INode> r=combined.accessCurrent(inode.getKey());
  final INode computed;
  if (r != null) {
    computed=r.getElement();
  }
 else {
    final int i=Diff.search(previous,inode.getKey());
    computed=i < 0 ? null : previous.get(i);
  }
  final int j=Diff.search(current,inode.getKey());
  final INode expected=j < 0 ? null : current.get(j);
  Assert.assertTrue(computed == expected);
}
}
}
}
