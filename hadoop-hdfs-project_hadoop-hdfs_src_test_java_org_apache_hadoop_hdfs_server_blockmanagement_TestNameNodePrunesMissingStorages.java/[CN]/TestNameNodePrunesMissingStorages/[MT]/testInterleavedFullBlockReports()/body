{
  Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,36000000L);
  int numStoragesPerDatanode=6;
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).storagesPerDatanode(numStoragesPerDatanode).build();
  try {
    LOG.info("waiting for cluster to become active...");
    cluster.waitActive();
    DataNode dn=cluster.getDataNodes().get(0);
    final String blockPoolId=cluster.getNamesystem().getBlockPoolId();
    LOG.info("Block pool id: " + blockPoolId);
    final DatanodeRegistration dnR=dn.getDNRegistrationForBP(blockPoolId);
    Map<DatanodeStorage,BlockListAsLongs> perVolumeBlockLists=dn.getFSDataset().getBlockReports(blockPoolId);
    final StorageBlockReport[] reports=new StorageBlockReport[perVolumeBlockLists.size()];
    int reportIndex=0;
    for (    Map.Entry<DatanodeStorage,BlockListAsLongs> kvPair : perVolumeBlockLists.entrySet()) {
      DatanodeStorage dnStorage=kvPair.getKey();
      BlockListAsLongs blockList=kvPair.getValue();
      reports[reportIndex++]=new StorageBlockReport(dnStorage,blockList);
    }
    BlockManager bm=cluster.getNameNode().getNamesystem().getBlockManager();
    final DatanodeDescriptor dnDescriptor=bm.getDatanodeManager().getDatanode(cluster.getDataNodes().get(0).getDatanodeUuid());
    DatanodeStorageInfo[] storageInfos=dnDescriptor.getStorageInfos();
    ExecutorService executorService=Executors.newFixedThreadPool(numStoragesPerDatanode);
    List<Future<DatanodeCommand>> futureList=new ArrayList<>(numStoragesPerDatanode);
    for (int i=0; i < numStoragesPerDatanode; i++) {
      futureList.add(executorService.submit(new Callable<DatanodeCommand>(){
        @Override public DatanodeCommand call() throws IOException {
          return cluster.getNameNodeRpc().blockReport(dnR,blockPoolId,reports,new BlockReportContext(1,0,System.nanoTime(),0L,true));
        }
      }
));
    }
    for (    Future<DatanodeCommand> future : futureList) {
      future.get();
    }
    executorService.shutdown();
    Assert.assertArrayEquals(storageInfos,dnDescriptor.getStorageInfos());
  }
  finally {
    cluster.shutdown();
  }
}
