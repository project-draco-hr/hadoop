{
  PrivilegedOperationExecutor exec=PrivilegedOperationExecutor.getInstance(confWithExecutorPath);
  PrivilegedOperation op=new PrivilegedOperation(PrivilegedOperation.OperationType.TC_MODIFY_STATE);
  String[] cmdArray=exec.getPrivilegedOperationExecutionCommand(null,op);
  Assert.assertEquals(2,cmdArray.length);
  Assert.assertEquals(customExecutorPath,cmdArray[0]);
  Assert.assertEquals(op.getOperationType().getOption(),cmdArray[1]);
  String[] additionalArgs={"cmd_file_1","cmd_file_2","cmd_file_3"};
  op.appendArgs(additionalArgs);
  cmdArray=exec.getPrivilegedOperationExecutionCommand(null,op);
  Assert.assertEquals(2 + additionalArgs.length,cmdArray.length);
  Assert.assertEquals(customExecutorPath,cmdArray[0]);
  Assert.assertEquals(op.getOperationType().getOption(),cmdArray[1]);
  for (int i=0; i < additionalArgs.length; ++i) {
    Assert.assertEquals(additionalArgs[i],cmdArray[2 + i]);
  }
  List<String> prefixCommands=Arrays.asList("nice","-10");
  cmdArray=exec.getPrivilegedOperationExecutionCommand(prefixCommands,op);
  int prefixLength=prefixCommands.size();
  Assert.assertEquals(prefixLength + 2 + additionalArgs.length,cmdArray.length);
  for (int i=0; i < prefixLength; ++i) {
    Assert.assertEquals(prefixCommands.get(i),cmdArray[i]);
  }
  Assert.assertEquals(customExecutorPath,cmdArray[prefixLength]);
  Assert.assertEquals(op.getOperationType().getOption(),cmdArray[prefixLength + 1]);
  for (int i=0; i < additionalArgs.length; ++i) {
    Assert.assertEquals(additionalArgs[i],cmdArray[prefixLength + 2 + i]);
  }
}
