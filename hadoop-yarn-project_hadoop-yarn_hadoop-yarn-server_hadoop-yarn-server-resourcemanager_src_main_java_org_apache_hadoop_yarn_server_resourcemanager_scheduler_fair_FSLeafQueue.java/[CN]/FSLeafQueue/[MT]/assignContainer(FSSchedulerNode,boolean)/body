{
  LOG.debug("Node offered to queue: " + getName() + " reserved: "+ reserved);
  if (Resources.greaterThan(getResourceUsage(),queueMgr.getMaxResources(getName()))) {
    return Resources.none();
  }
  if (reserved) {
    for (    AppSchedulable sched : appScheds) {
      if (sched.getApp().getApplicationAttemptId() == node.getReservedContainer().getApplicationAttemptId()) {
        return sched.assignContainer(node,reserved);
      }
    }
    return Resources.none();
  }
 else {
    Comparator<Schedulable> comparator;
    if (schedulingMode == SchedulingMode.FIFO) {
      comparator=new SchedulingAlgorithms.FifoComparator();
    }
 else     if (schedulingMode == SchedulingMode.FAIR) {
      comparator=new SchedulingAlgorithms.FairShareComparator();
    }
 else {
      throw new RuntimeException("Unsupported queue scheduling mode " + schedulingMode);
    }
    Collections.sort(appScheds,comparator);
    for (    AppSchedulable sched : appScheds) {
      return sched.assignContainer(node,reserved);
    }
    return Resources.none();
  }
}
