{
  String jid=$(JOB_ID);
  if (jid.isEmpty()) {
    html.p()._("Sorry, can't do anything without a JobID.")._();
    return;
  }
  JobId jobID=MRApps.toJobID(jid);
  Job job=appContext.getJob(jobID);
  if (job == null) {
    html.p()._("Sorry, ",jid," not found.")._();
    return;
  }
  Map<JobACL,AccessControlList> acls=job.getJobACLs();
  JobReport jobReport=job.getReport();
  int mapTasks=job.getTotalMaps();
  int mapTasksComplete=job.getCompletedMaps();
  int reduceTasks=job.getTotalReduces();
  int reducesTasksComplete=job.getCompletedReduces();
  long startTime=jobReport.getStartTime();
  long finishTime=jobReport.getFinishTime();
  countTasksAndAttempts(job);
  ResponseInfo infoBlock=info("Job Overview")._("Job Name:",job.getName())._("User Name:",job.getUserName())._("State:",job.getState())._("Uberized:",job.isUber())._("Started:",new Date(startTime))._("Finished:",new Date(finishTime))._("Elapsed:",StringUtils.formatTime(Times.elapsed(startTime,finishTime,false)));
  List<String> diagnostics=job.getDiagnostics();
  if (diagnostics != null && !diagnostics.isEmpty()) {
    StringBuffer b=new StringBuffer();
    for (    String diag : diagnostics) {
      b.append(diag);
    }
    infoBlock._("Diagnostics:",b.toString());
  }
  if (numMaps > 0) {
    infoBlock._("Average Map Time",StringUtils.formatTime(avgMapTime));
  }
  if (numReduces > 0) {
    infoBlock._("Average Reduce Time",StringUtils.formatTime(avgReduceTime));
    infoBlock._("Average Shuffle Time",StringUtils.formatTime(avgShuffleTime));
    infoBlock._("Average Merge Time",StringUtils.formatTime(avgSortTime));
  }
  for (  Map.Entry<JobACL,AccessControlList> entry : acls.entrySet()) {
    infoBlock._("ACL " + entry.getKey().getAclName() + ":",entry.getValue().getAclString());
  }
  html._(InfoBlock.class).div(_INFO_WRAP).table("#job").tr().th(_TH,"Task Type").th(_TH,"Total").th(_TH,"Complete")._().tr(_ODD).th().a(url("tasks",jid,"m"),"Map")._().td(String.valueOf(mapTasks)).td(String.valueOf(mapTasksComplete))._().tr(_EVEN).th().a(url("tasks",jid,"r"),"Reduce")._().td(String.valueOf(reduceTasks)).td(String.valueOf(reducesTasksComplete))._()._().table("#job").tr().th(_TH,"Attempt Type").th(_TH,"Failed").th(_TH,"Killed").th(_TH,"Successful")._().tr(_ODD).th("Maps").td().a(url("attempts",jid,"m",TaskAttemptStateUI.FAILED.toString()),String.valueOf(failedMapAttempts))._().td().a(url("attempts",jid,"m",TaskAttemptStateUI.KILLED.toString()),String.valueOf(killedMapAttempts))._().td().a(url("attempts",jid,"m",TaskAttemptStateUI.SUCCESSFUL.toString()),String.valueOf(successfulMapAttempts))._()._().tr(_EVEN).th("Reduces").td().a(url("attempts",jid,"r",TaskAttemptStateUI.FAILED.toString()),String.valueOf(failedReduceAttempts))._().td().a(url("attempts",jid,"r",TaskAttemptStateUI.KILLED.toString()),String.valueOf(killedReduceAttempts))._().td().a(url("attempts",jid,"r",TaskAttemptStateUI.SUCCESSFUL.toString()),String.valueOf(successfulReduceAttempts))._()._()._()._();
}
