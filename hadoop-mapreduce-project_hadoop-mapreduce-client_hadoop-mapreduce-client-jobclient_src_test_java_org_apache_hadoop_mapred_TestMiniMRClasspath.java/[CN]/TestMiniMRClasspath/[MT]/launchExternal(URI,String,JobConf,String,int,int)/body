{
  final Path inDir=new Path("/testing/ext/input");
  final Path outDir=new Path("/testing/ext/output");
  FileSystem fs=FileSystem.get(uri,conf);
  fs.delete(outDir,true);
  if (!fs.mkdirs(inDir)) {
    throw new IOException("Mkdirs failed to create " + inDir.toString());
  }
{
    DataOutputStream file=fs.create(new Path(inDir,"part-0"));
    file.writeBytes(input);
    file.close();
  }
  FileSystem.setDefaultUri(conf,uri);
  conf.set(JTConfig.FRAMEWORK_NAME,JTConfig.CLASSIC_FRAMEWORK_NAME);
  conf.set(JTConfig.JT_IPC_ADDRESS,jobTracker);
  conf.setJobName("wordcount");
  conf.setInputFormat(TextInputFormat.class);
  conf.setOutputValueClass(IntWritable.class);
  conf.set(JobContext.OUTPUT_KEY_CLASS,"testjar.ExternalWritable");
  FileInputFormat.setInputPaths(conf,inDir);
  FileOutputFormat.setOutputPath(conf,outDir);
  conf.setNumMapTasks(numMaps);
  conf.setNumReduceTasks(numReduces);
  conf.set("mapred.mapper.class","testjar.ExternalMapperReducer");
  conf.set("mapred.reducer.class","testjar.ExternalMapperReducer");
  conf.setJar("build/test/mapred/testjar/testjob.jar");
  JobClient.runJob(conf);
  StringBuffer result=new StringBuffer();
  Path[] fileList=FileUtil.stat2Paths(fs.listStatus(outDir,new Utils.OutputFileUtils.OutputFilesFilter()));
  for (int i=0; i < fileList.length; ++i) {
    BufferedReader file=new BufferedReader(new InputStreamReader(fs.open(fileList[i])));
    String line=file.readLine();
    while (line != null) {
      result.append(line);
      line=file.readLine();
      result.append("\n");
    }
    file.close();
  }
  return result.toString();
}
