{
  int nodeMem=16 * 1024;
  int nodeVCores=10;
  createClusterWithQueuesAndOneNode(nodeMem,nodeVCores,"drf");
  createSchedulingRequest(2 * 1024,"root.parentA.childA1","user1");
  createSchedulingRequest(3 * 1024,"root.parentA.childA2","user2");
  createSchedulingRequest(1 * 1024,"root.parentB.childB1","user3");
  createSchedulingRequest(1 * 1024,"root.default","user4");
  scheduler.update();
  for (int i=1; i <= 2; i++) {
    assertEquals(40,(double)scheduler.getQueueManager().getLeafQueue("root.parentA.childA" + i,false).getFairShare().getMemorySize() / nodeMem * 100,.9);
    assertEquals(40,(double)scheduler.getQueueManager().getLeafQueue("root.parentA.childA" + i,false).getFairShare().getVirtualCores() / nodeVCores * 100,.9);
  }
  assertEquals(10,(double)scheduler.getQueueManager().getLeafQueue("root.parentB.childB1",false).getFairShare().getMemorySize() / nodeMem * 100,.9);
  assertEquals(10,(double)scheduler.getQueueManager().getLeafQueue("root.parentB.childB1",false).getFairShare().getVirtualCores() / nodeVCores * 100,.9);
  Collection<FSLeafQueue> leafQueues=scheduler.getQueueManager().getLeafQueues();
  for (  FSLeafQueue leaf : leafQueues) {
    if (leaf.getName().startsWith("root.parentA")) {
      assertEquals(0.2,(double)leaf.getSteadyFairShare().getMemorySize() / nodeMem,0.001);
      assertEquals(0.2,(double)leaf.getSteadyFairShare().getVirtualCores() / nodeVCores,0.001);
    }
 else     if (leaf.getName().startsWith("root.parentB")) {
      assertEquals(0.05,(double)leaf.getSteadyFairShare().getMemorySize() / nodeMem,0.001);
      assertEquals(0.1,(double)leaf.getSteadyFairShare().getVirtualCores() / nodeVCores,0.001);
    }
  }
}
