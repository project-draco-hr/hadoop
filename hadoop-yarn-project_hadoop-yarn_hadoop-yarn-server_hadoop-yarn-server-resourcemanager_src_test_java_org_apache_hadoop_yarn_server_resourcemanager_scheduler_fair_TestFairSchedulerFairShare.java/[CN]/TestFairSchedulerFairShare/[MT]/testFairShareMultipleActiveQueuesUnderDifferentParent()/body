{
  int nodeCapacity=16 * 1024;
  createClusterWithQueuesAndOneNode(nodeCapacity,"fair");
  createSchedulingRequest(2 * 1024,"root.parentA.childA1","user1");
  createSchedulingRequest(3 * 1024,"root.parentA.childA2","user2");
  createSchedulingRequest(1 * 1024,"root.parentB.childB1","user3");
  createSchedulingRequest(1 * 1024,"root.default","user4");
  scheduler.update();
  for (int i=1; i <= 2; i++) {
    assertEquals(40,(double)scheduler.getQueueManager().getLeafQueue("root.parentA.childA" + i,false).getFairShare().getMemorySize() / nodeCapacity * 100,.9);
  }
  assertEquals(10,(double)scheduler.getQueueManager().getLeafQueue("root.parentB.childB1",false).getFairShare().getMemorySize() / nodeCapacity * 100,.9);
  verifySteadyFairShareMemory(scheduler.getQueueManager().getLeafQueues(),nodeCapacity);
}
