{
  int nodeCapacity=16 * 1024;
  createClusterWithQueuesAndOneNode(nodeCapacity,"fair");
  createSchedulingRequest(2 * 1024,"root.parentA.childA1","user1");
  createSchedulingRequest(2 * 1024,"root.parentA.childA2","user2");
  createSchedulingRequest(2 * 1024,"root.parentA.childA3","user3");
  scheduler.update();
  for (int i=1; i <= 3; i++) {
    assertEquals(33,(double)scheduler.getQueueManager().getLeafQueue("root.parentA.childA" + i,false).getFairShare().getMemorySize() / nodeCapacity * 100,.9);
  }
  verifySteadyFairShareMemory(scheduler.getQueueManager().getLeafQueues(),nodeCapacity);
}
