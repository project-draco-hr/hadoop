{
  int nodeCapacity=16 * 1024;
  createClusterWithQueuesAndOneNode(nodeCapacity,"fair");
  ApplicationAttemptId app1=createSchedulingRequest(2 * 1024,"root.parentA.childA1","user1");
  ApplicationAttemptId app2=createSchedulingRequest(3 * 1024,"root.parentA.childA2","user2");
  scheduler.update();
  for (int i=1; i <= 2; i++) {
    assertEquals(50,(double)scheduler.getQueueManager().getLeafQueue("root.parentA.childA" + i,false).getFairShare().getMemory() / nodeCapacity * 100,.9);
  }
  AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(app1,RMAppAttemptState.FINISHED,false);
  scheduler.handle(appRemovedEvent1);
  scheduler.update();
  assertEquals(0,(double)scheduler.getQueueManager().getLeafQueue("root.parentA.childA1",false).getFairShare().getMemory() / nodeCapacity * 100,0);
  assertEquals(100,(double)scheduler.getQueueManager().getLeafQueue("root.parentA.childA2",false).getFairShare().getMemory() / nodeCapacity * 100,0.1);
  verifySteadyFairShareMemory(scheduler.getQueueManager().getLeafQueues(),nodeCapacity);
}
