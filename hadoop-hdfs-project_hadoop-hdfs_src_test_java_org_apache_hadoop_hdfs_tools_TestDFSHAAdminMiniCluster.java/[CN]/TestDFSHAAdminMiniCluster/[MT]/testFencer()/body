{
  assertEquals(-1,runTool("-failover","nn1","nn2"));
  File tmpFile=File.createTempFile("testFencer",".txt");
  tmpFile.deleteOnExit();
  if (Shell.WINDOWS) {
    conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,"shell(echo %target_nameserviceid%.%target_namenodeid% " + "%target_port% %dfs_ha_namenode_id% > " + tmpFile.getAbsolutePath() + ")");
  }
 else {
    conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,"shell(echo -n $target_nameserviceid.$target_namenodeid " + "$target_port $dfs_ha_namenode_id > " + tmpFile.getAbsolutePath() + ")");
  }
  tool.setConf(conf);
  assertEquals(0,runTool("-transitionToActive","nn1"));
  assertEquals(0,runTool("-failover","nn1","nn2"));
  assertEquals(0,runTool("-ns","minidfs-ns","-failover","nn2","nn1"));
  assertEquals("",Files.toString(tmpFile,Charsets.UTF_8));
  assertEquals(0,runTool("-failover","nn1","nn2","--forcefence"));
  String fenceCommandOutput=Files.toString(tmpFile,Charsets.UTF_8).replaceAll(" *[\r\n]+","");
  assertEquals("minidfs-ns.nn1 " + nn1Port + " nn1",fenceCommandOutput);
  tmpFile.delete();
  assertEquals(0,runTool("-failover","nn2","nn1","--forceactive"));
  assertFalse(tmpFile.exists());
  conf.unset(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY);
  tool.setConf(conf);
  assertEquals(-1,runTool("-failover","nn1","nn2","--forcefence"));
  assertFalse(tmpFile.exists());
  conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,"foobar!");
  tool.setConf(conf);
  assertEquals(-1,runTool("-failover","nn1","nn2","--forcefence"));
  assertFalse(tmpFile.exists());
  conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,TestDFSHAAdmin.getFencerTrueCommand());
  tool.setConf(conf);
  assertEquals(0,runTool("-failover","--forcefence","nn1","nn2"));
}
