{
  while (keepRunning) {
    AllocateResponse response;
    try {
      if (savedException != null) {
        LOG.error("Stopping callback due to: ",savedException);
        handler.onError(savedException);
        break;
      }
      response=responseQueue.take();
    }
 catch (    InterruptedException ex) {
      LOG.info("Interrupted while waiting for queue",ex);
      continue;
    }
    if (response.getAMCommand() != null) {
      boolean stop=false;
switch (response.getAMCommand()) {
case AM_RESYNC:
case AM_SHUTDOWN:
        handler.onShutdownRequest();
      LOG.info("Shutdown requested. Stopping callback.");
    stop=true;
  break;
default :
String msg="Unhandled value of AMCommand: " + response.getAMCommand();
LOG.error(msg);
throw new YarnRuntimeException(msg);
}
if (stop) {
break;
}
}
List<NodeReport> updatedNodes=response.getUpdatedNodes();
if (!updatedNodes.isEmpty()) {
handler.onNodesUpdated(updatedNodes);
}
List<ContainerStatus> completed=response.getCompletedContainersStatuses();
if (!completed.isEmpty()) {
handler.onContainersCompleted(completed);
}
List<Container> allocated=response.getAllocatedContainers();
if (!allocated.isEmpty()) {
handler.onContainersAllocated(allocated);
}
progress=handler.getProgress();
}
}
