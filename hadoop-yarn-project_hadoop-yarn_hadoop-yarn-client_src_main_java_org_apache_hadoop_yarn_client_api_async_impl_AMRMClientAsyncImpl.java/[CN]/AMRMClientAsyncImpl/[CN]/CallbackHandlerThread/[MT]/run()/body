{
  while (true) {
    if (!keepRunning) {
      return;
    }
    try {
      AllocateResponse response;
      if (savedException != null) {
        LOG.error("Stopping callback due to: ",savedException);
        handler.onError(savedException);
        return;
      }
      try {
        response=responseQueue.take();
      }
 catch (      InterruptedException ex) {
        LOG.info("Interrupted while waiting for queue",ex);
        continue;
      }
      if (response.getAMCommand() != null) {
switch (response.getAMCommand()) {
case AM_SHUTDOWN:
          handler.onShutdownRequest();
        LOG.info("Shutdown requested. Stopping callback.");
      return;
default :
    String msg="Unhandled value of RM AMCommand: " + response.getAMCommand();
  LOG.error(msg);
throw new YarnRuntimeException(msg);
}
}
List<NodeReport> updatedNodes=response.getUpdatedNodes();
if (!updatedNodes.isEmpty()) {
handler.onNodesUpdated(updatedNodes);
}
List<ContainerStatus> completed=response.getCompletedContainersStatuses();
if (!completed.isEmpty()) {
handler.onContainersCompleted(completed);
}
List<Container> allocated=response.getAllocatedContainers();
if (!allocated.isEmpty()) {
handler.onContainersAllocated(allocated);
}
progress=handler.getProgress();
}
 catch (Throwable ex) {
handler.onError(ex);
throw new YarnRuntimeException(ex);
}
}
}
