{
  statistics=stat;
  ClientConfiguration clientConf=new ClientConfiguration();
  clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,MAXIMUM_CONNECTIONS_DEFAULT));
  boolean secureConnections=conf.getBoolean(SECURE_CONNECTIONS_KEY,SECURE_CONNECTIONS_DEFAULT);
  clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);
  clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,MAX_ERROR_RETRIES_DEFAULT));
  clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,ESTABLISH_TIMEOUT_DEFAULT));
  clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,SOCKET_TIMEOUT_DEFAULT));
  String proxyHost=conf.getTrimmed(PROXY_HOST_KEY,"");
  int proxyPort=conf.getInt(PROXY_PORT_KEY,-1);
  if (StringUtils.isNotEmpty(proxyHost)) {
    clientConf.setProxyHost(proxyHost);
    if (proxyPort >= 0) {
      clientConf.setProxyPort(proxyPort);
    }
 else {
      if (secureConnections) {
        LOG.warn("Proxy host set without port. Using HTTPS default 443");
        clientConf.setProxyPort(443);
      }
 else {
        LOG.warn("Proxy host set without port. Using HTTP default 80");
        clientConf.setProxyPort(80);
      }
    }
    String proxyUsername=conf.getTrimmed(PROXY_USERNAME_KEY);
    String proxyPassword=conf.getTrimmed(PROXY_PASSWORD_KEY);
    if ((proxyUsername == null) != (proxyPassword == null)) {
      String msg="Proxy error: " + PROXY_USERNAME_KEY + " or "+ PROXY_PASSWORD_KEY+ " set without the other.";
      LOG.error(msg);
      throw new IllegalArgumentException(msg);
    }
    clientConf.setProxyUsername(proxyUsername);
    clientConf.setProxyPassword(proxyPassword);
    clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));
    clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));
  }
 else   if (proxyPort >= 0) {
    String msg="Proxy error: " + PROXY_PORT_KEY + " set without "+ PROXY_HOST_KEY;
    LOG.error(msg);
    throw new IllegalArgumentException(msg);
  }
  String endPoint=conf.getTrimmed(ENDPOINT_KEY,"");
  CredentialsProvider provider=AliyunOSSUtils.getCredentialsProvider(conf);
  ossClient=new OSSClient(endPoint,provider,clientConf);
  uploadPartSize=conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,MULTIPART_UPLOAD_SIZE_DEFAULT);
  multipartThreshold=conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);
  partSize=conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,MULTIPART_UPLOAD_SIZE_DEFAULT);
  if (partSize < MIN_MULTIPART_UPLOAD_PART_SIZE) {
    partSize=MIN_MULTIPART_UPLOAD_PART_SIZE;
  }
  serverSideEncryptionAlgorithm=conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY,"");
  if (uploadPartSize < 5 * 1024 * 1024) {
    LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + " must be at least 5 MB");
    uploadPartSize=5 * 1024 * 1024;
  }
  if (multipartThreshold < 5 * 1024 * 1024) {
    LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + " must be at least 5 MB");
    multipartThreshold=5 * 1024 * 1024;
  }
  if (multipartThreshold > 1024 * 1024 * 1024) {
    LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + " must be less than 1 GB");
    multipartThreshold=1024 * 1024 * 1024;
  }
  String cannedACLName=conf.get(CANNED_ACL_KEY,CANNED_ACL_DEFAULT);
  if (StringUtils.isNotEmpty(cannedACLName)) {
    CannedAccessControlList cannedACL=CannedAccessControlList.valueOf(cannedACLName);
    ossClient.setBucketAcl(bucketName,cannedACL);
  }
  maxKeys=conf.getInt(MAX_PAGING_KEYS_KEY,MAX_PAGING_KEYS_DEFAULT);
  bucketName=uri.getHost();
}
