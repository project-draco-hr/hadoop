{
  final Configuration conf=new HdfsConfiguration();
  initConf(conf);
  long[] capacities=new long[]{4 * CAPACITY};
  String[] racks=new String[]{RACK0};
  long newCapacity=2 * CAPACITY;
  String newRack=RACK0;
  LOG.info("capacities = " + long2String(capacities));
  LOG.info("racks      = " + Arrays.asList(racks));
  LOG.info("newCapacity= " + newCapacity);
  LOG.info("newRack    = " + newRack);
  LOG.info("useTool    = " + false);
  assertEquals(capacities.length,racks.length);
  int numOfDatanodes=capacities.length;
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(capacities.length).racks(racks).simulatedCapacities(capacities).build();
  try {
    cluster.waitActive();
    client=NameNodeProxies.createProxy(conf,cluster.getFileSystem(0).getUri(),ClientProtocol.class).getProxy();
    long totalCapacity=sum(capacities);
    final long totalUsedSpace=totalCapacity * 3 / 10;
    createFile(cluster,filePath,totalUsedSpace / numOfDatanodes,(short)numOfDatanodes,0);
    cluster.startDataNodes(conf,1,true,null,new String[]{newRack},new long[]{newCapacity});
    FileSystem fs=cluster.getFileSystem(0);
    final FSDataOutputStream out=fs.create(Balancer.BALANCER_ID_PATH,false);
    out.writeBytes(InetAddress.getLocalHost().getHostName());
    out.hflush();
    assertTrue("'balancer.id' file doesn't exist!",fs.exists(Balancer.BALANCER_ID_PATH));
    final String[] args={"-policy","datanode"};
    final Tool tool=new Cli();
    tool.setConf(conf);
    int exitCode=tool.run(args);
    assertEquals("Exit status code mismatches",ExitStatus.IO_EXCEPTION.getExitCode(),exitCode);
    out.close();
    assertTrue("'balancer.id' file doesn't exist!",fs.exists(Balancer.BALANCER_ID_PATH));
    exitCode=tool.run(args);
    assertEquals("Exit status code mismatches",ExitStatus.SUCCESS.getExitCode(),exitCode);
  }
  finally {
    cluster.shutdown();
  }
}
