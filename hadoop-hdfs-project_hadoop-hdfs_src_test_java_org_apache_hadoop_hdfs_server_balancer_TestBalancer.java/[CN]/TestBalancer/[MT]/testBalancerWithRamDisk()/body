{
  final int SEED=0xFADED;
  final short REPL_FACT=1;
  Configuration conf=new Configuration();
  initConfWithRamDisk(conf);
  final int defaultRamDiskCapacity=10;
  final long ramDiskStorageLimit=((long)defaultRamDiskCapacity * DEFAULT_RAM_DISK_BLOCK_SIZE) + (DEFAULT_RAM_DISK_BLOCK_SIZE - 1);
  final long diskStorageLimit=((long)defaultRamDiskCapacity * DEFAULT_RAM_DISK_BLOCK_SIZE) + (DEFAULT_RAM_DISK_BLOCK_SIZE - 1);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).storageCapacities(new long[]{ramDiskStorageLimit,diskStorageLimit}).storageTypes(new StorageType[]{RAM_DISK,DEFAULT}).build();
  try {
    cluster.waitActive();
    final String METHOD_NAME=GenericTestUtils.getMethodName();
    final Path path1=new Path("/" + METHOD_NAME + ".01.dat");
    final Path path2=new Path("/" + METHOD_NAME + ".02.dat");
    DistributedFileSystem fs=cluster.getFileSystem();
    DFSClient client=fs.getClient();
    DFSTestUtil.createFile(fs,path1,true,DEFAULT_RAM_DISK_BLOCK_SIZE,4 * DEFAULT_RAM_DISK_BLOCK_SIZE,DEFAULT_RAM_DISK_BLOCK_SIZE,REPL_FACT,SEED,true);
    DFSTestUtil.createFile(fs,path2,true,DEFAULT_RAM_DISK_BLOCK_SIZE,1 * DEFAULT_RAM_DISK_BLOCK_SIZE,DEFAULT_RAM_DISK_BLOCK_SIZE,REPL_FACT,SEED,true);
    Thread.sleep(6 * 1000);
    StorageType[][] storageTypes=new StorageType[][]{{RAM_DISK,DEFAULT}};
    long[][] storageCapacities=new long[][]{{ramDiskStorageLimit,diskStorageLimit}};
    cluster.startDataNodes(conf,REPL_FACT,storageTypes,true,null,null,null,storageCapacities,null,false,false,false,null);
    cluster.triggerHeartbeats();
    Collection<URI> namenodes=DFSUtil.getNsServiceRpcUris(conf);
    Balancer.Parameters p=new Balancer.Parameters(Parameters.DEFAULT.policy,Parameters.DEFAULT.threshold,Balancer.Parameters.DEFAULT.maxIdleIteration,Parameters.DEFAULT.nodesToBeExcluded,Parameters.DEFAULT.nodesToBeIncluded);
    final int r=Balancer.run(namenodes,p,conf);
    assertEquals(ExitStatus.NO_MOVE_PROGRESS.getExitCode(),r);
    DFSTestUtil.verifyFileReplicasOnStorageType(fs,client,path1,RAM_DISK);
    DFSTestUtil.verifyFileReplicasOnStorageType(fs,client,path2,RAM_DISK);
  }
  finally {
    cluster.shutdown();
  }
}
