{
  LOG.info("capacities = " + long2String(capacities));
  LOG.info("racks      = " + Arrays.asList(racks));
  LOG.info("newCapacity= " + newCapacity);
  LOG.info("newRack    = " + newRack);
  LOG.info("useTool    = " + useTool);
  assertEquals(capacities.length,racks.length);
  int numOfDatanodes=capacities.length;
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(capacities.length).racks(racks).simulatedCapacities(capacities).build();
  try {
    cluster.waitActive();
    client=NameNodeProxies.createProxy(conf,cluster.getFileSystem(0).getUri(),ClientProtocol.class).getProxy();
    long totalCapacity=sum(capacities);
    long totalUsedSpace=totalCapacity * 3 / 10;
    createFile(cluster,filePath,totalUsedSpace / numOfDatanodes,(short)numOfDatanodes,0);
    cluster.startDataNodes(conf,1,true,null,new String[]{newRack},new long[]{newCapacity});
    totalCapacity+=newCapacity;
    if (useTool) {
      runBalancerCli(conf,totalUsedSpace,totalCapacity);
    }
 else {
      runBalancer(conf,totalUsedSpace,totalCapacity);
    }
  }
  finally {
    cluster.shutdown();
  }
}
