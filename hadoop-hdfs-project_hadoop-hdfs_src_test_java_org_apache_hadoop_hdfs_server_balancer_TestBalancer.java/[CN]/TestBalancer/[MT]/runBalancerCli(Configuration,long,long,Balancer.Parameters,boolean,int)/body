{
  waitForHeartBeat(totalUsedSpace,totalCapacity,client,cluster);
  List<String> args=new ArrayList<String>();
  args.add("-policy");
  args.add("datanode");
  File excludeHostsFile=null;
  if (!p.excludedNodes.isEmpty()) {
    args.add("-exclude");
    if (useFile) {
      excludeHostsFile=new File("exclude-hosts-file");
      PrintWriter pw=new PrintWriter(excludeHostsFile);
      for (      String host : p.excludedNodes) {
        pw.write(host + "\n");
      }
      pw.close();
      args.add("-f");
      args.add("exclude-hosts-file");
    }
 else {
      args.add(StringUtils.join(p.excludedNodes,','));
    }
  }
  File includeHostsFile=null;
  if (!p.includedNodes.isEmpty()) {
    args.add("-include");
    if (useFile) {
      includeHostsFile=new File("include-hosts-file");
      PrintWriter pw=new PrintWriter(includeHostsFile);
      for (      String host : p.includedNodes) {
        pw.write(host + "\n");
      }
      pw.close();
      args.add("-f");
      args.add("include-hosts-file");
    }
 else {
      args.add(StringUtils.join(p.includedNodes,','));
    }
  }
  final Tool tool=new Cli();
  tool.setConf(conf);
  final int r=tool.run(args.toArray(new String[0]));
  assertEquals("Tools should exit 0 on success",0,r);
  waitForHeartBeat(totalUsedSpace,totalCapacity,client,cluster);
  LOG.info("Rebalancing with default ctor.");
  waitForBalancer(totalUsedSpace,totalCapacity,client,cluster,p,expectedExcludedNodes);
  if (excludeHostsFile != null && excludeHostsFile.exists()) {
    excludeHostsFile.delete();
  }
  if (includeHostsFile != null && includeHostsFile.exists()) {
    includeHostsFile.delete();
  }
}
