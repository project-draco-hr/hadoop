{
  final FSQueue queue=(FSQueue)this.queue;
  SchedulingPolicy policy=queue.getPolicy();
  Resource queueFairShare=queue.getFairShare();
  Resource queueUsage=queue.getResourceUsage();
  Resource clusterResource=this.scheduler.getClusterResource();
  Resource clusterUsage=this.scheduler.getRootQueueMetrics().getAllocatedResources();
  Resource clusterAvailableResources=Resources.subtract(clusterResource,clusterUsage);
  subtractResourcesOnBlacklistedNodes(clusterAvailableResources);
  Resource queueMaxAvailableResources=Resources.subtract(queue.getMaxShare(),queueUsage);
  Resource maxAvailableResource=Resources.componentwiseMin(clusterAvailableResources,queueMaxAvailableResources);
  Resource headroom=policy.getHeadroom(queueFairShare,queueUsage,maxAvailableResource);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Headroom calculation for " + this.getName() + ":"+ "Min("+ "(queueFairShare="+ queueFairShare+ " - queueUsage="+ queueUsage+ "),"+ " maxAvailableResource="+ maxAvailableResource+ "Headroom="+ headroom);
  }
  return headroom;
}
