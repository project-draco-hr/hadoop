{
  RMContainer rmContainer;
  Container container;
  try {
    writeLock.lock();
    NodeType allowed=allowedLocalityLevel.get(schedulerKey);
    if (allowed != null) {
      if (allowed.equals(NodeType.OFF_SWITCH) && (type.equals(NodeType.NODE_LOCAL) || type.equals(NodeType.RACK_LOCAL))) {
        this.resetAllowedLocalityLevel(schedulerKey,type);
      }
 else       if (allowed.equals(NodeType.RACK_LOCAL) && type.equals(NodeType.NODE_LOCAL)) {
        this.resetAllowedLocalityLevel(schedulerKey,type);
      }
    }
    if (getTotalRequiredResources(schedulerKey) <= 0) {
      return null;
    }
    container=reservedContainer;
    if (container == null) {
      container=createContainer(node,request.getCapability(),schedulerKey);
    }
    rmContainer=new RMContainerImpl(container,getApplicationAttemptId(),node.getNodeID(),appSchedulingInfo.getUser(),rmContext);
    ((RMContainerImpl)rmContainer).setQueueName(this.getQueueName());
    newlyAllocatedContainers.add(rmContainer);
    liveContainers.put(container.getId(),rmContainer);
    List<ResourceRequest> resourceRequestList=appSchedulingInfo.allocate(type,node,schedulerKey,request,container);
    this.attemptResourceUsage.incUsed(container.getResource());
    ((RMContainerImpl)rmContainer).setResourceRequests(resourceRequestList);
    rmContainer.handle(new RMContainerEvent(container.getId(),RMContainerEventType.START));
    if (LOG.isDebugEnabled()) {
      LOG.debug("allocate: applicationAttemptId=" + container.getId().getApplicationAttemptId() + " container="+ container.getId()+ " host="+ container.getNodeId().getHost()+ " type="+ type);
    }
    RMAuditLogger.logSuccess(getUser(),AuditConstants.ALLOC_CONTAINER,"SchedulerApp",getApplicationId(),container.getId(),container.getResource());
  }
  finally {
    writeLock.unlock();
  }
  return rmContainer;
}
