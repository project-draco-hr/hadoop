{
  long fileLen=CELLSIZE * DATA_BLK_NUM;
  DFSTestUtil.createStripedFile(cluster,filePath,null,1,NUM_STRIPE_PER_BLOCK,false);
  LocatedBlocks lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
  LocatedStripedBlock bg=(LocatedStripedBlock)(lbs.get(0));
  long gs=bg.getBlock().getGenerationStamp();
  String bpid=bg.getBlock().getBlockPoolId();
  long groupId=bg.getBlock().getBlockId();
  Block blk=new Block(groupId,BLOCK_SIZE,gs);
  for (int i=0; i < GROUP_SIZE - 1; i++) {
    blk.setBlockId(groupId + i);
    cluster.injectBlocks(i,Arrays.asList(blk),bpid);
  }
  cluster.triggerBlockReports();
  blk.setBlockId(groupId + 2);
  cluster.injectBlocks(numDNs - 3,Arrays.asList(blk),bpid);
  cluster.injectBlocks(numDNs - 2,Arrays.asList(blk),bpid);
  cluster.triggerBlockReports();
  Thread.sleep(2000);
  cluster.triggerHeartbeats();
  cluster.triggerHeartbeats();
  cluster.triggerBlockReports();
  lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
  bg=(LocatedStripedBlock)(lbs.get(0));
  assertEquals(GROUP_SIZE + 1,bg.getBlockIndices().length);
  assertEquals(GROUP_SIZE + 1,bg.getLocations().length);
  BitSet set=new BitSet(GROUP_SIZE);
  for (  byte index : bg.getBlockIndices()) {
    set.set(index);
  }
  Assert.assertFalse(set.get(GROUP_SIZE - 1));
  for (int i=0; i < GROUP_SIZE - 1; i++) {
    assertTrue(set.get(i));
  }
}
