{
  long fileLen=DATA_BLK_NUM * BLOCK_SIZE;
  DFSTestUtil.createStripedFile(cluster,filePath,null,1,NUM_STRIPE_PER_BLOCK,false);
  LocatedBlocks lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
  LocatedStripedBlock bg=(LocatedStripedBlock)(lbs.get(0));
  long gs=bg.getBlock().getGenerationStamp();
  String bpid=bg.getBlock().getBlockPoolId();
  long groupId=bg.getBlock().getBlockId();
  Block blk=new Block(groupId,BLOCK_SIZE,gs);
  BlockInfoStriped blockInfo=new BlockInfoStriped(blk,ErasureCodingPolicyManager.getSystemDefaultPolicy());
  for (int i=0; i < GROUP_SIZE; i++) {
    blk.setBlockId(groupId + i);
    cluster.injectBlocks(i,Arrays.asList(blk),bpid);
  }
  cluster.triggerBlockReports();
  BlockManager bm=cluster.getNamesystem().getBlockManager();
  List<DatanodeInfo> infos=Arrays.asList(bg.getLocations());
  List<String> storages=Arrays.asList(bg.getStorageIDs());
  cluster.getNamesystem().writeLock();
  try {
    bm.findAndMarkBlockAsCorrupt(lbs.getLastLocatedBlock().getBlock(),infos.get(0),storages.get(0),"TEST");
  }
  finally {
    cluster.getNamesystem().writeUnlock();
  }
  assertEquals(1,bm.countNodes(blockInfo).corruptReplicas());
  blk.setBlockId(groupId + 2);
  cluster.injectBlocks(numDNs - 3,Arrays.asList(blk),bpid);
  cluster.injectBlocks(numDNs - 2,Arrays.asList(blk),bpid);
  cluster.triggerBlockReports();
  cluster.triggerHeartbeats();
  cluster.triggerHeartbeats();
  cluster.triggerBlockReports();
  lbs=cluster.getNameNodeRpc().getBlockLocations(filePath.toString(),0,fileLen);
  StripedFileTestUtil.verifyLocatedStripedBlocks(lbs,GROUP_SIZE);
}
