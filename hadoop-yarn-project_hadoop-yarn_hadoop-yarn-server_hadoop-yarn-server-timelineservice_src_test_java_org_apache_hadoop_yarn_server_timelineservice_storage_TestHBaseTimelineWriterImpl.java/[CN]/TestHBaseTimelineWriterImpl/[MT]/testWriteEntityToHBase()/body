{
  TimelineEntities te=new TimelineEntities();
  TimelineEntity entity=new TimelineEntity();
  String id="hello";
  String type="world";
  entity.setId(id);
  entity.setType(type);
  Long cTime=1425016501000L;
  Long mTime=1425026901000L;
  entity.setCreatedTime(cTime);
  entity.setModifiedTime(mTime);
  String key="task";
  String value="is_related_to_entity_id_here";
  Set<String> isRelatedToSet=new HashSet<String>();
  isRelatedToSet.add(value);
  Map<String,Set<String>> isRelatedTo=new HashMap<String,Set<String>>();
  isRelatedTo.put(key,isRelatedToSet);
  entity.setIsRelatedToEntities(isRelatedTo);
  key="container";
  value="relates_to_entity_id_here";
  Set<String> relatesToSet=new HashSet<String>();
  relatesToSet.add(value);
  value="relates_to_entity_id_here_Second";
  relatesToSet.add(value);
  Map<String,Set<String>> relatesTo=new HashMap<String,Set<String>>();
  relatesTo.put(key,relatesToSet);
  entity.setRelatesToEntities(relatesTo);
  Map<String,String> conf=new HashMap<String,String>();
  conf.put("config_param1","value1");
  conf.put("config_param2","value2");
  entity.addConfigs(conf);
  Set<TimelineMetric> metrics=new HashSet<>();
  TimelineMetric m1=new TimelineMetric();
  m1.setId("MAP_SLOT_MILLIS");
  Map<Long,Number> metricValues=new HashMap<Long,Number>();
  long ts=System.currentTimeMillis();
  metricValues.put(ts - 120000,100000000);
  metricValues.put(ts - 100000,200000000);
  metricValues.put(ts - 80000,300000000);
  metricValues.put(ts - 60000,400000000);
  metricValues.put(ts - 40000,50000000000L);
  metricValues.put(ts - 20000,60000000000L);
  m1.setType(Type.TIME_SERIES);
  m1.setValues(metricValues);
  metrics.add(m1);
  entity.addMetrics(metrics);
  te.addEntity(entity);
  HBaseTimelineWriterImpl hbi=null;
  try {
    Configuration c1=util.getConfiguration();
    hbi=new HBaseTimelineWriterImpl(c1);
    hbi.init(c1);
    String cluster="cluster1";
    String user="user1";
    String flow="some_flow_name";
    String flowVersion="AB7822C10F1111";
    long runid=1002345678919L;
    String appName="some app name";
    hbi.write(cluster,user,flow,flowVersion,runid,appName,te);
    hbi.stop();
    Scan s=new Scan();
    byte[] startRow=EntityRowKey.getRowKeyPrefix(cluster,user,flow,runid,appName);
    s.setStartRow(startRow);
    s.setMaxVersions(Integer.MAX_VALUE);
    Connection conn=ConnectionFactory.createConnection(c1);
    ResultScanner scanner=new EntityTable().getResultScanner(c1,conn,s);
    int rowCount=0;
    int colCount=0;
    for (    Result result : scanner) {
      if (result != null && !result.isEmpty()) {
        rowCount++;
        colCount+=result.size();
        byte[] row1=result.getRow();
        assertTrue(isRowKeyCorrect(row1,cluster,user,flow,runid,appName,entity));
        String id1=EntityColumn.ID.readResult(result).toString();
        assertEquals(id,id1);
        String type1=EntityColumn.TYPE.readResult(result).toString();
        assertEquals(type,type1);
        Number val=(Number)EntityColumn.CREATED_TIME.readResult(result);
        Long cTime1=val.longValue();
        assertEquals(cTime1,cTime);
        val=(Number)EntityColumn.MODIFIED_TIME.readResult(result);
        Long mTime1=val.longValue();
        assertEquals(mTime1,mTime);
        for (        String isRelatedToKey : isRelatedTo.keySet()) {
          Object isRelatedToValue=EntityColumnPrefix.IS_RELATED_TO.readResult(result,isRelatedToKey);
          String compoundValue=isRelatedToValue.toString();
          Set<String> isRelatedToValues=new HashSet<String>(Separator.VALUES.splitEncoded(compoundValue));
          assertEquals(isRelatedTo.get(isRelatedToKey).size(),isRelatedToValues.size());
          for (          String v : isRelatedTo.get(isRelatedToKey)) {
            assertTrue(isRelatedToValues.contains(v));
          }
        }
        for (        String relatesToKey : relatesTo.keySet()) {
          String compoundValue=EntityColumnPrefix.RELATES_TO.readResult(result,relatesToKey).toString();
          Set<String> relatesToValues=new HashSet<String>(Separator.VALUES.splitEncoded(compoundValue));
          assertEquals(relatesTo.get(relatesToKey).size(),relatesToValues.size());
          for (          String v : relatesTo.get(relatesToKey)) {
            assertTrue(relatesToValues.contains(v));
          }
        }
        Map<String,Object> configColumns=EntityColumnPrefix.CONFIG.readResults(result);
        assertEquals(conf.size(),configColumns.size());
        for (        String configItem : conf.keySet()) {
          assertEquals(conf.get(configItem),configColumns.get(configItem));
        }
        NavigableMap<String,NavigableMap<Long,Number>> metricsResult=EntityColumnPrefix.METRIC.readTimeseriesResults(result);
        NavigableMap<Long,Number> metricMap=metricsResult.get(m1.getId());
        assertNotNull(metricMap);
        assertEquals(metricValues.entrySet().size(),metricMap.entrySet().size());
        for (        Entry<Long,Number> metricEntry : metricValues.entrySet()) {
          assertEquals(metricEntry.getValue(),metricMap.get(metricEntry.getKey()));
        }
      }
    }
    assertEquals(1,rowCount);
    assertEquals(15,colCount);
  }
  finally {
    hbi.stop();
    hbi.close();
  }
  testAdditionalEntity();
}
