{
  if (!init) {
    refreshSuperUserGroupsConfiguration();
  }
  if (user.getRealUser() == null) {
    return;
  }
  boolean userAuthorized=false;
  boolean ipAuthorized=false;
  UserGroupInformation superUser=user.getRealUser();
  Collection<String> allowedUsers=proxyUsers.get(getProxySuperuserUserConfKey(superUser.getShortUserName()));
  if (isWildcardList(allowedUsers)) {
    userAuthorized=true;
  }
 else   if (allowedUsers != null && !allowedUsers.isEmpty()) {
    if (allowedUsers.contains(user.getShortUserName())) {
      userAuthorized=true;
    }
  }
  if (!userAuthorized) {
    Collection<String> allowedUserGroups=proxyGroups.get(getProxySuperuserGroupConfKey(superUser.getShortUserName()));
    if (isWildcardList(allowedUserGroups)) {
      userAuthorized=true;
    }
 else     if (allowedUserGroups != null && !allowedUserGroups.isEmpty()) {
      for (      String group : user.getGroupNames()) {
        if (allowedUserGroups.contains(group)) {
          userAuthorized=true;
          break;
        }
      }
    }
    if (!userAuthorized) {
      throw new AuthorizationException("User: " + superUser.getUserName() + " is not allowed to impersonate "+ user.getUserName());
    }
  }
  Collection<String> ipList=proxyHosts.get(getProxySuperuserIpConfKey(superUser.getShortUserName()));
  if (isWildcardList(ipList)) {
    ipAuthorized=true;
  }
 else   if (ipList != null && !ipList.isEmpty()) {
    for (    String allowedHost : ipList) {
      InetAddress hostAddr;
      try {
        hostAddr=InetAddress.getByName(allowedHost);
      }
 catch (      UnknownHostException e) {
        continue;
      }
      if (hostAddr.getHostAddress().equals(remoteAddress)) {
        ipAuthorized=true;
      }
    }
  }
  if (!ipAuthorized) {
    throw new AuthorizationException("Unauthorized connection for super-user: " + superUser.getUserName() + " from IP "+ remoteAddress);
  }
}
