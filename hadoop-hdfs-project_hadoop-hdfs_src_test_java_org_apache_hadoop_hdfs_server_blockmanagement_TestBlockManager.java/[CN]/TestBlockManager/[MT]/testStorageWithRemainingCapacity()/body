{
  final Configuration conf=new HdfsConfiguration();
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  FileSystem fs=FileSystem.get(conf);
  Path file1=null;
  try {
    cluster.waitActive();
    final FSNamesystem namesystem=cluster.getNamesystem();
    final String poolId=namesystem.getBlockPoolId();
    final DatanodeRegistration nodeReg=InternalDataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(0),poolId);
    final DatanodeDescriptor dd=NameNodeAdapter.getDatanode(namesystem,nodeReg);
    for (    DatanodeStorageInfo storage : dd.getStorageInfos()) {
      storage.setUtilizationForTesting(65536,0,65536,0);
    }
    dd.setRemaining(131072);
    file1=new Path("testRemainingStorage.dat");
    try {
      DFSTestUtil.createFile(fs,file1,102400,102400,102400,(short)1,0x1BAD5EED);
    }
 catch (    RemoteException re) {
      GenericTestUtils.assertExceptionContains("nodes instead of " + "minReplication",re);
    }
  }
  finally {
    assertTrue(fs.exists(file1));
    fs.delete(file1,true);
    assertTrue(!fs.exists(file1));
    cluster.shutdown();
  }
}
