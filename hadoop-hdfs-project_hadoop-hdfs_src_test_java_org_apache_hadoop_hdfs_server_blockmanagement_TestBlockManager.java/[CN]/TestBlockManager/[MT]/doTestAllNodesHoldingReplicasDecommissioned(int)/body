{
  List<DatanodeStorageInfo> origStorages=getStorages(0,1,3);
  List<DatanodeDescriptor> origNodes=getNodes(origStorages);
  BlockInfo blockInfo=addBlockOnNodes(testIndex,origNodes);
  List<DatanodeDescriptor> decomNodes=startDecommission(0,1,3);
  DatanodeStorageInfo[] pipeline=scheduleSingleReplication(blockInfo);
  assertTrue("Source of replication should be one of the nodes the block " + "was on. Was: " + pipeline[0],origStorages.contains(pipeline[0]));
  assertEquals("Should have three targets",4,pipeline.length);
  boolean foundOneOnRackA=false;
  boolean foundOneOnRackB=false;
  for (int i=1; i < pipeline.length; i++) {
    DatanodeDescriptor target=pipeline[i].getDatanodeDescriptor();
    if (rackA.contains(target)) {
      foundOneOnRackA=true;
    }
 else     if (rackB.contains(target)) {
      foundOneOnRackB=true;
    }
    assertFalse(decomNodes.contains(target));
    assertFalse(origNodes.contains(target));
  }
  assertTrue("Should have at least one target on rack A. Pipeline: " + Joiner.on(",").join(pipeline),foundOneOnRackA);
  assertTrue("Should have at least one target on rack B. Pipeline: " + Joiner.on(",").join(pipeline),foundOneOnRackB);
}
