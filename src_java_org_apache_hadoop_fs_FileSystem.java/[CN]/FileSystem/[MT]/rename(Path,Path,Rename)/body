{
  final FileStatus srcStatus=getFileStatus(src);
  if (srcStatus == null) {
    throw new FileNotFoundException("rename source " + src + " not found.");
  }
  boolean overwrite=false;
  if (null != options) {
    for (    Rename option : options) {
      if (option == Rename.OVERWRITE) {
        overwrite=true;
      }
    }
  }
  FileStatus dstStatus;
  try {
    dstStatus=getFileStatus(dst);
  }
 catch (  IOException e) {
    dstStatus=null;
  }
  if (dstStatus != null) {
    if (srcStatus.isDir() != dstStatus.isDir()) {
      throw new IOException("Source " + src + " Destination "+ dst+ " both should be either file or directory");
    }
    if (!overwrite) {
      throw new FileAlreadyExistsException("rename destination " + dst + " already exists.");
    }
    if (dstStatus.isDir()) {
      FileStatus[] list=listStatus(dst);
      if (list != null && list.length != 0) {
        throw new IOException("rename cannot overwrite non empty destination directory " + dst);
      }
    }
    delete(dst,false);
  }
 else {
    final Path parent=dst.getParent();
    final FileStatus parentStatus=getFileStatus(parent);
    if (parentStatus == null) {
      throw new FileNotFoundException("rename destination parent " + parent + " not found.");
    }
    if (!parentStatus.isDir()) {
      throw new ParentNotDirectoryException("rename destination parent " + parent + " is a file.");
    }
  }
  if (!rename(src,dst)) {
    throw new IOException("rename from " + src + " to "+ dst+ " failed.");
  }
}
