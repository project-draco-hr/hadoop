{
  return new Iterator<LocatedFileStatus>(){
    private final FileStatus[] stats=listStatus(f,filter);
    private int i=0;
    /** 
 * {@inheritDoc}
 * @return {@inheritDog} 
 * @throws Runtimeexception if any IOException occurs during traversal;
 * the IOException is set as the cause of the RuntimeException
 */
    @Override public boolean hasNext(){
      return i < stats.length;
    }
    /** 
 * {@inheritDoc}
 * @return {@inheritDoc} 
 * @throws Runtimeexception if any IOException occurs during traversal;
 * the IOException is set as the cause of the RuntimeException
 * @exception {@inheritDoc}
 */
    @Override public LocatedFileStatus next(){
      if (!hasNext()) {
        throw new NoSuchElementException("No more entry in " + f);
      }
      FileStatus result=stats[i++];
      try {
        BlockLocation[] locs=result.isFile() ? getFileBlockLocations(result.getPath(),0,result.getLen()) : null;
        return new LocatedFileStatus(result,locs);
      }
 catch (      IOException ioe) {
        throw (RuntimeException)new RuntimeException().initCause(ioe);
      }
    }
    @Override public void remove(){
      throw new UnsupportedOperationException("Remove is not supported");
    }
  }
;
}
