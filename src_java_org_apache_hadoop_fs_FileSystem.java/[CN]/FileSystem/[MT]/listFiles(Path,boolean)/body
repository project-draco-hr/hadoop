{
  return new RemoteIterator<LocatedFileStatus>(){
    private Stack<RemoteIterator<LocatedFileStatus>> itors=new Stack<RemoteIterator<LocatedFileStatus>>();
    private RemoteIterator<LocatedFileStatus> curItor=listLocatedStatus(f);
    private LocatedFileStatus curFile;
    @Override public boolean hasNext() throws IOException {
      while (curFile == null) {
        if (curItor.hasNext()) {
          handleFileStat(curItor.next());
        }
 else         if (!itors.empty()) {
          curItor=itors.pop();
        }
 else {
          return false;
        }
      }
      return true;
    }
    /** 
 * Process the input stat.
 * If it is a file, return the file stat.
 * If it is a directory, traverse the directory if recursive is true;
 * ignore it if recursive is false.
 * @param stat input status
 * @throws IOException if any IO error occurs
 */
    private void handleFileStat(    LocatedFileStatus stat) throws IOException {
      if (stat.isFile()) {
        curFile=stat;
      }
 else       if (recursive) {
        itors.push(curItor);
        curItor=listLocatedStatus(stat.getPath());
      }
    }
    @Override public LocatedFileStatus next() throws IOException {
      if (hasNext()) {
        LocatedFileStatus result=curFile;
        curFile=null;
        return result;
      }
      throw new java.util.NoSuchElementException("No more entry in " + f);
    }
  }
;
}
