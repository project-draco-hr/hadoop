{
  int len;
  int setOpen;
  int curlyOpen;
  boolean setRange;
  StringBuilder fileRegex=new StringBuilder();
  len=filePattern.length();
  if (len == 0)   return;
  setOpen=0;
  setRange=false;
  curlyOpen=0;
  for (int i=0; i < len; i++) {
    char pCh;
    pCh=filePattern.charAt(i);
    if (pCh == PAT_ESCAPE) {
      fileRegex.append(pCh);
      i++;
      if (i >= len)       error("An escaped character does not present",filePattern,i);
      pCh=filePattern.charAt(i);
    }
 else     if (isJavaRegexSpecialChar(pCh)) {
      fileRegex.append(PAT_ESCAPE);
    }
 else     if (pCh == '*') {
      fileRegex.append(PAT_ANY);
      hasPattern=true;
    }
 else     if (pCh == '?') {
      pCh=PAT_ANY;
      hasPattern=true;
    }
 else     if (pCh == '{') {
      fileRegex.append('(');
      pCh='(';
      curlyOpen++;
      hasPattern=true;
    }
 else     if (pCh == ',' && curlyOpen > 0) {
      fileRegex.append(")|");
      pCh='(';
    }
 else     if (pCh == '}' && curlyOpen > 0) {
      curlyOpen--;
      fileRegex.append(")");
      pCh=')';
    }
 else     if (pCh == '[' && setOpen == 0) {
      setOpen++;
      hasPattern=true;
    }
 else     if (pCh == '^' && setOpen > 0) {
    }
 else     if (pCh == '-' && setOpen > 0) {
      setRange=true;
    }
 else     if (pCh == PAT_SET_CLOSE && setRange) {
      error("Incomplete character set range",filePattern,i);
    }
 else     if (pCh == PAT_SET_CLOSE && setOpen > 0) {
      if (setOpen < 2)       error("Unexpected end of set",filePattern,i);
      setOpen=0;
    }
 else     if (setOpen > 0) {
      setOpen++;
      setRange=false;
    }
    fileRegex.append(pCh);
  }
  if (setOpen > 0 || setRange || curlyOpen > 0) {
    error("Expecting set closure character or end of range, or }",filePattern,len);
  }
  regex=Pattern.compile(fileRegex.toString());
}
