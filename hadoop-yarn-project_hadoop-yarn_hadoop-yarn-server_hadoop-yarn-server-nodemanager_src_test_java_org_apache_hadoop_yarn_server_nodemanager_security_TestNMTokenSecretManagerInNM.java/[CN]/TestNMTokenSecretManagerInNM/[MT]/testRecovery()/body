{
  YarnConfiguration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED,true);
  final NodeId nodeId=NodeId.newInstance("somehost",1234);
  final ApplicationAttemptId attempt1=ApplicationAttemptId.newInstance(ApplicationId.newInstance(1,1),1);
  final ApplicationAttemptId attempt2=ApplicationAttemptId.newInstance(ApplicationId.newInstance(2,2),2);
  NMTokenKeyGeneratorForTest keygen=new NMTokenKeyGeneratorForTest();
  NMMemoryStateStoreService stateStore=new NMMemoryStateStoreService();
  stateStore.init(conf);
  stateStore.start();
  NMTokenSecretManagerInNM secretMgr=new NMTokenSecretManagerInNM(stateStore);
  secretMgr.setNodeId(nodeId);
  MasterKey currentKey=keygen.generateKey();
  secretMgr.setMasterKey(currentKey);
  NMTokenIdentifier attemptToken1=getNMTokenId(secretMgr.createNMToken(attempt1,nodeId,"user1"));
  NMTokenIdentifier attemptToken2=getNMTokenId(secretMgr.createNMToken(attempt2,nodeId,"user2"));
  secretMgr.appAttemptStartContainer(attemptToken1);
  secretMgr.appAttemptStartContainer(attemptToken2);
  assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt1));
  assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt2));
  assertNotNull(secretMgr.retrievePassword(attemptToken1));
  assertNotNull(secretMgr.retrievePassword(attemptToken2));
  secretMgr=new NMTokenSecretManagerInNM(stateStore);
  secretMgr.recover(stateStore.loadNMTokenState());
  secretMgr.setNodeId(nodeId);
  assertEquals(currentKey,secretMgr.getCurrentKey());
  assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt1));
  assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt2));
  assertNotNull(secretMgr.retrievePassword(attemptToken1));
  assertNotNull(secretMgr.retrievePassword(attemptToken2));
  currentKey=keygen.generateKey();
  secretMgr.setMasterKey(currentKey);
  secretMgr.appFinished(attempt1.getApplicationId());
  secretMgr=new NMTokenSecretManagerInNM(stateStore);
  secretMgr.recover(stateStore.loadNMTokenState());
  secretMgr.setNodeId(nodeId);
  assertEquals(currentKey,secretMgr.getCurrentKey());
  assertFalse(secretMgr.isAppAttemptNMTokenKeyPresent(attempt1));
  assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt2));
  assertNotNull(secretMgr.retrievePassword(attemptToken1));
  assertNotNull(secretMgr.retrievePassword(attemptToken2));
  currentKey=keygen.generateKey();
  secretMgr.setMasterKey(currentKey);
  secretMgr=new NMTokenSecretManagerInNM(stateStore);
  secretMgr.recover(stateStore.loadNMTokenState());
  secretMgr.setNodeId(nodeId);
  assertEquals(currentKey,secretMgr.getCurrentKey());
  assertFalse(secretMgr.isAppAttemptNMTokenKeyPresent(attempt1));
  assertTrue(secretMgr.isAppAttemptNMTokenKeyPresent(attempt2));
  try {
    secretMgr.retrievePassword(attemptToken1);
    fail("attempt token should not still be valid");
  }
 catch (  InvalidToken e) {
  }
  assertNotNull(secretMgr.retrievePassword(attemptToken2));
  secretMgr.appFinished(attempt2.getApplicationId());
  secretMgr=new NMTokenSecretManagerInNM(stateStore);
  secretMgr.recover(stateStore.loadNMTokenState());
  secretMgr.setNodeId(nodeId);
  assertEquals(currentKey,secretMgr.getCurrentKey());
  assertFalse(secretMgr.isAppAttemptNMTokenKeyPresent(attempt1));
  assertFalse(secretMgr.isAppAttemptNMTokenKeyPresent(attempt2));
  try {
    secretMgr.retrievePassword(attemptToken1);
    fail("attempt token should not still be valid");
  }
 catch (  InvalidToken e) {
  }
  try {
    secretMgr.retrievePassword(attemptToken2);
    fail("attempt token should not still be valid");
  }
 catch (  InvalidToken e) {
  }
  stateStore.close();
}
