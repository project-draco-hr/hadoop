{
  int exitCode=init(args);
  if (exitCode != 0) {
    return exitCode;
  }
  barrier();
  DFSClientThread[] threads=new DFSClientThread[numOfThreads];
  for (int i=0; i < numOfThreads; i++) {
    threads[i]=new DFSClientThread(i);
    threads[i].start();
  }
  if (durations[0] > 0) {
    while (shouldRun) {
      Thread.sleep(durations[currentIndex] * 1000);
      totalTime+=durations[currentIndex];
      if ((currentIndex + 1) == durations.length) {
        shouldRun=false;
      }
 else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Moving to index " + currentIndex + ": r = "+ readProbs[currentIndex]+ ", w = "+ writeProbs+ " for duration "+ durations[currentIndex]);
        }
        currentIndex++;
      }
    }
  }
  LOG.debug("Done with testing.  Waiting for threads to finish.");
  for (  DFSClientThread thread : threads) {
    thread.join();
    for (int i=0; i < TOTAL_OP_TYPES; i++) {
      executionTime[i]+=thread.executionTime[i];
      totalNumOfOps[i]+=thread.totalNumOfOps[i];
    }
  }
  long totalOps=0;
  for (int i=0; i < TOTAL_OP_TYPES; i++) {
    totalOps+=totalNumOfOps[i];
  }
  if (totalNumOfOps[OPEN] != 0) {
    System.out.println("Average open execution time: " + (double)executionTime[OPEN] / totalNumOfOps[OPEN] + "ms");
  }
  if (totalNumOfOps[LIST] != 0) {
    System.out.println("Average list execution time: " + (double)executionTime[LIST] / totalNumOfOps[LIST] + "ms");
  }
  if (totalNumOfOps[DELETE] != 0) {
    System.out.println("Average deletion execution time: " + (double)executionTime[DELETE] / totalNumOfOps[DELETE] + "ms");
    System.out.println("Average create execution time: " + (double)executionTime[CREATE] / totalNumOfOps[CREATE] + "ms");
    System.out.println("Average write_close execution time: " + (double)executionTime[WRITE_CLOSE] / totalNumOfOps[WRITE_CLOSE] + "ms");
  }
  if (durations[0] != 0) {
    System.out.println("Average operations per second: " + (double)totalOps / totalTime + "ops/s");
  }
  System.out.println();
  return exitCode;
}
