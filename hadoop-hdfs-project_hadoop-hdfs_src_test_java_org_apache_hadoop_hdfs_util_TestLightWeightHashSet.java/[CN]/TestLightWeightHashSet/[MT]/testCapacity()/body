{
  LOG.info("Test capacity");
  float maxF=LightWeightHashSet.DEFAULT_MAX_LOAD_FACTOR;
  float minF=LightWeightHashSet.DEFAUT_MIN_LOAD_FACTOR;
  set=new LightWeightHashSet<Integer>(1,maxF,minF);
  assertEquals(LightWeightHashSet.MINIMUM_CAPACITY,set.getCapacity());
  set=new LightWeightHashSet<Integer>(30,maxF,minF);
  assertEquals(Math.max(LightWeightHashSet.MINIMUM_CAPACITY,32),set.getCapacity());
  set=new LightWeightHashSet<Integer>(64,maxF,minF);
  assertEquals(Math.max(LightWeightHashSet.MINIMUM_CAPACITY,64),set.getCapacity());
  set.addAll(list);
  int expCap=LightWeightHashSet.MINIMUM_CAPACITY;
  while (expCap < NUM && maxF * expCap < NUM)   expCap<<=1;
  assertEquals(expCap,set.getCapacity());
  set.clear();
  set.addAll(list);
  int toRemove=set.size() - (int)(set.getCapacity() * minF) + 1;
  for (int i=0; i < toRemove; i++) {
    set.remove(list.get(i));
  }
  assertEquals(Math.max(LightWeightHashSet.MINIMUM_CAPACITY,expCap / 2),set.getCapacity());
  LOG.info("Test capacity - DONE");
}
