{
  final String METHOD_NAME=GenericTestUtils.getMethodName();
  Path path1=new Path("/" + METHOD_NAME + ".01.dat");
  Path path2=new Path("/" + METHOD_NAME + ".02.dat");
  final int SEED=0xFADED;
  makeRandomTestFile(path1,BLOCK_SIZE,true,SEED);
  ensureFileReplicasOnStorageType(path1,RAM_DISK);
  File metaFile=MiniDFSCluster.getBlockMetadataFile(0,DFSTestUtil.getFirstBlock(fs,path1));
  assertTrue(metaFile.length() <= BlockMetadataHeader.getHeaderSize());
  assertTrue(verifyReadRandomFile(path1,BLOCK_SIZE,SEED));
  Thread.sleep(3 * LAZY_WRITER_INTERVAL_SEC * 1000);
  ensureFileReplicasOnStorageType(path1,RAM_DISK);
  metaFile=MiniDFSCluster.getBlockMetadataFile(0,DFSTestUtil.getFirstBlock(fs,path1));
  assertTrue(metaFile.length() <= BlockMetadataHeader.getHeaderSize());
  assertTrue(verifyReadRandomFile(path1,BLOCK_SIZE,SEED));
  makeRandomTestFile(path2,BLOCK_SIZE,true,SEED);
  Thread.sleep(3 * LAZY_WRITER_INTERVAL_SEC * 1000);
  triggerBlockReport();
  ensureFileReplicasOnStorageType(path1,DEFAULT);
  metaFile=MiniDFSCluster.getBlockMetadataFile(0,DFSTestUtil.getFirstBlock(fs,path1));
  assertTrue(metaFile.length() > BlockMetadataHeader.getHeaderSize());
  assertTrue(verifyReadRandomFile(path1,BLOCK_SIZE,SEED));
  ClientContext clientContext=client.getClientContext();
  if (clientContext.getUseLegacyBlockReaderLocal()) {
    Assert.assertFalse(clientContext.getDisableLegacyBlockReaderLocal());
  }
}
