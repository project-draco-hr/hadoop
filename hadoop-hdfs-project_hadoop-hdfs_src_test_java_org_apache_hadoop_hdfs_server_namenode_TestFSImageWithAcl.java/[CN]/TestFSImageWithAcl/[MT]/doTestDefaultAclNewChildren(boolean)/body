{
  Path dirPath=new Path("/dir");
  Path filePath=new Path(dirPath,"file1");
  Path subdirPath=new Path(dirPath,"subdir1");
  DistributedFileSystem fs=cluster.getFileSystem();
  fs.mkdirs(dirPath);
  List<AclEntry> aclSpec=Lists.newArrayList(aclEntry(DEFAULT,USER,"foo",ALL));
  fs.setAcl(dirPath,aclSpec);
  fs.create(filePath).close();
  fs.mkdirs(subdirPath);
  AclEntry[] fileExpected=new AclEntry[]{aclEntry(ACCESS,USER,"foo",ALL),aclEntry(ACCESS,GROUP,READ_EXECUTE)};
  AclEntry[] subdirExpected=new AclEntry[]{aclEntry(ACCESS,USER,"foo",ALL),aclEntry(ACCESS,GROUP,READ_EXECUTE),aclEntry(DEFAULT,USER,ALL),aclEntry(DEFAULT,USER,"foo",ALL),aclEntry(DEFAULT,GROUP,READ_EXECUTE),aclEntry(DEFAULT,MASK,ALL),aclEntry(DEFAULT,OTHER,READ_EXECUTE)};
  AclEntry[] fileReturned=fs.getAclStatus(filePath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(fileExpected,fileReturned);
  AclEntry[] subdirReturned=fs.getAclStatus(subdirPath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(subdirExpected,subdirReturned);
  assertPermission(fs,subdirPath,(short)010755);
  restart(fs,persistNamespace);
  fileReturned=fs.getAclStatus(filePath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(fileExpected,fileReturned);
  subdirReturned=fs.getAclStatus(subdirPath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(subdirExpected,subdirReturned);
  assertPermission(fs,subdirPath,(short)010755);
  aclSpec=Lists.newArrayList(aclEntry(DEFAULT,USER,"foo",READ_WRITE));
  fs.modifyAclEntries(dirPath,aclSpec);
  fileReturned=fs.getAclStatus(filePath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(fileExpected,fileReturned);
  subdirReturned=fs.getAclStatus(subdirPath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(subdirExpected,subdirReturned);
  assertPermission(fs,subdirPath,(short)010755);
  restart(fs,persistNamespace);
  fileReturned=fs.getAclStatus(filePath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(fileExpected,fileReturned);
  subdirReturned=fs.getAclStatus(subdirPath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(subdirExpected,subdirReturned);
  assertPermission(fs,subdirPath,(short)010755);
  fs.removeAcl(dirPath);
  fileReturned=fs.getAclStatus(filePath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(fileExpected,fileReturned);
  subdirReturned=fs.getAclStatus(subdirPath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(subdirExpected,subdirReturned);
  assertPermission(fs,subdirPath,(short)010755);
  restart(fs,persistNamespace);
  fileReturned=fs.getAclStatus(filePath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(fileExpected,fileReturned);
  subdirReturned=fs.getAclStatus(subdirPath).getEntries().toArray(new AclEntry[0]);
  Assert.assertArrayEquals(subdirExpected,subdirReturned);
  assertPermission(fs,subdirPath,(short)010755);
}
