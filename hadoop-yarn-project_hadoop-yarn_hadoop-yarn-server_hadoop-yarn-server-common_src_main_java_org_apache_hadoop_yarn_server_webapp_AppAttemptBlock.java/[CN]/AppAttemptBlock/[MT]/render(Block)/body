{
  String attemptid=$(APPLICATION_ATTEMPT_ID);
  if (attemptid.isEmpty()) {
    puts("Bad request: requires application attempt ID");
    return;
  }
  try {
    appAttemptId=ConverterUtils.toApplicationAttemptId(attemptid);
  }
 catch (  IllegalArgumentException e) {
    puts("Invalid application attempt ID: " + attemptid);
    return;
  }
  UserGroupInformation callerUGI=getCallerUGI();
  ApplicationAttemptReport appAttemptReport;
  try {
    final GetApplicationAttemptReportRequest request=GetApplicationAttemptReportRequest.newInstance(appAttemptId);
    if (callerUGI == null) {
      appAttemptReport=appBaseProt.getApplicationAttemptReport(request).getApplicationAttemptReport();
    }
 else {
      appAttemptReport=callerUGI.doAs(new PrivilegedExceptionAction<ApplicationAttemptReport>(){
        @Override public ApplicationAttemptReport run() throws Exception {
          return appBaseProt.getApplicationAttemptReport(request).getApplicationAttemptReport();
        }
      }
);
    }
  }
 catch (  Exception e) {
    String message="Failed to read the application attempt " + appAttemptId + ".";
    LOG.error(message,e);
    html.p()._(message)._();
    return;
  }
  if (appAttemptReport == null) {
    puts("Application Attempt not found: " + attemptid);
    return;
  }
  boolean exceptionWhenGetContainerReports=false;
  Collection<ContainerReport> containers=null;
  try {
    final GetContainersRequest request=GetContainersRequest.newInstance(appAttemptId);
    if (callerUGI == null) {
      containers=appBaseProt.getContainers(request).getContainerList();
    }
 else {
      containers=callerUGI.doAs(new PrivilegedExceptionAction<Collection<ContainerReport>>(){
        @Override public Collection<ContainerReport> run() throws Exception {
          return appBaseProt.getContainers(request).getContainerList();
        }
      }
);
    }
  }
 catch (  RuntimeException e) {
    exceptionWhenGetContainerReports=true;
  }
catch (  Exception e) {
    exceptionWhenGetContainerReports=true;
  }
  AppAttemptInfo appAttempt=new AppAttemptInfo(appAttemptReport);
  setTitle(join("Application Attempt ",attemptid));
  String node="N/A";
  if (appAttempt.getHost() != null && appAttempt.getRpcPort() >= 0 && appAttempt.getRpcPort() < 65536) {
    node=appAttempt.getHost() + ":" + appAttempt.getRpcPort();
  }
  generateOverview(appAttemptReport,containers,appAttempt,node);
  if (exceptionWhenGetContainerReports) {
    html.p()._("Sorry, Failed to get containers for application attempt" + attemptid + ".")._();
    return;
  }
  createAttemptHeadRoomTable(html);
  html._(InfoBlock.class);
  TBODY<TABLE<Hamlet>> tbody=html.table("#containers").thead().tr().th(".id","Container ID").th(".node","Node").th(".exitstatus","Container Exit Status").th(".logs","Logs")._()._().tbody();
  StringBuilder containersTableData=new StringBuilder("[\n");
  for (  ContainerReport containerReport : containers) {
    ContainerInfo container=new ContainerInfo(containerReport);
    containersTableData.append("[\"<a href='").append(url("container",container.getContainerId())).append("'>").append(container.getContainerId()).append("</a>\",\"<a ").append(container.getNodeHttpAddress() == null ? "#" : "href='" + container.getNodeHttpAddress()).append("'>").append(container.getNodeHttpAddress() == null ? "N/A" : StringEscapeUtils.escapeJavaScript(StringEscapeUtils.escapeHtml(container.getNodeHttpAddress()))).append("</a>\",\"").append(container.getContainerExitStatus()).append("\",\"<a href='").append(container.getLogUrl() == null ? "#" : container.getLogUrl()).append("'>").append(container.getLogUrl() == null ? "N/A" : "Logs").append("</a>\"],\n");
  }
  if (containersTableData.charAt(containersTableData.length() - 2) == ',') {
    containersTableData.delete(containersTableData.length() - 2,containersTableData.length() - 1);
  }
  containersTableData.append("]");
  html.script().$type("text/javascript")._("var containersTableData=" + containersTableData)._();
  tbody._()._();
}
