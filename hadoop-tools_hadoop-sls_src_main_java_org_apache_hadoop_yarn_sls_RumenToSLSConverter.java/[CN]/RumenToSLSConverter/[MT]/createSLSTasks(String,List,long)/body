{
  int priority=taskType.equals("reduce") ? 10 : 20;
  List array=new ArrayList();
  for (  Object e : rumenTasks) {
    Map rumenTask=(Map)e;
    for (    Object ee : (List)rumenTask.get("attempts")) {
      Map rumenAttempt=(Map)ee;
      long taskStart=(Long)rumenAttempt.get("startTime");
      long taskFinish=(Long)rumenAttempt.get("finishTime");
      String hostname=(String)rumenAttempt.get("hostName");
      taskStart=taskStart - baseline + offset;
      taskFinish=taskFinish - baseline + offset;
      Map task=new LinkedHashMap();
      task.put("container.host",hostname);
      task.put("container.start.ms",taskStart);
      task.put("container.end.ms",taskFinish);
      task.put("container.priority",priority);
      task.put("container.type",taskType);
      array.add(task);
      String rackHost[]=SLSUtils.getRackHostName(hostname);
      if (rackNodeMap.containsKey(rackHost[0])) {
        rackNodeMap.get(rackHost[0]).add(rackHost[1]);
      }
 else {
        Set<String> hosts=new TreeSet<String>();
        hosts.add(rackHost[1]);
        rackNodeMap.put(rackHost[0],hosts);
      }
    }
  }
  return array;
}
