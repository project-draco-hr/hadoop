{
  Map json=new LinkedHashMap();
  long jobStart=(Long)rumenJob.get("submitTime");
  long jobFinish=(Long)rumenJob.get("finishTime");
  String jobId=rumenJob.get("jobID").toString();
  String queue=rumenJob.get("queue").toString();
  String user=rumenJob.get("user").toString();
  if (baseline == 0) {
    baseline=jobStart;
  }
  jobStart-=baseline;
  jobFinish-=baseline;
  long offset=0;
  if (jobStart < 0) {
    System.out.println("Warning: reset job " + jobId + " start time to 0.");
    offset=-jobStart;
    jobFinish=jobFinish - jobStart;
    jobStart=0;
  }
  json.put("am.type","mapreduce");
  json.put("job.start.ms",jobStart);
  json.put("job.end.ms",jobFinish);
  json.put("job.queue.name",queue);
  json.put("job.id",jobId);
  json.put("job.user",user);
  List maps=createSLSTasks("map",(List)rumenJob.get("mapTasks"),offset);
  List reduces=createSLSTasks("reduce",(List)rumenJob.get("reduceTasks"),offset);
  List tasks=new ArrayList();
  tasks.addAll(maps);
  tasks.addAll(reduces);
  json.put("job.tasks",tasks);
  return json;
}
