{
  Assert.assertTrue(capacityScheduler.getQueue("a").getAccessibleNodeLabels().containsAll(ImmutableSet.of("red","blue")));
  Assert.assertTrue(capacityScheduler.getQueue("a1").getAccessibleNodeLabels().containsAll(ImmutableSet.of("red","blue")));
  Assert.assertEquals(1,capacityScheduler.getQueue("a2").getAccessibleNodeLabels().size());
  Assert.assertTrue(capacityScheduler.getQueue("a2").getAccessibleNodeLabels().contains("red"));
  Assert.assertTrue(capacityScheduler.getQueue("b").getAccessibleNodeLabels().containsAll(ImmutableSet.of("red","blue")));
  Assert.assertTrue(capacityScheduler.getQueue("b2").getAccessibleNodeLabels().containsAll(ImmutableSet.of("red","blue")));
  CSQueue qA2=capacityScheduler.getQueue("a2");
  Assert.assertEquals(0.7,qA2.getCapacity(),DELTA);
  Assert.assertEquals(0.5,qA2.getQueueCapacities().getCapacity("red"),DELTA);
  Assert.assertEquals(0.07,qA2.getAbsoluteCapacity(),DELTA);
  Assert.assertEquals(0.25,qA2.getQueueCapacities().getAbsoluteCapacity("red"),DELTA);
  Assert.assertEquals(0.1275,qA2.getAbsoluteMaximumCapacity(),DELTA);
  Assert.assertEquals(0.3,qA2.getQueueCapacities().getAbsoluteMaximumCapacity("red"),DELTA);
  CSQueue qB3=capacityScheduler.getQueue("b3");
  Assert.assertEquals(0.18,qB3.getAbsoluteCapacity(),DELTA);
  Assert.assertEquals(0.125,qB3.getQueueCapacities().getAbsoluteCapacity("red"),DELTA);
  Assert.assertEquals(0.35,qB3.getAbsoluteMaximumCapacity(),DELTA);
  Assert.assertEquals(1,qB3.getQueueCapacities().getAbsoluteMaximumCapacity("red"),DELTA);
}
