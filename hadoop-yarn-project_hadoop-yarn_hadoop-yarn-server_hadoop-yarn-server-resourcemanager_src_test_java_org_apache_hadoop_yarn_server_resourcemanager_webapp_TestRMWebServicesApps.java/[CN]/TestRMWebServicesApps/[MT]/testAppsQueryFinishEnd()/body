{
  rm.start();
  MockNM amNodeManager=rm.registerNode("amNM:1234",2048);
  RMApp app1=rm.submitApp(1024);
  amNodeManager.nodeHeartbeat(true);
  MockAM am=rm.sendAMLaunched(app1.getCurrentAppAttempt().getAppAttemptId());
  am.registerAppAttempt();
  am.unregisterAppAttempt();
  amNodeManager.nodeHeartbeat(app1.getCurrentAppAttempt().getAppAttemptId(),1,ContainerState.COMPLETE);
  rm.submitApp(1024);
  rm.submitApp(1024);
  long end=System.currentTimeMillis();
  WebResource r=resource();
  ClientResponse response=r.path("ws").path("v1").path("cluster").path("apps").queryParam("finishedTimeEnd",String.valueOf(end)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  JSONObject json=response.getEntity(JSONObject.class);
  assertEquals("incorrect number of elements",1,json.length());
  JSONObject apps=json.getJSONObject("apps");
  assertEquals("incorrect number of elements",1,apps.length());
  JSONArray array=apps.getJSONArray("app");
  assertEquals("incorrect number of elements",3,array.length());
  rm.stop();
}
