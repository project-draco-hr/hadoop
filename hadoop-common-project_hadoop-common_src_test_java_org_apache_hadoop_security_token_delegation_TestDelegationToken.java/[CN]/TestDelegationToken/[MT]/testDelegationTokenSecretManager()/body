{
  final TestDelegationTokenSecretManager dtSecretManager=new TestDelegationTokenSecretManager(24 * 60 * 60* 1000,3 * 1000,1 * 1000,3600000);
  try {
    dtSecretManager.startThreads();
    final Token<TestDelegationTokenIdentifier> token=generateDelegationToken(dtSecretManager,"SomeUser","JobTracker");
    Assert.assertTrue(dtSecretManager.isStoreNewTokenCalled);
    shouldThrow(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        dtSecretManager.renewToken(token,"FakeRenewer");
        return null;
      }
    }
,AccessControlException.class);
    long time=dtSecretManager.renewToken(token,"JobTracker");
    Assert.assertTrue(dtSecretManager.isUpdateStoredTokenCalled);
    assertTrue("renew time is in future",time > Time.now());
    TestDelegationTokenIdentifier identifier=new TestDelegationTokenIdentifier();
    byte[] tokenId=token.getIdentifier();
    identifier.readFields(new DataInputStream(new ByteArrayInputStream(tokenId)));
    Assert.assertTrue(null != dtSecretManager.retrievePassword(identifier));
    LOG.info("Sleep to expire the token");
    Thread.sleep(2000);
    try {
      dtSecretManager.retrievePassword(identifier);
      Assert.fail("Token should have expired");
    }
 catch (    InvalidToken e) {
    }
    dtSecretManager.renewToken(token,"JobTracker");
    LOG.info("Sleep beyond the max lifetime");
    Thread.sleep(2000);
    shouldThrow(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        dtSecretManager.renewToken(token,"JobTracker");
        return null;
      }
    }
,InvalidToken.class);
  }
  finally {
    dtSecretManager.stopThreads();
  }
}
