{
  createHttpFSServer();
  KerberosTestUtils.doAsClient(new Callable<Void>(){
    @Override public Void call() throws Exception {
      URL url=new URL(TestJettyHelper.getJettyURL(),"/webhdfs/v1/?op=GETDELEGATIONTOKEN");
      AuthenticatedURL aUrl=new AuthenticatedURL();
      AuthenticatedURL.Token aToken=new AuthenticatedURL.Token();
      HttpURLConnection conn=aUrl.openConnection(url,aToken);
      Assert.assertEquals(conn.getResponseCode(),HttpURLConnection.HTTP_OK);
      JSONObject json=(JSONObject)new JSONParser().parse(new InputStreamReader(conn.getInputStream()));
      json=(JSONObject)json.get(DelegationTokenAuthenticator.DELEGATION_TOKEN_JSON);
      String tokenStr=(String)json.get(DelegationTokenAuthenticator.DELEGATION_TOKEN_URL_STRING_JSON);
      url=new URL(TestJettyHelper.getJettyURL(),"/webhdfs/v1/?op=GETHOMEDIRECTORY&delegation=" + tokenStr);
      conn=(HttpURLConnection)url.openConnection();
      Assert.assertEquals(conn.getResponseCode(),HttpURLConnection.HTTP_OK);
      url=new URL(TestJettyHelper.getJettyURL(),"/webhdfs/v1/?op=RENEWDELEGATIONTOKEN&token=" + tokenStr);
      conn=(HttpURLConnection)url.openConnection();
      conn.setRequestMethod("PUT");
      Assert.assertEquals(conn.getResponseCode(),HttpURLConnection.HTTP_UNAUTHORIZED);
      url=new URL(TestJettyHelper.getJettyURL(),"/webhdfs/v1/?op=RENEWDELEGATIONTOKEN&token=" + tokenStr);
      conn=aUrl.openConnection(url,aToken);
      conn.setRequestMethod("PUT");
      Assert.assertEquals(conn.getResponseCode(),HttpURLConnection.HTTP_OK);
      url=new URL(TestJettyHelper.getJettyURL(),"/webhdfs/v1/?op=CANCELDELEGATIONTOKEN&token=" + tokenStr);
      conn=(HttpURLConnection)url.openConnection();
      conn.setRequestMethod("PUT");
      Assert.assertEquals(conn.getResponseCode(),HttpURLConnection.HTTP_OK);
      url=new URL(TestJettyHelper.getJettyURL(),"/webhdfs/v1/?op=GETHOMEDIRECTORY&delegation=" + tokenStr);
      conn=(HttpURLConnection)url.openConnection();
      Assert.assertEquals(conn.getResponseCode(),HttpURLConnection.HTTP_UNAUTHORIZED);
      return null;
    }
  }
);
}
