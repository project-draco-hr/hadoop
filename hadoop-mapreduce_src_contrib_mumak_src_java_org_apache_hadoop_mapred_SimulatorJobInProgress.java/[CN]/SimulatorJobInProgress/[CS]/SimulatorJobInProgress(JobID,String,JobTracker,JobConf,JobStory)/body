{
  super(default_conf);
  this.jobId=jobid;
  String url="http://" + jobtracker.getJobTrackerMachine() + ":"+ jobtracker.getInfoPort()+ "/jobdetails.jsp?jobid="+ jobid;
  this.jobtracker=jobtracker;
  this.conf=jobStory.getJobConf();
  this.priority=conf.getJobPriority();
  Path jobDir=new Path(jobSubmitDir);
  this.jobFile=new Path(jobDir,"job.xml");
  this.status=new JobStatus(jobid,0.0f,0.0f,0.0f,0.0f,JobStatus.PREP,priority,conf.getUser(),conf.getJobName(),jobFile.toString(),url);
  this.profile=new JobProfile(jobStory.getUser(),jobid,this.jobFile.toString(),url,jobStory.getName(),conf.getQueueName());
  this.startTime=JobTracker.getClock().getTime();
  status.setStartTime(startTime);
  this.resourceEstimator=new ResourceEstimator(this);
  this.numMapTasks=jobStory.getNumberMaps();
  this.numReduceTasks=jobStory.getNumberReduces();
  this.taskCompletionEvents=new ArrayList<TaskCompletionEvent>(numMapTasks + numReduceTasks + 10);
  this.mapFailuresPercent=conf.getMaxMapTaskFailuresPercent();
  this.reduceFailuresPercent=conf.getMaxReduceTaskFailuresPercent();
  this.maxLevel=jobtracker.getNumTaskCacheLevels();
  this.anyCacheLevel=this.maxLevel + 1;
  this.nonLocalMaps=new LinkedList<TaskInProgress>();
  this.nonLocalRunningMaps=new LinkedHashSet<TaskInProgress>();
  this.runningMapCache=new IdentityHashMap<Node,Set<TaskInProgress>>();
  this.nonRunningReduces=new LinkedList<TaskInProgress>();
  this.runningReduces=new LinkedHashSet<TaskInProgress>();
  this.slowTaskThreshold=Math.max(0.0f,conf.getFloat("mapred.speculative.execution.slowTaskThreshold",1.0f));
  this.speculativeCap=conf.getFloat("mapred.speculative.execution.speculativeCap",0.1f);
  this.slowNodeThreshold=conf.getFloat("mapred.speculative.execution.slowNodeThreshold",1.0f);
  this.jobStory=jobStory;
  this.jobHistory=this.jobtracker.getJobHistory();
}
