{
  try (IOStreamPair pair=getClient().connectToDN(datanode,getTimeout(),blockGroup.getBlockToken())){
    LOG.debug("write to {}: {}, blockGroup={}",datanode,Op.BLOCK_GROUP_CHECKSUM,blockGroup);
    createSender(pair).blockGroupChecksum(stripedBlockInfo,blockGroup.getBlockToken());
    BlockOpResponseProto reply=BlockOpResponseProto.parseFrom(PBHelperClient.vintPrefixed(pair.in));
    String logInfo="for blockGroup " + blockGroup + " from datanode "+ datanode;
    DataTransferProtoUtil.checkBlockOpStatus(reply,logInfo);
    OpBlockChecksumResponseProto checksumData=reply.getChecksumResponse();
    final int bpc=checksumData.getBytesPerCrc();
    if (bgIdx == 0) {
      setBytesPerCRC(bpc);
    }
 else {
      if (bpc != getBytesPerCRC()) {
        throw new IOException("Byte-per-checksum not matched: bpc=" + bpc + " but bytesPerCRC="+ getBytesPerCRC());
      }
    }
    final long cpb=checksumData.getCrcPerBlock();
    if (getLocatedBlocks().size() > 1 && bgIdx == 0) {
      setCrcPerBlock(cpb);
    }
    final MD5Hash md5=new MD5Hash(checksumData.getMd5().toByteArray());
    md5.write(getMd5out());
    final DataChecksum.Type ct;
    if (checksumData.hasCrcType()) {
      ct=PBHelperClient.convert(checksumData.getCrcType());
    }
 else {
      LOG.debug("Retrieving checksum from an earlier-version DataNode: " + "inferring checksum by reading first byte");
      ct=getClient().inferChecksumTypeByReading(blockGroup,datanode);
    }
    if (bgIdx == 0) {
      setCrcType(ct);
    }
 else     if (getCrcType() != DataChecksum.Type.MIXED && getCrcType() != ct) {
      setCrcType(DataChecksum.Type.MIXED);
    }
    if (LOG.isDebugEnabled()) {
      if (bgIdx == 0) {
        LOG.debug("set bytesPerCRC=" + getBytesPerCRC() + ", crcPerBlock="+ getCrcPerBlock());
      }
      LOG.debug("got reply from " + datanode + ": md5="+ md5);
    }
  }
 }
