{
  String user=null;
  String queue=null;
  String name=null;
  String type=null;
  boolean unmanagedApplication=false;
  long createdTime=0;
  long finishedTime=0;
  float progress=0.0f;
  int applicationPriority=0;
  ApplicationAttemptId latestApplicationAttemptId=null;
  String diagnosticsInfo=null;
  FinalApplicationStatus finalStatus=FinalApplicationStatus.UNDEFINED;
  YarnApplicationState state=YarnApplicationState.ACCEPTED;
  ApplicationResourceUsageReport appResources=null;
  Set<String> appTags=null;
  Map<ApplicationAccessType,String> appViewACLs=new HashMap<ApplicationAccessType,String>();
  String appNodeLabelExpression=null;
  String amNodeLabelExpression=null;
  Map<String,Object> entityInfo=entity.getOtherInfo();
  if (entityInfo != null) {
    if (entityInfo.containsKey(ApplicationMetricsConstants.USER_ENTITY_INFO)) {
      user=entityInfo.get(ApplicationMetricsConstants.USER_ENTITY_INFO).toString();
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.APP_VIEW_ACLS_ENTITY_INFO)) {
      String appViewACLsStr=entityInfo.get(ApplicationMetricsConstants.APP_VIEW_ACLS_ENTITY_INFO).toString();
      if (appViewACLsStr.length() > 0) {
        appViewACLs.put(ApplicationAccessType.VIEW_APP,appViewACLsStr);
      }
    }
    if (field == ApplicationReportField.USER_AND_ACLS) {
      return new ApplicationReportExt(ApplicationReport.newInstance(ConverterUtils.toApplicationId(entity.getEntityId()),latestApplicationAttemptId,user,queue,name,null,-1,null,state,diagnosticsInfo,null,createdTime,finishedTime,finalStatus,null,null,progress,type,null,appTags,unmanagedApplication,Priority.newInstance(applicationPriority),appNodeLabelExpression,amNodeLabelExpression),appViewACLs);
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.QUEUE_ENTITY_INFO)) {
      queue=entityInfo.get(ApplicationMetricsConstants.QUEUE_ENTITY_INFO).toString();
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.NAME_ENTITY_INFO)) {
      name=entityInfo.get(ApplicationMetricsConstants.NAME_ENTITY_INFO).toString();
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.TYPE_ENTITY_INFO)) {
      type=entityInfo.get(ApplicationMetricsConstants.TYPE_ENTITY_INFO).toString();
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.TYPE_ENTITY_INFO)) {
      type=entityInfo.get(ApplicationMetricsConstants.TYPE_ENTITY_INFO).toString();
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.UNMANAGED_APPLICATION_ENTITY_INFO)) {
      unmanagedApplication=Boolean.parseBoolean(entityInfo.get(ApplicationMetricsConstants.UNMANAGED_APPLICATION_ENTITY_INFO).toString());
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO)) {
      applicationPriority=Integer.parseInt(entityInfo.get(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO).toString());
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.APP_NODE_LABEL_EXPRESSION)) {
      appNodeLabelExpression=entityInfo.get(ApplicationMetricsConstants.APP_NODE_LABEL_EXPRESSION).toString();
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.AM_NODE_LABEL_EXPRESSION)) {
      amNodeLabelExpression=entityInfo.get(ApplicationMetricsConstants.AM_NODE_LABEL_EXPRESSION).toString();
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.APP_CPU_METRICS)) {
      long vcoreSeconds=Long.parseLong(entityInfo.get(ApplicationMetricsConstants.APP_CPU_METRICS).toString());
      long memorySeconds=Long.parseLong(entityInfo.get(ApplicationMetricsConstants.APP_MEM_METRICS).toString());
      appResources=ApplicationResourceUsageReport.newInstance(0,0,null,null,null,memorySeconds,vcoreSeconds,0,0);
    }
    if (entityInfo.containsKey(ApplicationMetricsConstants.APP_TAGS_INFO)) {
      appTags=new HashSet<String>();
      Object obj=entityInfo.get(ApplicationMetricsConstants.APP_TAGS_INFO);
      if (obj != null && obj instanceof Collection<?>) {
        for (        Object o : (Collection<?>)obj) {
          if (o != null) {
            appTags.add(o.toString());
          }
        }
      }
    }
  }
  List<TimelineEvent> events=entity.getEvents();
  if (events != null) {
    for (    TimelineEvent event : events) {
      if (event.getEventType().equals(ApplicationMetricsConstants.CREATED_EVENT_TYPE)) {
        createdTime=event.getTimestamp();
      }
 else       if (event.getEventType().equals(ApplicationMetricsConstants.UPDATED_EVENT_TYPE)) {
        Map<String,Object> eventInfo=event.getEventInfo();
        if (eventInfo == null) {
          continue;
        }
        applicationPriority=Integer.parseInt(eventInfo.get(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO).toString());
        queue=eventInfo.get(ApplicationMetricsConstants.QUEUE_ENTITY_INFO).toString();
      }
 else       if (event.getEventType().equals(ApplicationMetricsConstants.FINISHED_EVENT_TYPE)) {
        progress=1.0F;
        finishedTime=event.getTimestamp();
        Map<String,Object> eventInfo=event.getEventInfo();
        if (eventInfo == null) {
          continue;
        }
        if (eventInfo.containsKey(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO)) {
          latestApplicationAttemptId=ConverterUtils.toApplicationAttemptId(eventInfo.get(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO).toString());
        }
        if (eventInfo.containsKey(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)) {
          diagnosticsInfo=eventInfo.get(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO).toString();
        }
        if (eventInfo.containsKey(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO)) {
          finalStatus=FinalApplicationStatus.valueOf(eventInfo.get(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO).toString());
        }
        if (eventInfo.containsKey(ApplicationMetricsConstants.STATE_EVENT_INFO)) {
          state=YarnApplicationState.valueOf(eventInfo.get(ApplicationMetricsConstants.STATE_EVENT_INFO).toString());
        }
      }
    }
  }
  return new ApplicationReportExt(ApplicationReport.newInstance(ConverterUtils.toApplicationId(entity.getEntityId()),latestApplicationAttemptId,user,queue,name,null,-1,null,state,diagnosticsInfo,null,createdTime,finishedTime,finalStatus,appResources,null,progress,type,null,appTags,unmanagedApplication,Priority.newInstance(applicationPriority),appNodeLabelExpression,amNodeLabelExpression),appViewACLs);
}
