{
  final String TEST_SPACE_ROOT="/test";
  final String SCRIPT_TEST_DIR=OUT_DIR.getAbsolutePath();
  String script=SCRIPT_TEST_DIR + "/" + "loadgenscript";
  String script2=SCRIPT_TEST_DIR + "/" + "loadgenscript2";
  File scriptFile1=new File(script);
  File scriptFile2=new File(script2);
  FileWriter writer=new FileWriter(DIR_STRUCTURE_FILE);
  writer.write(DIR_STRUCTURE_FIRST_LINE + "\n");
  writer.write(DIR_STRUCTURE_SECOND_LINE + "\n");
  writer.close();
  writer=new FileWriter(FILE_STRUCTURE_FILE);
  writer.write(FILE_STRUCTURE_FIRST_LINE + "\n");
  writer.write(FILE_STRUCTURE_SECOND_LINE + "\n");
  writer.close();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(CONF).numDataNodes(3).build();
  cluster.waitActive();
  try {
    DataGenerator dg=new DataGenerator();
    dg.setConf(CONF);
    String[] args=new String[]{"-inDir",OUT_DIR.getAbsolutePath(),"-root",TEST_SPACE_ROOT};
    assertEquals(0,dg.run(args));
    final int READ_PROBABILITY=1;
    final int WRITE_PROBABILITY=3;
    final int MAX_DELAY_BETWEEN_OPS=7;
    final int NUM_OF_THREADS=9;
    final int START_TIME=11;
    final int ELAPSED_TIME=13;
    LoadGenerator lg=new LoadGenerator();
    lg.setConf(CONF);
    args=new String[]{"-readProbability","0.3","-writeProbability","0.3","-root",TEST_SPACE_ROOT,"-maxDelayBetweenOps","0","-numOfThreads","1","-startTime",Long.toString(Time.now()),"-elapsedTime","10"};
    assertEquals(0,lg.run(args));
    String oldArg=args[READ_PROBABILITY];
    args[READ_PROBABILITY]="1.1";
    assertEquals(-1,lg.run(args));
    args[READ_PROBABILITY]="-1.1";
    assertEquals(-1,lg.run(args));
    args[READ_PROBABILITY]=oldArg;
    oldArg=args[WRITE_PROBABILITY];
    args[WRITE_PROBABILITY]="1.1";
    assertEquals(-1,lg.run(args));
    args[WRITE_PROBABILITY]="-1.1";
    assertEquals(-1,lg.run(args));
    args[WRITE_PROBABILITY]="0.9";
    assertEquals(-1,lg.run(args));
    args[READ_PROBABILITY]=oldArg;
    oldArg=args[MAX_DELAY_BETWEEN_OPS];
    args[MAX_DELAY_BETWEEN_OPS]="1.x1";
    assertEquals(-1,lg.run(args));
    args[MAX_DELAY_BETWEEN_OPS]=oldArg;
    oldArg=args[MAX_DELAY_BETWEEN_OPS];
    args[MAX_DELAY_BETWEEN_OPS]="1.x1";
    assertEquals(-1,lg.run(args));
    args[MAX_DELAY_BETWEEN_OPS]=oldArg;
    oldArg=args[NUM_OF_THREADS];
    args[NUM_OF_THREADS]="-1";
    assertEquals(-1,lg.run(args));
    args[NUM_OF_THREADS]=oldArg;
    oldArg=args[START_TIME];
    args[START_TIME]="-1";
    assertEquals(-1,lg.run(args));
    args[START_TIME]=oldArg;
    oldArg=args[ELAPSED_TIME];
    args[ELAPSED_TIME]="-1";
    assertEquals(-1,lg.run(args));
    args[ELAPSED_TIME]=oldArg;
    FileWriter fw=new FileWriter(scriptFile1);
    fw.write("2 .22 .33\n");
    fw.write("3 .10 .6\n");
    fw.write("6 0 .7\n");
    fw.close();
    String[] scriptArgs=new String[]{"-root",TEST_SPACE_ROOT,"-maxDelayBetweenOps","0","-numOfThreads","10","-startTime",Long.toString(Time.now()),"-scriptFile",script};
    assertEquals(0,lg.run(scriptArgs));
    fw=new FileWriter(scriptFile2);
    fw.write("2 .22 .33\n");
    fw.write("3 blah blah blah .6\n");
    fw.write("6 0 .7\n");
    fw.close();
    scriptArgs[scriptArgs.length - 1]=script2;
    assertEquals(-1,lg.run(scriptArgs));
  }
  finally {
    cluster.shutdown();
    DIR_STRUCTURE_FILE.delete();
    FILE_STRUCTURE_FILE.delete();
    scriptFile1.delete();
    scriptFile2.delete();
  }
}
