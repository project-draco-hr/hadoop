{
switch (event.getType()) {
case NODE_ADDED:
{
      NodeAddedSchedulerEvent nodeAddedEvent=(NodeAddedSchedulerEvent)event;
      addNode(nodeAddedEvent.getAddedRMNode());
    }
  break;
case NODE_REMOVED:
{
  NodeRemovedSchedulerEvent nodeRemovedEvent=(NodeRemovedSchedulerEvent)event;
  removeNode(nodeRemovedEvent.getRemovedRMNode());
}
break;
case NODE_UPDATE:
{
NodeUpdateSchedulerEvent nodeUpdatedEvent=(NodeUpdateSchedulerEvent)event;
nodeUpdate(nodeUpdatedEvent.getRMNode(),nodeUpdatedEvent.getNewlyLaunchedContainers(),nodeUpdatedEvent.getCompletedContainers());
}
break;
case APP_ADDED:
{
AppAddedSchedulerEvent appAddedEvent=(AppAddedSchedulerEvent)event;
addApplication(appAddedEvent.getApplicationAttemptId(),appAddedEvent.getQueue(),appAddedEvent.getUser());
}
break;
case APP_REMOVED:
{
AppRemovedSchedulerEvent appRemovedEvent=(AppRemovedSchedulerEvent)event;
try {
doneApplication(appRemovedEvent.getApplicationAttemptID(),appRemovedEvent.getFinalAttemptState());
}
 catch (IOException ie) {
LOG.error("Unable to remove application " + appRemovedEvent.getApplicationAttemptID(),ie);
}
}
break;
case CONTAINER_EXPIRED:
{
ContainerExpiredSchedulerEvent containerExpiredEvent=(ContainerExpiredSchedulerEvent)event;
ContainerId containerid=containerExpiredEvent.getContainerId();
containerCompleted(getRMContainer(containerid),SchedulerUtils.createAbnormalContainerStatus(containerid,SchedulerUtils.EXPIRED_CONTAINER),RMContainerEventType.EXPIRE);
}
break;
default :
LOG.error("Invalid eventtype " + event.getType() + ". Ignoring!");
}
}
