{
  LOG.debug("assignContainers:" + " node=" + node.getRMNode().getNodeAddress() + " application="+ application.getApplicationId().getId()+ " priority="+ priority.getPriority()+ " assignableContainers="+ assignableContainers+ " request="+ request+ " type="+ type);
  Resource capability=request.getCapability();
  int availableContainers=node.getAvailableResource().getMemory() / capability.getMemory();
  int assignedContainers=Math.min(assignableContainers,availableContainers);
  if (assignedContainers > 0) {
    for (int i=0; i < assignedContainers; ++i) {
      Container container=BuilderUtils.newContainer(recordFactory,application.getApplicationAttemptId(),application.getNewContainerId(),node.getRMNode().getNodeID(),node.getRMNode().getHttpAddress(),capability,priority);
      if (UserGroupInformation.isSecurityEnabled()) {
        ContainerToken containerToken=recordFactory.newRecordInstance(ContainerToken.class);
        NodeId nodeId=container.getNodeId();
        ContainerTokenIdentifier tokenidentifier=new ContainerTokenIdentifier(container.getId(),nodeId.toString(),container.getResource());
        containerToken.setIdentifier(ByteBuffer.wrap(tokenidentifier.getBytes()));
        containerToken.setKind(ContainerTokenIdentifier.KIND.toString());
        containerToken.setPassword(ByteBuffer.wrap(containerTokenSecretManager.createPassword(tokenidentifier)));
        InetSocketAddress addr=NetUtils.createSocketAddr(nodeId.getHost(),nodeId.getPort());
        containerToken.setService(addr.getAddress().getHostAddress() + ":" + addr.getPort());
        container.setContainerToken(containerToken);
      }
      RMContainer rmContainer=application.allocate(type,node,priority,request,container);
      node.allocateContainer(application.getApplicationId(),rmContainer);
    }
    Resources.addTo(usedResource,Resources.multiply(capability,assignedContainers));
  }
  return assignedContainers;
}
