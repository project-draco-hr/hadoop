{
  super(conf);
  kmsUrl=createServiceURL(extractKMSPath(uri));
  if ("https".equalsIgnoreCase(new URL(kmsUrl).getProtocol())) {
    sslFactory=new SSLFactory(SSLFactory.Mode.CLIENT,conf);
    try {
      sslFactory.init();
    }
 catch (    GeneralSecurityException ex) {
      throw new IOException(ex);
    }
  }
  int timeout=conf.getInt(TIMEOUT_ATTR,DEFAULT_TIMEOUT);
  authRetry=conf.getInt(AUTH_RETRY,DEFAULT_AUTH_RETRY);
  configurator=new TimeoutConnConfigurator(timeout,sslFactory);
  encKeyVersionQueue=new ValueQueue<KeyProviderCryptoExtension.EncryptedKeyVersion>(conf.getInt(CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_SIZE,CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_SIZE_DEFAULT),conf.getFloat(CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_LOW_WATERMARK,CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_LOW_WATERMARK_DEFAULT),conf.getInt(CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_EXPIRY_MS,CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_EXPIRY_DEFAULT),conf.getInt(CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_NUM_REFILL_THREADS,CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_NUM_REFILL_THREADS_DEFAULT),new EncryptedQueueRefiller());
  authToken=new DelegationTokenAuthenticatedURL.Token();
  actualUgi=(UserGroupInformation.getCurrentUser().getAuthenticationMethod() == UserGroupInformation.AuthenticationMethod.PROXY) ? UserGroupInformation.getCurrentUser().getRealUser() : UserGroupInformation.getCurrentUser();
}
