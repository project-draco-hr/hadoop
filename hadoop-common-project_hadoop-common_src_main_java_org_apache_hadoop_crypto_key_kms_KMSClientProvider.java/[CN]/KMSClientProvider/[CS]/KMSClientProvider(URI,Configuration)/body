{
  Path path=ProviderUtils.unnestUri(uri);
  URL url=path.toUri().toURL();
  kmsUrl=createServiceURL(url);
  if ("https".equalsIgnoreCase(url.getProtocol())) {
    sslFactory=new SSLFactory(SSLFactory.Mode.CLIENT,conf);
    try {
      sslFactory.init();
    }
 catch (    GeneralSecurityException ex) {
      throw new IOException(ex);
    }
  }
  int timeout=conf.getInt(TIMEOUT_ATTR,DEFAULT_TIMEOUT);
  configurator=new TimeoutConnConfigurator(timeout,sslFactory);
  encKeyVersionQueue=new ValueQueue<KeyProviderCryptoExtension.EncryptedKeyVersion>(conf.getInt(CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_SIZE,CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_SIZE_DEFAULT),conf.getFloat(CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_LOW_WATERMARK,CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_LOW_WATERMARK_DEFAULT),conf.getInt(CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_EXPIRY_MS,CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_EXPIRY_DEFAULT),conf.getInt(CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_NUM_REFILL_THREADS,CommonConfigurationKeysPublic.KMS_CLIENT_ENC_KEY_CACHE_NUM_REFILL_THREADS_DEFAULT),new EncryptedQueueRefiller());
}
