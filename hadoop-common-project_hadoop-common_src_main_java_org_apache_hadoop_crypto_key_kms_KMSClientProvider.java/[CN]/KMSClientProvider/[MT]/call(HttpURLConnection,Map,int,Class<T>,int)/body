{
  T ret=null;
  try {
    if (jsonOutput != null) {
      writeJson(jsonOutput,conn.getOutputStream());
    }
  }
 catch (  IOException ex) {
    IOUtils.closeStream(conn.getInputStream());
    throw ex;
  }
  if ((conn.getResponseCode() == HttpURLConnection.HTTP_FORBIDDEN && (conn.getResponseMessage().equals(ANONYMOUS_REQUESTS_DISALLOWED) || conn.getResponseMessage().contains(INVALID_SIGNATURE))) || conn.getResponseCode() == HttpURLConnection.HTTP_UNAUTHORIZED) {
    KMSClientProvider.this.authToken=new DelegationTokenAuthenticatedURL.Token();
    if (authRetryCount > 0) {
      String contentType=conn.getRequestProperty(CONTENT_TYPE);
      String requestMethod=conn.getRequestMethod();
      URL url=conn.getURL();
      conn=createConnection(url,requestMethod);
      conn.setRequestProperty(CONTENT_TYPE,contentType);
      return call(conn,jsonOutput,expectedResponse,klass,authRetryCount - 1);
    }
  }
  try {
    AuthenticatedURL.extractToken(conn,authToken);
  }
 catch (  AuthenticationException e) {
  }
  HttpExceptionUtils.validateResponse(conn,expectedResponse);
  if (conn.getContentType() != null && conn.getContentType().trim().toLowerCase().startsWith(APPLICATION_JSON_MIME) && klass != null) {
    ObjectMapper mapper=new ObjectMapper();
    InputStream is=null;
    try {
      is=conn.getInputStream();
      ret=mapper.readValue(is,klass);
    }
  finally {
      IOUtils.closeStream(is);
    }
  }
  return ret;
}
