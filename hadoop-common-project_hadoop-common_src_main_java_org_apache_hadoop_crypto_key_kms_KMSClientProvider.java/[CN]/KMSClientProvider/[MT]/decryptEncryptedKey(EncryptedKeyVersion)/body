{
  checkNotNull(encryptedKeyVersion.getKeyVersionName(),"versionName");
  checkNotNull(encryptedKeyVersion.getIv(),"iv");
  Preconditions.checkArgument(encryptedKeyVersion.getEncryptedKey().getVersionName().equals(KeyProviderCryptoExtension.EEK),"encryptedKey version name must be '%s', is '%s'",KeyProviderCryptoExtension.EK,encryptedKeyVersion.getEncryptedKey().getVersionName());
  checkNotNull(encryptedKeyVersion.getEncryptedKey(),"encryptedKey");
  Map<String,String> params=new HashMap<String,String>();
  params.put(KMSRESTConstants.EEK_OP,KMSRESTConstants.EEK_DECRYPT);
  Map<String,Object> jsonPayload=new HashMap<String,Object>();
  jsonPayload.put(KMSRESTConstants.NAME_FIELD,encryptedKeyVersion.getKeyName());
  jsonPayload.put(KMSRESTConstants.IV_FIELD,Base64.encodeBase64String(encryptedKeyVersion.getIv()));
  jsonPayload.put(KMSRESTConstants.MATERIAL_FIELD,Base64.encodeBase64String(encryptedKeyVersion.getEncryptedKey().getMaterial()));
  URL url=createURL(KMSRESTConstants.KEY_VERSION_RESOURCE,encryptedKeyVersion.getKeyVersionName(),KMSRESTConstants.EEK_SUB_RESOURCE,params);
  HttpURLConnection conn=createConnection(url,HTTP_POST);
  conn.setRequestProperty(CONTENT_TYPE,APPLICATION_JSON_MIME);
  Map response=call(conn,jsonPayload,HttpURLConnection.HTTP_OK,Map.class);
  return parseJSONKeyVersion(response);
}
