{
  numReduces=0;
  numMaps=0;
  final Map<TaskId,Task> tasks=job.getTasks();
  if (tasks == null) {
    return;
  }
  for (  Task task : tasks.values()) {
    Map<TaskAttemptId,TaskAttempt> attempts=task.getAttempts();
    int successful, failed, killed;
    for (    TaskAttempt attempt : attempts.values()) {
      successful=0;
      failed=0;
      killed=0;
      if (TaskAttemptStateUI.NEW.correspondsTo(attempt.getState())) {
      }
 else       if (TaskAttemptStateUI.RUNNING.correspondsTo(attempt.getState())) {
      }
 else       if (TaskAttemptStateUI.SUCCESSFUL.correspondsTo(attempt.getState())) {
        ++successful;
      }
 else       if (TaskAttemptStateUI.FAILED.correspondsTo(attempt.getState())) {
        ++failed;
      }
 else       if (TaskAttemptStateUI.KILLED.correspondsTo(attempt.getState())) {
        ++killed;
      }
switch (task.getType()) {
case MAP:
        successfulMapAttempts+=successful;
      failedMapAttempts+=failed;
    killedMapAttempts+=killed;
  if (attempt.getState() == TaskAttemptState.SUCCEEDED) {
    numMaps++;
    avgMapTime+=(attempt.getFinishTime() - attempt.getLaunchTime());
  }
break;
case REDUCE:
successfulReduceAttempts+=successful;
failedReduceAttempts+=failed;
killedReduceAttempts+=killed;
if (attempt.getState() == TaskAttemptState.SUCCEEDED) {
numReduces++;
avgShuffleTime+=(attempt.getShuffleFinishTime() - attempt.getLaunchTime());
avgMergeTime+=attempt.getSortFinishTime() - attempt.getLaunchTime();
avgReduceTime+=(attempt.getFinishTime() - attempt.getShuffleFinishTime());
}
break;
}
}
}
if (numMaps > 0) {
avgMapTime=avgMapTime / numMaps;
}
if (numReduces > 0) {
avgReduceTime=avgReduceTime / numReduces;
avgShuffleTime=avgShuffleTime / numReduces;
avgMergeTime=avgMergeTime / numReduces;
}
}
