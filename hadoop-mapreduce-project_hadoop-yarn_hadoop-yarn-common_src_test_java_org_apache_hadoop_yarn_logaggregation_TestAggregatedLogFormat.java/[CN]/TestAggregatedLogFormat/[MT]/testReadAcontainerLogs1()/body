{
  Configuration conf=new Configuration();
  File workDir=new File(testWorkDir,"testReadAcontainerLogs1");
  Path remoteAppLogFile=new Path(workDir.getAbsolutePath(),"aggregatedLogFile");
  Path srcFileRoot=new Path(workDir.getAbsolutePath(),"srcFiles");
  ContainerId testContainerId=BuilderUtils.newContainerId(1,1,1,1);
  Path t=new Path(srcFileRoot,testContainerId.getApplicationAttemptId().getApplicationId().toString());
  Path srcFilePath=new Path(t,testContainerId.toString());
  int numChars=80000;
  writeSrcFile(srcFilePath,"stdout",numChars);
  UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
  LogWriter logWriter=new LogWriter(conf,remoteAppLogFile,ugi);
  LogKey logKey=new LogKey(testContainerId);
  LogValue logValue=new LogValue(Collections.singletonList(srcFileRoot.toString()),testContainerId);
  logWriter.append(logKey,logValue);
  logWriter.closeWriter();
  LogReader logReader=new LogReader(conf,remoteAppLogFile);
  LogKey rLogKey=new LogKey();
  DataInputStream dis=logReader.next(rLogKey);
  Writer writer=new StringWriter();
  LogReader.readAcontainerLogs(dis,writer);
  String s=writer.toString();
  int expectedLength="\n\nLogType:stdout".length() + ("\nLogLength:" + numChars).length() + "\nLog Contents:\n".length()+ numChars;
  Assert.assertTrue("LogType not matched",s.contains("LogType:stdout"));
  Assert.assertTrue("LogLength not matched",s.contains("LogLength:" + numChars));
  Assert.assertTrue("Log Contents not matched",s.contains("Log Contents"));
  StringBuilder sb=new StringBuilder();
  for (int i=0; i < numChars; i++) {
    sb.append(filler);
  }
  String expectedContent=sb.toString();
  Assert.assertTrue("Log content incorrect",s.contains(expectedContent));
  Assert.assertEquals(expectedLength,s.length());
}
