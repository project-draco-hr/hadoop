{
  boolean cyclePresent=false;
  HashSet<ControlledJob> SourceSet=new HashSet<ControlledJob>();
  HashMap<ControlledJob,List<ControlledJob>> processedMap=new HashMap<ControlledJob,List<ControlledJob>>();
  for (  ControlledJob n : jobList) {
    processedMap.put(n,new ArrayList<ControlledJob>());
  }
  for (  ControlledJob n : jobList) {
    if (!hasInComingEdge(n,jobList,processedMap)) {
      SourceSet.add(n);
    }
  }
  while (!SourceSet.isEmpty()) {
    ControlledJob controlledJob=SourceSet.iterator().next();
    SourceSet.remove(controlledJob);
    if (controlledJob.getDependentJobs() != null) {
      for (int i=0; i < controlledJob.getDependentJobs().size(); i++) {
        ControlledJob depenControlledJob=controlledJob.getDependentJobs().get(i);
        processedMap.get(controlledJob).add(depenControlledJob);
        if (!hasInComingEdge(controlledJob,jobList,processedMap)) {
          SourceSet.add(depenControlledJob);
        }
      }
    }
  }
  for (  ControlledJob controlledJob : jobList) {
    if (controlledJob.getDependentJobs() != null && controlledJob.getDependentJobs().size() != processedMap.get(controlledJob).size()) {
      cyclePresent=true;
      LOG.error("Job control has circular dependency for the  job " + controlledJob.getJobName());
      break;
    }
  }
  return cyclePresent;
}
