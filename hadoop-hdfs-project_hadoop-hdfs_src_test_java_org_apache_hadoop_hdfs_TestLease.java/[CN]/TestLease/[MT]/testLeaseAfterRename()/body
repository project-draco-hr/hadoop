{
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
  try {
    Path p=new Path("/test-file");
    Path d=new Path("/test-d");
    Path d2=new Path("/test-d-other");
    FileSystem fs=cluster.getFileSystem();
    FSDataOutputStream out=fs.create(p);
    out.writeBytes("something");
    Assert.assertTrue(hasLease(cluster,p));
    Assert.assertEquals(1,leaseCount(cluster));
    DistributedFileSystem fs2=(DistributedFileSystem)FileSystem.newInstance(fs.getUri(),fs.getConf());
    LOG.info("DMS: rename file into dir");
    Path pRenamed=new Path(d,p.getName());
    fs2.mkdirs(d);
    fs2.rename(p,pRenamed);
    Assert.assertFalse(p + " exists",fs2.exists(p));
    Assert.assertTrue(pRenamed + " not found",fs2.exists(pRenamed));
    Assert.assertFalse("has lease for " + p,hasLease(cluster,p));
    Assert.assertTrue("no lease for " + pRenamed,hasLease(cluster,pRenamed));
    Assert.assertEquals(1,leaseCount(cluster));
    LOG.info("DMS: rename parent dir");
    Path pRenamedAgain=new Path(d2,pRenamed.getName());
    fs2.rename(d,d2);
    Assert.assertFalse(d + " exists",fs2.exists(d));
    Assert.assertFalse("has lease for " + pRenamed,hasLease(cluster,pRenamed));
    Assert.assertTrue(d2 + " not found",fs2.exists(d2));
    Assert.assertTrue(pRenamedAgain + " not found",fs2.exists(pRenamedAgain));
    Assert.assertTrue("no lease for " + pRenamedAgain,hasLease(cluster,pRenamedAgain));
    Assert.assertEquals(1,leaseCount(cluster));
    LOG.info("DMS: rename parent again");
    pRenamed=pRenamedAgain;
    pRenamedAgain=new Path(new Path(d,d2.getName()),p.getName());
    fs2.mkdirs(d);
    fs2.rename(d2,d);
    Assert.assertFalse(d2 + " exists",fs2.exists(d2));
    Assert.assertFalse("no lease for " + pRenamed,hasLease(cluster,pRenamed));
    Assert.assertTrue(d + " not found",fs2.exists(d));
    Assert.assertTrue(pRenamedAgain + " not found",fs2.exists(pRenamedAgain));
    Assert.assertTrue("no lease for " + pRenamedAgain,hasLease(cluster,pRenamedAgain));
    Assert.assertEquals(1,leaseCount(cluster));
    pRenamed=pRenamedAgain;
    pRenamedAgain=new Path(d2,p.getName());
    fs2.rename(pRenamed.getParent(),d2,Options.Rename.OVERWRITE);
    Assert.assertFalse(pRenamed.getParent() + " not found",fs2.exists(pRenamed.getParent()));
    Assert.assertFalse("has lease for " + pRenamed,hasLease(cluster,pRenamed));
    Assert.assertTrue(d2 + " not found",fs2.exists(d2));
    Assert.assertTrue(pRenamedAgain + " not found",fs2.exists(pRenamedAgain));
    Assert.assertTrue("no lease for " + pRenamedAgain,hasLease(cluster,pRenamedAgain));
    Assert.assertEquals(1,leaseCount(cluster));
    pRenamed=pRenamedAgain;
    pRenamedAgain=new Path(d,p.getName());
    fs2.rename(pRenamed.getParent(),d,Options.Rename.OVERWRITE);
    Assert.assertFalse(pRenamed.getParent() + " not found",fs2.exists(pRenamed.getParent()));
    Assert.assertFalse("has lease for " + pRenamed,hasLease(cluster,pRenamed));
    Assert.assertTrue(d + " not found",fs2.exists(d));
    Assert.assertTrue(pRenamedAgain + " not found",fs2.exists(pRenamedAgain));
    Assert.assertTrue("no lease for " + pRenamedAgain,hasLease(cluster,pRenamedAgain));
    Assert.assertEquals(1,leaseCount(cluster));
  }
  finally {
    cluster.shutdown();
  }
}
