{
  final String[] groups=new String[]{"supergroup"};
  final UserGroupInformation[] ugi=new UserGroupInformation[3];
  for (int i=0; i < ugi.length; i++) {
    ugi[i]=UserGroupInformation.createUserForTesting("user" + i,groups);
  }
  Mockito.doReturn(new HdfsFileStatus(0,false,1,1024,0,0,new FsPermission((short)777),"owner","group",new byte[0],new byte[0],1010,0,null,(byte)0,null)).when(mcp).getFileInfo(anyString());
  Mockito.doReturn(new HdfsFileStatus(0,false,1,1024,0,0,new FsPermission((short)777),"owner","group",new byte[0],new byte[0],1010,0,null,(byte)0,null)).when(mcp).create(anyString(),(FsPermission)anyObject(),anyString(),(EnumSetWritable<CreateFlag>)anyObject(),anyBoolean(),anyShort(),anyLong(),(CryptoProtocolVersion[])anyObject());
  final Configuration conf=new Configuration();
  final DFSClient c1=createDFSClientAs(ugi[0],conf);
  FSDataOutputStream out1=createFsOut(c1,"/out1");
  final DFSClient c2=createDFSClientAs(ugi[0],conf);
  FSDataOutputStream out2=createFsOut(c2,"/out2");
  Assert.assertEquals(c1.getLeaseRenewer(),c2.getLeaseRenewer());
  final DFSClient c3=createDFSClientAs(ugi[1],conf);
  FSDataOutputStream out3=createFsOut(c3,"/out3");
  Assert.assertTrue(c1.getLeaseRenewer() != c3.getLeaseRenewer());
  final DFSClient c4=createDFSClientAs(ugi[1],conf);
  FSDataOutputStream out4=createFsOut(c4,"/out4");
  Assert.assertEquals(c3.getLeaseRenewer(),c4.getLeaseRenewer());
  final DFSClient c5=createDFSClientAs(ugi[2],conf);
  FSDataOutputStream out5=createFsOut(c5,"/out5");
  Assert.assertTrue(c1.getLeaseRenewer() != c5.getLeaseRenewer());
  Assert.assertTrue(c3.getLeaseRenewer() != c5.getLeaseRenewer());
}
