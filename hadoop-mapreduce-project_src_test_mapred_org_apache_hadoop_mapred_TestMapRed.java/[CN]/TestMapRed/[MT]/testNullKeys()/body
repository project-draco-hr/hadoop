{
  JobConf conf=new JobConf(TestMapRed.class);
  FileSystem fs=FileSystem.getLocal(conf);
  HashSet<String> values=new HashSet<String>();
  String m="AAAAAAAAAAAAAA";
  for (int i=1; i < 11; ++i) {
    values.add(m);
    m=m.replace((char)('A' + i - 1),(char)('A' + i));
  }
  Path testdir=new Path(System.getProperty("test.build.data","/tmp")).makeQualified(fs);
  fs.delete(testdir,true);
  Path inFile=new Path(testdir,"nullin/blah");
  SequenceFile.Writer w=SequenceFile.createWriter(fs,conf,inFile,NullWritable.class,Text.class,SequenceFile.CompressionType.NONE);
  Text t=new Text();
  for (  String s : values) {
    t.set(s);
    w.append(NullWritable.get(),t);
  }
  w.close();
  FileInputFormat.setInputPaths(conf,inFile);
  FileOutputFormat.setOutputPath(conf,new Path(testdir,"nullout"));
  conf.setMapperClass(NullMapper.class);
  conf.setReducerClass(IdentityReducer.class);
  conf.setOutputKeyClass(NullWritable.class);
  conf.setOutputValueClass(Text.class);
  conf.setInputFormat(SequenceFileInputFormat.class);
  conf.setOutputFormat(SequenceFileOutputFormat.class);
  conf.setNumReduceTasks(1);
  JobClient.runJob(conf);
  SequenceFile.Reader r=new SequenceFile.Reader(fs,new Path(testdir,"nullout/part-00000"),conf);
  m="AAAAAAAAAAAAAA";
  for (int i=1; r.next(NullWritable.get(),t); ++i) {
    assertTrue("Unexpected value: " + t,values.remove(t.toString()));
    m=m.replace((char)('A' + i - 1),(char)('A' + i));
  }
  assertTrue("Missing values: " + values.toString(),values.isEmpty());
}
