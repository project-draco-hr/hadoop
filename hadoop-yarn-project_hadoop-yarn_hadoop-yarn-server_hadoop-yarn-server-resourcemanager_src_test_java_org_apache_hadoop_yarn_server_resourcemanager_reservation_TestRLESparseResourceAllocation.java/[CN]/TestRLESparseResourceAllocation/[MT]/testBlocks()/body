{
  ResourceCalculator resCalc=new DefaultResourceCalculator();
  RLESparseResourceAllocation rleSparseVector=new RLESparseResourceAllocation(resCalc);
  int[] alloc={10,10,10,10,10,10};
  int start=100;
  Set<Entry<ReservationInterval,Resource>> inputs=generateAllocation(start,alloc,false).entrySet();
  for (  Entry<ReservationInterval,Resource> ip : inputs) {
    rleSparseVector.addInterval(ip.getKey(),ip.getValue());
  }
  LOG.info(rleSparseVector.toString());
  Assert.assertFalse(rleSparseVector.isEmpty());
  Assert.assertEquals(Resource.newInstance(0,0),rleSparseVector.getCapacityAtTime(99));
  Assert.assertEquals(Resource.newInstance(0,0),rleSparseVector.getCapacityAtTime(start + alloc.length + 1));
  for (int i=0; i < alloc.length; i++) {
    Assert.assertEquals(Resource.newInstance(1024 * (alloc[i]),(alloc[i])),rleSparseVector.getCapacityAtTime(start + i));
  }
  Assert.assertEquals(Resource.newInstance(0,0),rleSparseVector.getCapacityAtTime(start + alloc.length + 2));
  for (  Entry<ReservationInterval,Resource> ip : inputs) {
    rleSparseVector.removeInterval(ip.getKey(),ip.getValue());
  }
  LOG.info(rleSparseVector.toString());
  for (int i=0; i < alloc.length; i++) {
    Assert.assertEquals(Resource.newInstance(0,0),rleSparseVector.getCapacityAtTime(start + i));
  }
  Assert.assertTrue(rleSparseVector.isEmpty());
}
