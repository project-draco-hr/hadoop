{
  TaskStatus status=taskStatuses.get(taskid);
  String trackerName;
  String trackerHostName=null;
  TaskStatus.State taskState=TaskStatus.State.FAILED;
  if (status != null) {
    trackerName=status.getTaskTracker();
    trackerHostName=JobInProgress.convertTrackerNameToHostName(trackerName);
    Boolean shouldFail=tasksToKill.remove(taskid);
    if (shouldFail != null) {
      if (status.getRunState() == TaskStatus.State.FAILED || status.getRunState() == TaskStatus.State.KILLED) {
        taskState=(shouldFail) ? TaskStatus.State.FAILED : TaskStatus.State.KILLED;
      }
 else {
        taskState=(shouldFail) ? TaskStatus.State.FAILED_UNCLEAN : TaskStatus.State.KILLED_UNCLEAN;
      }
      status.setRunState(taskState);
      addDiagnosticInfo(taskid,"Task has been " + taskState + " by the user");
    }
    taskState=status.getRunState();
    if (taskState != TaskStatus.State.FAILED && taskState != TaskStatus.State.KILLED && taskState != TaskStatus.State.FAILED_UNCLEAN && taskState != TaskStatus.State.KILLED_UNCLEAN) {
      LOG.info("Task '" + taskid + "' running on '"+ trackerName+ "' in state: '"+ taskState+ "' being failed!");
      status.setRunState(TaskStatus.State.FAILED);
      taskState=TaskStatus.State.FAILED;
    }
    if (0 == status.getFinishTime()) {
      status.setFinishTime(JobTracker.getClock().getTime());
    }
  }
  this.activeTasks.remove(taskid);
  if (this.isMapTask() && !jobSetup && !jobCleanup&& isComplete(taskid)&& jobStatus.getRunState() != JobStatus.SUCCEEDED) {
    this.completes--;
    resetSuccessfulTaskid();
  }
  if (tasks.contains(taskid)) {
    if (taskState == TaskStatus.State.FAILED) {
      numTaskFailures++;
      if (isMapTask()) {
        jobtracker.getInstrumentation().failedMap(taskid);
      }
 else {
        jobtracker.getInstrumentation().failedReduce(taskid);
      }
      machinesWhereFailed.add(trackerHostName);
      if (maxSkipRecords > 0) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("TaskInProgress adding" + status.getNextRecordRange());
        }
        failedRanges.add(status.getNextRecordRange());
        skipping=startSkipping();
      }
    }
 else     if (taskState == TaskStatus.State.KILLED) {
      numKilledTasks++;
      if (isMapTask()) {
        jobtracker.getInstrumentation().killedMap(taskid);
      }
 else {
        jobtracker.getInstrumentation().killedReduce(taskid);
      }
    }
  }
  if (numTaskFailures >= maxTaskAttempts) {
    LOG.info("TaskInProgress " + getTIPId() + " has failed "+ numTaskFailures+ " times.");
    kill();
  }
}
