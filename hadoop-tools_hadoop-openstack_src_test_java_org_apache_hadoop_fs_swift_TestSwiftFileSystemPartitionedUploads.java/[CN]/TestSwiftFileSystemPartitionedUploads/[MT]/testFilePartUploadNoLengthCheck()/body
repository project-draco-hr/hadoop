{
  final Path path=new Path("/test/testFilePartUploadLengthCheck");
  int len=8192;
  final byte[] src=SwiftTestUtils.dataset(len,32,144);
  FSDataOutputStream out=fs.create(path,false,getBufferSize(),(short)1,BLOCK_SIZE);
  try {
    int totalPartitionsToWrite=len / PART_SIZE_BYTES;
    assertPartitionsWritten("Startup",out,0);
    int firstWriteLen=2048;
    out.write(src,0,firstWriteLen);
    long expected=getExpectedPartitionsWritten(firstWriteLen,PART_SIZE_BYTES,false);
    SwiftUtils.debug(LOG,"First write: predict %d partitions written",expected);
    assertPartitionsWritten("First write completed",out,expected);
    int remainder=len - firstWriteLen;
    SwiftUtils.debug(LOG,"remainder: writing: %d bytes",remainder);
    out.write(src,firstWriteLen,remainder);
    expected=getExpectedPartitionsWritten(len,PART_SIZE_BYTES,false);
    assertPartitionsWritten("Remaining data",out,expected);
    out.close();
    expected=getExpectedPartitionsWritten(len,PART_SIZE_BYTES,true);
    assertPartitionsWritten("Stream closed",out,expected);
    Header[] headers=fs.getStore().getObjectHeaders(path,true);
    for (    Header header : headers) {
      LOG.info(header.toString());
    }
    byte[] dest=readDataset(fs,path,len);
    LOG.info("Read dataset from " + path + ": data length ="+ len);
    SwiftTestUtils.compareByteArrays(src,dest,len);
    FileStatus status=fs.getFileStatus(path);
    BlockLocation[] locations=fs.getFileBlockLocations(status,0,len);
    assertNotNull("Null getFileBlockLocations()",locations);
    assertTrue("empty array returned for getFileBlockLocations()",locations.length > 0);
  }
  finally {
    IOUtils.closeStream(out);
  }
}
