{
  final short replication=1;
  startCluster(BLOCK_SIZE,replication,-1);
  final FsVolumeImpl fsVolumeImpl=(FsVolumeImpl)cluster.getDataNodes().get(0).getFSDataset().getFsVolumeReferences().get(0);
  final String methodName=GenericTestUtils.getMethodName();
  final Path file=new Path("/" + methodName + ".01.dat");
  BlockPoolSlice blockPoolSlice=Mockito.mock(BlockPoolSlice.class);
  Mockito.when(blockPoolSlice.createRbwFile((Block)Mockito.any())).thenThrow(new IOException("Synthetic IO Exception Throgh MOCK"));
  Field field=FsVolumeImpl.class.getDeclaredField("bpSlices");
  field.setAccessible(true);
  Map<String,BlockPoolSlice> bpSlices=(Map<String,BlockPoolSlice>)field.get(fsVolumeImpl);
  bpSlices.put(fsVolumeImpl.getBlockPoolList()[0],blockPoolSlice);
  try {
    FSDataOutputStream os=fs.create(file,replication);
    os.write(new byte[1]);
    os.hsync();
    os.close();
    fail("Expecting IOException file creation failure");
  }
 catch (  IOException e) {
  }
  assertTrue("Expected ZERO but got " + fsVolumeImpl.getReservedForRbw(),fsVolumeImpl.getReservedForRbw() == 0);
}
