{
  StringBuilder compliantBlocksSB=new StringBuilder();
  compliantBlocksSB.append("\nBlocks satisfying the specified storage policy:");
  compliantBlocksSB.append("\nStorage Policy                  # of blocks       % of blocks\n");
  StringBuilder nonCompliantBlocksSB=new StringBuilder();
  Formatter compliantFormatter=new Formatter(compliantBlocksSB);
  Formatter nonCompliantFormatter=new Formatter(nonCompliantBlocksSB);
  NumberFormat percentFormat=NumberFormat.getPercentInstance();
  percentFormat.setMinimumFractionDigits(4);
  percentFormat.setMaximumFractionDigits(4);
  for (  Map.Entry<StorageTypeAllocation,Long> storageComboCount : sortByComparator(storageComboCounts)) {
    double percent=(double)storageComboCount.getValue() / (double)totalBlocks;
    StorageTypeAllocation sta=storageComboCount.getKey();
    if (sta.policyMatches()) {
      compliantFormatter.format("%-25s %10d  %20s%n",sta.getStoragePolicyDescriptor(),storageComboCount.getValue(),percentFormat.format(percent));
    }
 else {
      if (nonCompliantBlocksSB.length() == 0) {
        nonCompliantBlocksSB.append("\nBlocks NOT satisfying the specified storage policy:");
        nonCompliantBlocksSB.append("\nStorage Policy                  ");
        nonCompliantBlocksSB.append("Specified Storage Policy      # of blocks       % of blocks\n");
      }
      nonCompliantFormatter.format("%-35s %-20s %10d  %20s%n",sta.getStoragePolicyDescriptor(),sta.getSpecifiedStoragePolicy().getName(),storageComboCount.getValue(),percentFormat.format(percent));
    }
  }
  if (nonCompliantBlocksSB.length() == 0) {
    nonCompliantBlocksSB.append("\nAll blocks satisfy specified storage policy.\n");
  }
  compliantFormatter.close();
  nonCompliantFormatter.close();
  return compliantBlocksSB.toString() + nonCompliantBlocksSB;
}
