{
  Collections.sort(all,new Comparator<LinkArgs>(){
    /** 
 * Compare two LinkArgs objects, such that objects with the same
 * terminal source path components are grouped together.
 */
    @Override public int compare(    LinkArgs a,    LinkArgs b){
      return ComparisonChain.start().compare(a.src.getName(),b.src.getName()).compare(a.src,b.src).compare(a.dst,b.dst).result();
    }
  }
);
  final ArrayList<LinkArgs> duplicates=Lists.newArrayList();
  Long prevBlockId=null;
  boolean prevWasMeta=false;
  boolean addedPrev=false;
  for (int i=0; i < all.size(); i++) {
    LinkArgs args=all.get(i);
    long blockId=Block.getBlockId(args.src.getName());
    boolean isMeta=Block.isMetaFilename(args.src.getName());
    if ((prevBlockId == null) || (prevBlockId.longValue() != blockId)) {
      prevBlockId=blockId;
      addedPrev=false;
    }
 else     if (isMeta == prevWasMeta) {
      duplicates.add(args);
      if (!addedPrev) {
        duplicates.add(all.get(i - 1));
      }
      addedPrev=true;
    }
 else {
      addedPrev=false;
    }
    prevWasMeta=isMeta;
  }
  return duplicates;
}
