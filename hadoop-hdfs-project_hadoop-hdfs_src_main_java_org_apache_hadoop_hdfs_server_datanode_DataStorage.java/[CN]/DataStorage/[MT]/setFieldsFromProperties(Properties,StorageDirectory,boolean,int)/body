{
  if (overrideLayoutVersion) {
    this.layoutVersion=toLayoutVersion;
  }
 else {
    setLayoutVersion(props,sd);
  }
  setcTime(props,sd);
  checkStorageType(props,sd);
  setClusterId(props,layoutVersion,sd);
  if (!DataNodeLayoutVersion.supports(LayoutVersion.Feature.FEDERATION,layoutVersion)) {
    setNamespaceID(props,sd);
  }
  String ssid=props.getProperty("storageID");
  if (ssid == null) {
    throw new InconsistentFSStateException(sd.getRoot(),"file " + STORAGE_FILE_VERSION + " is invalid.");
  }
  String sid=sd.getStorageUuid();
  if (!(sid == null || sid.equals("") || ssid.equals("") || sid.equals(ssid))) {
    throw new InconsistentFSStateException(sd.getRoot(),"has incompatible storage Id.");
  }
  if (sid == null) {
    sd.setStorageUuid(ssid);
  }
  if (props.getProperty("datanodeUuid") != null) {
    String dnUuid=props.getProperty("datanodeUuid");
    if (getDatanodeUuid() == null) {
      setDatanodeUuid(dnUuid);
    }
 else     if (getDatanodeUuid().compareTo(dnUuid) != 0) {
      throw new InconsistentFSStateException(sd.getRoot(),"Root " + sd.getRoot() + ": DatanodeUuid="+ dnUuid+ ", does not match "+ getDatanodeUuid()+ " from other"+ " StorageDirectory.");
    }
  }
}
