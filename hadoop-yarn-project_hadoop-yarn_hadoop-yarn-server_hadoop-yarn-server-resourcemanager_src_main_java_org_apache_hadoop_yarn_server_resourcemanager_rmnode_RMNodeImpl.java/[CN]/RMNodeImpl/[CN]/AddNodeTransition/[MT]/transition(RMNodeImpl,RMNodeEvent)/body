{
  RMNodeStartedEvent startEvent=(RMNodeStartedEvent)event;
  List<NMContainerStatus> containers=null;
  NodeId nodeId=rmNode.nodeId;
  RMNode previousRMNode=rmNode.context.getInactiveRMNodes().remove(nodeId);
  if (previousRMNode != null) {
    rmNode.updateMetricsForRejoinedNode(previousRMNode.getState());
  }
 else {
    NodesListManager.UnknownNodeId unknownNodeId=new NodesListManager.UnknownNodeId(nodeId.getHost());
    previousRMNode=rmNode.context.getInactiveRMNodes().remove(unknownNodeId);
    if (previousRMNode != null) {
      ClusterMetrics.getMetrics().decrDecommisionedNMs();
    }
    ClusterMetrics.getMetrics().incrNumActiveNodes();
    containers=startEvent.getNMContainerStatuses();
    if (containers != null && !containers.isEmpty()) {
      for (      NMContainerStatus container : containers) {
        if (container.getContainerState() == ContainerState.RUNNING) {
          rmNode.launchedContainers.add(container.getContainerId());
        }
      }
    }
  }
  if (null != startEvent.getRunningApplications()) {
    for (    ApplicationId appId : startEvent.getRunningApplications()) {
      handleRunningAppOnNode(rmNode,rmNode.context,appId,rmNode.nodeId);
    }
  }
  rmNode.context.getDispatcher().getEventHandler().handle(new NodeAddedSchedulerEvent(rmNode,containers));
  rmNode.context.getDispatcher().getEventHandler().handle(new NodesListManagerEvent(NodesListManagerEventType.NODE_USABLE,rmNode));
}
