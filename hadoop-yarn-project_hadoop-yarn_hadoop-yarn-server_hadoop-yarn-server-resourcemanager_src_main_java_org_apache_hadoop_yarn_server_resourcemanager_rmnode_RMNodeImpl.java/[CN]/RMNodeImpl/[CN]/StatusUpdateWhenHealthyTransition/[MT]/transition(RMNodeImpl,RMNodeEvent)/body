{
  RMNodeStatusEvent statusEvent=(RMNodeStatusEvent)event;
  rmNode.latestNodeHeartBeatResponse=statusEvent.getLatestResponse();
  NodeHealthStatus remoteNodeHealthStatus=statusEvent.getNodeHealthStatus();
  rmNode.setHealthReport(remoteNodeHealthStatus.getHealthReport());
  rmNode.setLastHealthReportTime(remoteNodeHealthStatus.getLastHealthReportTime());
  NodeState initialState=rmNode.getState();
  boolean isNodeDecommissioning=initialState.equals(NodeState.DECOMMISSIONING);
  if (!remoteNodeHealthStatus.getIsNodeHealthy()) {
    LOG.info("Node " + rmNode.nodeId + " reported UNHEALTHY with details: "+ remoteNodeHealthStatus.getHealthReport());
    if (isNodeDecommissioning) {
      return NodeState.DECOMMISSIONING;
    }
 else {
      reportNodeUnusable(rmNode,NodeState.UNHEALTHY);
      return NodeState.UNHEALTHY;
    }
  }
  if (isNodeDecommissioning) {
    List<ApplicationId> runningApps=rmNode.getRunningApps();
    List<ApplicationId> keepAliveApps=statusEvent.getKeepAliveAppIds();
    if ((runningApps == null || runningApps.size() == 0) && (keepAliveApps == null || keepAliveApps.size() == 0)) {
      RMNodeImpl.deactivateNode(rmNode,NodeState.DECOMMISSIONED);
      return NodeState.DECOMMISSIONED;
    }
  }
  rmNode.handleContainerStatus(statusEvent.getContainers());
  rmNode.handleReportedIncreasedContainers(statusEvent.getNMReportedIncreasedContainers());
  List<LogAggregationReport> logAggregationReportsForApps=statusEvent.getLogAggregationReportsForApps();
  if (logAggregationReportsForApps != null && !logAggregationReportsForApps.isEmpty()) {
    rmNode.handleLogAggregationStatus(logAggregationReportsForApps);
  }
  if (rmNode.nextHeartBeat) {
    rmNode.nextHeartBeat=false;
    rmNode.context.getDispatcher().getEventHandler().handle(new NodeUpdateSchedulerEvent(rmNode));
  }
  if (UserGroupInformation.isSecurityEnabled()) {
    rmNode.context.getDelegationTokenRenewer().updateKeepAliveApplications(statusEvent.getKeepAliveAppIds());
  }
  return initialState;
}
