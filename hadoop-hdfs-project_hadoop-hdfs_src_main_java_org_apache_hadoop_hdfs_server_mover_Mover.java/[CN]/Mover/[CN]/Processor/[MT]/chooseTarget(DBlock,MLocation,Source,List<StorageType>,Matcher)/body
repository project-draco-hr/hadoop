{
  final NetworkTopology cluster=dispatcher.getCluster();
  for (final Iterator<StorageType> i=targetTypes.iterator(); i.hasNext(); ) {
    final StorageType t=i.next();
    for (    StorageGroup target : storages.getTargetStorages(t)) {
      if (matcher.match(cluster,ml.datanode,target.getDatanodeInfo()) && dispatcher.isGoodBlockCandidate(source,target,t,db)) {
        final PendingMove pm=dispatcher.new PendingMove(db,source,target);
        if (pm.chooseProxySource()) {
          i.remove();
          target.incScheduledSize(ml.size);
          dispatcher.executePendingMove(pm);
          return true;
        }
      }
    }
  }
  return false;
}
