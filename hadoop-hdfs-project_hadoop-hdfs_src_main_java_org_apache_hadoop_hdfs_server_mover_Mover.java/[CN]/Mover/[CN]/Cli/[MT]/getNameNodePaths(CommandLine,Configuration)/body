{
  Map<URI,List<Path>> map=Maps.newHashMap();
  String[] paths=null;
  if (line.hasOption("f")) {
    paths=readPathFile(line.getOptionValue("f"));
  }
 else   if (line.hasOption("p")) {
    paths=line.getOptionValues("p");
  }
  Collection<URI> namenodes=DFSUtil.getNsServiceRpcUris(conf);
  if (paths == null || paths.length == 0) {
    for (    URI namenode : namenodes) {
      map.put(namenode,null);
    }
    return map;
  }
  final URI singleNs=namenodes.size() == 1 ? namenodes.iterator().next() : null;
  for (  String path : paths) {
    Path target=new Path(path);
    if (!target.isUriPathAbsolute()) {
      throw new IllegalArgumentException("The path " + target + " is not absolute");
    }
    URI targetUri=target.toUri();
    if ((targetUri.getAuthority() == null || targetUri.getScheme() == null) && singleNs == null) {
      throw new IllegalArgumentException("The path " + target + " does not contain scheme and authority thus cannot identify"+ " its name service");
    }
    URI key=singleNs;
    if (singleNs == null) {
      key=new URI(targetUri.getScheme(),targetUri.getAuthority(),null,null,null);
      if (!namenodes.contains(key)) {
        throw new IllegalArgumentException("Cannot resolve the path " + target + ". The namenode services specified in the "+ "configuration: "+ namenodes);
      }
    }
    List<Path> targets=map.get(key);
    if (targets == null) {
      targets=Lists.newArrayList();
      map.put(key,targets);
    }
    targets.add(Path.getPathWithoutSchemeAndAuthority(target));
  }
  return map;
}
