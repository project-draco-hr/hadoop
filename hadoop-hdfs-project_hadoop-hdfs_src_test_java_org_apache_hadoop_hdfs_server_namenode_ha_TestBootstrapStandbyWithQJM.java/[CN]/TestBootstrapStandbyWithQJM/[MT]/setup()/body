{
  jCluster=new MiniJournalCluster.Builder(new Configuration()).format(true).numJournalNodes(NUM_JN).build();
  URI journalURI=jCluster.getQuorumJournalURI(NAMESERVICE);
  MiniDFSNNTopology topology=new MiniDFSNNTopology().addNameservice(new MiniDFSNNTopology.NSConf(NAMESERVICE).addNN(new MiniDFSNNTopology.NNConf("nn1").setIpcPort(NN1_IPC_PORT).setHttpPort(NN1_INFO_PORT)).addNN(new MiniDFSNNTopology.NNConf("nn2").setIpcPort(NN2_IPC_PORT).setHttpPort(NN2_INFO_PORT)));
  Configuration conf=initHAConf(journalURI);
  cluster=new MiniDFSCluster.Builder(conf).nnTopology(topology).numDataNodes(1).manageNameDfsSharedDirs(false).build();
  cluster.waitActive();
  Configuration confNN0=new Configuration(conf);
  cluster.shutdown();
  confNN0.set(DFSConfigKeys.DFS_HA_NAMENODE_ID_KEY,"nn1");
  NameNode.initializeSharedEdits(confNN0,true);
  cluster=new MiniDFSCluster.Builder(conf).format(false).nnTopology(topology).numDataNodes(1).manageNameDfsSharedDirs(false).build();
  cluster.waitActive();
  cluster.transitionToActive(0);
  DistributedFileSystem dfs=(DistributedFileSystem)HATestUtil.configureFailoverFs(cluster,conf);
  dfs.mkdirs(new Path("/test2"));
  dfs.close();
}
