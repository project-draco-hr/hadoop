{
  Job job=Job.getInstance(conf);
  FileSystem fs=FileSystem.getLocal(conf);
  Path dir=new Path(System.getProperty("test.build.data",".") + "/mapred");
  Path file=new Path(dir,"test.seq");
  int seed=new Random().nextInt();
  Random random=new Random(seed);
  fs.delete(dir,true);
  FileInputFormat.setInputPaths(job,dir);
  for (int length=0; length < MAX_LENGTH; length+=random.nextInt(MAX_LENGTH / 10) + 1) {
    SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,file,IntWritable.class,LongWritable.class);
    try {
      for (int i=0; i < length; i++) {
        IntWritable key=new IntWritable(i);
        LongWritable value=new LongWritable(10 * i);
        writer.append(key,value);
      }
    }
  finally {
      writer.close();
    }
    TaskAttemptContext context=MapReduceTestUtil.createDummyMapTaskAttemptContext(job.getConfiguration());
    InputFormat<Text,Text> format=new SequenceFileAsTextInputFormat();
    for (int i=0; i < 3; i++) {
      BitSet bits=new BitSet(length);
      int numSplits=random.nextInt(MAX_LENGTH / (SequenceFile.SYNC_INTERVAL / 20)) + 1;
      FileInputFormat.setMaxInputSplitSize(job,fs.getFileStatus(file).getLen() / numSplits);
      for (      InputSplit split : format.getSplits(job)) {
        RecordReader<Text,Text> reader=format.createRecordReader(split,context);
        MapContext<Text,Text,Text,Text> mcontext=new MapContextImpl<Text,Text,Text,Text>(job.getConfiguration(),context.getTaskAttemptID(),reader,null,null,MapReduceTestUtil.createDummyReporter(),split);
        reader.initialize(split,mcontext);
        Class<?> readerClass=reader.getClass();
        assertEquals("reader class is SequenceFileAsTextRecordReader.",SequenceFileAsTextRecordReader.class,readerClass);
        Text key;
        try {
          int count=0;
          while (reader.nextKeyValue()) {
            key=reader.getCurrentKey();
            int keyInt=Integer.parseInt(key.toString());
            assertFalse("Key in multiple partitions.",bits.get(keyInt));
            bits.set(keyInt);
            count++;
          }
        }
  finally {
          reader.close();
        }
      }
      assertEquals("Some keys in no partition.",length,bits.cardinality());
    }
  }
}
