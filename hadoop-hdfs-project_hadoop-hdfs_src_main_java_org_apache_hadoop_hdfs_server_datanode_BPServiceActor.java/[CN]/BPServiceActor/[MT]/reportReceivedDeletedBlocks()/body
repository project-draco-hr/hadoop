{
  ArrayList<StorageReceivedDeletedBlocks> reports=new ArrayList<StorageReceivedDeletedBlocks>(pendingIncrementalBRperStorage.size());
synchronized (pendingIncrementalBRperStorage) {
    for (    Map.Entry<String,PerStoragePendingIncrementalBR> entry : pendingIncrementalBRperStorage.entrySet()) {
      final String storageUuid=entry.getKey();
      final PerStoragePendingIncrementalBR perStorageMap=entry.getValue();
      if (perStorageMap.getBlockInfoCount() > 0) {
        ReceivedDeletedBlockInfo[] rdbi=perStorageMap.dequeueBlockInfos();
        pendingReceivedRequests=(pendingReceivedRequests > rdbi.length ? (pendingReceivedRequests - rdbi.length) : 0);
        reports.add(new StorageReceivedDeletedBlocks(storageUuid,rdbi));
      }
    }
  }
  if (reports.size() == 0) {
    return;
  }
  boolean success=false;
  try {
    bpNamenode.blockReceivedAndDeleted(bpRegistration,bpos.getBlockPoolId(),reports.toArray(new StorageReceivedDeletedBlocks[reports.size()]));
    success=true;
  }
  finally {
    if (!success) {
synchronized (pendingIncrementalBRperStorage) {
        for (        StorageReceivedDeletedBlocks report : reports) {
          PerStoragePendingIncrementalBR perStorageMap=pendingIncrementalBRperStorage.get(report.getStorageID());
          pendingReceivedRequests+=perStorageMap.putMissingBlockInfos(report.getBlocks());
        }
      }
    }
  }
}
