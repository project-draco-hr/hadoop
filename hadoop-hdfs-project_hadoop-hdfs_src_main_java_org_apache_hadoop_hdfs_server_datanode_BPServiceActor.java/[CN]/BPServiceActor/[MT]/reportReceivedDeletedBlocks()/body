{
  Map<String,ReceivedDeletedBlockInfo[]> blockArrays=Maps.newHashMap();
synchronized (pendingIncrementalBRperStorage) {
    for (    Map.Entry<String,PerStoragePendingIncrementalBR> entry : pendingIncrementalBRperStorage.entrySet()) {
      final String storageUuid=entry.getKey();
      final PerStoragePendingIncrementalBR perStorageMap=entry.getValue();
      ReceivedDeletedBlockInfo[] receivedAndDeletedBlockArray=null;
      if (perStorageMap.getBlockInfoCount() > 0) {
        receivedAndDeletedBlockArray=perStorageMap.dequeueBlockInfos();
        pendingReceivedRequests-=receivedAndDeletedBlockArray.length;
        blockArrays.put(storageUuid,receivedAndDeletedBlockArray);
      }
    }
  }
  for (  Map.Entry<String,ReceivedDeletedBlockInfo[]> entry : blockArrays.entrySet()) {
    final String storageUuid=entry.getKey();
    final ReceivedDeletedBlockInfo[] rdbi=entry.getValue();
    StorageReceivedDeletedBlocks[] report={new StorageReceivedDeletedBlocks(storageUuid,rdbi)};
    boolean success=false;
    try {
      bpNamenode.blockReceivedAndDeleted(bpRegistration,bpos.getBlockPoolId(),report);
      success=true;
    }
  finally {
      if (!success) {
synchronized (pendingIncrementalBRperStorage) {
          PerStoragePendingIncrementalBR perStorageMap=pendingIncrementalBRperStorage.get(storageUuid);
          perStorageMap.putMissingBlockInfos(rdbi);
          pendingReceivedRequests+=perStorageMap.getBlockInfoCount();
        }
      }
    }
  }
}
