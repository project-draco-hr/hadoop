{
  final long startTime=now();
  if (startTime - lastBlockReport <= dnConf.blockReportInterval) {
    return null;
  }
  ArrayList<DatanodeCommand> cmds=new ArrayList<DatanodeCommand>();
  reportReceivedDeletedBlocks();
  lastDeletedReport=startTime;
  long brCreateStartTime=now();
  Map<DatanodeStorage,BlockListAsLongs> perVolumeBlockLists=dn.getFSDataset().getBlockReports(bpos.getBlockPoolId());
  int i=0;
  int totalBlockCount=0;
  StorageBlockReport reports[]=new StorageBlockReport[perVolumeBlockLists.size()];
  for (  Map.Entry<DatanodeStorage,BlockListAsLongs> kvPair : perVolumeBlockLists.entrySet()) {
    BlockListAsLongs blockList=kvPair.getValue();
    reports[i++]=new StorageBlockReport(kvPair.getKey(),blockList.getBlockListAsLongs());
    totalBlockCount+=blockList.getNumberOfBlocks();
  }
  int numReportsSent;
  long brSendStartTime=now();
  if (totalBlockCount < dnConf.blockReportSplitThreshold) {
    numReportsSent=1;
    DatanodeCommand cmd=bpNamenode.blockReport(bpRegistration,bpos.getBlockPoolId(),reports);
    if (cmd != null) {
      cmds.add(cmd);
    }
  }
 else {
    numReportsSent=i;
    for (    StorageBlockReport report : reports) {
      StorageBlockReport singleReport[]={report};
      DatanodeCommand cmd=bpNamenode.blockReport(bpRegistration,bpos.getBlockPoolId(),singleReport);
      if (cmd != null) {
        cmds.add(cmd);
      }
    }
  }
  long brSendCost=now() - brSendStartTime;
  long brCreateCost=brSendStartTime - brCreateStartTime;
  dn.getMetrics().addBlockReport(brSendCost);
  LOG.info("Sent " + numReportsSent + " blockreports "+ totalBlockCount+ " blocks total. Took "+ brCreateCost+ " msec to generate and "+ brSendCost+ " msecs for RPC and NN processing. "+ " Got back commands "+ (cmds.size() == 0 ? "none" : Joiner.on("; ").join(cmds)));
  scheduleNextBlockReport(startTime);
  return cmds.size() == 0 ? null : cmds;
}
