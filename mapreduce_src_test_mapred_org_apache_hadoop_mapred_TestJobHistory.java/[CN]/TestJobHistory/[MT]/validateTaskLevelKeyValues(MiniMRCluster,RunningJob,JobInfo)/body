{
  JobTracker jt=mr.getJobTrackerRunner().getJobTracker();
  JobInProgress jip=jt.getJob(job.getID());
  TaskID mapTaskId=new TaskID(job.getID(),TaskType.MAP,0);
  TaskID reduceTaskId=new TaskID(job.getID(),TaskType.REDUCE,0);
  TaskInProgress cleanups[]=jip.cleanup;
  TaskID cleanupTaskId;
  if (cleanups[0].isComplete()) {
    cleanupTaskId=cleanups[0].getTIPId();
  }
 else {
    cleanupTaskId=cleanups[1].getTIPId();
  }
  TaskInProgress setups[]=jip.setup;
  TaskID setupTaskId;
  if (setups[0].isComplete()) {
    setupTaskId=setups[0].getTIPId();
  }
 else {
    setupTaskId=setups[1].getTIPId();
  }
  Map<TaskID,TaskInfo> tasks=jobInfo.getAllTasks();
  for (  TaskInfo task : tasks.values()) {
    TaskID tid=task.getTaskId();
    if (tid.equals(mapTaskId) || tid.equals(reduceTaskId) || tid.equals(cleanupTaskId)|| tid.equals(setupTaskId)) {
      TaskInProgress tip=jip.getTaskInProgress(org.apache.hadoop.mapred.TaskID.downgrade(tid));
      assertTrue("START_TIME of Task " + tid + " obtained from history "+ "file did not match the expected value",tip.getExecStartTime() == task.getStartTime());
      assertTrue("FINISH_TIME of Task " + tid + " obtained from history "+ "file did not match the expected value",tip.getExecFinishTime() == task.getFinishTime());
      if (tid == mapTaskId) {
        assertTrue("Splits of Task " + tid + " obtained from history file "+ " did not match the expected value",tip.getSplitNodes().equals(task.getSplitLocations()));
      }
      TaskAttemptID attemptId=tip.getSuccessfulTaskid();
      TaskStatus ts=tip.getTaskStatus(org.apache.hadoop.mapred.TaskAttemptID.downgrade(attemptId));
      Counters c=new Counters(ts.getCounters());
      assertTrue("Counters of Task " + tid + " obtained from history file "+ " did not match the expected value",c.equals(task.getCounters()));
    }
  }
}
