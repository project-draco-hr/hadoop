{
  MiniMRCluster mr=null;
  MiniDFSCluster dfsCluster=null;
  try {
    JobConf conf=new JobConf();
    conf.setLong("mapred.jobtracker.retirejob.check",1000);
    conf.setLong("mapred.jobtracker.retirejob.interval",1000);
    conf.set(JTConfig.JT_JOBHISTORY_COMPLETED_LOCATION,doneFolder);
    dfsCluster=new MiniDFSCluster(conf,2,true,null);
    String logDir=String.format(historyFolder,dfsCluster.getNameNodePort());
    conf.set(JTConfig.JT_JOBHISTORY_LOCATION,logDir);
    Path logDirPath=new Path(logDir);
    FileSystem logDirFs=logDirPath.getFileSystem(conf);
    if (logDirFs.exists(logDirPath)) {
      boolean deleted=logDirFs.delete(logDirPath,true);
      LOG.info(logDirPath + " deleted " + deleted);
    }
    logDirFs.mkdirs(logDirPath);
    assertEquals("No of file in logDir not correct",0,logDirFs.listStatus(logDirPath).length);
    logDirFs.create(new Path(logDirPath,"f1"));
    logDirFs.create(new Path(logDirPath,"f2"));
    assertEquals("No of file in logDir not correct",2,logDirFs.listStatus(logDirPath).length);
    mr=new MiniMRCluster(2,dfsCluster.getFileSystem().getUri().toString(),3,null,null,conf);
    assertEquals("Files in logDir did not move to DONE folder",0,logDirFs.listStatus(logDirPath).length);
    JobHistory jobHistory=mr.getJobTrackerRunner().getJobTracker().getJobHistory();
    Path doneDir=jobHistory.getCompletedJobHistoryLocation();
    assertEquals("Files in DONE dir not correct",2,doneDir.getFileSystem(conf).listStatus(doneDir).length);
    conf=mr.createJobConf();
    FileSystem fs=FileSystem.get(conf);
    fs.delete(new Path("succeed"),true);
    Path inDir=new Path("succeed/input");
    Path outDir=new Path("succeed/output");
    conf.setSpeculativeExecution(false);
    conf.setInt("mapred.jobtracker.completeuserjobs.maximum",10);
    RunningJob job=UtilsForTests.runJobSucceed(conf,inDir,outDir);
    assertEquals("History DONE folder not correct",new Path(doneFolder).getName(),doneDir.getName());
    JobID id=job.getID();
    String logFileName=getDoneFile(jobHistory,conf,id,doneDir);
    Path logFile=new Path(doneDir,logFileName);
    FileSystem fileSys=logFile.getFileSystem(conf);
    Cluster cluster=new Cluster(conf);
    assertEquals("Client returned wrong history url",logFile.toString(),cluster.getJobHistoryUrl(id));
    assertTrue("History file does not exist",fileSys.exists(logFile));
    Path confFile=getPathForConf(logFile,doneDir);
    assertTrue("Config for completed jobs doesnt exist",fileSys.exists(confFile));
    assertTrue("Completed job config doesnt exist in the done folder",doneDir.getName().equals(confFile.getParent().getName()));
    assertTrue("Completed jobs doesnt exist in the done folder",doneDir.getName().equals(logFile.getParent().getName()));
    Path runningJobsHistoryFolder=logFile.getParent().getParent();
    Path runningJobHistoryFilename=new Path(runningJobsHistoryFolder,logFile.getName());
    Path runningJobConfFilename=new Path(runningJobsHistoryFolder,confFile.getName());
    assertFalse("History file not deleted from the running folder",fileSys.exists(runningJobHistoryFilename));
    assertFalse("Config for completed jobs not deleted from running folder",fileSys.exists(runningJobConfFilename));
    validateJobHistoryFileFormat(jobHistory,job.getID(),conf,"SUCCEEDED",false);
    validateJobHistoryFileContent(mr,job,conf);
  }
  finally {
    if (mr != null) {
      cleanupLocalFiles(mr);
      mr.shutdown();
    }
    if (dfsCluster != null) {
      dfsCluster.shutdown();
    }
  }
}
