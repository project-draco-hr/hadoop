{
  wrap.mkdir(new Path(USER_DIR + "/alpha"),FsPermission.getDirDefault(),false);
  wrap.createSymlink(new Path(USER_DIR + "/alpha"),new Path(USER_DIR + "/alphaLinkz"),false);
  wrap.mkdir(new Path(USER_DIR + "/alpha/beta"),FsPermission.getDirDefault(),false);
  wrap.mkdir(new Path(USER_DIR + "/alpha/betaz"),FsPermission.getDirDefault(),false);
  FileStatus statuses[]=wrap.globStatus(new Path(USER_DIR + "/alpha/beta"),new AcceptPathsEndingInZ());
  Assert.assertNull(statuses);
  statuses=wrap.globStatus(new Path(USER_DIR + "/alphaLinkz/betaz"),new AcceptPathsEndingInZ());
  Assert.assertEquals(1,statuses.length);
  Assert.assertEquals(USER_DIR + "/alphaLinkz/betaz",statuses[0].getPath().toUri().getPath());
  statuses=wrap.globStatus(new Path(USER_DIR + "/*/*"),new AcceptPathsEndingInZ());
  Assert.assertEquals(USER_DIR + "/alpha/betaz;" + USER_DIR+ "/alphaLinkz/betaz",TestPath.mergeStatuses(statuses));
  statuses=wrap.globStatus(new Path(USER_DIR + "/*/*"),new AcceptAllPathFilter());
  Assert.assertEquals(USER_DIR + "/alpha/beta;" + USER_DIR+ "/alpha/betaz;"+ USER_DIR+ "/alphaLinkz/beta;"+ USER_DIR+ "/alphaLinkz/betaz",TestPath.mergeStatuses(statuses));
}
