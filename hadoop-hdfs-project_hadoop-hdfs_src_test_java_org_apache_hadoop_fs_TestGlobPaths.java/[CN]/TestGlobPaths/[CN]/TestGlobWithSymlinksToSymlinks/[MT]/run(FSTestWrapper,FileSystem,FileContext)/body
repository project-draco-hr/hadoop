{
  wrap.mkdir(new Path("/alpha"),FsPermission.getDirDefault(),false);
  wrap.createSymlink(new Path("/alpha"),new Path("/alphaLink"),false);
  wrap.createSymlink(new Path("/alphaLink"),new Path("/alphaLinkLink"),false);
  wrap.mkdir(new Path("/alpha/beta"),FsPermission.getDirDefault(),false);
  FileStatus statuses[]=wrap.globStatus(new Path("/alphaLinkLink"),new AcceptAllPathFilter());
  Assert.assertEquals(1,statuses.length);
  Assert.assertEquals("/alphaLinkLink",statuses[0].getPath().toUri().getPath());
  statuses=wrap.globStatus(new Path("/alphaLinkLink/*"),new AcceptAllPathFilter());
  Assert.assertEquals(1,statuses.length);
  Assert.assertEquals("/alphaLinkLink/beta",statuses[0].getPath().toUri().getPath());
  wrap.createSymlink(new Path("theta"),new Path("/alpha/kappa"),false);
  statuses=wrap.globStatus(new Path("/alpha/kappa/kappa"),new AcceptAllPathFilter());
  Assert.assertNull(statuses);
  wrap.createFile("/alpha/beta/gamma");
  wrap.createSymlink(new Path("gamma"),new Path("/alpha/beta/gammaLink"),false);
  wrap.createSymlink(new Path("gammaLink"),new Path("/alpha/beta/gammaLinkLink"),false);
  wrap.createSymlink(new Path("gammaLinkLink"),new Path("/alpha/beta/gammaLinkLinkLink"),false);
  statuses=wrap.globStatus(new Path("/alpha/*/gammaLinkLinkLink"),new AcceptAllPathFilter());
  Assert.assertEquals(1,statuses.length);
  Assert.assertEquals("/alpha/beta/gammaLinkLinkLink",statuses[0].getPath().toUri().getPath());
  statuses=wrap.globStatus(new Path("/alpha/beta/*"),new AcceptAllPathFilter());
  Assert.assertEquals("/alpha/beta/gamma;/alpha/beta/gammaLink;" + "/alpha/beta/gammaLinkLink;/alpha/beta/gammaLinkLinkLink",TestPath.mergeStatuses(statuses));
  wrap.createSymlink(new Path("tweedledee"),new Path("/tweedledum"),false);
  wrap.createSymlink(new Path("tweedledum"),new Path("/tweedledee"),false);
  statuses=wrap.globStatus(new Path("/tweedledee/unobtainium"),new AcceptAllPathFilter());
  Assert.assertNull(statuses);
}
