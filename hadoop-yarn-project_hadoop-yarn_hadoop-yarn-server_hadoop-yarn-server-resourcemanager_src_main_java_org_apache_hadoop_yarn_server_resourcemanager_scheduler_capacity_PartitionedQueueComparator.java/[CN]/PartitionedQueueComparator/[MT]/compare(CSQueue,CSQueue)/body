{
  boolean q1Accessible=q1.getAccessibleNodeLabels().contains(partitionToLookAt) || q1.getAccessibleNodeLabels().contains(RMNodeLabelsManager.ANY);
  boolean q2Accessible=q2.getAccessibleNodeLabels().contains(partitionToLookAt) || q2.getAccessibleNodeLabels().contains(RMNodeLabelsManager.ANY);
  if (q1Accessible && !q2Accessible) {
    return -1;
  }
 else   if (!q1Accessible && q2Accessible) {
    return 1;
  }
  float used1=q1.getQueueCapacities().getUsedCapacity(partitionToLookAt);
  float used2=q2.getQueueCapacities().getUsedCapacity(partitionToLookAt);
  if (Math.abs(used1 - used2) < 1e-6) {
    float cap1=q1.getQueueCapacities().getCapacity(partitionToLookAt);
    float cap2=q2.getQueueCapacities().getCapacity(partitionToLookAt);
    if (Math.abs(cap1 - cap2) < 1e-6) {
      return q1.getQueueName().compareTo(q2.getQueueName());
    }
    return Float.compare(cap2,cap1);
  }
  return Float.compare(used1,used2);
}
