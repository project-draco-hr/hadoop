{
  Map<NodeId,RMContainer> reservedContainers=this.reservedContainers.get(schedulerKey);
  if (reservedContainers != null) {
    RMContainer reservedContainer=reservedContainers.remove(node.getNodeID());
    if (reservedContainer != null && reservedContainer.getContainer() != null && reservedContainer.getContainer().getResource() != null) {
      if (reservedContainers.isEmpty()) {
        this.reservedContainers.remove(schedulerKey);
      }
      resetReReservations(schedulerKey);
      Resource resource=reservedContainer.getReservedResource();
      this.attemptResourceUsage.decReserved(node.getPartition(),resource);
      LOG.info("Application " + getApplicationId() + " unreserved "+ " on node "+ node+ ", currently has "+ reservedContainers.size()+ " at priority "+ schedulerKey.getPriority()+ "; currentReservation "+ this.attemptResourceUsage.getReserved()+ " on node-label="+ node.getPartition());
      return true;
    }
  }
  return false;
}
