{
  final Configuration conf=WebHdfsTestUtil.createConf();
  final String[] racks={RACK0,RACK0,RACK1,RACK1,RACK2,RACK2};
  final int nDataNodes=racks.length;
  LOG.info("nDataNodes=" + nDataNodes + ", racks="+ Arrays.asList(racks));
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(nDataNodes).racks(racks).build();
  try {
    cluster.waitActive();
    final DistributedFileSystem dfs=cluster.getFileSystem();
    final NameNode namenode=cluster.getNameNode();
    final DatanodeManager dm=namenode.getNamesystem().getBlockManager().getDatanodeManager();
    LOG.info("dm=" + dm);
    final long blocksize=DFSConfigKeys.DFS_BLOCK_SIZE_DEFAULT;
    final String f="/foo";
{
      for (int i=0; i < nDataNodes; i++) {
        final DataNode dn=cluster.getDataNodes().get(i);
        final String ipAddr=dm.getDatanode(dn.getDatanodeId()).getIpAddr();
        final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,PutOpParam.Op.CREATE,-1L,blocksize,conf);
        Assert.assertEquals(ipAddr,chosen.getIpAddr());
      }
    }
    final Path p=new Path(f);
    final FSDataOutputStream out=dfs.create(p,(short)1);
    out.write(1);
    out.close();
    final LocatedBlocks locatedblocks=NameNodeAdapter.getBlockLocations(namenode,f,0,1);
    final List<LocatedBlock> lb=locatedblocks.getLocatedBlocks();
    Assert.assertEquals(1,lb.size());
    final DatanodeInfo[] locations=lb.get(0).getLocations();
    Assert.assertEquals(1,locations.length);
    final DatanodeInfo expected=locations[0];
{
      final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,GetOpParam.Op.GETFILECHECKSUM,-1L,blocksize,conf);
      Assert.assertEquals(expected,chosen);
    }
{
      final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,GetOpParam.Op.OPEN,0,blocksize,conf);
      Assert.assertEquals(expected,chosen);
    }
{
      final DatanodeInfo chosen=NamenodeWebHdfsMethods.chooseDatanode(namenode,f,PostOpParam.Op.APPEND,-1L,blocksize,conf);
      Assert.assertEquals(expected,chosen);
    }
  }
  finally {
    cluster.shutdown();
  }
}
