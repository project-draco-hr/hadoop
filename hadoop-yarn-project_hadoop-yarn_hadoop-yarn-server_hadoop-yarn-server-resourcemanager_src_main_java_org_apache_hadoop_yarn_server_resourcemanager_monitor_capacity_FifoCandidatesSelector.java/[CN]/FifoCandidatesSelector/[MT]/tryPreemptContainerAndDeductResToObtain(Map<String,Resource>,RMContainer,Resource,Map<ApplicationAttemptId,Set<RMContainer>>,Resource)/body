{
  ApplicationAttemptId attemptId=rmContainer.getApplicationAttemptId();
  if (preemptMapContains(preemptMap,attemptId,rmContainer)) {
    return false;
  }
  String nodePartition=getPartitionByNodeId(rmContainer.getAllocatedNode());
  Resource toObtainByPartition=resourceToObtainByPartitions.get(nodePartition);
  if (null != toObtainByPartition && Resources.greaterThan(rc,clusterResource,toObtainByPartition,Resources.none()) && Resources.fitsIn(rc,clusterResource,rmContainer.getAllocatedResource(),totalPreemptionAllowed)) {
    Resources.subtractFrom(toObtainByPartition,rmContainer.getAllocatedResource());
    Resources.subtractFrom(totalPreemptionAllowed,rmContainer.getAllocatedResource());
    if (Resources.lessThanOrEqual(rc,clusterResource,toObtainByPartition,Resources.none())) {
      resourceToObtainByPartitions.remove(nodePartition);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(this.getClass().getName() + " Marked container=" + rmContainer.getContainerId()+ " from partition="+ nodePartition+ " queue="+ rmContainer.getQueueName()+ " to be preemption candidates");
    }
    addToPreemptMap(preemptMap,attemptId,rmContainer);
    return true;
  }
  return false;
}
