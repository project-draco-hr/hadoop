{
  final DrainDispatcher dispatcher=new DrainDispatcher();
  ResourceManager rm=new ResourceManager(){
    @Override protected void doSecureLogin() throws IOException {
    }
    @Override protected Dispatcher createDispatcher(){
      return dispatcher;
    }
  }
;
  rm.init(conf);
  rm.start();
  String containerToken="Container Token : ";
  String nmToken="NM Token : ";
  MockNM nm=new MockNM("host:1234",3072,rm.getResourceTrackerService());
  RegisterNodeManagerResponse registrationResponse=nm.registerNode();
  MasterKey containerTokenMasterKey=registrationResponse.getContainerTokenMasterKey();
  Assert.assertNotNull(containerToken + "Registration should cause a key-update!",containerTokenMasterKey);
  MasterKey nmTokenMasterKey=registrationResponse.getNMTokenMasterKey();
  Assert.assertNotNull(nmToken + "Registration should cause a key-update!",nmTokenMasterKey);
  dispatcher.await();
  NodeHeartbeatResponse response=nm.nodeHeartbeat(true);
  Assert.assertNull(containerToken + "First heartbeat after registration shouldn't get any key updates!",response.getContainerTokenMasterKey());
  Assert.assertNull(nmToken + "First heartbeat after registration shouldn't get any key updates!",response.getNMTokenMasterKey());
  dispatcher.await();
  response=nm.nodeHeartbeat(true);
  Assert.assertNull(containerToken + "Even second heartbeat after registration shouldn't get any key updates!",response.getContainerTokenMasterKey());
  Assert.assertNull(nmToken + "Even second heartbeat after registration shouldn't get any key updates!",response.getContainerTokenMasterKey());
  dispatcher.await();
  rm.getRMContainerTokenSecretManager().rollMasterKey();
  rm.getRMNMTokenSecretManager().rollMasterKey();
  response=nm.nodeHeartbeat(true);
  Assert.assertNotNull(containerToken + "Heartbeats after roll-over and before activation should not err out.",response.getContainerTokenMasterKey());
  Assert.assertNotNull(nmToken + "Heartbeats after roll-over and before activation should not err out.",response.getNMTokenMasterKey());
  Assert.assertEquals(containerToken + "Roll-over should have incremented the key-id only by one!",containerTokenMasterKey.getKeyId() + 1,response.getContainerTokenMasterKey().getKeyId());
  Assert.assertEquals(nmToken + "Roll-over should have incremented the key-id only by one!",nmTokenMasterKey.getKeyId() + 1,response.getNMTokenMasterKey().getKeyId());
  dispatcher.await();
  response=nm.nodeHeartbeat(true);
  Assert.assertNull(containerToken + "Second heartbeat after roll-over shouldn't get any key updates!",response.getContainerTokenMasterKey());
  Assert.assertNull(nmToken + "Second heartbeat after roll-over shouldn't get any key updates!",response.getNMTokenMasterKey());
  dispatcher.await();
  rm.getRMContainerTokenSecretManager().activateNextMasterKey();
  rm.getRMNMTokenSecretManager().activateNextMasterKey();
  response=nm.nodeHeartbeat(true);
  Assert.assertNull(containerToken + "Activation shouldn't cause any key updates!",response.getContainerTokenMasterKey());
  Assert.assertNull(nmToken + "Activation shouldn't cause any key updates!",response.getNMTokenMasterKey());
  dispatcher.await();
  response=nm.nodeHeartbeat(true);
  Assert.assertNull(containerToken + "Even second heartbeat after activation shouldn't get any key updates!",response.getContainerTokenMasterKey());
  Assert.assertNull(nmToken + "Even second heartbeat after activation shouldn't get any key updates!",response.getNMTokenMasterKey());
  dispatcher.await();
  rm.stop();
}
