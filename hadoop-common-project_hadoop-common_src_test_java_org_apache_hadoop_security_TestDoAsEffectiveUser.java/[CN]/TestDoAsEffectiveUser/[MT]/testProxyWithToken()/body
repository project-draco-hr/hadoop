{
  final Configuration conf=new Configuration(masterConf);
  TestTokenSecretManager sm=new TestTokenSecretManager();
  SecurityUtil.setAuthenticationMethod(AuthenticationMethod.KERBEROS,conf);
  RPC.setProtocolEngine(conf,TestRpcService.class,ProtobufRpcEngine.class);
  UserGroupInformation.setConfiguration(conf);
  final Server server=setupTestServer(conf,5,sm);
  final UserGroupInformation current=UserGroupInformation.createRemoteUser(REAL_USER_NAME);
  TestTokenIdentifier tokenId=new TestTokenIdentifier(new Text(current.getUserName()),new Text("SomeSuperUser"));
  Token<TestTokenIdentifier> token=new Token<>(tokenId,sm);
  SecurityUtil.setTokenService(token,addr);
  UserGroupInformation proxyUserUgi=UserGroupInformation.createProxyUserForTesting(PROXY_USER_NAME,current,GROUP_NAMES);
  proxyUserUgi.addToken(token);
  refreshConf(conf);
  String retVal=proxyUserUgi.doAs(new PrivilegedExceptionAction<String>(){
    @Override public String run() throws Exception {
      try {
        client=getClient(addr,conf);
        return client.getCurrentUser(null,newEmptyRequest()).getUser();
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw e;
      }
 finally {
        stop(server,client);
      }
    }
  }
);
  Assert.assertEquals(REAL_USER_NAME + " (auth:TOKEN) via SomeSuperUser (auth:SIMPLE)",retVal);
}
