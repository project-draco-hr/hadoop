{
  final Configuration conf=new Configuration(masterConf);
  TestTokenSecretManager sm=new TestTokenSecretManager();
  SecurityUtil.setAuthenticationMethod(AuthenticationMethod.KERBEROS,conf);
  UserGroupInformation.setConfiguration(conf);
  final Server server=new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).setNumHandlers(5).setVerbose(true).setSecretManager(sm).build();
  server.start();
  final UserGroupInformation current=UserGroupInformation.createRemoteUser(REAL_USER_NAME);
  final InetSocketAddress addr=NetUtils.getConnectAddress(server);
  TestTokenIdentifier tokenId=new TestTokenIdentifier(new Text(current.getUserName()),new Text("SomeSuperUser"));
  Token<TestTokenIdentifier> token=new Token<TestTokenIdentifier>(tokenId,sm);
  SecurityUtil.setTokenService(token,addr);
  UserGroupInformation proxyUserUgi=UserGroupInformation.createProxyUserForTesting(PROXY_USER_NAME,current,GROUP_NAMES);
  proxyUserUgi.addToken(token);
  refreshConf(conf);
  String retVal=proxyUserUgi.doAs(new PrivilegedExceptionAction<String>(){
    @Override public String run() throws Exception {
      try {
        proxy=RPC.getProxy(TestProtocol.class,TestProtocol.versionID,addr,conf);
        String ret=proxy.aMethod();
        return ret;
      }
 catch (      Exception e) {
        e.printStackTrace();
        throw e;
      }
 finally {
        server.stop();
        if (proxy != null) {
          RPC.stopProxy(proxy);
        }
      }
    }
  }
);
  Assert.assertEquals(REAL_USER_NAME + " (auth:TOKEN) via SomeSuperUser (auth:SIMPLE)",retVal);
}
