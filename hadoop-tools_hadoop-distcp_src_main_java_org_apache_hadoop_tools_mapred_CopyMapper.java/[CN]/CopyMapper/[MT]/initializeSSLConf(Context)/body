{
  LOG.info("Initializing SSL configuration");
  String workDir=conf.get(JobContext.JOB_LOCAL_DIR) + "/work";
  Path[] cacheFiles=context.getLocalCacheFiles();
  Configuration sslConfig=new Configuration(false);
  String sslConfFileName=conf.get(DistCpConstants.CONF_LABEL_SSL_CONF);
  Path sslClient=findCacheFile(cacheFiles,sslConfFileName);
  if (sslClient == null) {
    LOG.warn("SSL Client config file not found. Was looking for " + sslConfFileName + " in "+ Arrays.toString(cacheFiles));
    return;
  }
  sslConfig.addResource(sslClient);
  String trustStoreFile=conf.get("ssl.client.truststore.location");
  Path trustStorePath=findCacheFile(cacheFiles,trustStoreFile);
  sslConfig.set("ssl.client.truststore.location",trustStorePath.toString());
  String keyStoreFile=conf.get("ssl.client.keystore.location");
  Path keyStorePath=findCacheFile(cacheFiles,keyStoreFile);
  sslConfig.set("ssl.client.keystore.location",keyStorePath.toString());
  try {
    OutputStream out=new FileOutputStream(workDir + "/" + sslConfFileName);
    try {
      sslConfig.writeXml(out);
    }
  finally {
      out.close();
    }
    conf.set(DistCpConstants.CONF_LABEL_SSL_KEYSTORE,sslConfFileName);
  }
 catch (  IOException e) {
    LOG.warn("Unable to write out the ssl configuration. " + "Will fall back to default ssl-client.xml in class path, if there is one",e);
  }
}
