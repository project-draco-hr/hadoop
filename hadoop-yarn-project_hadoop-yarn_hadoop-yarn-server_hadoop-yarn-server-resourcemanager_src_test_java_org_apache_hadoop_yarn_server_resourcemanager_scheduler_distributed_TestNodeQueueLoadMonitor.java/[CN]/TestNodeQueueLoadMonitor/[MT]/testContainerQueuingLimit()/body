{
  NodeQueueLoadMonitor selector=new NodeQueueLoadMonitor(NodeQueueLoadMonitor.LoadComparator.QUEUE_LENGTH);
  selector.updateNode(createRMNode("h1",1,-1,15));
  selector.updateNode(createRMNode("h2",2,-1,5));
  selector.updateNode(createRMNode("h3",3,-1,10));
  selector.initThresholdCalculator(0,6,100);
  QueueLimitCalculator calculator=selector.getThresholdCalculator();
  ContainerQueuingLimit containerQueuingLimit=calculator.createContainerQueuingLimit();
  Assert.assertEquals(6,containerQueuingLimit.getMaxQueueLength());
  Assert.assertEquals(-1,containerQueuingLimit.getMaxQueueWaitTimeInMs());
  selector.computeTask.run();
  containerQueuingLimit=calculator.createContainerQueuingLimit();
  Assert.assertEquals(10,containerQueuingLimit.getMaxQueueLength());
  Assert.assertEquals(-1,containerQueuingLimit.getMaxQueueWaitTimeInMs());
  selector.updateNode(createRMNode("h1",1,-1,110));
  selector.updateNode(createRMNode("h2",2,-1,120));
  selector.updateNode(createRMNode("h3",3,-1,130));
  selector.updateNode(createRMNode("h4",4,-1,140));
  selector.updateNode(createRMNode("h5",5,-1,150));
  selector.updateNode(createRMNode("h6",6,-1,160));
  selector.computeTask.run();
  containerQueuingLimit=calculator.createContainerQueuingLimit();
  Assert.assertEquals(100,containerQueuingLimit.getMaxQueueLength());
  selector.updateNode(createRMNode("h1",1,-1,1));
  selector.updateNode(createRMNode("h2",2,-1,2));
  selector.updateNode(createRMNode("h3",3,-1,3));
  selector.updateNode(createRMNode("h4",4,-1,4));
  selector.updateNode(createRMNode("h5",5,-1,5));
  selector.updateNode(createRMNode("h6",6,-1,6));
  selector.computeTask.run();
  containerQueuingLimit=calculator.createContainerQueuingLimit();
  Assert.assertEquals(6,containerQueuingLimit.getMaxQueueLength());
}
