{
  UserGroupInformation.setLoginUser(null);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MyResourceManager rm1=new MyResourceManager(conf,memStore);
  rm1.start();
  DrainDispatcher dispatcher=(DrainDispatcher)rm1.getRMContext().getDispatcher();
  RMApp app=rm1.submitApp(1024);
  dispatcher.await();
  MockNM nm1=new MockNM("h1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  nm1.nodeHeartbeat(true);
  dispatcher.await();
  ApplicationAttemptId appAttemptId=app.getCurrentAppAttempt().getAppAttemptId();
  rm1.sendAMLaunched(appAttemptId);
  dispatcher.await();
  org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token=rm1.getRMContext().getRMApps().get(appAttemptId.getApplicationId()).getRMAppAttempt(appAttemptId).getAMRMToken();
  UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
  ugi.addTokenIdentifier(token.decodeIdentifier());
  AMRMClient<ContainerRequest> amClient=new MyAMRMClientImpl(rm1);
  amClient.init(conf);
  amClient.start();
  amClient.registerApplicationMaster("Host",10000,"");
  ContainerRequest cRequest1=createReq(1,1024,new String[]{"h1"});
  amClient.addContainerRequest(cRequest1);
  ContainerRequest cRequest2=createReq(1,1024,new String[]{"h1","h2"});
  amClient.addContainerRequest(cRequest2);
  ContainerRequest cRequest3=createReq(1,1024,new String[]{"h1"});
  amClient.addContainerRequest(cRequest3);
  List<String> blacklistAdditions=new ArrayList<String>();
  List<String> blacklistRemoval=new ArrayList<String>();
  blacklistAdditions.add("h2");
  blacklistRemoval.add("h10");
  amClient.updateBlacklist(blacklistAdditions,blacklistRemoval);
  blacklistAdditions.remove("h2");
  AllocateResponse allocateResponse=amClient.allocate(0.1f);
  dispatcher.await();
  Assert.assertEquals("No of assignments must be 0",0,allocateResponse.getAllocatedContainers().size());
  assertAsksAndReleases(4,0,rm1);
  assertBlacklistAdditionsAndRemovals(1,1,rm1);
  nm1.nodeHeartbeat(true);
  dispatcher.await();
  allocateResponse=amClient.allocate(0.2f);
  dispatcher.await();
  Assert.assertEquals("No of assignments must be 0",3,allocateResponse.getAllocatedContainers().size());
  assertAsksAndReleases(0,0,rm1);
  assertBlacklistAdditionsAndRemovals(0,0,rm1);
  List<Container> allocatedContainers=allocateResponse.getAllocatedContainers();
  amClient.removeContainerRequest(cRequest1);
  amClient.removeContainerRequest(cRequest2);
  amClient.removeContainerRequest(cRequest3);
  allocateResponse=amClient.allocate(0.2f);
  dispatcher.await();
  Assert.assertEquals("No of assignments must be 0",0,allocateResponse.getAllocatedContainers().size());
  assertAsksAndReleases(4,0,rm1);
  assertBlacklistAdditionsAndRemovals(0,0,rm1);
  ContainerRequest cRequest4=createReq(1,1024,new String[]{"h1"});
  amClient.addContainerRequest(cRequest4);
  int pendingRelease=0;
  Iterator<Container> it=allocatedContainers.iterator();
  while (it.hasNext()) {
    amClient.releaseAssignedContainer(it.next().getId());
    pendingRelease++;
    it.remove();
    break;
  }
  Container container=it.next();
  ContainerId containerId=container.getId();
  nm1.nodeHeartbeat(containerId.getApplicationAttemptId(),containerId.getContainerId(),ContainerState.RUNNING);
  dispatcher.await();
  amClient.requestContainerResourceChange(container,Resource.newInstance(2048,1));
  it.remove();
  allocateResponse=amClient.allocate(0.3f);
  dispatcher.await();
  Assert.assertEquals("No of assignments must be 0",0,allocateResponse.getAllocatedContainers().size());
  assertAsksAndReleases(3,pendingRelease,rm1);
  assertChanges(1,0,rm1);
  assertBlacklistAdditionsAndRemovals(0,0,rm1);
  int completedContainer=allocateResponse.getCompletedContainersStatuses().size();
  pendingRelease-=completedContainer;
  MyResourceManager rm2=new MyResourceManager(conf,memStore);
  rm2.start();
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  ((MyAMRMClientImpl)amClient).updateRMProxy(rm2);
  dispatcher=(DrainDispatcher)rm2.getRMContext().getDispatcher();
  NodeHeartbeatResponse hbResponse=nm1.nodeHeartbeat(true);
  Assert.assertEquals(NodeAction.RESYNC,hbResponse.getNodeAction());
  nm1=new MockNM("h1:1234",10240,rm2.getResourceTrackerService());
  NMContainerStatus containerReport=NMContainerStatus.newInstance(containerId,ContainerState.RUNNING,Resource.newInstance(1024,1),"recover container",0,Priority.newInstance(0),0);
  nm1.registerNode(Collections.singletonList(containerReport),Collections.singletonList(containerId.getApplicationAttemptId().getApplicationId()));
  nm1.nodeHeartbeat(true);
  dispatcher.await();
  blacklistAdditions.add("h3");
  amClient.updateBlacklist(blacklistAdditions,null);
  blacklistAdditions.remove("h3");
  it=allocatedContainers.iterator();
  while (it.hasNext()) {
    amClient.releaseAssignedContainer(it.next().getId());
    pendingRelease++;
    it.remove();
  }
  ContainerRequest cRequest5=createReq(1,1024,new String[]{"h1","h2"});
  amClient.addContainerRequest(cRequest5);
  allocateResponse=amClient.allocate(0.3f);
  dispatcher.await();
  completedContainer=allocateResponse.getCompletedContainersStatuses().size();
  pendingRelease-=completedContainer;
  assertAsksAndReleases(4,pendingRelease,rm2);
  assertChanges(1,0,rm2);
  assertBlacklistAdditionsAndRemovals(2,0,rm2);
  ContainerRequest cRequest6=createReq(1,1024,new String[]{"h1","h2","h3"});
  amClient.addContainerRequest(cRequest6);
  allocateResponse=amClient.allocate(0.5f);
  dispatcher.await();
  Assert.assertEquals("No of assignments must be 0",0,allocateResponse.getAllocatedContainers().size());
  assertAsksAndReleases(5,0,rm2);
  assertChanges(0,0,rm2);
  assertBlacklistAdditionsAndRemovals(0,0,rm2);
  int noAssignedContainer=0;
  int count=5;
  while (count-- > 0) {
    nm1.nodeHeartbeat(true);
    dispatcher.await();
    allocateResponse=amClient.allocate(0.5f);
    dispatcher.await();
    noAssignedContainer+=allocateResponse.getAllocatedContainers().size();
    if (noAssignedContainer == 3) {
      break;
    }
    Thread.sleep(1000);
  }
  Assert.assertEquals("Number of container should be 3",3,noAssignedContainer);
  amClient.stop();
  rm1.stop();
  rm2.stop();
}
