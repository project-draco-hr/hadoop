{
  conf.setLong(YarnConfiguration.RM_AMRM_TOKEN_MASTER_KEY_ROLLING_INTERVAL_SECS,rolling_interval_sec);
  conf.setLong(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS,am_expire_ms);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MyResourceManager2 rm1=new MyResourceManager2(conf,memStore);
  rm1.start();
  DrainDispatcher dispatcher=(DrainDispatcher)rm1.getRMContext().getDispatcher();
  Long startTime=System.currentTimeMillis();
  RMApp app=rm1.submitApp(1024);
  dispatcher.await();
  MockNM nm1=new MockNM("h1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  nm1.nodeHeartbeat(true);
  dispatcher.await();
  ApplicationAttemptId appAttemptId=app.getCurrentAppAttempt().getAppAttemptId();
  rm1.sendAMLaunched(appAttemptId);
  dispatcher.await();
  AMRMTokenSecretManager amrmTokenSecretManagerForRM1=rm1.getRMContext().getAMRMTokenSecretManager();
  org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> token=amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId);
  UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
  ugi.addTokenIdentifier(token.decodeIdentifier());
  AMRMClient<ContainerRequest> amClient=new MyAMRMClientImpl(rm1);
  amClient.init(conf);
  amClient.start();
  amClient.registerApplicationMaster("h1",10000,"");
  amClient.allocate(0.1f);
  while (System.currentTimeMillis() - startTime < rolling_interval_sec * 1000) {
    amClient.allocate(0.1f);
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
  }
  Assert.assertTrue(amrmTokenSecretManagerForRM1.getMasterKey().getMasterKey().getKeyId() != token.decodeIdentifier().getKeyId());
  amClient.allocate(0.1f);
  org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> newToken=amrmTokenSecretManagerForRM1.createAndGetAMRMToken(appAttemptId);
  int waitCount=0;
  while (waitCount++ <= 50) {
    if (amrmTokenSecretManagerForRM1.getCurrnetMasterKeyData().getMasterKey().getKeyId() != token.decodeIdentifier().getKeyId()) {
      break;
    }
    try {
      amClient.allocate(0.1f);
    }
 catch (    Exception ex) {
      break;
    }
    Thread.sleep(500);
  }
  Assert.assertTrue(amrmTokenSecretManagerForRM1.getNextMasterKeyData() == null);
  Assert.assertTrue(amrmTokenSecretManagerForRM1.getCurrnetMasterKeyData().getMasterKey().getKeyId() == newToken.decodeIdentifier().getKeyId());
  conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS,"0.0.0.0:" + ServerSocketUtil.getPort(45020,10));
  final MyResourceManager2 rm2=new MyResourceManager2(conf,memStore);
  rm2.start();
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  ((MyAMRMClientImpl)amClient).updateRMProxy(rm2);
  dispatcher=(DrainDispatcher)rm2.getRMContext().getDispatcher();
  AMRMTokenSecretManager amrmTokenSecretManagerForRM2=rm2.getRMContext().getAMRMTokenSecretManager();
  Assert.assertTrue(amrmTokenSecretManagerForRM2.getCurrnetMasterKeyData().getMasterKey().getKeyId() == newToken.decodeIdentifier().getKeyId());
  Assert.assertTrue(amrmTokenSecretManagerForRM2.getNextMasterKeyData() == null);
  try {
    UserGroupInformation testUser=UserGroupInformation.createRemoteUser("testUser");
    SecurityUtil.setTokenService(token,rm2.getApplicationMasterService().getBindAddress());
    testUser.addToken(token);
    testUser.doAs(new PrivilegedAction<ApplicationMasterProtocol>(){
      @Override public ApplicationMasterProtocol run(){
        return (ApplicationMasterProtocol)YarnRPC.create(conf).getProxy(ApplicationMasterProtocol.class,rm2.getApplicationMasterService().getBindAddress(),conf);
      }
    }
).allocate(Records.newRecord(AllocateRequest.class));
    Assert.fail("The old Token should not work");
  }
 catch (  Exception ex) {
    Assert.assertTrue(ex instanceof InvalidToken);
    Assert.assertTrue(ex.getMessage().contains("Invalid AMRMToken from " + token.decodeIdentifier().getApplicationAttemptId()));
  }
  amClient.allocate(0.1f);
  amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED,null,null);
  amClient.stop();
  rm1.stop();
  rm2.stop();
}
