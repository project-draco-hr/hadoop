{
  RetryPolicy policy=mock(RetryUpToMaximumCountWithFixedSleep.class);
  int maxRetries=8;
  RetryPolicy realPolicy=retryUpToMaximumCountWithFixedSleep(maxRetries,1,TimeUnit.NANOSECONDS);
  setupMockPolicy(policy,realPolicy);
  UnreliableInterface unreliable=(UnreliableInterface)RetryProxy.create(UnreliableInterface.class,unreliableImpl,policy);
  unreliable.alwaysSucceeds();
  unreliable.failsOnceThenSucceeds();
  try {
    unreliable.failsTenTimesThenSucceeds();
    fail("Should fail");
  }
 catch (  UnreliableException e) {
    verify(policy,times(maxRetries + 2)).shouldRetry(any(Exception.class),anyInt(),anyInt(),anyBoolean());
    assertEquals(RetryDecision.FAIL,caughtRetryAction.action);
    assertEquals(RetryUpToMaximumCountWithFixedSleep.constructReasonString(maxRetries),caughtRetryAction.reason);
  }
catch (  Exception e) {
    fail("Other exception other than UnreliableException should also get " + "failed.");
  }
}
