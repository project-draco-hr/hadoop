{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  setup(csConf);
  final String user_0="user_0";
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
  FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),rmContext);
  String host_1="host_1";
  FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,DEFAULT_RACK,0,8 * GB);
  Priority priorityMap=TestUtils.createMockPriority(5);
  Resource capability=Resources.createResource(2 * GB,0);
  RMApplicationHistoryWriter writer=mock(RMApplicationHistoryWriter.class);
  SystemMetricsPublisher publisher=mock(SystemMetricsPublisher.class);
  RMContext rmContext=mock(RMContext.class);
  ContainerAllocationExpirer expirer=mock(ContainerAllocationExpirer.class);
  DrainDispatcher drainDispatcher=new DrainDispatcher();
  when(rmContext.getContainerAllocationExpirer()).thenReturn(expirer);
  when(rmContext.getDispatcher()).thenReturn(drainDispatcher);
  when(rmContext.getRMApplicationHistoryWriter()).thenReturn(writer);
  when(rmContext.getSystemMetricsPublisher()).thenReturn(publisher);
  ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(app_0.getApplicationId(),1);
  ContainerId containerId=BuilderUtils.newContainerId(appAttemptId,1);
  Container container=TestUtils.getMockContainer(containerId,node_1.getNodeID(),Resources.createResource(2 * GB),priorityMap);
  RMContainer rmContainer=new RMContainerImpl(container,appAttemptId,node_1.getNodeID(),"user",rmContext);
  boolean res=a.findNodeToUnreserve(csContext.getClusterResource(),node_1,app_0,priorityMap,capability);
  assertFalse(res);
  app_0.reserve(node_1,priorityMap,rmContainer,container);
  node_1.reserveResource(app_0,priorityMap,rmContainer);
  res=a.findNodeToUnreserve(csContext.getClusterResource(),node_1,app_0,priorityMap,capability);
  assertFalse(res);
}
