{
  csConf.setBoolean("yarn.scheduler.capacity.user-metrics.enable",true);
  final String newRoot="root" + System.currentTimeMillis();
  setupQueueConfiguration(csConf,newRoot,addUserLimits);
  YarnConfiguration conf=new YarnConfiguration();
  cs.setConf(conf);
  csContext=mock(CapacitySchedulerContext.class);
  when(csContext.getConfiguration()).thenReturn(csConf);
  when(csContext.getConf()).thenReturn(conf);
  when(csContext.getMinimumResourceCapability()).thenReturn(Resources.createResource(GB,1));
  when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(16 * GB,12));
  when(csContext.getClusterResource()).thenReturn(Resources.createResource(100 * 16 * GB,100 * 12));
  when(csContext.getNonPartitionedQueueComparator()).thenReturn(CapacityScheduler.nonPartitionedQueueComparator);
  when(csContext.getResourceCalculator()).thenReturn(resourceCalculator);
  when(csContext.getRMContext()).thenReturn(rmContext);
  RMContainerTokenSecretManager containerTokenSecretManager=new RMContainerTokenSecretManager(conf);
  containerTokenSecretManager.rollMasterKey();
  when(csContext.getContainerTokenSecretManager()).thenReturn(containerTokenSecretManager);
  root=CapacityScheduler.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,queues,queues,TestUtils.spyHook);
  spyRMContext=spy(rmContext);
  when(spyRMContext.getScheduler()).thenReturn(cs);
  when(spyRMContext.getYarnConfiguration()).thenReturn(new YarnConfiguration());
  cs.setRMContext(spyRMContext);
  cs.init(csConf);
  cs.start();
  when(cs.getNumClusterNodes()).thenReturn(3);
}
