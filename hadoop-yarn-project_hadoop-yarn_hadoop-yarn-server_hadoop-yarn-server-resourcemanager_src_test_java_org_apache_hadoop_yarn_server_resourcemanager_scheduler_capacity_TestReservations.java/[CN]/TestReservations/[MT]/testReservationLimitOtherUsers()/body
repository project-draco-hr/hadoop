{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  setup(csConf,true);
  LeafQueue a=stubLeafQueue((LeafQueue)queues.get(A));
  final String user_0="user_0";
  final String user_1="user_1";
  final ApplicationAttemptId appAttemptId_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0=new FiCaSchedulerApp(appAttemptId_0,user_0,a,mock(ActiveUsersManager.class),spyRMContext);
  app_0=spy(app_0);
  Mockito.doNothing().when(app_0).updateAMContainerDiagnostics(any(AMState.class),any(String.class));
  rmContext.getRMApps().put(app_0.getApplicationId(),mock(RMApp.class));
  a.submitApplicationAttempt(app_0,user_0);
  final ApplicationAttemptId appAttemptId_1=TestUtils.getMockApplicationAttemptId(1,0);
  FiCaSchedulerApp app_1=new FiCaSchedulerApp(appAttemptId_1,user_1,a,mock(ActiveUsersManager.class),spyRMContext);
  app_1=spy(app_1);
  Mockito.doNothing().when(app_1).updateAMContainerDiagnostics(any(AMState.class),any(String.class));
  rmContext.getRMApps().put(app_1.getApplicationId(),mock(RMApp.class));
  a.submitApplicationAttempt(app_1,user_1);
  String host_0="host_0";
  FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,DEFAULT_RACK,0,8 * GB);
  String host_1="host_1";
  FiCaSchedulerNode node_1=TestUtils.getMockNode(host_1,DEFAULT_RACK,0,8 * GB);
  String host_2="host_2";
  FiCaSchedulerNode node_2=TestUtils.getMockNode(host_2,DEFAULT_RACK,0,8 * GB);
  when(csContext.getNode(node_0.getNodeID())).thenReturn(node_0);
  when(csContext.getNode(node_1.getNodeID())).thenReturn(node_1);
  when(csContext.getNode(node_2.getNodeID())).thenReturn(node_2);
  cs.getAllNodes().put(node_0.getNodeID(),node_0);
  cs.getAllNodes().put(node_1.getNodeID(),node_1);
  cs.getAllNodes().put(node_2.getNodeID(),node_2);
  final int numNodes=3;
  Resource clusterResource=Resources.createResource(numNodes * (8 * GB));
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  Priority priorityAM=TestUtils.createMockPriority(1);
  Priority priorityMap=TestUtils.createMockPriority(5);
  Priority priorityReduce=TestUtils.createMockPriority(10);
  app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,priorityAM,recordFactory)));
  app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,priorityAM,recordFactory)));
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(2 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(2 * GB,a.getMetrics().getAllocatedMB());
  assertEquals(22 * GB,a.getMetrics().getAvailableMB());
  assertEquals(2 * GB,node_0.getAllocatedResource().getMemory());
  assertEquals(0 * GB,node_1.getAllocatedResource().getMemory());
  assertEquals(0 * GB,node_2.getAllocatedResource().getMemory());
  a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(4 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(2 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(0 * GB,a.getMetrics().getReservedMB());
  assertEquals(4 * GB,a.getMetrics().getAllocatedMB());
  assertEquals(20 * GB,a.getMetrics().getAvailableMB());
  assertEquals(2 * GB,node_0.getAllocatedResource().getMemory());
  assertEquals(2 * GB,node_1.getAllocatedResource().getMemory());
  assertEquals(0 * GB,node_2.getAllocatedResource().getMemory());
  app_0.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,8 * GB,2,true,priorityMap,recordFactory)));
  app_1.updateResourceRequests(Collections.singletonList(TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,2,true,priorityMap,recordFactory)));
  a.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(12 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(2 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(8 * GB,a.getMetrics().getReservedMB());
  assertEquals(4 * GB,a.getMetrics().getAllocatedMB());
  assertEquals(12 * GB,a.getMetrics().getAvailableMB());
  assertEquals(2 * GB,node_0.getAllocatedResource().getMemory());
  assertEquals(2 * GB,node_1.getAllocatedResource().getMemory());
  assertEquals(0 * GB,node_2.getAllocatedResource().getMemory());
  a.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(14 * GB,a.getUsedResources().getMemory());
  assertEquals(2 * GB,app_0.getCurrentConsumption().getMemory());
  assertEquals(4 * GB,app_1.getCurrentConsumption().getMemory());
  assertEquals(8 * GB,a.getMetrics().getReservedMB());
  assertEquals(6 * GB,a.getMetrics().getAllocatedMB());
  assertEquals(10 * GB,a.getMetrics().getAvailableMB());
  assertEquals(2 * GB,node_0.getAllocatedResource().getMemory());
  assertEquals(4 * GB,node_1.getAllocatedResource().getMemory());
  assertEquals(0 * GB,node_2.getAllocatedResource().getMemory());
}
