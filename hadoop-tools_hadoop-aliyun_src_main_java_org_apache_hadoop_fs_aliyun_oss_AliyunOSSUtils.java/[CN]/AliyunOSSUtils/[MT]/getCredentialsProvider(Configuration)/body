{
  CredentialsProvider credentials;
  String className=conf.getTrimmed(ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY);
  if (StringUtils.isEmpty(className)) {
    Configuration newConf=ProviderUtils.excludeIncompatibleCredentialProviders(conf,AliyunOSSFileSystem.class);
    credentials=new AliyunCredentialsProvider(newConf);
  }
 else {
    try {
      LOG.debug("Credential provider class is:" + className);
      Class<?> credClass=Class.forName(className);
      try {
        credentials=(CredentialsProvider)credClass.getDeclaredConstructor(Configuration.class).newInstance(conf);
      }
 catch (      NoSuchMethodException|SecurityException e) {
        credentials=(CredentialsProvider)credClass.getDeclaredConstructor().newInstance();
      }
    }
 catch (    ClassNotFoundException e) {
      throw new IOException(className + " not found.",e);
    }
catch (    NoSuchMethodException|SecurityException e) {
      throw new IOException(String.format("%s constructor exception.  A " + "class specified in %s must provide an accessible constructor " + "accepting URI and Configuration, or an accessible default "+ "constructor.",className,ALIYUN_OSS_CREDENTIALS_PROVIDER_KEY),e);
    }
catch (    ReflectiveOperationException|IllegalArgumentException e) {
      throw new IOException(className + " instantiation exception.",e);
    }
  }
  return credentials;
}
