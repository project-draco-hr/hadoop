{
  long cellValue1=1236L;
  long cellValue2=28L;
  long cellValue3=1236L;
  long cellValue4=1236L;
  FlowScanner fs=getFlowScannerForTestingCompaction();
  long currentTimestamp=System.currentTimeMillis();
  long cell1Ts=1200120L;
  long cell2Ts=TimestampGenerator.getSupplementedTimestamp(System.currentTimeMillis(),"application_123746661110_11202");
  long cell3Ts=1277719L;
  long cell4Ts=currentTimestamp - 10;
  SortedSet<Cell> currentColumnCells=new TreeSet<Cell>(KeyValue.COMPARATOR);
  List<Tag> tags=new ArrayList<>();
  Tag t=new Tag(AggregationOperation.SUM_FINAL.getTagType(),"application_1234588888_91188");
  tags.add(t);
  byte[] tagByteArray=Tag.fromList(tags);
  Cell c1=TimelineStorageUtils.createNewCell(aRowKey,aFamily,aQualifier,cell1Ts,Bytes.toBytes(cellValue1),tagByteArray);
  currentColumnCells.add(c1);
  tags=new ArrayList<>();
  t=new Tag(AggregationOperation.SUM_FINAL.getTagType(),"application_12700000001_29102");
  tags.add(t);
  tagByteArray=Tag.fromList(tags);
  Cell c2=TimelineStorageUtils.createNewCell(aRowKey,aFamily,aQualifier,cell2Ts,Bytes.toBytes(cellValue2),tagByteArray);
  currentColumnCells.add(c2);
  tags=new ArrayList<>();
  t=new Tag(AggregationOperation.SUM.getTagType(),"application_191780000000001_8195");
  tags.add(t);
  tagByteArray=Tag.fromList(tags);
  Cell c3=TimelineStorageUtils.createNewCell(aRowKey,aFamily,aQualifier,cell3Ts,Bytes.toBytes(cellValue3),tagByteArray);
  currentColumnCells.add(c3);
  tags=new ArrayList<>();
  t=new Tag(AggregationOperation.SUM.getTagType(),"application_191780000000001_98104");
  tags.add(t);
  tagByteArray=Tag.fromList(tags);
  Cell c4=TimelineStorageUtils.createNewCell(aRowKey,aFamily,aQualifier,cell4Ts,Bytes.toBytes(cellValue4),tagByteArray);
  currentColumnCells.add(c4);
  List<Cell> cells=fs.processSummationMajorCompaction(currentColumnCells,new LongConverter(),currentTimestamp);
  assertNotNull(cells);
  assertEquals(4,cells.size());
  for (int i=0; i < cells.size(); i++) {
    Cell returnedCell=cells.get(0);
    assertNotNull(returnedCell);
    long returnTs=returnedCell.getTimestamp();
    long returnValue=Bytes.toLong(CellUtil.cloneValue(returnedCell));
    if (returnValue == cellValue2) {
      assertTrue(returnTs == cell2Ts);
    }
 else     if (returnValue == cellValue3) {
      assertTrue(returnTs == cell3Ts);
    }
 else     if (returnValue == cellValue4) {
      assertTrue(returnTs == cell4Ts);
    }
 else     if (returnValue == cellValue1) {
      assertTrue(returnTs != cell1Ts);
      assertTrue(returnTs > cell1Ts);
      assertTrue(returnTs >= currentTimestamp);
    }
 else {
      Assert.fail();
    }
  }
}
