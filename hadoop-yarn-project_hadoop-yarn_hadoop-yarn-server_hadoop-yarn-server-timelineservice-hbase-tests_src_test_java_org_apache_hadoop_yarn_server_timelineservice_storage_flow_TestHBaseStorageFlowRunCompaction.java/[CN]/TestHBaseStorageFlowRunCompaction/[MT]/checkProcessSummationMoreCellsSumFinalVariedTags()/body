{
  FlowScanner fs=getFlowScannerForTestingCompaction();
  int countFinal=20100;
  int countNotFinal=1000;
  int countFinalNotExpire=7009;
  long cellValueFinal=1000L;
  long cellValueNotFinal=28L;
  long currentTimestamp=System.currentTimeMillis();
  long cellTsFinalStart=10001120L;
  long cellTsFinal=cellTsFinalStart;
  long cellTsFinalStartNotExpire=TimestampGenerator.getSupplementedTimestamp(System.currentTimeMillis(),"application_10266666661166_118821");
  long cellTsFinalNotExpire=cellTsFinalStartNotExpire;
  long cellTsNotFinalStart=currentTimestamp - 5;
  long cellTsNotFinal=cellTsNotFinalStart;
  SortedSet<Cell> currentColumnCells=new TreeSet<Cell>(KeyValue.COMPARATOR);
  List<Tag> tags=null;
  Tag t=null;
  Cell c1=null;
  for (int i=0; i < countFinal; i++) {
    tags=new ArrayList<>();
    t=new Tag(AggregationOperation.SUM_FINAL.getTagType(),"application_123450000" + i + "01_19"+ i);
    tags.add(t);
    byte[] tagByteArray=Tag.fromList(tags);
    c1=TimelineStorageUtils.createNewCell(aRowKey,aFamily,aQualifier,cellTsFinal,Bytes.toBytes(cellValueFinal),tagByteArray);
    currentColumnCells.add(c1);
    cellTsFinal++;
  }
  for (int i=0; i < countFinalNotExpire; i++) {
    tags=new ArrayList<>();
    t=new Tag(AggregationOperation.SUM_FINAL.getTagType(),"application_123450000" + i + "01_19"+ i);
    tags.add(t);
    byte[] tagByteArray=Tag.fromList(tags);
    c1=TimelineStorageUtils.createNewCell(aRowKey,aFamily,aQualifier,cellTsFinalNotExpire,Bytes.toBytes(cellValueFinal),tagByteArray);
    currentColumnCells.add(c1);
    cellTsFinalNotExpire++;
  }
  for (int i=0; i < countNotFinal; i++) {
    tags=new ArrayList<>();
    t=new Tag(AggregationOperation.SUM.getTagType(),"application_1987650000" + i + "83_911"+ i);
    tags.add(t);
    byte[] tagByteArray=Tag.fromList(tags);
    c1=TimelineStorageUtils.createNewCell(aRowKey,aFamily,aQualifier,cellTsNotFinal,Bytes.toBytes(cellValueNotFinal),tagByteArray);
    currentColumnCells.add(c1);
    cellTsNotFinal++;
  }
  List<Cell> cells=fs.processSummationMajorCompaction(currentColumnCells,new LongConverter(),currentTimestamp);
  assertNotNull(cells);
  assertEquals(countFinalNotExpire + countNotFinal + 1,cells.size());
  for (int i=0; i < cells.size(); i++) {
    Cell returnedCell=cells.get(0);
    assertNotNull(returnedCell);
    long returnTs=returnedCell.getTimestamp();
    long returnValue=Bytes.toLong(CellUtil.cloneValue(returnedCell));
    if (returnValue == (countFinal * cellValueFinal)) {
      assertTrue(returnTs > (cellTsFinalStart + countFinal));
      assertTrue(returnTs >= currentTimestamp);
    }
 else     if (returnValue == cellValueNotFinal) {
      assertTrue(returnTs >= cellTsNotFinalStart);
      assertTrue(returnTs <= cellTsNotFinalStart + countNotFinal);
    }
 else     if (returnValue == cellValueFinal) {
      assertTrue(returnTs >= cellTsFinalStartNotExpire);
      assertTrue(returnTs <= cellTsFinalStartNotExpire + countFinalNotExpire);
    }
 else {
      Assert.fail();
    }
  }
}
