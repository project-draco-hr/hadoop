{
  Configuration conf=new Configuration();
  ResourceCalculatorPlugin monitor=new DummyResourceCalculatorPlugin();
  long maxHeapUsage=1024 * TotalHeapUsageEmulatorPlugin.ONE_MB;
  conf.setLong(DummyResourceCalculatorPlugin.MAXPMEM_TESTING_PROPERTY,maxHeapUsage);
  monitor.setConf(conf);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.MIN_HEAP_FREE_RATIO,0F);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.HEAP_LOAD_RATIO,1F);
  long targetHeapUsageInMB=200;
  FakeProgressive fakeProgress=new FakeProgressive();
  FakeHeapUsageEmulatorCore fakeCore=new FakeHeapUsageEmulatorCore();
  FakeHeapUsageEmulatorPlugin heapPlugin=new FakeHeapUsageEmulatorPlugin(fakeCore);
  ResourceUsageMetrics invalidUsage=TestResourceUsageEmulators.createMetrics(0);
  heapPlugin.initialize(conf,invalidUsage,null,null);
  int numCallsPre=fakeCore.getNumCalls();
  long heapUsagePre=fakeCore.getHeapUsageInMB();
  heapPlugin.emulate();
  int numCallsPost=fakeCore.getNumCalls();
  long heapUsagePost=fakeCore.getHeapUsageInMB();
  assertEquals("Disabled heap usage emulation plugin works!",numCallsPre,numCallsPost);
  assertEquals("Disabled heap usage emulation plugin works!",heapUsagePre,heapUsagePost);
  float progress=heapPlugin.getProgress();
  assertEquals("Invalid progress of disabled cumulative heap usage emulation " + "plugin!",1.0f,progress,0f);
  Boolean failed=null;
  invalidUsage=TestResourceUsageEmulators.createMetrics(maxHeapUsage + TotalHeapUsageEmulatorPlugin.ONE_MB);
  try {
    heapPlugin.initialize(conf,invalidUsage,monitor,null);
    failed=false;
  }
 catch (  Exception e) {
    failed=true;
  }
  assertNotNull("Fail case failure!",failed);
  assertTrue("Expected failure!",failed);
  ResourceUsageMetrics metrics=TestResourceUsageEmulators.createMetrics(targetHeapUsageInMB * TotalHeapUsageEmulatorPlugin.ONE_MB);
  testEmulationAccuracy(conf,fakeCore,monitor,metrics,heapPlugin,200,10);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.HEAP_EMULATION_PROGRESS_INTERVAL,0.2F);
  testEmulationAccuracy(conf,fakeCore,monitor,metrics,heapPlugin,200,5);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.HEAP_LOAD_RATIO,1F);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.MIN_HEAP_FREE_RATIO,0.5F);
  testEmulationAccuracy(conf,fakeCore,monitor,metrics,heapPlugin,120,2);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.HEAP_LOAD_RATIO,0.5F);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.MIN_HEAP_FREE_RATIO,0F);
  testEmulationAccuracy(conf,fakeCore,monitor,metrics,heapPlugin,200,10);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.MIN_HEAP_FREE_RATIO,0.25F);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.HEAP_LOAD_RATIO,0.5F);
  testEmulationAccuracy(conf,fakeCore,monitor,metrics,heapPlugin,162,6);
  fakeProgress=new FakeProgressive();
  conf.setFloat(TotalHeapUsageEmulatorPlugin.MIN_HEAP_FREE_RATIO,0F);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.HEAP_LOAD_RATIO,1F);
  conf.setFloat(TotalHeapUsageEmulatorPlugin.HEAP_EMULATION_PROGRESS_INTERVAL,0.25F);
  heapPlugin.initialize(conf,metrics,monitor,fakeProgress);
  fakeCore.resetFake();
  long initHeapUsage=fakeCore.getHeapUsageInMB();
  long initNumCallsUsage=fakeCore.getNumCalls();
  testEmulationBoundary(0F,fakeCore,fakeProgress,heapPlugin,initHeapUsage,initNumCallsUsage,"[no-op, 0 progress]");
  testEmulationBoundary(0.24F,fakeCore,fakeProgress,heapPlugin,initHeapUsage,initNumCallsUsage,"[no-op, 24% progress]");
  testEmulationBoundary(0.25F,fakeCore,fakeProgress,heapPlugin,targetHeapUsageInMB / 4,1,"[op, 25% progress]");
  testEmulationBoundary(0.80F,fakeCore,fakeProgress,heapPlugin,(targetHeapUsageInMB * 4) / 5,2,"[op, 80% progress]");
  testEmulationBoundary(1F,fakeCore,fakeProgress,heapPlugin,targetHeapUsageInMB,3,"[op, 100% progress]");
}
