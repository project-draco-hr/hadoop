{
  Object ret=typeValueCache.get(clazz);
  if (ret != null) {
    return ret;
  }
  Method newInstance=null;
  Type[] paramTypes=new Type[0];
  for (  Method m : clazz.getMethods()) {
    int mod=m.getModifiers();
    if (m.getDeclaringClass().equals(clazz) && Modifier.isPublic(mod) && Modifier.isStatic(mod)&& m.getName().equals("newInstance")) {
      Type[] pts=m.getGenericParameterTypes();
      if (newInstance == null || (pts.length > paramTypes.length)) {
        newInstance=m;
        paramTypes=pts;
      }
    }
  }
  if (newInstance == null) {
    throw new IllegalArgumentException("type " + clazz.getName() + " does not have newInstance method");
  }
  Object[] args=new Object[paramTypes.length];
  for (int i=0; i < args.length; i++) {
    args[i]=genTypeValue(paramTypes[i]);
  }
  ret=newInstance.invoke(null,args);
  typeValueCache.put(clazz,ret);
  return ret;
}
