{
  LOG.info(String.format("Validate %s %s\n",recordClass.getName(),protoClass.getName()));
  Constructor<R> emptyConstructor=recordClass.getConstructor();
  Constructor<R> pbConstructor=recordClass.getConstructor(protoClass);
  Method getProto=recordClass.getDeclaredMethod("getProto");
  Map<String,GetSetPair> getSetPairs=getGetSetPairs(recordClass);
  R origRecord=emptyConstructor.newInstance();
  for (  GetSetPair gsp : getSetPairs.values()) {
    gsp.setMethod.invoke(origRecord,gsp.testValue);
  }
  Object ret=getProto.invoke(origRecord);
  Assert.assertNotNull(recordClass.getName() + "#getProto returns null",ret);
  if (!(protoClass.isAssignableFrom(ret.getClass()))) {
    Assert.fail("Illegal getProto method return type: " + ret.getClass());
  }
  R deserRecord=pbConstructor.newInstance(ret);
  Assert.assertEquals("whole " + recordClass + " records should be equal",origRecord,deserRecord);
  for (  GetSetPair gsp : getSetPairs.values()) {
    Object origValue=gsp.getMethod.invoke(origRecord);
    Object deserValue=gsp.getMethod.invoke(deserRecord);
    Assert.assertEquals("property " + recordClass.getName() + "#"+ gsp.propertyName+ " should be equal",origValue,deserValue);
  }
}
