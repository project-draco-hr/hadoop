{
  Object ret=typeValueCache.get(type);
  if (ret != null) {
    return ret;
  }
  if (type.equals(boolean.class)) {
    return rand.nextBoolean();
  }
 else   if (type.equals(byte.class)) {
    return bytes[rand.nextInt(4)];
  }
 else   if (type.equals(int.class) || type.equals(Integer.class)) {
    return rand.nextInt(1000000);
  }
 else   if (type.equals(long.class)) {
    return Long.valueOf(rand.nextInt(1000000));
  }
 else   if (type.equals(float.class)) {
    return rand.nextFloat();
  }
 else   if (type.equals(double.class)) {
    return rand.nextDouble();
  }
 else   if (type.equals(String.class)) {
    return String.format("%c%c%c",'a' + rand.nextInt(26),'a' + rand.nextInt(26),'a' + rand.nextInt(26));
  }
 else   if (type instanceof Class) {
    Class clazz=(Class)type;
    if (clazz.isArray()) {
      Class compClass=clazz.getComponentType();
      if (compClass != null) {
        ret=Array.newInstance(compClass,2);
        Array.set(ret,0,genTypeValue(compClass));
        Array.set(ret,1,genTypeValue(compClass));
      }
    }
 else     if (clazz.isEnum()) {
      Object[] values=clazz.getEnumConstants();
      ret=values[rand.nextInt(values.length)];
    }
 else     if (clazz.equals(ByteBuffer.class)) {
      ByteBuffer buff=ByteBuffer.allocate(4);
      rand.nextBytes(buff.array());
      return buff;
    }
  }
 else   if (type instanceof ParameterizedType) {
    ParameterizedType pt=(ParameterizedType)type;
    Type rawType=pt.getRawType();
    Type[] params=pt.getActualTypeArguments();
    if (rawType.equals(EnumSet.class)) {
      if (params[0] instanceof Class) {
        Class c=(Class)(params[0]);
        return EnumSet.allOf(c);
      }
    }
    if (rawType.equals(List.class)) {
      ret=Lists.newArrayList(genTypeValue(params[0]));
    }
 else     if (rawType.equals(Set.class)) {
      ret=Sets.newHashSet(genTypeValue(params[0]));
    }
 else     if (rawType.equals(Map.class)) {
      Map<Object,Object> map=Maps.newHashMap();
      map.put(genTypeValue(params[0]),genTypeValue(params[1]));
      ret=map;
    }
  }
  if (ret == null) {
    throw new IllegalArgumentException("type " + type + " is not supported");
  }
  typeValueCache.put(type,ret);
  return ret;
}
