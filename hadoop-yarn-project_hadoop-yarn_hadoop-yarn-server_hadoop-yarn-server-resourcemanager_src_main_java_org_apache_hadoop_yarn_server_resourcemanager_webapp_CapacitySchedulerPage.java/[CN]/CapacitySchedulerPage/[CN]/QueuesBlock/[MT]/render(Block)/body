{
  html._(MetricsOverviewTable.class);
  UserGroupInformation callerUGI=this.getCallerUGI();
  boolean isAdmin=false;
  ApplicationACLsManager aclsManager=rm.getApplicationACLsManager();
  if (aclsManager.areACLsEnabled()) {
    if (callerUGI != null && aclsManager.isAdmin(callerUGI)) {
      isAdmin=true;
    }
  }
 else {
    isAdmin=true;
  }
  if (isAdmin) {
    html.div().button().$style("border-style: solid; border-color: #000000; border-width: 1px;" + " cursor: hand; cursor: pointer; border-radius: 4px").$onclick("confirmAction()").b("Dump scheduler logs")._().select().$id("time").option().$value("60")._("1 min")._().option().$value("300")._("5 min")._().option().$value("600")._("10 min")._()._()._();
    StringBuilder script=new StringBuilder();
    script.append("function confirmAction() {").append(" b = confirm(\"Are you sure you wish to generate" + " scheduler logs?\");").append(" if (b == true) {").append(" var timePeriod = $(\"#time\").val();").append(" $.ajax({").append(" type: 'POST',").append(" url: '/ws/v1/cluster/scheduler/logs',").append(" contentType: 'text/plain',").append(" data: 'time=' + timePeriod,").append(" dataType: 'text'").append(" }).done(function(data){").append(" setTimeout(function(){").append(" alert(\"Scheduler log is being generated.\");").append(" }, 1000);").append(" }).fail(function(data){").append(" alert(\"Scheduler log generation failed. Please check the" + " ResourceManager log for more informtion.\");").append(" console.log(data);").append(" });").append(" }").append("}");
    html.script().$type("text/javascript")._(script.toString())._();
  }
  UL<DIV<DIV<Hamlet>>> ul=html.div("#cs-wrapper.ui-widget").div(".ui-widget-header.ui-corner-top")._("Application Queues")._().div("#cs.ui-widget-content.ui-corner-bottom").ul();
  if (cs == null) {
    ul.li().a(_Q).$style(width(Q_MAX_WIDTH)).span().$style(Q_END)._("100% ")._().span(".q","default")._()._();
  }
 else {
    ul.li().$style("margin-bottom: 1em").span().$style("font-weight: bold")._("Legend:")._().span().$class("qlegend ui-corner-all").$style(Q_GIVEN)._("Capacity")._().span().$class("qlegend ui-corner-all").$style(Q_UNDER)._("Used")._().span().$class("qlegend ui-corner-all").$style(Q_OVER)._("Used (over capacity)")._().span().$class("qlegend ui-corner-all ui-state-default")._("Max Capacity")._()._();
    float used=0;
    if (null == nodeLabelsInfo || (nodeLabelsInfo.size() == 1 && nodeLabelsInfo.get(0).getLabelName().isEmpty())) {
      CSQueue root=cs.getRootQueue();
      CapacitySchedulerInfo sinfo=new CapacitySchedulerInfo(root,cs,new RMNodeLabel(RMNodeLabelsManager.NO_LABEL));
      csqinfo.csinfo=sinfo;
      csqinfo.qinfo=null;
      used=sinfo.getUsedCapacity() / 100;
      ul.li().a(_Q).$style(width(Q_MAX_WIDTH)).span().$style(join(width(used),";left:0%;",used > 1 ? Q_OVER : Q_UNDER))._(".")._().span(".q","root")._().span().$class("qstats").$style(left(Q_STATS_POS))._(join(percent(used)," used"))._()._(QueueBlock.class)._();
    }
 else {
      for (      RMNodeLabel label : nodeLabelsInfo) {
        CSQueue root=cs.getRootQueue();
        CapacitySchedulerInfo sinfo=new CapacitySchedulerInfo(root,cs,label);
        csqinfo.csinfo=sinfo;
        csqinfo.qinfo=null;
        csqinfo.label=label.getLabelName();
        String nodeLabel=csqinfo.label.length() == 0 ? "<DEFAULT_PARTITION>" : csqinfo.label;
        QueueCapacities queueCapacities=root.getQueueCapacities();
        used=queueCapacities.getUsedCapacity(label.getLabelName());
        String partitionUiTag="Partition: " + nodeLabel + " "+ label.getResource();
        ul.li().a(_Q).$style(width(Q_MAX_WIDTH)).span().$style(join(width(used),";left:0%;",used > 1 ? Q_OVER : Q_UNDER))._(".")._().span(".q",partitionUiTag)._().span().$class("qstats").$style(left(Q_STATS_POS))._(join(percent(used)," used"))._();
        UL<Hamlet> underLabel=html.ul("#pq");
        underLabel.li().a(_Q).$style(width(Q_MAX_WIDTH)).span().$style(join(width(used),";left:0%;",used > 1 ? Q_OVER : Q_UNDER))._(".")._().span(".q","Queue: root")._().span().$class("qstats").$style(left(Q_STATS_POS))._(join(percent(used)," used"))._()._(QueueBlock.class)._()._();
      }
    }
  }
  ul._()._().script().$type("text/javascript")._("$('#cs').hide();")._()._()._(RMAppsBlock.class);
  html._(HealthBlock.class);
}
