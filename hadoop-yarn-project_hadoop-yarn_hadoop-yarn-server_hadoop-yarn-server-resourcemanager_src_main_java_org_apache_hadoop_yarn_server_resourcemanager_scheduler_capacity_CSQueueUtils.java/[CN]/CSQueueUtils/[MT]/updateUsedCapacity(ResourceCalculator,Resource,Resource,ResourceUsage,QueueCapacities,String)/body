{
  float absoluteUsedCapacity=0.0f;
  float usedCapacity=0.0f;
  float reservedCapacity=0.0f;
  float absoluteReservedCapacity=0.0f;
  if (Resources.greaterThan(rc,totalPartitionResource,totalPartitionResource,Resources.none())) {
    Resource queueGuranteedResource=Resources.multiply(totalPartitionResource,queueCapacities.getAbsoluteCapacity(nodePartition));
    queueGuranteedResource=Resources.max(rc,totalPartitionResource,queueGuranteedResource,minimumAllocation);
    Resource usedResource=queueResourceUsage.getUsed(nodePartition);
    absoluteUsedCapacity=Resources.divide(rc,totalPartitionResource,usedResource,totalPartitionResource);
    usedCapacity=Resources.divide(rc,totalPartitionResource,usedResource,queueGuranteedResource);
    Resource resResource=queueResourceUsage.getReserved(nodePartition);
    reservedCapacity=Resources.divide(rc,totalPartitionResource,resResource,queueGuranteedResource);
    absoluteReservedCapacity=Resources.divide(rc,totalPartitionResource,resResource,totalPartitionResource);
  }
  queueCapacities.setAbsoluteUsedCapacity(nodePartition,absoluteUsedCapacity);
  queueCapacities.setUsedCapacity(nodePartition,usedCapacity);
  queueCapacities.setReservedCapacity(nodePartition,reservedCapacity);
  queueCapacities.setAbsoluteReservedCapacity(nodePartition,absoluteReservedCapacity);
}
