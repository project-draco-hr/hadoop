{
  cb.append("{\n");
  incrLevel();
  cb.append("int " + getId("mi1") + " = org.apache.hadoop.record.Utils.readVInt(b1, s1);\n");
  cb.append("int " + getId("mi2") + " = org.apache.hadoop.record.Utils.readVInt(b2, s2);\n");
  cb.append("int " + getId("mz1") + " = org.apache.hadoop.record.Utils.getVIntSize("+ getId("mi1")+ ");\n");
  cb.append("int " + getId("mz2") + " = org.apache.hadoop.record.Utils.getVIntSize("+ getId("mi2")+ ");\n");
  cb.append("s1+=" + getId("mz1") + "; s2+="+ getId("mz2")+ "; l1-="+ getId("mz1")+ "; l2-="+ getId("mz2")+ ";\n");
  cb.append("for (int " + getId("midx") + " = 0; "+ getId("midx")+ " < "+ getId("mi1")+ " && "+ getId("midx")+ " < "+ getId("mi2")+ "; "+ getId("midx")+ "++) {");
  key.genCompareBytes(cb);
  value.genSlurpBytes(cb,"b1","s1","l1");
  value.genSlurpBytes(cb,"b2","s2","l2");
  cb.append("}\n");
  cb.append("if (" + getId("mi1") + " != "+ getId("mi2")+ ") { return ("+ getId("mi1")+ "<"+ getId("mi2")+ ")?-1:0; }\n");
  decrLevel();
  cb.append("}\n");
}
