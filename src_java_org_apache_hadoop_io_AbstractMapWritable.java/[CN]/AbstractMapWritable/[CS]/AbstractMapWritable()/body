{
  this.conf=new AtomicReference<Configuration>();
  addToMap(ArrayWritable.class,Byte.valueOf(Integer.valueOf(-127).byteValue()));
  addToMap(BooleanWritable.class,Byte.valueOf(Integer.valueOf(-126).byteValue()));
  addToMap(BytesWritable.class,Byte.valueOf(Integer.valueOf(-125).byteValue()));
  addToMap(FloatWritable.class,Byte.valueOf(Integer.valueOf(-124).byteValue()));
  addToMap(IntWritable.class,Byte.valueOf(Integer.valueOf(-123).byteValue()));
  addToMap(LongWritable.class,Byte.valueOf(Integer.valueOf(-122).byteValue()));
  addToMap(MapWritable.class,Byte.valueOf(Integer.valueOf(-121).byteValue()));
  addToMap(MD5Hash.class,Byte.valueOf(Integer.valueOf(-120).byteValue()));
  addToMap(NullWritable.class,Byte.valueOf(Integer.valueOf(-119).byteValue()));
  addToMap(ObjectWritable.class,Byte.valueOf(Integer.valueOf(-118).byteValue()));
  addToMap(SortedMapWritable.class,Byte.valueOf(Integer.valueOf(-117).byteValue()));
  addToMap(Text.class,Byte.valueOf(Integer.valueOf(-116).byteValue()));
  addToMap(TwoDArrayWritable.class,Byte.valueOf(Integer.valueOf(-115).byteValue()));
  addToMap(VIntWritable.class,Byte.valueOf(Integer.valueOf(-114).byteValue()));
  addToMap(VLongWritable.class,Byte.valueOf(Integer.valueOf(-113).byteValue()));
}
