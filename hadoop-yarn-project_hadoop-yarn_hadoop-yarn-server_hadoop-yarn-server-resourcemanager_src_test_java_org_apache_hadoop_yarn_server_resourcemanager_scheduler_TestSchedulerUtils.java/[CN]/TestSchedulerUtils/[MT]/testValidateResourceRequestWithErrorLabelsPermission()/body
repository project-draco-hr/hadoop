{
  YarnScheduler scheduler=mock(YarnScheduler.class);
  Set<String> queueAccessibleNodeLabels=Sets.newHashSet();
  QueueInfo queueInfo=mock(QueueInfo.class);
  when(queueInfo.getQueueName()).thenReturn("queue");
  when(queueInfo.getAccessibleNodeLabels()).thenReturn(queueAccessibleNodeLabels);
  when(scheduler.getQueueInfo(any(String.class),anyBoolean(),anyBoolean())).thenReturn(queueInfo);
  Resource maxResource=Resources.createResource(YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES);
  try {
    queueAccessibleNodeLabels.clear();
    queueAccessibleNodeLabels.addAll(Arrays.asList("x","y"));
    Resource resource=Resources.createResource(0,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
    ResourceRequest resReq=BuilderUtils.newResourceRequest(mock(Priority.class),ResourceRequest.ANY,resource,1);
    resReq.setNodeLabelExpression("x");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    resReq.setNodeLabelExpression("y");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    resReq.setNodeLabelExpression("");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    resReq.setNodeLabelExpression(" ");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
  }
 catch (  InvalidResourceRequestException e) {
    e.printStackTrace();
    fail("Should be valid when request labels is a subset of queue labels");
  }
  try {
    queueAccessibleNodeLabels.clear();
    queueAccessibleNodeLabels.addAll(Arrays.asList("x","y"));
    Resource resource=Resources.createResource(0,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
    ResourceRequest resReq=BuilderUtils.newResourceRequest(mock(Priority.class),ResourceRequest.ANY,resource,1);
    resReq.setNodeLabelExpression("z");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    fail("Should fail");
  }
 catch (  InvalidResourceRequestException e) {
  }
  try {
    queueAccessibleNodeLabels.clear();
    queueAccessibleNodeLabels.addAll(Arrays.asList("x","y"));
    Resource resource=Resources.createResource(0,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
    ResourceRequest resReq=BuilderUtils.newResourceRequest(mock(Priority.class),ResourceRequest.ANY,resource,1);
    resReq.setNodeLabelExpression("x && y");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    fail("Should fail");
  }
 catch (  InvalidResourceRequestException e) {
  }
  queueAccessibleNodeLabels.clear();
  try {
    queueAccessibleNodeLabels.clear();
    Resource resource=Resources.createResource(0,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
    ResourceRequest resReq=BuilderUtils.newResourceRequest(mock(Priority.class),ResourceRequest.ANY,resource,1);
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    resReq.setNodeLabelExpression("");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    resReq.setNodeLabelExpression("  ");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
  }
 catch (  InvalidResourceRequestException e) {
    e.printStackTrace();
    fail("Should be valid when request labels is empty");
  }
  try {
    queueAccessibleNodeLabels.clear();
    Resource resource=Resources.createResource(0,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
    ResourceRequest resReq=BuilderUtils.newResourceRequest(mock(Priority.class),ResourceRequest.ANY,resource,1);
    resReq.setNodeLabelExpression("x");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    fail("Should fail");
  }
 catch (  InvalidResourceRequestException e) {
  }
  try {
    queueAccessibleNodeLabels.clear();
    queueAccessibleNodeLabels.add(RMNodeLabelsManager.ANY);
    Resource resource=Resources.createResource(0,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
    ResourceRequest resReq=BuilderUtils.newResourceRequest(mock(Priority.class),ResourceRequest.ANY,resource,1);
    resReq.setNodeLabelExpression("x");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    resReq.setNodeLabelExpression("y");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    resReq.setNodeLabelExpression("z");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
  }
 catch (  InvalidResourceRequestException e) {
    e.printStackTrace();
    fail("Should be valid when queue can access any labels");
  }
  try {
    queueAccessibleNodeLabels.clear();
    queueAccessibleNodeLabels.addAll(Arrays.asList("x","y"));
    Resource resource=Resources.createResource(0,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
    ResourceRequest resReq=BuilderUtils.newResourceRequest(mock(Priority.class),"rack",resource,1);
    resReq.setNodeLabelExpression("x");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    fail("Should fail");
  }
 catch (  InvalidResourceRequestException e) {
  }
  try {
    queueAccessibleNodeLabels.clear();
    queueAccessibleNodeLabels.addAll(Arrays.asList(CommonNodeLabelsManager.ANY));
    Resource resource=Resources.createResource(0,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
    ResourceRequest resReq=BuilderUtils.newResourceRequest(mock(Priority.class),"rack",resource,1);
    resReq.setNodeLabelExpression("x");
    SchedulerUtils.normalizeAndvalidateRequest(resReq,maxResource,"queue",scheduler);
    fail("Should fail");
  }
 catch (  InvalidResourceRequestException e) {
  }
}
