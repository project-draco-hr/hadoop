{
  for (int iter=0; iter < 10; iter++) {
    final int numThreads=20;
    Thread[] threads=new Thread[numThreads];
    final ConcurrentLinkedQueue<Throwable> exceptionsEncountered=new ConcurrentLinkedQueue<Throwable>();
    for (int i=0; i < numThreads; i++) {
      final Path threadLocalFile=new Path("/myFile" + i);
      threads[i]=new Thread(new Runnable(){
        @Override public void run(){
          try {
            assertTrue(!fs.exists(threadLocalFile));
            OutputStream output=fs.create(threadLocalFile);
            output.write(5);
            output.close();
            assertTrue(fs.exists(threadLocalFile));
            assertTrue(fs.listStatus(new Path("/")).length > 0);
          }
 catch (          Throwable ex) {
            exceptionsEncountered.add(ex);
          }
        }
      }
);
    }
    for (    Thread t : threads) {
      t.start();
    }
    for (    Thread t : threads) {
      t.join();
    }
    assertTrue("Encountered exceptions: " + StringUtils.join("\r\n",selectToString(exceptionsEncountered)),exceptionsEncountered.isEmpty());
    tearDown();
    setUp();
  }
}
