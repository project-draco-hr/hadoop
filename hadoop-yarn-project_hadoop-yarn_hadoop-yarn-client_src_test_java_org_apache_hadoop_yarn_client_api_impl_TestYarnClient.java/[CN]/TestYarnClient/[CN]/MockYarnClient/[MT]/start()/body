{
  rmClient=mock(ApplicationClientProtocol.class);
  GetApplicationReportResponse mockResponse=mock(GetApplicationReportResponse.class);
  mockReport=mock(ApplicationReport.class);
  try {
    when(rmClient.getApplicationReport(any(GetApplicationReportRequest.class))).thenReturn(mockResponse);
    when(rmClient.getApplications(any(GetApplicationsRequest.class))).thenReturn(mockAppResponse);
    when(rmClient.forceKillApplication(any(KillApplicationRequest.class))).thenReturn(KillApplicationResponse.newInstance(false)).thenReturn(KillApplicationResponse.newInstance(true));
    when(rmClient.getApplicationAttemptReport(any(GetApplicationAttemptReportRequest.class))).thenReturn(mockAttemptResponse);
    when(rmClient.getApplicationAttempts(any(GetApplicationAttemptsRequest.class))).thenReturn(mockAppAttemptsResponse);
    when(rmClient.getContainers(any(GetContainersRequest.class))).thenReturn(mockContainersResponse);
    when(rmClient.getContainerReport(any(GetContainerReportRequest.class))).thenReturn(mockContainerResponse);
    when(rmClient.getLabelsToNodes(any(GetLabelsToNodesRequest.class))).thenReturn(mockLabelsToNodesResponse);
    historyClient=mock(AHSClient.class);
  }
 catch (  YarnException e) {
    Assert.fail("Exception is not expected.");
  }
catch (  IOException e) {
    Assert.fail("Exception is not expected.");
  }
  when(mockResponse.getApplicationReport()).thenReturn(mockReport);
}
