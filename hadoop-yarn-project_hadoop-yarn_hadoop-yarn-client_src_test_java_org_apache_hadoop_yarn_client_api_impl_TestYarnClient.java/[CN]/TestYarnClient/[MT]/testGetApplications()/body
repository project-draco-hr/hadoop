{
  Configuration conf=new Configuration();
  final YarnClient client=new MockYarnClient();
  client.init(conf);
  client.start();
  List<ApplicationReport> expectedReports=((MockYarnClient)client).getReports();
  List<ApplicationReport> reports=client.getApplications();
  Assert.assertEquals(reports,expectedReports);
  Set<String> appTypes=new HashSet<String>();
  appTypes.add("YARN");
  appTypes.add("NON-YARN");
  reports=client.getApplications(appTypes,null);
  Assert.assertEquals(reports.size(),2);
  Assert.assertTrue((reports.get(0).getApplicationType().equals("YARN") && reports.get(1).getApplicationType().equals("NON-YARN")) || (reports.get(1).getApplicationType().equals("YARN") && reports.get(0).getApplicationType().equals("NON-YARN")));
  for (  ApplicationReport report : reports) {
    Assert.assertTrue(expectedReports.contains(report));
  }
  EnumSet<YarnApplicationState> appStates=EnumSet.noneOf(YarnApplicationState.class);
  appStates.add(YarnApplicationState.FINISHED);
  appStates.add(YarnApplicationState.FAILED);
  reports=client.getApplications(null,appStates);
  Assert.assertEquals(reports.size(),2);
  Assert.assertTrue((reports.get(0).getApplicationType().equals("NON-YARN") && reports.get(1).getApplicationType().equals("NON-MAPREDUCE")) || (reports.get(1).getApplicationType().equals("NON-YARN") && reports.get(0).getApplicationType().equals("NON-MAPREDUCE")));
  for (  ApplicationReport report : reports) {
    Assert.assertTrue(expectedReports.contains(report));
  }
  reports=client.getApplications(appTypes,appStates);
  Assert.assertEquals(reports.size(),1);
  Assert.assertTrue((reports.get(0).getApplicationType().equals("NON-YARN")));
  for (  ApplicationReport report : reports) {
    Assert.assertTrue(expectedReports.contains(report));
  }
  client.stop();
}
