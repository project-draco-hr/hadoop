{
  Configuration conf=new Configuration();
  int pollIntervalMs=1000;
  conf.setLong(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS,pollIntervalMs);
  try (final YarnClient client=new MockYarnClient()){
    client.init(conf);
    client.start();
final class SubmitThread extends Thread {
      private boolean isInterrupted=false;
      @Override public void run(){
        ApplicationSubmissionContext context=mock(ApplicationSubmissionContext.class);
        ApplicationId applicationId=ApplicationId.newInstance(System.currentTimeMillis(),1);
        when(context.getApplicationId()).thenReturn(applicationId);
        ((MockYarnClient)client).setYarnApplicationState(YarnApplicationState.NEW);
        try {
          client.submitApplication(context);
        }
 catch (        YarnException|IOException e) {
          if (e instanceof YarnException && e.getCause() != null && e.getCause() instanceof InterruptedException) {
            isInterrupted=true;
          }
        }
      }
    }
    SubmitThread appSubmitThread=new SubmitThread();
    appSubmitThread.start();
    try {
      while (appSubmitThread.getState() != State.TIMED_WAITING) {
        Thread.sleep(pollIntervalMs / 2);
      }
      appSubmitThread.interrupt();
      appSubmitThread.join();
    }
 catch (    InterruptedException e) {
    }
    Assert.assertTrue("Expected an InterruptedException wrapped inside a " + "YarnException",appSubmitThread.isInterrupted);
  }
 }
