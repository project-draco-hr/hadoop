{
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  ReservationSystemTestUtil.setupQueueConfiguration(conf);
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  conf.setBoolean(YarnConfiguration.RM_RESERVATION_SYSTEM_ENABLE,true);
  MiniYARNCluster cluster=new MiniYARNCluster("testReservationAPIs",2,1,1);
  YarnClient client=null;
  try {
    cluster.init(conf);
    cluster.start();
    final Configuration yarnConf=cluster.getConfig();
    client=YarnClient.createYarnClient();
    client.init(yarnConf);
    client.start();
    Clock clock=new UTCClock();
    long arrival=clock.getTime();
    long duration=60000;
    long deadline=(long)(arrival + 1.05 * duration);
    ReservationSubmissionRequest sRequest=createSimpleReservationRequest(4,arrival,deadline,duration);
    ReservationSubmissionResponse sResponse=null;
    try {
      sResponse=client.submitReservation(sRequest);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(sResponse);
    ReservationId reservationID=sResponse.getReservationId();
    Assert.assertNotNull(reservationID);
    System.out.println("Submit reservation response: " + reservationID);
    ReservationDefinition rDef=sRequest.getReservationDefinition();
    ReservationRequest rr=rDef.getReservationRequests().getReservationResources().get(0);
    rr.setNumContainers(5);
    arrival=clock.getTime();
    duration=30000;
    deadline=(long)(arrival + 1.05 * duration);
    rr.setDuration(duration);
    rDef.setArrival(arrival);
    rDef.setDeadline(deadline);
    ReservationUpdateRequest uRequest=ReservationUpdateRequest.newInstance(rDef,reservationID);
    ReservationUpdateResponse uResponse=null;
    try {
      uResponse=client.updateReservation(uRequest);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(sResponse);
    System.out.println("Update reservation response: " + uResponse);
    ReservationListRequest request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,reservationID.toString(),-1,-1,false);
    ReservationListResponse response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(1,response.getReservationAllocationState().size());
    Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(),reservationID.getId());
    Assert.assertEquals(response.getReservationAllocationState().get(0).getResourceAllocationRequests().size(),0);
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",arrival + duration / 2,arrival + duration / 2,true);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(1,response.getReservationAllocationState().size());
    Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(),reservationID.getId());
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",1,-1,true);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(1,response.getReservationAllocationState().size());
    Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(),reservationID.getId());
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",1,-10,true);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(1,response.getReservationAllocationState().size());
    Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(),reservationID.getId());
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",1,Long.MAX_VALUE,true);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(1,response.getReservationAllocationState().size());
    Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(),reservationID.getId());
    Assert.assertTrue(response.getReservationAllocationState().get(0).getResourceAllocationRequests().size() > 0);
    ReservationRequests reservationRequests=response.getReservationAllocationState().get(0).getReservationDefinition().getReservationRequests();
    Assert.assertTrue(reservationRequests.getInterpreter().toString().equals("R_ALL"));
    Assert.assertTrue(reservationRequests.getReservationResources().get(0).getDuration() == duration);
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",Long.MAX_VALUE,-1,false);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",deadline + duration,deadline + 2 * duration,false);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(response.getReservationAllocationState().size(),0);
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",0,arrival - duration,false);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(response.getReservationAllocationState().size(),0);
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",0,1,false);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(response.getReservationAllocationState().size(),0);
    ReservationDeleteRequest dRequest=ReservationDeleteRequest.newInstance(reservationID);
    ReservationDeleteResponse dResponse=null;
    try {
      dResponse=client.deleteReservation(dRequest);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(sResponse);
    System.out.println("Delete reservation response: " + dResponse);
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,reservationID.toString(),-1,-1,false);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(0,response.getReservationAllocationState().size());
  }
  finally {
    if (client != null) {
      client.stop();
    }
    cluster.stop();
  }
}
