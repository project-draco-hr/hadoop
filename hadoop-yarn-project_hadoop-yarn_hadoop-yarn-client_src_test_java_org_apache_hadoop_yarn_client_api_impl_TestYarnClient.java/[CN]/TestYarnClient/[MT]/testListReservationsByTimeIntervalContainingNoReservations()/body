{
  MiniYARNCluster cluster=setupMiniYARNCluster();
  YarnClient client=setupYarnClient(cluster);
  try {
    Clock clock=new UTCClock();
    long arrival=clock.getTime();
    long duration=60000;
    long deadline=(long)(arrival + 1.05 * duration);
    ReservationSubmissionRequest sRequest=submitReservationTestHelper(client,arrival,deadline,duration);
    ReservationListRequest request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",Long.MAX_VALUE,-1,false);
    ReservationListResponse response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(response.getReservationAllocationState().size(),0);
    duration=30000;
    deadline=sRequest.getReservationDefinition().getDeadline();
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",deadline + duration,deadline + 2 * duration,false);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(response.getReservationAllocationState().size(),0);
    arrival=clock.getTime();
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",0,arrival - duration,false);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(response.getReservationAllocationState().size(),0);
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",0,1,false);
    response=null;
    try {
      response=client.listReservations(request);
    }
 catch (    Exception e) {
      Assert.fail(e.getMessage());
    }
    Assert.assertNotNull(response);
    Assert.assertEquals(response.getReservationAllocationState().size(),0);
  }
  finally {
    if (client != null) {
      client.stop();
    }
    cluster.stop();
  }
}
