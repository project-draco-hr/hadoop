{
  Configuration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
  SecurityUtil.setAuthenticationMethod(AuthenticationMethod.KERBEROS,conf);
  TimelineDelegationTokenIdentifier timelineDT=new TimelineDelegationTokenIdentifier();
  final Token<TimelineDelegationTokenIdentifier> dToken=new Token<TimelineDelegationTokenIdentifier>(timelineDT.getBytes(),new byte[0],timelineDT.getKind(),new Text());
  YarnClientImpl client=spy(new YarnClientImpl(){
    @Override protected void serviceInit(    Configuration conf) throws Exception {
      if (getConfig().getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {
        timelineServiceEnabled=true;
        timelineClient=mock(TimelineClient.class);
        when(timelineClient.getDelegationToken(any(String.class))).thenReturn(dToken);
        timelineClient.init(getConfig());
        timelineService=TimelineUtils.buildTimelineTokenService(getConfig());
      }
      this.setConfig(conf);
    }
    @Override protected void serviceStart() throws Exception {
      rmClient=mock(ApplicationClientProtocol.class);
    }
    @Override protected void serviceStop() throws Exception {
    }
    @Override public ApplicationReport getApplicationReport(    ApplicationId appId){
      ApplicationReport report=mock(ApplicationReport.class);
      when(report.getYarnApplicationState()).thenReturn(YarnApplicationState.SUBMITTED);
      return report;
    }
    @Override public boolean isSecurityEnabled(){
      return true;
    }
  }
);
  client.init(conf);
  client.start();
  try {
    for (int i=0; i < 2; ++i) {
      ApplicationSubmissionContext context=mock(ApplicationSubmissionContext.class);
      ApplicationId applicationId=ApplicationId.newInstance(0,i + 1);
      when(context.getApplicationId()).thenReturn(applicationId);
      DataOutputBuffer dob=new DataOutputBuffer();
      Credentials credentials=new Credentials();
      if (i == 0) {
        credentials.addToken(client.timelineService,dToken);
      }
      credentials.writeTokenStorageToStream(dob);
      ByteBuffer tokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
      ContainerLaunchContext clc=ContainerLaunchContext.newInstance(null,null,null,null,tokens,null);
      when(context.getAMContainerSpec()).thenReturn(clc);
      client.submitApplication(context);
      if (i == 0) {
        verify(client,never()).getTimelineDelegationToken();
      }
      credentials=new Credentials();
      DataInputByteBuffer dibb=new DataInputByteBuffer();
      tokens=clc.getTokens();
      if (tokens != null) {
        dibb.reset(tokens);
        credentials.readTokenStorageStream(dibb);
        tokens.rewind();
      }
      Collection<Token<? extends TokenIdentifier>> dTokens=credentials.getAllTokens();
      Assert.assertEquals(1,dTokens.size());
      Assert.assertEquals(dToken,dTokens.iterator().next());
    }
  }
  finally {
    client.stop();
  }
}
