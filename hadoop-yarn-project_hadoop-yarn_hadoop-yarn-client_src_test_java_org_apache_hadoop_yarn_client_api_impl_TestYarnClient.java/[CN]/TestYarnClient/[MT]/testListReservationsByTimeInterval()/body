{
  MiniYARNCluster cluster=setupMiniYARNCluster();
  YarnClient client=setupYarnClient(cluster);
  try {
    Clock clock=new UTCClock();
    long arrival=clock.getTime();
    long duration=60000;
    long deadline=(long)(arrival + 1.05 * duration);
    ReservationSubmissionRequest sRequest=submitReservationTestHelper(client,arrival,deadline,duration);
    arrival=clock.getTime();
    ReservationId reservationID=sRequest.getReservationId();
    ReservationListRequest request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",arrival + duration / 2,arrival + duration / 2,true);
    ReservationListResponse response=client.listReservations(request);
    Assert.assertNotNull(response);
    Assert.assertEquals(1,response.getReservationAllocationState().size());
    Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(),reservationID.getId());
    request=ReservationListRequest.newInstance(ReservationSystemTestUtil.reservationQ,"",1,Long.MAX_VALUE,true);
    response=client.listReservations(request);
    Assert.assertNotNull(response);
    Assert.assertEquals(1,response.getReservationAllocationState().size());
    Assert.assertEquals(response.getReservationAllocationState().get(0).getReservationId().getId(),reservationID.getId());
    Assert.assertTrue(response.getReservationAllocationState().get(0).getResourceAllocationRequests().size() > 0);
    ReservationRequests reservationRequests=response.getReservationAllocationState().get(0).getReservationDefinition().getReservationRequests();
    Assert.assertTrue(reservationRequests.getInterpreter().toString().equals("R_ALL"));
    Assert.assertTrue(reservationRequests.getReservationResources().get(0).getDuration() == duration);
  }
  finally {
    if (client != null) {
      client.stop();
    }
    cluster.stop();
  }
}
