{
  MiniYARNCluster cluster=new MiniYARNCluster("testMRAMTokens",1,1,1);
  YarnClient rmClient=null;
  try {
    YarnConfiguration conf=new YarnConfiguration();
    conf.set(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class.getName());
    cluster.init(conf);
    cluster.start();
    final Configuration yarnConf=cluster.getConfig();
    rmClient=YarnClient.createYarnClient();
    rmClient.init(yarnConf);
    rmClient.start();
    YarnClientApplication newApp=rmClient.createApplication();
    ApplicationId appId=newApp.getNewApplicationResponse().getApplicationId();
    ApplicationSubmissionContext appContext=Records.newRecord(ApplicationSubmissionContext.class);
    appContext.setApplicationId(appId);
    appContext.setApplicationName("test");
    appContext.setQueue("nonexist");
    ContainerLaunchContext amContainer=Records.newRecord(ContainerLaunchContext.class);
    appContext.setAMContainerSpec(amContainer);
    appContext.setResource(Resource.newInstance(1024,1));
    rmClient.submitApplication(appContext);
    Assert.fail("Job submission should have thrown an exception");
  }
 catch (  YarnException e) {
    Assert.assertTrue(e.getMessage().contains("Failed to submit"));
  }
 finally {
    if (rmClient != null) {
      rmClient.stop();
    }
    cluster.stop();
  }
}
