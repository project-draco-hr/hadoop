{
  int version=WritableUtils.readVInt(in);
  if (version != groupFactory.version()) {
    throw new IOException("Counters version mismatch, expected " + groupFactory.version() + " got "+ version);
  }
  int numFGroups=WritableUtils.readVInt(in);
  fgroups.clear();
  GroupType[] groupTypes=GroupType.values();
  while (numFGroups-- > 0) {
    GroupType groupType=groupTypes[WritableUtils.readVInt(in)];
    G group;
switch (groupType) {
case FILESYSTEM:
      group=groupFactory.newFileSystemGroup();
    break;
case FRAMEWORK:
  group=groupFactory.newFrameworkGroup(WritableUtils.readVInt(in));
break;
default :
throw new IOException("Unexpected counter group type: " + groupType);
}
group.readFields(in);
fgroups.put(group.getName(),group);
}
int numGroups=WritableUtils.readVInt(in);
if (!groups.isEmpty()) {
groups.clear();
limits.reset();
}
while (numGroups-- > 0) {
limits.checkGroups(groups.size() + 1);
G group=groupFactory.newGenericGroup(StringInterner.weakIntern(Text.readString(in)),null,limits);
group.readFields(in);
groups.put(group.getName(),group);
}
}
