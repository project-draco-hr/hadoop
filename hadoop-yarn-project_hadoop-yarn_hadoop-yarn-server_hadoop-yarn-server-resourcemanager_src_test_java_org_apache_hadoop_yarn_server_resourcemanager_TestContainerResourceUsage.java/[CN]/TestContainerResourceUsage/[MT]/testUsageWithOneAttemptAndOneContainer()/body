{
  MockRM rm=new MockRM(conf);
  rm.start();
  MockNM nm=new MockNM("127.0.0.1:1234",15120,rm.getResourceTrackerService());
  nm.registerNode();
  RMApp app0=rm.submitApp(200);
  RMAppMetrics rmAppMetrics=app0.getRMAppMetrics();
  Assert.assertTrue("Before app submittion, memory seconds should have been 0 but was " + rmAppMetrics.getMemorySeconds(),rmAppMetrics.getMemorySeconds() == 0);
  Assert.assertTrue("Before app submission, vcore seconds should have been 0 but was " + rmAppMetrics.getVcoreSeconds(),rmAppMetrics.getVcoreSeconds() == 0);
  RMAppAttempt attempt0=app0.getCurrentAppAttempt();
  nm.nodeHeartbeat(true);
  MockAM am0=rm.sendAMLaunched(attempt0.getAppAttemptId());
  am0.registerAppAttempt();
  RMContainer rmContainer=rm.getResourceScheduler().getRMContainer(attempt0.getMasterContainer().getId());
  Thread.sleep(1000);
  rmAppMetrics=app0.getRMAppMetrics();
  Assert.assertTrue("While app is running, memory seconds should be >0 but is " + rmAppMetrics.getMemorySeconds(),rmAppMetrics.getMemorySeconds() > 0);
  Assert.assertTrue("While app is running, vcore seconds should be >0 but is " + rmAppMetrics.getVcoreSeconds(),rmAppMetrics.getVcoreSeconds() > 0);
  MockRM.finishAMAndVerifyAppState(app0,rm,nm,am0);
  AggregateAppResourceUsage ru=calculateContainerResourceMetrics(rmContainer);
  rmAppMetrics=app0.getRMAppMetrics();
  Assert.assertEquals("Unexcpected MemorySeconds value",ru.getMemorySeconds(),rmAppMetrics.getMemorySeconds());
  Assert.assertEquals("Unexpected VcoreSeconds value",ru.getVcoreSeconds(),rmAppMetrics.getVcoreSeconds());
  rm.stop();
}
