{
  for (int n=0; n < TEST_CODES; n++) {
    int stripeSize=RAND.nextInt(99) + 1;
    int paritySize=RAND.nextInt(9) + 1;
    ErasureCode ec=new ReedSolomonCode(stripeSize,paritySize);
    for (int m=0; m < TEST_TIMES; m++) {
      int symbolMax=(int)Math.pow(2,ec.symbolSize());
      int[] message=new int[stripeSize];
      for (int i=0; i < stripeSize; i++) {
        message[i]=RAND.nextInt(symbolMax);
      }
      int[] parity=new int[paritySize];
      ec.encode(message,parity);
      int[] data=new int[stripeSize + paritySize];
      int[] copy=new int[data.length];
      for (int i=0; i < paritySize; i++) {
        data[i]=parity[i];
        copy[i]=parity[i];
      }
      for (int i=0; i < stripeSize; i++) {
        data[i + paritySize]=message[i];
        copy[i + paritySize]=message[i];
      }
      int erasedLen=paritySize == 1 ? 1 : RAND.nextInt(paritySize - 1) + 1;
      int[] erasedLocations=randomErasedLocation(erasedLen,data.length);
      for (int i=0; i < erasedLocations.length; i++) {
        data[erasedLocations[i]]=0;
      }
      int[] erasedValues=new int[erasedLen];
      ec.decode(data,erasedLocations,erasedValues);
      for (int i=0; i < erasedLen; i++) {
        assertEquals("Decode failed",copy[erasedLocations[i]],erasedValues[i]);
      }
    }
  }
}
