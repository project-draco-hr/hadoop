{
  Configuration conf=new HdfsConfiguration();
  final int MAX_IDLE_TIME=2000;
  conf.setInt("ipc.client.connection.maxidletime",MAX_IDLE_TIME);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,1000);
  conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY,1);
  conf.setBoolean(DFSConfigKeys.DFS_SUPPORT_APPEND_KEY,true);
  System.out.println("Test 2************************************");
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  FileSystem fs=null;
  try {
    cluster.waitActive();
    fs=cluster.getFileSystem();
    final int nnport=cluster.getNameNodePort();
    Path dir1=new Path("/user/dir1");
    Path file1=new Path(dir1,"file1");
    FSDataOutputStream stm1=TestFileCreation.createFile(fs,file1,1);
    System.out.println("testFileCreationDeleteParent: " + "Created file " + file1);
    TestFileCreation.writeFile(stm1);
    stm1.hflush();
    Path dir2=new Path("/user/dir2");
    Path file2=new Path(dir2,"file2");
    FSDataOutputStream stm2=TestFileCreation.createFile(fs,file2,1);
    System.out.println("testFileCreationDeleteParent: " + "Created file " + file2);
    TestFileCreation.writeFile(stm2);
    stm2.hflush();
    Path dir3=new Path("/user/dir3");
    fs.rename(dir1,dir3);
    cluster.shutdown();
    try {
      Thread.sleep(2 * MAX_IDLE_TIME);
    }
 catch (    InterruptedException e) {
    }
    cluster=new MiniDFSCluster.Builder(conf).nameNodePort(nnport).format(false).build();
    cluster.waitActive();
    cluster.shutdown();
    try {
      Thread.sleep(5000);
    }
 catch (    InterruptedException e) {
    }
    cluster=new MiniDFSCluster.Builder(conf).nameNodePort(nnport).format(false).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    Path newfile=new Path("/user/dir3","file1");
    assertTrue(!fs.exists(file1));
    assertTrue(fs.exists(file2));
    assertTrue(fs.exists(newfile));
    checkFullFile(fs,newfile);
  }
  finally {
    fs.close();
    cluster.shutdown();
  }
}
