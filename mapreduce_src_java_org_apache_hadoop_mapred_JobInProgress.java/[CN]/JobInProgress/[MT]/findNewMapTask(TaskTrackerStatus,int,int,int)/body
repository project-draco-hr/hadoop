{
  String taskTrackerName=tts.getTrackerName();
  String taskTrackerHost=tts.getHost();
  if (numMapTasks == 0) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("No maps to schedule for " + profile.getJobID());
    }
    return -1;
  }
  TaskInProgress tip=null;
  this.clusterSize=clusterSize;
  if (!shouldRunOnTaskTracker(taskTrackerName)) {
    return -1;
  }
  long outSize=resourceEstimator.getEstimatedMapOutputSize();
  long availSpace=tts.getResourceStatus().getAvailableSpace();
  if (availSpace < outSize) {
    LOG.warn("No room for map task. Node " + tts.getHost() + " has "+ availSpace+ " bytes free; but we expect map to take "+ outSize);
    return -1;
  }
  Node node=jobtracker.getNode(tts.getHost());
  if (node != null) {
    Node key=node;
    int level=0;
    int maxLevelToSchedule=Math.min(maxCacheLevel,maxLevel);
    for (level=0; level < maxLevelToSchedule; ++level) {
      List<TaskInProgress> cacheForLevel=nonRunningMapCache.get(key);
      if (cacheForLevel != null) {
        tip=findTaskFromList(cacheForLevel,tts,numUniqueHosts,level == 0);
        if (tip != null) {
          scheduleMap(tip);
          if (cacheForLevel.size() == 0) {
            nonRunningMapCache.remove(key);
          }
          return tip.getIdWithinJob();
        }
      }
      key=key.getParent();
    }
    if (level == maxCacheLevel) {
      return -1;
    }
  }
  Collection<Node> nodesAtMaxLevel=jobtracker.getNodesAtMaxLevel();
  Node nodeParentAtMaxLevel=(node == null) ? null : JobTracker.getParentNode(node,maxLevel - 1);
  for (  Node parent : nodesAtMaxLevel) {
    if (parent == nodeParentAtMaxLevel) {
      continue;
    }
    List<TaskInProgress> cache=nonRunningMapCache.get(parent);
    if (cache != null) {
      tip=findTaskFromList(cache,tts,numUniqueHosts,false);
      if (tip != null) {
        scheduleMap(tip);
        if (cache.size() == 0) {
          nonRunningMapCache.remove(parent);
        }
        LOG.info("Choosing a non-local task " + tip.getTIPId());
        return tip.getIdWithinJob();
      }
    }
  }
  tip=findTaskFromList(nonLocalMaps,tts,numUniqueHosts,false);
  if (tip != null) {
    scheduleMap(tip);
    LOG.info("Choosing a non-local task " + tip.getTIPId());
    return tip.getIdWithinJob();
  }
  if (hasSpeculativeMaps) {
    tip=getSpeculativeMap(taskTrackerName,taskTrackerHost);
    if (tip != null) {
      return tip.getIdWithinJob();
    }
  }
  return -1;
}
