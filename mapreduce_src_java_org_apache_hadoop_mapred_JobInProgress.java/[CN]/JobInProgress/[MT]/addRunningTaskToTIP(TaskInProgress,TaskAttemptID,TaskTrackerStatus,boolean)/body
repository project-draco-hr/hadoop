{
  if (!isScheduled) {
    tip.addRunningTask(id,tts.getTrackerName());
  }
  final JobTrackerInstrumentation metrics=jobtracker.getInstrumentation();
  TaskType name;
  String splits="";
  Enum counter=null;
  if (tip.isJobSetupTask()) {
    launchedSetup=true;
    name=TaskType.JOB_SETUP;
  }
 else   if (tip.isJobCleanupTask()) {
    launchedCleanup=true;
    name=TaskType.JOB_CLEANUP;
  }
 else   if (tip.isMapTask()) {
    ++runningMapTasks;
    name=TaskType.MAP;
    counter=JobCounter.TOTAL_LAUNCHED_MAPS;
    splits=tip.getSplitNodes();
    if (tip.isSpeculating()) {
      speculativeMapTasks++;
      metrics.speculateMap(id);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Chosen speculative task, current speculativeMap task count: " + speculativeMapTasks);
      }
    }
    metrics.launchMap(id);
  }
 else {
    ++runningReduceTasks;
    name=TaskType.REDUCE;
    counter=JobCounter.TOTAL_LAUNCHED_REDUCES;
    if (tip.isSpeculating()) {
      speculativeReduceTasks++;
      metrics.speculateReduce(id);
      if (LOG.isDebugEnabled()) {
        LOG.debug("Chosen speculative task, current speculativeReduce task count: " + speculativeReduceTasks);
      }
    }
    metrics.launchReduce(id);
  }
  if (tip.isFirstAttempt(id)) {
    TaskStartedEvent tse=new TaskStartedEvent(tip.getTIPId(),tip.getExecStartTime(),name,splits);
    jobHistory.logEvent(tse,tip.getJob().jobId);
    setFirstTaskLaunchTime(tip);
  }
  if (!tip.isJobSetupTask() && !tip.isJobCleanupTask()) {
    jobCounters.incrCounter(counter,1);
  }
  if (tip.isMapTask() && !tip.isJobSetupTask() && !tip.isJobCleanupTask()) {
    int level=getLocalityLevel(tip,tts);
switch (level) {
case 0:
      LOG.info("Choosing data-local task " + tip.getTIPId());
    jobCounters.incrCounter(JobCounter.DATA_LOCAL_MAPS,1);
  metrics.launchDataLocalMap(id);
break;
case 1:
LOG.info("Choosing rack-local task " + tip.getTIPId());
jobCounters.incrCounter(JobCounter.RACK_LOCAL_MAPS,1);
metrics.launchRackLocalMap(id);
break;
default :
if (level != this.maxLevel) {
LOG.info("Choosing cached task at level " + level + tip.getTIPId());
jobCounters.incrCounter(JobCounter.OTHER_LOCAL_MAPS,1);
}
break;
}
}
}
