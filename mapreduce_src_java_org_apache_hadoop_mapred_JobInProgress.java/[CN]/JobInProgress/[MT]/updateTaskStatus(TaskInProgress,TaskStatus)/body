{
  double oldProgress=tip.getProgress();
  boolean wasRunning=tip.isRunning();
  boolean wasComplete=tip.isComplete();
  boolean wasPending=tip.isOnlyCommitPending();
  TaskAttemptID taskid=status.getTaskID();
  boolean wasAttemptRunning=tip.isAttemptRunning(taskid);
  if ((wasComplete || tip.wasKilled(taskid)) && (status.getRunState() == TaskStatus.State.SUCCEEDED)) {
    status.setRunState(TaskStatus.State.KILLED);
  }
  if ((this.isComplete() || jobFailed || jobKilled|| !taskCleanupNeeded) && !tip.isCleanupAttempt(taskid)) {
    if (status.getRunState() == TaskStatus.State.FAILED_UNCLEAN) {
      status.setRunState(TaskStatus.State.FAILED);
    }
 else     if (status.getRunState() == TaskStatus.State.KILLED_UNCLEAN) {
      status.setRunState(TaskStatus.State.KILLED);
    }
  }
  boolean change=tip.updateStatus(status);
  if (change) {
    TaskStatus.State state=status.getRunState();
    TaskTracker taskTracker=this.jobtracker.getTaskTracker(tip.machineWhereTaskRan(taskid));
    TaskTrackerStatus ttStatus=(taskTracker == null) ? null : taskTracker.getStatus();
    String taskTrackerHttpLocation=null;
    if (null != ttStatus) {
      String host;
      if (NetUtils.getStaticResolution(ttStatus.getHost()) != null) {
        host=NetUtils.getStaticResolution(ttStatus.getHost());
      }
 else {
        host=ttStatus.getHost();
      }
      taskTrackerHttpLocation="http://" + host + ":"+ ttStatus.getHttpPort();
    }
    TaskCompletionEvent taskEvent=null;
    if (state == TaskStatus.State.SUCCEEDED) {
      taskEvent=new TaskCompletionEvent(taskCompletionEventTracker,taskid,tip.idWithinJob(),status.getIsMap() && !tip.isJobCleanupTask() && !tip.isJobSetupTask(),TaskCompletionEvent.Status.SUCCEEDED,taskTrackerHttpLocation);
      taskEvent.setTaskRunTime((int)(status.getFinishTime() - status.getStartTime()));
      tip.setSuccessEventNumber(taskCompletionEventTracker);
    }
 else     if (state == TaskStatus.State.COMMIT_PENDING) {
      if (!wasComplete && !wasPending) {
        tip.doCommit(taskid);
      }
      return;
    }
 else     if (state == TaskStatus.State.FAILED_UNCLEAN || state == TaskStatus.State.KILLED_UNCLEAN) {
      tip.incompleteSubTask(taskid,this.status);
      if (tip.isMapTask()) {
        mapCleanupTasks.add(taskid);
      }
 else {
        reduceCleanupTasks.add(taskid);
      }
      jobtracker.removeTaskEntry(taskid);
    }
 else     if (state == TaskStatus.State.FAILED || state == TaskStatus.State.KILLED) {
      int eventNumber;
      if ((eventNumber=tip.getSuccessEventNumber()) != -1) {
        TaskCompletionEvent t=this.taskCompletionEvents.get(eventNumber);
        if (t.getTaskAttemptId().equals(taskid))         t.setTaskStatus(TaskCompletionEvent.Status.OBSOLETE);
      }
      failedTask(tip,taskid,status,taskTracker,wasRunning,wasComplete,wasAttemptRunning);
      TaskCompletionEvent.Status taskCompletionStatus=(state == TaskStatus.State.FAILED) ? TaskCompletionEvent.Status.FAILED : TaskCompletionEvent.Status.KILLED;
      if (tip.isFailed()) {
        taskCompletionStatus=TaskCompletionEvent.Status.TIPFAILED;
      }
      taskEvent=new TaskCompletionEvent(taskCompletionEventTracker,taskid,tip.idWithinJob(),status.getIsMap() && !tip.isJobCleanupTask() && !tip.isJobSetupTask(),taskCompletionStatus,taskTrackerHttpLocation);
    }
    if (taskEvent != null) {
      this.taskCompletionEvents.add(taskEvent);
      taskCompletionEventTracker++;
      JobTrackerStatistics.TaskTrackerStat ttStat=jobtracker.getStatistics().getTaskTrackerStat(tip.machineWhereTaskRan(taskid));
      if (ttStat != null) {
        ttStat.incrTotalTasks();
      }
      if (state == TaskStatus.State.SUCCEEDED) {
        completedTask(tip,status);
        if (ttStat != null) {
          ttStat.incrSucceededTasks();
        }
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Taking progress for " + tip.getTIPId() + " from "+ oldProgress+ " to "+ tip.getProgress());
  }
  if (!tip.isJobCleanupTask() && !tip.isJobSetupTask()) {
    double progressDelta=tip.getProgress() - oldProgress;
    if (tip.isMapTask()) {
      this.status.setMapProgress((float)(this.status.mapProgress() + progressDelta / maps.length));
    }
 else {
      this.status.setReduceProgress((float)(this.status.reduceProgress() + (progressDelta / reduces.length)));
    }
  }
}
