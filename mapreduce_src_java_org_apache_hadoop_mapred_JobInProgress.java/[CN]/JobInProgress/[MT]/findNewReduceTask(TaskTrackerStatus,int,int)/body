{
  String taskTrackerName=tts.getTrackerName();
  String taskTrackerHost=tts.getHost();
  if (numReduceTasks == 0) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("No reduces to schedule for " + profile.getJobID());
    }
    return -1;
  }
  TaskInProgress tip=null;
  this.clusterSize=clusterSize;
  if (!shouldRunOnTaskTracker(taskTrackerName)) {
    return -1;
  }
  long outSize=resourceEstimator.getEstimatedReduceInputSize();
  long availSpace=tts.getResourceStatus().getAvailableSpace();
  if (availSpace < outSize) {
    LOG.warn("No room for reduce task. Node " + taskTrackerName + " has "+ availSpace+ " bytes free; but we expect reduce input to take "+ outSize);
    return -1;
  }
  tip=findTaskFromList(nonRunningReduces,tts,numUniqueHosts,false);
  if (tip != null) {
    scheduleReduce(tip);
    return tip.getIdWithinJob();
  }
  if (hasSpeculativeReduces) {
    tip=getSpeculativeReduce(taskTrackerName,taskTrackerHost);
    if (tip != null) {
      return tip.getIdWithinJob();
    }
  }
  return -1;
}
