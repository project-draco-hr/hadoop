{
  if (list.isEmpty()) {
    return null;
  }
  long now=JobTracker.getClock().getTime();
  if (isSlowTracker(taskTrackerName) || atSpeculativeCap(list,taskType)) {
    return null;
  }
  TaskInProgress slowestTIP=null;
  Comparator<TaskInProgress> LateComparator=new EstimatedTimeLeftComparator(now);
  Iterator<TaskInProgress> iter=list.iterator();
  while (iter.hasNext()) {
    TaskInProgress tip=iter.next();
    if (tip.hasRunOnMachine(taskTrackerHost,taskTrackerName) || !tip.canBeSpeculated(now)) {
      continue;
    }
    if (slowestTIP == null) {
      slowestTIP=tip;
    }
 else {
      slowestTIP=LateComparator.compare(tip,slowestTIP) < 0 ? tip : slowestTIP;
    }
  }
  if (slowestTIP != null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Chose task " + slowestTIP.getTIPId() + ". Statistics: Task's : "+ slowestTIP.getCurrentProgressRate(now)+ " Job's : "+ (slowestTIP.isMapTask() ? runningMapTaskStats : runningReduceTaskStats));
    }
  }
  return slowestTIP;
}
