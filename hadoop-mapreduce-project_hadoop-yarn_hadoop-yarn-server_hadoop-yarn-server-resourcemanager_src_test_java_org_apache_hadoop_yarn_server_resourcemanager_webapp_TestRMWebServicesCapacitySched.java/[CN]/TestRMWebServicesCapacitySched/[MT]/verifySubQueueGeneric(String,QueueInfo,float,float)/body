{
  String[] qArr=q.split("\\.");
  assertTrue("q name invalid: " + q,qArr.length > 1);
  String qshortName=qArr[qArr.length - 1];
  assertEquals("usedCapacity doesn't match",0,info.usedCapacity,1e-3f);
  assertEquals("capacity doesn't match",csConf.getCapacity(q),info.capacity,1e-3f);
  float expectCapacity=csConf.getMaximumCapacity(q);
  float expectAbsMaxCapacity=parentAbsMaxCapacity * (info.maxCapacity / 100);
  if (CapacitySchedulerConfiguration.UNDEFINED == expectCapacity) {
    expectCapacity=100;
    expectAbsMaxCapacity=100;
  }
  assertEquals("maxCapacity doesn't match",expectCapacity,info.maxCapacity,1e-3f);
  assertEquals("absoluteCapacity doesn't match",parentAbsCapacity * (info.capacity / 100),info.absoluteCapacity,1e-3f);
  assertEquals("absoluteMaxCapacity doesn't match",expectAbsMaxCapacity,info.absoluteMaxCapacity,1e-3f);
  assertEquals("utilization doesn't match",0,info.utilization,1e-3f);
  assertEquals("numApplications doesn't match",0,info.numApplications);
  assertTrue("usedResources doesn't match",info.usedResources.matches("memory: 0"));
  assertTrue("queueName doesn't match, got: " + info.queueName + " expected: "+ q,qshortName.matches(info.queueName));
  assertTrue("state doesn't match",(csConf.getState(q).toString()).matches(info.state));
}
