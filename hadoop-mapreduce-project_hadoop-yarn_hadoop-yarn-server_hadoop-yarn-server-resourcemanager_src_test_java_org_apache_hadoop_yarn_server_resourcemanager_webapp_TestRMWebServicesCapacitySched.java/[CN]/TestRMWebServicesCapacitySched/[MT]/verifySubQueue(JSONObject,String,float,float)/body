{
  int numExpectedElements=11;
  boolean isParentQueue=true;
  if (!info.has("subQueues")) {
    numExpectedElements=20;
    isParentQueue=false;
  }
  assertEquals("incorrect number of elements",numExpectedElements,info.length());
  QueueInfo qi=isParentQueue ? new QueueInfo() : new LeafQueueInfo();
  qi.capacity=(float)info.getDouble("capacity");
  qi.usedCapacity=(float)info.getDouble("usedCapacity");
  qi.maxCapacity=(float)info.getDouble("maxCapacity");
  qi.absoluteCapacity=(float)info.getDouble("absoluteCapacity");
  qi.absoluteMaxCapacity=(float)info.getDouble("absoluteMaxCapacity");
  qi.absoluteUsedCapacity=(float)info.getDouble("absoluteUsedCapacity");
  qi.numApplications=info.getInt("numApplications");
  qi.usedResources=info.getString("usedResources");
  qi.queueName=info.getString("queueName");
  qi.state=info.getString("state");
  verifySubQueueGeneric(q,qi,parentAbsCapacity,parentAbsMaxCapacity);
  if (isParentQueue) {
    JSONArray arr=info.getJSONArray("subQueues");
    for (int i=0; i < arr.length(); i++) {
      JSONObject obj=arr.getJSONObject(i);
      String q2=q + "." + obj.getString("queueName");
      verifySubQueue(obj,q2,qi.absoluteCapacity,qi.absoluteMaxCapacity);
    }
  }
 else {
    LeafQueueInfo lqi=(LeafQueueInfo)qi;
    lqi.numActiveApplications=info.getInt("numActiveApplications");
    lqi.numPendingApplications=info.getInt("numPendingApplications");
    lqi.numContainers=info.getInt("numContainers");
    lqi.maxApplications=info.getInt("maxApplications");
    lqi.maxApplicationsPerUser=info.getInt("maxApplicationsPerUser");
    lqi.maxActiveApplications=info.getInt("maxActiveApplications");
    lqi.maxActiveApplicationsPerUser=info.getInt("maxActiveApplicationsPerUser");
    lqi.userLimit=info.getInt("userLimit");
    lqi.userLimitFactor=(float)info.getDouble("userLimitFactor");
    verifyLeafQueueGeneric(q,lqi);
  }
}
