{
  cluster.getConfiguration(0).set(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY,"1.0f");
  String testData="testData";
  cluster.getConfiguration(0).setInt("io.bytes.per.checksum",testData.length());
  cluster.restartNameNode(0);
  try {
    cluster.waitActive();
    cluster.transitionToActive(0);
    cluster.transitionToStandby(1);
    DistributedFileSystem dfs=cluster.getFileSystem(0);
    String pathString="/tmp1.txt";
    Path filePath=new Path(pathString);
    FSDataOutputStream create=dfs.create(filePath,FsPermission.getDefault(),true,1024,(short)3,testData.length(),null);
    create.write(testData.getBytes());
    create.hflush();
    long fileId=((DFSOutputStream)create.getWrappedStream()).getFileId();
    FileStatus fileStatus=dfs.getFileStatus(filePath);
    DFSClient client=DFSClientAdapter.getClient(dfs);
    ExtendedBlock previousBlock=DFSClientAdapter.getPreviousBlock(client,fileId);
    DFSClientAdapter.getNamenode(client).addBlock(pathString,client.getClientName(),new ExtendedBlock(previousBlock),new DatanodeInfo[0],DFSClientAdapter.getFileId((DFSOutputStream)create.getWrappedStream()),null);
    cluster.restartNameNode(0,true);
    cluster.restartDataNode(0);
    cluster.transitionToActive(0);
    Thread.sleep(2000);
    FSDataInputStream is=dfs.open(filePath);
    is.close();
    dfs.recoverLease(filePath);
    assertTrue("Recovery also should be success",dfs.recoverLease(filePath));
  }
  finally {
    cluster.shutdown();
  }
}
