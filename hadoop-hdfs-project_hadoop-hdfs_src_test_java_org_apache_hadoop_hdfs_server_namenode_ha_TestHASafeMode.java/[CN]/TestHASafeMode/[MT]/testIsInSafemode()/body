{
  NameNode nn2=cluster.getNameNode(1);
  assertTrue("nn2 should be in standby state",nn2.isStandbyState());
  InetSocketAddress nameNodeAddress=nn2.getNameNodeAddress();
  Configuration conf=new Configuration();
  DistributedFileSystem dfs=new DistributedFileSystem();
  try {
    dfs.initialize(URI.create("hdfs://" + nameNodeAddress.getHostName() + ":"+ nameNodeAddress.getPort()),conf);
    dfs.isInSafeMode();
    fail("StandBy should throw exception for isInSafeMode");
  }
 catch (  IOException e) {
    if (e instanceof RemoteException) {
      assertEquals("RPC Error code should indicate app failure.",RpcErrorCodeProto.ERROR_APPLICATION,((RemoteException)e).getErrorCode());
      IOException sbExcpetion=((RemoteException)e).unwrapRemoteException();
      assertTrue("StandBy nn should not support isInSafeMode",sbExcpetion instanceof StandbyException);
    }
 else {
      throw e;
    }
  }
 finally {
    if (null != dfs) {
      dfs.close();
    }
  }
  cluster.transitionToStandby(0);
  cluster.transitionToActive(1);
  cluster.getNameNodeRpc(1).setSafeMode(SafeModeAction.SAFEMODE_ENTER,false);
  DistributedFileSystem dfsWithFailOver=(DistributedFileSystem)fs;
  assertTrue("ANN should be in SafeMode",dfsWithFailOver.isInSafeMode());
  cluster.getNameNodeRpc(1).setSafeMode(SafeModeAction.SAFEMODE_LEAVE,false);
  assertFalse("ANN should be out of SafeMode",dfsWithFailOver.isInSafeMode());
}
