{
  banner("Starting with NN0 active and NN1 standby, creating some blocks");
  DFSTestUtil.createFile(fs,new Path("/test"),4 * BLOCK_SIZE + BLOCK_SIZE / 2,(short)3,1L);
  nn0.getRpcServer().rollEditLog();
  banner("Restarting standby");
  restartStandby();
  assertSafeMode(nn1,5,5);
  FSDataOutputStream stm=fs.append(new Path("/test"));
  try {
    assertSafeMode(nn1,5,5);
    HATestUtil.waitForStandbyToCatchUp(nn0,nn1);
    assertSafeMode(nn1,4,4);
  }
  finally {
    IOUtils.closeStream(stm);
  }
  banner("Removing the blocks without rolling the edit log");
  fs.delete(new Path("/test"),true);
  BlockManagerTestUtil.computeAllPendingWork(nn0.getNamesystem().getBlockManager());
  banner("Triggering deletions on DNs and Deletion Reports");
  cluster.triggerHeartbeats();
  HATestUtil.waitForDNDeletions(cluster);
  cluster.triggerDeletionReports();
  assertSafeMode(nn1,4,4);
  banner("Waiting for standby to catch up to active namespace");
  HATestUtil.waitForStandbyToCatchUp(nn0,nn1);
  assertSafeMode(nn1,0,0);
}
