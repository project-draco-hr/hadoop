def writeUserData(self, user, options, serviceInfo, count):
    hostInfo = self.getServiceHosts(serviceInfo)
    hostKey = 'short'
    if (options == 'display=long'):
        hostKey = 'long'
    if (count == 0):
        self.w('<tr>')
        self.w('<td class="header" colspan="2">')
        self.w('<font class="header">Active Users</font>')
        self.w('</td>')
        self.w('</tr>')
    self.w('<tr>')
    self.w(('<td><font>%s</font></td>' % user))
    self.w('<td>')
    jobIDs = serviceInfo[user].keys()
    jobIDs.sort()
    for jobID in jobIDs:
        self.w('<table class="sub1" width="100%">')
        if (count == 0):
            self.w('<tr>')
            self.w('<td class="header" colspan="2">')
            self.w('<font class="header">PBS Job Identifiers</font>')
            self.w('</td>')
            self.w('</tr>')
        self.w('<tr>')
        self.w(('<td><font>%s</font></td>' % jobID))
        self.w('<td>')
        hosts = serviceInfo[user][jobID].keys()
        hosts.sort()
        for host in hosts:
            if hostInfo[hostKey].has_key(self.getJobKey(user, jobID, host)):
                self.w('<table class="sub2" width="100%">')
                if (count == 0):
                    self.w('<tr>')
                    self.w('<td class="header" colspan="2">')
                    self.w('<font class="header">Hosts Running Services</font>')
                    self.w('</td>')
                    self.w('</tr>')
                self.w('<tr>')
                self.w(('<td><font>%s</font></td>' % host))
                self.w('<td>')
                self.w('<table class="sub3" width="100%">')
                self.w('<tr>')
                self.w('<td colspan="2">')
                self.w('<font class="header">Service Information</font>')
                self.w('</td>')
                self.w('</tr>')
                for serviceItem in serviceInfo[user][jobID][host]:
                    serviceName = serviceItem.keys()
                    serviceName = serviceName[0]
                    if (isinstance(serviceItem[serviceName], dict) and (options == 'display=long')):
                        self.w('<tr class="colored">')
                        self.w(('<td><font>%s</font></td>' % serviceName))
                        self.w('<td>')
                        self.w('<table width="100%">')
                        for key in serviceItem[serviceName]:
                            self.w('<tr>')
                            self.w(('<td class="service1"><font>%s</font></td>' % key))
                            self.w(('<td class="service2"><font>%s</font></td>' % serviceItem[serviceName][key]))
                            self.w('</tr>')
                        self.w('</table>')
                        self.w('</td>')
                        self.w('</tr>')
                    elif isinstance(serviceItem[serviceName], str):
                        self.w('<tr class="colored">')
                        self.w(('<td><font class="service1">%s</font></td>' % serviceName))
                        self.w('<td>')
                        (host, port) = serviceItem[serviceName].split(':')
                        hostnameInfo = socket.gethostbyname_ex(host)
                        if serviceName.startswith('mapred'):
                            self.w(('<a href="http://%s:%s">Hadoop Job Tracker</a>' % (hostnameInfo[0], port)))
                        elif serviceName.startswith('hdfs'):
                            self.w(('<a href="http://%s:%s">HDFS Name Node</a>&nbsp' % (hostnameInfo[0], port)))
                        else:
                            self.w(('<font class="service2">%s</font>' % serviceItem[serviceName]))
                        self.w('</td>')
                        self.w('</tr>')
                self.w('</table>')
                self.w('</td>')
                self.w('</tr>')
                self.w('</table>')
                count = (count + 1)
        self.w('</td>')
        self.w('</tr>')
        self.w('</table>')
        count = (count + 1)
    self.w('</td>')
    self.w('</tr>')
