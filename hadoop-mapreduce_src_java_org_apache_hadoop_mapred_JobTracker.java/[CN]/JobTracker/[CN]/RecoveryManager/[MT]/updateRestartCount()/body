{
  Path restartFile=getRestartCountFile();
  Path tmpRestartFile=getTempRestartCountFile();
  FsPermission filePerm=new FsPermission(SYSTEM_FILE_PERMISSION);
  if (fs.exists(restartFile)) {
    fs.delete(tmpRestartFile,false);
  }
 else   if (fs.exists(tmpRestartFile)) {
    fs.rename(tmpRestartFile,restartFile);
  }
 else {
    shouldRecover=false;
    try {
      FSDataOutputStream out=FileSystem.create(fs,restartFile,filePerm);
      out.writeInt(0);
      out.close();
    }
 catch (    IOException ioe) {
      LOG.warn("Writing to file " + restartFile + " failed!");
      LOG.warn("FileSystem is not ready yet!");
      fs.delete(restartFile,false);
      throw ioe;
    }
    return;
  }
  FSDataInputStream in=fs.open(restartFile);
  try {
    restartCount=in.readInt();
    ++restartCount;
  }
 catch (  IOException ioe) {
    LOG.warn("System directory is garbled. Failed to read file " + restartFile);
    LOG.warn("Jobtracker recovery is not possible with garbled" + " system directory! Please delete the system directory and" + " restart the jobtracker. Note that deleting the system"+ " directory will result in loss of all the running jobs.");
    throw new RuntimeException(ioe);
  }
 finally {
    if (in != null) {
      in.close();
    }
  }
  FSDataOutputStream out=FileSystem.create(fs,tmpRestartFile,filePerm);
  out.writeInt(restartCount);
  out.close();
  fs.delete(restartFile,false);
  fs.rename(tmpRestartFile,restartFile);
}
