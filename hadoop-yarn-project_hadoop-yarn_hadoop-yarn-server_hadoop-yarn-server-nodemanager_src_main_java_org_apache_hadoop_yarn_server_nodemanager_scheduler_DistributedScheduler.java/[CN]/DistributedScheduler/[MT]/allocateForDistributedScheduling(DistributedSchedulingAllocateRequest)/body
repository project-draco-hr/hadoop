{
  if (LOG.isDebugEnabled()) {
    LOG.debug("Forwarding allocate request to the" + "Distributed Scheduler Service on YARN RM");
  }
  PartitionedResourceRequests partitionedAsks=partitionAskList(request.getAllocateRequest().getAskList());
  List<ContainerId> releasedContainers=request.getAllocateRequest().getReleaseList();
  int numReleasedContainers=releasedContainers.size();
  if (numReleasedContainers > 0) {
    LOG.info("AttemptID: " + applicationAttemptId + " released: "+ numReleasedContainers);
    containersAllocated.removeAll(releasedContainers);
  }
  ResourceBlacklistRequest rbr=request.getAllocateRequest().getResourceBlacklistRequest();
  if (rbr != null) {
    blacklist.removeAll(rbr.getBlacklistRemovals());
    blacklist.addAll(rbr.getBlacklistAdditions());
  }
  addToOutstandingReqs(partitionedAsks.getOpportunistic());
  List<Container> allocatedContainers=new ArrayList<>();
  for (  Priority priority : outstandingOpReqs.descendingKeySet()) {
    Map<Resource,List<Container>> allocated=containerAllocator.allocate(this.appParams,containerIdCounter,outstandingOpReqs.get(priority).values(),blacklist,applicationAttemptId,nodeList,appSubmitter);
    for (    Map.Entry<Resource,List<Container>> e : allocated.entrySet()) {
      matchAllocationToOutstandingRequest(e.getKey(),e.getValue());
      allocatedContainers.addAll(e.getValue());
    }
  }
  request.setAllocatedContainers(allocatedContainers);
  request.getAllocateRequest().setAskList(partitionedAsks.getGuaranteed());
  DistributedSchedulingAllocateResponse dsResp=getNextInterceptor().allocateForDistributedScheduling(request);
  setNodeList(dsResp.getNodesForScheduling());
  List<NMToken> nmTokens=dsResp.getAllocateResponse().getNMTokens();
  for (  NMToken nmToken : nmTokens) {
    nodeTokens.put(nmToken.getNodeId(),nmToken);
  }
  List<ContainerStatus> completedContainers=dsResp.getAllocateResponse().getCompletedContainersStatuses();
  for (  ContainerStatus cs : completedContainers) {
    if (cs.getExecutionType() == ExecutionType.OPPORTUNISTIC) {
      containersAllocated.remove(cs.getContainerId());
    }
  }
  updateResponseWithNMTokens(dsResp.getAllocateResponse(),nmTokens,allocatedContainers);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Number of opportunistic containers currently allocated by" + "application: " + containersAllocated.size());
  }
  return dsResp;
}
