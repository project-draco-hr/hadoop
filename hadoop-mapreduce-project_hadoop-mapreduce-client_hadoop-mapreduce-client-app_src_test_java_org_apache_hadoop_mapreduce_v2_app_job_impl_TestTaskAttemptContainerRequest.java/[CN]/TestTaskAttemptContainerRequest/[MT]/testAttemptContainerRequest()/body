{
  final Text SECRET_KEY_ALIAS=new Text("secretkeyalias");
  final byte[] SECRET_KEY=("secretkey").getBytes();
  Map<ApplicationAccessType,String> acls=new HashMap<ApplicationAccessType,String>(1);
  acls.put(ApplicationAccessType.VIEW_APP,"otheruser");
  ApplicationId appId=BuilderUtils.newApplicationId(1,1);
  JobId jobId=MRBuilderUtils.newJobId(appId,1);
  TaskId taskId=MRBuilderUtils.newTaskId(jobId,1,TaskType.MAP);
  Path jobFile=mock(Path.class);
  EventHandler eventHandler=mock(EventHandler.class);
  TaskAttemptListener taListener=mock(TaskAttemptListener.class);
  when(taListener.getAddress()).thenReturn(new InetSocketAddress("localhost",0));
  JobConf jobConf=new JobConf();
  jobConf.setClass("fs.file.impl",StubbedFS.class,FileSystem.class);
  jobConf.setBoolean("fs.file.impl.disable.cache",true);
  jobConf.set(JobConf.MAPRED_MAP_TASK_ENV,"");
  jobConf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(jobConf);
  Credentials credentials=new Credentials();
  credentials.addSecretKey(SECRET_KEY_ALIAS,SECRET_KEY);
  Token<JobTokenIdentifier> jobToken=new Token<JobTokenIdentifier>(("tokenid").getBytes(),("tokenpw").getBytes(),new Text("tokenkind"),new Text("tokenservice"));
  TaskAttemptImpl taImpl=new MapTaskAttemptImpl(taskId,1,eventHandler,jobFile,1,mock(TaskSplitMetaInfo.class),jobConf,taListener,jobToken,credentials,new SystemClock(),null);
  jobConf.set(MRJobConfig.APPLICATION_ATTEMPT_ID,taImpl.getID().toString());
  ContainerId containerId=BuilderUtils.newContainerId(1,1,1,1);
  ContainerLaunchContext launchCtx=TaskAttemptImpl.createContainerLaunchContext(acls,containerId,jobConf,jobToken,taImpl.createRemoteTask(),TypeConverter.fromYarn(jobId),mock(Resource.class),mock(WrappedJvmID.class),taListener,credentials);
  Assert.assertEquals("ACLs mismatch",acls,launchCtx.getApplicationACLs());
  Credentials launchCredentials=new Credentials();
  DataInputByteBuffer dibb=new DataInputByteBuffer();
  dibb.reset(launchCtx.getContainerTokens());
  launchCredentials.readTokenStorageStream(dibb);
  for (  Token<? extends TokenIdentifier> token : credentials.getAllTokens()) {
    Token<? extends TokenIdentifier> launchToken=launchCredentials.getToken(token.getService());
    Assert.assertNotNull("Token " + token.getService() + " is missing",launchToken);
    Assert.assertEquals("Token " + token.getService() + " mismatch",token,launchToken);
  }
  Assert.assertNotNull("Secret key missing",launchCredentials.getSecretKey(SECRET_KEY_ALIAS));
  Assert.assertTrue("Secret key mismatch",Arrays.equals(SECRET_KEY,launchCredentials.getSecretKey(SECRET_KEY_ALIAS)));
}
