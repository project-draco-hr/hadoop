{
  Server server;
  TestRpcService proxy=null;
  server=setupTestServer(myConf,-1);
  try {
    proxy=getClient(addr,myConf);
    proxy.ping(null,newEmptyRequest());
    TestProtos.EchoResponseProto echoResp=proxy.echo(null,newEchoRequest("foo"));
    assertEquals(echoResp.getMessage(),"foo");
    echoResp=proxy.echo(null,newEchoRequest(""));
    assertEquals(echoResp.getMessage(),"");
    MetricsRecordBuilder rb=getMetrics(server.rpcMetrics.name());
    assertCounter("RpcProcessingTimeNumOps",3L,rb);
    assertCounterGt("SentBytes",0L,rb);
    assertCounterGt("ReceivedBytes",0L,rb);
    rb=getMetrics(server.rpcDetailedMetrics.name());
    assertCounter("EchoNumOps",2L,rb);
    assertCounter("PingNumOps",1L,rb);
    String[] strings=new String[]{"foo","bar"};
    TestProtos.EchoRequestProto2 echoRequest2=TestProtos.EchoRequestProto2.newBuilder().addAllMessage(Arrays.asList(strings)).build();
    TestProtos.EchoResponseProto2 echoResponse2=proxy.echo2(null,echoRequest2);
    assertTrue(Arrays.equals(echoResponse2.getMessageList().toArray(),strings));
    echoRequest2=TestProtos.EchoRequestProto2.newBuilder().addAllMessage(Collections.<String>emptyList()).build();
    echoResponse2=proxy.echo2(null,echoRequest2);
    assertTrue(Arrays.equals(echoResponse2.getMessageList().toArray(),new String[]{}));
    TestProtos.AddRequestProto addRequest=TestProtos.AddRequestProto.newBuilder().setParam1(1).setParam2(2).build();
    TestProtos.AddResponseProto addResponse=proxy.add(null,addRequest);
    assertEquals(addResponse.getResult(),3);
    Integer[] integers=new Integer[]{1,2};
    TestProtos.AddRequestProto2 addRequest2=TestProtos.AddRequestProto2.newBuilder().addAllParams(Arrays.asList(integers)).build();
    addResponse=proxy.add2(null,addRequest2);
    assertEquals(addResponse.getResult(),3);
    boolean caught=false;
    try {
      proxy.error(null,newEmptyRequest());
    }
 catch (    ServiceException e) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Caught " + e);
      }
      caught=true;
    }
    assertTrue(caught);
    rb=getMetrics(server.rpcDetailedMetrics.name());
    assertCounter("RpcServerExceptionNumOps",1L,rb);
    System.out.println("Starting multi-threaded RPC test...");
    server.setSocketSendBufSize(1024);
    Thread threadId[]=new Thread[numThreads];
    for (int i=0; i < numThreads; i++) {
      Transactions trans=new Transactions(proxy,datasize);
      threadId[i]=new Thread(trans,"TransactionThread-" + i);
      threadId[i].start();
    }
    System.out.println("Waiting for all threads to finish RPCs...");
    for (int i=0; i < numThreads; i++) {
      try {
        threadId[i].join();
      }
 catch (      InterruptedException e) {
        i--;
      }
    }
  }
  finally {
    stop(server,proxy);
  }
}
