{
  Server server=new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).setNumHandlers(5).setVerbose(true).build();
  server.refreshServiceAcl(conf,new TestPolicyProvider());
  TestProtocol proxy=null;
  server.start();
  InetSocketAddress addr=NetUtils.getConnectAddress(server);
  try {
    proxy=RPC.getProxy(TestProtocol.class,TestProtocol.versionID,addr,conf);
    proxy.ping();
    if (expectFailure) {
      fail("Expect RPC.getProxy to fail with AuthorizationException!");
    }
  }
 catch (  RemoteException e) {
    if (expectFailure) {
      assertEquals("RPC error code should be UNAUTHORIZED",RpcErrorCodeProto.FATAL_UNAUTHORIZED,e.getErrorCode());
      assertTrue(e.unwrapRemoteException() instanceof AuthorizationException);
    }
 else {
      throw e;
    }
  }
 finally {
    server.stop();
    if (proxy != null) {
      RPC.stopProxy(proxy);
    }
    MetricsRecordBuilder rb=getMetrics(server.rpcMetrics.name());
    if (expectFailure) {
      assertCounter("RpcAuthorizationFailures",1L,rb);
    }
 else {
      assertCounter("RpcAuthorizationSuccesses",1L,rb);
    }
    assertCounter("RpcAuthenticationFailures",0L,rb);
    assertCounter("RpcAuthenticationSuccesses",0L,rb);
  }
}
