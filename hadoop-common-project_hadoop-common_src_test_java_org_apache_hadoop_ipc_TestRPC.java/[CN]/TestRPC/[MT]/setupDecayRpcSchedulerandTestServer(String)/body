{
  final int queueSizePerHandler=3;
  conf.setInt(CommonConfigurationKeys.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,0);
  conf.setBoolean(ns + CommonConfigurationKeys.IPC_BACKOFF_ENABLE,true);
  conf.setStrings(ns + CommonConfigurationKeys.IPC_CALLQUEUE_IMPL_KEY,"org.apache.hadoop.ipc.FairCallQueue");
  conf.setStrings(ns + CommonConfigurationKeys.IPC_SCHEDULER_IMPL_KEY,"org.apache.hadoop.ipc.DecayRpcScheduler");
  conf.setInt(ns + CommonConfigurationKeys.IPC_SCHEDULER_PRIORITY_LEVELS_KEY,2);
  conf.setBoolean(ns + DecayRpcScheduler.IPC_DECAYSCHEDULER_BACKOFF_RESPONSETIME_ENABLE_KEY,true);
  conf.set(ns + DecayRpcScheduler.IPC_DECAYSCHEDULER_BACKOFF_RESPONSETIME_THRESHOLDS_KEY,"2s, 4s");
  RPC.Builder builder=newServerBuilder(conf).setQueueSizePerHandler(queueSizePerHandler).setNumHandlers(1).setVerbose(true);
  return setupTestServer(builder);
}
