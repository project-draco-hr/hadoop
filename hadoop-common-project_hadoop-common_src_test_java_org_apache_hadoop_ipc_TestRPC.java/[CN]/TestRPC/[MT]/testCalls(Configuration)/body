{
  Server server=RPC.getServer(TestProtocol.class,new TestImpl(),ADDRESS,0,conf);
  TestProtocol proxy=null;
  try {
    server.start();
    InetSocketAddress addr=NetUtils.getConnectAddress(server);
    proxy=(TestProtocol)RPC.getProxy(TestProtocol.class,TestProtocol.versionID,addr,conf);
    proxy.ping();
    String stringResult=proxy.echo("foo");
    assertEquals(stringResult,"foo");
    stringResult=proxy.echo((String)null);
    assertEquals(stringResult,null);
    MetricsRecordBuilder rb=getMetrics(server.rpcMetrics.name());
    assertCounter("RpcProcessingTimeNumOps",3L,rb);
    assertCounterGt("SentBytes",0L,rb);
    assertCounterGt("ReceivedBytes",0L,rb);
    rb=getMetrics(server.rpcDetailedMetrics.name());
    assertCounter("EchoNumOps",2L,rb);
    assertCounter("PingNumOps",1L,rb);
    String[] stringResults=proxy.echo(new String[]{"foo","bar"});
    assertTrue(Arrays.equals(stringResults,new String[]{"foo","bar"}));
    stringResults=proxy.echo((String[])null);
    assertTrue(Arrays.equals(stringResults,null));
    UTF8 utf8Result=(UTF8)proxy.echo(new UTF8("hello world"));
    assertEquals(utf8Result,new UTF8("hello world"));
    utf8Result=(UTF8)proxy.echo((UTF8)null);
    assertEquals(utf8Result,null);
    int intResult=proxy.add(1,2);
    assertEquals(intResult,3);
    intResult=proxy.add(new int[]{1,2});
    assertEquals(intResult,3);
    EnumDescriptorProto sendProto=EnumDescriptorProto.newBuilder().setName("test").build();
    EnumDescriptorProto retProto=proxy.exchangeProto(sendProto);
    assertEquals(sendProto,retProto);
    assertNotSame(sendProto,retProto);
    boolean caught=false;
    try {
      proxy.error();
    }
 catch (    IOException e) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Caught " + e);
      }
      caught=true;
    }
    assertTrue(caught);
    proxy.testServerGet();
    System.out.println("Starting multi-threaded RPC test...");
    server.setSocketSendBufSize(1024);
    Thread threadId[]=new Thread[numThreads];
    for (int i=0; i < numThreads; i++) {
      Transactions trans=new Transactions(proxy,datasize);
      threadId[i]=new Thread(trans,"TransactionThread-" + i);
      threadId[i].start();
    }
    System.out.println("Waiting for all threads to finish RPCs...");
    for (int i=0; i < numThreads; i++) {
      try {
        threadId[i].join();
      }
 catch (      InterruptedException e) {
        i--;
      }
    }
    Method echo=TestProtocol.class.getMethod("echo",new Class[]{String.class});
    String[] strings=(String[])RPC.call(echo,new String[][]{{"a"},{"b"}},new InetSocketAddress[]{addr,addr},conf);
    assertTrue(Arrays.equals(strings,new String[]{"a","b"}));
    Method ping=TestProtocol.class.getMethod("ping",new Class[]{});
    Object[] voids=RPC.call(ping,new Object[][]{{},{}},new InetSocketAddress[]{addr,addr},conf);
    assertEquals(voids,null);
  }
  finally {
    server.stop();
    if (proxy != null)     RPC.stopProxy(proxy);
  }
}
