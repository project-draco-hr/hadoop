{
  final TestRpcService proxy;
  boolean succeeded=false;
  final int numClients=1;
  final int queueSizePerHandler=3;
  GenericTestUtils.setLogLevel(DecayRpcScheduler.LOG,Level.DEBUG);
  GenericTestUtils.setLogLevel(RPC.LOG,Level.DEBUG);
  final List<Future<Void>> res=new ArrayList<Future<Void>>();
  final ExecutorService executorService=Executors.newFixedThreadPool(numClients);
  conf.setInt(CommonConfigurationKeys.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,0);
  final String ns=CommonConfigurationKeys.IPC_NAMESPACE + ".0";
  Server server=setupDecayRpcSchedulerandTestServer(ns + ".");
  @SuppressWarnings("unchecked") CallQueueManager<Call> spy=spy((CallQueueManager<Call>)Whitebox.getInternalState(server,"callQueue"));
  Whitebox.setInternalState(server,"callQueue",spy);
  Exception lastException=null;
  proxy=getClient(addr,conf);
  MetricsRecordBuilder rb1=getMetrics("DecayRpcSchedulerMetrics2." + ns);
  final long beginCallVolume=MetricsAsserts.getLongCounter("CallVolume",rb1);
  final int beginUniqueCaller=MetricsAsserts.getIntCounter("UniqueCallers",rb1);
  try {
    for (int i=0; i < numClients; i++) {
      res.add(executorService.submit(new Callable<Void>(){
        @Override public Void call() throws ServiceException, InterruptedException {
          proxy.sleep(null,newSleepRequest(3000));
          return null;
        }
      }
));
      verify(spy,timeout(500).times(i + 1)).offer(Mockito.<Call>anyObject());
    }
    try {
      Thread.sleep(5500);
      proxy.sleep(null,newSleepRequest(100));
    }
 catch (    ServiceException e) {
      RemoteException re=(RemoteException)e.getCause();
      IOException unwrapExeption=re.unwrapRemoteException();
      if (unwrapExeption instanceof RetriableException) {
        succeeded=true;
      }
 else {
        lastException=unwrapExeption;
      }
      GenericTestUtils.waitFor(new Supplier<Boolean>(){
        @Override public Boolean get(){
          MetricsRecordBuilder rb2=getMetrics("DecayRpcSchedulerMetrics2." + ns);
          long callVolume1=MetricsAsserts.getLongCounter("CallVolume",rb2);
          int uniqueCaller1=MetricsAsserts.getIntCounter("UniqueCallers",rb2);
          long callVolumePriority0=MetricsAsserts.getLongGauge("Priority.0.CallVolume",rb2);
          long callVolumePriority1=MetricsAsserts.getLongGauge("Priority.1.CallVolume",rb2);
          double avgRespTimePriority0=MetricsAsserts.getDoubleGauge("Priority.0.AvgResponseTime",rb2);
          double avgRespTimePriority1=MetricsAsserts.getDoubleGauge("Priority.1.AvgResponseTime",rb2);
          LOG.info("CallVolume1: " + callVolume1);
          LOG.info("UniqueCaller: " + uniqueCaller1);
          LOG.info("Priority.0.CallVolume: " + callVolumePriority0);
          LOG.info("Priority.1.CallVolume: " + callVolumePriority1);
          LOG.info("Priority.0.AvgResponseTime: " + avgRespTimePriority0);
          LOG.info("Priority.1.AvgResponseTime: " + avgRespTimePriority1);
          return callVolume1 > beginCallVolume && uniqueCaller1 > beginUniqueCaller;
        }
      }
,30,60000);
    }
  }
  finally {
    executorService.shutdown();
    stop(server,proxy);
  }
  if (lastException != null) {
    LOG.error("Last received non-RetriableException:",lastException);
  }
  assertTrue("RetriableException not received",succeeded);
}
