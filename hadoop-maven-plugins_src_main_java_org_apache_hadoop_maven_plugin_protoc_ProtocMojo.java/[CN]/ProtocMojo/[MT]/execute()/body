{
  try {
    List<String> command=new ArrayList<String>();
    command.add(protocCommand);
    command.add("--version");
    Exec exec=new Exec(this);
    List<String> out=new ArrayList<String>();
    if (exec.run(command,out) == 127) {
      getLog().error("protoc, not found at: " + protocCommand);
      throw new MojoExecutionException("protoc failure");
    }
 else {
      if (out.isEmpty()) {
        getLog().error("stdout: " + out);
        throw new MojoExecutionException("'protoc --version' did not return a version");
      }
 else {
        if (!out.get(0).endsWith(protocVersion)) {
          throw new MojoExecutionException("protoc version is '" + out.get(0) + "', expected version is '"+ protocVersion+ "'");
        }
      }
    }
    if (!output.mkdirs()) {
      if (!output.exists()) {
        throw new MojoExecutionException("Could not create directory: " + output);
      }
    }
    ChecksumComparator comparator=new ChecksumComparator(checksumPath);
    boolean importsChanged=false;
    command=new ArrayList<String>();
    command.add(protocCommand);
    command.add("--java_out=" + output.getCanonicalPath());
    if (imports != null) {
      for (      File i : imports) {
        if (comparator.hasChanged(i)) {
          importsChanged=true;
        }
        command.add("-I" + i.getCanonicalPath());
      }
    }
    List<File> changedSources=new ArrayList<>();
    boolean sourcesChanged=false;
    for (    File f : FileSetUtils.convertFileSetToFiles(source)) {
      if (comparator.hasChanged(f) || importsChanged) {
        sourcesChanged=true;
        changedSources.add(f);
        command.add(f.getCanonicalPath());
      }
    }
    if (!sourcesChanged && !importsChanged) {
      getLog().info("No changes detected in protoc files, skipping " + "generation.");
    }
 else {
      if (getLog().isDebugEnabled()) {
        StringBuilder b=new StringBuilder();
        b.append("Generating classes for the following protoc files: [");
        String prefix="";
        for (        File f : changedSources) {
          b.append(prefix);
          b.append(f.toString());
          prefix=", ";
        }
        b.append("]");
        getLog().debug(b.toString());
      }
      exec=new Exec(this);
      out=new ArrayList<String>();
      List<String> err=new ArrayList<>();
      if (exec.run(command,out,err) != 0) {
        getLog().error("protoc compiler error");
        for (        String s : out) {
          getLog().error(s);
        }
        for (        String s : err) {
          getLog().error(s);
        }
        throw new MojoExecutionException("protoc failure");
      }
      comparator.writeChecksums();
    }
  }
 catch (  Throwable ex) {
    throw new MojoExecutionException(ex.toString(),ex);
  }
  project.addCompileSourceRoot(output.getAbsolutePath());
}
