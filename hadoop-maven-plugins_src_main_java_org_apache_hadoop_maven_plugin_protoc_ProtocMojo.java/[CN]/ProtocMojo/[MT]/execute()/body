{
  try {
    List<String> command=new ArrayList<String>();
    command.add(protocCommand);
    command.add("--version");
    Exec exec=new Exec(this);
    List<String> out=new ArrayList<String>();
    if (exec.run(command,out) == 127) {
      getLog().error("protoc, not found at: " + protocCommand);
      throw new MojoExecutionException("protoc failure");
    }
 else {
      if (out.isEmpty()) {
        getLog().error("stdout: " + out);
        throw new MojoExecutionException("'protoc --version' did not return a version");
      }
 else {
        if (!out.get(0).endsWith(protocVersion)) {
          throw new MojoExecutionException("protoc version is '" + out.get(0) + "', expected version is '"+ protocVersion+ "'");
        }
      }
    }
    if (!output.mkdirs()) {
      if (!output.exists()) {
        throw new MojoExecutionException("Could not create directory: " + output);
      }
    }
    command=new ArrayList<String>();
    command.add(protocCommand);
    command.add("--java_out=" + output.getCanonicalPath());
    if (imports != null) {
      for (      File i : imports) {
        command.add("-I" + i.getCanonicalPath());
      }
    }
    for (    File f : FileSetUtils.convertFileSetToFiles(source)) {
      command.add(f.getCanonicalPath());
    }
    exec=new Exec(this);
    out=new ArrayList<String>();
    if (exec.run(command,out) != 0) {
      getLog().error("protoc compiler error");
      for (      String s : out) {
        getLog().error(s);
      }
      throw new MojoExecutionException("protoc failure");
    }
  }
 catch (  Throwable ex) {
    throw new MojoExecutionException(ex.toString(),ex);
  }
  project.addCompileSourceRoot(output.getAbsolutePath());
}
