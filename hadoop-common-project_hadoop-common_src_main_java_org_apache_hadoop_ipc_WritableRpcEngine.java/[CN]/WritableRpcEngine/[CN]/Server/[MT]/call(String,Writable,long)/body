{
  try {
    Invocation call=(Invocation)param;
    if (verbose)     log("Call: " + call);
    if (call.getRpcVersion() != writableRpcVersion) {
      throw new IOException("WritableRpc version mismatch, client side version=" + call.getRpcVersion() + ", server side version="+ writableRpcVersion);
    }
    long clientVersion=call.getProtocolVersion();
    final String protoName;
    ProtoClassProtoImpl protocolImpl;
    if (call.declaringClassProtocolName.equals(VersionedProtocol.class.getName())) {
      protocolImpl=getHighestSupportedProtocol(protocolName).protocolTarget;
    }
 else {
      protoName=call.declaringClassProtocolName;
      ProtoNameVer pv=new ProtoNameVer(call.declaringClassProtocolName,clientVersion);
      protocolImpl=protocolImplMap.get(pv);
      if (protocolImpl == null) {
        VerProtocolImpl highest=getHighestSupportedProtocol(protoName);
        if (highest == null) {
          throw new IOException("Unknown protocol: " + protoName);
        }
 else {
          throw new RPC.VersionMismatch(protoName,clientVersion,highest.version);
        }
      }
    }
    long startTime=System.currentTimeMillis();
    Method method=protocolImpl.protocolClass.getMethod(call.getMethodName(),call.getParameterClasses());
    method.setAccessible(true);
    rpcDetailedMetrics.init(protocolImpl.protocolClass);
    Object value=method.invoke(protocolImpl.protocolImpl,call.getParameters());
    int processingTime=(int)(System.currentTimeMillis() - startTime);
    int qTime=(int)(startTime - receivedTime);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Served: " + call.getMethodName() + " queueTime= "+ qTime+ " procesingTime= "+ processingTime);
    }
    rpcMetrics.addRpcQueueTime(qTime);
    rpcMetrics.addRpcProcessingTime(processingTime);
    rpcDetailedMetrics.addProcessingTime(call.getMethodName(),processingTime);
    if (verbose)     log("Return: " + value);
    return new ObjectWritable(method.getReturnType(),value);
  }
 catch (  InvocationTargetException e) {
    Throwable target=e.getTargetException();
    if (target instanceof IOException) {
      throw (IOException)target;
    }
 else {
      IOException ioe=new IOException(target.toString());
      ioe.setStackTrace(target.getStackTrace());
      throw ioe;
    }
  }
catch (  Throwable e) {
    if (!(e instanceof IOException)) {
      LOG.error("Unexpected throwable object ",e);
    }
    IOException ioe=new IOException(e.toString());
    ioe.setStackTrace(e.getStackTrace());
    throw ioe;
  }
}
