{
  super(bindAddress,port,Invocation.class,numHandlers,numReaders,queueSizePerHandler,conf,classNameBase(protocolImpl.getClass().getName()),secretManager);
  this.verbose=verbose;
  Class<?>[] protocols;
  if (protocolClass == null) {
    protocols=getProtocolInterfaces(protocolImpl.getClass());
  }
 else {
    if (!protocolClass.isAssignableFrom(protocolImpl.getClass())) {
      throw new IOException("protocolClass " + protocolClass + " is not implemented by protocolImpl which is of class "+ protocolImpl.getClass());
    }
    registerProtocolAndImpl(protocolClass,protocolImpl);
    protocols=getProtocolInterfaces(protocolClass);
  }
  for (  Class<?> p : protocols) {
    if (!p.equals(VersionedProtocol.class)) {
      registerProtocolAndImpl(p,protocolImpl);
    }
  }
}
