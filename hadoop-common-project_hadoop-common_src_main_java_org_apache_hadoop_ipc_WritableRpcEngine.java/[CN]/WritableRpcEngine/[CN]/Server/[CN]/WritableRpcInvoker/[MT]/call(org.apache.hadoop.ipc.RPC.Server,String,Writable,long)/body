{
  Invocation call=(Invocation)rpcRequest;
  if (server.verbose)   log("Call: " + call);
  if (call.getRpcVersion() != writableRpcVersion) {
    throw new RpcServerException("WritableRpc version mismatch, client side version=" + call.getRpcVersion() + ", server side version="+ writableRpcVersion);
  }
  long clientVersion=call.getProtocolVersion();
  final String protoName;
  ProtoClassProtoImpl protocolImpl;
  if (call.declaringClassProtocolName.equals(VersionedProtocol.class.getName())) {
    VerProtocolImpl highest=server.getHighestSupportedProtocol(RPC.RpcKind.RPC_WRITABLE,protocolName);
    if (highest == null) {
      throw new RpcServerException("Unknown protocol: " + protocolName);
    }
    protocolImpl=highest.protocolTarget;
  }
 else {
    protoName=call.declaringClassProtocolName;
    ProtoNameVer pv=new ProtoNameVer(call.declaringClassProtocolName,clientVersion);
    protocolImpl=server.getProtocolImplMap(RPC.RpcKind.RPC_WRITABLE).get(pv);
    if (protocolImpl == null) {
      VerProtocolImpl highest=server.getHighestSupportedProtocol(RPC.RpcKind.RPC_WRITABLE,protoName);
      if (highest == null) {
        throw new RpcServerException("Unknown protocol: " + protoName);
      }
 else {
        throw new RPC.VersionMismatch(protoName,clientVersion,highest.version);
      }
    }
  }
  long startTime=Time.now();
  int qTime=(int)(startTime - receivedTime);
  Exception exception=null;
  try {
    Method method=protocolImpl.protocolClass.getMethod(call.getMethodName(),call.getParameterClasses());
    method.setAccessible(true);
    server.rpcDetailedMetrics.init(protocolImpl.protocolClass);
    Object value=method.invoke(protocolImpl.protocolImpl,call.getParameters());
    if (server.verbose)     log("Return: " + value);
    return new ObjectWritable(method.getReturnType(),value);
  }
 catch (  InvocationTargetException e) {
    Throwable target=e.getTargetException();
    if (target instanceof IOException) {
      exception=(IOException)target;
      throw (IOException)target;
    }
 else {
      IOException ioe=new IOException(target.toString());
      ioe.setStackTrace(target.getStackTrace());
      exception=ioe;
      throw ioe;
    }
  }
catch (  Throwable e) {
    if (!(e instanceof IOException)) {
      LOG.error("Unexpected throwable object ",e);
    }
    IOException ioe=new IOException(e.toString());
    ioe.setStackTrace(e.getStackTrace());
    exception=ioe;
    throw ioe;
  }
 finally {
    int processingTime=(int)(Time.now() - startTime);
    if (LOG.isDebugEnabled()) {
      String msg="Served: " + call.getMethodName() + " queueTime= "+ qTime+ " procesingTime= "+ processingTime;
      if (exception != null) {
        msg+=" exception= " + exception.getClass().getSimpleName();
      }
      LOG.debug(msg);
    }
    String detailedMetricsName=(exception == null) ? call.getMethodName() : exception.getClass().getSimpleName();
    server.updateMetrics(detailedMetricsName,qTime,processingTime);
  }
}
