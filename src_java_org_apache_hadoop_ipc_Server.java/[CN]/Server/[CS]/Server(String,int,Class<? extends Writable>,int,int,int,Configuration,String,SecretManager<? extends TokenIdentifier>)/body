{
  this.bindAddress=bindAddress;
  this.conf=conf;
  this.port=port;
  this.paramClass=paramClass;
  this.handlerCount=handlerCount;
  this.socketSendBufferSize=0;
  if (queueSizePerHandler != -1) {
    this.maxQueueSize=queueSizePerHandler;
  }
 else {
    this.maxQueueSize=handlerCount * conf.getInt(CommonConfigurationKeys.IPC_SERVER_HANDLER_QUEUE_SIZE_KEY,CommonConfigurationKeys.IPC_SERVER_HANDLER_QUEUE_SIZE_DEFAULT);
  }
  this.maxRespSize=conf.getInt(CommonConfigurationKeys.IPC_SERVER_RPC_MAX_RESPONSE_SIZE_KEY,CommonConfigurationKeys.IPC_SERVER_RPC_MAX_RESPONSE_SIZE_DEFAULT);
  if (numReaders != -1) {
    this.readThreads=numReaders;
  }
 else {
    this.readThreads=conf.getInt(CommonConfigurationKeys.IPC_SERVER_RPC_READ_THREADS_KEY,CommonConfigurationKeys.IPC_SERVER_RPC_READ_THREADS_DEFAULT);
  }
  this.callQueue=new LinkedBlockingQueue<Call>(maxQueueSize);
  this.maxIdleTime=2 * conf.getInt("ipc.client.connection.maxidletime",1000);
  this.maxConnectionsToNuke=conf.getInt("ipc.client.kill.max",10);
  this.thresholdIdleConnections=conf.getInt("ipc.client.idlethreshold",4000);
  this.secretManager=(SecretManager<TokenIdentifier>)secretManager;
  this.authorize=conf.getBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION,false);
  this.isSecurityEnabled=UserGroupInformation.isSecurityEnabled();
  listener=new Listener();
  this.port=listener.getAddress().getPort();
  this.rpcMetrics=RpcMetrics.create(this);
  this.rpcDetailedMetrics=RpcDetailedMetrics.create(this.port);
  this.tcpNoDelay=conf.getBoolean("ipc.server.tcpnodelay",false);
  responder=new Responder();
  if (isSecurityEnabled) {
    SaslRpcServer.init(conf);
  }
}
