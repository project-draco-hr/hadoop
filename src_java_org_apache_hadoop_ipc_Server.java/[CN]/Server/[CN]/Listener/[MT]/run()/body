{
  LOG.info(getName() + ": starting");
  SERVER.set(Server.this);
  while (running) {
    SelectionKey key=null;
    try {
      getSelector().select();
      Iterator<SelectionKey> iter=getSelector().selectedKeys().iterator();
      while (iter.hasNext()) {
        key=iter.next();
        iter.remove();
        try {
          if (key.isValid()) {
            if (key.isAcceptable())             doAccept(key);
          }
        }
 catch (        IOException e) {
        }
        key=null;
      }
    }
 catch (    OutOfMemoryError e) {
      LOG.warn("Out of Memory in server select",e);
      closeCurrentConnection(key,e);
      cleanupConnections(true);
      try {
        Thread.sleep(60000);
      }
 catch (      Exception ie) {
      }
    }
catch (    Exception e) {
      closeCurrentConnection(key,e);
    }
    cleanupConnections(false);
  }
  LOG.info("Stopping " + this.getName());
synchronized (this) {
    try {
      acceptChannel.close();
      selector.close();
    }
 catch (    IOException e) {
    }
    selector=null;
    acceptChannel=null;
    while (!connectionList.isEmpty()) {
      closeConnection(connectionList.remove(0));
    }
  }
}
