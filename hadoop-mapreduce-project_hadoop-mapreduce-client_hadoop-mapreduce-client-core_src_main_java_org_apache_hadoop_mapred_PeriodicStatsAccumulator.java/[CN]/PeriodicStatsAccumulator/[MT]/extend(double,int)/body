{
  if (state == null || newProgress < state.oldProgress) {
    return;
  }
  int oldIndex=(int)(state.oldProgress * count);
  int newIndex=(int)(newProgress * count);
  int originalOldValue=state.oldValue;
  double fullValueDistance=(double)newValue - state.oldValue;
  double fullProgressDistance=newProgress - state.oldProgress;
  double originalOldProgress=state.oldProgress;
  for (int closee=oldIndex; closee < newIndex; ++closee) {
    double interpolationProgress=(double)(closee + 1) / count;
    interpolationProgress=Math.min(interpolationProgress,newProgress);
    double progressLength=(interpolationProgress - originalOldProgress);
    double interpolationProportion=progressLength / fullProgressDistance;
    double interpolationValueDistance=fullValueDistance * interpolationProportion;
    int interpolationValue=(int)interpolationValueDistance + originalOldValue;
    extendInternal(interpolationProgress,interpolationValue);
    advanceState(interpolationProgress,interpolationValue);
    values[closee]=(int)state.currentAccumulation;
    initializeInterval();
  }
  extendInternal(newProgress,newValue);
  advanceState(newProgress,newValue);
  if (newIndex == count) {
    state=null;
  }
}
