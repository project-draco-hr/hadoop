{
  Resource capability=request.getCapability();
  Resource available=node.getAvailableResource();
  Container container=null;
  if (reserved) {
    container=node.getReservedContainer().getContainer();
  }
 else {
    container=createContainer(app,node,capability,request.getPriority());
  }
  if (Resources.fitsIn(capability,available)) {
    RMContainer allocatedContainer=app.allocate(type,node,request.getPriority(),request,container);
    if (allocatedContainer == null) {
      if (reserved) {
        unreserve(request.getPriority(),node);
      }
      return Resources.none();
    }
    if (reserved) {
      unreserve(request.getPriority(),node);
    }
    node.allocateContainer(app.getApplicationId(),allocatedContainer);
    if (app.getLiveContainers().size() == 1 && !app.getUnmanagedAM()) {
      queue.addAMResourceUsage(container.getResource());
    }
    return container.getResource();
  }
 else {
    reserve(request.getPriority(),node,container,reserved);
    return FairScheduler.CONTAINER_RESERVED;
  }
}
