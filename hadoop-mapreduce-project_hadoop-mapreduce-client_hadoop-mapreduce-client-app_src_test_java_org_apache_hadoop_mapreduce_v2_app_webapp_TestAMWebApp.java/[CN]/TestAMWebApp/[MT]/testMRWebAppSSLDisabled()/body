{
  MRApp app=new MRApp(2,2,true,this.getClass().getName(),true){
    @Override protected ClientService createClientService(    AppContext context){
      return new MRClientService(context);
    }
  }
;
  Configuration conf=new Configuration();
  conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY,Policy.HTTPS_ONLY.name());
  Job job=app.submit(conf);
  String hostPort=NetUtils.getHostPortString(((MRClientService)app.getClientService()).getWebApp().getListenerAddress());
  URL httpUrl=new URL("http://" + hostPort);
  HttpURLConnection conn=(HttpURLConnection)httpUrl.openConnection();
  InputStream in=conn.getInputStream();
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  IOUtils.copyBytes(in,out,1024);
  Assert.assertTrue(out.toString().contains("MapReduce Application"));
  URL httpsUrl=new URL("https://" + hostPort);
  try {
    HttpURLConnection httpsConn=(HttpURLConnection)httpsUrl.openConnection();
    httpsConn.getInputStream();
    Assert.fail("https:// is not accessible, expected to fail");
  }
 catch (  Exception e) {
    Assert.assertTrue(e instanceof SSLException);
  }
  app.waitForState(job,JobState.SUCCEEDED);
  app.verifyCompleted();
}
