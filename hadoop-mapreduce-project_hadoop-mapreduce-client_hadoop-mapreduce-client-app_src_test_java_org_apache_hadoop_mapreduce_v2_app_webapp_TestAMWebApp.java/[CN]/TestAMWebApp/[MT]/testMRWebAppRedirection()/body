{
  String[] schemePrefix={WebAppUtils.HTTP_PREFIX,WebAppUtils.HTTPS_PREFIX};
  for (  String scheme : schemePrefix) {
    MRApp app=new MRApp(2,2,true,this.getClass().getName(),true){
      @Override protected ClientService createClientService(      AppContext context){
        return new MRClientService(context);
      }
    }
;
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.PROXY_ADDRESS,"9.9.9.9");
    conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY,scheme.equals(WebAppUtils.HTTPS_PREFIX) ? Policy.HTTPS_ONLY.name() : Policy.HTTP_ONLY.name());
    webProxyBase="/proxy/" + app.getAppID();
    conf.set("hadoop.http.filter.initializers",TestAMFilterInitializer.class.getName());
    Job job=app.submit(conf);
    String hostPort=NetUtils.getHostPortString(((MRClientService)app.getClientService()).getWebApp().getListenerAddress());
    URL httpUrl=new URL("http://" + hostPort + "/mapreduce");
    HttpURLConnection conn=(HttpURLConnection)httpUrl.openConnection();
    conn.setInstanceFollowRedirects(false);
    conn.connect();
    String expectedURL=scheme + conf.get(YarnConfiguration.PROXY_ADDRESS) + ProxyUriUtils.getPath(app.getAppID(),"/mapreduce");
    Assert.assertEquals(expectedURL,conn.getHeaderField(HttpHeaders.LOCATION));
    Assert.assertEquals(HttpStatus.SC_MOVED_TEMPORARILY,conn.getResponseCode());
    app.waitForState(job,JobState.SUCCEEDED);
    app.verifyCompleted();
  }
}
