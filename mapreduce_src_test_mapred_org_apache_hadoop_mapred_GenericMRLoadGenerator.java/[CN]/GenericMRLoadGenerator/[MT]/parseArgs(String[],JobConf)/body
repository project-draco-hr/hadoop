{
  if (argv.length < 1) {
    return 0 == printUsage();
  }
  for (int i=0; i < argv.length; ++i) {
    if (argv.length == i + 1) {
      System.out.println("ERROR: Required parameter missing from " + argv[i]);
      return 0 == printUsage();
    }
    try {
      if ("-m".equals(argv[i])) {
        job.setNumMapTasks(Integer.parseInt(argv[++i]));
      }
 else       if ("-r".equals(argv[i])) {
        job.setNumReduceTasks(Integer.parseInt(argv[++i]));
      }
 else       if ("-inFormat".equals(argv[i])) {
        job.setInputFormat(Class.forName(argv[++i]).asSubclass(InputFormat.class));
      }
 else       if ("-outFormat".equals(argv[i])) {
        job.setOutputFormat(Class.forName(argv[++i]).asSubclass(OutputFormat.class));
      }
 else       if ("-outKey".equals(argv[i])) {
        job.setOutputKeyClass(Class.forName(argv[++i]).asSubclass(WritableComparable.class));
      }
 else       if ("-outValue".equals(argv[i])) {
        job.setOutputValueClass(Class.forName(argv[++i]).asSubclass(Writable.class));
      }
 else       if ("-keepmap".equals(argv[i])) {
        job.set(org.apache.hadoop.mapreduce.GenericMRLoadGenerator.MAP_PRESERVE_PERCENT,argv[++i]);
      }
 else       if ("-keepred".equals(argv[i])) {
        job.set(org.apache.hadoop.mapreduce.GenericMRLoadGenerator.REDUCE_PRESERVE_PERCENT,argv[++i]);
      }
 else       if ("-outdir".equals(argv[i])) {
        FileOutputFormat.setOutputPath(job,new Path(argv[++i]));
      }
 else       if ("-indir".equals(argv[i])) {
        FileInputFormat.addInputPaths(job,argv[++i]);
      }
 else       if ("-inFormatIndirect".equals(argv[i])) {
        job.setClass(org.apache.hadoop.mapreduce.GenericMRLoadGenerator.INDIRECT_INPUT_FORMAT,Class.forName(argv[++i]).asSubclass(InputFormat.class),InputFormat.class);
        job.setInputFormat(IndirectInputFormat.class);
      }
 else {
        System.out.println("Unexpected argument: " + argv[i]);
        return 0 == printUsage();
      }
    }
 catch (    NumberFormatException except) {
      System.out.println("ERROR: Integer expected instead of " + argv[i]);
      return 0 == printUsage();
    }
catch (    Exception e) {
      throw (IOException)new IOException().initCause(e);
    }
  }
  return true;
}
