{
  bufferRemaining-=len;
  if (bufferRemaining <= 0) {
    boolean blockwrite=false;
    spillLock.lock();
    try {
      do {
        checkSpillException();
        final int kvbidx=4 * kvindex;
        final int kvbend=4 * kvend;
        final int distkvi=distanceTo(bufindex,kvbidx);
        final int distkve=distanceTo(bufindex,kvbend);
        blockwrite=distkvi <= distkve ? distkvi <= len + 2 * METASIZE : distkve <= len || distanceTo(bufend,kvbidx) < 2 * METASIZE;
        if (!spillInProgress) {
          if (blockwrite) {
            if ((kvbend + METASIZE) % kvbuffer.length != equator - (equator % METASIZE)) {
              resetSpill();
              bufferRemaining=Math.min(distkvi - 2 * METASIZE,softLimit - distanceTo(kvbidx,bufindex)) - len;
              continue;
            }
            if (kvindex != kvend) {
              startSpill();
              setEquator(bufmark);
            }
 else {
              final int size=distanceTo(bufstart,bufindex) + len;
              setEquator(0);
              bufstart=bufend=bufindex=equator;
              kvstart=kvend=kvindex;
              bufvoid=kvbuffer.length;
              throw new MapBufferTooSmallException(size + " bytes");
            }
          }
        }
        if (blockwrite) {
          try {
            while (spillInProgress) {
              reporter.progress();
              spillDone.await();
            }
          }
 catch (          InterruptedException e) {
            throw new IOException("Buffer interrupted while waiting for the writer",e);
          }
        }
      }
 while (blockwrite);
    }
  finally {
      spillLock.unlock();
    }
  }
  if (bufindex + len > bufvoid) {
    final int gaplen=bufvoid - bufindex;
    System.arraycopy(b,off,kvbuffer,bufindex,gaplen);
    len-=gaplen;
    off+=gaplen;
    bufindex=0;
  }
  System.arraycopy(b,off,kvbuffer,bufindex,len);
  bufindex+=len;
}
