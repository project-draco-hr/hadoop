{
  TimelineFilterList irt=new TimelineFilterList(Operator.OR);
  irt.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"task",new HashSet<Object>(Arrays.asList("relatedto1"))));
  irt.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"task2",new HashSet<Object>(Arrays.asList("relatedto4"))));
  Set<TimelineEntity> entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,null,irt,null,null,null,null),new TimelineDataToRetrieve(null,null,EnumSet.of(Field.ALL),null));
  assertEquals(2,entities.size());
  int isRelatedToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    isRelatedToCnt+=timelineEntity.getIsRelatedToEntities().size();
    if (!timelineEntity.getId().equals("hello") && !timelineEntity.getId().equals("hello1")) {
      Assert.fail("Entity ids' should have been hello and hello1");
    }
  }
  assertEquals(3,isRelatedToCnt);
  TimelineFilterList irt1=new TimelineFilterList();
  irt1.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"task1",new HashSet<Object>(Arrays.asList("relatedto3"))));
  irt1.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL,"task1",new HashSet<Object>(Arrays.asList("relatedto5"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,null,irt1,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(1,entities.size());
  isRelatedToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    isRelatedToCnt+=timelineEntity.getIsRelatedToEntities().size();
    if (!timelineEntity.getId().equals("hello2")) {
      Assert.fail("Entity id should have been hello2");
    }
  }
  assertEquals(0,isRelatedToCnt);
  TimelineFilterList irt2=new TimelineFilterList(Operator.OR);
  irt2.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"task",new HashSet<Object>(Arrays.asList("relatedto1"))));
  irt2.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"task2",new HashSet<Object>(Arrays.asList("relatedto4"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,null,irt2,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(2,entities.size());
  isRelatedToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    isRelatedToCnt+=timelineEntity.getIsRelatedToEntities().size();
    if (!timelineEntity.getId().equals("hello") && !timelineEntity.getId().equals("hello1")) {
      Assert.fail("Entity ids' should have been hello and hello1");
    }
  }
  assertEquals(0,isRelatedToCnt);
  TimelineFilterList irt3=new TimelineFilterList();
  irt3.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"task1",new HashSet<Object>(Arrays.asList("relatedto3","relatedto5"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,null,irt3,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(1,entities.size());
  isRelatedToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    isRelatedToCnt+=timelineEntity.getIsRelatedToEntities().size();
    if (!timelineEntity.getId().equals("hello1")) {
      Assert.fail("Entity id should have been hello1");
    }
  }
  assertEquals(0,isRelatedToCnt);
  TimelineFilterList irt4=new TimelineFilterList();
  irt4.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"task1",new HashSet<Object>(Arrays.asList("relatedto3"))));
  irt4.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"dummy_task",new HashSet<Object>(Arrays.asList("relatedto5"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,null,irt4,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(0,entities.size());
  TimelineFilterList irt5=new TimelineFilterList();
  irt5.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"task1",new HashSet<Object>(Arrays.asList("relatedto3","relatedto7"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,null,irt5,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(0,entities.size());
  TimelineFilterList list1=new TimelineFilterList();
  list1.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"task",new HashSet<Object>(Arrays.asList("relatedto1"))));
  list1.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"dummy_task",new HashSet<Object>(Arrays.asList("relatedto4"))));
  TimelineFilterList list2=new TimelineFilterList();
  list2.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"task2",new HashSet<Object>(Arrays.asList("relatedto4"))));
  TimelineFilterList irt6=new TimelineFilterList(Operator.OR,list1,list2);
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,null,irt6,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(1,entities.size());
  isRelatedToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    isRelatedToCnt+=timelineEntity.getIsRelatedToEntities().size();
    if (!timelineEntity.getId().equals("hello1")) {
      Assert.fail("Entity id should have been hello1");
    }
  }
  assertEquals(0,isRelatedToCnt);
}
