{
  TimelineFilterList rt=new TimelineFilterList(Operator.OR);
  rt.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container2",new HashSet<Object>(Arrays.asList("relatesto7"))));
  rt.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container1",new HashSet<Object>(Arrays.asList("relatesto4"))));
  Set<TimelineEntity> entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,rt,null,null,null,null,null),new TimelineDataToRetrieve(null,null,EnumSet.of(Field.ALL)));
  assertEquals(2,entities.size());
  int relatesToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    relatesToCnt+=timelineEntity.getRelatesToEntities().size();
    if (!timelineEntity.getId().equals("hello") && !timelineEntity.getId().equals("hello2")) {
      Assert.fail("Entity ids' should have been hello and hello2");
    }
  }
  assertEquals(3,relatesToCnt);
  TimelineFilterList rt1=new TimelineFilterList();
  rt1.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container",new HashSet<Object>(Arrays.asList("relatesto1"))));
  rt1.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL,"container",new HashSet<Object>(Arrays.asList("relatesto3"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,rt1,null,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(1,entities.size());
  relatesToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    relatesToCnt+=timelineEntity.getRelatesToEntities().size();
    if (!timelineEntity.getId().equals("hello1")) {
      Assert.fail("Entity id should have been hello1");
    }
  }
  assertEquals(0,relatesToCnt);
  TimelineFilterList rt2=new TimelineFilterList(Operator.OR);
  rt2.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container2",new HashSet<Object>(Arrays.asList("relatesto7"))));
  rt2.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container1",new HashSet<Object>(Arrays.asList("relatesto4"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,rt2,null,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(2,entities.size());
  relatesToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    relatesToCnt+=timelineEntity.getRelatesToEntities().size();
    if (!timelineEntity.getId().equals("hello") && !timelineEntity.getId().equals("hello2")) {
      Assert.fail("Entity ids' should have been hello and hello2");
    }
  }
  assertEquals(0,relatesToCnt);
  TimelineFilterList rt3=new TimelineFilterList();
  rt3.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container",new HashSet<Object>(Arrays.asList("relatesto1","relatesto3"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,rt3,null,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(1,entities.size());
  relatesToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    relatesToCnt+=timelineEntity.getRelatesToEntities().size();
    if (!timelineEntity.getId().equals("hello")) {
      Assert.fail("Entity id should have been hello");
    }
  }
  assertEquals(0,relatesToCnt);
  TimelineFilterList rt4=new TimelineFilterList();
  rt4.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container",new HashSet<Object>(Arrays.asList("relatesto1"))));
  rt4.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"dummy_container",new HashSet<Object>(Arrays.asList("relatesto5"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,rt4,null,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(0,entities.size());
  TimelineFilterList rt5=new TimelineFilterList();
  rt5.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container",new HashSet<Object>(Arrays.asList("relatedto1","relatesto8"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,rt5,null,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(0,entities.size());
  TimelineFilterList list1=new TimelineFilterList();
  list1.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container2",new HashSet<Object>(Arrays.asList("relatesto7"))));
  list1.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"dummy_container",new HashSet<Object>(Arrays.asList("relatesto4"))));
  TimelineFilterList list2=new TimelineFilterList();
  list2.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container1",new HashSet<Object>(Arrays.asList("relatesto4"))));
  TimelineFilterList rt6=new TimelineFilterList(Operator.OR,list1,list2);
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,rt6,null,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(1,entities.size());
  relatesToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    relatesToCnt+=timelineEntity.getRelatesToEntities().size();
    if (!timelineEntity.getId().equals("hello")) {
      Assert.fail("Entity id should have been hello");
    }
  }
  assertEquals(0,relatesToCnt);
  TimelineFilterList list3=new TimelineFilterList();
  list3.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container",new HashSet<Object>(Arrays.asList("relatesto1"))));
  list3.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container1",new HashSet<Object>(Arrays.asList("relatesto4"))));
  TimelineFilterList list4=new TimelineFilterList();
  list4.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container",new HashSet<Object>(Arrays.asList("relatesto1"))));
  list4.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"container",new HashSet<Object>(Arrays.asList("relatesto2"))));
  TimelineFilterList combinedList=new TimelineFilterList(Operator.OR,list3,list4);
  TimelineFilterList rt7=new TimelineFilterList(Operator.AND,combinedList,new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL,"container",new HashSet<Object>(Arrays.asList("relatesto3"))));
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,"application_1231111111_1111","world",null),new TimelineEntityFilters(null,null,null,rt7,null,null,null,null,null),new TimelineDataToRetrieve());
  assertEquals(1,entities.size());
  relatesToCnt=0;
  for (  TimelineEntity timelineEntity : entities) {
    relatesToCnt+=timelineEntity.getRelatesToEntities().size();
    if (!timelineEntity.getId().equals("hello1")) {
      Assert.fail("Entity id should have been hello1");
    }
  }
  assertEquals(0,relatesToCnt);
}
