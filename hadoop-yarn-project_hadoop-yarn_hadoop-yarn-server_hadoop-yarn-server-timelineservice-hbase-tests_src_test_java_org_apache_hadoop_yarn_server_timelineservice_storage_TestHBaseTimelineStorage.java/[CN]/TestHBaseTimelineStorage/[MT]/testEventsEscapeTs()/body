{
  TimelineEvent event=new TimelineEvent();
  String eventId=ApplicationMetricsConstants.CREATED_EVENT_TYPE;
  event.setId(eventId);
  long expTs=1463567041056L;
  event.setTimestamp(expTs);
  String expKey="f==o o_e ve\tnt";
  Object expVal="test";
  event.addInfo(expKey,expVal);
  final TimelineEntity entity=new ApplicationEntity();
  entity.setId(ApplicationId.newInstance(0,1).toString());
  entity.addEvent(event);
  TimelineEntities entities=new TimelineEntities();
  entities.addEntity(entity);
  HBaseTimelineWriterImpl hbi=null;
  try {
    Configuration c1=util.getConfiguration();
    hbi=new HBaseTimelineWriterImpl(c1);
    hbi.init(c1);
    hbi.start();
    String cluster="clus!ter_\ttest_ev  ents";
    String user="user2";
    String flow="other_flow_name";
    String flowVersion="1111F01C2287BA";
    long runid=1009876543218L;
    String appName="application_123465899910_2001";
    hbi.write(cluster,user,flow,flowVersion,runid,appName,entities);
    hbi.stop();
    TimelineEntity e1=reader.getEntity(new TimelineReaderContext(cluster,user,flow,runid,appName,entity.getType(),entity.getId()),new TimelineDataToRetrieve(null,null,EnumSet.of(Field.ALL)));
    assertNotNull(e1);
    NavigableSet<TimelineEvent> events=e1.getEvents();
    assertEquals(1,events.size());
    for (    TimelineEvent e : events) {
      assertEquals(eventId,e.getId());
      assertEquals(expTs,e.getTimestamp());
      Map<String,Object> info=e.getInfo();
      assertEquals(1,info.size());
      for (      Map.Entry<String,Object> infoEntry : info.entrySet()) {
        assertEquals(expKey,infoEntry.getKey());
        assertEquals(expVal,infoEntry.getValue());
      }
    }
  }
  finally {
    if (hbi != null) {
      hbi.stop();
      hbi.close();
    }
  }
}
