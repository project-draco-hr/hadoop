{
  TimelineFilterList list=new TimelineFilterList(Operator.OR,new TimelinePrefixFilter(TimelineCompareOp.EQUAL,"MAP1_"));
  TimelineFilterList metricFilterList=new TimelineFilterList();
  metricFilterList.addFilter(new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL,"MAP1_SLOT_MILLIS",0L));
  Set<TimelineEntity> entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,null,TimelineEntityType.YARN_APPLICATION.toString(),null),new TimelineEntityFilters(null,null,null,null,null,null,null,metricFilterList,null),new TimelineDataToRetrieve(null,list,null,null));
  int metricCnt=0;
  assertEquals(1,entities.size());
  for (  TimelineEntity entity : entities) {
    metricCnt+=entity.getMetrics().size();
  }
  assertEquals(1,metricCnt);
  TimelineFilterList list1=new TimelineFilterList();
  list1.addFilter(new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL,"MAP1_SLOT_MILLIS",50000000900L));
  TimelineFilterList list2=new TimelineFilterList();
  list2.addFilter(new TimelineCompareFilter(TimelineCompareOp.LESS_THAN,"MAP_SLOT_MILLIS",80000000000L));
  list2.addFilter(new TimelineCompareFilter(TimelineCompareOp.EQUAL,"MAP1_BYTES",50));
  TimelineFilterList metricsToRetrieve=new TimelineFilterList(Operator.OR,new TimelinePrefixFilter(TimelineCompareOp.EQUAL,"MAP1_"));
  TimelineFilterList metricFilterList1=new TimelineFilterList(Operator.OR,list1,list2);
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,null,TimelineEntityType.YARN_APPLICATION.toString(),null),new TimelineEntityFilters(null,null,null,null,null,null,null,metricFilterList1,null),new TimelineDataToRetrieve(null,metricsToRetrieve,null,null));
  metricCnt=0;
  assertEquals(2,entities.size());
  for (  TimelineEntity entity : entities) {
    metricCnt+=entity.getMetrics().size();
    for (    TimelineMetric metric : entity.getMetrics()) {
      assertTrue("Metric Id returned should start with MAP1_",metric.getId().startsWith("MAP1_"));
    }
  }
  assertEquals(2,metricCnt);
  entities=reader.getEntities(new TimelineReaderContext("cluster1","user1","some_flow_name",1002345678919L,null,TimelineEntityType.YARN_APPLICATION.toString(),null),new TimelineEntityFilters(null,null,null,null,null,null,null,metricFilterList1,null),new TimelineDataToRetrieve(null,metricsToRetrieve,EnumSet.of(Field.METRICS),Integer.MAX_VALUE));
  metricCnt=0;
  int metricValCnt=0;
  assertEquals(2,entities.size());
  for (  TimelineEntity entity : entities) {
    metricCnt+=entity.getMetrics().size();
    for (    TimelineMetric metric : entity.getMetrics()) {
      metricValCnt+=metric.getValues().size();
      assertTrue("Metric Id returned should start with MAP1_",metric.getId().startsWith("MAP1_"));
    }
  }
  assertEquals(2,metricCnt);
  assertEquals(7,metricValCnt);
}
