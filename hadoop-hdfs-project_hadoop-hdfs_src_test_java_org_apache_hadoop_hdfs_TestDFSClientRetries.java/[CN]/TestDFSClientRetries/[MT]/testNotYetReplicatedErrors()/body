{
  final String exceptionMsg="Nope, not replicated yet...";
  final int maxRetries=1;
  conf.setInt(DFSConfigKeys.DFS_CLIENT_BLOCK_WRITE_LOCATEFOLLOWINGBLOCK_RETRIES_KEY,maxRetries);
  NamenodeProtocols mockNN=mock(NamenodeProtocols.class);
  Answer<Object> answer=new ThrowsException(new IOException()){
    int retryCount=0;
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      retryCount++;
      System.out.println("addBlock has been called " + retryCount + " times");
      if (retryCount > maxRetries + 1)       throw new IOException("Retried too many times: " + retryCount);
 else       throw new RemoteException(NotReplicatedYetException.class.getName(),exceptionMsg);
    }
  }
;
  when(mockNN.addBlock(anyString(),anyString(),any(ExtendedBlock.class),any(DatanodeInfo[].class),anyLong(),any(String[].class))).thenAnswer(answer);
  Mockito.doReturn(new HdfsFileStatus(0,false,1,1024,0,0,new FsPermission((short)777),"owner","group",new byte[0],new byte[0],1010)).when(mockNN).getFileInfo(anyString());
  Mockito.doReturn(new HdfsFileStatus(0,false,1,1024,0,0,new FsPermission((short)777),"owner","group",new byte[0],new byte[0],1010)).when(mockNN).create(anyString(),(FsPermission)anyObject(),anyString(),(EnumSetWritable<CreateFlag>)anyObject(),anyBoolean(),anyShort(),anyLong());
  final DFSClient client=new DFSClient(null,mockNN,conf,null);
  OutputStream os=client.create("testfile",true);
  os.write(20);
  try {
    os.close();
  }
 catch (  Exception e) {
    assertTrue("Retries are not being stopped correctly: " + e.getMessage(),e.getMessage().equals(exceptionMsg));
  }
}
