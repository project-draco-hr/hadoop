{
  String file1="/testFile1";
  String file2="/testFile2";
  conf.setInt(DFSConfigKeys.DFS_CLIENT_RETRY_WINDOW_BASE,10);
  conf.setInt(DFS_CLIENT_SOCKET_TIMEOUT_KEY,2 * 1000);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  try {
    cluster.waitActive();
    NamenodeProtocols spyNN=spy(cluster.getNameNodeRpc());
    Mockito.doThrow(new SocketTimeoutException()).when(spyNN).renewLease(Mockito.anyString());
    DFSClient client=new DFSClient(null,spyNN,conf,null);
    LeaseRenewer leaseRenewer=client.getLeaseRenewer();
    leaseRenewer.setRenewalTime(100);
    OutputStream out1=client.create(file1,false);
    Mockito.verify(spyNN,timeout(10000).times(1)).renewLease(Mockito.anyString());
    verifyEmptyLease(leaseRenewer);
    try {
      out1.write(new byte[256]);
      fail("existing output stream should be aborted");
    }
 catch (    IOException e) {
    }
    client.exists(file2);
    Mockito.doNothing().when(spyNN).renewLease(Mockito.anyString());
    leaseRenewer=client.getLeaseRenewer();
    leaseRenewer.setRenewalTime(100);
    OutputStream out2=client.create(file2,false);
    Mockito.verify(spyNN,timeout(10000).times(2)).renewLease(Mockito.anyString());
    out2.write(new byte[256]);
    out2.close();
    verifyEmptyLease(leaseRenewer);
  }
  finally {
    cluster.shutdown();
  }
}
