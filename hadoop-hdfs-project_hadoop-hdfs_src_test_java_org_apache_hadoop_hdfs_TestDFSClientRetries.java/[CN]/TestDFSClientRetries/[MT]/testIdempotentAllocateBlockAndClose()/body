{
  final String src="/testIdempotentAllocateBlock";
  Path file=new Path(src);
  conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,4096);
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  try {
    cluster.waitActive();
    FileSystem fs=cluster.getFileSystem();
    NamenodeProtocols preSpyNN=cluster.getNameNodeRpc();
    NamenodeProtocols spyNN=spy(preSpyNN);
    DFSClient client=new DFSClient(null,spyNN,conf,null);
    doAnswer(new Answer<LocatedBlock>(){
      @Override public LocatedBlock answer(      InvocationOnMock invocation) throws Throwable {
        LocatedBlock ret=(LocatedBlock)invocation.callRealMethod();
        LocatedBlocks lb=cluster.getNameNodeRpc().getBlockLocations(src,0,Long.MAX_VALUE);
        int blockCount=lb.getLocatedBlocks().size();
        assertEquals(lb.getLastLocatedBlock().getBlock(),ret.getBlock());
        LocatedBlock ret2=(LocatedBlock)invocation.callRealMethod();
        lb=cluster.getNameNodeRpc().getBlockLocations(src,0,Long.MAX_VALUE);
        int blockCount2=lb.getLocatedBlocks().size();
        assertEquals(lb.getLastLocatedBlock().getBlock(),ret2.getBlock());
        assertEquals(blockCount,blockCount2);
        return ret2;
      }
    }
).when(spyNN).addBlock(Mockito.anyString(),Mockito.anyString(),Mockito.<ExtendedBlock>any(),Mockito.<DatanodeInfo[]>any(),Mockito.anyLong());
    doAnswer(new Answer<Boolean>(){
      @Override public Boolean answer(      InvocationOnMock invocation) throws Throwable {
        LOG.info("Called complete(: " + Joiner.on(",").join(invocation.getArguments()) + ")");
        if (!(Boolean)invocation.callRealMethod()) {
          LOG.info("Complete call returned false, not faking a retry RPC");
          return false;
        }
        try {
          boolean ret=(Boolean)invocation.callRealMethod();
          LOG.info("Complete call returned true, faked second RPC. " + "Returned: " + ret);
          return ret;
        }
 catch (        Throwable t) {
          LOG.error("Idempotent retry threw exception",t);
          throw t;
        }
      }
    }
).when(spyNN).complete(Mockito.anyString(),Mockito.anyString(),Mockito.<ExtendedBlock>any());
    OutputStream stm=client.create(file.toString(),true);
    try {
      AppendTestUtil.write(stm,0,10000);
      stm.close();
      stm=null;
    }
  finally {
      IOUtils.cleanup(LOG,stm);
    }
    Mockito.verify(spyNN,Mockito.atLeastOnce()).addBlock(Mockito.anyString(),Mockito.anyString(),Mockito.<ExtendedBlock>any(),Mockito.<DatanodeInfo[]>any(),Mockito.anyLong());
    Mockito.verify(spyNN,Mockito.atLeastOnce()).complete(Mockito.anyString(),Mockito.anyString(),Mockito.<ExtendedBlock>any());
    AppendTestUtil.check(fs,file,10000);
  }
  finally {
    cluster.shutdown();
  }
}
