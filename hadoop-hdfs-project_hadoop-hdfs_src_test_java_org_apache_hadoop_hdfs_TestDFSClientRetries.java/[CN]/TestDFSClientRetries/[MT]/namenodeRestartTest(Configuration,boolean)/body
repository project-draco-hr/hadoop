{
  ((Log4JLogger)DFSClient.LOG).getLogger().setLevel(Level.ALL);
  final List<Exception> exceptions=new ArrayList<Exception>();
  final Path dir=new Path("/testNamenodeRestart");
  conf.setBoolean(DFSConfigKeys.DFS_CLIENT_RETRY_POLICY_ENABLED_KEY,true);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_MIN_DATANODES_KEY,1);
  conf.setInt(MiniDFSCluster.DFS_NAMENODE_SAFEMODE_EXTENSION_TESTING_KEY,5000);
  final short numDatanodes=3;
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build();
  try {
    cluster.waitActive();
    final DistributedFileSystem dfs=cluster.getFileSystem();
    final FileSystem fs=isWebHDFS ? WebHdfsTestUtil.getWebHdfsFileSystem(conf) : dfs;
    final URI uri=dfs.getUri();
    assertTrue(HdfsUtils.isHealthy(uri));
    final long length=1L << 20;
    final Path file1=new Path(dir,"foo");
    DFSTestUtil.createFile(fs,file1,length,numDatanodes,20120406L);
    final FileStatus s1=fs.getFileStatus(file1);
    assertEquals(length,s1.getLen());
    final Path file4=new Path(dir,"file4");
    final FSDataOutputStream out4=fs.create(file4,false,4096,fs.getDefaultReplication(file4),1024L,null);
    final byte[] bytes=new byte[1000];
    new Random().nextBytes(bytes);
    out4.write(bytes);
    out4.write(bytes);
    if (isWebHDFS) {
      out4.close();
    }
 else {
      out4.hflush();
    }
    assertTrue(HdfsUtils.isHealthy(uri));
    cluster.shutdownNameNode(0);
    assertFalse(HdfsUtils.isHealthy(uri));
    final Thread file4thread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          if (!isWebHDFS) {
            out4.write(bytes);
            out4.write(bytes);
            out4.write(bytes);
            out4.close();
          }
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
      }
    }
);
    file4thread.start();
    final Thread reader=new Thread(new Runnable(){
      @Override public void run(){
        try {
          final FileSystem fs=createFsWithDifferentUsername(conf,isWebHDFS);
          final FSDataInputStream in=fs.open(file1);
          int count=0;
          for (; in.read() != -1; count++)           ;
          in.close();
          assertEquals(s1.getLen(),count);
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
      }
    }
);
    reader.start();
    final Path file3=new Path(dir,"file");
    final Thread thread=new Thread(new Runnable(){
      @Override public void run(){
        try {
          final FileSystem fs=createFsWithDifferentUsername(conf,isWebHDFS);
          DFSTestUtil.createFile(fs,file3,length,numDatanodes,20120406L);
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
      }
    }
);
    thread.start();
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          TimeUnit.SECONDS.sleep(30);
          assertFalse(HdfsUtils.isHealthy(uri));
          cluster.restartNameNode(0,false);
          cluster.waitActive();
          assertTrue(HdfsUtils.isHealthy(uri));
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
      }
    }
).start();
    final FileStatus s2=fs.getFileStatus(file1);
    assertEquals(s1,s2);
    thread.join();
    assertEmpty(exceptions);
    assertEquals(s1.getLen(),fs.getFileStatus(file3).getLen());
    assertEquals(fs.getFileChecksum(file1),fs.getFileChecksum(file3));
    reader.join();
    assertEmpty(exceptions);
    file4thread.join();
    assertEmpty(exceptions);
{
      final FSDataInputStream in=fs.open(file4);
      int count=0;
      for (int r; (r=in.read()) != -1; count++) {
        Assert.assertEquals(String.format("count=%d",count),bytes[count % bytes.length],(byte)r);
      }
      if (!isWebHDFS) {
        Assert.assertEquals(5 * bytes.length,count);
      }
 else {
        Assert.assertEquals(2 * bytes.length,count);
      }
      in.close();
    }
    assertTrue(HdfsUtils.isHealthy(uri));
    dfs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
    assertFalse(HdfsUtils.isHealthy(uri));
    new Thread(new Runnable(){
      @Override public void run(){
        try {
          TimeUnit.SECONDS.sleep(30);
          assertFalse(HdfsUtils.isHealthy(uri));
          dfs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
          assertTrue(HdfsUtils.isHealthy(uri));
        }
 catch (        Exception e) {
          exceptions.add(e);
        }
      }
    }
).start();
    final Path file2=new Path(dir,"bar");
    DFSTestUtil.createFile(fs,file2,length,numDatanodes,20120406L);
    assertEquals(fs.getFileChecksum(file1),fs.getFileChecksum(file2));
    assertTrue(HdfsUtils.isHealthy(uri));
    final Path nonExisting=new Path(dir,"nonExisting");
    LOG.info("setPermission: " + nonExisting);
    try {
      fs.setPermission(nonExisting,new FsPermission((short)0));
      fail();
    }
 catch (    FileNotFoundException fnfe) {
      LOG.info("GOOD!",fnfe);
    }
    assertEmpty(exceptions);
  }
  finally {
    cluster.shutdown();
  }
}
