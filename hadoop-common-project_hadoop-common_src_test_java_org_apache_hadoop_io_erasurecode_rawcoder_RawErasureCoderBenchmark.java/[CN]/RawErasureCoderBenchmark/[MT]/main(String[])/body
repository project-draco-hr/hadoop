{
  String opType=null;
  int coderIndex=0;
  int dataSizeMB=10240;
  int chunkSizeKB=1024;
  int numThreads=1;
  if (args.length > 1) {
    opType=args[0];
    if (!"encode".equals(opType) && !"decode".equals(opType)) {
      usage("Invalid type: should be either 'encode' or 'decode'");
    }
    try {
      coderIndex=Integer.parseInt(args[1]);
      if (coderIndex < 0 || coderIndex >= CODER.values().length) {
        usage("Invalid coder index, should be [0-" + (CODER.values().length - 1) + "]");
      }
    }
 catch (    NumberFormatException e) {
      usage("Malformed coder index, " + e.getMessage());
    }
  }
 else {
    usage(null);
  }
  if (args.length > 2) {
    try {
      numThreads=Integer.parseInt(args[2]);
      if (numThreads <= 0) {
        usage("Invalid number of threads.");
      }
    }
 catch (    NumberFormatException e) {
      usage("Malformed number of threads, " + e.getMessage());
    }
  }
  if (args.length > 3) {
    try {
      dataSizeMB=Integer.parseInt(args[3]);
      if (dataSizeMB <= 0) {
        usage("Invalid data size.");
      }
    }
 catch (    NumberFormatException e) {
      usage("Malformed data size, " + e.getMessage());
    }
  }
  if (args.length > 4) {
    try {
      chunkSizeKB=Integer.parseInt(args[4]);
      if (chunkSizeKB <= 0) {
        usage("Chunk size should be positive.");
      }
      if (chunkSizeKB > MAX_CHUNK_SIZE) {
        usage("Chunk size should be no larger than " + MAX_CHUNK_SIZE);
      }
    }
 catch (    NumberFormatException e) {
      usage("Malformed chunk size, " + e.getMessage());
    }
  }
  performBench(opType,CODER.values()[coderIndex],numThreads,dataSizeMB,chunkSizeKB);
}
