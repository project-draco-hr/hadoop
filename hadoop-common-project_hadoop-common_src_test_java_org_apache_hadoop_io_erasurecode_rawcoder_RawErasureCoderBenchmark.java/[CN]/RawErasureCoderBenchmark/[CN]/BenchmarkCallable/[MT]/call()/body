{
  long rounds=BenchData.totalDataSizeKB / BenchData.bufferSizeKB;
  StopWatch sw=new StopWatch().start();
  for (long i=0; i < rounds; i++) {
    while (testData.remaining() > 0) {
      for (      ByteBuffer output : benchData.outputs) {
        output.clear();
      }
      for (int j=0; j < benchData.inputs.length; j++) {
        benchData.inputs[j]=testData.duplicate();
        benchData.inputs[j].limit(testData.position() + BenchData.chunkSize);
        benchData.inputs[j]=benchData.inputs[j].slice();
        testData.position(testData.position() + BenchData.chunkSize);
      }
      if (isEncode) {
        benchData.encode(encoder);
      }
 else {
        benchData.prepareDecInput();
        benchData.decode(decoder);
      }
    }
    testData.clear();
  }
  return sw.now(TimeUnit.MILLISECONDS);
}
