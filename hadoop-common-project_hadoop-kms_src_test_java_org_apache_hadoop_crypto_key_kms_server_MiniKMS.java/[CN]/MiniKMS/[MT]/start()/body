{
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  System.setProperty(KMSConfiguration.KMS_CONFIG_DIR,kmsConfDir);
  File aclsFile=new File(kmsConfDir,"kms-acls.xml");
  if (!aclsFile.exists()) {
    InputStream is=cl.getResourceAsStream("mini-kms-acls-default.xml");
    OutputStream os=new FileOutputStream(aclsFile);
    IOUtils.copy(is,os);
    is.close();
    os.close();
  }
  File coreFile=new File(kmsConfDir,"core-site.xml");
  if (!coreFile.exists()) {
    Configuration core=new Configuration();
    Writer writer=new FileWriter(coreFile);
    core.writeXml(writer);
    writer.close();
  }
  File kmsFile=new File(kmsConfDir,"kms-site.xml");
  if (!kmsFile.exists()) {
    Configuration kms=new Configuration(false);
    kms.set(KMSConfiguration.KEY_PROVIDER_URI,"jceks://file@" + new Path(kmsConfDir,"kms.keystore").toUri());
    kms.set("hadoop.kms.authentication.type","simple");
    kms.setBoolean(KMSConfiguration.KEY_AUTHORIZATION_ENABLE,false);
    Writer writer=new FileWriter(kmsFile);
    kms.writeXml(writer);
    writer.close();
  }
  System.setProperty("log4j.configuration",log4jConfFile);
  jetty=createJettyServer(keyStore,keyStorePassword);
  URL webXmlUrl=cl.getResource("kms-webapp/WEB-INF/web.xml");
  if (webXmlUrl == null) {
    throw new RuntimeException("Could not find kms-webapp/ dir in test classpath");
  }
  boolean webXmlInJar=webXmlUrl.getPath().contains(".jar!/");
  String webappPath;
  if (webXmlInJar) {
    File webInf=new File("target/" + UUID.randomUUID().toString() + "/kms-webapp/WEB-INF");
    webInf.mkdirs();
    new File(webInf,"web.xml").delete();
    InputStream is=cl.getResourceAsStream("kms-webapp/WEB-INF/web.xml");
    OutputStream os=new FileOutputStream(new File(webInf,"web.xml"));
    IOUtils.copy(is,os);
    is.close();
    os.close();
    webappPath=webInf.getParentFile().getAbsolutePath();
  }
 else {
    webappPath=cl.getResource("kms-webapp").getPath();
  }
  WebAppContext context=new WebAppContext(webappPath,"/kms");
  if (webXmlInJar) {
    context.setClassLoader(cl);
  }
  jetty.addHandler(context);
  jetty.start();
  kmsURL=new URL(getJettyURL(jetty),"kms");
}
