{
  this.dfsClientConf=new Conf(conf);
  this.conf=conf;
  this.stats=stats;
  this.socketFactory=NetUtils.getSocketFactory(conf,ClientProtocol.class);
  this.dtpReplaceDatanodeOnFailure=ReplaceDatanodeOnFailure.get(conf);
  this.hdfsTimeout=Client.getTimeout(conf);
  this.ugi=UserGroupInformation.getCurrentUser();
  final String authority=nameNodeUri == null ? "null" : nameNodeUri.getAuthority();
  this.leaserenewer=LeaseRenewer.getInstance(authority,ugi,this);
  this.clientName=leaserenewer.getClientName(dfsClientConf.taskId);
  this.socketCache=new SocketCache(dfsClientConf.socketCacheCapacity);
  if (rpcNamenode != null) {
    Preconditions.checkArgument(nameNodeUri == null);
    this.namenode=rpcNamenode;
    dtService=null;
  }
 else {
    Preconditions.checkArgument(nameNodeUri != null,"null URI");
    NameNodeProxies.ProxyAndInfo<ClientProtocol> proxyInfo=NameNodeProxies.createProxy(conf,nameNodeUri,ClientProtocol.class);
    this.dtService=proxyInfo.getDelegationTokenService();
    this.namenode=proxyInfo.getProxy();
  }
  this.shortCircuitLocalReads=conf.getBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY,DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_DEFAULT);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Short circuit read is " + shortCircuitLocalReads);
  }
  String localInterfaces[]=conf.getTrimmedStrings(DFSConfigKeys.DFS_CLIENT_LOCAL_INTERFACES);
  localInterfaceAddrs=getLocalInterfaceAddrs(localInterfaces);
  if (LOG.isDebugEnabled() && 0 != localInterfaces.length) {
    LOG.debug("Using local interfaces [" + Joiner.on(',').join(localInterfaces) + "] with addresses ["+ Joiner.on(',').join(localInterfaceAddrs)+ "]");
  }
}
