{
  this.dfsClientConf=new Conf(conf);
  this.shouldUseLegacyBlockReaderLocal=this.dfsClientConf.useLegacyBlockReaderLocal;
  if (this.dfsClientConf.useLegacyBlockReaderLocal) {
    LOG.debug("Using legacy short-circuit local reads.");
  }
  this.conf=conf;
  this.stats=stats;
  this.socketFactory=NetUtils.getSocketFactory(conf,ClientProtocol.class);
  this.dtpReplaceDatanodeOnFailure=ReplaceDatanodeOnFailure.get(conf);
  this.ugi=UserGroupInformation.getCurrentUser();
  this.authority=nameNodeUri == null ? "null" : nameNodeUri.getAuthority();
  this.clientName="DFSClient_" + dfsClientConf.taskId + "_"+ DFSUtil.getRandom().nextInt()+ "_"+ Thread.currentThread().getId();
  int numResponseToDrop=conf.getInt(DFSConfigKeys.DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY,DFSConfigKeys.DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_DEFAULT);
  if (numResponseToDrop > 0) {
    LOG.warn(DFSConfigKeys.DFS_CLIENT_TEST_DROP_NAMENODE_RESPONSE_NUM_KEY + " is set to " + numResponseToDrop+ ", this hacked client will proactively drop responses");
    NameNodeProxies.ProxyAndInfo<ClientProtocol> proxyInfo=NameNodeProxies.createProxyWithLossyRetryHandler(conf,nameNodeUri,ClientProtocol.class,numResponseToDrop);
    this.dtService=proxyInfo.getDelegationTokenService();
    this.namenode=proxyInfo.getProxy();
  }
 else   if (rpcNamenode != null) {
    Preconditions.checkArgument(nameNodeUri == null);
    this.namenode=rpcNamenode;
    dtService=null;
  }
 else {
    Preconditions.checkArgument(nameNodeUri != null,"null URI");
    NameNodeProxies.ProxyAndInfo<ClientProtocol> proxyInfo=NameNodeProxies.createProxy(conf,nameNodeUri,ClientProtocol.class);
    this.dtService=proxyInfo.getDelegationTokenService();
    this.namenode=proxyInfo.getProxy();
  }
  this.domainSocketFactory=new DomainSocketFactory(dfsClientConf);
  String localInterfaces[]=conf.getTrimmedStrings(DFSConfigKeys.DFS_CLIENT_LOCAL_INTERFACES);
  localInterfaceAddrs=getLocalInterfaceAddrs(localInterfaces);
  if (LOG.isDebugEnabled() && 0 != localInterfaces.length) {
    LOG.debug("Using local interfaces [" + Joiner.on(',').join(localInterfaces) + "] with addresses ["+ Joiner.on(',').join(localInterfaceAddrs)+ "]");
  }
  this.peerCache=PeerCache.getInstance(dfsClientConf.socketCacheCapacity,dfsClientConf.socketCacheExpiry);
  Boolean readDropBehind=(conf.get(DFS_CLIENT_CACHE_DROP_BEHIND_READS) == null) ? null : conf.getBoolean(DFS_CLIENT_CACHE_DROP_BEHIND_READS,false);
  Long readahead=(conf.get(DFS_CLIENT_CACHE_READAHEAD) == null) ? null : conf.getLong(DFS_CLIENT_CACHE_READAHEAD,0);
  Boolean writeDropBehind=(conf.get(DFS_CLIENT_CACHE_DROP_BEHIND_WRITES) == null) ? null : conf.getBoolean(DFS_CLIENT_CACHE_DROP_BEHIND_WRITES,false);
  this.defaultReadCachingStrategy=new CachingStrategy(readDropBehind,readahead);
  this.defaultWriteCachingStrategy=new CachingStrategy(writeDropBehind,readahead);
}
