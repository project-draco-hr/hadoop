{
  this.dfsClientConf=new Conf(conf);
  this.conf=conf;
  this.stats=stats;
  this.socketFactory=NetUtils.getSocketFactory(conf,ClientProtocol.class);
  this.dtpReplaceDatanodeOnFailure=ReplaceDatanodeOnFailure.get(conf);
  this.hdfsTimeout=Client.getTimeout(conf);
  this.ugi=UserGroupInformation.getCurrentUser();
  final String authority=nameNodeUri == null ? "null" : nameNodeUri.getAuthority();
  this.leaserenewer=LeaseRenewer.getInstance(authority,ugi,this);
  this.clientName=leaserenewer.getClientName(dfsClientConf.taskId);
  this.socketCache=new SocketCache(dfsClientConf.socketCacheCapacity);
  ClientProtocol failoverNNProxy=(ClientProtocol)HAUtil.createFailoverProxy(conf,nameNodeUri,ClientProtocol.class);
  if (nameNodeUri != null && failoverNNProxy != null) {
    this.namenode=failoverNNProxy;
    nnAddress=null;
  }
 else   if (nameNodeUri != null && rpcNamenode == null) {
    this.namenode=DFSUtil.createNamenode(NameNode.getAddress(nameNodeUri),conf);
    nnAddress=NameNode.getAddress(nameNodeUri);
  }
 else   if (nameNodeUri == null && rpcNamenode != null) {
    this.namenode=rpcNamenode;
    nnAddress=null;
  }
 else {
    throw new IllegalArgumentException("Expecting exactly one of nameNodeUri and rpcNamenode being null: " + "nameNodeUri=" + nameNodeUri + ", rpcNamenode="+ rpcNamenode);
  }
  this.shortCircuitLocalReads=conf.getBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY,DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_DEFAULT);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Short circuit read is " + shortCircuitLocalReads);
  }
}
