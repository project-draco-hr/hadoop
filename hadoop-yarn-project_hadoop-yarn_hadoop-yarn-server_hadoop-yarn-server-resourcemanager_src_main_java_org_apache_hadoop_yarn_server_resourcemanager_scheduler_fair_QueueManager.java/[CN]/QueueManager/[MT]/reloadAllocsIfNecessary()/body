{
  long time=scheduler.getClock().getTime();
  if (time > lastReloadAttempt + ALLOC_RELOAD_INTERVAL) {
    lastReloadAttempt=time;
    if (null == allocFile) {
      return;
    }
    try {
      long lastModified;
      if (allocFile instanceof String) {
        File file=new File((String)allocFile);
        lastModified=file.lastModified();
      }
 else {
        URLConnection conn=((URL)allocFile).openConnection();
        lastModified=conn.getLastModified();
      }
      if (lastModified > lastSuccessfulReload && time > lastModified + ALLOC_RELOAD_WAIT) {
        reloadAllocs();
        lastSuccessfulReload=time;
        lastReloadAttemptFailed=false;
      }
    }
 catch (    Exception e) {
      if (!lastReloadAttemptFailed) {
        LOG.error("Failed to reload fair scheduler config file - " + "will use existing allocations.",e);
      }
      lastReloadAttemptFailed=true;
    }
  }
}
