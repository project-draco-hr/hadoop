{
  List<String> newQueueNames=new ArrayList<String>();
  newQueueNames.add(name);
  int sepIndex=name.length();
  FSParentQueue parent=null;
  while (sepIndex != -1) {
    sepIndex=name.lastIndexOf('.',sepIndex - 1);
    FSQueue queue;
    String curName=null;
    curName=name.substring(0,sepIndex);
    queue=queues.get(curName);
    if (queue == null) {
      newQueueNames.add(curName);
    }
 else {
      if (queue instanceof FSParentQueue) {
        parent=(FSParentQueue)queue;
        break;
      }
 else {
        return null;
      }
    }
  }
  AllocationConfiguration queueConf=scheduler.getAllocationConfiguration();
  FSLeafQueue leafQueue=null;
  for (int i=newQueueNames.size() - 1; i >= 0; i--) {
    String queueName=newQueueNames.get(i);
    if (i == 0) {
      leafQueue=new FSLeafQueue(name,scheduler,parent);
      try {
        leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());
      }
 catch (      AllocationConfigurationException ex) {
        LOG.warn("Failed to set default scheduling policy " + queueConf.getDefaultSchedulingPolicy() + " on new leaf queue.",ex);
      }
      parent.addChildQueue(leafQueue);
      queues.put(leafQueue.getName(),leafQueue);
      leafQueues.add(leafQueue);
    }
 else {
      FSParentQueue newParent=new FSParentQueue(queueName,scheduler,parent);
      try {
        newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());
      }
 catch (      AllocationConfigurationException ex) {
        LOG.warn("Failed to set default scheduling policy " + queueConf.getDefaultSchedulingPolicy() + " on new parent queue.",ex);
      }
      parent.addChildQueue(newParent);
      queues.put(newParent.getName(),newParent);
      parent=newParent;
    }
  }
  return leafQueue;
}
