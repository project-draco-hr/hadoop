{
  Client client=createClient();
  try {
    URI uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/users/user1/flows/flow_name/runs?"+ "metricstoretrieve=MAP_,HDFS_");
    ClientResponse resp=getResponse(client,uri);
    Set<FlowRunEntity> entities=resp.getEntity(new GenericType<Set<FlowRunEntity>>(){
    }
);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,resp.getType());
    assertNotNull(entities);
    assertEquals(2,entities.size());
    int metricCnt=0;
    for (    FlowRunEntity entity : entities) {
      metricCnt+=entity.getMetrics().size();
      for (      TimelineMetric metric : entity.getMetrics()) {
        assertTrue(metric.getId().startsWith("MAP_") || metric.getId().startsWith("HDFS_"));
      }
    }
    assertEquals(3,metricCnt);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/users/user1/flows/flow_name/runs?"+ "metricstoretrieve=!(MAP_,HDFS_)");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<FlowRunEntity>>(){
    }
);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,resp.getType());
    assertNotNull(entities);
    assertEquals(2,entities.size());
    metricCnt=0;
    for (    FlowRunEntity entity : entities) {
      metricCnt+=entity.getMetrics().size();
      for (      TimelineMetric metric : entity.getMetrics()) {
        assertTrue(metric.getId().startsWith("MAP1_"));
      }
    }
    assertEquals(1,metricCnt);
  }
  finally {
    client.destroy();
  }
}
