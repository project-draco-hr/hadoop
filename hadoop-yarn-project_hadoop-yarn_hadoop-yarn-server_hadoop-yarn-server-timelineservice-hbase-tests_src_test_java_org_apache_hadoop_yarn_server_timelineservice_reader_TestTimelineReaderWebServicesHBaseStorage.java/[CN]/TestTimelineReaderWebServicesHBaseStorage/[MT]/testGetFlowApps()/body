{
  Client client=createClient();
  try {
    URI uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/users/user1/flows/flow_name/apps?"+ "fields=ALL");
    ClientResponse resp=getResponse(client,uri);
    Set<TimelineEntity> entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(3,entities.size());
    for (    TimelineEntity entity : entities) {
      assertTrue("Unexpected app in result",(entity.getId().equals("application_1111111111_1111") && entity.getConfigs().size() == 1 && entity.getConfigs().equals(ImmutableMap.of("cfg2","value1"))) || (entity.getId().equals("application_1111111111_2222") && entity.getConfigs().size() == 1 && entity.getConfigs().equals(ImmutableMap.of("cfg1","value1"))) || (entity.getId().equals("application_1111111111_2224") && entity.getConfigs().size() == 0));
      for (      TimelineMetric metric : entity.getMetrics()) {
        if (entity.getId().equals("application_1111111111_1111")) {
          TimelineMetric m1=newMetric(TimelineMetric.Type.SINGLE_VALUE,"HDFS_BYTES_READ",ts - 80000,57L);
          TimelineMetric m2=newMetric(TimelineMetric.Type.SINGLE_VALUE,"MAP_SLOT_MILLIS",ts - 80000,40L);
          TimelineMetric m3=newMetric(TimelineMetric.Type.SINGLE_VALUE,"MAP1_SLOT_MILLIS",ts - 80000,40L);
          assertTrue(verifyMetrics(metric,m1,m2,m3));
        }
 else         if (entity.getId().equals("application_1111111111_2222")) {
          TimelineMetric m1=newMetric(TimelineMetric.Type.SINGLE_VALUE,"MAP_SLOT_MILLIS",ts - 80000,101L);
          assertTrue(verifyMetrics(metric,m1));
        }
 else         if (entity.getId().equals("application_1111111111_2224")) {
          TimelineMetric m1=newMetric(TimelineMetric.Type.SINGLE_VALUE,"MAP_SLOT_MILLIS",ts - 80000,101L);
          assertTrue(verifyMetrics(metric,m1));
        }
      }
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/users/user1/flows/flow_name/apps?"+ "fields=ALL&metricslimit=6");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(3,entities.size());
    for (    TimelineEntity entity : entities) {
      assertTrue("Unexpected app in result",(entity.getId().equals("application_1111111111_1111") && entity.getConfigs().size() == 1 && entity.getConfigs().equals(ImmutableMap.of("cfg2","value1"))) || (entity.getId().equals("application_1111111111_2222") && entity.getConfigs().size() == 1 && entity.getConfigs().equals(ImmutableMap.of("cfg1","value1"))) || (entity.getId().equals("application_1111111111_2224") && entity.getConfigs().size() == 0));
      for (      TimelineMetric metric : entity.getMetrics()) {
        if (entity.getId().equals("application_1111111111_1111")) {
          TimelineMetric m1=newMetric(TimelineMetric.Type.TIME_SERIES,"HDFS_BYTES_READ",ts - 80000,57L);
          m1.addValue(ts - 100000,31L);
          TimelineMetric m2=newMetric(TimelineMetric.Type.TIME_SERIES,"MAP_SLOT_MILLIS",ts - 80000,40L);
          m2.addValue(ts - 100000,2L);
          TimelineMetric m3=newMetric(TimelineMetric.Type.TIME_SERIES,"MAP1_SLOT_MILLIS",ts - 80000,40L);
          m3.addValue(ts - 100000,2L);
          assertTrue(verifyMetrics(metric,m1,m2,m3));
        }
 else         if (entity.getId().equals("application_1111111111_2222")) {
          TimelineMetric m1=newMetric(TimelineMetric.Type.TIME_SERIES,"MAP_SLOT_MILLIS",ts - 80000,101L);
          m1.addValue(ts - 100000,5L);
          assertTrue(verifyMetrics(metric,m1));
        }
 else         if (entity.getId().equals("application_1111111111_2224")) {
          TimelineMetric m1=newMetric(TimelineMetric.Type.TIME_SERIES,"MAP_SLOT_MILLIS",ts - 80000,101L);
          m1.addValue(ts - 100000,5L);
          assertTrue(verifyMetrics(metric,m1));
        }
      }
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/users/user1/flows/flow_name/apps");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(3,entities.size());
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/users/user1/flows/flow_name/apps?limit=1");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(1,entities.size());
  }
  finally {
    client.destroy();
  }
}
