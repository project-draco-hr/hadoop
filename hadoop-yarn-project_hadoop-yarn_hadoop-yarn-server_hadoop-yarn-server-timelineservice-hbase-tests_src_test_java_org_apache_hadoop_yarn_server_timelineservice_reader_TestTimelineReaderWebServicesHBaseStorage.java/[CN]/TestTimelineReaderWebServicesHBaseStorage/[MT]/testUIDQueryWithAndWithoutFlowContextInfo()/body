{
  Client client=createClient();
  try {
    String appUIDWithFlowInfo="cluster1!user1!flow_name!1002345678919!application_1111111111_1111";
    URI uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/app-uid/"+ appUIDWithFlowInfo);
    ClientResponse resp=getResponse(client,uri);
    TimelineEntity appEntity1=resp.getEntity(TimelineEntity.class);
    assertNotNull(appEntity1);
    assertEquals(TimelineEntityType.YARN_APPLICATION.toString(),appEntity1.getType());
    assertEquals("application_1111111111_1111",appEntity1.getId());
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/timeline/"+ "app-uid/"+ appUIDWithFlowInfo+ "/entities/type1");
    resp=getResponse(client,uri);
    Set<TimelineEntity> entities1=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities1);
    assertEquals(2,entities1.size());
    for (    TimelineEntity entity : entities1) {
      assertNotNull(entity.getInfo());
      assertEquals(1,entity.getInfo().size());
      String uid=(String)entity.getInfo().get(TimelineReaderManager.UID_KEY);
      assertNotNull(uid);
      assertTrue(uid.equals(appUIDWithFlowInfo + "!type1!entity1") || uid.equals(appUIDWithFlowInfo + "!type1!entity2"));
    }
    String appUIDWithoutFlowInfo="cluster1!application_1111111111_1111";
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/timeline/"+ "app-uid/"+ appUIDWithoutFlowInfo);
    resp=getResponse(client,uri);
    ;
    TimelineEntity appEntity2=resp.getEntity(TimelineEntity.class);
    assertNotNull(appEntity2);
    assertEquals(TimelineEntityType.YARN_APPLICATION.toString(),appEntity2.getType());
    assertEquals("application_1111111111_1111",appEntity2.getId());
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/timeline/"+ "app-uid/"+ appUIDWithoutFlowInfo+ "/entities/type1");
    resp=getResponse(client,uri);
    Set<TimelineEntity> entities2=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities2);
    assertEquals(2,entities2.size());
    for (    TimelineEntity entity : entities2) {
      assertNotNull(entity.getInfo());
      assertEquals(1,entity.getInfo().size());
      String uid=(String)entity.getInfo().get(TimelineReaderManager.UID_KEY);
      assertNotNull(uid);
      assertTrue(uid.equals(appUIDWithoutFlowInfo + "!type1!entity1") || uid.equals(appUIDWithoutFlowInfo + "!type1!entity2"));
    }
    String entityUIDWithFlowInfo=appUIDWithFlowInfo + "!type1!entity1";
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/timeline/"+ "entity-uid/"+ entityUIDWithFlowInfo);
    resp=getResponse(client,uri);
    ;
    TimelineEntity singleEntity1=resp.getEntity(TimelineEntity.class);
    assertNotNull(singleEntity1);
    assertEquals("type1",singleEntity1.getType());
    assertEquals("entity1",singleEntity1.getId());
    String entityUIDWithoutFlowInfo=appUIDWithoutFlowInfo + "!type1!entity1";
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/timeline/"+ "entity-uid/"+ entityUIDWithoutFlowInfo);
    resp=getResponse(client,uri);
    ;
    TimelineEntity singleEntity2=resp.getEntity(TimelineEntity.class);
    assertNotNull(singleEntity2);
    assertEquals("type1",singleEntity2.getType());
    assertEquals("entity1",singleEntity2.getId());
  }
  finally {
    client.destroy();
  }
}
