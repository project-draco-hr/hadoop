{
  Client client=createClient();
  try {
    URI uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1/entity2?confstoretrieve=cfg_,configuration_");
    ClientResponse resp=getResponse(client,uri);
    TimelineEntity entity=resp.getEntity(TimelineEntity.class);
    assertNotNull(entity);
    assertEquals("entity2",entity.getId());
    assertEquals("type1",entity.getType());
    assertEquals(2,entity.getConfigs().size());
    for (    String configKey : entity.getConfigs().keySet()) {
      assertTrue(configKey.startsWith("configuration_") || configKey.startsWith("cfg_"));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1/entity2?confstoretrieve=!(cfg_,configuration_)");
    resp=getResponse(client,uri);
    entity=resp.getEntity(TimelineEntity.class);
    assertNotNull(entity);
    assertEquals("entity2",entity.getId());
    assertEquals("type1",entity.getType());
    assertEquals(1,entity.getConfigs().size());
    for (    String configKey : entity.getConfigs().keySet()) {
      assertTrue(configKey.startsWith("config_"));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1/entity2?metricstoretrieve=MAP1_,HDFS_");
    resp=getResponse(client,uri);
    entity=resp.getEntity(TimelineEntity.class);
    assertNotNull(entity);
    assertEquals("entity2",entity.getId());
    assertEquals("type1",entity.getType());
    assertEquals(2,entity.getMetrics().size());
    for (    TimelineMetric metric : entity.getMetrics()) {
      assertTrue(metric.getId().startsWith("MAP1_") || metric.getId().startsWith("HDFS_"));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1/entity2?metricstoretrieve=!(MAP1_,HDFS_)");
    resp=getResponse(client,uri);
    entity=resp.getEntity(TimelineEntity.class);
    assertNotNull(entity);
    assertEquals("entity2",entity.getId());
    assertEquals("type1",entity.getType());
    assertEquals(1,entity.getMetrics().size());
    for (    TimelineMetric metric : entity.getMetrics()) {
      assertTrue(metric.getId().startsWith("MAP11_"));
      assertEquals(TimelineMetric.Type.SINGLE_VALUE,metric.getType());
      assertEquals(1,metric.getValues().size());
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1/entity2?metricstoretrieve=!(MAP1_,HDFS_)&"+ "metricslimit=5");
    resp=getResponse(client,uri);
    entity=resp.getEntity(TimelineEntity.class);
    assertNotNull(entity);
    assertEquals("entity2",entity.getId());
    assertEquals("type1",entity.getType());
    assertEquals(1,entity.getMetrics().size());
    for (    TimelineMetric metric : entity.getMetrics()) {
      assertTrue(metric.getId().startsWith("MAP11_"));
      assertEquals(TimelineMetric.Type.SINGLE_VALUE,metric.getType());
    }
  }
  finally {
    client.destroy();
  }
}
