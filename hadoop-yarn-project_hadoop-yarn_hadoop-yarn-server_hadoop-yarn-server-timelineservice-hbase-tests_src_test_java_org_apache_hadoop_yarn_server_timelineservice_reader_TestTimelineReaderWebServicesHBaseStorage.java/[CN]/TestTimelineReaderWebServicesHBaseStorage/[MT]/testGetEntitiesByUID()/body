{
  Client client=createClient();
  try {
    URI uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flows");
    ClientResponse resp=getResponse(client,uri);
    Set<FlowActivityEntity> flowEntities=resp.getEntity(new GenericType<Set<FlowActivityEntity>>(){
    }
);
    assertNotNull(flowEntities);
    assertEquals(2,flowEntities.size());
    List<String> listFlowUIDs=new ArrayList<String>();
    for (    FlowActivityEntity entity : flowEntities) {
      String flowUID=(String)entity.getInfo().get(TimelineReaderManager.UID_KEY);
      listFlowUIDs.add(flowUID);
      assertEquals(TimelineUIDConverter.FLOW_UID.encodeUID(new TimelineReaderContext(entity.getCluster(),entity.getUser(),entity.getFlowName(),null,null,null,null)),flowUID);
      assertTrue((entity.getId().endsWith("@flow_name") && entity.getFlowRuns().size() == 2) || (entity.getId().endsWith("@flow_name2") && entity.getFlowRuns().size() == 1));
    }
    List<String> listFlowRunUIDs=new ArrayList<String>();
    for (    String flowUID : listFlowUIDs) {
      uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flow-uid/"+ flowUID+ "/runs");
      resp=getResponse(client,uri);
      Set<FlowRunEntity> frEntities=resp.getEntity(new GenericType<Set<FlowRunEntity>>(){
      }
);
      assertNotNull(frEntities);
      for (      FlowRunEntity entity : frEntities) {
        String flowRunUID=(String)entity.getInfo().get(TimelineReaderManager.UID_KEY);
        listFlowRunUIDs.add(flowRunUID);
        assertEquals(TimelineUIDConverter.FLOWRUN_UID.encodeUID(new TimelineReaderContext("cluster1",entity.getUser(),entity.getName(),entity.getRunId(),null,null,null)),flowRunUID);
      }
    }
    assertEquals(3,listFlowRunUIDs.size());
    for (    String flowRunUID : listFlowRunUIDs) {
      uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/run-uid/"+ flowRunUID);
      resp=getResponse(client,uri);
      FlowRunEntity entity=resp.getEntity(FlowRunEntity.class);
      assertNotNull(entity);
    }
    List<String> listAppUIDs=new ArrayList<String>();
    for (    String flowRunUID : listFlowRunUIDs) {
      TimelineReaderContext context=TimelineUIDConverter.FLOWRUN_UID.decodeUID(flowRunUID);
      uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/run-uid/"+ flowRunUID+ "/apps");
      resp=getResponse(client,uri);
      Set<TimelineEntity> appEntities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
      }
);
      assertNotNull(appEntities);
      for (      TimelineEntity entity : appEntities) {
        String appUID=(String)entity.getInfo().get(TimelineReaderManager.UID_KEY);
        listAppUIDs.add(appUID);
        assertEquals(TimelineUIDConverter.APPLICATION_UID.encodeUID(new TimelineReaderContext(context.getClusterId(),context.getUserId(),context.getFlowName(),context.getFlowRunId(),entity.getId(),null,null)),appUID);
      }
    }
    assertEquals(4,listAppUIDs.size());
    for (    String appUID : listAppUIDs) {
      uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/app-uid/"+ appUID);
      resp=getResponse(client,uri);
      TimelineEntity entity=resp.getEntity(TimelineEntity.class);
      assertNotNull(entity);
    }
    List<String> listEntityUIDs=new ArrayList<String>();
    for (    String appUID : listAppUIDs) {
      TimelineReaderContext context=TimelineUIDConverter.APPLICATION_UID.decodeUID(appUID);
      uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/app-uid/"+ appUID+ "/entities/type1");
      resp=getResponse(client,uri);
      Set<TimelineEntity> entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
      }
);
      assertNotNull(entities);
      for (      TimelineEntity entity : entities) {
        String entityUID=(String)entity.getInfo().get(TimelineReaderManager.UID_KEY);
        listEntityUIDs.add(entityUID);
        assertEquals(TimelineUIDConverter.GENERIC_ENTITY_UID.encodeUID(new TimelineReaderContext(context.getClusterId(),context.getUserId(),context.getFlowName(),context.getFlowRunId(),context.getAppId(),"type1",entity.getId())),entityUID);
      }
    }
    assertEquals(2,listEntityUIDs.size());
    for (    String entityUID : listEntityUIDs) {
      uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/entity-uid/"+ entityUID);
      resp=getResponse(client,uri);
      TimelineEntity entity=resp.getEntity(TimelineEntity.class);
      assertNotNull(entity);
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flow-uid/dummy:flow/runs");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/run-uid/dummy:flowrun");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/run-uid/some:dummy:flow:123v456");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/run-uid/dummy:flowrun/apps");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/app-uid/dummy:app");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/app-uid/dummy:app/entities/type1");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/entity-uid/dummy:entity");
    verifyHttpResponse(client,uri,Status.BAD_REQUEST);
  }
  finally {
    client.destroy();
  }
}
