{
  Client client=createClient();
  try {
    URI uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?conffilters=config_param1%20eq%20value1%20OR%20"+ "config_param1%20eq%20value3");
    ClientResponse resp=getResponse(client,uri);
    Set<TimelineEntity> entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    for (    TimelineEntity entity : entities) {
      assertTrue(entity.getId().equals("entity1") || entity.getId().equals("entity2"));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?conffilters=config_param1%20eq%20value1%20AND"+ "%20configuration_param2%20eq%20value2");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(0,entities.size());
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?conffilters=(config_param1%20eq%20value1%20AND"+ "%20configuration_param2%20eq%20value2)%20OR%20(config_param1%20eq"+ "%20value3%20AND%20cfg_param3%20eq%20value1)");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(1,entities.size());
    int cfgCnt=0;
    for (    TimelineEntity entity : entities) {
      cfgCnt+=entity.getConfigs().size();
      assertTrue(entity.getId().equals("entity2"));
    }
    assertEquals(0,cfgCnt);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?conffilters=(config_param1%20eq%20value1%20AND"+ "%20configuration_param2%20eq%20value2)%20OR%20(config_param1%20eq"+ "%20value3%20AND%20cfg_param3%20eq%20value1)&fields=CONFIGS");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(1,entities.size());
    cfgCnt=0;
    for (    TimelineEntity entity : entities) {
      cfgCnt+=entity.getConfigs().size();
      assertTrue(entity.getId().equals("entity2"));
    }
    assertEquals(3,cfgCnt);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?conffilters=(config_param1%20eq%20value1%20AND"+ "%20configuration_param2%20eq%20value2)%20OR%20(config_param1%20eq"+ "%20value3%20AND%20cfg_param3%20eq%20value1)&confstoretrieve=cfg_,"+ "configuration_");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(1,entities.size());
    cfgCnt=0;
    for (    TimelineEntity entity : entities) {
      cfgCnt+=entity.getConfigs().size();
      assertTrue(entity.getId().equals("entity2"));
      for (      String configKey : entity.getConfigs().keySet()) {
        assertTrue(configKey.startsWith("cfg_") || configKey.startsWith("configuration_"));
      }
    }
    assertEquals(2,cfgCnt);
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?conffilters=configuration_param2%20ne%20value3");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(2,entities.size());
    for (    TimelineEntity entity : entities) {
      assertTrue(entity.getId().equals("entity1") || entity.getId().equals("entity2"));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/clusters/cluster1/apps/application_1111111111_1111/"+ "entities/type1?conffilters=configuration_param2%20ene%20value3");
    resp=getResponse(client,uri);
    entities=resp.getEntity(new GenericType<Set<TimelineEntity>>(){
    }
);
    assertNotNull(entities);
    assertEquals(1,entities.size());
    for (    TimelineEntity entity : entities) {
      assertTrue(entity.getId().equals("entity2"));
    }
  }
  finally {
    client.destroy();
  }
}
