{
  while (true) {
    if (lockCount.get() == 0) {
      try {
synchronized (this) {
          if (lockCount.get() > 0) {
            lockCount.incrementAndGet();
            return;
          }
          myznode=zkc.create(lockpath + "/lock-",new byte[]{'0'},Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);
          if (LOG.isTraceEnabled()) {
            LOG.trace("Acquiring lock, trying " + myznode);
          }
          List<String> nodes=zkc.getChildren(lockpath,false);
          Collections.sort(nodes,new Comparator<String>(){
            public int compare(            String o1,            String o2){
              Integer l1=Integer.valueOf(o1.replace("lock-",""));
              Integer l2=Integer.valueOf(o2.replace("lock-",""));
              return l1 - l2;
            }
          }
);
          if ((lockpath + "/" + nodes.get(0)).equals(myznode)) {
            if (LOG.isTraceEnabled()) {
              LOG.trace("Lock acquired - " + myznode);
            }
            lockCount.set(1);
            zkc.exists(myznode,this);
            return;
          }
 else {
            LOG.error("Failed to acquire lock with " + myznode + ", "+ nodes.get(0)+ " already has it");
            throw new IOException("Could not acquire lock");
          }
        }
      }
 catch (      KeeperException e) {
        throw new IOException("Exception accessing Zookeeper",e);
      }
catch (      InterruptedException ie) {
        throw new IOException("Exception accessing Zookeeper",ie);
      }
    }
 else {
      int ret=lockCount.getAndIncrement();
      if (ret == 0) {
        lockCount.decrementAndGet();
        continue;
      }
 else {
        return;
      }
    }
  }
}
