{
  UnderReplicatedBlocks blocks=new UnderReplicatedBlocks();
  BlockInfo block1=new BlockInfoContiguous(new Block(1),(short)1);
  BlockInfo block2=new BlockInfoContiguous(new Block(2),(short)1);
  assertEquals(blocks.getTimeOfTheOldestBlockToBeReplicated(),0L);
  long time1=Time.now();
  blocks.add(block1,1,0,3);
  long time2=Time.now();
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() >= time1);
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() <= time2);
  blocks.add(block2,2,0,3);
  long time3=Time.now();
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() >= time1);
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() <= time2);
  blocks.remove(block1,UnderReplicatedBlocks.QUEUE_HIGHEST_PRIORITY);
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() >= time2);
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() <= time3);
  blocks.remove(block2,UnderReplicatedBlocks.QUEUE_UNDER_REPLICATED);
  assertEquals(blocks.getTimeOfTheOldestBlockToBeReplicated(),0L);
  time1=Time.now();
  blocks.add(block2,2,0,3);
  time2=Time.now();
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() >= time1);
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() <= time2);
  blocks.add(block1,1,0,3);
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() >= time1);
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() <= time2);
  blocks.remove(block1,UnderReplicatedBlocks.QUEUE_HIGHEST_PRIORITY);
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() >= time1);
  assertTrue(blocks.getTimeOfTheOldestBlockToBeReplicated() <= time2);
  blocks.remove(block2,UnderReplicatedBlocks.QUEUE_UNDER_REPLICATED);
  assertEquals(blocks.getTimeOfTheOldestBlockToBeReplicated(),0L);
}
