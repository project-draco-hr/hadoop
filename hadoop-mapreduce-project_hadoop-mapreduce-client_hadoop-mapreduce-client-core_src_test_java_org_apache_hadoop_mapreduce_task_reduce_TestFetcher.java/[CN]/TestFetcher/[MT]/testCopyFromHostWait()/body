{
  Fetcher<Text,Text> underTest=new FakeFetcher<Text,Text>(job,id,ss,mm,r,metrics,except,key,connection);
  String replyHash=SecureShuffleUtils.generateHash(encHash.getBytes(),key);
  when(connection.getResponseCode()).thenReturn(200);
  when(connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH)).thenReturn(replyHash);
  ShuffleHeader header=new ShuffleHeader(map1ID.toString(),10,10,1);
  ByteArrayOutputStream bout=new ByteArrayOutputStream();
  header.write(new DataOutputStream(bout));
  ByteArrayInputStream in=new ByteArrayInputStream(bout.toByteArray());
  when(connection.getInputStream()).thenReturn(in);
  when(mm.reserve(any(TaskAttemptID.class),anyLong(),anyInt())).thenReturn(null);
  underTest.copyFromHost(host);
  verify(connection).addRequestProperty(SecureShuffleUtils.HTTP_HEADER_URL_HASH,encHash);
  verify(allErrs,never()).increment(1);
  verify(ss,never()).copyFailed(map1ID,host,true,false);
  verify(ss,never()).copyFailed(map2ID,host,true,false);
  verify(ss).putBackKnownMapOutput(any(MapHost.class),eq(map1ID));
  verify(ss).putBackKnownMapOutput(any(MapHost.class),eq(map2ID));
}
