{
  LOG.info(">>>> " + name.getMethodName());
  job=new JobConf();
  job.setBoolean(MRJobConfig.SHUFFLE_FETCH_RETRY_ENABLED,false);
  jobWithRetry=new JobConf();
  jobWithRetry.setBoolean(MRJobConfig.SHUFFLE_FETCH_RETRY_ENABLED,true);
  id=TaskAttemptID.forName("attempt_0_1_r_1_1");
  ss=mock(ShuffleSchedulerImpl.class);
  mm=mock(MergeManagerImpl.class);
  r=mock(Reporter.class);
  metrics=mock(ShuffleClientMetrics.class);
  except=mock(ExceptionReporter.class);
  key=JobTokenSecretManager.createSecretKey(new byte[]{0,0,0,0});
  connection=mock(HttpURLConnection.class);
  allErrs=mock(Counters.Counter.class);
  when(r.getCounter(anyString(),anyString())).thenReturn(allErrs);
  ArrayList<TaskAttemptID> maps=new ArrayList<TaskAttemptID>(1);
  maps.add(map1ID);
  maps.add(map2ID);
  when(ss.getMapsForHost(host)).thenReturn(maps);
}
