{
  Path[] testDirs={getTestRootPath(fc,"test/hadoop/a"),getTestRootPath(fc,"test/hadoop/b"),getTestRootPath(fc,"test/hadoop/c/1")};
  Assert.assertFalse(exists(fc,testDirs[0]));
  for (  Path path : testDirs) {
    fc.mkdir(path,FsPermission.getDefault(),true);
  }
  FileStatus[] paths=fc.util().listStatus(getTestRootPath(fc,"test"));
  Assert.assertEquals(1,paths.length);
  Assert.assertEquals(getTestRootPath(fc,"test/hadoop"),paths[0].getPath());
  paths=fc.util().listStatus(getTestRootPath(fc,"test/hadoop"));
  Assert.assertEquals(3,paths.length);
  Assert.assertTrue(containsPath(getTestRootPath(fc,"test/hadoop/a"),paths));
  Assert.assertTrue(containsPath(getTestRootPath(fc,"test/hadoop/b"),paths));
  Assert.assertTrue(containsPath(getTestRootPath(fc,"test/hadoop/c"),paths));
  paths=fc.util().listStatus(getTestRootPath(fc,"test/hadoop/a"));
  Assert.assertEquals(0,paths.length);
  Iterator<FileStatus> pathsIterator=fc.listStatus(getTestRootPath(fc,"test"));
  Assert.assertEquals(getTestRootPath(fc,"test/hadoop"),pathsIterator.next().getPath());
  Assert.assertFalse(pathsIterator.hasNext());
  pathsIterator=fc.listStatus(getTestRootPath(fc,"test/hadoop"));
  FileStatus[] subdirs=new FileStatus[3];
  int i=0;
  while (i < 3 && pathsIterator.hasNext()) {
    subdirs[i++]=pathsIterator.next();
  }
  Assert.assertFalse(pathsIterator.hasNext());
  Assert.assertTrue(i == 3);
  Assert.assertTrue(containsPath(getTestRootPath(fc,"test/hadoop/a"),subdirs));
  Assert.assertTrue(containsPath(getTestRootPath(fc,"test/hadoop/b"),subdirs));
  Assert.assertTrue(containsPath(getTestRootPath(fc,"test/hadoop/c"),subdirs));
  pathsIterator=fc.listStatus(getTestRootPath(fc,"test/hadoop/a"));
  Assert.assertFalse(pathsIterator.hasNext());
}
