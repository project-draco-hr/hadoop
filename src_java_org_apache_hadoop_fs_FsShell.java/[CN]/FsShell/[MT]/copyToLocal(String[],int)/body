{
  CommandFormat cf=new CommandFormat("copyToLocal",2,2,"crc","ignoreCrc");
  String srcstr=null;
  String dststr=null;
  try {
    List<String> parameters=cf.parse(argv,pos);
    srcstr=parameters.get(0);
    dststr=parameters.get(1);
  }
 catch (  IllegalArgumentException iae) {
    System.err.println("Usage: java FsShell " + GET_SHORT_USAGE);
    throw iae;
  }
  boolean copyCrc=cf.getOpt("crc");
  final boolean verifyChecksum=!cf.getOpt("ignoreCrc");
  if (dststr.equals("-")) {
    if (copyCrc) {
      System.err.println("-crc option is not valid when destination is stdout.");
    }
    cat(srcstr,verifyChecksum);
  }
 else {
    File dst=new File(dststr);
    Path srcpath=new Path(srcstr);
    FileSystem srcFS=getSrcFileSystem(srcpath,verifyChecksum);
    if (copyCrc && !(srcFS instanceof ChecksumFileSystem)) {
      System.err.println("-crc option is not valid when source file system " + "does not have crc files. Automatically turn the option off.");
      copyCrc=false;
    }
    FileStatus[] srcs=srcFS.globStatus(srcpath);
    if (null == srcs) {
      throw new IOException(srcpath + ": No such file or directory");
    }
    boolean dstIsDir=dst.isDirectory();
    if (srcs.length > 1 && !dstIsDir) {
      throw new IOException("When copying multiple files, " + "destination should be a directory.");
    }
    for (    FileStatus status : srcs) {
      Path p=status.getPath();
      File f=dstIsDir ? new File(dst,p.getName()) : dst;
      copyToLocal(srcFS,status,f,copyCrc);
    }
  }
}
