{
  if (argv.length < 1) {
    printUsage("");
    return -1;
  }
  int exitCode=-1;
  int i=0;
  String cmd=argv[i++];
  if ("-put".equals(cmd) || "-test".equals(cmd) || "-copyFromLocal".equals(cmd)|| "-moveFromLocal".equals(cmd)) {
    if (argv.length < 3) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-get".equals(cmd) || "-copyToLocal".equals(cmd) || "-moveToLocal".equals(cmd)) {
    if (argv.length < 3) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-mv".equals(cmd) || "-cp".equals(cmd)) {
    if (argv.length < 3) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-rm".equals(cmd) || "-rmr".equals(cmd) || "-cat".equals(cmd)|| "-mkdir".equals(cmd)|| "-touchz".equals(cmd)|| "-stat".equals(cmd)|| "-text".equals(cmd)) {
    if (argv.length < 2) {
      printUsage(cmd);
      return exitCode;
    }
  }
  try {
    init();
  }
 catch (  RPC.VersionMismatch v) {
    LOG.debug("Version mismatch",v);
    System.err.println("Version Mismatch between client and server" + "... command aborted.");
    return exitCode;
  }
catch (  IOException e) {
    LOG.debug("Error",e);
    System.err.println("Bad connection to FS. Command aborted. Exception: " + e.getLocalizedMessage());
    return exitCode;
  }
  exitCode=0;
  try {
    if ("-put".equals(cmd) || "-copyFromLocal".equals(cmd)) {
      Path[] srcs=new Path[argv.length - 2];
      for (int j=0; i < argv.length - 1; )       srcs[j++]=new Path(argv[i++]);
      copyFromLocal(srcs,argv[i++]);
    }
 else     if ("-moveFromLocal".equals(cmd)) {
      Path[] srcs=new Path[argv.length - 2];
      for (int j=0; i < argv.length - 1; )       srcs[j++]=new Path(argv[i++]);
      moveFromLocal(srcs,argv[i++]);
    }
 else     if ("-get".equals(cmd) || "-copyToLocal".equals(cmd)) {
      copyToLocal(argv,i);
    }
 else     if ("-getmerge".equals(cmd)) {
      if (argv.length > i + 2)       copyMergeToLocal(argv[i++],new Path(argv[i++]),Boolean.parseBoolean(argv[i++]));
 else       copyMergeToLocal(argv[i++],new Path(argv[i++]));
    }
 else     if ("-cat".equals(cmd)) {
      exitCode=doall(cmd,argv,i);
    }
 else     if ("-text".equals(cmd)) {
      exitCode=doall(cmd,argv,i);
    }
 else     if ("-moveToLocal".equals(cmd)) {
      moveToLocal(argv[i++],new Path(argv[i++]));
    }
 else     if ("-setrep".equals(cmd)) {
      setReplication(argv,i);
    }
 else     if ("-chmod".equals(cmd) || "-chown".equals(cmd) || "-chgrp".equals(cmd)) {
      exitCode=FsShellPermissions.changePermissions(cmd,argv,i,this);
    }
 else     if ("-ls".equals(cmd)) {
      if (i < argv.length) {
        exitCode=doall(cmd,argv,i);
      }
 else {
        exitCode=ls(Path.CUR_DIR,false);
      }
    }
 else     if ("-lsr".equals(cmd)) {
      if (i < argv.length) {
        exitCode=doall(cmd,argv,i);
      }
 else {
        exitCode=ls(Path.CUR_DIR,true);
      }
    }
 else     if ("-mv".equals(cmd)) {
      exitCode=rename(argv,getConf());
    }
 else     if ("-cp".equals(cmd)) {
      exitCode=copy(argv,getConf());
    }
 else     if ("-rm".equals(cmd)) {
      exitCode=doall(cmd,argv,i);
    }
 else     if ("-rmr".equals(cmd)) {
      exitCode=doall(cmd,argv,i);
    }
 else     if ("-expunge".equals(cmd)) {
      expunge();
    }
 else     if ("-df".equals(cmd)) {
      if (argv.length - 1 > 0) {
        exitCode=doall(cmd,argv,i);
      }
 else {
        df(null);
      }
    }
 else     if ("-du".equals(cmd)) {
      du(argv,i);
    }
 else     if ("-dus".equals(cmd)) {
      dus(argv,i);
    }
 else     if ("-count".equals(cmd)) {
      LinkedList<String> args=new LinkedList<String>(Arrays.asList(argv));
      String cmdName=args.removeFirst();
      Count runner=ReflectionUtils.newInstance(Count.class,getConf());
      runner.setCommandName(cmdName);
      exitCode=runner.run(args);
    }
 else     if ("-mkdir".equals(cmd)) {
      exitCode=doall(cmd,argv,i);
    }
 else     if ("-touchz".equals(cmd)) {
      exitCode=doall(cmd,argv,i);
    }
 else     if ("-test".equals(cmd)) {
      exitCode=test(argv,i);
    }
 else     if ("-stat".equals(cmd)) {
      if (i + 1 < argv.length) {
        stat(argv[i++].toCharArray(),argv[i++]);
      }
 else {
        stat("%y".toCharArray(),argv[i]);
      }
    }
 else     if ("-help".equals(cmd)) {
      if (i < argv.length) {
        printHelp(argv[i]);
      }
 else {
        printHelp("");
      }
    }
 else     if ("-tail".equals(cmd)) {
      tail(argv,i);
    }
 else {
      exitCode=-1;
      System.err.println(cmd.substring(1) + ": Unknown command");
      printUsage("");
    }
  }
 catch (  IllegalArgumentException arge) {
    LOG.debug("Error",arge);
    exitCode=-1;
    System.err.println(cmd.substring(1) + ": " + arge.getLocalizedMessage());
    printUsage(cmd);
  }
catch (  RemoteException e) {
    LOG.debug("Error",e);
    exitCode=-1;
    try {
      String[] content;
      content=e.getLocalizedMessage().split("\n");
      System.err.println(cmd.substring(1) + ": " + content[0]);
    }
 catch (    Exception ex) {
      System.err.println(cmd.substring(1) + ": " + ex.getLocalizedMessage());
    }
  }
catch (  IOException e) {
    LOG.debug("Error",e);
    exitCode=-1;
    System.err.println(cmd.substring(1) + ": " + e.getLocalizedMessage());
  }
catch (  Exception re) {
    LOG.debug("Error",re);
    exitCode=-1;
    System.err.println(cmd.substring(1) + ": " + re.getLocalizedMessage());
  }
 finally {
  }
  return exitCode;
}
