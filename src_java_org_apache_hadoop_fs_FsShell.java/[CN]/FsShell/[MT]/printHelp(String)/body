{
  String summary="hadoop fs is the command to execute fs commands. " + "The full syntax is: \n\n" + "hadoop fs [-fs <local | file system URI>] [-conf <configuration file>]\n\t"+ "[-D <property=value>] [-df [<path>]] [-du [-s] [-h] <path>]\n\t"+ "[-dus <path>] [-mv <src> <dst>] [-cp <src> <dst>]\n\t"+ "[-put <localsrc> ... <dst>] [-copyFromLocal <localsrc> ... <dst>]\n\t"+ "[-moveFromLocal <localsrc> ... <dst>] [" + GET_SHORT_USAGE + "\n\t"+ "["+ COPYTOLOCAL_SHORT_USAGE+ "] [-moveToLocal <src> <localdst>]\n\t"+ "[-report]\n\t"+ "[-test -[ezd] <path>]";
  String conf="-conf <configuration file>:  Specify an application configuration file.";
  String D="-D <property=value>:  Use value for given property.";
  String fs="-fs [local | <file system URI>]: \tSpecify the file system to use.\n" + "\t\tIf not specified, the current configuration is used, \n" + "\t\ttaken from the following, in increasing precedence: \n"+ "\t\t\tcore-default.xml inside the hadoop jar file \n"+ "\t\t\tcore-site.xml in $HADOOP_CONF_DIR \n"+ "\t\t'local' means use the local file system as your DFS. \n"+ "\t\t<file system URI> specifies a particular file system to \n"+ "\t\tcontact. This argument is optional but if used must appear\n"+ "\t\tappear first on the command line.  Exactly one additional\n"+ "\t\targument must be specified. \n";
  String df="-df [<path>]: \tShows the capacity, free and used space of the filesystem.\n" + "\t\tIf the filesystem has multiple partitions, and no path to a particular partition\n" + "\t\tis specified, then the status of the root partitions will be shown.\n";
  String du="-du [-s] [-h] <path>: \tShow the amount of space, in bytes, used by the files that \n" + "\t\tmatch the specified file pattern. The following flags are optional:\n" + "\t\t  -s   Rather than showing the size of each individual file that\n"+ "\t\t       matches the pattern, shows the total (summary) size.\n"+ "\t\t  -h   Formats the sizes of files in a human-readable fashion\n"+ "\t\t       rather than a number of bytes.\n"+ "\n"+ "\t\tNote that, even without the -s option, this only shows size summaries\n"+ "\t\tone level deep into a directory.\n"+ "\t\tThe output is in the form \n"+ "\t\t\tsize\tname(full path)\n";
  String dus="-dus <path>: \tShow the amount of space, in bytes, used by the files that \n" + "\t\tmatch the specified file pattern. This is equivalent to -du -s above.\n";
  String mv="-mv <src> <dst>:   Move files that match the specified file pattern <src>\n" + "\t\tto a destination <dst>.  When moving multiple files, the \n" + "\t\tdestination must be a directory. \n";
  String cp="-cp <src> <dst>:   Copy files that match the file pattern <src> to a \n" + "\t\tdestination.  When copying multiple files, the destination\n" + "\t\tmust be a directory. \n";
  String put="-put <localsrc> ... <dst>: \tCopy files " + "from the local file system \n\t\tinto fs. \n";
  String copyFromLocal="-copyFromLocal <localsrc> ... <dst>:" + " Identical to the -put command.\n";
  String moveFromLocal="-moveFromLocal <localsrc> ... <dst>:" + " Same as -put, except that the source is\n\t\tdeleted after it's copied.\n";
  String get=GET_SHORT_USAGE + ":  Copy files that match the file pattern <src> \n" + "\t\tto the local name.  <src> is kept.  When copying mutiple, \n"+ "\t\tfiles, the destination must be a directory. \n";
  String copyToLocal=COPYTOLOCAL_SHORT_USAGE + ":  Identical to the -get command.\n";
  String moveToLocal="-moveToLocal <src> <localdst>:  Not implemented yet \n";
  String test="-test -[ezd] <path>: If file { exists, has zero length, is a directory\n" + "\t\tthen return 0, else return 1.\n";
  String help="-help [cmd]: \tDisplays help for given command or all commands if none\n" + "\t\tis specified.\n";
  Command instance=commandFactory.getInstance("-" + cmd);
  if (instance != null) {
    printHelp(instance);
  }
 else   if ("fs".equals(cmd)) {
    System.out.println(fs);
  }
 else   if ("conf".equals(cmd)) {
    System.out.println(conf);
  }
 else   if ("D".equals(cmd)) {
    System.out.println(D);
  }
 else   if ("df".equals(cmd)) {
    System.out.println(df);
  }
 else   if ("du".equals(cmd)) {
    System.out.println(du);
  }
 else   if ("dus".equals(cmd)) {
    System.out.println(dus);
  }
 else   if ("mv".equals(cmd)) {
    System.out.println(mv);
  }
 else   if ("cp".equals(cmd)) {
    System.out.println(cp);
  }
 else   if ("put".equals(cmd)) {
    System.out.println(put);
  }
 else   if ("copyFromLocal".equals(cmd)) {
    System.out.println(copyFromLocal);
  }
 else   if ("moveFromLocal".equals(cmd)) {
    System.out.println(moveFromLocal);
  }
 else   if ("get".equals(cmd)) {
    System.out.println(get);
  }
 else   if ("copyToLocal".equals(cmd)) {
    System.out.println(copyToLocal);
  }
 else   if ("moveToLocal".equals(cmd)) {
    System.out.println(moveToLocal);
  }
 else   if ("get".equals(cmd)) {
    System.out.println(get);
  }
 else   if ("test".equals(cmd)) {
    System.out.println(test);
  }
 else   if ("help".equals(cmd)) {
    System.out.println(help);
  }
 else {
    System.out.println(summary);
    for (    String thisCmdName : commandFactory.getNames()) {
      instance=commandFactory.getInstance(thisCmdName);
      System.out.println("\t[" + instance.getUsage() + "]");
    }
    System.out.println("\t[-help [cmd]]\n");
    System.out.println(fs);
    System.out.println(df);
    System.out.println(du);
    System.out.println(dus);
    System.out.println(mv);
    System.out.println(cp);
    System.out.println(put);
    System.out.println(copyFromLocal);
    System.out.println(moveFromLocal);
    System.out.println(get);
    System.out.println(copyToLocal);
    System.out.println(moveToLocal);
    System.out.println(test);
    for (    String thisCmdName : commandFactory.getNames()) {
      printHelp(commandFactory.getInstance(thisCmdName));
    }
    System.out.println(help);
  }
}
