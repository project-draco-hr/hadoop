{
  if (currentAggOp == null) {
    currentColumnCells.add(cell);
    nextCell(limit);
    return;
  }
switch (currentAggOp) {
case MIN:
    if (currentColumnCells.size() == 0) {
      currentColumnCells.add(cell);
    }
 else {
      Cell currentMinCell=currentColumnCells.first();
      Cell newMinCell=compareCellValues(currentMinCell,cell,currentAggOp);
      if (!currentMinCell.equals(newMinCell)) {
        currentColumnCells.remove(currentMinCell);
        currentColumnCells.add(newMinCell);
      }
    }
  break;
case MAX:
if (currentColumnCells.size() == 0) {
  currentColumnCells.add(cell);
}
 else {
  Cell currentMaxCell=currentColumnCells.first();
  Cell newMaxCell=compareCellValues(currentMaxCell,cell,currentAggOp);
  if (!currentMaxCell.equals(newMaxCell)) {
    currentColumnCells.remove(currentMaxCell);
    currentColumnCells.add(newMaxCell);
  }
}
break;
case SUM:
case SUM_FINAL:
List<Tag> tags=Tag.asList(cell.getTagsArray(),cell.getTagsOffset(),cell.getTagsLength());
String aggDim=getAggregationCompactionDimension(tags);
if (alreadySeenAggDim.contains(aggDim)) {
}
 else {
currentColumnCells.add(cell);
alreadySeenAggDim.add(aggDim);
}
break;
default :
break;
}
}
