{
  if ((currentColumnCells == null) || (currentColumnCells.size() == 0)) {
    return 0;
  }
  if (currentAggOp == null) {
    cells.addAll(currentColumnCells);
    return currentColumnCells.size();
  }
  if (LOG.isTraceEnabled()) {
    LOG.trace("In emitCells " + this.action + " currentColumnCells size= "+ currentColumnCells.size()+ " currentAggOp"+ currentAggOp);
  }
switch (currentAggOp) {
case GLOBAL_MIN:
case GLOBAL_MAX:
    cells.addAll(currentColumnCells);
  return currentColumnCells.size();
case SUM:
case SUM_FINAL:
switch (action) {
case FLUSH:
case MINOR_COMPACTION:
  cells.addAll(currentColumnCells);
return currentColumnCells.size();
case READ:
Cell sumCell=processSummation(currentColumnCells,converter);
cells.add(sumCell);
return 1;
case MAJOR_COMPACTION:
List<Cell> finalCells=processSummationMajorCompaction(currentColumnCells,converter,currentTimestamp);
cells.addAll(finalCells);
return finalCells.size();
default :
cells.addAll(currentColumnCells);
return currentColumnCells.size();
}
default :
cells.addAll(currentColumnCells);
return currentColumnCells.size();
}
}
