{
  HttpURLConnection connection;
  try {
    connection=(HttpURLConnection)connectionFactory.openConnection(url,isSpnegoEnabled);
  }
 catch (  AuthenticationException e) {
    throw new IOException(e);
  }
  setTimeout(connection);
  if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
    throw new HttpGetFailedException("Image transfer servlet at " + url + " failed with status code "+ connection.getResponseCode()+ "\nResponse message:\n"+ connection.getResponseMessage(),connection);
  }
  long advertisedSize;
  String contentLength=connection.getHeaderField(CONTENT_LENGTH);
  if (contentLength != null) {
    advertisedSize=Long.parseLong(contentLength);
  }
 else {
    throw new IOException(CONTENT_LENGTH + " header is not provided " + "by the namenode when trying to fetch "+ url);
  }
  MD5Hash advertisedDigest=parseMD5Header(connection);
  String fsImageName=connection.getHeaderField(ImageServlet.HADOOP_IMAGE_EDITS_HEADER);
  InputStream stream=connection.getInputStream();
  return receiveFile(url.toExternalForm(),localPaths,dstStorage,getChecksum,advertisedSize,advertisedDigest,fsImageName,stream,null);
}
