{
  final Path sCopy;
  try {
    sCopy=ConverterUtils.getPathFromYarnURL(resource.getResource());
  }
 catch (  URISyntaxException e) {
    throw new IOException("Invalid resource",e);
  }
  createDir(destDirPath,cachePerms);
  final Path dst_work=new Path(destDirPath + "_tmp");
  createDir(dst_work,cachePerms);
  Path dFinal=files.makeQualified(new Path(dst_work,sCopy.getName()));
  try {
    Path dTmp=null == userUgi ? files.makeQualified(copy(sCopy,dst_work)) : userUgi.doAs(new PrivilegedExceptionAction<Path>(){
      public Path run() throws Exception {
        return files.makeQualified(copy(sCopy,dst_work));
      }
    }
);
    Pattern pattern=null;
    String p=resource.getPattern();
    if (p != null) {
      pattern=Pattern.compile(p);
    }
    unpack(new File(dTmp.toUri()),new File(dFinal.toUri()),pattern);
    changePermissions(dFinal.getFileSystem(conf),dFinal);
    files.rename(dst_work,destDirPath,Rename.OVERWRITE);
  }
 catch (  Exception e) {
    try {
      files.delete(destDirPath,true);
    }
 catch (    IOException ignore) {
    }
    throw e;
  }
 finally {
    try {
      files.delete(dst_work,true);
    }
 catch (    FileNotFoundException ignore) {
    }
    conf=null;
    resource=null;
  }
  return files.makeQualified(new Path(destDirPath,sCopy.getName()));
}
