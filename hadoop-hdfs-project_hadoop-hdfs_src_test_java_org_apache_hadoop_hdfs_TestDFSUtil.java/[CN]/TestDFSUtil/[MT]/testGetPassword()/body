{
  File testDir=new File(System.getProperty("test.build.data","target/test-dir"));
  Configuration conf=new Configuration();
  final String ourUrl=JavaKeyStoreProvider.SCHEME_NAME + "://file/" + testDir+ "/test.jks";
  File file=new File(testDir,"test.jks");
  file.delete();
  conf.set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,ourUrl);
  CredentialProvider provider=CredentialProviderFactory.getProviders(conf).get(0);
  char[] keypass={'k','e','y','p','a','s','s'};
  char[] storepass={'s','t','o','r','e','p','a','s','s'};
  char[] trustpass={'t','r','u','s','t','p','a','s','s'};
  assertEquals(null,provider.getCredentialEntry(DFS_SERVER_HTTPS_KEYPASSWORD_KEY));
  assertEquals(null,provider.getCredentialEntry(DFS_SERVER_HTTPS_KEYSTORE_PASSWORD_KEY));
  assertEquals(null,provider.getCredentialEntry(DFS_SERVER_HTTPS_TRUSTSTORE_PASSWORD_KEY));
  try {
    provider.createCredentialEntry(DFS_SERVER_HTTPS_KEYPASSWORD_KEY,keypass);
    provider.createCredentialEntry(DFS_SERVER_HTTPS_KEYSTORE_PASSWORD_KEY,storepass);
    provider.createCredentialEntry(DFS_SERVER_HTTPS_TRUSTSTORE_PASSWORD_KEY,trustpass);
    provider.flush();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
  assertArrayEquals(keypass,provider.getCredentialEntry(DFS_SERVER_HTTPS_KEYPASSWORD_KEY).getCredential());
  assertArrayEquals(storepass,provider.getCredentialEntry(DFS_SERVER_HTTPS_KEYSTORE_PASSWORD_KEY).getCredential());
  assertArrayEquals(trustpass,provider.getCredentialEntry(DFS_SERVER_HTTPS_TRUSTSTORE_PASSWORD_KEY).getCredential());
  Assert.assertEquals("keypass",DFSUtil.getPassword(conf,DFS_SERVER_HTTPS_KEYPASSWORD_KEY));
  Assert.assertEquals("storepass",DFSUtil.getPassword(conf,DFS_SERVER_HTTPS_KEYSTORE_PASSWORD_KEY));
  Assert.assertEquals("trustpass",DFSUtil.getPassword(conf,DFS_SERVER_HTTPS_TRUSTSTORE_PASSWORD_KEY));
  Assert.assertEquals(null,DFSUtil.getPassword(conf,"invalid-alias"));
}
