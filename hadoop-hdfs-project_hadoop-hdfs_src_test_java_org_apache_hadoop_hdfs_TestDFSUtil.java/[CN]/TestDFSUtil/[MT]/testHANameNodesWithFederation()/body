{
  HdfsConfiguration conf=new HdfsConfiguration();
  final String NS1_NN1_HOST="ns1-nn1.example.com:9820";
  final String NS1_NN2_HOST="ns1-nn2.example.com:9820";
  final String NS2_NN1_HOST="ns2-nn1.example.com:9820";
  final String NS2_NN2_HOST="ns2-nn2.example.com:9820";
  conf.set(CommonConfigurationKeys.FS_DEFAULT_NAME_KEY,"hdfs://ns1");
  conf.set(DFS_NAMESERVICES,"ns1,ns2");
  conf.set(DFSUtil.addKeySuffixes(DFS_HA_NAMENODES_KEY_PREFIX,"ns1"),"ns1-nn1,ns1-nn2");
  conf.set(DFSUtil.addKeySuffixes(DFS_HA_NAMENODES_KEY_PREFIX,"ns2"),"ns2-nn1,ns2-nn2");
  conf.set(DFSUtil.addKeySuffixes(DFS_NAMENODE_RPC_ADDRESS_KEY,"ns1","ns1-nn1"),NS1_NN1_HOST);
  conf.set(DFSUtil.addKeySuffixes(DFS_NAMENODE_RPC_ADDRESS_KEY,"ns1","ns1-nn2"),NS1_NN2_HOST);
  conf.set(DFSUtil.addKeySuffixes(DFS_NAMENODE_RPC_ADDRESS_KEY,"ns2","ns2-nn1"),NS2_NN1_HOST);
  conf.set(DFSUtil.addKeySuffixes(DFS_NAMENODE_RPC_ADDRESS_KEY,"ns2","ns2-nn2"),NS2_NN2_HOST);
  Map<String,Map<String,InetSocketAddress>> map=DFSUtil.getHaNnRpcAddresses(conf);
  assertTrue(HAUtil.isHAEnabled(conf,"ns1"));
  assertTrue(HAUtil.isHAEnabled(conf,"ns2"));
  assertFalse(HAUtil.isHAEnabled(conf,"ns3"));
  assertEquals(NS1_NN1_HOST,map.get("ns1").get("ns1-nn1").toString());
  assertEquals(NS1_NN2_HOST,map.get("ns1").get("ns1-nn2").toString());
  assertEquals(NS2_NN1_HOST,map.get("ns2").get("ns2-nn1").toString());
  assertEquals(NS2_NN2_HOST,map.get("ns2").get("ns2-nn2").toString());
  assertEquals(NS1_NN1_HOST,DFSUtil.getNamenodeServiceAddr(conf,"ns1","ns1-nn1"));
  assertEquals(NS1_NN2_HOST,DFSUtil.getNamenodeServiceAddr(conf,"ns1","ns1-nn2"));
  assertEquals(NS2_NN1_HOST,DFSUtil.getNamenodeServiceAddr(conf,"ns2","ns2-nn1"));
  assertEquals(null,DFSUtil.getNamenodeServiceAddr(conf,null,"ns1-nn1"));
  assertEquals(null,DFSUtil.getNamenodeNameServiceId(conf));
  assertEquals(null,DFSUtil.getSecondaryNameServiceId(conf));
  String proxyProviderKey=HdfsClientConfigKeys.Failover.PROXY_PROVIDER_KEY_PREFIX + ".ns2";
  conf.set(proxyProviderKey,"org.apache.hadoop.hdfs.server.namenode.ha." + "ConfiguredFailoverProxyProvider");
  Collection<URI> uris=getInternalNameServiceUris(conf,DFS_NAMENODE_RPC_ADDRESS_KEY);
  assertEquals(2,uris.size());
  assertTrue(uris.contains(new URI("hdfs://ns1")));
  assertTrue(uris.contains(new URI("hdfs://ns2")));
}
