{
  AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
  queueName=queue.getName();
  schedulingPolicy=queue.getPolicy().getName();
  clusterResources=new ResourceInfo(scheduler.getClusterCapacity());
  usedResources=new ResourceInfo(queue.getResourceUsage());
  fractionMemUsed=(float)usedResources.getMemory() / clusterResources.getMemory();
  fairResources=new ResourceInfo(queue.getFairShare());
  minResources=new ResourceInfo(queue.getMinShare());
  maxResources=new ResourceInfo(queue.getMaxShare());
  maxResources=new ResourceInfo(Resources.componentwiseMin(queue.getMaxShare(),scheduler.getClusterCapacity()));
  fractionMemFairShare=(float)fairResources.getMemory() / clusterResources.getMemory();
  fractionMemMinShare=(float)minResources.getMemory() / clusterResources.getMemory();
  fractionMemMaxShare=(float)maxResources.getMemory() / clusterResources.getMemory();
  maxApps=allocConf.getQueueMaxApps(queueName);
  Collection<FSQueue> children=queue.getChildQueues();
  childQueues=new ArrayList<FairSchedulerQueueInfo>();
  for (  FSQueue child : children) {
    if (child instanceof FSLeafQueue) {
      childQueues.add(new FairSchedulerLeafQueueInfo((FSLeafQueue)child,scheduler));
    }
 else {
      childQueues.add(new FairSchedulerQueueInfo(child,scheduler));
    }
  }
}
