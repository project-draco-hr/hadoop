{
  AllocationConfiguration allocConf=scheduler.getAllocationConfiguration();
  queueName=queue.getName();
  schedulingPolicy=queue.getPolicy().getName();
  clusterResources=new ResourceInfo(scheduler.getClusterResource());
  usedResources=new ResourceInfo(queue.getResourceUsage());
  fractionMemUsed=(float)usedResources.getMemory() / clusterResources.getMemory();
  steadyFairResources=new ResourceInfo(queue.getSteadyFairShare());
  fairResources=new ResourceInfo(queue.getFairShare());
  minResources=new ResourceInfo(queue.getMinShare());
  maxResources=new ResourceInfo(queue.getMaxShare());
  maxResources=new ResourceInfo(Resources.componentwiseMin(queue.getMaxShare(),scheduler.getClusterResource()));
  fractionMemSteadyFairShare=(float)steadyFairResources.getMemory() / clusterResources.getMemory();
  fractionMemFairShare=(float)fairResources.getMemory() / clusterResources.getMemory();
  fractionMemMinShare=(float)minResources.getMemory() / clusterResources.getMemory();
  fractionMemMaxShare=(float)maxResources.getMemory() / clusterResources.getMemory();
  maxApps=allocConf.getQueueMaxApps(queueName);
  pendingContainers=queue.getMetrics().getPendingContainers();
  allocatedContainers=queue.getMetrics().getAllocatedContainers();
  reservedContainers=queue.getMetrics().getReservedContainers();
  if (allocConf.isReservable(queueName) && !allocConf.getShowReservationAsQueues(queueName)) {
    return;
  }
  childQueues=getChildQueues(queue,scheduler);
}
