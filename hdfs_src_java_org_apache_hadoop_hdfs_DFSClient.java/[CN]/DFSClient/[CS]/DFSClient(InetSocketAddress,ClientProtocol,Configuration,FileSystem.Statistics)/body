{
  this.conf=conf;
  this.stats=stats;
  this.socketTimeout=conf.getInt(DFSConfigKeys.DFS_CLIENT_SOCKET_TIMEOUT_KEY,HdfsConstants.READ_TIMEOUT);
  this.socketFactory=NetUtils.getSocketFactory(conf,ClientProtocol.class);
  this.writePacketSize=conf.getInt(DFSConfigKeys.DFS_CLIENT_WRITE_PACKET_SIZE_KEY,DFSConfigKeys.DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT);
  this.dtpReplaceDatanodeOnFailure=ReplaceDatanodeOnFailure.get(conf);
  this.hdfsTimeout=Client.getTimeout(conf);
  this.ugi=UserGroupInformation.getCurrentUser();
  final String authority=nameNodeAddr == null ? "null" : nameNodeAddr.getHostName() + ":" + nameNodeAddr.getPort();
  this.leaserenewer=LeaseRenewer.getInstance(authority,ugi,this);
  String taskId=conf.get("mapreduce.task.attempt.id","NONMAPREDUCE");
  this.clientName=leaserenewer.getClientName(taskId);
  defaultBlockSize=conf.getLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DEFAULT_BLOCK_SIZE);
  defaultReplication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,DFSConfigKeys.DFS_REPLICATION_DEFAULT);
  this.socketCache=new SocketCache(conf.getInt(DFSConfigKeys.DFS_CLIENT_SOCKET_CACHE_CAPACITY_KEY,DFSConfigKeys.DFS_CLIENT_SOCKET_CACHE_CAPACITY_DEFAULT));
  if (nameNodeAddr != null && rpcNamenode == null) {
    this.rpcNamenode=createRPCNamenode(nameNodeAddr,conf,ugi);
    this.namenode=createNamenode(this.rpcNamenode);
  }
 else   if (nameNodeAddr == null && rpcNamenode != null) {
    this.namenode=this.rpcNamenode=rpcNamenode;
  }
 else {
    throw new IllegalArgumentException("Expecting exactly one of nameNodeAddr and rpcNamenode being null: " + "nameNodeAddr=" + nameNodeAddr + ", rpcNamenode="+ rpcNamenode);
  }
}
