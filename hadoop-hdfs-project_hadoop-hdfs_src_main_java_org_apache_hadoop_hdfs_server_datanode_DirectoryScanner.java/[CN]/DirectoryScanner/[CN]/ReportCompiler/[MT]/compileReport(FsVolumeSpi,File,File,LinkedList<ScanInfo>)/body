{
  throttle();
  List<String> fileNames;
  try {
    fileNames=IOUtils.listDirectory(dir,BlockDirFilter.INSTANCE);
  }
 catch (  IOException ioe) {
    LOG.warn("Exception occured while compiling report: ",ioe);
    datanode.checkDiskErrorAsync();
    return report;
  }
  Collections.sort(fileNames);
  for (int i=0; i < fileNames.size(); i++) {
    if (Thread.interrupted()) {
      throw new InterruptedException();
    }
    File file=new File(dir,fileNames.get(i));
    if (file.isDirectory()) {
      compileReport(vol,bpFinalizedDir,file,report);
      continue;
    }
    if (!Block.isBlockFilename(file)) {
      if (isBlockMetaFile(Block.BLOCK_FILE_PREFIX,file.getName())) {
        long blockId=Block.getBlockId(file.getName());
        verifyFileLocation(file.getParentFile(),bpFinalizedDir,blockId);
        report.add(new ScanInfo(blockId,null,file,vol));
      }
      continue;
    }
    File blockFile=file;
    long blockId=Block.filename2id(file.getName());
    File metaFile=null;
    while (i + 1 < fileNames.size()) {
      File blkMetaFile=new File(dir,fileNames.get(i + 1));
      if (!(blkMetaFile.isFile() && blkMetaFile.getName().startsWith(blockFile.getName()))) {
        break;
      }
      i++;
      if (isBlockMetaFile(blockFile.getName(),blkMetaFile.getName())) {
        metaFile=blkMetaFile;
        break;
      }
    }
    verifyFileLocation(blockFile,bpFinalizedDir,blockId);
    report.add(new ScanInfo(blockId,blockFile,metaFile,vol));
  }
  return report;
}
