{
  this.datanode=datanode;
  this.dataset=dataset;
  int interval=conf.getInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY,DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_DEFAULT);
  scanPeriodMsecs=interval * MILLIS_PER_SECOND;
  int throttle=conf.getInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY,DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_DEFAULT);
  if ((throttle > MILLIS_PER_SECOND) || (throttle <= 0)) {
    if (throttle > MILLIS_PER_SECOND) {
      LOG.error(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY + " set to value above 1000 ms/sec. Assuming default value of " + DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_DEFAULT);
    }
 else {
      LOG.error(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY + " set to value below 1 ms/sec. Assuming default value of " + DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_DEFAULT);
    }
    throttleLimitMsPerSec=DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_DEFAULT;
  }
 else {
    throttleLimitMsPerSec=throttle;
  }
  int threads=conf.getInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY,DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THREADS_DEFAULT);
  reportCompileThreadPool=Executors.newFixedThreadPool(threads,new Daemon.DaemonFactory());
  masterThread=new ScheduledThreadPoolExecutor(1,new Daemon.DaemonFactory());
}
