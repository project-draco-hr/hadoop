def parse_options_and_config(command, option_list=[], extra_arguments=(), unbounded_args=False):
    '\n  Parse the arguments to command using the given option list, and combine with\n  any configuration parameters.\n\n  If unbounded_args is true then there must be at least as many extra arguments\n  as specified by extra_arguments (the first argument is always CLUSTER).\n  Otherwise there must be exactly the same number of arguments as\n  extra_arguments.\n  '
    expected_arguments = ['CLUSTER']
    expected_arguments.extend(extra_arguments)
    (options_dict, args) = parse_options(command, option_list, expected_arguments, unbounded_args)
    config_dir = get_config_dir(options_dict)
    config_files = [os.path.join(config_dir, CONFIG_FILENAME)]
    if ('config_dir' not in options_dict):
        config_files.insert(0, CONFIG_FILENAME)
    config = ConfigParser.ConfigParser()
    read_files = config.read(config_files)
    logging.debug('Read %d configuration files: %s', len(read_files), ', '.join(read_files))
    cluster_name = args[0]
    opt = merge_config_with_options(cluster_name, config, options_dict)
    logging.debug('Options: %s', str(opt))
    service_name = get_service_name(opt)
    cloud_provider = get_cloud_provider(opt)
    cluster = get_cluster(cloud_provider)(cluster_name, config_dir)
    service = get_service(service_name, cloud_provider)(cluster)
    return (opt, args, service)
