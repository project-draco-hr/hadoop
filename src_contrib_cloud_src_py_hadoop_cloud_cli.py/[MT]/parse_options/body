def parse_options(command, option_list=[], expected_arguments=(), unbounded_args=False):
    '\n  Parse the arguments to command using the given option list.\n\n  If unbounded_args is true then there must be at least as many extra arguments\n  as specified by extra_arguments (the first argument is always CLUSTER).\n  Otherwise there must be exactly the same number of arguments as\n  extra_arguments.\n  '
    config_file_name = ('%s/%s' % (DEFAULT_CONFIG_DIR_NAME, CONFIG_FILENAME))
    usage = ("%%prog %s [options] %s\n\nOptions may also be specified in a configuration file called\n%s located in the user's home directory.\nOptions specified on the command line take precedence over any in the\nconfiguration file." % (command, ' '.join(expected_arguments), config_file_name))
    parser = OptionParser(usage=usage, version=('%%prog %s' % VERSION), option_list=option_list)
    parser.disable_interspersed_args()
    (options, args) = parser.parse_args(sys.argv[2:])
    if unbounded_args:
        if (len(args) < len(expected_arguments)):
            parser.error('incorrect number of arguments')
    elif (len(args) != len(expected_arguments)):
        parser.error('incorrect number of arguments')
    return (vars(options), args)
