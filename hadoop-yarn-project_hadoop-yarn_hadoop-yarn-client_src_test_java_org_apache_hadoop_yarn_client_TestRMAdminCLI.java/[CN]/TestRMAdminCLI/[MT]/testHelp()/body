{
  PrintStream oldOutPrintStream=System.out;
  PrintStream oldErrPrintStream=System.err;
  ByteArrayOutputStream dataOut=new ByteArrayOutputStream();
  ByteArrayOutputStream dataErr=new ByteArrayOutputStream();
  System.setOut(new PrintStream(dataOut));
  System.setErr(new PrintStream(dataErr));
  try {
    String[] args={"-help"};
    assertEquals(0,rmAdminCLI.run(args));
    assertTrue(dataOut.toString().contains("rmadmin is the command to execute Map-Reduce" + " administrative commands."));
    assertTrue(dataOut.toString().contains("hadoop rmadmin [-refreshQueues] [-refreshNodes] [-refreshSuper" + "UserGroupsConfiguration] [-refreshUserToGroupsMappings] " + "[-refreshAdminAcls] [-refreshServiceAcl] [-getGroup"+ " [username]] [-help [cmd]]"));
    assertTrue(dataOut.toString().contains("-refreshQueues: Reload the queues' acls, states and scheduler " + "specific properties."));
    assertTrue(dataOut.toString().contains("-refreshNodes: Refresh the hosts information at the " + "ResourceManager."));
    assertTrue(dataOut.toString().contains("-refreshUserToGroupsMappings: Refresh user-to-groups mappings"));
    assertTrue(dataOut.toString().contains("-refreshSuperUserGroupsConfiguration: Refresh superuser proxy" + " groups mappings"));
    assertTrue(dataOut.toString().contains("-refreshAdminAcls: Refresh acls for administration of " + "ResourceManager"));
    assertTrue(dataOut.toString().contains("-refreshServiceAcl: Reload the service-level authorization" + " policy file"));
    assertTrue(dataOut.toString().contains("-help [cmd]: \tDisplays help for the given command or all " + "commands if none"));
    testError(new String[]{"-help","-refreshQueues"},"Usage: java RMAdmin [-refreshQueues]",dataErr,0);
    testError(new String[]{"-help","-refreshNodes"},"Usage: java RMAdmin [-refreshNodes]",dataErr,0);
    testError(new String[]{"-help","-refreshUserToGroupsMappings"},"Usage: java RMAdmin [-refreshUserToGroupsMappings]",dataErr,0);
    testError(new String[]{"-help","-refreshSuperUserGroupsConfiguration"},"Usage: java RMAdmin [-refreshSuperUserGroupsConfiguration]",dataErr,0);
    testError(new String[]{"-help","-refreshAdminAcls"},"Usage: java RMAdmin [-refreshAdminAcls]",dataErr,0);
    testError(new String[]{"-help","-refreshService"},"Usage: java RMAdmin [-refreshServiceAcl]",dataErr,0);
    testError(new String[]{"-help","-getGroups"},"Usage: java RMAdmin [-getGroups [username]]",dataErr,0);
    testError(new String[]{"-help","-badParameter"},"Usage: java RMAdmin",dataErr,0);
    testError(new String[]{"-badParameter"},"badParameter: Unknown command",dataErr,-1);
  }
  finally {
    System.setOut(oldOutPrintStream);
    System.setErr(oldErrPrintStream);
  }
}
