{
  this.jobConf=job;
  this.reporter=reporter;
  this.scheduler=scheduler;
  this.merger=merger;
  this.metrics=metrics;
  this.exceptionReporter=exceptionReporter;
  this.id=id;
  this.reduce=reduceId.getTaskID().getId();
  this.shuffleSecretKey=shuffleKey;
  ioErrs=reporter.getCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.IO_ERROR.toString());
  wrongLengthErrs=reporter.getCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_LENGTH.toString());
  badIdErrs=reporter.getCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.BAD_ID.toString());
  wrongMapErrs=reporter.getCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_MAP.toString());
  connectionErrs=reporter.getCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.CONNECTION.toString());
  wrongReduceErrs=reporter.getCounter(SHUFFLE_ERR_GRP_NAME,ShuffleErrors.WRONG_REDUCE.toString());
  this.connectionTimeout=job.getInt(MRJobConfig.SHUFFLE_CONNECT_TIMEOUT,DEFAULT_STALLED_COPY_TIMEOUT);
  this.readTimeout=job.getInt(MRJobConfig.SHUFFLE_READ_TIMEOUT,DEFAULT_READ_TIMEOUT);
  setName("fetcher#" + id);
  setDaemon(true);
synchronized (Fetcher.class) {
    sslShuffle=job.getBoolean(MRConfig.SHUFFLE_SSL_ENABLED_KEY,MRConfig.SHUFFLE_SSL_ENABLED_DEFAULT);
    if (sslShuffle && sslFactory == null) {
      sslFactory=new SSLFactory(SSLFactory.Mode.CLIENT,job);
      try {
        sslFactory.init();
      }
 catch (      Exception ex) {
        sslFactory.destroy();
        throw new RuntimeException(ex);
      }
    }
  }
}
