{
  taskTrackerManager=new FakeTaskTrackerManager(1,2,2);
  taskTrackerManager.addQueues(new String[]{"default"});
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",100.0f,true,25));
  scheduler.setTaskTrackerManager(taskTrackerManager);
  scheduler.getConf().setLong(JTConfig.JT_MAX_MAPMEMORY_MB,2 * 1024);
  scheduler.getConf().setLong(MRConfig.MAPMEMORY_MB,1 * 1024);
  scheduler.getConf().setLong(JTConfig.JT_MAX_REDUCEMEMORY_MB,1 * 1024);
  scheduler.getConf().setLong(MRConfig.REDUCEMEMORY_MB,1 * 1024);
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  LOG.debug("Submit one high memory(2GB maps, 0MB reduces) job of " + "2 map tasks");
  JobConf jConf=new JobConf(conf);
  jConf.setMemoryForMapTask(2 * 1024);
  jConf.setMemoryForReduceTask(0);
  jConf.setNumMapTasks(2);
  jConf.setNumReduceTasks(0);
  jConf.setQueueName("default");
  jConf.setUser("u1");
  FakeJobInProgress job1=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  LOG.debug("Submit another regular memory(1GB vmem maps/reduces) job of " + "2 map/red tasks");
  jConf=new JobConf(conf);
  jConf.setMemoryForMapTask(1 * 1024);
  jConf.setMemoryForReduceTask(1 * 1024);
  jConf.setNumMapTasks(2);
  jConf.setNumReduceTasks(2);
  jConf.setQueueName("default");
  jConf.setUser("u1");
  FakeJobInProgress job2=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  Map<String,String> strs=new HashMap<String,String>();
  strs.put(MAP,"attempt_test_0001_m_000001_0 on tt1");
  strs.put(REDUCE,"attempt_test_0002_r_000001_0 on tt1");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",strs);
  checkOccupiedSlots("default",TaskType.MAP,1,2,100.0f);
  checkOccupiedSlots("default",TaskType.REDUCE,1,1,50.0f);
  checkMemReservedForTasksOnTT("tt1",2 * 1024L,1 * 1024L);
  checkAssignment(taskTrackerManager,scheduler,"tt1","attempt_test_0002_r_000002_0 on tt1");
  checkOccupiedSlots("default",TaskType.MAP,1,2,100.0f);
  checkOccupiedSlots("default",TaskType.REDUCE,1,2,100.0f);
  checkMemReservedForTasksOnTT("tt1",2 * 1024L,2 * 1024L);
  assertNull(scheduler.assignTasks(tracker("tt1")));
}
