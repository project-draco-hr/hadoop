{
  String[] qs={"default"};
  taskTrackerManager=new FakeTaskTrackerManager(2,1,1);
  scheduler.setTaskTrackerManager(taskTrackerManager);
  taskTrackerManager.addQueues(qs);
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",100.0f,true,100));
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  JobQueuesManager mgr=scheduler.jobQueuesManager;
  JobInitializationPoller initPoller=scheduler.getInitializationPoller();
  HashMap<String,ArrayList<FakeJobInProgress>> userJobs=taskTrackerManager.submitJobs(3,4,"default");
  ArrayList<FakeJobInProgress> u1Jobs=userJobs.get("u1");
  ArrayList<FakeJobInProgress> u2Jobs=userJobs.get("u2");
  ArrayList<FakeJobInProgress> u3Jobs=userJobs.get("u3");
  Set<JobID> initializedJobs=initPoller.getInitializedJobList();
  assertEquals(mgr.getJobQueue("default").getWaitingJobs().size(),12);
  controlledInitializationPoller.selectJobsToInitialize();
  assertEquals(initializedJobs.size(),6);
  assertTrue("Initialized jobs didnt contain the user1 job 1",initializedJobs.contains(u1Jobs.get(0).getJobID()));
  assertTrue("Initialized jobs didnt contain the user1 job 2",initializedJobs.contains(u1Jobs.get(1).getJobID()));
  assertTrue("Initialized jobs didnt contain the user2 job 1",initializedJobs.contains(u2Jobs.get(0).getJobID()));
  assertTrue("Initialized jobs didnt contain the user2 job 2",initializedJobs.contains(u2Jobs.get(1).getJobID()));
  assertTrue("Initialized jobs didnt contain the user3 job 1",initializedJobs.contains(u3Jobs.get(0).getJobID()));
  assertTrue("Initialized jobs didnt contain the user3 job 2",initializedJobs.contains(u3Jobs.get(1).getJobID()));
  FakeJobInProgress u4j1=taskTrackerManager.submitJob(JobStatus.PREP,1,1,"default","u4");
  controlledInitializationPoller.selectJobsToInitialize();
  assertEquals(initializedJobs.size(),6);
  assertFalse("Initialized jobs contains user 4 jobs",initializedJobs.contains(u4j1.getJobID()));
  raiseStatusChangeEvents(mgr);
  Map<String,String> expectedStrings=new HashMap<String,String>();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000001_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000001_0 on tt1");
  List<Task> t1=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0002_m_000001_0 on tt2");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_000001_0 on tt2");
  List<Task> t2=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt2",expectedStrings);
  for (  Task task : t1) {
    taskTrackerManager.finishTask(task.getTaskID().toString(),u1Jobs.get(0));
  }
  for (  Task task : t2) {
    taskTrackerManager.finishTask(task.getTaskID().toString(),u1Jobs.get(0));
  }
  controlledInitializationPoller.selectJobsToInitialize();
  assertEquals(initializedJobs.size(),6);
  assertTrue(initializedJobs.contains(u1Jobs.get(2).getJobID()));
  assertTrue(initializedJobs.contains(u1Jobs.get(3).getJobID()));
  raiseStatusChangeEvents(mgr);
  assertFalse("Initialized jobs contains the user1 job 1",initializedJobs.contains(u1Jobs.get(0).getJobID()));
  assertFalse("Initialized jobs contains the user1 job 2",initializedJobs.contains(u1Jobs.get(1).getJobID()));
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0003_m_000001_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0003_r_000001_0 on tt1");
  t1=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  for (  Task task : t1) {
    taskTrackerManager.finishTask(task.getTaskID().toString(),u1Jobs.get(2));
  }
  controlledInitializationPoller.selectJobsToInitialize();
  assertEquals(initializedJobs.size(),5);
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0004_m_000001_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0004_r_000001_0 on tt1");
  t1=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  for (  Task task : t1) {
    taskTrackerManager.finishTask(task.getTaskID().toString(),u1Jobs.get(3));
  }
  controlledInitializationPoller.selectJobsToInitialize();
  assertEquals(initializedJobs.size(),5);
  assertTrue(initializedJobs.contains(u4j1.getJobID()));
  controlledInitializationPoller.stopRunning();
}
