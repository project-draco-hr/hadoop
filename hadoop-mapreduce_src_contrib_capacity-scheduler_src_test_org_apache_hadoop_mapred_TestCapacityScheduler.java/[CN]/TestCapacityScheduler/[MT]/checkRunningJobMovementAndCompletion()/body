{
  JobQueuesManager mgr=scheduler.jobQueuesManager;
  JobInitializationPoller p=scheduler.getInitializationPoller();
  FakeJobInProgress job=taskTrackerManager.submitJob(JobStatus.PREP,1,1,"default","u1");
  controlledInitializationPoller.selectJobsToInitialize();
  assertEquals(p.getInitializedJobList().size(),1);
  raiseStatusChangeEvents(mgr);
  assertTrue("Job not present in Job Queue",mgr.getJobQueue("default").getWaitingJobs().contains(job));
  assertTrue("Job not present in Running Queue",mgr.getJobQueue("default").getRunningJobs().contains(job));
  Map<String,String> strs=new HashMap<String,String>();
  strs.put(MAP,"attempt_test_0001_m_000001_0 on tt1");
  strs.put(REDUCE,"attempt_test_0001_r_000001_0 on tt1");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",strs);
  controlledInitializationPoller.selectJobsToInitialize();
  assertTrue(p.getInitializedJobList().isEmpty());
  assertFalse("Job present in Job Queue",mgr.getJobQueue("default").getWaitingJobs().contains(job));
  taskTrackerManager.finishTask("attempt_test_0001_m_000001_0",job);
  taskTrackerManager.finishTask("attempt_test_0001_r_000001_0",job);
  taskTrackerManager.finalizeJob(job);
  assertFalse("Job present in running queue",mgr.getJobQueue("default").getRunningJobs().contains(job));
}
