{
  String[] qs={"default"};
  taskTrackerManager=new FakeTaskTrackerManager(2,1,1);
  scheduler.setTaskTrackerManager(taskTrackerManager);
  taskTrackerManager.addQueues(qs);
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",100.0f,true,100));
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  JobQueuesManager mgr=scheduler.jobQueuesManager;
  JobConf conf=new JobConf();
  conf.setNumMapTasks(1);
  conf.setNumReduceTasks(1);
  conf.setMapSpeculativeExecution(true);
  conf.setReduceSpeculativeExecution(true);
  FakeJobInProgress fjob1=taskTrackerManager.submitJob(JobStatus.PREP,conf);
  conf=new JobConf();
  conf.setNumMapTasks(1);
  conf.setNumReduceTasks(1);
  FakeJobInProgress fjob2=taskTrackerManager.submitJob(JobStatus.PREP,conf);
  controlledInitializationPoller.selectJobsToInitialize();
  raiseStatusChangeEvents(mgr);
  Map<String,String> strs=new HashMap<String,String>();
  strs.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000001_0 on tt1");
  strs.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000001_0 on tt1");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",strs);
  assertTrue("Pending maps of job1 greater than zero",(fjob1.pendingMaps() == 0));
  assertTrue("Pending reduces of job1 greater than zero",(fjob1.pendingReduces() == 0));
  Map<String,String> str=new HashMap<String,String>();
  str.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000001_1 on tt2");
  str.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000001_1 on tt2");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt2",str);
  taskTrackerManager.finishTask("attempt_test_0001_m_000001_0",fjob1);
  taskTrackerManager.finishTask("attempt_test_0001_m_000001_1",fjob1);
  taskTrackerManager.finishTask("attempt_test_0001_r_000001_0",fjob1);
  taskTrackerManager.finishTask("attempt_test_0001_r_000001_1",fjob1);
  taskTrackerManager.finalizeJob(fjob1);
  str.clear();
  str.put(CapacityTestUtils.MAP,"attempt_test_0002_m_000001_0 on tt1");
  str.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_000001_0 on tt1");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",str);
  taskTrackerManager.finishTask("attempt_test_0002_m_000001_0",fjob2);
  taskTrackerManager.finishTask("attempt_test_0002_r_000001_0",fjob2);
  taskTrackerManager.finalizeJob(fjob2);
}
