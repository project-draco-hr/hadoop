{
  if (testName == null) {
    testName=binary.getName();
  }
  validatePlatform();
  validateParameters();
  if (!shouldRunTest()) {
    return;
  }
  if (!results.isDirectory()) {
    if (!results.mkdirs()) {
      throw new MojoExecutionException("Failed to create " + "output directory '" + results + "'!");
    }
  }
  List<String> cmd=new LinkedList<String>();
  cmd.add(binary.getAbsolutePath());
  getLog().info("-------------------------------------------------------");
  getLog().info(" C M A K E B U I L D E R    T E S T");
  getLog().info("-------------------------------------------------------");
  StringBuilder bld=new StringBuilder();
  bld.append(testName).append(": running ");
  bld.append(binary.getAbsolutePath());
  for (  String entry : args) {
    cmd.add(entry);
    bld.append(" ").append(entry);
  }
  getLog().info(bld.toString());
  ProcessBuilder pb=new ProcessBuilder(cmd);
  Exec.addEnvironment(pb,env);
  if (workingDirectory != null) {
    pb.directory(workingDirectory);
  }
  pb.redirectError(new File(results,testName + ".stderr"));
  pb.redirectOutput(new File(results,testName + ".stdout"));
  getLog().info("with extra environment variables " + Exec.envToString(env));
  Process proc=null;
  TestThread testThread=null;
  int retCode=-1;
  String status="IN_PROGRESS";
  try {
    writeStatusFile(status);
  }
 catch (  IOException e) {
    throw new MojoExecutionException("Error writing the status file",e);
  }
  long start=System.nanoTime();
  try {
    proc=pb.start();
    testThread=new TestThread(proc);
    testThread.start();
    testThread.join(timeout * 1000);
    if (!testThread.isAlive()) {
      retCode=testThread.retCode();
      testThread=null;
      proc=null;
    }
  }
 catch (  IOException e) {
    throw new MojoExecutionException("IOException while executing the test " + testName,e);
  }
catch (  InterruptedException e) {
    throw new MojoExecutionException("Interrupted while executing " + "the test " + testName,e);
  }
 finally {
    if (testThread != null) {
      testThread.interrupt();
      try {
        testThread.join();
      }
 catch (      InterruptedException e) {
        getLog().error("Interrupted while waiting for testThread",e);
      }
      status="TIMED OUT";
    }
 else     if (retCode == 0) {
      status="SUCCESS";
    }
 else {
      status="ERROR CODE " + String.valueOf(retCode);
    }
    try {
      writeStatusFile(status);
    }
 catch (    Exception e) {
      getLog().error("failed to write status file!",e);
    }
    if (proc != null) {
      proc.destroy();
    }
  }
  long end=System.nanoTime();
  getLog().info("STATUS: " + status + " after "+ TimeUnit.MILLISECONDS.convert(end - start,TimeUnit.NANOSECONDS)+ " millisecond(s).");
  getLog().info("-------------------------------------------------------");
  if (status.equals("TIMED_OUT")) {
    if (expectedResult.equals("success")) {
      throw new MojoExecutionException("Test " + binary + " timed out after "+ timeout+ " seconds!");
    }
  }
 else   if (!status.equals("SUCCESS")) {
    if (expectedResult.equals("success")) {
      throw new MojoExecutionException("Test " + binary + " returned "+ status);
    }
  }
 else   if (expectedResult.equals("failure")) {
    throw new MojoExecutionException("Test " + binary + " succeeded, but we expected failure!");
  }
}
