{
  String path=project.getPersistentProperty(new QualifiedName(Activator.PLUGIN_ID,"hadoop.runtime.path"));
  File dir=new File(path);
  final ArrayList<File> coreJars=new ArrayList<File>();
  dir.listFiles(new FileFilter(){
    public boolean accept(    File pathname){
      String fileName=pathname.getName();
      if ((fileName.indexOf("hadoop") != -1) && (fileName.endsWith("jar")) && (fileName.indexOf("test") == -1)&& (fileName.indexOf("examples") == -1)) {
        coreJars.add(pathname);
      }
      return false;
    }
  }
);
  File dir2=new File(path + File.separatorChar + "lib");
  if (dir2.exists() && dir2.isDirectory()) {
    dir2.listFiles(new FileFilter(){
      public boolean accept(      File pathname){
        if ((!pathname.isDirectory()) && (pathname.getName().endsWith("jar"))) {
          coreJars.add(pathname);
        }
        return false;
      }
    }
);
  }
  IJavaProject javaProject=JavaCore.create(getProject());
  try {
    IClasspathEntry[] currentCp=javaProject.getRawClasspath();
    IClasspathEntry[] newCp=new IClasspathEntry[currentCp.length + coreJars.size()];
    System.arraycopy(currentCp,0,newCp,0,currentCp.length);
    final Iterator<File> i=coreJars.iterator();
    int count=0;
    while (i.hasNext()) {
      final File f=(File)i.next();
      URL url=f.toURI().toURL();
      log.finer("hadoop library url.getPath() = " + url.getPath());
      newCp[newCp.length - 1 - count]=JavaCore.newLibraryEntry(new Path(url.getPath()),null,null);
      count++;
    }
    javaProject.setRawClasspath(newCp,new NullProgressMonitor());
  }
 catch (  Exception e) {
    log.log(Level.SEVERE,"IOException generated in " + this.getClass().getCanonicalName(),e);
  }
}
