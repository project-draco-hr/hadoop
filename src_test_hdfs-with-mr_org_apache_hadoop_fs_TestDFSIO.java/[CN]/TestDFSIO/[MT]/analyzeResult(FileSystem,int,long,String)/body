{
  Path reduceFile;
  if (testType == TEST_TYPE_WRITE)   reduceFile=new Path(WRITE_DIR,"part-00000");
 else   reduceFile=new Path(READ_DIR,"part-00000");
  DataInputStream in;
  in=new DataInputStream(fs.open(reduceFile));
  BufferedReader lines;
  lines=new BufferedReader(new InputStreamReader(in));
  long tasks=0;
  long size=0;
  long time=0;
  float rate=0;
  float sqrate=0;
  String line;
  while ((line=lines.readLine()) != null) {
    StringTokenizer tokens=new StringTokenizer(line," \t\n\r\f%");
    String attr=tokens.nextToken();
    if (attr.endsWith(":tasks"))     tasks=Long.parseLong(tokens.nextToken());
 else     if (attr.endsWith(":size"))     size=Long.parseLong(tokens.nextToken());
 else     if (attr.endsWith(":time"))     time=Long.parseLong(tokens.nextToken());
 else     if (attr.endsWith(":rate"))     rate=Float.parseFloat(tokens.nextToken());
 else     if (attr.endsWith(":sqrate"))     sqrate=Float.parseFloat(tokens.nextToken());
  }
  double med=rate / 1000 / tasks;
  double stdDev=Math.sqrt(Math.abs(sqrate / 1000 / tasks - med * med));
  String resultLines[]={"----- TestDFSIO ----- : " + ((testType == TEST_TYPE_WRITE) ? "write" : (testType == TEST_TYPE_READ) ? "read" : "unknown"),"           Date & time: " + new Date(System.currentTimeMillis()),"       Number of files: " + tasks,"Total MBytes processed: " + size / MEGA,"     Throughput mb/sec: " + size * 1000.0 / (time * MEGA),"Average IO rate mb/sec: " + med," IO rate std deviation: " + stdDev,"    Test exec time sec: " + (float)execTime / 1000,""};
  PrintStream res=new PrintStream(new FileOutputStream(new File(resFileName),true));
  for (int i=0; i < resultLines.length; i++) {
    LOG.info(resultLines[i]);
    res.println(resultLines[i]);
  }
}
