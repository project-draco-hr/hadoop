{
  int testType=TEST_TYPE_READ;
  int bufferSize=DEFAULT_BUFFER_SIZE;
  int fileSize=1;
  int nrFiles=1;
  String resFileName=DEFAULT_RES_FILE_NAME;
  boolean isSequential=false;
  String className=TestDFSIO.class.getSimpleName();
  String version=className + ".0.0.4";
  String usage="Usage: " + className + " -read | -write | -clean [-nrFiles N] [-fileSize MB] [-resFile resultFileName] [-bufferSize Bytes] ";
  System.out.println(version);
  if (args.length == 0) {
    System.err.println(usage);
    System.exit(-1);
  }
  for (int i=0; i < args.length; i++) {
    if (args[i].startsWith("-read")) {
      testType=TEST_TYPE_READ;
    }
 else     if (args[i].equals("-write")) {
      testType=TEST_TYPE_WRITE;
    }
 else     if (args[i].equals("-clean")) {
      testType=TEST_TYPE_CLEANUP;
    }
 else     if (args[i].startsWith("-seq")) {
      isSequential=true;
    }
 else     if (args[i].equals("-nrFiles")) {
      nrFiles=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-fileSize")) {
      fileSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-bufferSize")) {
      bufferSize=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equals("-resFile")) {
      resFileName=args[++i];
    }
  }
  LOG.info("nrFiles = " + nrFiles);
  LOG.info("fileSize (MB) = " + fileSize);
  LOG.info("bufferSize = " + bufferSize);
  try {
    fsConfig.setInt("test.io.file.buffer.size",bufferSize);
    FileSystem fs=FileSystem.get(fsConfig);
    if (isSequential) {
      long tStart=System.currentTimeMillis();
      sequentialTest(fs,testType,fileSize,nrFiles);
      long execTime=System.currentTimeMillis() - tStart;
      String resultLine="Seq Test exec time sec: " + (float)execTime / 1000;
      LOG.info(resultLine);
      return;
    }
    if (testType == TEST_TYPE_CLEANUP) {
      cleanup(fs);
      return;
    }
    createControlFile(fs,fileSize,nrFiles);
    long tStart=System.currentTimeMillis();
    if (testType == TEST_TYPE_WRITE)     writeTest(fs);
    if (testType == TEST_TYPE_READ)     readTest(fs);
    long execTime=System.currentTimeMillis() - tStart;
    analyzeResult(fs,testType,execTime,resFileName);
  }
 catch (  Exception e) {
    System.err.print(StringUtils.stringifyException(e));
    System.exit(-1);
  }
}
