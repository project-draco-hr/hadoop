{
  final Configuration conf=new HdfsConfiguration();
  final int NUM_OF_DATANODES=3;
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_OF_DATANODES).build();
  try {
    cluster.waitActive();
    final FSNamesystem namesystem=cluster.getNamesystem();
    DatanodeDescriptor[] nodes=namesystem.heartbeats.toArray(new DatanodeDescriptor[NUM_OF_DATANODES]);
    assertEquals(nodes.length,NUM_OF_DATANODES);
    namesystem.writeLock();
    try {
      for (int i=0; i < nodes.length; i++) {
        for (int j=0; j < 3 * namesystem.blockInvalidateLimit + 1; j++) {
          Block block=new Block(i * (namesystem.blockInvalidateLimit + 1) + j,0,GenerationStamp.FIRST_VALID_STAMP);
          namesystem.getBlockManager().addToInvalidates(block,nodes[i]);
        }
      }
      assertEquals(namesystem.blockInvalidateLimit * NUM_OF_DATANODES,namesystem.getBlockManager().computeInvalidateWork(NUM_OF_DATANODES + 1));
      assertEquals(namesystem.blockInvalidateLimit * NUM_OF_DATANODES,namesystem.getBlockManager().computeInvalidateWork(NUM_OF_DATANODES));
      assertEquals(namesystem.blockInvalidateLimit * (NUM_OF_DATANODES - 1),namesystem.getBlockManager().computeInvalidateWork(NUM_OF_DATANODES - 1));
      int workCount=namesystem.getBlockManager().computeInvalidateWork(1);
      if (workCount == 1) {
        assertEquals(namesystem.blockInvalidateLimit + 1,namesystem.getBlockManager().computeInvalidateWork(2));
      }
 else {
        assertEquals(workCount,namesystem.blockInvalidateLimit);
        assertEquals(2,namesystem.getBlockManager().computeInvalidateWork(2));
      }
    }
  finally {
      namesystem.writeUnlock();
    }
  }
  finally {
    cluster.shutdown();
  }
}
