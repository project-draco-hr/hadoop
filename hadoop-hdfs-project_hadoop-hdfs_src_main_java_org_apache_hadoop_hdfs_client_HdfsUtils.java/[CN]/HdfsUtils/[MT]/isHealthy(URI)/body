{
  final String scheme=uri.getScheme();
  if (!HdfsConstants.HDFS_URI_SCHEME.equalsIgnoreCase(scheme)) {
    throw new IllegalArgumentException("The scheme is not " + HdfsConstants.HDFS_URI_SCHEME + ", uri="+ uri);
  }
  final Configuration conf=new Configuration();
  conf.setBoolean(String.format("fs.%s.impl.disable.cache",scheme),true);
  conf.setBoolean(HdfsClientConfigKeys.Retry.POLICY_ENABLED_KEY,false);
  conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,0);
  DistributedFileSystem fs=null;
  try {
    fs=(DistributedFileSystem)FileSystem.get(uri,conf);
    final boolean safemode=fs.setSafeMode(SafeModeAction.SAFEMODE_GET);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Is namenode in safemode? " + safemode + "; uri="+ uri);
    }
    fs.close();
    fs=null;
    return !safemode;
  }
 catch (  IOException e) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Got an exception for uri=" + uri,e);
    }
    return false;
  }
 finally {
    IOUtils.cleanup(LOG,fs);
  }
}
