{
  LinuxContainerExecutor mockLCE=new MockLinuxContainerExecutor();
  CustomCgroupsLCEResourceHandler handler=new CustomCgroupsLCEResourceHandler();
  handler.generateLimitsMode=true;
  YarnConfiguration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.NM_DISK_RESOURCE_ENABLED,true);
  final int numProcessors=4;
  ResourceCalculatorPlugin plugin=Mockito.mock(ResourceCalculatorPlugin.class);
  Mockito.doReturn(numProcessors).when(plugin).getNumProcessors();
  Mockito.doReturn(numProcessors).when(plugin).getNumCores();
  handler.setConf(conf);
  handler.initConfig();
  File cpuCgroupMountDir=TestCGroupsHandlerImpl.createMockCgroupMount(cgroupDir,"cpu");
  File mockMtab=TestCGroupsHandlerImpl.createMockMTab(cgroupDir);
  handler.setMtabFile(mockMtab.getAbsolutePath());
  handler.init(mockLCE,plugin);
  ContainerId id=ContainerId.fromString("container_1_1_1_1");
  handler.preExecute(id,Resource.newInstance(1024,1));
  Assert.assertNotNull(handler.getControllerPaths());
  File containerCpuDir=new File(cpuCgroupMountDir,id.toString());
  Assert.assertTrue(containerCpuDir.exists());
  Assert.assertTrue(containerCpuDir.isDirectory());
  File periodFile=new File(containerCpuDir,"cpu.cfs_period_us");
  File quotaFile=new File(containerCpuDir,"cpu.cfs_quota_us");
  Assert.assertFalse(periodFile.exists());
  Assert.assertFalse(quotaFile.exists());
  FileUtils.deleteQuietly(containerCpuDir);
  conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,true);
  handler.initConfig();
  handler.preExecute(id,Resource.newInstance(1024,YarnConfiguration.DEFAULT_NM_VCORES));
  Assert.assertTrue(containerCpuDir.exists());
  Assert.assertTrue(containerCpuDir.isDirectory());
  periodFile=new File(containerCpuDir,"cpu.cfs_period_us");
  quotaFile=new File(containerCpuDir,"cpu.cfs_quota_us");
  Assert.assertFalse(periodFile.exists());
  Assert.assertFalse(quotaFile.exists());
  FileUtils.deleteQuietly(containerCpuDir);
  conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,true);
  handler.initConfig();
  handler.preExecute(id,Resource.newInstance(1024,YarnConfiguration.DEFAULT_NM_VCORES / 2));
  Assert.assertTrue(containerCpuDir.exists());
  Assert.assertTrue(containerCpuDir.isDirectory());
  periodFile=new File(containerCpuDir,"cpu.cfs_period_us");
  quotaFile=new File(containerCpuDir,"cpu.cfs_quota_us");
  Assert.assertTrue(periodFile.exists());
  Assert.assertTrue(quotaFile.exists());
  Assert.assertEquals(500 * 1000,readIntFromFile(periodFile));
  Assert.assertEquals(1000 * 1000,readIntFromFile(quotaFile));
  FileUtils.deleteQuietly(containerCpuDir);
  conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,true);
  conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT,50);
  handler.initConfig();
  handler.init(mockLCE,plugin);
  handler.preExecute(id,Resource.newInstance(1024,YarnConfiguration.DEFAULT_NM_VCORES / 2));
  Assert.assertTrue(containerCpuDir.exists());
  Assert.assertTrue(containerCpuDir.isDirectory());
  periodFile=new File(containerCpuDir,"cpu.cfs_period_us");
  quotaFile=new File(containerCpuDir,"cpu.cfs_quota_us");
  Assert.assertTrue(periodFile.exists());
  Assert.assertTrue(quotaFile.exists());
  Assert.assertEquals(1000 * 1000,readIntFromFile(periodFile));
  Assert.assertEquals(1000 * 1000,readIntFromFile(quotaFile));
  FileUtils.deleteQuietly(cgroupDir);
}
