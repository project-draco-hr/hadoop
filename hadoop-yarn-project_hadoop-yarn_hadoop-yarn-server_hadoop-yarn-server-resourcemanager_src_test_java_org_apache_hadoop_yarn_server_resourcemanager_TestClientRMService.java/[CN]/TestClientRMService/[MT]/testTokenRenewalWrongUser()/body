{
  try {
    owner.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try {
          checkTokenRenewal(owner,other);
          return null;
        }
 catch (        YarnException ex) {
          Assert.assertTrue(ex.getMessage().contains(owner.getUserName() + " tries to renew a token with renewer " + other.getUserName()));
          throw ex;
        }
      }
    }
);
  }
 catch (  Exception e) {
    return;
  }
  Assert.fail("renew should have failed");
}
