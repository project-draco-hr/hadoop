{
  YarnScheduler yarnScheduler=mock(YarnScheduler.class);
  when(yarnScheduler.getMinimumResourceCapability()).thenReturn(Resources.createResource(YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));
  when(yarnScheduler.getMaximumResourceCapability()).thenReturn(Resources.createResource(YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));
  RMContext rmContext=mock(RMContext.class);
  mockRMContext(yarnScheduler,rmContext);
  RMStateStore stateStore=mock(RMStateStore.class);
  when(rmContext.getStateStore()).thenReturn(stateStore);
  RMAppManager appManager=new RMAppManager(rmContext,yarnScheduler,null,mock(ApplicationACLsManager.class),new Configuration());
  final ApplicationId appId=getApplicationId(100);
  final SubmitApplicationRequest submitRequest=mockSubmitAppRequest(appId);
  Resource resource=Resources.createResource(YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB + 1);
  when(submitRequest.getApplicationSubmissionContext().getResource()).thenReturn(resource);
  final ClientRMService rmService=new ClientRMService(rmContext,yarnScheduler,appManager,null,null);
  try {
    rmService.submitApplication(submitRequest);
    Assert.fail("Application submission should fail because resource" + " request is invalid.");
  }
 catch (  YarnRemoteException e) {
    Assert.assertTrue("The thrown exception is not" + " InvalidResourceRequestException",e.getMessage().startsWith("Invalid resource request"));
  }
}
