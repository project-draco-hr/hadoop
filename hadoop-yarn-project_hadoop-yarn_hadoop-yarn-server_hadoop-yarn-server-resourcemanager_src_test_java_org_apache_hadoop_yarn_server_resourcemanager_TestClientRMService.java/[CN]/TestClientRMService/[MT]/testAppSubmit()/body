{
  YarnScheduler yarnScheduler=mockYarnScheduler();
  RMContext rmContext=mock(RMContext.class);
  mockRMContext(yarnScheduler,rmContext);
  RMStateStore stateStore=mock(RMStateStore.class);
  when(rmContext.getStateStore()).thenReturn(stateStore);
  RMAppManager appManager=new RMAppManager(rmContext,yarnScheduler,null,mock(ApplicationACLsManager.class),new Configuration());
  when(rmContext.getDispatcher().getEventHandler()).thenReturn(new EventHandler<Event>(){
    public void handle(    Event event){
    }
  }
);
  ClientRMService rmService=new ClientRMService(rmContext,yarnScheduler,appManager,null,null);
  ApplicationId appId1=getApplicationId(100);
  SubmitApplicationRequest submitRequest1=mockSubmitAppRequest(appId1,null,null);
  try {
    rmService.submitApplication(submitRequest1);
  }
 catch (  YarnException e) {
    Assert.fail("Exception is not expected.");
  }
  RMApp app1=rmContext.getRMApps().get(appId1);
  Assert.assertNotNull("app doesn't exist",app1);
  Assert.assertEquals("app name doesn't match",YarnConfiguration.DEFAULT_APPLICATION_NAME,app1.getName());
  Assert.assertEquals("app queue doesn't match",YarnConfiguration.DEFAULT_QUEUE_NAME,app1.getQueue());
  String name=MockApps.newAppName();
  String queue=MockApps.newQueue();
  ApplicationId appId2=getApplicationId(101);
  SubmitApplicationRequest submitRequest2=mockSubmitAppRequest(appId2,name,queue);
  try {
    rmService.submitApplication(submitRequest2);
  }
 catch (  YarnException e) {
    Assert.fail("Exception is not expected.");
  }
  RMApp app2=rmContext.getRMApps().get(appId2);
  Assert.assertNotNull("app doesn't exist",app2);
  Assert.assertEquals("app name doesn't match",name,app2.getName());
  Assert.assertEquals("app queue doesn't match",queue,app2.getQueue());
  try {
    rmService.submitApplication(submitRequest2);
    Assert.fail("Exception is expected.");
  }
 catch (  YarnException e) {
    Assert.assertTrue("The thrown exception is not expected.",e.getMessage().contains("Cannot add a duplicate!"));
  }
}
