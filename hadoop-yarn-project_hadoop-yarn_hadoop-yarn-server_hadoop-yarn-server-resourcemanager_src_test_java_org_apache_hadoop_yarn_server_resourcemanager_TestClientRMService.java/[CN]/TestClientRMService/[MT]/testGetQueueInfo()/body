{
  YarnScheduler yarnScheduler=mock(YarnScheduler.class);
  RMContext rmContext=mock(RMContext.class);
  mockRMContext(yarnScheduler,rmContext);
  ApplicationACLsManager mockAclsManager=mock(ApplicationACLsManager.class);
  QueueACLsManager mockQueueACLsManager=mock(QueueACLsManager.class);
  when(mockQueueACLsManager.checkAccess(any(UserGroupInformation.class),any(QueueACL.class),anyString())).thenReturn(true);
  when(mockAclsManager.checkAccess(any(UserGroupInformation.class),any(ApplicationAccessType.class),anyString(),any(ApplicationId.class))).thenReturn(true);
  ClientRMService rmService=new ClientRMService(rmContext,yarnScheduler,null,mockAclsManager,mockQueueACLsManager,null);
  GetQueueInfoRequest request=recordFactory.newRecordInstance(GetQueueInfoRequest.class);
  request.setQueueName("testqueue");
  request.setIncludeApplications(true);
  GetQueueInfoResponse queueInfo=rmService.getQueueInfo(request);
  List<ApplicationReport> applications=queueInfo.getQueueInfo().getApplications();
  Assert.assertEquals(2,applications.size());
  request.setQueueName("nonexistentqueue");
  request.setIncludeApplications(true);
  queueInfo=rmService.getQueueInfo(request);
  ApplicationACLsManager mockAclsManager1=mock(ApplicationACLsManager.class);
  QueueACLsManager mockQueueACLsManager1=mock(QueueACLsManager.class);
  when(mockQueueACLsManager1.checkAccess(any(UserGroupInformation.class),any(QueueACL.class),anyString())).thenReturn(false);
  when(mockAclsManager1.checkAccess(any(UserGroupInformation.class),any(ApplicationAccessType.class),anyString(),any(ApplicationId.class))).thenReturn(false);
  ClientRMService rmService1=new ClientRMService(rmContext,yarnScheduler,null,mockAclsManager1,mockQueueACLsManager1,null);
  request.setQueueName("testqueue");
  request.setIncludeApplications(true);
  GetQueueInfoResponse queueInfo1=rmService1.getQueueInfo(request);
  List<ApplicationReport> applications1=queueInfo1.getQueueInfo().getApplications();
  Assert.assertEquals(0,applications1.size());
}
