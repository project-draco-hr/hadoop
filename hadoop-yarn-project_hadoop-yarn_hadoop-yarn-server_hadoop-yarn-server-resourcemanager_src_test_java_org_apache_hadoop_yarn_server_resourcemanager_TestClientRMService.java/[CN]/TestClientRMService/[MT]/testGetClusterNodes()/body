{
  MockRM rm=new MockRM(){
    protected ClientRMService createClientRMService(){
      return new ClientRMService(this.rmContext,scheduler,this.rmAppManager,this.applicationACLsManager,this.queueACLsManager,this.getRMContext().getRMDelegationTokenSecretManager());
    }
  }
;
  rm.start();
  RMNodeLabelsManager labelsMgr=rm.getRMContext().getNodeLabelManager();
  labelsMgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y"));
  MockNM node=rm.registerNode("host1:1234",1024);
  Map<NodeId,Set<String>> map=new HashMap<NodeId,Set<String>>();
  map.put(node.getNodeId(),ImmutableSet.of("x"));
  labelsMgr.replaceLabelsOnNode(map);
  rm.sendNodeStarted(node);
  node.nodeHeartbeat(true);
  MockNM lostNode=rm.registerNode("host2:1235",1024);
  rm.sendNodeStarted(lostNode);
  lostNode.nodeHeartbeat(true);
  rm.NMwaitForState(lostNode.getNodeId(),NodeState.RUNNING);
  rm.sendNodeLost(lostNode);
  Configuration conf=new Configuration();
  YarnRPC rpc=YarnRPC.create(conf);
  InetSocketAddress rmAddress=rm.getClientRMService().getBindAddress();
  LOG.info("Connecting to ResourceManager at " + rmAddress);
  ApplicationClientProtocol client=(ApplicationClientProtocol)rpc.getProxy(ApplicationClientProtocol.class,rmAddress,conf);
  GetClusterNodesRequest request=GetClusterNodesRequest.newInstance(EnumSet.of(NodeState.RUNNING));
  List<NodeReport> nodeReports=client.getClusterNodes(request).getNodeReports();
  Assert.assertEquals(1,nodeReports.size());
  Assert.assertNotSame("Node is expected to be healthy!",NodeState.UNHEALTHY,nodeReports.get(0).getNodeState());
  Assert.assertTrue(nodeReports.get(0).getNodeLabels().contains("x"));
  node.nodeHeartbeat(false);
  rm.NMwaitForState(node.getNodeId(),NodeState.UNHEALTHY);
  nodeReports=client.getClusterNodes(request).getNodeReports();
  Assert.assertEquals("Unhealthy nodes should not show up by default",0,nodeReports.size());
  map=new HashMap<NodeId,Set<String>>();
  map.put(node.getNodeId(),ImmutableSet.of("y"));
  labelsMgr.replaceLabelsOnNode(map);
  request=GetClusterNodesRequest.newInstance(EnumSet.of(NodeState.UNHEALTHY));
  nodeReports=client.getClusterNodes(request).getNodeReports();
  Assert.assertEquals(1,nodeReports.size());
  Assert.assertEquals("Node is expected to be unhealthy!",NodeState.UNHEALTHY,nodeReports.get(0).getNodeState());
  Assert.assertTrue(nodeReports.get(0).getNodeLabels().contains("y"));
  map=new HashMap<NodeId,Set<String>>();
  map.put(node.getNodeId(),ImmutableSet.of("y"));
  labelsMgr.removeLabelsFromNode(map);
  rm.registerNode("host3:1236",1024);
  request=GetClusterNodesRequest.newInstance(EnumSet.allOf(NodeState.class));
  nodeReports=client.getClusterNodes(request).getNodeReports();
  Assert.assertEquals(3,nodeReports.size());
  for (  NodeReport report : nodeReports) {
    Assert.assertTrue(report.getNodeLabels() != null && report.getNodeLabels().isEmpty());
  }
  rpc.stopProxy(client,conf);
  rm.close();
}
