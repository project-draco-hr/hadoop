{
  MockRM rm=new MockRM(){
    protected ClientRMService createClientRMService(){
      return new ClientRMService(this.rmContext,scheduler,this.rmAppManager,this.applicationACLsManager,this.queueACLsManager,this.getRMContext().getRMDelegationTokenSecretManager());
    }
  }
;
  rm.start();
  RMNodeLabelsManager labelsMgr=rm.getRMContext().getNodeLabelManager();
  labelsMgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y"));
  Map<NodeId,Set<String>> map=new HashMap<NodeId,Set<String>>();
  map.put(NodeId.newInstance("host1",0),ImmutableSet.of("x"));
  map.put(NodeId.newInstance("host2",0),ImmutableSet.of("y"));
  labelsMgr.replaceLabelsOnNode(map);
  Configuration conf=new Configuration();
  YarnRPC rpc=YarnRPC.create(conf);
  InetSocketAddress rmAddress=rm.getClientRMService().getBindAddress();
  LOG.info("Connecting to ResourceManager at " + rmAddress);
  ApplicationClientProtocol client=(ApplicationClientProtocol)rpc.getProxy(ApplicationClientProtocol.class,rmAddress,conf);
  GetClusterNodeLabelsResponse response=client.getClusterNodeLabels(GetClusterNodeLabelsRequest.newInstance());
  Assert.assertTrue(response.getNodeLabels().containsAll(Arrays.asList(NodeLabel.newInstance("x"),NodeLabel.newInstance("y"))));
  GetNodesToLabelsResponse response1=client.getNodeToLabels(GetNodesToLabelsRequest.newInstance());
  Map<NodeId,Set<String>> nodeToLabels=response1.getNodeToLabels();
  Assert.assertTrue(nodeToLabels.keySet().containsAll(Arrays.asList(NodeId.newInstance("host1",0),NodeId.newInstance("host2",0))));
  Assert.assertTrue(nodeToLabels.get(NodeId.newInstance("host1",0)).containsAll(Arrays.asList("x")));
  Assert.assertTrue(nodeToLabels.get(NodeId.newInstance("host2",0)).containsAll(Arrays.asList("y")));
  rpc.stopProxy(client,conf);
  rm.close();
}
