{
  YarnScheduler yarnScheduler=mock(YarnScheduler.class);
  when(yarnScheduler.getMinimumResourceCapability()).thenReturn(Resources.createResource(YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB));
  when(yarnScheduler.getMaximumResourceCapability()).thenReturn(Resources.createResource(YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB));
  RMContext rmContext=mock(RMContext.class);
  mockRMContext(yarnScheduler,rmContext);
  RMStateStore stateStore=mock(RMStateStore.class);
  when(rmContext.getStateStore()).thenReturn(stateStore);
  RMAppManager appManager=new RMAppManager(rmContext,yarnScheduler,null,mock(ApplicationACLsManager.class),new Configuration());
  final ApplicationId appId1=getApplicationId(100);
  final ApplicationId appId2=getApplicationId(101);
  final SubmitApplicationRequest submitRequest1=mockSubmitAppRequest(appId1);
  final SubmitApplicationRequest submitRequest2=mockSubmitAppRequest(appId2);
  final CyclicBarrier startBarrier=new CyclicBarrier(2);
  final CyclicBarrier endBarrier=new CyclicBarrier(2);
  @SuppressWarnings("rawtypes") EventHandler eventHandler=new EventHandler(){
    @Override public void handle(    Event rawEvent){
      if (rawEvent instanceof RMAppEvent) {
        RMAppEvent event=(RMAppEvent)rawEvent;
        if (event.getApplicationId().equals(appId1)) {
          try {
            startBarrier.await();
            endBarrier.await();
          }
 catch (          BrokenBarrierException e) {
            LOG.warn("Broken Barrier",e);
          }
catch (          InterruptedException e) {
            LOG.warn("Interrupted while awaiting barriers",e);
          }
        }
      }
    }
  }
;
  when(rmContext.getDispatcher().getEventHandler()).thenReturn(eventHandler);
  final ClientRMService rmService=new ClientRMService(rmContext,yarnScheduler,appManager,null,null);
  Thread t=new Thread(){
    @Override public void run(){
      try {
        rmService.submitApplication(submitRequest1);
      }
 catch (      YarnRemoteException e) {
      }
    }
  }
;
  t.start();
  startBarrier.await();
  rmService.submitApplication(submitRequest2);
  endBarrier.await();
  t.join();
}
