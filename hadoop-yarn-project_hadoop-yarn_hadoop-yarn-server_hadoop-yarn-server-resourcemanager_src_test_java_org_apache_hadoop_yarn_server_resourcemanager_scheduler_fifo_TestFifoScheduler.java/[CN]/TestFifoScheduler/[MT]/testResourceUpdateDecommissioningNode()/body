{
  RMContext spyContext=Mockito.spy(resourceManager.getRMContext());
  Dispatcher mockDispatcher=mock(AsyncDispatcher.class);
  when(mockDispatcher.getEventHandler()).thenReturn(new EventHandler(){
    @Override public void handle(    Event event){
      if (event instanceof RMNodeResourceUpdateEvent) {
        RMNodeResourceUpdateEvent resourceEvent=(RMNodeResourceUpdateEvent)event;
        resourceManager.getResourceScheduler().getSchedulerNode(resourceEvent.getNodeId()).updateTotalResource(resourceEvent.getResourceOption().getResource());
      }
    }
  }
);
  Mockito.doReturn(mockDispatcher).when(spyContext).getDispatcher();
  ((FifoScheduler)resourceManager.getResourceScheduler()).setRMContext(spyContext);
  ((AsyncDispatcher)mockDispatcher).start();
  String host_0="host_0";
  org.apache.hadoop.yarn.server.resourcemanager.NodeManager nm_0=registerNode(host_0,1234,2345,NetworkTopology.DEFAULT_RACK,Resources.createResource(8 * GB,4));
  Priority priority_0=org.apache.hadoop.yarn.server.resourcemanager.resource.Priority.create(0);
  Application application_0=new Application("user_0","a1",resourceManager);
  application_0.submit();
  application_0.addNodeManager(host_0,1234,nm_0);
  Resource capability_0_0=Resources.createResource(1 * GB,1);
  application_0.addResourceRequestSpec(priority_0,capability_0_0);
  Task task_0_0=new Task(application_0,priority_0,new String[]{host_0});
  application_0.addTask(task_0_0);
  application_0.schedule();
  RMNode node=resourceManager.getRMContext().getRMNodes().get(nm_0.getNodeId());
  NodeUpdateSchedulerEvent nodeUpdate=new NodeUpdateSchedulerEvent(node);
  resourceManager.getResourceScheduler().handle(nodeUpdate);
  RMNode spyNode=Mockito.spy(resourceManager.getRMContext().getRMNodes().get(nm_0.getNodeId()));
  when(spyNode.getState()).thenReturn(NodeState.DECOMMISSIONING);
  resourceManager.getResourceScheduler().handle(new NodeUpdateSchedulerEvent(spyNode));
  application_0.schedule();
  Resource usedResource=resourceManager.getResourceScheduler().getSchedulerNode(nm_0.getNodeId()).getAllocatedResource();
  Assert.assertEquals(usedResource.getMemory(),1 * GB);
  Assert.assertEquals(usedResource.getVirtualCores(),1);
  Resource totalResource=resourceManager.getResourceScheduler().getSchedulerNode(nm_0.getNodeId()).getTotalResource();
  Assert.assertEquals(totalResource.getMemory(),1 * GB);
  Assert.assertEquals(totalResource.getVirtualCores(),1);
  Resource availableResource=resourceManager.getResourceScheduler().getSchedulerNode(nm_0.getNodeId()).getUnallocatedResource();
  Assert.assertEquals(availableResource.getMemory(),0);
  Assert.assertEquals(availableResource.getVirtualCores(),0);
}
