{
  Configuration conf=new Configuration();
  conf.setClass(YarnConfiguration.RM_SCHEDULER,FifoScheduler.class,ResourceScheduler.class);
  MockRM rm=new MockRM(conf);
  rm.start();
  FifoScheduler fs=(FifoScheduler)rm.getResourceScheduler();
  int rack_num_0=0;
  int rack_num_1=1;
  String host_0_0="127.0.0.1";
  RMNode n1=MockNodes.newNodeInfo(rack_num_0,MockNodes.newResource(4 * GB),1,host_0_0);
  fs.handle(new NodeAddedSchedulerEvent(n1));
  String host_0_1="127.0.0.2";
  RMNode n2=MockNodes.newNodeInfo(rack_num_0,MockNodes.newResource(4 * GB),1,host_0_1);
  fs.handle(new NodeAddedSchedulerEvent(n2));
  String host_1_0="127.0.0.3";
  RMNode n3=MockNodes.newNodeInfo(rack_num_1,MockNodes.newResource(4 * GB),1,host_1_0);
  fs.handle(new NodeAddedSchedulerEvent(n3));
  String host_1_1="127.0.0.4";
  RMNode n4=MockNodes.newNodeInfo(rack_num_1,MockNodes.newResource(4 * GB),1,host_1_1);
  fs.handle(new NodeAddedSchedulerEvent(n4));
  ApplicationId appId1=BuilderUtils.newApplicationId(100,1);
  ApplicationAttemptId appAttemptId1=BuilderUtils.newApplicationAttemptId(appId1,1);
  createMockRMApp(appAttemptId1,rm.getRMContext());
  SchedulerEvent appEvent=new AppAddedSchedulerEvent(appId1,"queue","user");
  fs.handle(appEvent);
  SchedulerEvent attemptEvent=new AppAttemptAddedSchedulerEvent(appAttemptId1,false);
  fs.handle(attemptEvent);
  List<ContainerId> emptyId=new ArrayList<ContainerId>();
  List<ResourceRequest> emptyAsk=new ArrayList<ResourceRequest>();
  List<ResourceRequest> ask1=new ArrayList<ResourceRequest>();
  ask1.add(BuilderUtils.newResourceRequest(BuilderUtils.newPriority(0),"rack1",BuilderUtils.newResource(GB,1),1));
  ask1.add(BuilderUtils.newResourceRequest(BuilderUtils.newPriority(0),ResourceRequest.ANY,BuilderUtils.newResource(GB,1),1));
  fs.allocate(appAttemptId1,ask1,emptyId,Collections.singletonList(host_1_0),null);
  fs.handle(new NodeUpdateSchedulerEvent(n3));
  Allocation allocation1=fs.allocate(appAttemptId1,emptyAsk,emptyId,null,null);
  Assert.assertEquals("allocation1",0,allocation1.getContainers().size());
  fs.handle(new NodeUpdateSchedulerEvent(n4));
  Allocation allocation2=fs.allocate(appAttemptId1,emptyAsk,emptyId,null,null);
  Assert.assertEquals("allocation2",1,allocation2.getContainers().size());
  List<Container> containerList=allocation2.getContainers();
  for (  Container container : containerList) {
    Assert.assertEquals("Container is allocated on n4",container.getNodeId(),n4.getNodeID());
  }
  List<ResourceRequest> ask2=new ArrayList<ResourceRequest>();
  ask2.add(BuilderUtils.newResourceRequest(BuilderUtils.newPriority(0),ResourceRequest.ANY,BuilderUtils.newResource(GB,1),1));
  fs.allocate(appAttemptId1,ask2,emptyId,Collections.singletonList("rack0"),null);
  fs.handle(new NodeUpdateSchedulerEvent(n1));
  Allocation allocation3=fs.allocate(appAttemptId1,emptyAsk,emptyId,null,null);
  Assert.assertEquals("allocation3",0,allocation3.getContainers().size());
  fs.handle(new NodeUpdateSchedulerEvent(n2));
  Allocation allocation4=fs.allocate(appAttemptId1,emptyAsk,emptyId,null,null);
  Assert.assertEquals("allocation4",0,allocation4.getContainers().size());
  fs.handle(new NodeUpdateSchedulerEvent(n3));
  Allocation allocation5=fs.allocate(appAttemptId1,emptyAsk,emptyId,null,null);
  Assert.assertEquals("allocation5",0,allocation5.getContainers().size());
  fs.handle(new NodeUpdateSchedulerEvent(n4));
  Allocation allocation6=fs.allocate(appAttemptId1,emptyAsk,emptyId,null,null);
  Assert.assertEquals("allocation6",1,allocation6.getContainers().size());
  containerList=allocation6.getContainers();
  for (  Container container : containerList) {
    Assert.assertEquals("Container is allocated on n4",container.getNodeId(),n4.getNodeID());
  }
  rm.stop();
}
