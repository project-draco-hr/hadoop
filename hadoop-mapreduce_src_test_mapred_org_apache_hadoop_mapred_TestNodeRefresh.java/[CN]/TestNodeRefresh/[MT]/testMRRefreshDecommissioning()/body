{
  Configuration conf=new Configuration();
  File file=new File("hosts.exclude");
  file.delete();
  startCluster(2,1,0,UserGroupInformation.getLoginUser(),conf);
  String hostToDecommission=getHostname(1);
  conf=mr.createJobConf(new JobConf(conf));
  FileOutputStream out=new FileOutputStream(file);
  LOG.info("Writing excluded nodes to log file " + file.toString());
  BufferedWriter writer=null;
  try {
    writer=new BufferedWriter(new OutputStreamWriter(out));
    writer.write(hostToDecommission + "\n");
  }
  finally {
    if (writer != null) {
      writer.close();
    }
    out.close();
  }
  file.deleteOnExit();
  AdminOperationsProtocol client=getClient(conf,owner);
  try {
    client.refreshNodes();
  }
 catch (  IOException ioe) {
  }
  assertEquals("Tracker is not lost upon host decommissioning",1,jt.getClusterStatus(false).getTaskTrackers());
  assertEquals("Excluded node count is incorrect",1,jt.getClusterStatus(false).getNumExcludedNodes());
  for (  TaskTrackerStatus status : jt.taskTrackers()) {
    assertFalse("Tracker from decommissioned host still exist",status.getHost().equals(hostToDecommission));
  }
  stopCluster();
}
