{
  conf=new Configuration();
  conf.set(ZKFailoverController.ZK_QUORUM_KEY + ".ns1",hostPort);
  conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,AlwaysSucceedFencer.class.getName());
  conf.setBoolean(DFSConfigKeys.DFS_HA_AUTO_FAILOVER_ENABLED_KEY,true);
  conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,0);
  conf.setInt(DFSConfigKeys.DFS_HA_ZKFC_PORT_KEY + ".ns1.nn1",ServerSocketUtil.getPort(10023,100));
  conf.setInt(DFSConfigKeys.DFS_HA_ZKFC_PORT_KEY + ".ns1.nn2",ServerSocketUtil.getPort(10024,100));
  MiniDFSNNTopology topology=new MiniDFSNNTopology().addNameservice(new MiniDFSNNTopology.NSConf("ns1").addNN(new MiniDFSNNTopology.NNConf("nn1").setIpcPort(ServerSocketUtil.getPort(10021,100))).addNN(new MiniDFSNNTopology.NNConf("nn2").setIpcPort(ServerSocketUtil.getPort(10022,100))));
  cluster=new MiniDFSCluster.Builder(conf).nnTopology(topology).numDataNodes(0).build();
  cluster.waitActive();
  ctx=new TestContext();
  ctx.addThread(thr1=new ZKFCThread(ctx,0));
  assertEquals(0,thr1.zkfc.run(new String[]{"-formatZK"}));
  thr1.start();
  waitForHAState(0,HAServiceState.ACTIVE);
  ctx.addThread(thr2=new ZKFCThread(ctx,1));
  thr2.start();
  ZKFCTestUtil.waitForHealthState(thr1.zkfc,HealthMonitor.State.SERVICE_HEALTHY,ctx);
  ZKFCTestUtil.waitForHealthState(thr2.zkfc,HealthMonitor.State.SERVICE_HEALTHY,ctx);
  fs=HATestUtil.configureFailoverFs(cluster,conf);
}
