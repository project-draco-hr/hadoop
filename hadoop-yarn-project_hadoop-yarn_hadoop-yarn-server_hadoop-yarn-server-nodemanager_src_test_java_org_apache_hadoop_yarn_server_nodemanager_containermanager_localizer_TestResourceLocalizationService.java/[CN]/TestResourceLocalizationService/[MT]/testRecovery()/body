{
  final String user1="user1";
  final String user2="user2";
  final ApplicationId appId1=ApplicationId.newInstance(1,1);
  final ApplicationId appId2=ApplicationId.newInstance(1,2);
  List<Path> localDirs=new ArrayList<Path>();
  String[] sDirs=new String[4];
  for (int i=0; i < 4; ++i) {
    localDirs.add(lfs.makeQualified(new Path(basedir,i + "")));
    sDirs[i]=localDirs.get(i).toString();
  }
  conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS,sDirs);
  conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED,true);
  NMMemoryStateStoreService stateStore=new NMMemoryStateStoreService();
  stateStore.init(conf);
  stateStore.start();
  DrainDispatcher dispatcher=new DrainDispatcher();
  dispatcher.init(conf);
  dispatcher.start();
  EventHandler<ApplicationEvent> applicationBus=mock(EventHandler.class);
  dispatcher.register(ApplicationEventType.class,applicationBus);
  EventHandler<ContainerEvent> containerBus=mock(EventHandler.class);
  dispatcher.register(ContainerEventType.class,containerBus);
  EventHandler<LocalizerEvent> localizerBus=mock(EventHandler.class);
  dispatcher.register(LocalizerEventType.class,localizerBus);
  LocalDirsHandlerService dirsHandler=new LocalDirsHandlerService();
  dirsHandler.init(conf);
  ResourceLocalizationService spyService=createSpyService(dispatcher,dirsHandler,stateStore);
  try {
    spyService.init(conf);
    spyService.start();
    final Application app1=mock(Application.class);
    when(app1.getUser()).thenReturn(user1);
    when(app1.getAppId()).thenReturn(appId1);
    final Application app2=mock(Application.class);
    when(app2.getUser()).thenReturn(user2);
    when(app2.getAppId()).thenReturn(appId2);
    spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES,app1));
    spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES,app2));
    dispatcher.await();
    LocalResourcesTracker appTracker1=spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION,user1,appId1);
    LocalResourcesTracker privTracker1=spyService.getLocalResourcesTracker(LocalResourceVisibility.PRIVATE,user1,null);
    LocalResourcesTracker appTracker2=spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION,user2,appId2);
    LocalResourcesTracker pubTracker=spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC,null,null);
    final Container c1=getMockContainer(appId1,1,user1);
    final Container c2=getMockContainer(appId2,2,user2);
    Random r=new Random();
    long seed=r.nextLong();
    System.out.println("SEED: " + seed);
    r.setSeed(seed);
    final LocalResource privResource1=getPrivateMockedResource(r);
    final LocalResourceRequest privReq1=new LocalResourceRequest(privResource1);
    final LocalResource privResource2=getPrivateMockedResource(r);
    final LocalResourceRequest privReq2=new LocalResourceRequest(privResource2);
    final LocalResource pubResource1=getPublicMockedResource(r);
    final LocalResourceRequest pubReq1=new LocalResourceRequest(pubResource1);
    final LocalResource pubResource2=getPublicMockedResource(r);
    final LocalResourceRequest pubReq2=new LocalResourceRequest(pubResource2);
    final LocalResource appResource1=getAppMockedResource(r);
    final LocalResourceRequest appReq1=new LocalResourceRequest(appResource1);
    final LocalResource appResource2=getAppMockedResource(r);
    final LocalResourceRequest appReq2=new LocalResourceRequest(appResource2);
    final LocalResource appResource3=getAppMockedResource(r);
    final LocalResourceRequest appReq3=new LocalResourceRequest(appResource3);
    Map<LocalResourceVisibility,Collection<LocalResourceRequest>> req1=new HashMap<LocalResourceVisibility,Collection<LocalResourceRequest>>();
    req1.put(LocalResourceVisibility.PRIVATE,Arrays.asList(new LocalResourceRequest[]{privReq1,privReq2}));
    req1.put(LocalResourceVisibility.PUBLIC,Collections.singletonList(pubReq1));
    req1.put(LocalResourceVisibility.APPLICATION,Collections.singletonList(appReq1));
    Map<LocalResourceVisibility,Collection<LocalResourceRequest>> req2=new HashMap<LocalResourceVisibility,Collection<LocalResourceRequest>>();
    req2.put(LocalResourceVisibility.APPLICATION,Arrays.asList(new LocalResourceRequest[]{appReq2,appReq3}));
    req2.put(LocalResourceVisibility.PUBLIC,Collections.singletonList(pubReq2));
    spyService.handle(new ContainerLocalizationRequestEvent(c1,req1));
    spyService.handle(new ContainerLocalizationRequestEvent(c2,req2));
    dispatcher.await();
    privTracker1.getPathForLocalization(privReq1,dirsHandler.getLocalPathForWrite(ContainerLocalizer.USERCACHE + user1),null);
    privTracker1.getPathForLocalization(privReq2,dirsHandler.getLocalPathForWrite(ContainerLocalizer.USERCACHE + user1),null);
    LocalizedResource privLr1=privTracker1.getLocalizedResource(privReq1);
    LocalizedResource privLr2=privTracker1.getLocalizedResource(privReq2);
    appTracker1.getPathForLocalization(appReq1,dirsHandler.getLocalPathForWrite(ContainerLocalizer.APPCACHE + appId1),null);
    LocalizedResource appLr1=appTracker1.getLocalizedResource(appReq1);
    appTracker2.getPathForLocalization(appReq2,dirsHandler.getLocalPathForWrite(ContainerLocalizer.APPCACHE + appId2),null);
    LocalizedResource appLr2=appTracker2.getLocalizedResource(appReq2);
    appTracker2.getPathForLocalization(appReq3,dirsHandler.getLocalPathForWrite(ContainerLocalizer.APPCACHE + appId2),null);
    LocalizedResource appLr3=appTracker2.getLocalizedResource(appReq3);
    pubTracker.getPathForLocalization(pubReq1,dirsHandler.getLocalPathForWrite(ContainerLocalizer.FILECACHE),null);
    LocalizedResource pubLr1=pubTracker.getLocalizedResource(pubReq1);
    pubTracker.getPathForLocalization(pubReq2,dirsHandler.getLocalPathForWrite(ContainerLocalizer.FILECACHE),null);
    LocalizedResource pubLr2=pubTracker.getLocalizedResource(pubReq2);
    assertNotNull("Localization not started",privLr1.getLocalPath());
    privTracker1.handle(new ResourceLocalizedEvent(privReq1,privLr1.getLocalPath(),privLr1.getSize() + 5));
    assertNotNull("Localization not started",privLr2.getLocalPath());
    privTracker1.handle(new ResourceLocalizedEvent(privReq2,privLr2.getLocalPath(),privLr2.getSize() + 10));
    assertNotNull("Localization not started",appLr1.getLocalPath());
    appTracker1.handle(new ResourceLocalizedEvent(appReq1,appLr1.getLocalPath(),appLr1.getSize()));
    assertNotNull("Localization not started",appLr3.getLocalPath());
    appTracker2.handle(new ResourceLocalizedEvent(appReq3,appLr3.getLocalPath(),appLr3.getSize() + 7));
    assertNotNull("Localization not started",pubLr1.getLocalPath());
    pubTracker.handle(new ResourceLocalizedEvent(pubReq1,pubLr1.getLocalPath(),pubLr1.getSize() + 1000));
    assertNotNull("Localization not started",pubLr2.getLocalPath());
    pubTracker.handle(new ResourceLocalizedEvent(pubReq2,pubLr2.getLocalPath(),pubLr2.getSize() + 99999));
    dispatcher.await();
    assertEquals(ResourceState.LOCALIZED,privLr1.getState());
    assertEquals(ResourceState.LOCALIZED,privLr2.getState());
    assertEquals(ResourceState.LOCALIZED,appLr1.getState());
    assertEquals(ResourceState.DOWNLOADING,appLr2.getState());
    assertEquals(ResourceState.LOCALIZED,appLr3.getState());
    assertEquals(ResourceState.LOCALIZED,pubLr1.getState());
    assertEquals(ResourceState.LOCALIZED,pubLr2.getState());
    spyService=createSpyService(dispatcher,dirsHandler,stateStore);
    spyService.init(conf);
    spyService.recoverLocalizedResources(stateStore.loadLocalizationState());
    dispatcher.await();
    appTracker1=spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION,user1,appId1);
    privTracker1=spyService.getLocalResourcesTracker(LocalResourceVisibility.PRIVATE,user1,null);
    appTracker2=spyService.getLocalResourcesTracker(LocalResourceVisibility.APPLICATION,user2,appId2);
    pubTracker=spyService.getLocalResourcesTracker(LocalResourceVisibility.PUBLIC,null,null);
    LocalizedResource recoveredRsrc=privTracker1.getLocalizedResource(privReq1);
    assertEquals(privReq1,recoveredRsrc.getRequest());
    assertEquals(privLr1.getLocalPath(),recoveredRsrc.getLocalPath());
    assertEquals(privLr1.getSize(),recoveredRsrc.getSize());
    assertEquals(ResourceState.LOCALIZED,recoveredRsrc.getState());
    recoveredRsrc=privTracker1.getLocalizedResource(privReq2);
    assertEquals(privReq2,recoveredRsrc.getRequest());
    assertEquals(privLr2.getLocalPath(),recoveredRsrc.getLocalPath());
    assertEquals(privLr2.getSize(),recoveredRsrc.getSize());
    assertEquals(ResourceState.LOCALIZED,recoveredRsrc.getState());
    recoveredRsrc=appTracker1.getLocalizedResource(appReq1);
    assertEquals(appReq1,recoveredRsrc.getRequest());
    assertEquals(appLr1.getLocalPath(),recoveredRsrc.getLocalPath());
    assertEquals(appLr1.getSize(),recoveredRsrc.getSize());
    assertEquals(ResourceState.LOCALIZED,recoveredRsrc.getState());
    recoveredRsrc=appTracker2.getLocalizedResource(appReq2);
    assertNull("in-progress resource should not be present",recoveredRsrc);
    recoveredRsrc=appTracker2.getLocalizedResource(appReq3);
    assertEquals(appReq3,recoveredRsrc.getRequest());
    assertEquals(appLr3.getLocalPath(),recoveredRsrc.getLocalPath());
    assertEquals(appLr3.getSize(),recoveredRsrc.getSize());
    assertEquals(ResourceState.LOCALIZED,recoveredRsrc.getState());
  }
  finally {
    dispatcher.stop();
    stateStore.close();
  }
}
