{
  List<Path> localDirs=new ArrayList<Path>();
  String[] sDirs=new String[1];
  localDirs.add(lfs.makeQualified(new Path(basedir,0 + "")));
  sDirs[0]=localDirs.get(0).toString();
  conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS,sDirs);
  conf.set(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY,"37");
  DrainDispatcher dispatcher=new DrainDispatcher();
  dispatcher.init(conf);
  dispatcher.start();
  EventHandler<ApplicationEvent> applicationBus=mock(EventHandler.class);
  dispatcher.register(ApplicationEventType.class,applicationBus);
  EventHandler<ContainerEvent> containerBus=mock(EventHandler.class);
  dispatcher.register(ContainerEventType.class,containerBus);
  ContainerExecutor exec=mock(ContainerExecutor.class);
  LocalDirsHandlerService dirsHandler=new LocalDirsHandlerService();
  dirsHandler.init(conf);
  DeletionService delServiceReal=new DeletionService(exec);
  DeletionService delService=spy(delServiceReal);
  delService.init(new Configuration());
  delService.start();
  ResourceLocalizationService rawService=new ResourceLocalizationService(dispatcher,exec,delService,dirsHandler,nmContext);
  ResourceLocalizationService spyService=spy(rawService);
  doReturn(mockServer).when(spyService).createServer();
  doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));
  FsPermission defaultPermission=FsPermission.getDirDefault().applyUMask(lfs.getUMask());
  FsPermission nmPermission=ResourceLocalizationService.NM_PRIVATE_PERM.applyUMask(lfs.getUMask());
  final Path userDir=new Path(sDirs[0].substring("file:".length()),ContainerLocalizer.USERCACHE);
  final Path fileDir=new Path(sDirs[0].substring("file:".length()),ContainerLocalizer.FILECACHE);
  final Path sysDir=new Path(sDirs[0].substring("file:".length()),ResourceLocalizationService.NM_PRIVATE_DIR);
  final FileStatus fs=new FileStatus(0,true,1,0,System.currentTimeMillis(),0,defaultPermission,"","",new Path(sDirs[0]));
  final FileStatus nmFs=new FileStatus(0,true,1,0,System.currentTimeMillis(),0,nmPermission,"","",sysDir);
  doAnswer(new Answer<FileStatus>(){
    @Override public FileStatus answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      if (args.length > 0) {
        if (args[0].equals(userDir) || args[0].equals(fileDir)) {
          return fs;
        }
      }
      return nmFs;
    }
  }
).when(spylfs).getFileStatus(isA(Path.class));
  try {
    spyService.init(conf);
    spyService.start();
    final Application app=mock(Application.class);
    final ApplicationId appId=BuilderUtils.newApplicationId(314159265358979L,3);
    when(app.getUser()).thenReturn("user0");
    when(app.getAppId()).thenReturn(appId);
    spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES,app));
    ArgumentMatcher<ApplicationEvent> matchesAppInit=new ArgumentMatcher<ApplicationEvent>(){
      @Override public boolean matches(      Object o){
        ApplicationEvent evt=(ApplicationEvent)o;
        return evt.getType() == ApplicationEventType.APPLICATION_INITED && appId == evt.getApplicationID();
      }
    }
;
    dispatcher.await();
    verify(applicationBus).handle(argThat(matchesAppInit));
    Random r=new Random();
    long seed=r.nextLong();
    System.out.println("SEED: " + seed);
    r.setSeed(seed);
    final Container c=getMockContainer(appId,42,"user0");
    FSDataOutputStream out=new FSDataOutputStream(new DataOutputBuffer(),null);
    doReturn(out).when(spylfs).createInternal(isA(Path.class),isA(EnumSet.class),isA(FsPermission.class),anyInt(),anyShort(),anyLong(),isA(Progressable.class),isA(ChecksumOpt.class),anyBoolean());
    final LocalResource resource1=getPrivateMockedResource(r);
    LocalResource resource2=null;
    do {
      resource2=getPrivateMockedResource(r);
    }
 while (resource2 == null || resource2.equals(resource1));
    LocalResource resource3=null;
    do {
      resource3=getPrivateMockedResource(r);
    }
 while (resource3 == null || resource3.equals(resource1) || resource3.equals(resource2));
    final LocalResourceRequest req1=new LocalResourceRequest(resource1);
    final LocalResourceRequest req2=new LocalResourceRequest(resource2);
    final LocalResourceRequest req3=new LocalResourceRequest(resource3);
    Map<LocalResourceVisibility,Collection<LocalResourceRequest>> rsrcs=new HashMap<LocalResourceVisibility,Collection<LocalResourceRequest>>();
    List<LocalResourceRequest> privateResourceList=new ArrayList<LocalResourceRequest>();
    privateResourceList.add(req1);
    privateResourceList.add(req2);
    privateResourceList.add(req3);
    rsrcs.put(LocalResourceVisibility.PRIVATE,privateResourceList);
    spyService.handle(new ContainerLocalizationRequestEvent(c,rsrcs));
    Thread.sleep(1000);
    dispatcher.await();
    String appStr=ConverterUtils.toString(appId);
    String ctnrStr=c.getContainerId().toString();
    ArgumentCaptor<LocalizerStartContext> contextCaptor=ArgumentCaptor.forClass(LocalizerStartContext.class);
    verify(exec).startLocalizer(contextCaptor.capture());
    LocalizerStartContext context=contextCaptor.getValue();
    Path localizationTokenPath=context.getNmPrivateContainerTokens();
    assertEquals("user0",context.getUser());
    assertEquals(appStr,context.getAppId());
    assertEquals(ctnrStr,context.getLocId());
    LocalResourceStatus rsrc1success=mock(LocalResourceStatus.class);
    LocalResourceStatus rsrc2pending=mock(LocalResourceStatus.class);
    LocalResourceStatus rsrc2success=mock(LocalResourceStatus.class);
    LocalResourceStatus rsrc3success=mock(LocalResourceStatus.class);
    LocalizerStatus stat=mock(LocalizerStatus.class);
    when(stat.getLocalizerId()).thenReturn(ctnrStr);
    when(rsrc1success.getResource()).thenReturn(resource1);
    when(rsrc2pending.getResource()).thenReturn(resource2);
    when(rsrc2success.getResource()).thenReturn(resource2);
    when(rsrc3success.getResource()).thenReturn(resource3);
    when(rsrc1success.getLocalSize()).thenReturn(4344L);
    when(rsrc2success.getLocalSize()).thenReturn(2342L);
    when(rsrc3success.getLocalSize()).thenReturn(5345L);
    URL locPath=getPath("/cache/private/blah");
    when(rsrc1success.getLocalPath()).thenReturn(locPath);
    when(rsrc2success.getLocalPath()).thenReturn(locPath);
    when(rsrc3success.getLocalPath()).thenReturn(locPath);
    when(rsrc1success.getStatus()).thenReturn(ResourceStatusType.FETCH_SUCCESS);
    when(rsrc2pending.getStatus()).thenReturn(ResourceStatusType.FETCH_PENDING);
    when(rsrc2success.getStatus()).thenReturn(ResourceStatusType.FETCH_SUCCESS);
    when(rsrc3success.getStatus()).thenReturn(ResourceStatusType.FETCH_SUCCESS);
    List<LocalResourceStatus> rsrcs4=new ArrayList<LocalResourceStatus>();
    rsrcs4.add(rsrc2success);
    rsrcs4.add(rsrc3success);
    when(stat.getResources()).thenReturn(Collections.<LocalResourceStatus>emptyList()).thenReturn(Collections.singletonList(rsrc1success)).thenReturn(Collections.singletonList(rsrc2pending)).thenReturn(rsrcs4).thenReturn(Collections.<LocalResourceStatus>emptyList());
    String localPath=Path.SEPARATOR + ContainerLocalizer.USERCACHE + Path.SEPARATOR+ "user0"+ Path.SEPARATOR+ ContainerLocalizer.FILECACHE;
    LocalizerHeartbeatResponse response=spyService.heartbeat(stat);
    assertEquals(LocalizerAction.LIVE,response.getLocalizerAction());
    assertEquals(1,response.getResourceSpecs().size());
    assertEquals(req1,new LocalResourceRequest(response.getResourceSpecs().get(0).getResource()));
    URL localizedPath=response.getResourceSpecs().get(0).getDestinationDirectory();
    assertTrue(localizedPath.getFile().endsWith(localPath + Path.SEPARATOR + "10"));
    response=spyService.heartbeat(stat);
    assertEquals(LocalizerAction.LIVE,response.getLocalizerAction());
    assertEquals(1,response.getResourceSpecs().size());
    assertEquals(req2,new LocalResourceRequest(response.getResourceSpecs().get(0).getResource()));
    localizedPath=response.getResourceSpecs().get(0).getDestinationDirectory();
    assertTrue(localizedPath.getFile().endsWith(localPath + Path.SEPARATOR + "0"+ Path.SEPARATOR+ "11"));
    response=spyService.heartbeat(stat);
    assertEquals(LocalizerAction.LIVE,response.getLocalizerAction());
    assertEquals(1,response.getResourceSpecs().size());
    assertEquals(req3,new LocalResourceRequest(response.getResourceSpecs().get(0).getResource()));
    localizedPath=response.getResourceSpecs().get(0).getDestinationDirectory();
    assertTrue(localizedPath.getFile().endsWith(localPath + Path.SEPARATOR + "1"+ Path.SEPARATOR+ "12"));
    response=spyService.heartbeat(stat);
    assertEquals(LocalizerAction.LIVE,response.getLocalizerAction());
    spyService.handle(new ContainerLocalizationEvent(LocalizationEventType.CONTAINER_RESOURCES_LOCALIZED,c));
    response=spyService.heartbeat(stat);
    assertEquals(LocalizerAction.DIE,response.getLocalizerAction());
    dispatcher.await();
    ArgumentMatcher<ContainerEvent> matchesContainerLoc=new ArgumentMatcher<ContainerEvent>(){
      @Override public boolean matches(      Object o){
        ContainerEvent evt=(ContainerEvent)o;
        return evt.getType() == ContainerEventType.RESOURCE_LOCALIZED && c.getContainerId() == evt.getContainerID();
      }
    }
;
    verify(containerBus,times(3)).handle(argThat(matchesContainerLoc));
    verify(delService).delete((String)isNull(),eq(localizationTokenPath));
  }
  finally {
    spyService.stop();
    dispatcher.stop();
    delService.stop();
  }
}
