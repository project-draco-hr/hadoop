{
  NMStateStoreService spyStateStore=spy(nmContext.getNMStateStore());
  when(spyStateStore.canRecover()).thenReturn(true);
  NMContext spyContext=spy(nmContext);
  when(spyContext.getNMStateStore()).thenReturn(spyStateStore);
  List<Path> localDirs=new ArrayList<Path>();
  String[] sDirs=new String[4];
  for (int i=0; i < 4; ++i) {
    localDirs.add(lfs.makeQualified(new Path(basedir,i + "")));
    sDirs[i]=localDirs.get(i).toString();
  }
  conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS,sDirs);
  DrainDispatcher dispatcher=new DrainDispatcher();
  EventHandler<ApplicationEvent> applicationBus=mock(EventHandler.class);
  dispatcher.register(ApplicationEventType.class,applicationBus);
  EventHandler<ContainerEvent> containerBus=mock(EventHandler.class);
  dispatcher.register(ContainerEventType.class,containerBus);
  ContainerExecutor exec=mock(ContainerExecutor.class);
  DeletionService delService=mock(DeletionService.class);
  LocalDirsHandlerService dirsHandler=new LocalDirsHandlerService();
  dirsHandler.init(conf);
  dispatcher.init(conf);
  dispatcher.start();
  try {
    ResourceLocalizationService rawService=new ResourceLocalizationService(dispatcher,exec,delService,dirsHandler,spyContext);
    ResourceLocalizationService spyService=spy(rawService);
    doReturn(mockServer).when(spyService).createServer();
    doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));
    spyService.init(conf);
    final FsPermission defaultPerm=new FsPermission((short)0755);
    for (    Path p : localDirs) {
      p=new Path((new URI(p.toString())).getPath());
      Path publicCache=new Path(p,ContainerLocalizer.FILECACHE);
      verify(spylfs,never()).mkdir(eq(publicCache),eq(defaultPerm),eq(true));
    }
    spyService.start();
    final String user="user0";
    final Application app=mock(Application.class);
    final ApplicationId appId=BuilderUtils.newApplicationId(314159265358979L,3);
    when(app.getUser()).thenReturn(user);
    when(app.getAppId()).thenReturn(appId);
    spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES,app));
    dispatcher.await();
    final Container c=getMockContainer(appId,42,user);
    Random r=new Random();
    long seed=r.nextLong();
    System.out.println("SEED: " + seed);
    r.setSeed(seed);
    final LocalResource pubResource1=getPublicMockedResource(r);
    final LocalResourceRequest pubReq1=new LocalResourceRequest(pubResource1);
    LocalResource pubResource2=null;
    do {
      pubResource2=getPublicMockedResource(r);
    }
 while (pubResource2 == null || pubResource2.equals(pubResource1));
    final LocalResourceRequest pubReq2=new LocalResourceRequest(pubResource2);
    Set<LocalResourceRequest> pubRsrcs=new HashSet<LocalResourceRequest>();
    pubRsrcs.add(pubReq1);
    pubRsrcs.add(pubReq2);
    Map<LocalResourceVisibility,Collection<LocalResourceRequest>> req=new HashMap<LocalResourceVisibility,Collection<LocalResourceRequest>>();
    req.put(LocalResourceVisibility.PUBLIC,pubRsrcs);
    spyService.handle(new ContainerLocalizationRequestEvent(c,req));
    dispatcher.await();
    verify(spyService,times(1)).checkAndInitializeLocalDirs();
    for (    Path p : localDirs) {
      p=new Path((new URI(p.toString())).getPath());
      Path publicCache=new Path(p,ContainerLocalizer.FILECACHE);
      verify(spylfs).mkdir(eq(publicCache),eq(defaultPerm),eq(true));
    }
  }
  finally {
    dispatcher.stop();
  }
}
