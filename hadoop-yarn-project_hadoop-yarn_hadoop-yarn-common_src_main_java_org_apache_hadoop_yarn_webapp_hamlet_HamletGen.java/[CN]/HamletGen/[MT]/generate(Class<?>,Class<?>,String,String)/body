{
  LOG.info("Generating {} using {} and {}",new Object[]{outputName,specClass,implClass});
  out=new PrintWriter(outputName + ".java","UTF-8");
  hamlet=basename(outputName);
  String pkg=pkgName(outputPkg,implClass.getPackage().getName());
  puts(0,"// Generated by HamletGen. Do NOT edit!\n","package ",pkg,";\n","import java.io.PrintWriter;\n","import java.util.EnumSet;\n","import static java.util.EnumSet.*;\n","import static ",implClass.getName(),".EOpt.*;\n","import org.apache.hadoop.yarn.webapp.SubView;");
  String implClassName=implClass.getSimpleName();
  if (!implClass.getPackage().getName().equals(pkg)) {
    puts(0,"import ",implClass.getName(),';');
  }
  puts(0,"\n","public class ",hamlet," extends ",implClassName," implements ",specClass.getSimpleName(),"._Html {\n","  public ",hamlet,"(PrintWriter out, int nestLevel,"," boolean wasInline) {\n","    super(out, nestLevel, wasInline);\n","  }\n\n","  static EnumSet<EOpt> opt(boolean endTag, boolean inline, ","boolean pre) {\n","    EnumSet<EOpt> opts = of(ENDTAG);\n","    if (!endTag) opts.remove(ENDTAG);\n","    if (inline) opts.add(INLINE);\n","    if (pre) opts.add(PRE);\n","    return opts;\n","  }");
  initLut(specClass);
  genImpl(specClass,implClassName,1);
  LOG.info("Generating {} methods",hamlet);
  genMethods(hamlet,top,1);
  puts(0,"}");
  out.close();
  LOG.info("Wrote {} bytes to {}.java",bytes,outputName);
}
