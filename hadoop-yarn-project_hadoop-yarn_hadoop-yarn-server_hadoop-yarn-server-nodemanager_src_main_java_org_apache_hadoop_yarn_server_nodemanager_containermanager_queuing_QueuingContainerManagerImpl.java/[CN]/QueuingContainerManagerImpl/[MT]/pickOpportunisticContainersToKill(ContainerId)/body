{
  List<ContainerId> extraOpportContainersToKill=new ArrayList<>();
  ResourceUtilization resourcesToFreeUp=resourcesToFreeUp(containerToStartId);
  boolean hasSufficientResources=false;
  for (  Map.Entry<ContainerId,AllocatedContainerInfo> runningOpportCont : allocatedOpportunisticContainers.entrySet()) {
    ContainerId runningOpportContId=runningOpportCont.getKey();
    if (resourcesToFreeUp.getPhysicalMemory() <= 0 && resourcesToFreeUp.getVirtualMemory() <= 0 && resourcesToFreeUp.getCPU() <= 0.0f) {
      hasSufficientResources=true;
      break;
    }
    if (!opportunisticContainersToKill.contains(runningOpportContId)) {
      extraOpportContainersToKill.add(runningOpportContId);
      opportunisticContainersToKill.add(runningOpportContId);
      getContainersMonitor().decreaseResourceUtilization(resourcesToFreeUp,runningOpportCont.getValue().getPti());
    }
  }
  if (!hasSufficientResources) {
    LOG.info("There are no sufficient resources to start guaranteed {} even after " + "attempting to kill any running opportunistic containers.",containerToStartId);
  }
  return extraOpportContainersToKill;
}
