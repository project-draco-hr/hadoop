{
  if (node == null)   return;
  String oldTopoStr=this.toString();
  if (node instanceof InnerNode) {
    throw new IllegalArgumentException("Not allow to add an inner node: " + NodeBase.getPath(node));
  }
  int newDepth=NodeBase.locationToDepth(node.getNetworkLocation()) + 1;
  netlock.writeLock().lock();
  try {
    if ((depthOfAllLeaves != -1) && (depthOfAllLeaves != newDepth)) {
      LOG.error("Error: can't add leaf node at depth " + newDepth + " to topology:\n"+ oldTopoStr);
      throw new InvalidTopologyException("Invalid network topology. " + "You cannot have a rack and a non-rack node at the same " + "level of the network topology.");
    }
    Node rack=getNodeForNetworkLocation(node);
    if (rack != null && !(rack instanceof InnerNode)) {
      throw new IllegalArgumentException("Unexpected data node " + node.toString() + " at an illegal network location");
    }
    if (clusterMap.add(node)) {
      LOG.info("Adding a new node: " + NodeBase.getPath(node));
      if (rack == null) {
        numOfRacks++;
      }
      if (!(node instanceof InnerNode)) {
        if (depthOfAllLeaves == -1) {
          depthOfAllLeaves=node.getLevel();
        }
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("NetworkTopology became:\n" + this.toString());
    }
  }
  finally {
    netlock.writeLock().unlock();
  }
}
