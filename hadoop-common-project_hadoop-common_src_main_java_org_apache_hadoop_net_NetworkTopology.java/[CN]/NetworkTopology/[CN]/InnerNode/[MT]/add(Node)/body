{
  if (!isAncestor(n))   throw new IllegalArgumentException(n.getName() + ", which is located at " + n.getNetworkLocation()+ ", is not a decendent of "+ getPath(this));
  if (isParent(n)) {
    n.setParent(this);
    n.setLevel(this.level + 1);
    Node prev=childrenMap.put(n.getName(),n);
    if (prev != null) {
      for (int i=0; i < children.size(); i++) {
        if (children.get(i).getName().equals(n.getName())) {
          children.set(i,n);
          return false;
        }
      }
    }
    children.add(n);
    numOfLeaves++;
    return true;
  }
 else {
    String parentName=getNextAncestorName(n);
    InnerNode parentNode=(InnerNode)childrenMap.get(parentName);
    if (parentNode == null) {
      parentNode=createParentNode(parentName);
      children.add(parentNode);
      childrenMap.put(parentNode.getName(),parentNode);
    }
    if (parentNode.add(n)) {
      numOfLeaves++;
      return true;
    }
 else {
      return false;
    }
  }
}
