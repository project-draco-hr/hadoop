{
  if (!isAncestor(n)) {
    throw new IllegalArgumentException(n.getName() + ", which is located at " + n.getNetworkLocation()+ ", is not a descendent of "+ getPath(this));
  }
  if (isParent(n)) {
    if (childrenMap.containsKey(n.getName())) {
      for (int i=0; i < children.size(); i++) {
        if (children.get(i).getName().equals(n.getName())) {
          children.remove(i);
          childrenMap.remove(n.getName());
          numOfLeaves--;
          n.setParent(null);
          return true;
        }
      }
    }
    return false;
  }
 else {
    String parentName=getNextAncestorName(n);
    InnerNode parentNode=(InnerNode)childrenMap.get(parentName);
    if (parentNode == null) {
      return false;
    }
    boolean isRemoved=parentNode.remove(n);
    if (isRemoved) {
      if (parentNode.getNumOfChildren() == 0) {
        for (int i=0; i < children.size(); i++) {
          if (children.get(i).getName().equals(parentName)) {
            children.remove(i);
            childrenMap.remove(parentName);
            break;
          }
        }
      }
      numOfLeaves--;
    }
    return isRemoved;
  }
}
