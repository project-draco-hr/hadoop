{
  for (int i=0; i < NUM_OF_DATANODES; i++) {
    cluster.remove(dataNodes[i]);
  }
  for (int i=0; i < NUM_OF_DATANODES_BOUNDARY; i++) {
    cluster.add(dataNodesInBoundaryCase[i]);
  }
  for (int i=0; i < NUM_OF_DATANODES_BOUNDARY; i++) {
    dataNodes[0].updateHeartbeat(2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,(HdfsConstants.MIN_BLOCKS_FOR_WRITE - 1) * BLOCK_SIZE,0L,0,0);
    dataNodesInBoundaryCase[i].updateHeartbeat(2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0,0);
  }
  DatanodeDescriptor[] targets;
  targets=chooseTarget(0,dataNodesInBoundaryCase[0]);
  assertEquals(targets.length,0);
  targets=chooseTarget(1,dataNodesInBoundaryCase[0]);
  assertEquals(targets.length,1);
  targets=chooseTarget(2,dataNodesInBoundaryCase[0]);
  assertEquals(targets.length,2);
  assertFalse(cluster.isOnSameRack(targets[0],targets[1]));
  targets=chooseTarget(3,dataNodesInBoundaryCase[0]);
  assertEquals(targets.length,3);
  assertTrue(checkTargetsOnDifferentNodeGroup(targets));
}
