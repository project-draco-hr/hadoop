{
  for (int i=0; i < dataNodes.length; i++) {
    cluster.remove(dataNodes[i]);
  }
  for (int i=0; i < dataNodesInBoundaryCase.length; i++) {
    cluster.add(dataNodesInBoundaryCase[i]);
  }
  for (int i=0; i < dataNodesInBoundaryCase.length; i++) {
    updateHeartbeatWithUsage(dataNodesInBoundaryCase[i],2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0L,0L,0,0);
  }
  DatanodeStorageInfo[] targets;
  targets=chooseTarget(0,dataNodesInBoundaryCase[0]);
  assertEquals(targets.length,0);
  targets=chooseTarget(1,dataNodesInBoundaryCase[0]);
  assertEquals(targets.length,1);
  targets=chooseTarget(2,dataNodesInBoundaryCase[0]);
  assertEquals(targets.length,2);
  assertFalse(isOnSameRack(targets[0],targets[1]));
  targets=chooseTarget(3,dataNodesInBoundaryCase[0]);
  assertEquals(targets.length,3);
  assertTrue(checkTargetsOnDifferentNodeGroup(targets));
}
