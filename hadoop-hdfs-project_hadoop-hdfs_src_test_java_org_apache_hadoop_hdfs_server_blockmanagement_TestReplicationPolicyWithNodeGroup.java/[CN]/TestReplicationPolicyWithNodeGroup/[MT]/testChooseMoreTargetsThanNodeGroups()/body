{
  for (int i=0; i < dataNodes.length; i++) {
    cluster.remove(dataNodes[i]);
  }
  for (int i=0; i < dataNodesInBoundaryCase.length; i++) {
    DatanodeDescriptor node=dataNodesInBoundaryCase[i];
    if (cluster.contains(node)) {
      cluster.remove(node);
    }
  }
  for (int i=0; i < dataNodesInMoreTargetsCase.length; i++) {
    cluster.add(dataNodesInMoreTargetsCase[i]);
  }
  for (int i=0; i < dataNodesInMoreTargetsCase.length; i++) {
    updateHeartbeatWithUsage(dataNodesInMoreTargetsCase[i],2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0L,0L,0,0);
  }
  DatanodeStorageInfo[] targets;
  targets=chooseTarget(3,dataNodesInMoreTargetsCase[0]);
  assertEquals(targets.length,3);
  assertTrue(checkTargetsOnDifferentNodeGroup(targets));
  targets=chooseTarget(10,dataNodesInMoreTargetsCase[0]);
  assertTrue(checkTargetsOnDifferentNodeGroup(targets));
  assertEquals(targets.length,6);
}
