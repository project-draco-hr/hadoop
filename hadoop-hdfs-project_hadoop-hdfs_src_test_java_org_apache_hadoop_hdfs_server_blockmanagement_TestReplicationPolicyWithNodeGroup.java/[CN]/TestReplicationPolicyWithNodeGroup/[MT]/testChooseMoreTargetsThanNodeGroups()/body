{
  for (int i=0; i < NUM_OF_DATANODES; i++) {
    cluster.remove(dataNodes[i]);
  }
  for (int i=0; i < NUM_OF_DATANODES_BOUNDARY; i++) {
    DatanodeDescriptor node=dataNodesInBoundaryCase[i];
    if (cluster.contains(node)) {
      cluster.remove(node);
    }
  }
  for (int i=0; i < NUM_OF_DATANODES_MORE_TARGETS; i++) {
    cluster.add(dataNodesInMoreTargetsCase[i]);
  }
  for (int i=0; i < NUM_OF_DATANODES_MORE_TARGETS; i++) {
    dataNodesInMoreTargetsCase[i].updateHeartbeat(2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0L,0L,0,0);
  }
  DatanodeDescriptor[] targets;
  targets=replicator.chooseTarget(filename,3,dataNodesInMoreTargetsCase[0],new ArrayList<DatanodeDescriptor>(),BLOCK_SIZE);
  assertEquals(targets.length,3);
  assertTrue(checkTargetsOnDifferentNodeGroup(targets));
  targets=replicator.chooseTarget(filename,10,dataNodesInMoreTargetsCase[0],new ArrayList<DatanodeDescriptor>(),BLOCK_SIZE);
  assertTrue(checkTargetsOnDifferentNodeGroup(targets));
  assertEquals(targets.length,6);
}
