{
  List<DatanodeStorageInfo> replicaList=new ArrayList<>();
  final Map<String,List<DatanodeStorageInfo>> rackMap=new HashMap<>();
  dataNodes[0].setRemaining(4 * 1024 * 1024);
  replicaList.add(storages[0]);
  dataNodes[1].setRemaining(3 * 1024 * 1024);
  replicaList.add(storages[1]);
  dataNodes[2].setRemaining(2 * 1024 * 1024);
  replicaList.add(storages[2]);
  dataNodes[5].setRemaining(1 * 1024 * 1024);
  replicaList.add(storages[5]);
  List<DatanodeStorageInfo> first=new ArrayList<>();
  List<DatanodeStorageInfo> second=new ArrayList<>();
  replicator.splitNodesWithRack(replicaList,rackMap,first,second);
  assertEquals(3,first.size());
  assertEquals(1,second.size());
  List<StorageType> excessTypes=new ArrayList<>();
  excessTypes.add(StorageType.DEFAULT);
  DatanodeStorageInfo chosen=((BlockPlacementPolicyDefault)replicator).chooseReplicaToDelete(first,second,excessTypes);
  assertEquals(chosen,storages[1]);
  replicator.adjustSetsWithChosenReplica(rackMap,first,second,chosen);
  assertEquals(2,first.size());
  assertEquals(1,second.size());
  excessTypes.add(StorageType.DEFAULT);
  chosen=((BlockPlacementPolicyDefault)replicator).chooseReplicaToDelete(first,second,excessTypes);
  assertEquals(chosen,storages[2]);
  replicator.adjustSetsWithChosenReplica(rackMap,first,second,chosen);
  assertEquals(0,first.size());
  assertEquals(2,second.size());
  excessTypes.add(StorageType.DEFAULT);
  chosen=((BlockPlacementPolicyDefault)replicator).chooseReplicaToDelete(first,second,excessTypes);
  assertEquals(chosen,storages[5]);
}
