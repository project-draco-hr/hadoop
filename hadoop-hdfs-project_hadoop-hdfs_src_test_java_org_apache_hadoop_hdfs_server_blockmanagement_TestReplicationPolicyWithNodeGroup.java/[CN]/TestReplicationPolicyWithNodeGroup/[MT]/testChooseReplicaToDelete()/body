{
  List<DatanodeDescriptor> replicaNodeList=new ArrayList<DatanodeDescriptor>();
  final Map<String,List<DatanodeDescriptor>> rackMap=new HashMap<String,List<DatanodeDescriptor>>();
  dataNodes[0].setRemaining(4 * 1024 * 1024);
  replicaNodeList.add(dataNodes[0]);
  dataNodes[1].setRemaining(3 * 1024 * 1024);
  replicaNodeList.add(dataNodes[1]);
  dataNodes[2].setRemaining(2 * 1024 * 1024);
  replicaNodeList.add(dataNodes[2]);
  dataNodes[5].setRemaining(1 * 1024 * 1024);
  replicaNodeList.add(dataNodes[5]);
  List<DatanodeDescriptor> first=new ArrayList<DatanodeDescriptor>();
  List<DatanodeDescriptor> second=new ArrayList<DatanodeDescriptor>();
  replicator.splitNodesWithRack(replicaNodeList,rackMap,first,second);
  assertEquals(3,first.size());
  assertEquals(1,second.size());
  DatanodeDescriptor chosenNode=replicator.chooseReplicaToDelete(null,null,(short)3,first,second);
  assertEquals(chosenNode,dataNodes[1]);
  replicator.adjustSetsWithChosenReplica(rackMap,first,second,chosenNode);
  assertEquals(2,first.size());
  assertEquals(1,second.size());
  chosenNode=replicator.chooseReplicaToDelete(null,null,(short)2,first,second);
  assertEquals(chosenNode,dataNodes[2]);
  replicator.adjustSetsWithChosenReplica(rackMap,first,second,chosenNode);
  assertEquals(0,first.size());
  assertEquals(2,second.size());
  chosenNode=replicator.chooseReplicaToDelete(null,null,(short)1,first,second);
  assertEquals(chosenNode,dataNodes[5]);
}
