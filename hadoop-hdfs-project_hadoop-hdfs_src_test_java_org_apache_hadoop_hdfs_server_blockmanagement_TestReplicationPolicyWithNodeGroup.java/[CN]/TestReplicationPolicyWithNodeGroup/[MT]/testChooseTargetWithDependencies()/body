{
  for (int i=0; i < dataNodes.length; i++) {
    cluster.remove(dataNodes[i]);
  }
  for (int i=0; i < dataNodesInMoreTargetsCase.length; i++) {
    DatanodeDescriptor node=dataNodesInMoreTargetsCase[i];
    if (cluster.contains(node)) {
      cluster.remove(node);
    }
  }
  Host2NodesMap host2DatanodeMap=namenode.getNamesystem().getBlockManager().getDatanodeManager().getHost2DatanodeMap();
  for (int i=0; i < dataNodesForDependencies.length; i++) {
    cluster.add(dataNodesForDependencies[i]);
    host2DatanodeMap.add(dataNodesForDependencies[i]);
  }
  dataNodesForDependencies[1].addDependentHostName(dataNodesForDependencies[2].getHostName());
  dataNodesForDependencies[2].addDependentHostName(dataNodesForDependencies[1].getHostName());
  dataNodesForDependencies[3].addDependentHostName(dataNodesForDependencies[4].getHostName());
  dataNodesForDependencies[4].addDependentHostName(dataNodesForDependencies[3].getHostName());
  for (int i=0; i < dataNodesForDependencies.length; i++) {
    updateHeartbeatWithUsage(dataNodesForDependencies[i],2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,2 * HdfsServerConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE,0L,0L,0L,0,0);
  }
  List<DatanodeStorageInfo> chosenNodes=new ArrayList<DatanodeStorageInfo>();
  DatanodeStorageInfo[] targets;
  Set<Node> excludedNodes=new HashSet<Node>();
  excludedNodes.add(dataNodesForDependencies[5]);
  targets=chooseTarget(3,dataNodesForDependencies[1],chosenNodes,excludedNodes);
  assertEquals(targets.length,2);
  assertEquals(targets[0],storagesForDependencies[1]);
  assertTrue(targets[1].equals(storagesForDependencies[3]) || targets[1].equals(storagesForDependencies[4]));
  assertEquals(excludedNodes.size(),dataNodesForDependencies.length);
  for (int i=0; i < dataNodesForDependencies.length; i++) {
    assertTrue(excludedNodes.contains(dataNodesForDependencies[i]));
  }
}
