{
  int tasksToPick=Math.min(slotsPerHost,(int)Math.ceil((double)remainingSplits / hosts.size()));
  Split[] best=new Split[tasksToPick];
  for (  Split cur : host.splits) {
    LOG.debug("  examine: " + cur.filename + " "+ cur.locations.size());
    int i=0;
    while (i < tasksToPick && best[i] != null && best[i].locations.size() <= cur.locations.size()) {
      i+=1;
    }
    if (i < tasksToPick) {
      for (int j=tasksToPick - 1; j > i; --j) {
        best[j]=best[j - 1];
      }
      best[i]=cur;
    }
  }
  for (int i=0; i < tasksToPick; ++i) {
    if (best[i] != null) {
      LOG.debug(" best: " + best[i].filename);
      for (      Host other : best[i].locations) {
        other.splits.remove(best[i]);
      }
      best[i].locations.clear();
      best[i].locations.add(host);
      best[i].isAssigned=true;
      remainingSplits-=1;
    }
  }
  for (  Split cur : host.splits) {
    if (!cur.isAssigned) {
      cur.locations.remove(host);
    }
  }
}
