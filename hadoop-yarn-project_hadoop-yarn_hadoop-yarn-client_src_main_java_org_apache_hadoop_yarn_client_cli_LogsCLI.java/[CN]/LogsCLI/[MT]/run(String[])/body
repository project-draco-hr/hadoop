{
  Options opts=createCommandOpts();
  Options printOpts=createPrintOpts(opts);
  if (args.length < 1) {
    printHelpMessage(printOpts);
    return -1;
  }
  if (args[0].equals("-help")) {
    printHelpMessage(printOpts);
    return 0;
  }
  CommandLineParser parser=new GnuParser();
  String appIdStr=null;
  String containerIdStr=null;
  String nodeAddress=null;
  String appOwner=null;
  boolean getAMContainerLogs=false;
  boolean showMetaInfo=false;
  boolean nodesList=false;
  String[] logFiles=null;
  List<String> amContainersList=new ArrayList<String>();
  try {
    CommandLine commandLine=parser.parse(opts,args,true);
    appIdStr=commandLine.getOptionValue(APPLICATION_ID_OPTION);
    containerIdStr=commandLine.getOptionValue(CONTAINER_ID_OPTION);
    nodeAddress=commandLine.getOptionValue(NODE_ADDRESS_OPTION);
    appOwner=commandLine.getOptionValue(APP_OWNER_OPTION);
    getAMContainerLogs=commandLine.hasOption(AM_CONTAINER_OPTION);
    showMetaInfo=commandLine.hasOption(SHOW_META_INFO);
    nodesList=commandLine.hasOption(LIST_NODES_OPTION);
    if (getAMContainerLogs) {
      try {
        amContainersList=parseAMContainer(commandLine,printOpts);
      }
 catch (      NumberFormatException ex) {
        System.err.println(ex.getMessage());
        return -1;
      }
    }
    if (commandLine.hasOption(CONTAINER_LOG_FILES)) {
      logFiles=commandLine.getOptionValues(CONTAINER_LOG_FILES);
    }
  }
 catch (  ParseException e) {
    System.err.println("options parsing failed: " + e.getMessage());
    printHelpMessage(printOpts);
    return -1;
  }
  if (appIdStr == null) {
    System.err.println("ApplicationId cannot be null!");
    printHelpMessage(printOpts);
    return -1;
  }
  ApplicationId appId=null;
  try {
    appId=ConverterUtils.toApplicationId(appIdStr);
  }
 catch (  Exception e) {
    System.err.println("Invalid ApplicationId specified");
    return -1;
  }
  LogCLIHelpers logCliHelper=new LogCLIHelpers();
  logCliHelper.setConf(getConf());
  if (appOwner == null || appOwner.isEmpty()) {
    appOwner=UserGroupInformation.getCurrentUser().getShortUserName();
  }
  boolean appStateObtainedSuccessfully=true;
  YarnApplicationState appState=YarnApplicationState.NEW;
  try {
    appState=getApplicationState(appId);
    if (appState == YarnApplicationState.NEW || appState == YarnApplicationState.NEW_SAVING || appState == YarnApplicationState.SUBMITTED) {
      System.err.println("Logs are not avaiable right now.");
      return -1;
    }
  }
 catch (  IOException|YarnException e) {
    appStateObtainedSuccessfully=false;
    System.err.println("Unable to get ApplicationState." + " Attempting to fetch logs directly from the filesystem.");
  }
  if (showMetaInfo) {
    return showMetaInfo(appState,appStateObtainedSuccessfully,logCliHelper,appId,containerIdStr,nodeAddress,appOwner);
  }
  if (nodesList) {
    return showNodeLists(appState,appStateObtainedSuccessfully,logCliHelper,appId,appOwner);
  }
  if (getAMContainerLogs) {
    return fetchAMContainerLogs(logFiles,appState,appId,appOwner,amContainersList,logCliHelper);
  }
  int resultCode=0;
  if (containerIdStr != null) {
    ContainerId containerId=ContainerId.fromString(containerIdStr);
    if (!containerId.getApplicationAttemptId().getApplicationId().equals(appId)) {
      System.err.println("The Application:" + appId + " does not have the container:"+ containerId);
      return -1;
    }
    return fetchContainerLogs(appState,appStateObtainedSuccessfully,logFiles,appOwner,nodeAddress,containerId,logCliHelper);
  }
 else {
    if (nodeAddress == null) {
      resultCode=logCliHelper.dumpAllContainersLogs(appId,appOwner,System.out);
    }
 else {
      System.err.println("Should at least provide ContainerId!");
      printHelpMessage(printOpts);
      resultCode=-1;
    }
  }
  return resultCode;
}
