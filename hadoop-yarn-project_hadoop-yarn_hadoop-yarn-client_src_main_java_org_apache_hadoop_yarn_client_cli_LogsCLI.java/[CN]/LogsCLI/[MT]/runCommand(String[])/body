{
  Options opts=createCommandOpts();
  Options printOpts=createPrintOpts(opts);
  if (args.length < 1) {
    printHelpMessage(printOpts);
    return -1;
  }
  if (args[0].equals("-help")) {
    printHelpMessage(printOpts);
    return 0;
  }
  CommandLineParser parser=new GnuParser();
  String appIdStr=null;
  String containerIdStr=null;
  String nodeAddress=null;
  String appOwner=null;
  boolean getAMContainerLogs=false;
  boolean nodesList=false;
  boolean showApplicationLogInfo=false;
  boolean showContainerLogInfo=false;
  boolean useRegex=false;
  String[] logFiles=null;
  String[] logFilesRegex=null;
  List<String> amContainersList=new ArrayList<String>();
  String localDir=null;
  long bytes=Long.MAX_VALUE;
  try {
    CommandLine commandLine=parser.parse(opts,args,true);
    appIdStr=commandLine.getOptionValue(APPLICATION_ID_OPTION);
    containerIdStr=commandLine.getOptionValue(CONTAINER_ID_OPTION);
    nodeAddress=commandLine.getOptionValue(NODE_ADDRESS_OPTION);
    appOwner=commandLine.getOptionValue(APP_OWNER_OPTION);
    getAMContainerLogs=commandLine.hasOption(AM_CONTAINER_OPTION);
    nodesList=commandLine.hasOption(LIST_NODES_OPTION);
    localDir=commandLine.getOptionValue(OUT_OPTION);
    showApplicationLogInfo=commandLine.hasOption(SHOW_APPLICATION_LOG_INFO);
    showContainerLogInfo=commandLine.hasOption(SHOW_CONTAINER_LOG_INFO);
    if (getAMContainerLogs) {
      try {
        amContainersList=parseAMContainer(commandLine,printOpts);
      }
 catch (      NumberFormatException ex) {
        System.err.println(ex.getMessage());
        return -1;
      }
    }
    if (commandLine.hasOption(PER_CONTAINER_LOG_FILES_OPTION)) {
      logFiles=commandLine.getOptionValues(PER_CONTAINER_LOG_FILES_OPTION);
    }
    if (commandLine.hasOption(PER_CONTAINER_LOG_FILES_REGEX_OPTION)) {
      logFilesRegex=commandLine.getOptionValues(PER_CONTAINER_LOG_FILES_REGEX_OPTION);
      useRegex=true;
    }
    if (commandLine.hasOption(SIZE_OPTION)) {
      bytes=Long.parseLong(commandLine.getOptionValue(SIZE_OPTION));
    }
  }
 catch (  ParseException e) {
    System.err.println("options parsing failed: " + e.getMessage());
    printHelpMessage(printOpts);
    return -1;
  }
  if (appIdStr == null && containerIdStr == null) {
    System.err.println("Both applicationId and containerId are missing, " + " one of them must be specified.");
    printHelpMessage(printOpts);
    return -1;
  }
  ApplicationId appId=null;
  if (appIdStr != null) {
    try {
      appId=ApplicationId.fromString(appIdStr);
    }
 catch (    Exception e) {
      System.err.println("Invalid ApplicationId specified");
      return -1;
    }
  }
  if (containerIdStr != null) {
    try {
      ContainerId containerId=ContainerId.fromString(containerIdStr);
      if (appId == null) {
        appId=containerId.getApplicationAttemptId().getApplicationId();
      }
 else       if (!containerId.getApplicationAttemptId().getApplicationId().equals(appId)) {
        System.err.println("The Application:" + appId + " does not have the container:"+ containerId);
        return -1;
      }
    }
 catch (    Exception e) {
      System.err.println("Invalid ContainerId specified");
      return -1;
    }
  }
  if (showApplicationLogInfo && showContainerLogInfo) {
    System.err.println("Invalid options. Can only accept one of " + "show_application_log_info/show_container_log_info.");
    return -1;
  }
  if (logFiles != null && logFiles.length > 0 && logFilesRegex != null && logFilesRegex.length > 0) {
    System.err.println("Invalid options. Can only accept one of " + "log_files/log_files_pattern.");
    return -1;
  }
  if (localDir != null) {
    File file=new File(localDir);
    if (file.exists() && file.isFile()) {
      System.err.println("Invalid value for -out option. " + "Please provide a directory.");
      return -1;
    }
  }
  LogCLIHelpers logCliHelper=new LogCLIHelpers();
  logCliHelper.setConf(getConf());
  YarnApplicationState appState=YarnApplicationState.NEW;
  ApplicationReport appReport=null;
  try {
    appReport=getApplicationReport(appId);
    appState=appReport.getYarnApplicationState();
    if (appState == YarnApplicationState.NEW || appState == YarnApplicationState.NEW_SAVING || appState == YarnApplicationState.SUBMITTED) {
      System.err.println("Logs are not avaiable right now.");
      return -1;
    }
  }
 catch (  IOException|YarnException e) {
    appState=YarnApplicationState.FINISHED;
    System.err.println("Unable to get ApplicationState." + " Attempting to fetch logs directly from the filesystem.");
  }
  if (appOwner == null || appOwner.isEmpty()) {
    appOwner=guessAppOwner(appReport,appId);
    if (appOwner == null) {
      System.err.println("Can not find the appOwner. " + "Please specify the correct appOwner");
      System.err.println("Could not locate application logs for " + appId);
      return -1;
    }
  }
  Set<String> logs=new HashSet<String>();
  if (fetchAllLogFiles(logFiles,logFilesRegex)) {
    logs.add("ALL");
  }
 else   if (logFiles != null && logFiles.length > 0) {
    logs.addAll(Arrays.asList(logFiles));
  }
 else   if (logFilesRegex != null && logFilesRegex.length > 0) {
    logs.addAll(Arrays.asList(logFilesRegex));
  }
  ContainerLogsRequest request=new ContainerLogsRequest(appId,isApplicationFinished(appState),appOwner,nodeAddress,null,containerIdStr,localDir,logs,bytes,null);
  if (showContainerLogInfo) {
    return showContainerLogInfo(request,logCliHelper);
  }
  if (nodesList) {
    return showNodeLists(request,logCliHelper);
  }
  if (showApplicationLogInfo) {
    return showApplicationLogInfo(request,logCliHelper);
  }
  if (getAMContainerLogs) {
    return fetchAMContainerLogs(request,amContainersList,logCliHelper,useRegex);
  }
  int resultCode=0;
  if (containerIdStr != null) {
    return fetchContainerLogs(request,logCliHelper,useRegex);
  }
 else {
    if (nodeAddress == null) {
      resultCode=fetchApplicationLogs(request,logCliHelper,useRegex);
    }
 else {
      System.err.println("Should at least provide ContainerId!");
      printHelpMessage(printOpts);
      resultCode=-1;
    }
  }
  return resultCode;
}
