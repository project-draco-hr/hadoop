{
  String containerIdStr=request.getContainerId().toString();
  String localDir=request.getOutputLocalDir();
  String nodeHttpAddress=request.getNodeHttpAddress();
  if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {
    System.err.println("Can not get the logs for the container: " + containerIdStr);
    System.err.println("The node http address is required to get container " + "logs for the Running application.");
    return -1;
  }
  String nodeId=request.getNodeId();
  PrintStream out=logCliHelper.createPrintStream(localDir,nodeId,containerIdStr);
  try {
    Set<String> matchedFiles=getMatchedContainerLogFiles(request,useRegex);
    if (matchedFiles.isEmpty()) {
      System.err.println("Can not find any log file matching the pattern: " + request.getLogTypes() + " for the container: "+ containerIdStr+ " within the application: "+ request.getAppId());
      return -1;
    }
    ContainerLogsRequest newOptions=new ContainerLogsRequest(request);
    newOptions.setLogTypes(matchedFiles);
    Client webServiceClient=Client.create();
    String containerString=String.format(LogCLIHelpers.CONTAINER_ON_NODE_PATTERN,containerIdStr,nodeId);
    out.println(containerString);
    out.println(StringUtils.repeat("=",containerString.length()));
    boolean foundAnyLogs=false;
    byte[] buffer=new byte[65536];
    for (    String logFile : newOptions.getLogTypes()) {
      out.println("LogType:" + logFile);
      out.println("Log Upload Time:" + Times.format(System.currentTimeMillis()));
      out.println("Log Contents:");
      InputStream is=null;
      try {
        ClientResponse response=getResponeFromNMWebService(conf,webServiceClient,request,logFile);
        if (response != null && response.getStatusInfo().getStatusCode() == ClientResponse.Status.OK.getStatusCode()) {
          is=response.getEntityInputStream();
          int len=0;
          while ((len=is.read(buffer)) != -1) {
            out.write(buffer,0,len);
          }
          out.println();
        }
 else {
          out.println("Can not get any logs for the log file: " + logFile);
          String msg="Response from the NodeManager:" + nodeId + " WebService is "+ ((response == null) ? "null" : "not successful," + " HTTP error code: " + response.getStatus() + ", Server response:\n"+ response.getEntity(String.class));
          out.println(msg);
        }
        StringBuilder sb=new StringBuilder();
        sb.append("End of LogType:" + logFile + ".");
        if (request.getContainerState() == ContainerState.RUNNING) {
          sb.append(" This log file belongs" + " to a running container (" + containerIdStr + ") and so may"+ " not be complete.");
        }
        out.println(sb.toString());
        out.flush();
        foundAnyLogs=true;
      }
 catch (      ClientHandlerException|UniformInterfaceException ex) {
        System.err.println("Can not find the log file:" + logFile + " for the container:"+ containerIdStr+ " in NodeManager:"+ nodeId);
      }
 finally {
        IOUtils.closeQuietly(is);
      }
    }
    int result=logCliHelper.dumpAContainerLogsForLogType(newOptions,false);
    if (result == 0 || foundAnyLogs) {
      return 0;
    }
 else {
      return -1;
    }
  }
  finally {
    logCliHelper.closePrintStream(out);
  }
}
