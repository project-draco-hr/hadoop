{
  List<JSONObject> amContainersList=null;
  List<ContainerLogsRequest> requests=new ArrayList<ContainerLogsRequest>();
  boolean getAMContainerLists=false;
  String appId=request.getAppId().toString();
  StringBuilder errorMessage=new StringBuilder();
  try {
    amContainersList=getAMContainerInfoForRMWebService(conf,appId);
    if (amContainersList != null && !amContainersList.isEmpty()) {
      getAMContainerLists=true;
      for (      JSONObject amContainer : amContainersList) {
        ContainerLogsRequest amRequest=new ContainerLogsRequest(request);
        amRequest.setContainerId(amContainer.getString("containerId"));
        String httpAddress=amContainer.getString("nodeHttpAddress");
        if (httpAddress != null && !httpAddress.isEmpty()) {
          amRequest.setNodeHttpAddress(httpAddress);
        }
        amRequest.setNodeId(amContainer.getString("nodeId"));
        requests.add(amRequest);
      }
    }
  }
 catch (  Exception ex) {
    errorMessage.append(ex.getMessage() + "\n");
    if (request.isAppFinished()) {
      if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {
        errorMessage.append("Please enable the timeline service " + "and make sure the timeline server is running.");
      }
 else {
        try {
          amContainersList=getAMContainerInfoForAHSWebService(conf,appId);
          if (amContainersList != null && !amContainersList.isEmpty()) {
            getAMContainerLists=true;
            for (            JSONObject amContainer : amContainersList) {
              ContainerLogsRequest amRequest=new ContainerLogsRequest(request);
              amRequest.setContainerId(amContainer.getString("amContainerId"));
              requests.add(amRequest);
            }
          }
        }
 catch (        Exception e) {
          errorMessage.append(e.getMessage());
        }
      }
    }
  }
  if (!getAMContainerLists) {
    System.err.println("Unable to get AM container informations " + "for the application:" + appId);
    System.err.println(errorMessage);
    System.err.println("Can not get AMContainers logs for " + "the application:" + appId + " with the appOwner:"+ request.getAppOwner());
    return -1;
  }
  if (amContainers.contains("ALL")) {
    for (    ContainerLogsRequest amRequest : requests) {
      outputAMContainerLogs(amRequest,conf,logCliHelper);
    }
    outStream.println();
    outStream.println("Specified ALL for -am option. " + "Printed logs for all am containers.");
  }
 else {
    for (    String amContainer : amContainers) {
      int amContainerId=Integer.parseInt(amContainer.trim());
      if (amContainerId == -1) {
        outputAMContainerLogs(requests.get(requests.size() - 1),conf,logCliHelper);
      }
 else {
        if (amContainerId <= requests.size()) {
          outputAMContainerLogs(requests.get(amContainerId - 1),conf,logCliHelper);
        }
 else {
          System.err.println(String.format("ERROR: Specified AM containerId" + " (%s) exceeds the number of AM containers (%s).",amContainerId,requests.size()));
          return -1;
        }
      }
    }
  }
  return 0;
}
