{
  String appId=request.getAppId().toString();
  String containerIdStr=request.getContainerId().toString();
  String[] requestedLogFiles=logFiles;
  String nodeHttpAddress=request.getNodeHttpAddress();
  String nodeId=request.getNodeId();
  String appOwner=request.getAppOwner();
  PrintStream out=logCliHelper.createPrintStream(localDir,nodeId,containerIdStr);
  try {
    if (fetchAllLogFiles(logFiles)) {
      requestedLogFiles=getContainerLogFiles(getConf(),containerIdStr,nodeHttpAddress);
    }
    Client webServiceClient=Client.create();
    String containerString="\n\nContainer: " + containerIdStr;
    out.println(containerString);
    out.println(StringUtils.repeat("=",containerString.length()));
    for (    String logFile : requestedLogFiles) {
      out.println("LogType:" + logFile);
      out.println("Log Upload Time:" + Times.format(System.currentTimeMillis()));
      out.println("Log Contents:");
      try {
        WebResource webResource=webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);
        ClientResponse response=webResource.path("ws").path("v1").path("node").path("containerlogs").path(containerIdStr).path(logFile).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);
        out.println(response.getEntity(String.class));
        out.println("End of LogType:" + logFile);
        out.flush();
      }
 catch (      ClientHandlerException|UniformInterfaceException ex) {
        System.err.println("Can not find the log file:" + logFile + " for the container:"+ containerIdStr+ " in NodeManager:"+ nodeId);
      }
    }
  }
  finally {
    logCliHelper.closePrintStream(out);
  }
  logCliHelper.dumpAContainersLogsForALogType(appId,containerIdStr,nodeId,appOwner,Arrays.asList(requestedLogFiles),false,localDir);
}
