{
  if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) {
    LOG.info("MRAppJar " + MiniMRYarnCluster.APPJAR + " not found. Not running test.");
    return;
  }
  RMContext rmc=mrCluster.getResourceManager().getRMContext();
  ResourceScheduler rms=mrCluster.getResourceManager().getResourceScheduler();
  RMNMInfo rmInfo=new RMNMInfo(rmc,rms);
  String liveNMs=rmInfo.getLiveNodeManagers();
  ObjectMapper mapper=new ObjectMapper();
  JsonNode jn=mapper.readTree(liveNMs);
  Assert.assertEquals("Unexpected number of live nodes:",NUMNODEMANAGERS,jn.size());
  Iterator<JsonNode> it=jn.iterator();
  while (it.hasNext()) {
    JsonNode n=it.next();
    Assert.assertNotNull(n.get("HostName"));
    Assert.assertNotNull(n.get("Rack"));
    Assert.assertTrue("Node " + n.get("NodeId") + " should be RUNNING",n.get("State").getValueAsText().contains("RUNNING"));
    Assert.assertNotNull(n.get("NodeHTTPAddress"));
    Assert.assertNotNull(n.get("LastHealthUpdate"));
    Assert.assertNotNull(n.get("HealthReport"));
    Assert.assertNotNull(n.get("NodeManagerVersion"));
    Assert.assertNotNull(n.get("NumContainers"));
    Assert.assertEquals(n.get("NodeId") + ": Unexpected number of used containers",0,n.get("NumContainers").getValueAsInt());
    Assert.assertEquals(n.get("NodeId") + ": Unexpected amount of used memory",0,n.get("UsedMemoryMB").getValueAsInt());
    Assert.assertNotNull(n.get("AvailableMemoryMB"));
  }
}
