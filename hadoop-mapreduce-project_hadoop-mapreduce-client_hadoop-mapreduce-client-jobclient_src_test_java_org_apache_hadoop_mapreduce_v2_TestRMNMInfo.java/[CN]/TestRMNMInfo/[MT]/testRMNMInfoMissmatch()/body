{
  RMContext rmc=mock(RMContext.class);
  ResourceScheduler rms=mock(ResourceScheduler.class);
  ConcurrentMap<NodeId,RMNode> map=new ConcurrentHashMap<NodeId,RMNode>();
  RMNode node=MockNodes.newNodeInfo(1,MockNodes.newResource(4 * 1024));
  map.put(node.getNodeID(),node);
  when(rmc.getRMNodes()).thenReturn(map);
  RMNMInfo rmInfo=new RMNMInfo(rmc,rms);
  String liveNMs=rmInfo.getLiveNodeManagers();
  ObjectMapper mapper=new ObjectMapper();
  JsonNode jn=mapper.readTree(liveNMs);
  Assert.assertEquals("Unexpected number of live nodes:",1,jn.size());
  Iterator<JsonNode> it=jn.iterator();
  while (it.hasNext()) {
    JsonNode n=it.next();
    Assert.assertNotNull(n.get("HostName"));
    Assert.assertNotNull(n.get("Rack"));
    Assert.assertTrue("Node " + n.get("NodeId") + " should be RUNNING",n.get("State").getValueAsText().contains("RUNNING"));
    Assert.assertNotNull(n.get("NodeHTTPAddress"));
    Assert.assertTrue("Node " + n.get("NodeId") + " should be Healthy",n.get("HealthStatus").getValueAsText().contains("Healthy"));
    Assert.assertNotNull(n.get("LastHealthUpdate"));
    Assert.assertNotNull(n.get("HealthReport"));
    Assert.assertNull(n.get("NumContainers"));
    Assert.assertNull(n.get("UsedMemoryMB"));
    Assert.assertNull(n.get("AvailableMemoryMB"));
  }
}
