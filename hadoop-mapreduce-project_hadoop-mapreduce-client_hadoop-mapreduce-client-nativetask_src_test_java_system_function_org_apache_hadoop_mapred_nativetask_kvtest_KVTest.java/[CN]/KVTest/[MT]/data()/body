{
  final String valueclassesStr=nativekvtestconf.get(TestConstants.NATIVETASK_KVTEST_VALUECLASSES);
  System.out.println(valueclassesStr);
  valueclassNames=valueclassesStr.replaceAll("\\s","").split(";");
  final ArrayList<Class<?>> tmpvalueclasses=new ArrayList<Class<?>>();
  for (int i=0; i < valueclassNames.length; i++) {
    try {
      if (valueclassNames[i].equals("")) {
        continue;
      }
      tmpvalueclasses.add(Class.forName(valueclassNames[i]));
    }
 catch (    final ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  valueclasses=tmpvalueclasses.toArray(new Class[tmpvalueclasses.size()]);
  final String keyclassesStr=nativekvtestconf.get(TestConstants.NATIVETASK_KVTEST_KEYCLASSES);
  System.out.println(keyclassesStr);
  keyclassNames=keyclassesStr.replaceAll("\\s","").split(";");
  final ArrayList<Class<?>> tmpkeyclasses=new ArrayList<Class<?>>();
  for (int i=0; i < keyclassNames.length; i++) {
    try {
      if (keyclassNames[i].equals("")) {
        continue;
      }
      tmpkeyclasses.add(Class.forName(keyclassNames[i]));
    }
 catch (    final ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
  keyclasses=tmpkeyclasses.toArray(new Class[tmpkeyclasses.size()]);
  final Class<?>[][] kvgroup=new Class<?>[keyclassNames.length * valueclassNames.length][2];
  for (int i=0; i < keyclassNames.length; i++) {
    final int tmpindex=i * valueclassNames.length;
    for (int j=0; j < valueclassNames.length; j++) {
      kvgroup[tmpindex + j][0]=keyclasses[i];
      kvgroup[tmpindex + j][1]=valueclasses[j];
    }
  }
  return Arrays.asList(kvgroup);
}
