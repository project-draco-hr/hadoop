{
  final DataNode datanode=(DataNode)context.getAttribute("datanode");
  final Configuration conf=new Configuration(datanode.getConf());
switch (op.getValue()) {
case OPEN:
{
      final int b=bufferSize.getValue(conf);
      final DFSClient dfsclient=new DFSClient(nnRpcAddr,conf);
      HdfsDataInputStream in=null;
      try {
        in=new HdfsDataInputStream(dfsclient.open(fullpath,b,true));
        in.seek(offset.getValue());
      }
 catch (      IOException ioe) {
        IOUtils.cleanup(LOG,in);
        IOUtils.cleanup(LOG,dfsclient);
        throw ioe;
      }
      final long n=length.getValue() != null ? length.getValue() : in.getVisibleLength();
      return Response.ok(new OpenEntity(in,n,dfsclient)).type(MediaType.APPLICATION_OCTET_STREAM).build();
    }
case GETFILECHECKSUM:
{
    MD5MD5CRC32FileChecksum checksum=null;
    DFSClient dfsclient=new DFSClient(nnRpcAddr,conf);
    try {
      checksum=dfsclient.getFileChecksum(fullpath);
      dfsclient.close();
      dfsclient=null;
    }
  finally {
      IOUtils.cleanup(LOG,dfsclient);
    }
    final String js=JsonUtil.toJsonString(checksum);
    return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
  }
default :
throw new UnsupportedOperationException(op + " is not supported");
}
}
