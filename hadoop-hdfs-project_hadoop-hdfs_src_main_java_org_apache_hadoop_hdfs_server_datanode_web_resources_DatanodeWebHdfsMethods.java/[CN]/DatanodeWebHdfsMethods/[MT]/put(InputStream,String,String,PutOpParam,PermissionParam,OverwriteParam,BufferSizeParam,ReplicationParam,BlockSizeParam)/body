{
  final DataNode datanode=(DataNode)context.getAttribute("datanode");
switch (op.getValue()) {
case CREATE:
{
      final Configuration conf=new Configuration(datanode.getConf());
      conf.set(FsPermission.UMASK_LABEL,"000");
      final int b=bufferSize.getValue(conf);
      DFSClient dfsclient=newDfsClient(nnId,conf);
      FSDataOutputStream out=null;
      try {
        out=dfsclient.createWrappedOutputStream(dfsclient.create(fullpath,permission.getFsPermission(),overwrite.getValue() ? EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE) : EnumSet.of(CreateFlag.CREATE),replication.getValue(conf),blockSize.getValue(conf),null,b,null),null);
        IOUtils.copyBytes(in,out,b);
        out.close();
        out=null;
        dfsclient.close();
        dfsclient=null;
      }
  finally {
        IOUtils.cleanup(LOG,out);
        IOUtils.cleanup(LOG,dfsclient);
      }
      final String scheme="http".equals(request.getScheme()) ? WebHdfsFileSystem.SCHEME : SWebHdfsFileSystem.SCHEME;
      final URI uri=new URI(scheme,nnId,fullpath,null,null);
      return Response.created(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();
    }
default :
  throw new UnsupportedOperationException(op + " is not supported");
}
}
