{
  if (LOG.isTraceEnabled()) {
    LOG.trace(op + ": " + path+ Param.toSortedString(", ",permission,overwrite,bufferSize,replication,blockSize));
  }
  final String fullpath=path.getAbsolutePath();
  final DataNode datanode=(DataNode)context.getAttribute("datanode");
switch (op.getValue()) {
case CREATE:
{
      final Configuration conf=new Configuration(datanode.getConf());
      final InetSocketAddress nnRpcAddr=NameNode.getAddress(conf);
      final DFSClient dfsclient=new DFSClient(nnRpcAddr,conf);
      final FSDataOutputStream out=new FSDataOutputStream(dfsclient.create(fullpath,permission.getFsPermission(),overwrite.getValue() ? EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE) : EnumSet.of(CreateFlag.CREATE),replication.getValue(),blockSize.getValue(),null,bufferSize.getValue()),null);
      try {
        IOUtils.copyBytes(in,out,bufferSize.getValue());
      }
  finally {
        out.close();
      }
      final InetSocketAddress nnHttpAddr=NameNode.getHttpAddress(conf);
      final URI uri=new URI(WebHdfsFileSystem.SCHEME,null,nnHttpAddr.getHostName(),nnHttpAddr.getPort(),fullpath,null,null);
      return Response.created(uri).type(MediaType.APPLICATION_JSON).build();
    }
default :
  throw new UnsupportedOperationException(op + " is not supported");
}
}
