{
  if (LOG.isTraceEnabled()) {
    LOG.trace(op + ": " + path+ ", ugi="+ ugi+ Param.toSortedString(", ",offset,length,bufferSize));
  }
  response.setContentType(null);
  return ugi.doAs(new PrivilegedExceptionAction<Response>(){
    @Override public Response run() throws IOException {
      final String fullpath=path.getAbsolutePath();
      final DataNode datanode=(DataNode)context.getAttribute("datanode");
      final Configuration conf=new Configuration(datanode.getConf());
      final InetSocketAddress nnRpcAddr=NameNode.getAddress(conf);
      final DFSClient dfsclient=new DFSClient(nnRpcAddr,conf);
switch (op.getValue()) {
case OPEN:
{
          final int b=bufferSize.getValue(conf);
          final DFSDataInputStream in=new DFSClient.DFSDataInputStream(dfsclient.open(fullpath,b,true));
          in.seek(offset.getValue());
          final StreamingOutput streaming=new StreamingOutput(){
            @Override public void write(            final OutputStream out) throws IOException {
              final Long n=length.getValue();
              if (n == null) {
                IOUtils.copyBytes(in,out,b);
              }
 else {
                IOUtils.copyBytes(in,out,n,false);
              }
            }
          }
;
          final int status=offset.getValue() == 0 ? HttpServletResponse.SC_OK : HttpServletResponse.SC_PARTIAL_CONTENT;
          return Response.status(status).entity(streaming).type(MediaType.APPLICATION_OCTET_STREAM).build();
        }
case GETFILECHECKSUM:
{
        final MD5MD5CRC32FileChecksum checksum=dfsclient.getFileChecksum(fullpath);
        final String js=JsonUtil.toJsonString(checksum);
        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
      }
default :
    throw new UnsupportedOperationException(op + " is not supported");
}
}
}
);
}
