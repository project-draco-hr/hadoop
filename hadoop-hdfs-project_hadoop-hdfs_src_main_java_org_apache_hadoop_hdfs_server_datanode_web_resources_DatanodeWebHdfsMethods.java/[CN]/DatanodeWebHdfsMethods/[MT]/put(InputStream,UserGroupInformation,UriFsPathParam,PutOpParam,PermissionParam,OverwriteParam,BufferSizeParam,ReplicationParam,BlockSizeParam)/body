{
  if (LOG.isTraceEnabled()) {
    LOG.trace(op + ": " + path+ ", ugi="+ ugi+ Param.toSortedString(", ",permission,overwrite,bufferSize,replication,blockSize));
  }
  response.setContentType(null);
  return ugi.doAs(new PrivilegedExceptionAction<Response>(){
    @Override public Response run() throws IOException, URISyntaxException {
      final String fullpath=path.getAbsolutePath();
      final DataNode datanode=(DataNode)context.getAttribute("datanode");
switch (op.getValue()) {
case CREATE:
{
          final Configuration conf=new Configuration(datanode.getConf());
          final InetSocketAddress nnRpcAddr=NameNode.getAddress(conf);
          final DFSClient dfsclient=new DFSClient(nnRpcAddr,conf);
          final int b=bufferSize.getValue(conf);
          final FSDataOutputStream out=new FSDataOutputStream(dfsclient.create(fullpath,permission.getFsPermission(),overwrite.getValue() ? EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE) : EnumSet.of(CreateFlag.CREATE),replication.getValue(),blockSize.getValue(conf),null,b),null);
          try {
            IOUtils.copyBytes(in,out,b);
          }
  finally {
            out.close();
          }
          final InetSocketAddress nnHttpAddr=NameNode.getHttpAddress(conf);
          final URI uri=new URI(WebHdfsFileSystem.SCHEME,null,nnHttpAddr.getHostName(),nnHttpAddr.getPort(),fullpath,null,null);
          return Response.created(uri).type(MediaType.APPLICATION_JSON).build();
        }
default :
      throw new UnsupportedOperationException(op + " is not supported");
  }
}
}
);
}
