{
  if (LOG.isTraceEnabled()) {
    LOG.trace(op + ": " + path+ ", ugi="+ ugi+ Param.toSortedString(", ",bufferSize));
  }
  response.setContentType(null);
  return ugi.doAs(new PrivilegedExceptionAction<Response>(){
    @Override public Response run() throws IOException {
      final String fullpath=path.getAbsolutePath();
      final DataNode datanode=(DataNode)context.getAttribute("datanode");
switch (op.getValue()) {
case APPEND:
{
          final Configuration conf=new Configuration(datanode.getConf());
          final InetSocketAddress nnRpcAddr=NameNode.getAddress(conf);
          final int b=bufferSize.getValue(conf);
          DFSClient dfsclient=new DFSClient(nnRpcAddr,conf);
          FSDataOutputStream out=null;
          try {
            out=dfsclient.append(fullpath,b,null,null);
            IOUtils.copyBytes(in,out,b);
            out.close();
            out=null;
            dfsclient.close();
            dfsclient=null;
          }
  finally {
            IOUtils.cleanup(LOG,out);
            IOUtils.cleanup(LOG,dfsclient);
          }
          return Response.ok().type(MediaType.APPLICATION_JSON).build();
        }
default :
      throw new UnsupportedOperationException(op + " is not supported");
  }
}
}
);
}
