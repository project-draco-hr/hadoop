{
  Configuration conf=new Configuration();
  conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,BLOCK_SIZE);
  conf.setInt(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,1000);
  conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY,1000);
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(3).build();
  try {
    cluster.waitActive();
    cluster.transitionToActive(0);
    final NameNode nn1=cluster.getNameNode(0);
    final NameNode nn2=cluster.getNameNode(1);
    nn2.getNamesystem().getEditLogTailer().setSleepTime(250);
    nn2.getNamesystem().getEditLogTailer().interrupt();
    FileSystem fs=TestDFSClientFailover.configureFailoverFs(cluster,conf);
    TestContext togglers=new TestContext();
    for (int i=0; i < NUM_THREADS; i++) {
      Path p=new Path("/test-" + i);
      DFSTestUtil.createFile(fs,p,BLOCK_SIZE * 10,(short)3,(long)i);
      togglers.addThread(new ReplicationToggler(togglers,fs,p));
    }
    TestContext triggerCtx=new TestContext();
    triggerCtx.addThread(new RepeatingTestThread(triggerCtx){
      @Override public void doAnAction() throws Exception {
        for (        DataNode dn : cluster.getDataNodes()) {
          DataNodeAdapter.triggerDeletionReport(dn);
          DataNodeAdapter.triggerHeartbeat(dn);
        }
        for (int i=0; i < 2; i++) {
          NameNode nn=cluster.getNameNode(i);
          BlockManagerTestUtil.computeAllPendingWork(nn.getNamesystem().getBlockManager());
        }
        Thread.sleep(500);
      }
    }
);
    triggerCtx.addThread(new RepeatingTestThread(triggerCtx){
      @Override public void doAnAction() throws Exception {
        System.err.println("==============================\n" + "Failing over from 0->1\n" + "==================================");
        cluster.transitionToStandby(0);
        cluster.transitionToActive(1);
        Thread.sleep(5000);
        System.err.println("==============================\n" + "Failing over from 1->0\n" + "==================================");
        cluster.transitionToStandby(1);
        cluster.transitionToActive(0);
        Thread.sleep(5000);
      }
    }
);
    triggerCtx.startThreads();
    togglers.startThreads();
    togglers.waitFor(RUNTIME);
    togglers.stop();
    triggerCtx.stop();
    for (int i=0; i < NUM_THREADS; i++) {
      Path p=new Path("/test-" + i);
      DFSTestUtil.readFile(fs,p);
    }
  }
  finally {
    System.err.println("===========================\n\n\n\n");
    cluster.shutdown();
  }
}
