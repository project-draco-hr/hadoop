{
  int exitCode=-1;
  if (argv.length < 1) {
    displayUsage("");
    return exitCode;
  }
  String cmd=argv[0];
  String submitJobFile=null;
  String jobid=null;
  String taskid=null;
  String historyFile=null;
  String counterGroupName=null;
  String counterName=null;
  JobPriority jp=null;
  String taskType=null;
  String taskState=null;
  int fromEvent=0;
  int nEvents=0;
  boolean getStatus=false;
  boolean getCounter=false;
  boolean killJob=false;
  boolean listEvents=false;
  boolean viewHistory=false;
  boolean viewAllHistory=false;
  boolean listJobs=false;
  boolean listAllJobs=false;
  boolean listActiveTrackers=false;
  boolean listBlacklistedTrackers=false;
  boolean displayTasks=false;
  boolean killTask=false;
  boolean failTask=false;
  boolean setJobPriority=false;
  if ("-submit".equals(cmd)) {
    if (argv.length != 2) {
      displayUsage(cmd);
      return exitCode;
    }
    submitJobFile=argv[1];
  }
 else   if ("-status".equals(cmd)) {
    if (argv.length != 2) {
      displayUsage(cmd);
      return exitCode;
    }
    jobid=argv[1];
    getStatus=true;
  }
 else   if ("-counter".equals(cmd)) {
    if (argv.length != 4) {
      displayUsage(cmd);
      return exitCode;
    }
    getCounter=true;
    jobid=argv[1];
    counterGroupName=argv[2];
    counterName=argv[3];
  }
 else   if ("-kill".equals(cmd)) {
    if (argv.length != 2) {
      displayUsage(cmd);
      return exitCode;
    }
    jobid=argv[1];
    killJob=true;
  }
 else   if ("-set-priority".equals(cmd)) {
    if (argv.length != 3) {
      displayUsage(cmd);
      return exitCode;
    }
    jobid=argv[1];
    try {
      jp=JobPriority.valueOf(argv[2]);
    }
 catch (    IllegalArgumentException iae) {
      LOG.info(iae);
      displayUsage(cmd);
      return exitCode;
    }
    setJobPriority=true;
  }
 else   if ("-events".equals(cmd)) {
    if (argv.length != 4) {
      displayUsage(cmd);
      return exitCode;
    }
    jobid=argv[1];
    fromEvent=Integer.parseInt(argv[2]);
    nEvents=Integer.parseInt(argv[3]);
    listEvents=true;
  }
 else   if ("-history".equals(cmd)) {
    if (argv.length != 2 && !(argv.length == 3 && "all".equals(argv[1]))) {
      displayUsage(cmd);
      return exitCode;
    }
    viewHistory=true;
    if (argv.length == 3 && "all".equals(argv[1])) {
      viewAllHistory=true;
      historyFile=argv[2];
    }
 else {
      historyFile=argv[1];
    }
  }
 else   if ("-list".equals(cmd)) {
    if (argv.length != 1 && !(argv.length == 2 && "all".equals(argv[1]))) {
      displayUsage(cmd);
      return exitCode;
    }
    if (argv.length == 2 && "all".equals(argv[1])) {
      listAllJobs=true;
    }
 else {
      listJobs=true;
    }
  }
 else   if ("-kill-task".equals(cmd)) {
    if (argv.length != 2) {
      displayUsage(cmd);
      return exitCode;
    }
    killTask=true;
    taskid=argv[1];
  }
 else   if ("-fail-task".equals(cmd)) {
    if (argv.length != 2) {
      displayUsage(cmd);
      return exitCode;
    }
    failTask=true;
    taskid=argv[1];
  }
 else   if ("-list-active-trackers".equals(cmd)) {
    if (argv.length != 1) {
      displayUsage(cmd);
      return exitCode;
    }
    listActiveTrackers=true;
  }
 else   if ("-list-blacklisted-trackers".equals(cmd)) {
    if (argv.length != 1) {
      displayUsage(cmd);
      return exitCode;
    }
    listBlacklistedTrackers=true;
  }
 else   if ("-list-attempt-ids".equals(cmd)) {
    if (argv.length != 4) {
      displayUsage(cmd);
      return exitCode;
    }
    jobid=argv[1];
    taskType=argv[2];
    taskState=argv[3];
    displayTasks=true;
  }
 else {
    displayUsage(cmd);
    return exitCode;
  }
  Cluster cluster=new Cluster(getConf());
  try {
    if (submitJobFile != null) {
      Job job=Job.getInstance(cluster,new JobConf(submitJobFile));
      job.submit();
      System.out.println("Created job " + job.getJobID());
      exitCode=0;
    }
 else     if (getStatus) {
      Job job=cluster.getJob(JobID.forName(jobid));
      if (job == null) {
        System.out.println("Could not find job " + jobid);
      }
 else {
        Counters counters=job.getCounters();
        System.out.println();
        System.out.println(job);
        if (counters != null) {
          System.out.println(counters);
        }
 else {
          System.out.println("Counters not available. Job is retired.");
        }
        exitCode=0;
      }
    }
 else     if (getCounter) {
      Job job=cluster.getJob(JobID.forName(jobid));
      if (job == null) {
        System.out.println("Could not find job " + jobid);
      }
 else {
        Counters counters=job.getCounters();
        if (counters == null) {
          System.out.println("Counters not available for retired job " + jobid);
          exitCode=-1;
        }
 else {
          System.out.println(getCounter(counters,counterGroupName,counterName));
          exitCode=0;
        }
      }
    }
 else     if (killJob) {
      Job job=cluster.getJob(JobID.forName(jobid));
      if (job == null) {
        System.out.println("Could not find job " + jobid);
      }
 else {
        job.killJob();
        System.out.println("Killed job " + jobid);
        exitCode=0;
      }
    }
 else     if (setJobPriority) {
      Job job=cluster.getJob(JobID.forName(jobid));
      if (job == null) {
        System.out.println("Could not find job " + jobid);
      }
 else {
        job.setPriority(jp);
        System.out.println("Changed job priority.");
        exitCode=0;
      }
    }
 else     if (viewHistory) {
      viewHistory(historyFile,viewAllHistory);
      exitCode=0;
    }
 else     if (listEvents) {
      listEvents(cluster.getJob(JobID.forName(jobid)),fromEvent,nEvents);
      exitCode=0;
    }
 else     if (listJobs) {
      listJobs(cluster);
      exitCode=0;
    }
 else     if (listAllJobs) {
      listAllJobs(cluster);
      exitCode=0;
    }
 else     if (listActiveTrackers) {
      listActiveTrackers(cluster);
      exitCode=0;
    }
 else     if (listBlacklistedTrackers) {
      listBlacklistedTrackers(cluster);
      exitCode=0;
    }
 else     if (displayTasks) {
      displayTasks(cluster.getJob(JobID.forName(jobid)),taskType,taskState);
    }
 else     if (killTask) {
      TaskAttemptID taskID=TaskAttemptID.forName(taskid);
      Job job=cluster.getJob(taskID.getJobID());
      if (job == null) {
        System.out.println("Could not find job " + jobid);
      }
 else       if (job.killTask(taskID)) {
        System.out.println("Killed task " + taskid);
        exitCode=0;
      }
 else {
        System.out.println("Could not kill task " + taskid);
        exitCode=-1;
      }
    }
 else     if (failTask) {
      TaskAttemptID taskID=TaskAttemptID.forName(taskid);
      Job job=cluster.getJob(taskID.getJobID());
      if (job == null) {
        System.out.println("Could not find job " + jobid);
      }
 else       if (job.failTask(taskID)) {
        System.out.println("Killed task " + taskID + " by failing it");
        exitCode=0;
      }
 else {
        System.out.println("Could not fail task " + taskid);
        exitCode=-1;
      }
    }
  }
 catch (  RemoteException re) {
    IOException unwrappedException=re.unwrapRemoteException();
    if (unwrappedException instanceof AccessControlException) {
      System.out.println(unwrappedException.getMessage());
    }
 else {
      throw re;
    }
  }
 finally {
    cluster.close();
  }
  return exitCode;
}
