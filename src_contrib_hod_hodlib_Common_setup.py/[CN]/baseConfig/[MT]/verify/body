def verify(self):
    'Verifies each configuration variable, using the configValidator\n           class, based on its type as defined by the dictionary configDef.\n           Upon encountering a problem an error is printed to STDERR and\n           false is returned.'
    oldDir = os.getcwd()
    if self.__originalDir:
        os.chdir(self.__originalDir)
    status = True
    statusMsgs = []
    if self._configDef:
        errorCount = 0
        configValidator = typeValidator(self.__originalDir)
        for section in self._mySections:
            for option in self._configDef[section].keys():
                configVarName = ('%s.%s' % (section, option))
                if self._dict[section].has_key(option):
                    if self._configDef[section][option].has_key('validate'):
                        if self._configDef[section][option]['validate']:
                            configValidator.add(configVarName, self._configDef[section][option]['type'], self._dict[section][option])
                        else:
                            self[section][option] = configValidator.normalize(self._configDef[section][option]['type'], self._dict[section][option])
                        if (self._configDef[section][option]['default'] != None):
                            self._configDef[section][option]['default'] = configValidator.normalize(self._configDef[section][option]['type'], self._configDef[section][option]['default'])
                            self._configDef[section][option]['default'] = self.__toString(self._configDef[section][option]['type'], self._configDef[section][option]['default'])
                    else:
                        configValidator.add(configVarName, self._configDef[section][option]['type'], self._dict[section][option])
                elif self._configDef[section][option]['req']:
                    statusMsgs.append(('%s: %s.%s is not defined.' % (errorPrefix, section, option)))
                    errorCount = (errorCount + 1)
        configValidator.validate()
        for valueInfo in configValidator.validatedInfo:
            sectionsOptions = reDot.split(valueInfo['name'])
            if (valueInfo['isValid'] == 1):
                self._dict[sectionsOptions[0]][sectionsOptions[1]] = valueInfo['normalized']
            else:
                if valueInfo['errorData']:
                    statusMsgs.extend(self.var_error(sectionsOptions[0], sectionsOptions[1], valueInfo['errorData']))
                else:
                    statusMsgs.extend(self.var_error(sectionsOptions[0], sectionsOptions[1]))
                errorCount = (errorCount + 1)
        if (errorCount > 1):
            statusMsgs.append(('%s: %s problems found.' % (errorPrefix, errorCount)))
            self.var_error_suggest(statusMsgs)
            status = False
        elif (errorCount > 0):
            statusMsgs.append(('%s: %s problem found.' % (errorPrefix, errorCount)))
            self.var_error_suggest(statusMsgs)
            status = False
    self.__validated = True
    if self.__originalDir:
        os.chdir(oldDir)
    return (status, statusMsgs)
