def __build_short_map(self):
    " build a short_map of parametername : short_option. This is done\n        only for those parameters that don't have short options already\n        defined in configDef.\n        If possible, the first letter in the option that is not already\n        used/reserved as a short option is allotted. Otherwise the first\n        letter in __alpha that isn't still used is allotted.\n        e.g. { 'hodring.java-home': 'T', 'resource_manager.batch-home': 'B' }\n        "
    optionsKey = {}
    for compound in self.__optionList:
        (section, option) = self.__split_compound(compound)
        if (not optionsKey.has_key(section)):
            optionsKey[section] = []
        optionsKey[section].append(option)
    for section in self._configDef.sections():
        options = optionsKey[section]
        options.sort()
        for option in options:
            if (not self._configDef[section][option]['short']):
                compound = self.__splice_compound(section, option)
                shortOptions = self.__shortMap.values()
                for i in range(0, len(option)):
                    letter = option[i]
                    letter = letter.lower()
                    if (letter in self.__alpha):
                        if ((not (letter in shortOptions)) and (not (letter in self.__reserved))):
                            self.__shortMap[compound] = letter
                            break
                if (not self.__shortMap.has_key(compound)):
                    for i in range(0, len(self.__alpha)):
                        letter = self.__alpha[i]
                        if ((not (letter in shortOptions)) and (not (letter in self.__reserved))):
                            self.__shortMap[compound] = letter
