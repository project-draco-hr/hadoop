{
  this.provider=prov;
  keyVersionCache=CacheBuilder.newBuilder().expireAfterAccess(keyTimeoutMillis,TimeUnit.MILLISECONDS).build(new CacheLoader<String,KeyVersion>(){
    @Override public KeyVersion load(    String key) throws Exception {
      KeyVersion kv=provider.getKeyVersion(key);
      if (kv == null) {
        throw new KeyNotFoundException();
      }
      return kv;
    }
  }
);
  keyMetadataCache=CacheBuilder.newBuilder().expireAfterAccess(keyTimeoutMillis,TimeUnit.MILLISECONDS).build(new CacheLoader<String,Metadata>(){
    @Override public Metadata load(    String key) throws Exception {
      Metadata meta=provider.getMetadata(key);
      if (meta == null) {
        throw new KeyNotFoundException();
      }
      return meta;
    }
  }
);
  currentKeyCache=CacheBuilder.newBuilder().expireAfterWrite(currKeyTimeoutMillis,TimeUnit.MILLISECONDS).build(new CacheLoader<String,KeyVersion>(){
    @Override public KeyVersion load(    String key) throws Exception {
      KeyVersion kv=provider.getCurrentKey(key);
      if (kv == null) {
        throw new KeyNotFoundException();
      }
      return kv;
    }
  }
);
}
