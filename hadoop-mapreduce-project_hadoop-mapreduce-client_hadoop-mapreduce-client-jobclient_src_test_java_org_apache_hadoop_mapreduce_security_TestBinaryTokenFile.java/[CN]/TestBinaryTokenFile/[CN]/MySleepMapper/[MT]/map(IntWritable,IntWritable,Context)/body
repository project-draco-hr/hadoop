{
  final Credentials contextCredentials=context.getCredentials();
  final Collection<Token<? extends TokenIdentifier>> contextTokenCollection=contextCredentials.getAllTokens();
  for (  Token<? extends TokenIdentifier> t : contextTokenCollection) {
    System.out.println("Context token: [" + t + "]");
  }
  if (contextTokenCollection.size() != 2) {
    throw new RuntimeException("Exactly 2 tokens are expected in the contextTokenCollection: " + "one job token and one delegation token, but was found " + contextTokenCollection.size() + " tokens.");
  }
  final Token<? extends TokenIdentifier> dt=contextCredentials.getToken(new Text(DELEGATION_TOKEN_KEY));
  if (dt == null) {
    throw new RuntimeException("Token for key [" + DELEGATION_TOKEN_KEY + "] not found in the job context.");
  }
  String tokenFile0=context.getConfiguration().get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);
  if (tokenFile0 != null) {
    throw new RuntimeException("Token file key [" + MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY + "] found in the configuration. It should have been removed from the configuration.");
  }
  final String tokenFile=context.getConfiguration().get(KEY_SECURITY_TOKEN_FILE_NAME);
  if (tokenFile == null) {
    throw new RuntimeException("Token file key [" + KEY_SECURITY_TOKEN_FILE_NAME + "] not found in the job configuration.");
  }
  final Credentials binaryCredentials=new Credentials();
  binaryCredentials.readTokenStorageStream(new DataInputStream(new FileInputStream(tokenFile)));
  final Collection<Token<? extends TokenIdentifier>> binaryTokenCollection=binaryCredentials.getAllTokens();
  if (binaryTokenCollection.size() != 1) {
    throw new RuntimeException("The token collection read from file [" + tokenFile + "] must have size = 1.");
  }
  final Token<? extends TokenIdentifier> binTok=binaryTokenCollection.iterator().next();
  System.out.println("The token read from binary file: t = [" + binTok + "]");
  if (!dt.equals(binTok)) {
    throw new RuntimeException("Delegation token in job is not same as the token passed in file:" + " tokenInFile=[" + binTok + "], dt=["+ dt+ "].");
  }
  final UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
  final Collection<Token<? extends TokenIdentifier>> ugiTokenCollection=ugi.getTokens();
  for (  Token<? extends TokenIdentifier> t : ugiTokenCollection) {
    System.out.println("UGI token: [" + t + "]");
  }
  final Token<? extends TokenIdentifier> ugiToken=ugi.getCredentials().getToken(new Text(DELEGATION_TOKEN_KEY));
  if (ugiToken == null) {
    throw new RuntimeException("Token for key [" + DELEGATION_TOKEN_KEY + "] not found among the UGI tokens.");
  }
  if (!ugiToken.equals(binTok)) {
    throw new RuntimeException("UGI token is not same as the token passed in binary file:" + " tokenInBinFile=[" + binTok + "], ugiTok=["+ ugiToken+ "].");
  }
  super.map(key,value,context);
}
