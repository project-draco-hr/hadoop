{
  BiMap<Integer,String> uMap=HashBiMap.create();
  BiMap<Integer,String> gMap=HashBiMap.create();
  if (!OS.startsWith("Linux") && !OS.startsWith("Mac")) {
    LOG.error("Platform is not supported:" + OS + ". Can't update user map and group map and"+ " 'nobody' will be used for any user and group.");
    return;
  }
  StaticMapping staticMapping=new StaticMapping(new HashMap<Integer,Integer>(),new HashMap<Integer,Integer>());
  if (staticMappingFile.exists()) {
    LOG.info("Using '" + staticMappingFile + "' for static UID/GID mapping...");
    staticMapping=parseStaticMap(staticMappingFile);
  }
 else {
    LOG.info("Not doing static UID/GID mapping because '" + staticMappingFile + "' does not exist.");
  }
  if (OS.startsWith("Mac")) {
    updateMapInternal(uMap,"user",MAC_GET_ALL_USERS_CMD,"\\s+",staticMapping.uidMapping);
    updateMapInternal(gMap,"group",MAC_GET_ALL_GROUPS_CMD,"\\s+",staticMapping.gidMapping);
  }
 else {
    updateMapInternal(uMap,"user",GET_ALL_USERS_CMD,":",staticMapping.uidMapping);
    updateMapInternal(gMap,"group",GET_ALL_GROUPS_CMD,":",staticMapping.gidMapping);
  }
  uidNameMap=uMap;
  gidNameMap=gMap;
  lastUpdateTime=Time.monotonicNow();
}
