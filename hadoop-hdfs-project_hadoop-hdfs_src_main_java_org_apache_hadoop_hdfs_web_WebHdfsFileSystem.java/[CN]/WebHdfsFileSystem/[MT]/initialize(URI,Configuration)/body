{
  super.initialize(uri,conf);
  setConf(conf);
  UserParam.setUserPattern(conf.get(DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,DFSConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));
  connectionFactory=URLConnectionFactory.newDefaultURLConnectionFactory(conf);
  ugi=UserGroupInformation.getCurrentUser();
  this.uri=URI.create(uri.getScheme() + "://" + uri.getAuthority());
  this.nnAddrs=DFSUtil.resolveWebHdfsUri(this.uri,conf);
  boolean isHA=HAUtil.isLogicalUri(conf,this.uri);
  this.tokenServiceName=isHA ? HAUtil.buildTokenServiceForLogicalUri(uri) : SecurityUtil.buildTokenService(getCanonicalUri());
  initializeTokenAspect();
  if (!isHA) {
    this.retryPolicy=RetryUtils.getDefaultRetryPolicy(conf,DFSConfigKeys.DFS_HTTP_CLIENT_RETRY_POLICY_ENABLED_KEY,DFSConfigKeys.DFS_HTTP_CLIENT_RETRY_POLICY_ENABLED_DEFAULT,DFSConfigKeys.DFS_HTTP_CLIENT_RETRY_POLICY_SPEC_KEY,DFSConfigKeys.DFS_HTTP_CLIENT_RETRY_POLICY_SPEC_DEFAULT,SafeModeException.class);
  }
 else {
    int maxFailoverAttempts=conf.getInt(DFSConfigKeys.DFS_HTTP_CLIENT_FAILOVER_MAX_ATTEMPTS_KEY,DFSConfigKeys.DFS_HTTP_CLIENT_FAILOVER_MAX_ATTEMPTS_DEFAULT);
    int maxRetryAttempts=conf.getInt(DFSConfigKeys.DFS_HTTP_CLIENT_RETRY_MAX_ATTEMPTS_KEY,DFSConfigKeys.DFS_HTTP_CLIENT_RETRY_MAX_ATTEMPTS_DEFAULT);
    int failoverSleepBaseMillis=conf.getInt(DFSConfigKeys.DFS_HTTP_CLIENT_FAILOVER_SLEEPTIME_BASE_KEY,DFSConfigKeys.DFS_HTTP_CLIENT_FAILOVER_SLEEPTIME_BASE_DEFAULT);
    int failoverSleepMaxMillis=conf.getInt(DFSConfigKeys.DFS_HTTP_CLIENT_FAILOVER_SLEEPTIME_MAX_KEY,DFSConfigKeys.DFS_HTTP_CLIENT_FAILOVER_SLEEPTIME_MAX_DEFAULT);
    this.retryPolicy=RetryPolicies.failoverOnNetworkException(RetryPolicies.TRY_ONCE_THEN_FAIL,maxFailoverAttempts,maxRetryAttempts,failoverSleepBaseMillis,failoverSleepMaxMillis);
  }
  this.workingDir=getHomeDirectory();
  if (UserGroupInformation.isSecurityEnabled()) {
    tokenAspect.initDelegationToken(ugi);
  }
}
