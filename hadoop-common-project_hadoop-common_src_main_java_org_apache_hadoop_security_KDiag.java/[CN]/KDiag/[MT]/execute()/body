{
  title("Kerberos Diagnostics scan at %s",new Date(System.currentTimeMillis()));
  println("Hostname = %s",InetAddress.getLocalHost().getCanonicalHostName());
  println("%s = %d",ARG_KEYLEN,minKeyLength);
  println("%s = %s",ARG_KEYTAB,keytab);
  println("%s = %s",ARG_PRINCIPAL,principal);
  println("%s = %s",ARG_VERIFYSHORTNAME,checkShortName);
  validateKeyLength();
  println("JVM Kerberos Login Module = %s",getKrb5LoginModuleName());
  title("Core System Properties");
  for (  String prop : new String[]{"user.name","java.version","java.vendor",JAVA_SECURITY_KRB5_CONF,JAVA_SECURITY_KRB5_REALM,JAVA_SECURITY_KRB5_KDC_ADDRESS,SUN_SECURITY_KRB5_DEBUG,SUN_SECURITY_SPNEGO_DEBUG,SUN_SECURITY_JAAS_FILE}) {
    printSysprop(prop);
  }
  endln();
  title("All System Properties");
  ArrayList<String> propList=new ArrayList<>(System.getProperties().stringPropertyNames());
  Collections.sort(propList,String.CASE_INSENSITIVE_ORDER);
  for (  String s : propList) {
    printSysprop(s);
  }
  endln();
  title("Environment Variables");
  for (  String env : new String[]{HADOOP_JAAS_DEBUG,KRB5_CCNAME,HADOOP_USER_NAME,HADOOP_PROXY_USER,HADOOP_TOKEN_FILE_LOCATION,"HADOOP_SECURE_LOG","HADOOP_OPTS","HADOOP_CLIENT_OPTS"}) {
    printEnv(env);
  }
  endln();
  title("Configuration Options");
  for (  String prop : new String[]{KERBEROS_KINIT_COMMAND,HADOOP_SECURITY_AUTHENTICATION,HADOOP_SECURITY_AUTHORIZATION,"hadoop.kerberos.min.seconds.before.relogin","hadoop.security.dns.interface","hadoop.security.dns.nameserver",HADOOP_RPC_PROTECTION,HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS,HADOOP_SECURITY_CRYPTO_CODEC_CLASSES_KEY_PREFIX,HADOOP_SECURITY_GROUP_MAPPING,"hadoop.security.impersonation.provider.class",DFS_DATA_TRANSFER_PROTECTION,DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS}) {
    printConfOpt(prop);
  }
  Configuration conf=getConf();
  if (isSimpleAuthentication(conf)) {
    println(HADOOP_AUTHENTICATION_IS_DISABLED);
    failif(securityRequired,CAT_CONFIG,HADOOP_AUTHENTICATION_IS_DISABLED);
    LOG.warn("Security is not enabled for the Hadoop cluster");
  }
 else {
    if (isSimpleAuthentication(new Configuration())) {
      LOG.warn("The default cluster security is insecure");
      failif(securityRequired,CAT_CONFIG,HADOOP_AUTHENTICATION_IS_DISABLED);
    }
  }
  boolean krb5Debug=getAndSet(SUN_SECURITY_KRB5_DEBUG);
  boolean spnegoDebug=getAndSet(SUN_SECURITY_SPNEGO_DEBUG);
  try {
    UserGroupInformation.setConfiguration(conf);
    validateKrb5File();
    printDefaultRealm();
    validateSasl(HADOOP_SECURITY_SASL_PROPS_RESOLVER_CLASS);
    if (conf.get(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS) != null) {
      validateSasl(DFS_DATA_TRANSFER_SASLPROPERTIES_RESOLVER_CLASS);
    }
    validateKinitExecutable();
    validateJAAS(jaas);
    validateNTPConf();
    if (checkShortName) {
      validateShortName();
    }
    if (!nologin) {
      title("Logging in");
      if (keytab != null) {
        dumpKeytab(keytab);
        loginFromKeytab();
      }
 else {
        UserGroupInformation loginUser=getLoginUser();
        dumpUGI("Log in user",loginUser);
        validateUGI("Login user",loginUser);
        println("Ticket based login: %b",isLoginTicketBased());
        println("Keytab based login: %b",isLoginKeytabBased());
      }
    }
    return true;
  }
  finally {
    System.setProperty(SUN_SECURITY_KRB5_DEBUG,Boolean.toString(krb5Debug));
    System.setProperty(SUN_SECURITY_SPNEGO_DEBUG,Boolean.toString(spnegoDebug));
  }
}
