{
  if (lazyPreempionEnabled) {
    syncKillableContainersFromScheduler();
  }
  Set<String> partitions=new HashSet<>();
  partitions.addAll(scheduler.getRMContext().getNodeLabelManager().getClusterNodeLabelNames());
  partitions.add(RMNodeLabelsManager.NO_LABEL);
  this.allPartitions=ImmutableSet.copyOf(partitions);
synchronized (scheduler) {
    queueToPartitions.clear();
    for (    String partitionToLookAt : allPartitions) {
      cloneQueues(root,Resources.clone(nlm.getResourceByLabel(partitionToLookAt,clusterResources)),partitionToLookAt);
    }
  }
  this.leafQueueNames=ImmutableSet.copyOf(getLeafQueueNames(getQueueByPartition(CapacitySchedulerConfiguration.ROOT,RMNodeLabelsManager.NO_LABEL)));
  Resource totalPreemptionAllowed=Resources.multiply(clusterResources,percentageClusterPreemptionAllowed);
  Map<ApplicationAttemptId,Set<RMContainer>> toPreempt=new HashMap<>();
  for (  PreemptionCandidatesSelector selector : candidatesSelectionPolicies) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(MessageFormat.format("Trying to use {0} to select preemption candidates",selector.getClass().getName()));
    }
    toPreempt=selector.selectCandidates(toPreempt,clusterResources,totalPreemptionAllowed);
  }
  if (LOG.isDebugEnabled()) {
    logToCSV(new ArrayList<>(leafQueueNames));
  }
  if (observeOnly) {
    return;
  }
  long currentTime=clock.getTime();
  preemptOrkillSelectedContainerAfterWait(toPreempt,currentTime);
  cleanupStaledPreemptionCandidates(currentTime);
}
