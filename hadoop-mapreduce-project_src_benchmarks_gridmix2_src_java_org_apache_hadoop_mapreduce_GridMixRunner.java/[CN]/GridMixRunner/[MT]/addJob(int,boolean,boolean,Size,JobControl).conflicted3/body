{
  final String prop=String.format("webdataSort.%sJobs.inputFiles",size);
  final String indir=getInputDirsFor(prop,size.defaultPath(VARCOMPSEQ));
  final String outdir=addTSSuffix("perf-out/webdata-sort-out-dir-" + size);
  StringBuffer sb=new StringBuffer();
  sb.append("-keepmap 100 ");
  sb.append("-keepred 100 ");
  sb.append("-inFormat org.apache.hadoop.mapreduce." + "lib.input.SequenceFileInputFormat ");
  sb.append("-outFormat org.apache.hadoop.mapreduce." + "lib.output.SequenceFileOutputFormat ");
  sb.append("-outKey org.apache.hadoop.io.Text ");
  sb.append("-outValue org.apache.hadoop.io.Text ");
  sb.append("-indir ").append(indir).append(" ");
  sb.append("-outdir ").append(outdir).append(" ");
  sb.append("-r ").append(numReducers);
  String[] args=sb.toString().split(" ");
  clearDir(outdir);
  try {
    Job job=GenericMRLoadJobCreator.createJob(args,mapoutputCompressed,outputCompressed);
    job.setJobName("GridmixWebdataSort." + size);
    ControlledJob cjob=new ControlledJob(job,null);
    gridmix.addJob(cjob);
  }
 catch (  Exception ex) {
    System.out.println(ex.getStackTrace());
  }
}
