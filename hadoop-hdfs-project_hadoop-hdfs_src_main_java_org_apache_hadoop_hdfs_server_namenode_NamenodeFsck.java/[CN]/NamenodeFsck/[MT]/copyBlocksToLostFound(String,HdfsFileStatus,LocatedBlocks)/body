{
  final DFSClient dfs=new DFSClient(NameNode.getAddress(conf),conf);
  final String fullName=file.getFullName(parent);
  OutputStream fos=null;
  try {
    if (!lfInited) {
      lostFoundInit(dfs);
    }
    if (!lfInitedOk) {
      throw new IOException("failed to initialize lost+found");
    }
    String target=lostFound + fullName;
    if (hdfsPathExists(target)) {
      LOG.warn("Fsck: can't copy the remains of " + fullName + " to "+ "lost+found, because "+ target+ " already exists.");
      return;
    }
    if (!namenode.getRpcServer().mkdirs(target,file.getPermission(),true)) {
      throw new IOException("failed to create directory " + target);
    }
    int chain=0;
    boolean copyError=false;
    for (    LocatedBlock lBlk : blocks.getLocatedBlocks()) {
      LocatedBlock lblock=lBlk;
      DatanodeInfo[] locs=lblock.getLocations();
      if (locs == null || locs.length == 0) {
        if (fos != null) {
          fos.flush();
          fos.close();
          fos=null;
        }
        continue;
      }
      if (fos == null) {
        fos=dfs.create(target + "/" + chain,true);
        chain++;
      }
      try {
        copyBlock(dfs,lblock,fos);
      }
 catch (      Exception e) {
        LOG.error("Fsck: could not copy block " + lblock.getBlock() + " to "+ target,e);
        fos.flush();
        fos.close();
        fos=null;
        internalError=true;
        copyError=true;
      }
    }
    if (copyError) {
      LOG.warn("Fsck: there were errors copying the remains of the " + "corrupted file " + fullName + " to /lost+found");
    }
 else {
      LOG.info("Fsck: copied the remains of the corrupted file " + fullName + " to /lost+found");
    }
  }
 catch (  Exception e) {
    LOG.error("copyBlocksToLostFound: error processing " + fullName,e);
    internalError=true;
  }
 finally {
    if (fos != null)     fos.close();
    dfs.close();
  }
}
