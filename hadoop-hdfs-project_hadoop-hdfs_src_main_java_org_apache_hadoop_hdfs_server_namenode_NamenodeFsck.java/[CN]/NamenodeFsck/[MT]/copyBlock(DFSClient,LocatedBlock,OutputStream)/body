{
  int failures=0;
  InetSocketAddress targetAddr=null;
  TreeSet<DatanodeInfo> deadNodes=new TreeSet<DatanodeInfo>();
  BlockReader blockReader=null;
  ExtendedBlock block=lblock.getBlock();
  while (blockReader == null) {
    DatanodeInfo chosenNode;
    try {
      chosenNode=bestNode(dfs,lblock.getLocations(),deadNodes);
      targetAddr=NetUtils.createSocketAddr(chosenNode.getXferAddr());
    }
 catch (    IOException ie) {
      if (failures >= DFSConfigKeys.DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_DEFAULT) {
        throw new IOException("Could not obtain block " + lblock,ie);
      }
      LOG.info("Could not obtain block from any node:  " + ie);
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException iex) {
      }
      deadNodes.clear();
      failures++;
      continue;
    }
    try {
      String file=BlockReaderFactory.getFileName(targetAddr,block.getBlockPoolId(),block.getBlockId());
      blockReader=new BlockReaderFactory(dfs.getConf()).setFileName(file).setBlock(block).setBlockToken(lblock.getBlockToken()).setStartOffset(0).setLength(-1).setVerifyChecksum(true).setClientName("fsck").setDatanodeInfo(chosenNode).setInetSocketAddress(targetAddr).setCachingStrategy(CachingStrategy.newDropBehind()).setClientCacheContext(dfs.getClientContext()).setConfiguration(namenode.conf).setRemotePeerFactory(new RemotePeerFactory(){
        @Override public Peer newConnectedPeer(        InetSocketAddress addr,        Token<BlockTokenIdentifier> blockToken,        DatanodeID datanodeId) throws IOException {
          Peer peer=null;
          Socket s=NetUtils.getDefaultSocketFactory(conf).createSocket();
          try {
            s.connect(addr,HdfsServerConstants.READ_TIMEOUT);
            s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);
            peer=TcpPeerServer.peerFromSocketAndKey(dfs.getSaslDataTransferClient(),s,NamenodeFsck.this,blockToken,datanodeId);
          }
  finally {
            if (peer == null) {
              IOUtils.closeQuietly(s);
            }
          }
          return peer;
        }
      }
).build();
    }
 catch (    IOException ex) {
      LOG.info("Failed to connect to " + targetAddr + ":"+ ex);
      deadNodes.add(chosenNode);
    }
  }
  byte[] buf=new byte[1024];
  int cnt=0;
  boolean success=true;
  long bytesRead=0;
  try {
    while ((cnt=blockReader.read(buf,0,buf.length)) > 0) {
      fos.write(buf,0,cnt);
      bytesRead+=cnt;
    }
    if (bytesRead != block.getNumBytes()) {
      throw new IOException("Recorded block size is " + block.getNumBytes() + ", but datanode returned "+ bytesRead+ " bytes");
    }
  }
 catch (  Exception e) {
    LOG.error("Error reading block",e);
    success=false;
  }
 finally {
    blockReader.close();
  }
  if (!success) {
    throw new Exception("Could not copy block data for " + lblock.getBlock());
  }
}
