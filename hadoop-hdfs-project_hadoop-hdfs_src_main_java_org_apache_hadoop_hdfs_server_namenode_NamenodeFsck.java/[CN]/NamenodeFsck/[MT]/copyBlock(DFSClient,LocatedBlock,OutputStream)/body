{
  int failures=0;
  InetSocketAddress targetAddr=null;
  TreeSet<DatanodeInfo> deadNodes=new TreeSet<DatanodeInfo>();
  Socket s=null;
  BlockReader blockReader=null;
  ExtendedBlock block=lblock.getBlock();
  while (s == null) {
    DatanodeInfo chosenNode;
    try {
      chosenNode=bestNode(dfs,lblock.getLocations(),deadNodes);
      targetAddr=NetUtils.createSocketAddr(chosenNode.getXferAddr());
    }
 catch (    IOException ie) {
      if (failures >= DFSConfigKeys.DFS_CLIENT_MAX_BLOCK_ACQUIRE_FAILURES_DEFAULT) {
        throw new IOException("Could not obtain block " + lblock,ie);
      }
      LOG.info("Could not obtain block from any node:  " + ie);
      try {
        Thread.sleep(10000);
      }
 catch (      InterruptedException iex) {
      }
      deadNodes.clear();
      failures++;
      continue;
    }
    try {
      s=NetUtils.getDefaultSocketFactory(conf).createSocket();
      s.connect(targetAddr,HdfsServerConstants.READ_TIMEOUT);
      s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);
      blockReader=BlockReaderFactory.newBlockReader(new BlockReaderFactory.Params(new Conf(conf)).setSocket(s).setBlock(block).setFile(BlockReaderFactory.getFileName(targetAddr,block.getBlockPoolId(),block.getBlockId())).setBlockToken(lblock.getBlockToken()).setEncryptionKey(namenode.getRpcServer().getDataEncryptionKey()).setLen(-1));
    }
 catch (    IOException ex) {
      LOG.info("Failed to connect to " + targetAddr + ":"+ ex);
      deadNodes.add(chosenNode);
      if (s != null) {
        try {
          s.close();
        }
 catch (        IOException iex) {
        }
      }
      s=null;
    }
  }
  if (blockReader == null) {
    throw new Exception("Could not open data stream for " + lblock.getBlock());
  }
  byte[] buf=new byte[1024];
  int cnt=0;
  boolean success=true;
  long bytesRead=0;
  try {
    while ((cnt=blockReader.read(buf,0,buf.length)) > 0) {
      fos.write(buf,0,cnt);
      bytesRead+=cnt;
    }
    if (bytesRead != block.getNumBytes()) {
      throw new IOException("Recorded block size is " + block.getNumBytes() + ", but datanode returned "+ bytesRead+ " bytes");
    }
  }
 catch (  Exception e) {
    LOG.error("Error reading block",e);
    success=false;
  }
 finally {
    try {
      s.close();
    }
 catch (    Exception e1) {
    }
  }
  if (!success)   throw new Exception("Could not copy block data for " + lblock.getBlock());
}
