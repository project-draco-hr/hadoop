{
  StringBuilder res=new StringBuilder();
  res.append(" Total size:\t").append(totalSize).append(" B");
  if (totalOpenFilesSize != 0) {
    res.append(" (Total open files size: ").append(totalOpenFilesSize).append(" B)");
  }
  res.append("\n Total files:\t").append(totalFiles);
  if (totalOpenFiles != 0) {
    res.append(" (Files currently being written: ").append(totalOpenFiles).append(")");
  }
  res.append("\n Total block groups (validated):\t").append(totalBlocks);
  if (totalBlocks > 0) {
    res.append(" (avg. block group size ").append((totalSize / totalBlocks)).append(" B)");
  }
  if (totalOpenFilesBlocks != 0) {
    res.append(" (Total open file block groups (not validated): ").append(totalOpenFilesBlocks).append(")");
  }
  if (corruptFiles > 0 || numUnderMinReplicatedBlocks > 0) {
    res.append("\n  ********************************");
    if (numUnderMinReplicatedBlocks > 0) {
      res.append("\n  UNRECOVERABLE BLOCK GROUPS:\t").append(numUnderMinReplicatedBlocks);
      if (totalBlocks > 0) {
        res.append(" (").append(((float)(numUnderMinReplicatedBlocks * 100) / (float)totalBlocks)).append(" %)");
      }
    }
    if (corruptFiles > 0) {
      res.append("\n  CORRUPT FILES:\t").append(corruptFiles);
      if (missingSize > 0) {
        res.append("\n  MISSING BLOCK GROUPS:\t").append(missingIds.size()).append("\n  MISSING SIZE:\t\t").append(missingSize).append(" B");
      }
      if (corruptBlocks > 0) {
        res.append("\n  CORRUPT BLOCK GROUPS: \t").append(corruptBlocks).append("\n  CORRUPT SIZE:\t\t").append(corruptSize).append(" B");
      }
    }
    res.append("\n  ********************************");
  }
  res.append("\n Minimally erasure-coded block groups:\t").append(numMinReplicatedBlocks);
  if (totalBlocks > 0) {
    res.append(" (").append(((float)(numMinReplicatedBlocks * 100) / (float)totalBlocks)).append(" %)");
  }
  res.append("\n Over-erasure-coded block groups:\t").append(numOverReplicatedBlocks);
  if (totalBlocks > 0) {
    res.append(" (").append(((float)(numOverReplicatedBlocks * 100) / (float)totalBlocks)).append(" %)");
  }
  res.append("\n Under-erasure-coded block groups:\t").append(numUnderReplicatedBlocks);
  if (totalBlocks > 0) {
    res.append(" (").append(((float)(numUnderReplicatedBlocks * 100) / (float)totalBlocks)).append(" %)");
  }
  res.append("\n Unsatisfactory placement block groups:\t").append(numMisReplicatedBlocks);
  if (totalBlocks > 0) {
    res.append(" (").append(((float)(numMisReplicatedBlocks * 100) / (float)totalBlocks)).append(" %)");
  }
  res.append("\n Default ecPolicy:\t\t").append(defaultECPolicy).append("\n Average block group size:\t").append(getReplicationFactor()).append("\n Missing block groups:\t\t").append(missingIds.size()).append("\n Corrupt block groups:\t\t").append(corruptBlocks).append("\n Missing internal blocks:\t").append(missingReplicas);
  if (totalReplicas > 0) {
    res.append(" (").append(((float)(missingReplicas * 100) / (float)numExpectedReplicas)).append(" %)");
  }
  if (decommissionedReplicas > 0) {
    res.append("\n Decommissioned internal blocks:\t").append(decommissionedReplicas);
  }
  if (decommissioningReplicas > 0) {
    res.append("\n Decommissioning internal blocks:\t").append(decommissioningReplicas);
  }
  return res.toString();
}
