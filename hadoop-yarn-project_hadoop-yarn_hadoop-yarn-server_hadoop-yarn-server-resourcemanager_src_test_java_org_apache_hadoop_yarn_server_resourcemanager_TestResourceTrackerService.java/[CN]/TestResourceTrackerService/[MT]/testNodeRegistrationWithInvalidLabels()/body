{
  writeToHostsFile("host2");
  Configuration conf=new Configuration();
  conf.set(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,hostFile.getAbsolutePath());
  conf.set(YarnConfiguration.NODELABEL_CONFIGURATION_TYPE,YarnConfiguration.DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE);
  final RMNodeLabelsManager nodeLabelsMgr=new NullRMNodeLabelsManager();
  rm=new MockRM(conf){
    @Override protected RMNodeLabelsManager createNodeLabelManager(){
      return nodeLabelsMgr;
    }
  }
;
  rm.start();
  try {
    nodeLabelsMgr.addToCluserNodeLabels(toSet("X","Y","Z"));
  }
 catch (  IOException e) {
    Assert.fail("Caught Exception while intializing");
    e.printStackTrace();
  }
  ResourceTrackerService resourceTrackerService=rm.getResourceTrackerService();
  RegisterNodeManagerRequest registerReq=Records.newRecord(RegisterNodeManagerRequest.class);
  NodeId nodeId=NodeId.newInstance("host2",1234);
  Resource capability=BuilderUtils.newResource(1024,1);
  registerReq.setResource(capability);
  registerReq.setNodeId(nodeId);
  registerReq.setHttpPort(1234);
  registerReq.setNMVersion(YarnVersionInfo.getVersion());
  registerReq.setNodeLabels(toSet("A","B","C"));
  RegisterNodeManagerResponse response=resourceTrackerService.registerNodeManager(registerReq);
  Assert.assertEquals("On Invalid Node Labels action is expected to be normal",NodeAction.NORMAL,response.getNodeAction());
  Assert.assertNull(nodeLabelsMgr.getNodeLabels().get(nodeId));
  Assert.assertNotNull(response.getDiagnosticsMessage());
  Assert.assertFalse("Node Labels should not accepted by RM If Invalid",response.getAreNodeLabelsAcceptedByRM());
  if (rm != null) {
    rm.stop();
  }
}
