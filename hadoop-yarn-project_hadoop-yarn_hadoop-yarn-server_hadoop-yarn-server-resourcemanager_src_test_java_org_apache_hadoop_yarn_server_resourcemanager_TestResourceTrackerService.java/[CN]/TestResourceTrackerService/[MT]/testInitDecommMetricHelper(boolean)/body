{
  Configuration conf=new Configuration();
  rm=new MockRM(conf);
  rm.start();
  MockNM nm1=rm.registerNode("host1:1234",5120);
  MockNM nm2=rm.registerNode("host2:5678",10240);
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(true);
  File excludeHostFile=new File(TEMP_DIR + File.separator + "excludeHostFile.txt");
  writeToHostsFile(excludeHostFile,"host1");
  conf.set(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,excludeHostFile.getAbsolutePath());
  if (hasIncludeList) {
    writeToHostsFile(hostFile,"host1","host2");
    conf.set(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,hostFile.getAbsolutePath());
  }
  rm.getNodesListManager().refreshNodes(conf);
  rm.drainEvents();
  rm.stop();
  MockRM rm1=new MockRM(conf);
  rm1.start();
  nm1=rm1.registerNode("host1:1234",5120);
  nm2=rm1.registerNode("host2:5678",10240);
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(true);
  rm1.drainEvents();
  Assert.assertEquals("Number of Decommissioned nodes should be 1",1,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
  Assert.assertEquals("The inactiveRMNodes should contain an entry for the" + "decommissioned node",1,rm1.getRMContext().getInactiveRMNodes().size());
  excludeHostFile=new File(TEMP_DIR + File.separator + "excludeHostFile.txt");
  writeToHostsFile(excludeHostFile,"");
  conf.set(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,excludeHostFile.getAbsolutePath());
  rm1.getNodesListManager().refreshNodes(conf);
  nm1=rm1.registerNode("host1:1234",5120);
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(true);
  rm1.drainEvents();
  Assert.assertEquals("The decommissioned nodes metric should have " + "decremented to 0",0,ClusterMetrics.getMetrics().getNumDecommisionedNMs());
  Assert.assertEquals("The active nodes metric should be 2",2,ClusterMetrics.getMetrics().getNumActiveNMs());
  Assert.assertEquals("The inactive RMNodes entry should have been removed",0,rm1.getRMContext().getInactiveRMNodes().size());
  rm1.drainEvents();
  rm1.stop();
}
