{
  final DrainDispatcher dispatcher=new DrainDispatcher();
  rm=new MockRM(){
    @Override protected EventHandler<SchedulerEvent> createSchedulerEventDispatcher(){
      return new SchedulerEventDispatcher(this.scheduler){
        @Override public void handle(        SchedulerEvent event){
          scheduler.handle(event);
        }
      }
;
    }
    @Override protected Dispatcher createDispatcher(){
      return dispatcher;
    }
  }
;
  rm.start();
  MockNM nm1=rm.registerNode("host1:1234",5120);
  MockNM nm2=rm.registerNode("host2:5678",5120);
  nm1.nodeHeartbeat(true);
  nm2.nodeHeartbeat(false);
  dispatcher.await();
  checkUnealthyNMCount(rm,nm2,true,1);
  final int expectedNMs=ClusterMetrics.getMetrics().getNumActiveNMs();
  QueueMetrics metrics=rm.getResourceScheduler().getRootQueueMetrics();
  Assert.assertEquals(5120,metrics.getAvailableMB());
  nm1=rm.registerNode("host1:1234",5120);
  NodeHeartbeatResponse response=nm1.nodeHeartbeat(true);
  Assert.assertTrue(NodeAction.NORMAL.equals(response.getNodeAction()));
  dispatcher.await();
  Assert.assertEquals(expectedNMs,ClusterMetrics.getMetrics().getNumActiveNMs());
  checkUnealthyNMCount(rm,nm2,true,1);
  nm2=rm.registerNode("host2:5678",5120);
  response=nm2.nodeHeartbeat(false);
  Assert.assertTrue(NodeAction.NORMAL.equals(response.getNodeAction()));
  dispatcher.await();
  Assert.assertEquals(expectedNMs,ClusterMetrics.getMetrics().getNumActiveNMs());
  checkUnealthyNMCount(rm,nm2,true,1);
  nm2=rm.registerNode("host2:5678",5120);
  dispatcher.await();
  response=nm2.nodeHeartbeat(true);
  response=nm2.nodeHeartbeat(true);
  dispatcher.await();
  Assert.assertEquals(5120 + 5120,metrics.getAvailableMB());
  nm1=rm.registerNode("host2:5678",10240);
  dispatcher.await();
  response=nm2.nodeHeartbeat(true);
  dispatcher.await();
  Assert.assertTrue(NodeAction.NORMAL.equals(response.getNodeAction()));
  Assert.assertEquals(5120 + 10240,metrics.getAvailableMB());
}
