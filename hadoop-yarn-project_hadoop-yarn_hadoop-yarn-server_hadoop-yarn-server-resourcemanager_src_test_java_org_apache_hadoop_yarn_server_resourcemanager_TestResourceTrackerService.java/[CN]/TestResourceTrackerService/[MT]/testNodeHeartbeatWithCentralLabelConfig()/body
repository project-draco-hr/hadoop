{
  writeToHostsFile("host2");
  Configuration conf=new Configuration();
  conf.set(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,hostFile.getAbsolutePath());
  conf.set(YarnConfiguration.NODELABEL_CONFIGURATION_TYPE,YarnConfiguration.DEFAULT_NODELABEL_CONFIGURATION_TYPE);
  final RMNodeLabelsManager nodeLabelsMgr=new NullRMNodeLabelsManager();
  rm=new MockRM(conf){
    @Override protected RMNodeLabelsManager createNodeLabelManager(){
      return nodeLabelsMgr;
    }
  }
;
  rm.start();
  ResourceTrackerService resourceTrackerService=rm.getResourceTrackerService();
  RegisterNodeManagerRequest req=Records.newRecord(RegisterNodeManagerRequest.class);
  NodeId nodeId=NodeId.newInstance("host2",1234);
  Resource capability=BuilderUtils.newResource(1024,1);
  req.setResource(capability);
  req.setNodeId(nodeId);
  req.setHttpPort(1234);
  req.setNMVersion(YarnVersionInfo.getVersion());
  req.setNodeLabels(toSet("A","B","C"));
  RegisterNodeManagerResponse registerResponse=resourceTrackerService.registerNodeManager(req);
  NodeHeartbeatRequest heartbeatReq=Records.newRecord(NodeHeartbeatRequest.class);
  heartbeatReq.setNodeLabels(toSet("B"));
  heartbeatReq.setNodeStatus(getNodeStatusObject(nodeId));
  heartbeatReq.setLastKnownNMTokenMasterKey(registerResponse.getNMTokenMasterKey());
  heartbeatReq.setLastKnownContainerTokenMasterKey(registerResponse.getContainerTokenMasterKey());
  NodeHeartbeatResponse nodeHeartbeatResponse=resourceTrackerService.nodeHeartbeat(heartbeatReq);
  Assert.assertEquals(NodeAction.NORMAL,nodeHeartbeatResponse.getNodeAction());
  Assert.assertNull(nodeLabelsMgr.getNodeLabels().get(nodeId));
  Assert.assertFalse("Invalid Node Labels should not accepted by RM",nodeHeartbeatResponse.getAreNodeLabelsAcceptedByRM());
  if (rm != null) {
    rm.stop();
  }
}
