{
  Configuration conf=new Configuration();
  int timeoutValue=500;
  File excludeHostFile=new File(TEMP_DIR + File.separator + "excludeHostFile.txt");
  conf.set(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,"");
  conf.set(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,"");
  conf.setInt(YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,timeoutValue);
  CountDownLatch latch=new CountDownLatch(1);
  rm=new MockRM(conf);
  rm.init(conf);
  rm.start();
  RMContext rmContext=rm.getRMContext();
  refreshNodesOption(doGraceful,conf);
  MockNM nm1=rm.registerNode("host1:1234",5120);
  MockNM nm2=rm.registerNode("host2:5678",10240);
  MockNM nm3=rm.registerNode("localhost:4433",1024);
  ClusterMetrics metrics=ClusterMetrics.getMetrics();
  assert(metrics != null);
  NodeHeartbeatResponse nodeHeartbeat=nm1.nodeHeartbeat(true);
  Assert.assertTrue(NodeAction.NORMAL.equals(nodeHeartbeat.getNodeAction()));
  nodeHeartbeat=nm2.nodeHeartbeat(true);
  Assert.assertTrue(NodeAction.NORMAL.equals(nodeHeartbeat.getNodeAction()));
  nodeHeartbeat=nm3.nodeHeartbeat(true);
  Assert.assertTrue(NodeAction.NORMAL.equals(nodeHeartbeat.getNodeAction()));
  rm.drainEvents();
  Assert.assertEquals("All 3 nodes should be active",metrics.getNumActiveNMs(),3);
  String ip=NetUtils.normalizeHostName("localhost");
  writeToHostsFile("host1",ip);
  conf.set(YarnConfiguration.RM_NODES_INCLUDE_FILE_PATH,hostFile.getAbsolutePath());
  refreshNodesOption(doGraceful,conf);
  nm1.nodeHeartbeat(true);
  rm.drainEvents();
  Assert.assertTrue("Node should not be in active node list",!rmContext.getRMNodes().containsKey(nm2.getNodeId()));
  RMNode rmNode=rmContext.getInactiveRMNodes().get(nm2.getNodeId());
  Assert.assertEquals("Node should be in inactive node list",rmNode.getState(),NodeState.SHUTDOWN);
  Assert.assertEquals("Active nodes should be 2",metrics.getNumActiveNMs(),2);
  Assert.assertEquals("Shutdown nodes should be 1",metrics.getNumShutdownNMs(),1);
  int nodeRemovalTimeout=conf.getInt(YarnConfiguration.RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC,YarnConfiguration.DEFAULT_RM_NODEMANAGER_UNTRACKED_REMOVAL_TIMEOUT_MSEC);
  int nodeRemovalInterval=rmContext.getNodesListManager().getNodeRemovalCheckInterval();
  long maxThreadSleeptime=nodeRemovalInterval + nodeRemovalTimeout;
  latch.await(maxThreadSleeptime,TimeUnit.MILLISECONDS);
  rmNode=rmContext.getInactiveRMNodes().get(nm2.getNodeId());
  Assert.assertEquals("Node should have been forgotten!",rmNode,null);
  Assert.assertEquals("Shutdown nodes should be 0 now",metrics.getNumShutdownNMs(),0);
  writeToHostsFile("host1",ip,"host2");
  refreshNodesOption(doGraceful,conf);
  nm2=rm.registerNode("host2:5678",10240);
  rm.drainEvents();
  writeToHostsFile("host1",ip);
  refreshNodesOption(doGraceful,conf);
  rm.drainEvents();
  rmNode=rmContext.getInactiveRMNodes().get(nm2.getNodeId());
  Assert.assertEquals("Node should be shutdown",rmNode.getState(),NodeState.SHUTDOWN);
  Assert.assertEquals("Active nodes should be 2",metrics.getNumActiveNMs(),2);
  Assert.assertEquals("Shutdown nodes should be 1",metrics.getNumShutdownNMs(),1);
  latch.await(maxThreadSleeptime - 2000,TimeUnit.MILLISECONDS);
  writeToHostsFile("host1",ip,"host2");
  refreshNodesOption(doGraceful,conf);
  nm2=rm.registerNode("host2:5678",10240);
  nodeHeartbeat=nm2.nodeHeartbeat(true);
  rm.drainEvents();
  Assert.assertTrue(NodeAction.NORMAL.equals(nodeHeartbeat.getNodeAction()));
  Assert.assertEquals("Shutdown nodes should be 0 now",metrics.getNumShutdownNMs(),0);
  Assert.assertEquals("All 3 nodes should be active",metrics.getNumActiveNMs(),3);
  writeToHostsFile("host1","host2",ip);
  writeToHostsFile(excludeHostFile,"host2");
  conf.set(YarnConfiguration.RM_NODES_EXCLUDE_FILE_PATH,excludeHostFile.getAbsolutePath());
  refreshNodesOption(doGraceful,conf);
  rm.drainEvents();
  rmNode=doGraceful ? rmContext.getRMNodes().get(nm2.getNodeId()) : rmContext.getInactiveRMNodes().get(nm2.getNodeId());
  Assert.assertTrue("Node should be DECOMMISSIONED or DECOMMISSIONING",(rmNode.getState() == NodeState.DECOMMISSIONED) || (rmNode.getState() == NodeState.DECOMMISSIONING));
  if (rmNode.getState() == NodeState.DECOMMISSIONED) {
    Assert.assertEquals("Decommissioned/ing nodes should be 1 now",metrics.getNumDecommisionedNMs(),1);
  }
  latch.await(maxThreadSleeptime,TimeUnit.MILLISECONDS);
  rmNode=doGraceful ? rmContext.getRMNodes().get(nm2.getNodeId()) : rmContext.getInactiveRMNodes().get(nm2.getNodeId());
  Assert.assertTrue("Node should be DECOMMISSIONED or DECOMMISSIONING",(rmNode.getState() == NodeState.DECOMMISSIONED) || (rmNode.getState() == NodeState.DECOMMISSIONING));
  if (rmNode.getState() == NodeState.DECOMMISSIONED) {
    Assert.assertEquals("Decommissioned/ing nodes should be 1 now",metrics.getNumDecommisionedNMs(),1);
  }
  writeToHostsFile("host1",ip,"host2");
  writeToHostsFile(excludeHostFile,"host2");
  refreshNodesOption(doGraceful,conf);
  nm1.nodeHeartbeat(true);
  nm3.nodeHeartbeat(true);
  latch.await(maxThreadSleeptime,TimeUnit.MILLISECONDS);
  rmNode=doGraceful ? rmContext.getRMNodes().get(nm2.getNodeId()) : rmContext.getInactiveRMNodes().get(nm2.getNodeId());
  Assert.assertNotEquals("Timer for this node was not canceled!",rmNode,null);
  Assert.assertTrue("Node should be DECOMMISSIONED or DECOMMISSIONING",(rmNode.getState() == NodeState.DECOMMISSIONED) || (rmNode.getState() == NodeState.DECOMMISSIONING));
  writeToHostsFile("host1",ip);
  writeToHostsFile(excludeHostFile,"");
  refreshNodesOption(doGraceful,conf);
  latch.await(maxThreadSleeptime,TimeUnit.MILLISECONDS);
  rmNode=doGraceful ? rmContext.getRMNodes().get(nm2.getNodeId()) : rmContext.getInactiveRMNodes().get(nm2.getNodeId());
  Assert.assertEquals("Node should have been forgotten!",rmNode,null);
  Assert.assertEquals("Shutdown nodes should be 0 now",metrics.getNumDecommisionedNMs(),0);
  Assert.assertEquals("Shutdown nodes should be 0 now",metrics.getNumShutdownNMs(),0);
  Assert.assertEquals("Active nodes should be 2",metrics.getNumActiveNMs(),2);
  rm.stop();
}
