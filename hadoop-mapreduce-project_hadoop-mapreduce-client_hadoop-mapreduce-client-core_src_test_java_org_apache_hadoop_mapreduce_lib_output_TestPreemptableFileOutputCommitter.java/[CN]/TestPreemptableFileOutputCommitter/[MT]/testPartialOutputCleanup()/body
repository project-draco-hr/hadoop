{
  Configuration conf=new Configuration(false);
  conf.setInt(MRJobConfig.APPLICATION_ATTEMPT_ID,1);
  TaskAttemptID tid0=new TaskAttemptID("1363718006656",1,TaskType.REDUCE,14,3);
  Path p=spy(new Path("/user/hadoop/out"));
  Path a=new Path("hdfs://user/hadoop/out");
  Path p0=new Path(a,"_temporary/1/attempt_1363718006656_0001_r_000014_0");
  Path p1=new Path(a,"_temporary/1/attempt_1363718006656_0001_r_000014_1");
  Path p2=new Path(a,"_temporary/1/attempt_1363718006656_0001_r_000013_0");
  Path p3=new Path(a,"_temporary/1/attempt_1363718006656_0001_r_000014_2");
  FileStatus[] fsa=new FileStatus[3];
  fsa[0]=new FileStatus();
  fsa[0].setPath(p0);
  fsa[1]=new FileStatus();
  fsa[1].setPath(p1);
  fsa[2]=new FileStatus();
  fsa[2].setPath(p2);
  final FileSystem fs=mock(FileSystem.class);
  when(fs.exists(eq(p0))).thenReturn(true);
  when(fs.exists(eq(p1))).thenReturn(true);
  when(fs.exists(eq(p2))).thenReturn(true);
  when(fs.exists(eq(p3))).thenReturn(false);
  when(fs.delete(eq(p0),eq(true))).thenReturn(true);
  when(fs.delete(eq(p1),eq(true))).thenReturn(true);
  doReturn(fs).when(p).getFileSystem(any(Configuration.class));
  when(fs.makeQualified(eq(p))).thenReturn(a);
  TaskAttemptContext context=mock(TaskAttemptContext.class);
  when(context.getTaskAttemptID()).thenReturn(tid0);
  when(context.getConfiguration()).thenReturn(conf);
  PartialFileOutputCommitter foc=new TestPFOC(p,context,fs);
  foc.cleanUpPartialOutputForTask(context);
  verify(fs).delete(eq(p0),eq(true));
  verify(fs).delete(eq(p1),eq(true));
  verify(fs,never()).delete(eq(p3),eq(true));
  verify(fs,never()).delete(eq(p2),eq(true));
}
