{
  JobConf conf=new JobConf();
  conf.setClass("fs.mock.impl",MockFileSystem.class,FileSystem.class);
  URI mockBase=new URI("mock://test-nn1/");
  when(mockfs.getUri()).thenReturn(mockBase);
  Path working=new Path("mock://test-nn1/user/me/");
  when(mockfs.getWorkingDirectory()).thenReturn(working);
  when(mockfs.resolvePath(any(Path.class))).thenAnswer(new Answer<Path>(){
    @Override public Path answer(    InvocationOnMock args) throws Throwable {
      return (Path)args.getArguments()[0];
    }
  }
);
  when(mockfs.getFileStatus(any(Path.class))).thenAnswer(new Answer<FileStatus>(){
    @Override public FileStatus answer(    InvocationOnMock args) throws Throwable {
      Path p=(Path)args.getArguments()[0];
      throw new FileNotFoundException(p + " not supported by mocking");
    }
  }
);
  when(mockfs.getConf()).thenReturn(conf);
  when(mockfs.open(any(Path.class),anyInt())).thenAnswer(new Answer<FSDataInputStream>(){
    @Override public FSDataInputStream answer(    InvocationOnMock args) throws Throwable {
      Path src=(Path)args.getArguments()[0];
      throw new FileNotFoundException(src + " not supported by mocking");
    }
  }
);
  conf.set(MRJobConfig.CACHE_FILES,"");
  conf.set(MRConfig.LOCAL_DIR,localDir.getAbsolutePath());
  LocalDistributedCacheManager manager=new LocalDistributedCacheManager();
  try {
    manager.setup(conf);
  }
  finally {
    manager.close();
  }
}
