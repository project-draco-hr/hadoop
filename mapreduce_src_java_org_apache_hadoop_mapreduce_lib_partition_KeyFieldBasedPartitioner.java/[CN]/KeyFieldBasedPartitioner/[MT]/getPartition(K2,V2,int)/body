{
  byte[] keyBytes;
  List<KeyDescription> allKeySpecs=keyFieldHelper.keySpecs();
  if (allKeySpecs.size() == 0) {
    return getPartition(key.toString().hashCode(),numReduceTasks);
  }
  try {
    keyBytes=key.toString().getBytes("UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException("The current system does not " + "support UTF-8 encoding!",e);
  }
  if (keyBytes.length == 0) {
    return 0;
  }
  int[] lengthIndicesFirst=keyFieldHelper.getWordLengths(keyBytes,0,keyBytes.length);
  int currentHash=0;
  for (  KeyDescription keySpec : allKeySpecs) {
    int startChar=keyFieldHelper.getStartOffset(keyBytes,0,keyBytes.length,lengthIndicesFirst,keySpec);
    if (startChar < 0) {
      continue;
    }
    int endChar=keyFieldHelper.getEndOffset(keyBytes,0,keyBytes.length,lengthIndicesFirst,keySpec);
    currentHash=hashCode(keyBytes,startChar,endChar,currentHash);
  }
  return getPartition(currentHash,numReduceTasks);
}
