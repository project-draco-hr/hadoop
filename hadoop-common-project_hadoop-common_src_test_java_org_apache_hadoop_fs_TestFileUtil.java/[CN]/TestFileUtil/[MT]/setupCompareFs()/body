{
  String host1="1.2.3.4";
  String host2="2.3.4.5";
  int port1=7000;
  int port2=7001;
  String uris1="hdfs://" + host1 + ":"+ Integer.toString(port1)+ "/tmp/foo";
  String uris2="hdfs://" + host1 + ":"+ Integer.toString(port2)+ "/tmp/foo";
  String uris3="hdfs://" + host2 + ":"+ Integer.toString(port2)+ "/tmp/foo";
  String uris4="hdfs://" + host2 + ":"+ Integer.toString(port2)+ "/tmp/foo";
  String uris5="file:///" + host1 + ":"+ Integer.toString(port1)+ "/tmp/foo";
  String uris6="hdfs:///" + host1 + "/tmp/foo";
  try {
    uri1=new URI(uris1);
    uri2=new URI(uris2);
    uri3=new URI(uris3);
    uri4=new URI(uris4);
    uri5=new URI(uris5);
    uri6=new URI(uris6);
  }
 catch (  URISyntaxException use) {
  }
  inet1=mock(InetAddress.class);
  when(inet1.getCanonicalHostName()).thenReturn(host1);
  inet2=mock(InetAddress.class);
  when(inet2.getCanonicalHostName()).thenReturn(host1);
  inet3=mock(InetAddress.class);
  when(inet3.getCanonicalHostName()).thenReturn(host2);
  inet4=mock(InetAddress.class);
  when(inet4.getCanonicalHostName()).thenReturn(host2);
  inet5=mock(InetAddress.class);
  when(inet5.getCanonicalHostName()).thenReturn(host1);
  inet6=mock(InetAddress.class);
  when(inet6.getCanonicalHostName()).thenReturn(host1);
  try {
    when(InetAddress.getByName(uris1)).thenReturn(inet1);
    when(InetAddress.getByName(uris2)).thenReturn(inet2);
    when(InetAddress.getByName(uris3)).thenReturn(inet3);
    when(InetAddress.getByName(uris4)).thenReturn(inet4);
    when(InetAddress.getByName(uris5)).thenReturn(inet5);
  }
 catch (  UnknownHostException ue) {
  }
  fs1=mock(FileSystem.class);
  when(fs1.getUri()).thenReturn(uri1);
  fs2=mock(FileSystem.class);
  when(fs2.getUri()).thenReturn(uri2);
  fs3=mock(FileSystem.class);
  when(fs3.getUri()).thenReturn(uri3);
  fs4=mock(FileSystem.class);
  when(fs4.getUri()).thenReturn(uri4);
  fs5=mock(FileSystem.class);
  when(fs5.getUri()).thenReturn(uri5);
  fs6=mock(FileSystem.class);
  when(fs6.getUri()).thenReturn(uri6);
}
