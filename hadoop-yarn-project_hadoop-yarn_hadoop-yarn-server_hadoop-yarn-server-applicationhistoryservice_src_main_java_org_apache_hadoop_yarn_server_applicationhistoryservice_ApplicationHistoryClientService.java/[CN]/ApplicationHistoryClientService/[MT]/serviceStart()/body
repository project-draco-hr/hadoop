{
  Configuration conf=getConfig();
  YarnRPC rpc=YarnRPC.create(conf);
  InetSocketAddress address=conf.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,YarnConfiguration.TIMELINE_SERVICE_ADDRESS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_PORT);
  Preconditions.checkArgument(conf.getInt(YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_THREAD_COUNT) > 0,"%s property value should be greater than zero",YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT);
  server=rpc.getServer(ApplicationHistoryProtocol.class,this,address,conf,null,conf.getInt(YarnConfiguration.TIMELINE_SERVICE_HANDLER_THREAD_COUNT,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_THREAD_COUNT));
  if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,false)) {
    refreshServiceAcls(conf,new TimelinePolicyProvider());
  }
  server.start();
  this.bindAddress=conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,YarnConfiguration.TIMELINE_SERVICE_ADDRESS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS,server.getListenerAddress());
  LOG.info("Instantiated ApplicationHistoryClientService at " + this.bindAddress);
  super.serviceStart();
}
