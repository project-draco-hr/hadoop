{
  LOG.info("testPurgeHar started");
  int harDelay=0;
  createClusters(true);
  mySetup(1,1,5,harDelay);
  Path dir=new Path("/user/dhruba/raidtest/");
  Path destPath=new Path("/raid/user/dhruba/raidtest");
  Path file1=new Path(dir + "/file");
  RaidNode cnode=null;
  try {
    TestRaidNode.createOldFile(fileSys,file1,1,8,8192L);
    LOG.info("testPurgeHar created test files");
    Configuration localConf=new Configuration(conf);
    cnode=RaidNode.createRaidNode(null,localConf);
    while (true) {
      try {
        FileStatus[] listPaths=listPaths=fileSys.listStatus(destPath);
        if (listPaths != null && listPaths.length == 1) {
          FileStatus s=listPaths[0];
          LOG.info("testPurgeHar found path " + s.getPath());
          if (s.getPath().toString().endsWith(".har")) {
            break;
          }
        }
      }
 catch (      FileNotFoundException e) {
      }
      Thread.sleep(1000);
    }
    fileSys.setTimes(file1,0,0);
    boolean found=false;
    FileStatus[] listPaths=null;
    while (!found || listPaths == null || listPaths.length > 1) {
      listPaths=fileSys.listStatus(destPath);
      if (listPaths != null) {
        for (        FileStatus s : listPaths) {
          LOG.info("testPurgeHar waiting for parity file to be recreated" + " and har to be deleted found " + s.getPath());
          if (s.getPath().toString().endsWith("file") && s.getModificationTime() == 0) {
            found=true;
          }
        }
      }
      Thread.sleep(1000);
    }
  }
 catch (  Exception e) {
    LOG.info("testPurgeHar Exception " + e + StringUtils.stringifyException(e));
    throw e;
  }
 finally {
    if (cnode != null) {
      cnode.stop();
      cnode.join();
    }
    fileSys.delete(dir,true);
    fileSys.delete(destPath,true);
    stopClusters();
  }
}
