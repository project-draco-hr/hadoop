{
  UserGroupInformation ugi=null;
  final CallbackHandler callback;
switch (authMethod) {
case TOKEN:
{
      callback=new SaslDigestCallbackHandler(secretManager,connection);
      break;
    }
case KERBEROS:
{
    ugi=UserGroupInformation.getCurrentUser();
    if (serverId.isEmpty()) {
      throw new AccessControlException("Kerberos principal name does NOT have the expected " + "hostname part: " + ugi.getUserName());
    }
    callback=new SaslGssCallbackHandler();
    break;
  }
default :
throw new AccessControlException("Server does not support SASL " + authMethod);
}
final SaslServer saslServer;
if (ugi != null) {
saslServer=ugi.doAs(new PrivilegedExceptionAction<SaslServer>(){
@Override public SaslServer run() throws SaslException {
  return saslFactory.createSaslServer(mechanism,protocol,serverId,SaslRpcServer.SASL_PROPS,callback);
}
}
);
}
 else {
saslServer=saslFactory.createSaslServer(mechanism,protocol,serverId,SaslRpcServer.SASL_PROPS,callback);
}
if (saslServer == null) {
throw new AccessControlException("Unable to find SASL server implementation for " + mechanism);
}
if (LOG.isDebugEnabled()) {
LOG.debug("Created SASL server with mechanism = " + mechanism);
}
return saslServer;
}
