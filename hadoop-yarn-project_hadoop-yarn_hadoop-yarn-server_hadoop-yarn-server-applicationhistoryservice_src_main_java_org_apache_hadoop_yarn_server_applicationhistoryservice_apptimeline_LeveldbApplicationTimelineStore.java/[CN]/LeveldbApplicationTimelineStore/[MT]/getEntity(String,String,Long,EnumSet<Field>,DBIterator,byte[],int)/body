{
  if (fields == null)   fields=EnumSet.allOf(Field.class);
  ATSEntity atsEntity=new ATSEntity();
  boolean events=false;
  boolean lastEvent=false;
  if (fields.contains(Field.EVENTS)) {
    events=true;
    atsEntity.setEvents(new ArrayList<ATSEvent>());
  }
 else   if (fields.contains(Field.LAST_EVENT_ONLY)) {
    lastEvent=true;
    atsEntity.setEvents(new ArrayList<ATSEvent>());
  }
 else {
    atsEntity.setEvents(null);
  }
  boolean relatedEntities=false;
  if (fields.contains(Field.RELATED_ENTITIES)) {
    relatedEntities=true;
    atsEntity.setRelatedEntities(new HashMap<String,List<String>>());
  }
 else {
    atsEntity.setRelatedEntities(null);
  }
  boolean primaryFilters=false;
  if (fields.contains(Field.PRIMARY_FILTERS)) {
    primaryFilters=true;
    atsEntity.setPrimaryFilters(new HashMap<String,Object>());
  }
 else {
    atsEntity.setPrimaryFilters(null);
  }
  boolean otherInfo=false;
  if (fields.contains(Field.OTHER_INFO)) {
    otherInfo=true;
    atsEntity.setOtherInfo(new HashMap<String,Object>());
  }
 else {
    atsEntity.setOtherInfo(null);
  }
  for (; iterator.hasNext(); iterator.next()) {
    byte[] key=iterator.peekNext().getKey();
    if (!prefixMatches(prefix,prefixlen,key))     break;
    if (key[prefixlen] == PRIMARY_FILTER_COLUMN[0]) {
      if (primaryFilters) {
        atsEntity.addPrimaryFilter(parseRemainingKey(key,prefixlen + PRIMARY_FILTER_COLUMN.length),GenericObjectMapper.read(iterator.peekNext().getValue()));
      }
    }
 else     if (key[prefixlen] == OTHER_INFO_COLUMN[0]) {
      if (otherInfo) {
        atsEntity.addOtherInfo(parseRemainingKey(key,prefixlen + OTHER_INFO_COLUMN.length),GenericObjectMapper.read(iterator.peekNext().getValue()));
      }
    }
 else     if (key[prefixlen] == RELATED_COLUMN[0]) {
      if (relatedEntities) {
        addRelatedEntity(atsEntity,key,prefixlen + RELATED_COLUMN.length);
      }
    }
 else     if (key[prefixlen] == TIME_COLUMN[0]) {
      if (events || (lastEvent && atsEntity.getEvents().size() == 0)) {
        ATSEvent event=getEntityEvent(null,key,prefixlen + TIME_COLUMN.length,iterator.peekNext().getValue());
        if (event != null) {
          atsEntity.addEvent(event);
        }
      }
    }
 else {
      LOG.warn(String.format("Found unexpected column for entity %s of " + "type %s (0x%02x)",entity,entityType,key[prefixlen]));
    }
  }
  atsEntity.setEntityId(entity);
  atsEntity.setEntityType(entityType);
  atsEntity.setStartTime(startTime);
  return atsEntity;
}
