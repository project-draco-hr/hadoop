{
  DBIterator iterator=null;
  try {
    KeyBuilder kb=KeyBuilder.newInstance().add(base).add(entityType);
    byte[] prefix=kb.getBytesForLookup();
    if (endtime == null) {
      endtime=Long.MAX_VALUE;
    }
    byte[] revts=writeReverseOrderedLong(endtime);
    kb.add(revts);
    byte[] first=kb.getBytesForLookup();
    byte[] last=null;
    if (starttime != null) {
      last=KeyBuilder.newInstance().add(base).add(entityType).add(writeReverseOrderedLong(starttime)).getBytesForLookup();
    }
    if (limit == null) {
      limit=DEFAULT_LIMIT;
    }
    ATSEntities atsEntities=new ATSEntities();
    iterator=db.iterator();
    iterator.seek(first);
    while (atsEntities.getEntities().size() < limit && iterator.hasNext()) {
      byte[] key=iterator.peekNext().getKey();
      if (!prefixMatches(prefix,prefix.length,key) || (last != null && WritableComparator.compareBytes(key,0,key.length,last,0,last.length) > 0))       break;
      KeyParser kp=new KeyParser(key,prefix.length);
      Long startTime=kp.getNextLong();
      String entity=kp.getNextString();
      ATSEntity atsEntity=getEntity(entity,entityType,startTime,fields,iterator,key,kp.getOffset());
      if (atsEntity == null)       continue;
      boolean filterPassed=true;
      if (secondaryFilters != null) {
        for (        NameValuePair filter : secondaryFilters) {
          Object v=atsEntity.getOtherInfo().get(filter.getName());
          if (v == null) {
            Set<Object> vs=atsEntity.getPrimaryFilters().get(filter.getName());
            if (vs != null && !vs.contains(filter.getValue())) {
              filterPassed=false;
              break;
            }
          }
 else           if (!v.equals(filter.getValue())) {
            filterPassed=false;
            break;
          }
        }
      }
      if (filterPassed)       atsEntities.addEntity(atsEntity);
    }
    return atsEntities;
  }
  finally {
    IOUtils.cleanup(LOG,iterator);
  }
}
