{
  final List<FSVolume> volumes=new ArrayList<FSVolume>();
  volumes.add(Mockito.mock(FSVolume.class));
  Mockito.when(volumes.get(0).getAvailable()).thenReturn(100L);
  volumes.add(Mockito.mock(FSVolume.class));
  Mockito.when(volumes.get(1).getAvailable()).thenReturn(200L);
  RoundRobinVolumesPolicy policy=ReflectionUtils.newInstance(RoundRobinVolumesPolicy.class,null);
  Assert.assertEquals(volumes.get(0),policy.chooseVolume(volumes,0));
  Assert.assertEquals(volumes.get(1),policy.chooseVolume(volumes,0));
  Assert.assertEquals(volumes.get(0),policy.chooseVolume(volumes,0));
  Assert.assertEquals(volumes.get(1),policy.chooseVolume(volumes,0));
  Assert.assertEquals(volumes.get(1),policy.chooseVolume(volumes,150));
  try {
    policy.chooseVolume(volumes,Long.MAX_VALUE);
    Assert.fail();
  }
 catch (  IOException e) {
  }
}
