{
  if (testName == null) {
    testName=binary.getName();
  }
  Utils.validatePlatform();
  validateParameters();
  if (!shouldRunTest()) {
    return;
  }
  if (!results.isDirectory()) {
    if (!results.mkdirs()) {
      throw new MojoExecutionException("Failed to create " + "output directory '" + results + "'!");
    }
  }
  StringBuilder stdoutPrefixBuilder=new StringBuilder();
  List<String> cmd=new LinkedList<String>();
  cmd.add(binary.getAbsolutePath());
  System.out.println("-------------------------------------------------------");
  System.out.println(" C M A K E - N G   T E S T");
  System.out.println("-------------------------------------------------------");
  stdoutPrefixBuilder.append("TEST: ").append(binary.getAbsolutePath());
  System.out.print(binary.getAbsolutePath());
  for (  String entry : args) {
    cmd.add(entry);
    stdoutPrefixBuilder.append(" ").append(entry);
    System.out.print(" ");
    System.out.print(entry);
  }
  System.out.print("\n");
  stdoutPrefixBuilder.append("\n");
  ProcessBuilder pb=new ProcessBuilder(cmd);
  Utils.addEnvironment(pb,env);
  Utils.envronmentToString(stdoutPrefixBuilder,env);
  Process proc=null;
  TestThread testThread=null;
  OutputToFileThread errThread=null, outThread=null;
  int retCode=-1;
  String status="IN_PROGRESS";
  try {
    writeStatusFile(status);
  }
 catch (  IOException e) {
    throw new MojoExecutionException("Error writing the status file",e);
  }
  try {
    proc=pb.start();
    errThread=new OutputToFileThread(proc.getErrorStream(),new File(results,testName + ".stderr"),"");
    errThread.start();
    outThread=new OutputToFileThread(proc.getInputStream(),new File(results,testName + ".stdout"),stdoutPrefixBuilder.toString());
    outThread.start();
    testThread=new TestThread(proc);
    testThread.start();
    testThread.join(timeout * 1000);
    if (!testThread.isAlive()) {
      retCode=testThread.retCode();
      testThread=null;
      proc=null;
    }
  }
 catch (  IOException e) {
    throw new MojoExecutionException("IOException while executing the test " + testName,e);
  }
catch (  InterruptedException e) {
    throw new MojoExecutionException("Interrupted while executing " + "the test " + testName,e);
  }
 finally {
    if (testThread != null) {
      testThread.interrupt();
      try {
        testThread.join();
      }
 catch (      InterruptedException e) {
        System.err.println("Interrupted while waiting for testThread");
        e.printStackTrace(System.err);
      }
      status="TIMED_OUT";
    }
 else     if (retCode == 0) {
      status="SUCCESS";
    }
 else {
      status="ERROR " + String.valueOf(retCode);
    }
    try {
      writeStatusFile(status);
    }
 catch (    Exception e) {
      System.err.println("failed to write status file!  Error " + e);
    }
    if (proc != null) {
      proc.destroy();
    }
    if (errThread != null) {
      try {
        errThread.interrupt();
        errThread.join();
      }
 catch (      InterruptedException e) {
        System.err.println("Interrupted while waiting for errThread");
        e.printStackTrace(System.err);
      }
      errThread.close();
    }
    if (outThread != null) {
      try {
        outThread.interrupt();
        outThread.join();
      }
 catch (      InterruptedException e) {
        System.err.println("Interrupted while waiting for outThread");
        e.printStackTrace(System.err);
      }
      outThread.close();
    }
  }
  System.out.println("STATUS: " + status);
  System.out.println("-------------------------------------------------------");
  if (status.equals("TIMED_OUT")) {
    if (expectedResult.equals("success")) {
      throw new MojoExecutionException("Test " + binary + " timed out after "+ timeout+ " seconds!");
    }
  }
 else   if (!status.equals("SUCCESS")) {
    if (expectedResult.equals("success")) {
      throw new MojoExecutionException("Test " + binary + " returned "+ status);
    }
  }
 else   if (expectedResult.equals("failure")) {
    throw new MojoExecutionException("Test " + binary + " succeeded, but we expected failure!");
  }
}
