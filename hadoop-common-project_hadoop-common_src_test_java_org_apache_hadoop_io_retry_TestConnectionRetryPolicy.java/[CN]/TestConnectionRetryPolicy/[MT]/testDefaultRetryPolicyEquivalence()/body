{
  RetryPolicy rp1=null;
  RetryPolicy rp2=null;
  RetryPolicy rp3=null;
  rp1=getDefaultRetryPolicy(true,"10000,2");
  rp2=getDefaultRetryPolicy(true,"10000,2");
  rp3=getDefaultRetryPolicy(true,"10000,2");
  verifyRetryPolicyEquivalence(new RetryPolicy[]{rp1,rp2,rp3});
  rp1=getDefaultRetryPolicy(true,"10000,2",new RemoteException(PathIOException.class.getName(),"path IO exception").getClassName());
  rp2=getDefaultRetryPolicy(true,"10000,2",new RemoteException(RpcNoSuchMethodException.class.getName(),"no such method exception").getClassName());
  rp3=getDefaultRetryPolicy(true,"10000,2",new RemoteException(RetriableException.class.getName(),"retriable exception").getClassName());
  verifyRetryPolicyEquivalence(new RetryPolicy[]{rp1,rp2,rp3});
  rp1=getDefaultRetryPolicy(true,"20000,3");
  rp2=getDefaultRetryPolicy(true,"30000,4");
  assertNotEquals("should not be equal",rp1,rp2);
  assertNotEquals("should not have the same hash code",rp1.hashCode(),rp2.hashCode());
  rp1=getDefaultRetryPolicy(false,"40000,5");
  rp2=getDefaultRetryPolicy(false,"40000,5");
  assertEquals("should be equal",rp1,rp2);
  assertEquals("should have the same hash code",rp1,rp2);
  rp1=getDefaultRetryPolicy(false,"50000,6");
  rp2=getDefaultRetryPolicy(false,"60000,7");
  assertEquals("should be equal",rp1,rp2);
  assertEquals("should have the same hash code",rp1,rp2);
}
