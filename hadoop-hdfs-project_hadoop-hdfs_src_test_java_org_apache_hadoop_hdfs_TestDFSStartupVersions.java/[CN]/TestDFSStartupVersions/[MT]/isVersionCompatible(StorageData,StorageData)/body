{
  final StorageInfo namenodeVer=namenodeSd.storageInfo;
  final StorageInfo datanodeVer=datanodeSd.storageInfo;
  if (namenodeVer.getNamespaceID() != datanodeVer.getNamespaceID()) {
    LOG.info("namespaceIDs are not equal: isVersionCompatible=false");
    return false;
  }
  if (!namenodeVer.getClusterID().equals(datanodeVer.getClusterID())) {
    LOG.info("clusterIDs are not equal: isVersionCompatible=false");
    return false;
  }
  if (!namenodeSd.blockPoolId.equals(datanodeSd.blockPoolId)) {
    LOG.info("blockPoolIDs are not equal: isVersionCompatible=false");
    return false;
  }
  int softwareLV=HdfsServerConstants.DATANODE_LAYOUT_VERSION;
  int storedLV=datanodeVer.getLayoutVersion();
  if (softwareLV == storedLV && datanodeVer.getCTime() == namenodeVer.getCTime()) {
    LOG.info("layoutVersions and cTimes are equal: isVersionCompatible=true");
    return true;
  }
  long absSoftwareLV=Math.abs((long)softwareLV);
  long absStoredLV=Math.abs((long)storedLV);
  if (absSoftwareLV > absStoredLV || (softwareLV == storedLV && datanodeVer.getCTime() < namenodeVer.getCTime())) {
    LOG.info("softwareLayoutVersion is newer OR namenode cTime is newer: isVersionCompatible=true");
    return true;
  }
  LOG.info("default case: isVersionCompatible=false");
  return false;
}
