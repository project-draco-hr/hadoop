{
  Configuration conf=new Configuration();
  conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,dfsCluster.getURI().toString());
  FileOutputStream os=new FileOutputStream(coreSitePath);
  conf.writeXml(os);
  os.close();
  conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,"file:///");
  TestParams t=new TestParams();
  conf.set(MRJobConfig.MR_AM_STAGING_DIR,t.dfsWorkDir);
  JHEvenHandlerForTest realJheh=new JHEvenHandlerForTest(t.mockAppContext,0,false);
  JHEvenHandlerForTest jheh=spy(realJheh);
  jheh.init(conf);
  try {
    jheh.start();
    handleEvent(jheh,new JobHistoryEvent(t.jobId,new AMStartedEvent(t.appAttemptId,200,t.containerId,"nmhost",3000,4000)));
    handleEvent(jheh,new JobHistoryEvent(t.jobId,new JobFinishedEvent(TypeConverter.fromYarn(t.jobId),0,0,0,0,0,new Counters(),new Counters(),new Counters())));
    FileSystem dfsFileSystem=dfsCluster.getFileSystem();
    assertTrue("Minicluster contains some history files",dfsFileSystem.globStatus(new Path(t.dfsWorkDir + "/*")).length != 0);
    FileSystem localFileSystem=LocalFileSystem.get(conf);
    assertFalse("No history directory on non-default file system",localFileSystem.exists(new Path(t.dfsWorkDir)));
  }
  finally {
    jheh.stop();
  }
}
