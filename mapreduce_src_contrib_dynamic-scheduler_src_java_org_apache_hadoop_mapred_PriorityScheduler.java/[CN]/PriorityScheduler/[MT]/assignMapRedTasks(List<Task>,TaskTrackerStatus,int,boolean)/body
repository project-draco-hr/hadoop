{
  int taskOffset=assignedTasks.size();
  int maxTasks=(map) ? taskTracker.getMaxMapSlots() : taskTracker.getMaxReduceSlots();
  int countTasks=(map) ? taskTracker.countMapTasks() : taskTracker.countReduceTasks();
  int availableSlots=maxTasks - countTasks;
  int map_capacity=0;
  int reduce_capacity=0;
  ClusterStatus status=taskTrackerManager.getClusterStatus();
  if (status != null) {
    map_capacity=status.getMaxMapTasks();
    reduce_capacity=status.getMaxReduceTasks();
  }
  Map<String,QueueQuota> queueQuota=getQueueQuota(map_capacity,reduce_capacity,map);
  if (debug) {
    LOG.debug("available slots " + Integer.toString(availableSlots) + " "+ taskType(map));
    LOG.debug("queue size " + Integer.toString(jobQueue.size()));
    LOG.debug("map capacity " + Integer.toString(map_capacity) + " "+ taskType(map));
    LOG.debug("reduce capacity " + Integer.toString(reduce_capacity) + " "+ taskType(map));
  }
  scheduleJobs(availableSlots,map,NO_FILL,taskTracker,numTrackers,assignedTasks,queueQuota);
  availableSlots-=assignedTasks.size() + taskOffset;
  scheduleJobs(availableSlots,map,FILL,taskTracker,numTrackers,assignedTasks,queueQuota);
  if (map) {
    markIdle(queueQuota);
  }
  long currentTime=System.currentTimeMillis() / 1000;
  if ((killInterval > 0) && (currentTime - lastKill > killInterval)) {
    lastKill=currentTime;
  }
 else {
    return;
  }
  int killTasks=countTasksToKill(queueQuota,map);
  if (debug) {
    LOG.debug("trying to kill " + Integer.toString(killTasks) + " tasks "+ taskType(map));
  }
  killMapRedTasks(killTasks,queueQuota,map);
}
