{
  if (!(newlyParsedQueue instanceof PlanQueue) || !newlyParsedQueue.getQueuePath().equals(getQueuePath())) {
    throw new IOException("Trying to reinitialize " + getQueuePath() + " from "+ newlyParsedQueue.getQueuePath());
  }
  PlanQueue newlyParsedParentQueue=(PlanQueue)newlyParsedQueue;
  if (newlyParsedParentQueue.getChildQueues().size() > 0) {
    throw new IOException("Reservable Queue should not have sub-queues in the" + "configuration");
  }
  setupQueueConfigs(clusterResource,newlyParsedParentQueue.getCapacity(),newlyParsedParentQueue.getAbsoluteCapacity(),newlyParsedParentQueue.getMaximumCapacity(),newlyParsedParentQueue.getAbsoluteMaximumCapacity(),newlyParsedParentQueue.getState(),newlyParsedParentQueue.getACLs(),newlyParsedParentQueue.accessibleLabels,newlyParsedParentQueue.defaultLabelExpression,newlyParsedParentQueue.capacitiyByNodeLabels,newlyParsedParentQueue.maxCapacityByNodeLabels,newlyParsedParentQueue.getReservationContinueLooking());
  updateQuotas(newlyParsedParentQueue.userLimit,newlyParsedParentQueue.userLimitFactor,newlyParsedParentQueue.maxAppsForReservation,newlyParsedParentQueue.maxAppsPerUserForReservation);
  for (  CSQueue res : this.getChildQueues()) {
    res.reinitialize(res,clusterResource);
  }
  showReservationsAsQueues=newlyParsedParentQueue.showReservationsAsQueues;
}
