{
  final Configuration conf=new Configuration();
  conf.setBoolean(DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY,false);
  conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,BLOCK_SIZE);
  FSDataOutputStream stm=null;
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(3).build();
  try {
    cluster.waitActive();
    cluster.transitionToActive(0);
    Thread.sleep(500);
    LOG.info("Starting with NN 0 active");
    FileSystem fs=HATestUtil.configureFailoverFs(cluster,conf);
    stm=fs.create(TEST_PATH);
    AppendTestUtil.write(stm,0,BLOCK_SIZE / 2);
    stm.hflush();
    NameNode nn0=cluster.getNameNode(0);
    ExtendedBlock blk=DFSTestUtil.getFirstBlock(fs,TEST_PATH);
    DatanodeDescriptor expectedPrimary=getExpectedPrimaryNode(nn0,blk);
    LOG.info("Expecting block recovery to be triggered on DN " + expectedPrimary);
    DataNode primaryDN=cluster.getDataNode(expectedPrimary.getIpcPort());
    DatanodeProtocolClientSideTranslatorPB nnSpy=DataNodeAdapter.spyOnBposToNN(primaryDN,nn0);
    DelayAnswer delayer=new DelayAnswer(LOG);
    Mockito.doAnswer(delayer).when(nnSpy).commitBlockSynchronization(Mockito.eq(blk),Mockito.anyInt(),Mockito.anyLong(),Mockito.eq(true),Mockito.eq(false),(DatanodeID[])Mockito.anyObject(),(String[])Mockito.anyObject());
    DistributedFileSystem fsOtherUser=createFsAsOtherUser(cluster,conf);
    assertFalse(fsOtherUser.recoverLease(TEST_PATH));
    LOG.info("Waiting for commitBlockSynchronization call from primary");
    delayer.waitForCall();
    LOG.info("Failing over to NN 1");
    cluster.transitionToStandby(0);
    cluster.transitionToActive(1);
    delayer.proceed();
    delayer.waitForResult();
    Throwable t=delayer.getThrown();
    if (t == null) {
      fail("commitBlockSynchronization call did not fail on standby");
    }
    GenericTestUtils.assertExceptionContains("Operation category WRITE is not supported",t);
    loopRecoverLease(fsOtherUser,TEST_PATH);
    AppendTestUtil.check(fs,TEST_PATH,BLOCK_SIZE / 2);
  }
  finally {
    IOUtils.closeStream(stm);
    cluster.shutdown();
  }
}
