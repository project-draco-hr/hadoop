{
  final Configuration conf=new Configuration();
  conf.setBoolean(DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY,false);
  conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,BLOCK_SIZE);
  FSDataOutputStream stm=null;
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(3).build();
  try {
    cluster.waitActive();
    cluster.transitionToActive(0);
    Thread.sleep(500);
    LOG.info("Starting with NN 0 active");
    FileSystem fs=HATestUtil.configureFailoverFs(cluster,conf);
    stm=fs.create(TEST_PATH);
    AppendTestUtil.write(stm,0,BLOCK_AND_A_HALF);
    stm.hflush();
    LOG.info("Failing over to NN 1");
    cluster.transitionToStandby(0);
    cluster.transitionToActive(1);
    assertTrue(fs.exists(TEST_PATH));
    FileSystem fsOtherUser=UserGroupInformation.createUserForTesting("otheruser",new String[]{"othergroup"}).doAs(new PrivilegedExceptionAction<FileSystem>(){
      @Override public FileSystem run() throws Exception {
        return HATestUtil.configureFailoverFs(cluster,conf);
      }
    }
);
    ((DistributedFileSystem)fsOtherUser).recoverLease(TEST_PATH);
    AppendTestUtil.check(fs,TEST_PATH,BLOCK_AND_A_HALF);
  }
  finally {
    IOUtils.closeStream(stm);
    cluster.shutdown();
  }
}
