{
  setupSslProps(conf);
  int sslPort=getSslAddr(conf).getPort();
  int err=0;
  StringBuilder b=new StringBuilder();
  HostsFileReader hostsReader=new HostsFileReader(conf.get("hdfsproxy.hosts","hdfsproxy-hosts"),"");
  Set<String> hostsList=hostsReader.getHosts();
  for (  String hostname : hostsList) {
    HttpsURLConnection connection=null;
    try {
      connection=openConnection(hostname,sslPort,path);
      connection.connect();
      if (LOG.isDebugEnabled()) {
        StringBuilder sb=new StringBuilder();
        X509Certificate[] clientCerts=(X509Certificate[])connection.getLocalCertificates();
        if (clientCerts != null) {
          for (          X509Certificate cert : clientCerts)           sb.append("\n Client certificate Subject Name is " + cert.getSubjectX500Principal().getName());
        }
 else {
          sb.append("\n No client certificates were found");
        }
        X509Certificate[] serverCerts=(X509Certificate[])connection.getServerCertificates();
        if (serverCerts != null) {
          for (          X509Certificate cert : serverCerts)           sb.append("\n Server certificate Subject Name is " + cert.getSubjectX500Principal().getName());
        }
 else {
          sb.append("\n No server certificates were found");
        }
        LOG.debug(sb.toString());
      }
      if (connection.getResponseCode() != HttpServletResponse.SC_OK) {
        b.append("\n\t" + hostname + ": "+ connection.getResponseCode()+ " "+ connection.getResponseMessage());
        err++;
      }
    }
 catch (    IOException e) {
      b.append("\n\t" + hostname + ": "+ e.getLocalizedMessage());
      if (LOG.isDebugEnabled())       LOG.debug("Exception happend for host " + hostname,e);
      err++;
    }
 finally {
      if (connection != null)       connection.disconnect();
    }
  }
  if (err > 0) {
    System.err.print("Command failed on the following " + err + " host"+ (err == 1 ? ":" : "s:")+ b.toString()+ "\n");
    return false;
  }
  return true;
}
