{
  this.schemePrefix=schemePrefix;
  if (app != null) {
    String trackingUrl=app.getTrackingUrl();
    this.state=app.createApplicationState();
    this.trackingUrlIsNotReady=trackingUrl == null || trackingUrl.isEmpty() || YarnApplicationState.NEW == this.state || YarnApplicationState.NEW_SAVING == this.state || YarnApplicationState.SUBMITTED == this.state || YarnApplicationState.ACCEPTED == this.state;
    this.trackingUI=this.trackingUrlIsNotReady ? "UNASSIGNED" : (app.getFinishTime() == 0 ? "ApplicationMaster" : "History");
    if (!trackingUrlIsNotReady) {
      this.trackingUrl=WebAppUtils.getURLWithScheme(schemePrefix,trackingUrl);
      this.trackingUrlPretty=this.trackingUrl;
    }
 else {
      this.trackingUrlPretty="UNASSIGNED";
    }
    this.applicationId=app.getApplicationId();
    this.applicationType=app.getApplicationType();
    this.appIdNum=String.valueOf(app.getApplicationId().getId());
    this.id=app.getApplicationId().toString();
    this.user=app.getUser().toString();
    this.name=app.getName().toString();
    this.queue=app.getQueue().toString();
    this.priority=0;
    ApplicationSubmissionContext appSubmissionContext=app.getApplicationSubmissionContext();
    if (appSubmissionContext.getPriority() != null) {
      this.priority=appSubmissionContext.getPriority().getPriority();
    }
    this.progress=app.getProgress() * 100;
    this.diagnostics=app.getDiagnostics().toString();
    if (diagnostics == null || diagnostics.isEmpty()) {
      this.diagnostics="";
    }
    if (app.getApplicationTags() != null && !app.getApplicationTags().isEmpty()) {
      this.applicationTags=Joiner.on(',').join(app.getApplicationTags());
    }
    this.finalStatus=app.getFinalApplicationStatus();
    this.clusterId=ResourceManager.getClusterTimeStamp();
    if (hasAccess) {
      this.startedTime=app.getStartTime();
      this.finishedTime=app.getFinishTime();
      this.elapsedTime=Times.elapsed(app.getStartTime(),app.getFinishTime());
      this.logAggregationStatus=app.getLogAggregationStatusForAppReport();
      RMAppAttempt attempt=app.getCurrentAppAttempt();
      if (attempt != null) {
        Container masterContainer=attempt.getMasterContainer();
        if (masterContainer != null) {
          this.amContainerLogsExist=true;
          this.amContainerLogs=WebAppUtils.getRunningLogURL(schemePrefix + masterContainer.getNodeHttpAddress(),ConverterUtils.toString(masterContainer.getId()),app.getUser());
          this.amHostHttpAddress=masterContainer.getNodeHttpAddress();
        }
        ApplicationResourceUsageReport resourceReport=attempt.getApplicationResourceUsageReport();
        if (resourceReport != null) {
          Resource usedResources=resourceReport.getUsedResources();
          allocatedMB=usedResources.getMemory();
          allocatedVCores=usedResources.getVirtualCores();
          runningContainers=resourceReport.getNumUsedContainers();
        }
        resourceRequests=((AbstractYarnScheduler)rm.getRMContext().getScheduler()).getPendingResourceRequestsForAttempt(attempt.getAppAttemptId());
      }
    }
    RMAppMetrics appMetrics=app.getRMAppMetrics();
    numAMContainerPreempted=appMetrics.getNumAMContainersPreempted();
    preemptedResourceMB=appMetrics.getResourcePreempted().getMemory();
    numNonAMContainerPreempted=appMetrics.getNumNonAMContainersPreempted();
    preemptedResourceVCores=appMetrics.getResourcePreempted().getVirtualCores();
    memorySeconds=appMetrics.getMemorySeconds();
    vcoreSeconds=appMetrics.getVcoreSeconds();
    unmanagedApplication=appSubmissionContext.getUnmanagedAM();
    appNodeLabelExpression=app.getApplicationSubmissionContext().getNodeLabelExpression();
    amNodeLabelExpression=(unmanagedApplication) ? null : app.getAMResourceRequest().getNodeLabelExpression();
  }
}
