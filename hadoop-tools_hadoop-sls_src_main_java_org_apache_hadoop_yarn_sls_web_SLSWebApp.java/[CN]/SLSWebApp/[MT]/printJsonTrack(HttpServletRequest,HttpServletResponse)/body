{
  response.setContentType("text/json");
  response.setStatus(HttpServletResponse.SC_OK);
  StringBuilder sb=new StringBuilder();
  if (schedulerMetrics instanceof FairSchedulerMetrics) {
    String para=request.getParameter("t");
    if (para.startsWith("Job ")) {
      String appId=para.substring("Job ".length());
      sb.append("{");
      sb.append("\"time\": ").append(System.currentTimeMillis()).append(",");
      sb.append("\"appId\": \"").append(appId).append("\"");
      for (      String metric : this.schedulerMetrics.getAppTrackedMetrics()) {
        String key="variable.app." + appId + "."+ metric;
        sb.append(",\"").append(metric).append("\": ");
        if (metrics.getGauges().containsKey(key)) {
          double memoryGB=Double.parseDouble(metrics.getGauges().get(key).getValue().toString()) / 1024;
          sb.append(memoryGB);
        }
 else {
          sb.append(-1);
        }
      }
      sb.append("}");
    }
 else     if (para.startsWith("Queue ")) {
      String queueName=para.substring("Queue ".length());
      sb.append("{");
      sb.append("\"time\": ").append(System.currentTimeMillis()).append(",");
      sb.append("\"queueName\": \"").append(queueName).append("\"");
      for (      String metric : this.schedulerMetrics.getQueueTrackedMetrics()) {
        String key="variable.queue." + queueName + "."+ metric;
        sb.append(",\"").append(metric).append("\": ");
        if (metrics.getGauges().containsKey(key)) {
          double memoryGB=Double.parseDouble(metrics.getGauges().get(key).getValue().toString()) / 1024;
          sb.append(memoryGB);
        }
 else {
          sb.append(-1);
        }
      }
      sb.append("}");
    }
  }
  String output=sb.toString();
  if (output.isEmpty()) {
    output="[]";
  }
  response.getWriter().println(output);
  ((Request)request).setHandled(true);
}
