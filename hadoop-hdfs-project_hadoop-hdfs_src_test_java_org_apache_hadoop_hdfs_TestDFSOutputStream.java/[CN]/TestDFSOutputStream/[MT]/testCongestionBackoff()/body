{
  DfsClientConf dfsClientConf=mock(DfsClientConf.class);
  DFSClient client=mock(DFSClient.class);
  when(client.getConf()).thenReturn(dfsClientConf);
  client.clientRunning=true;
  DataStreamer stream=new DataStreamer(mock(HdfsFileStatus.class),mock(ExtendedBlock.class),client,"foo",null,null,null,null,null);
  DataOutputStream blockStream=mock(DataOutputStream.class);
  doThrow(new IOException()).when(blockStream).flush();
  Whitebox.setInternalState(stream,"blockStream",blockStream);
  Whitebox.setInternalState(stream,"stage",BlockConstructionStage.PIPELINE_CLOSE);
  @SuppressWarnings("unchecked") LinkedList<DFSPacket> dataQueue=(LinkedList<DFSPacket>)Whitebox.getInternalState(stream,"dataQueue");
  @SuppressWarnings("unchecked") ArrayList<DatanodeInfo> congestedNodes=(ArrayList<DatanodeInfo>)Whitebox.getInternalState(stream,"congestedNodes");
  congestedNodes.add(mock(DatanodeInfo.class));
  DFSPacket packet=mock(DFSPacket.class);
  when(packet.getTraceParents()).thenReturn(new long[]{});
  dataQueue.add(packet);
  stream.run();
  Assert.assertTrue(congestedNodes.isEmpty());
}
