{
  DistributedFileSystem fs=cluster.getFileSystem();
  EnumSet<CreateFlag> flags=EnumSet.of(CreateFlag.NO_LOCAL_WRITE,CreateFlag.CREATE);
  BlockManager bm=cluster.getNameNode().getNamesystem().getBlockManager();
  DatanodeManager dm=bm.getDatanodeManager();
  try (FSDataOutputStream os=fs.create(new Path("/test-no-local"),FsPermission.getDefault(),flags,512,(short)2,512,null)){
    DatanodeManager spyDm=spy(dm);
    DatanodeDescriptor dn1=dm.getDatanodeListForReport(HdfsConstants.DatanodeReportType.LIVE).get(0);
    doReturn(dn1).when(spyDm).getDatanodeByHost("127.0.0.1");
    Whitebox.setInternalState(bm,"datanodeManager",spyDm);
    byte[] buf=new byte[512 * 16];
    new Random().nextBytes(buf);
    os.write(buf);
  }
  finally {
    Whitebox.setInternalState(bm,"datanodeManager",dm);
  }
  cluster.triggerBlockReports();
  final String bpid=cluster.getNamesystem().getBlockPoolId();
  assertEquals(3,cluster.getAllBlockReports(bpid).size());
  int numDataNodesWithData=0;
  for (  Map<DatanodeStorage,BlockListAsLongs> dnBlocks : cluster.getAllBlockReports(bpid)) {
    for (    BlockListAsLongs blocks : dnBlocks.values()) {
      if (blocks.getNumberOfBlocks() > 0) {
        numDataNodesWithData++;
        break;
      }
    }
  }
  assertEquals(1,3 - numDataNodesWithData);
}
