{
  final AccessTokenProvider inst0=mock(AccessTokenProvider.class);
  when(inst0.getConf()).thenReturn(conf);
  CachedRefreshTokenBasedAccessTokenProvider t1=new MockProvider(inst0);
  t1.setConf(conf);
  verify(inst0).setConf(any(Configuration.class));
  CachedRefreshTokenBasedAccessTokenProvider t2=new CachedRefreshTokenBasedAccessTokenProvider(){
    @Override AccessTokenProvider newInstance(){
      fail("Failed to return cached instance");
      return null;
    }
  }
;
  t2.setConf(conf);
  conf.setBoolean(CachedRefreshTokenBasedAccessTokenProvider.FORCE_REFRESH,true);
  final AccessTokenProvider inst1=mock(AccessTokenProvider.class);
  when(inst1.getConf()).thenReturn(conf);
  CachedRefreshTokenBasedAccessTokenProvider t3=new MockProvider(inst1);
  t3.setConf(conf);
  verify(inst1).setConf(any(Configuration.class));
  conf.set(OAUTH_REFRESH_URL_KEY,"http://yak.invalid:80");
  final AccessTokenProvider inst2=mock(AccessTokenProvider.class);
  when(inst2.getConf()).thenReturn(conf);
  CachedRefreshTokenBasedAccessTokenProvider t4=new MockProvider(inst2);
  t4.setConf(conf);
  verify(inst2).setConf(any(Configuration.class));
}
