{
  final int iter=CachedRefreshTokenBasedAccessTokenProvider.MAX_PROVIDERS;
  for (int i=0; i < iter; ++i) {
    conf.set(OAUTH_CLIENT_ID_KEY,clientId(i));
    AccessTokenProvider inst=mock(AccessTokenProvider.class);
    when(inst.getConf()).thenReturn(conf);
    CachedRefreshTokenBasedAccessTokenProvider t=new MockProvider(inst);
    t.setConf(conf);
    verify(inst).setConf(any(Configuration.class));
  }
  for (int i=0; i < iter; ++i) {
    conf.set(OAUTH_CLIENT_ID_KEY,clientId(i));
    CachedRefreshTokenBasedAccessTokenProvider t=new CachedRefreshTokenBasedAccessTokenProvider(){
      @Override AccessTokenProvider newInstance(){
        fail("Failed to return cached instance");
        return null;
      }
    }
;
    t.setConf(conf);
  }
  conf.set(OAUTH_CLIENT_ID_KEY,clientId(iter));
  final AccessTokenProvider inst=mock(AccessTokenProvider.class);
  when(inst.getConf()).thenReturn(conf);
  CachedRefreshTokenBasedAccessTokenProvider t=new MockProvider(inst);
  t.setConf(conf);
  verify(inst).setConf(any(Configuration.class));
  conf.set(OAUTH_CLIENT_ID_KEY,clientId(0));
  final AccessTokenProvider inst0=mock(AccessTokenProvider.class);
  when(inst0.getConf()).thenReturn(conf);
  CachedRefreshTokenBasedAccessTokenProvider t0=new MockProvider(inst0);
  t0.setConf(conf);
  verify(inst0).setConf(any(Configuration.class));
}
