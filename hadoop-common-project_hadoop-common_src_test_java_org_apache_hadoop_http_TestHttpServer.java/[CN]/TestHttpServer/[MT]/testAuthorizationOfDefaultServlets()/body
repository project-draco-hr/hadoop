{
  Configuration conf=new Configuration();
  conf.setBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION,true);
  conf.setBoolean(CommonConfigurationKeys.HADOOP_SECURITY_INSTRUMENTATION_REQUIRES_ADMIN,true);
  conf.set(HttpServer.FILTER_INITIALIZER_PROPERTY,DummyFilterInitializer.class.getName());
  conf.set(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,MyGroupsProvider.class.getName());
  Groups.getUserToGroupsMappingService(conf);
  MyGroupsProvider.clearMapping();
  MyGroupsProvider.mapping.put("userA",Arrays.asList("groupA"));
  MyGroupsProvider.mapping.put("userB",Arrays.asList("groupB"));
  MyGroupsProvider.mapping.put("userC",Arrays.asList("groupC"));
  MyGroupsProvider.mapping.put("userD",Arrays.asList("groupD"));
  MyGroupsProvider.mapping.put("userE",Arrays.asList("groupE"));
  HttpServer myServer=new HttpServer("test","0.0.0.0",0,true,conf,new AccessControlList("userA,userB groupC,groupD"));
  myServer.setAttribute(HttpServer.CONF_CONTEXT_ATTRIBUTE,conf);
  myServer.start();
  int port=myServer.getPort();
  String serverURL="http://localhost:" + port + "/";
  for (  String servlet : new String[]{"conf","logs","stacks","logLevel","metrics"}) {
    for (    String user : new String[]{"userA","userB","userC","userD"}) {
      assertEquals(HttpURLConnection.HTTP_OK,getHttpStatusCode(serverURL + servlet,user));
    }
    assertEquals(HttpURLConnection.HTTP_UNAUTHORIZED,getHttpStatusCode(serverURL + servlet,"userE"));
  }
  myServer.stop();
}
