{
  Path reduceFile=new Path(READ_DIR,"part-00000");
  DataInputStream in;
  in=new DataInputStream(fs.open(reduceFile));
  BufferedReader lines;
  lines=new BufferedReader(new InputStreamReader(in));
  long blocks=0;
  long size=0;
  long time=0;
  float rate=0;
  StringTokenizer badBlocks=null;
  long nrBadBlocks=0;
  String line;
  while ((line=lines.readLine()) != null) {
    StringTokenizer tokens=new StringTokenizer(line," \t\n\r\f%");
    String attr=tokens.nextToken();
    if (attr.endsWith("blocks"))     blocks=Long.parseLong(tokens.nextToken());
 else     if (attr.endsWith("size"))     size=Long.parseLong(tokens.nextToken());
 else     if (attr.endsWith("time"))     time=Long.parseLong(tokens.nextToken());
 else     if (attr.endsWith("rate"))     rate=Float.parseFloat(tokens.nextToken());
 else     if (attr.endsWith("badBlocks")) {
      badBlocks=new StringTokenizer(tokens.nextToken(),";");
      nrBadBlocks=badBlocks.countTokens();
    }
  }
  Vector<String> resultLines=new Vector<String>();
  resultLines.add("----- DistributedFSCheck ----- : ");
  resultLines.add("               Date & time: " + new Date(System.currentTimeMillis()));
  resultLines.add("    Total number of blocks: " + blocks);
  resultLines.add("    Total number of  files: " + nrFiles);
  resultLines.add("Number of corrupted blocks: " + nrBadBlocks);
  int nrBadFilesPos=resultLines.size();
  TreeSet<String> badFiles=new TreeSet<String>();
  long nrBadFiles=0;
  if (nrBadBlocks > 0) {
    resultLines.add("");
    resultLines.add("----- Corrupted Blocks (file@offset) ----- : ");
    while (badBlocks.hasMoreTokens()) {
      String curBlock=badBlocks.nextToken();
      resultLines.add(curBlock);
      badFiles.add(curBlock.substring(0,curBlock.indexOf('@')));
    }
    nrBadFiles=badFiles.size();
  }
  resultLines.insertElementAt(" Number of corrupted files: " + nrBadFiles,nrBadFilesPos);
  if (viewStats) {
    resultLines.add("");
    resultLines.add("-----   Performance  ----- : ");
    resultLines.add("         Total MBytes read: " + size / MEGA);
    resultLines.add("         Throughput mb/sec: " + (float)size * 1000.0 / (time * MEGA));
    resultLines.add("    Average IO rate mb/sec: " + rate / 1000 / blocks);
    resultLines.add("        Test exec time sec: " + (float)execTime / 1000);
  }
  PrintStream res=new PrintStream(new FileOutputStream(new File(resFileName),true));
  for (int i=0; i < resultLines.size(); i++) {
    String cur=resultLines.get(i);
    LOG.info(cur);
    res.println(cur);
  }
}
