{
  conf.setLong(DFSConfigKeys.DFS_DATANODE_BALANCE_BANDWIDTHPERSEC_KEY,DEFAULT_BANDWIDTH);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_OF_DATANODES).build();
  try {
    cluster.waitActive();
    DistributedFileSystem fs=cluster.getFileSystem();
    ArrayList<DataNode> datanodes=cluster.getDataNodes();
    assertEquals(DEFAULT_BANDWIDTH,(long)datanodes.get(0).getBalancerBandwidth());
    assertEquals(DEFAULT_BANDWIDTH,(long)datanodes.get(1).getBalancerBandwidth());
    ClientDatanodeProtocol dn1Proxy=DFSUtilClient.createClientDatanodeProtocolProxy(datanodes.get(0).getDatanodeId(),conf,60000,false);
    ClientDatanodeProtocol dn2Proxy=DFSUtilClient.createClientDatanodeProtocolProxy(datanodes.get(1).getDatanodeId(),conf,60000,false);
    DFSAdmin admin=new DFSAdmin(conf);
    String dn1Address=datanodes.get(0).ipcServer.getListenerAddress().getHostName() + ":" + datanodes.get(0).getIpcPort();
    String dn2Address=datanodes.get(1).ipcServer.getListenerAddress().getHostName() + ":" + datanodes.get(1).getIpcPort();
    String[] args=new String[]{"-getBalancerBandwidth",dn1Address};
    runGetBalancerBandwidthCmd(admin,args,dn1Proxy,DEFAULT_BANDWIDTH);
    args=new String[]{"-getBalancerBandwidth",dn2Address};
    runGetBalancerBandwidthCmd(admin,args,dn2Proxy,DEFAULT_BANDWIDTH);
    long newBandwidth=12 * DEFAULT_BANDWIDTH;
    fs.setBalancerBandwidth(newBandwidth);
    try {
      Thread.sleep(5000);
    }
 catch (    Exception e) {
    }
    assertEquals(newBandwidth,(long)datanodes.get(0).getBalancerBandwidth());
    assertEquals(newBandwidth,(long)datanodes.get(1).getBalancerBandwidth());
    args=new String[]{"-getBalancerBandwidth",dn1Address};
    runGetBalancerBandwidthCmd(admin,args,dn1Proxy,newBandwidth);
    args=new String[]{"-getBalancerBandwidth",dn2Address};
    runGetBalancerBandwidthCmd(admin,args,dn2Proxy,newBandwidth);
    fs.setBalancerBandwidth(0);
    try {
      Thread.sleep(5000);
    }
 catch (    Exception e) {
    }
    assertEquals(newBandwidth,(long)datanodes.get(0).getBalancerBandwidth());
    assertEquals(newBandwidth,(long)datanodes.get(1).getBalancerBandwidth());
    args=new String[]{"-getBalancerBandwidth",dn1Address};
    runGetBalancerBandwidthCmd(admin,args,dn1Proxy,newBandwidth);
    args=new String[]{"-getBalancerBandwidth",dn2Address};
    runGetBalancerBandwidthCmd(admin,args,dn2Proxy,newBandwidth);
  }
  finally {
    cluster.shutdown();
  }
}
