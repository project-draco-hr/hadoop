{
  if (LOG.isDebugEnabled()) {
    LOG.debug("updatePipeline(newGS=" + newGS + "), "+ this);
  }
  return new ConcurrentPoll<ExtendedBlock>(coordinator.getUpdateBlocks()){
    @Override void populate() throws IOException {
      final MultipleBlockingQueue<LocatedBlock> followingBlocks=coordinator.getFollowingBlocks();
      final ExtendedBlock bg=coordinator.getBlockGroup();
      final ExtendedBlock newBG=newBlock(bg,newGS);
      final int n=NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS;
      final DatanodeInfo[] newNodes=new DatanodeInfo[n];
      final String[] newStorageIDs=new String[n];
      for (int i=0; i < n; i++) {
        final StripedDataStreamer si=coordinator.getStripedDataStreamer(i);
        DatanodeInfo[] nodes=si.getNodes();
        String[] storageIDs=si.getStorageIDs();
        if (nodes == null || storageIDs == null) {
synchronized (followingBlocks) {
            final LocatedBlock lb=followingBlocks.peek(i);
            if (lb != null) {
              nodes=lb.getLocations();
              storageIDs=lb.getStorageIDs();
            }
          }
        }
        if (nodes != null && storageIDs != null) {
          newNodes[i]=nodes[0];
          newStorageIDs[i]=storageIDs[0];
        }
 else {
          sleep(100,"updatePipeline, " + this);
          i--;
        }
      }
      final ExtendedBlock updated=callUpdatePipeline(bg,newBG,newNodes,newStorageIDs);
      for (int i=0; i < n; i++) {
        final StripedDataStreamer si=coordinator.getStripedDataStreamer(i);
        final ExtendedBlock bi=si.getBlock();
        if (bi != null) {
          queue.offer(i,newBlock(bi,updated.getGenerationStamp()));
        }
 else         if (!si.isFailed()) {
synchronized (followingBlocks) {
            final LocatedBlock lb=followingBlocks.peek(i);
            if (lb != null) {
              lb.getBlock().setGenerationStamp(newGS);
              si.getErrorState().reset();
              continue;
            }
          }
          sleep(100,"updatePipeline, " + this);
          i--;
        }
      }
    }
  }
.poll(index);
}
