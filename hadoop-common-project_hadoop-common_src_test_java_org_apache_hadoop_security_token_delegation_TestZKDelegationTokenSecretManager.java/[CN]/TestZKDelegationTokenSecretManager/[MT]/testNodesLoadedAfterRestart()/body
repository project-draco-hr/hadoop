{
  final String connectString=zkServer.getConnectString();
  final Configuration conf=getSecretConf(connectString);
  final int removeScan=1;
  conf.setLong(DelegationTokenManager.REMOVAL_SCAN_INTERVAL,removeScan);
  conf.setLong(DelegationTokenManager.UPDATE_INTERVAL,5);
  conf.setLong(DelegationTokenManager.RENEW_INTERVAL,5);
  DelegationTokenManager tm=new DelegationTokenManager(conf,new Text("bla"));
  tm.init();
  Token<DelegationTokenIdentifier> token=(Token<DelegationTokenIdentifier>)tm.createToken(UserGroupInformation.getCurrentUser(),"good");
  Assert.assertNotNull(token);
  Token<DelegationTokenIdentifier> cancelled=(Token<DelegationTokenIdentifier>)tm.createToken(UserGroupInformation.getCurrentUser(),"cancelled");
  Assert.assertNotNull(cancelled);
  tm.verifyToken(token);
  tm.verifyToken(cancelled);
  tm.cancelToken(cancelled,"cancelled");
  final AbstractDelegationTokenSecretManager sm=tm.getDelegationTokenSecretManager();
  final ZKDelegationTokenSecretManager zksm=(ZKDelegationTokenSecretManager)sm;
  final AbstractDelegationTokenIdentifier idCancelled=sm.decodeTokenIdentifier(cancelled);
  LOG.info("Waiting for the cancelled token to be removed");
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      AbstractDelegationTokenSecretManager.DelegationTokenInformation dtinfo=zksm.getTokenInfo(idCancelled);
      return dtinfo == null;
    }
  }
,100,5000);
  tm.destroy();
  tm=new DelegationTokenManager(conf,new Text("bla"));
  tm.init();
  final AbstractDelegationTokenSecretManager smNew=tm.getDelegationTokenSecretManager();
  final ZKDelegationTokenSecretManager zksmNew=(ZKDelegationTokenSecretManager)smNew;
  AbstractDelegationTokenIdentifier id=smNew.decodeTokenIdentifier(cancelled);
  AbstractDelegationTokenSecretManager.DelegationTokenInformation dtinfo=zksmNew.getTokenInfo(id);
  Assert.assertNull("canceled dt should be gone!",dtinfo);
  id=smNew.decodeTokenIdentifier(token);
  dtinfo=zksmNew.getTokenInfoFromMemory(id);
  Assert.assertNotNull("good dt should be in memory!",dtinfo);
  Thread.sleep(5000);
  final ZKDelegationTokenSecretManager zksm1=zksmNew;
  final AbstractDelegationTokenIdentifier id1=id;
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      LOG.info("Waiting for the expired token to be removed...");
      return zksm1.getTokenInfo(id1) == null;
    }
  }
,1000,5000);
}
