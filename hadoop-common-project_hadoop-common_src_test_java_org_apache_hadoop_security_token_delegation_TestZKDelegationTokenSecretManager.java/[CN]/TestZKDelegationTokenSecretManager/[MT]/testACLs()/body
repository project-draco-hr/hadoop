{
  DelegationTokenManager tm1;
  String connectString=zkServer.getConnectString();
  Configuration conf=getSecretConf(connectString);
  RetryPolicy retryPolicy=new ExponentialBackoffRetry(1000,3);
  String userPass="myuser:mypass";
  final ACL digestACL=new ACL(ZooDefs.Perms.ALL,new Id("digest",DigestAuthenticationProvider.generateDigest(userPass)));
  ACLProvider digestAclProvider=new ACLProvider(){
    @Override public List<ACL> getAclForPath(    String path){
      return getDefaultAcl();
    }
    @Override public List<ACL> getDefaultAcl(){
      List<ACL> ret=new ArrayList<ACL>();
      ret.add(digestACL);
      return ret;
    }
  }
;
  CuratorFramework curatorFramework=CuratorFrameworkFactory.builder().connectString(connectString).retryPolicy(retryPolicy).aclProvider(digestAclProvider).authorization("digest",userPass.getBytes("UTF-8")).build();
  curatorFramework.start();
  ZKDelegationTokenSecretManager.setCurator(curatorFramework);
  tm1=new DelegationTokenManager(conf,new Text("bla"));
  tm1.init();
  String workingPath=conf.get(ZKDelegationTokenSecretManager.ZK_DTSM_ZNODE_WORKING_PATH);
  verifyACL(curatorFramework,"/" + workingPath,digestACL);
  tm1.destroy();
  ZKDelegationTokenSecretManager.setCurator(null);
  curatorFramework.close();
}
