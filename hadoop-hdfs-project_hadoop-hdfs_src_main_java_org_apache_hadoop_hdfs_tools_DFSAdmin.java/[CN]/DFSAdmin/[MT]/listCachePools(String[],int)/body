{
  List<String> args=new LinkedList<String>();
  for (int i=idx; i < argsArray.length; i++) {
    args.add(argsArray[i]);
  }
  String name=StringUtils.popFirstNonOption(args);
  if (!args.isEmpty()) {
    System.err.print("Can't understand arguments: " + Joiner.on(" ").join(args) + "\n");
    System.err.println("usage is " + LIST_CACHE_POOLS_USAGE);
    return 1;
  }
  DistributedFileSystem dfs=getDFS();
  TableListing listing=new TableListing.Builder().addField("NAME",Justification.LEFT).addField("OWNER",Justification.LEFT).addField("GROUP",Justification.LEFT).addField("MODE",Justification.LEFT).addField("WEIGHT",Justification.RIGHT).build();
  int numResults=0;
  try {
    RemoteIterator<CachePoolInfo> iter=dfs.listCachePools();
    while (iter.hasNext()) {
      CachePoolInfo info=iter.next();
      if (name == null || info.getPoolName().equals(name)) {
        listing.addRow(new String[]{info.getPoolName(),info.getOwnerName(),info.getGroupName(),info.getMode().toString(),info.getWeight().toString()});
        ++numResults;
        if (name != null) {
          break;
        }
      }
    }
  }
 catch (  IOException e) {
    throw new RemoteException(e.getClass().getName(),e.getMessage());
  }
  System.out.print(String.format("Found %d result%s.\n",numResults,(numResults == 1 ? "" : "s")));
  if (numResults > 0) {
    System.out.print(listing.build());
  }
  return (numResults == 0) ? 1 : 0;
}
