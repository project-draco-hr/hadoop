{
  List<String> args=new LinkedList<String>();
  for (int i=idx; i < argsArray.length; i++) {
    args.add(argsArray[i]);
  }
  String name=StringUtils.popFirstNonOption(args);
  if (!args.isEmpty()) {
    System.err.print("Can't understand arguments: " + Joiner.on(" ").join(args) + "\n");
    System.err.println("usage is " + LIST_CACHE_POOLS_USAGE);
    return 1;
  }
  boolean gotResults=false;
  DistributedFileSystem dfs=getDFS();
  try {
    RemoteIterator<CachePoolInfo> iter=dfs.listCachePools();
    if (name != null) {
      while (iter.hasNext()) {
        CachePoolInfo info=iter.next();
        if (info.getPoolName().equals(name)) {
          listCachePool(info);
          gotResults=true;
          return 0;
        }
      }
    }
 else {
      while (iter.hasNext()) {
        listCachePool(iter.next());
        gotResults=true;
      }
    }
  }
 catch (  IOException e) {
    throw new RemoteException(e.getClass().getName(),e.getMessage());
  }
  int ret=0;
  if (!gotResults) {
    if (name != null) {
      System.out.println("No cache pool named " + name + " found.");
      ret=1;
    }
 else {
      System.out.println("No cache pools found.");
      ret=1;
    }
  }
  return ret;
}
