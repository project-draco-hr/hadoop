{
  String summary="hdfs dfsadmin performs DFS administrative commands.\n" + "Note: Administrative commands can only be run with superuser permission.\n" + "The full syntax is: \n\n"+ "hdfs dfsadmin\n"+ commonUsageSummary;
  String report="-report [-live] [-dead] [-decommissioning]:\n" + "\tReports basic filesystem information and statistics. \n" + "\tThe dfs usage can be different from \"du\" usage, because it\n"+ "\tmeasures raw space used by replication, checksums, snapshots\n"+ "\tand etc. on all the DNs.\n"+ "\tOptional flags may be used to filter the list of displayed DNs.\n";
  String safemode="-safemode <enter|leave|get|wait>:  Safe mode maintenance command.\n" + "\t\tSafe mode is a Namenode state in which it\n" + "\t\t\t1.  does not accept changes to the name space (read-only)\n"+ "\t\t\t2.  does not replicate or delete blocks.\n"+ "\t\tSafe mode is entered automatically at Namenode startup, and\n"+ "\t\tleaves safe mode automatically when the configured minimum\n"+ "\t\tpercentage of blocks satisfies the minimum replication\n"+ "\t\tcondition.  Safe mode can also be entered manually, but then\n"+ "\t\tit can only be turned off manually as well.\n";
  String saveNamespace="-saveNamespace [-beforeShutdown]:\t" + "Save current namespace into storage directories and reset edits \n" + "\t\t log. Requires safe mode.\n"+ "\t\tIf the \"beforeShutdown\" option is given, the NameNode does a \n"+ "\t\tcheckpoint if and only if there is no checkpoint done during \n"+ "\t\ta time window (a configurable number of checkpoint periods).\n"+ "\t\tThis is usually used before shutting down the NameNode to \n"+ "\t\tprevent potential fsimage/editlog corruption.\n";
  String rollEdits="-rollEdits:\t" + "Rolls the edit log.\n";
  String restoreFailedStorage="-restoreFailedStorage:\t" + "Set/Unset/Check flag to attempt restore of failed storage replicas if they become available.\n";
  String refreshNodes="-refreshNodes: \tUpdates the namenode with the " + "set of datanodes allowed to connect to the namenode.\n\n" + "\t\tNamenode re-reads datanode hostnames from the file defined by \n"+ "\t\tdfs.hosts, dfs.hosts.exclude configuration parameters.\n"+ "\t\tHosts defined in dfs.hosts are the datanodes that are part of \n"+ "\t\tthe cluster. If there are entries in dfs.hosts, only the hosts \n"+ "\t\tin it are allowed to register with the namenode.\n\n"+ "\t\tEntries in dfs.hosts.exclude are datanodes that need to be \n"+ "\t\tdecommissioned. Datanodes complete decommissioning when \n"+ "\t\tall the replicas from them are replicated to other datanodes.\n"+ "\t\tDecommissioned nodes are not automatically shutdown and \n"+ "\t\tare not chosen for writing new replicas.\n";
  String finalizeUpgrade="-finalizeUpgrade: Finalize upgrade of HDFS.\n" + "\t\tDatanodes delete their previous version working directories,\n" + "\t\tfollowed by Namenode doing the same.\n"+ "\t\tThis completes the upgrade process.\n";
  String metaSave="-metasave <filename>: \tSave Namenode's primary data structures\n" + "\t\tto <filename> in the directory specified by hadoop.log.dir property.\n" + "\t\t<filename> is overwritten if it exists.\n"+ "\t\t<filename> will contain one line for each of the following\n"+ "\t\t\t1. Datanodes heart beating with Namenode\n"+ "\t\t\t2. Blocks waiting to be replicated\n"+ "\t\t\t3. Blocks currrently being replicated\n"+ "\t\t\t4. Blocks waiting to be deleted\n";
  String refreshServiceAcl="-refreshServiceAcl: Reload the service-level authorization policy file\n" + "\t\tNamenode will reload the authorization policy file.\n";
  String refreshUserToGroupsMappings="-refreshUserToGroupsMappings: Refresh user-to-groups mappings\n";
  String refreshSuperUserGroupsConfiguration="-refreshSuperUserGroupsConfiguration: Refresh superuser proxy groups mappings\n";
  String refreshCallQueue="-refreshCallQueue: Reload the call queue from config\n";
  String reconfig="-reconfig <datanode|...> <host:ipc_port> <start|status|properties>:\n" + "\tStarts or gets the status of a reconfiguration operation, \n" + "\tor gets a list of reconfigurable properties.\n"+ "\tThe second parameter specifies the node type.\n"+ "\tCurrently, only reloading DataNode's configuration is supported.\n";
  String genericRefresh="-refresh: Arguments are <hostname:port> <resource_identifier> [arg1..argn]\n" + "\tTriggers a runtime-refresh of the resource specified by <resource_identifier>\n" + "\ton <hostname:port>. All other args after are sent to the host.\n";
  String printTopology="-printTopology: Print a tree of the racks and their\n" + "\t\tnodes as reported by the Namenode\n";
  String refreshNamenodes="-refreshNamenodes: Takes a datanodehost:port as argument,\n" + "\t\tFor the given datanode, reloads the configuration files,\n" + "\t\tstops serving the removed block-pools\n"+ "\t\tand starts serving new block-pools\n";
  String deleteBlockPool="-deleteBlockPool: Arguments are datanodehost:port, blockpool id\n" + "\t\t and an optional argument \"force\". If force is passed,\n" + "\t\t block pool directory for the given blockpool id on the given\n"+ "\t\t datanode is deleted along with its contents, otherwise\n"+ "\t\t the directory is deleted only if it is empty. The command\n"+ "\t\t will fail if datanode is still serving the block pool.\n"+ "\t\t   Refer to refreshNamenodes to shutdown a block pool\n"+ "\t\t service on a datanode.\n";
  String setBalancerBandwidth="-setBalancerBandwidth <bandwidth>:\n" + "\tChanges the network bandwidth used by each datanode during\n" + "\tHDFS block balancing.\n\n"+ "\t\t<bandwidth> is the maximum number of bytes per second\n"+ "\t\tthat will be used by each datanode. This value overrides\n"+ "\t\tthe dfs.balance.bandwidthPerSec parameter.\n\n"+ "\t\t--- NOTE: The new value is not persistent on the DataNode.---\n";
  String fetchImage="-fetchImage <local directory>:\n" + "\tDownloads the most recent fsimage from the Name Node and saves it in" + "\tthe specified local directory.\n";
  String allowSnapshot="-allowSnapshot <snapshotDir>:\n" + "\tAllow snapshots to be taken on a directory.\n";
  String disallowSnapshot="-disallowSnapshot <snapshotDir>:\n" + "\tDo not allow snapshots to be taken on a directory any more.\n";
  String shutdownDatanode="-shutdownDatanode <datanode_host:ipc_port> [upgrade]\n" + "\tSubmit a shutdown request for the given datanode. If an optional\n" + "\t\"upgrade\" argument is specified, clients accessing the datanode\n"+ "\twill be advised to wait for it to restart and the fast start-up\n"+ "\tmode will be enabled. When the restart does not happen in time,\n"+ "\tclients will timeout and ignore the datanode. In such case, the\n"+ "\tfast start-up mode will also be disabled.\n";
  String getDatanodeInfo="-getDatanodeInfo <datanode_host:ipc_port>\n" + "\tGet the information about the given datanode. This command can\n" + "\tbe used for checking if a datanode is alive.\n";
  String triggerBlockReport="-triggerBlockReport [-incremental] <datanode_host:ipc_port>\n" + "\tTrigger a block report for the datanode.\n" + "\tIf 'incremental' is specified, it will be an incremental\n"+ "\tblock report; otherwise, it will be a full block report.\n";
  String help="-help [cmd]: \tDisplays help for the given command or all commands if none\n" + "\t\tis specified.\n";
  if ("report".equals(cmd)) {
    System.out.println(report);
  }
 else   if ("safemode".equals(cmd)) {
    System.out.println(safemode);
  }
 else   if ("saveNamespace".equals(cmd)) {
    System.out.println(saveNamespace);
  }
 else   if ("rollEdits".equals(cmd)) {
    System.out.println(rollEdits);
  }
 else   if ("restoreFailedStorage".equals(cmd)) {
    System.out.println(restoreFailedStorage);
  }
 else   if ("refreshNodes".equals(cmd)) {
    System.out.println(refreshNodes);
  }
 else   if ("finalizeUpgrade".equals(cmd)) {
    System.out.println(finalizeUpgrade);
  }
 else   if (RollingUpgradeCommand.matches("-" + cmd)) {
    System.out.println(RollingUpgradeCommand.DESCRIPTION);
  }
 else   if ("metasave".equals(cmd)) {
    System.out.println(metaSave);
  }
 else   if (SetQuotaCommand.matches("-" + cmd)) {
    System.out.println(SetQuotaCommand.DESCRIPTION);
  }
 else   if (ClearQuotaCommand.matches("-" + cmd)) {
    System.out.println(ClearQuotaCommand.DESCRIPTION);
  }
 else   if (SetSpaceQuotaCommand.matches("-" + cmd)) {
    System.out.println(SetSpaceQuotaCommand.DESCRIPTION);
  }
 else   if (ClearSpaceQuotaCommand.matches("-" + cmd)) {
    System.out.println(ClearSpaceQuotaCommand.DESCRIPTION);
  }
 else   if ("refreshServiceAcl".equals(cmd)) {
    System.out.println(refreshServiceAcl);
  }
 else   if ("refreshUserToGroupsMappings".equals(cmd)) {
    System.out.println(refreshUserToGroupsMappings);
  }
 else   if ("refreshSuperUserGroupsConfiguration".equals(cmd)) {
    System.out.println(refreshSuperUserGroupsConfiguration);
  }
 else   if ("refreshCallQueue".equals(cmd)) {
    System.out.println(refreshCallQueue);
  }
 else   if ("refresh".equals(cmd)) {
    System.out.println(genericRefresh);
  }
 else   if ("reconfig".equals(cmd)) {
    System.out.println(reconfig);
  }
 else   if ("printTopology".equals(cmd)) {
    System.out.println(printTopology);
  }
 else   if ("refreshNamenodes".equals(cmd)) {
    System.out.println(refreshNamenodes);
  }
 else   if ("deleteBlockPool".equals(cmd)) {
    System.out.println(deleteBlockPool);
  }
 else   if ("setBalancerBandwidth".equals(cmd)) {
    System.out.println(setBalancerBandwidth);
  }
 else   if ("fetchImage".equals(cmd)) {
    System.out.println(fetchImage);
  }
 else   if ("allowSnapshot".equalsIgnoreCase(cmd)) {
    System.out.println(allowSnapshot);
  }
 else   if ("disallowSnapshot".equalsIgnoreCase(cmd)) {
    System.out.println(disallowSnapshot);
  }
 else   if ("shutdownDatanode".equalsIgnoreCase(cmd)) {
    System.out.println(shutdownDatanode);
  }
 else   if ("getDatanodeInfo".equalsIgnoreCase(cmd)) {
    System.out.println(getDatanodeInfo);
  }
 else   if ("help".equals(cmd)) {
    System.out.println(help);
  }
 else {
    System.out.println(summary);
    System.out.println(report);
    System.out.println(safemode);
    System.out.println(saveNamespace);
    System.out.println(rollEdits);
    System.out.println(restoreFailedStorage);
    System.out.println(refreshNodes);
    System.out.println(finalizeUpgrade);
    System.out.println(RollingUpgradeCommand.DESCRIPTION);
    System.out.println(metaSave);
    System.out.println(SetQuotaCommand.DESCRIPTION);
    System.out.println(ClearQuotaCommand.DESCRIPTION);
    System.out.println(SetSpaceQuotaCommand.DESCRIPTION);
    System.out.println(ClearSpaceQuotaCommand.DESCRIPTION);
    System.out.println(refreshServiceAcl);
    System.out.println(refreshUserToGroupsMappings);
    System.out.println(refreshSuperUserGroupsConfiguration);
    System.out.println(refreshCallQueue);
    System.out.println(genericRefresh);
    System.out.println(reconfig);
    System.out.println(printTopology);
    System.out.println(refreshNamenodes);
    System.out.println(deleteBlockPool);
    System.out.println(setBalancerBandwidth);
    System.out.println(fetchImage);
    System.out.println(allowSnapshot);
    System.out.println(disallowSnapshot);
    System.out.println(shutdownDatanode);
    System.out.println(getDatanodeInfo);
    System.out.println(triggerBlockReport);
    System.out.println(help);
    System.out.println();
    ToolRunner.printGenericCommandUsage(System.out);
  }
}
