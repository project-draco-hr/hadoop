{
  String summary="hadoop dfsadmin is the command to execute DFS administrative commands.\n" + "The full syntax is: \n\n" + "hadoop dfsadmin [-report] [-safemode <enter | leave | get | wait>]\n"+ "\t[-saveNamespace]\n"+ "\t[-rollEdits]\n"+ "\t[-restoreFailedStorage true|false|check]\n"+ "\t[-refreshNodes]\n"+ "\t[" + SetQuotaCommand.USAGE + "]\n"+ "\t["+ ClearQuotaCommand.USAGE+ "]\n"+ "\t["+ SetSpaceQuotaCommand.USAGE+ "]\n"+ "\t["+ ClearSpaceQuotaCommand.USAGE+ "]\n"+ "\t[-refreshServiceAcl]\n"+ "\t[-refreshUserToGroupsMappings]\n"+ "\t[refreshSuperUserGroupsConfiguration]\n"+ "\t[-printTopology]\n"+ "\t[-refreshNamenodes datanodehost:port]\n"+ "\t[-deleteBlockPool datanodehost:port blockpoolId [force]]\n"+ "\t[-setBalancerBandwidth <bandwidth>]\n"+ "\t[-fetchImage <local directory>]\n"+ "\t[-allowSnapshot <snapshotDir>]\n"+ "\t[-disallowSnapshot <snapshotDir>]\n"+ "\t["+ ADD_CACHE_POOL_USAGE+ "]\n"+ "\t["+ MODIFY_CACHE_POOL_USAGE+ "]\n"+ "\t["+ REMOVE_CACHE_POOL_USAGE+ "]\n"+ "\t["+ LIST_CACHE_POOLS_USAGE+ "]\n"+ "\t[-help [cmd]]\n";
  String report="-report: \tReports basic filesystem information and statistics.\n";
  String safemode="-safemode <enter|leave|get|wait>:  Safe mode maintenance command.\n" + "\t\tSafe mode is a Namenode state in which it\n" + "\t\t\t1.  does not accept changes to the name space (read-only)\n"+ "\t\t\t2.  does not replicate or delete blocks.\n"+ "\t\tSafe mode is entered automatically at Namenode startup, and\n"+ "\t\tleaves safe mode automatically when the configured minimum\n"+ "\t\tpercentage of blocks satisfies the minimum replication\n"+ "\t\tcondition.  Safe mode can also be entered manually, but then\n"+ "\t\tit can only be turned off manually as well.\n";
  String saveNamespace="-saveNamespace:\t" + "Save current namespace into storage directories and reset edits log.\n" + "\t\tRequires superuser permissions and safe mode.\n";
  String rollEdits="-rollEdits:\t" + "Rolls the edit log.\n" + "\t\tRequires superuser permissions.\n";
  String restoreFailedStorage="-restoreFailedStorage:\t" + "Set/Unset/Check flag to attempt restore of failed storage replicas if they become available.\n" + "\t\tRequires superuser permissions.\n";
  String refreshNodes="-refreshNodes: \tUpdates the namenode with the " + "set of datanodes allowed to connect to the namenode.\n\n" + "\t\tNamenode re-reads datanode hostnames from the file defined by \n"+ "\t\tdfs.hosts, dfs.hosts.exclude configuration parameters.\n"+ "\t\tHosts defined in dfs.hosts are the datanodes that are part of \n"+ "\t\tthe cluster. If there are entries in dfs.hosts, only the hosts \n"+ "\t\tin it are allowed to register with the namenode.\n\n"+ "\t\tEntries in dfs.hosts.exclude are datanodes that need to be \n"+ "\t\tdecommissioned. Datanodes complete decommissioning when \n"+ "\t\tall the replicas from them are replicated to other datanodes.\n"+ "\t\tDecommissioned nodes are not automatically shutdown and \n"+ "\t\tare not chosen for writing new replicas.\n";
  String finalizeUpgrade="-finalizeUpgrade: Finalize upgrade of HDFS.\n" + "\t\tDatanodes delete their previous version working directories,\n" + "\t\tfollowed by Namenode doing the same.\n"+ "\t\tThis completes the upgrade process.\n";
  String metaSave="-metasave <filename>: \tSave Namenode's primary data structures\n" + "\t\tto <filename> in the directory specified by hadoop.log.dir property.\n" + "\t\t<filename> is overwritten if it exists.\n"+ "\t\t<filename> will contain one line for each of the following\n"+ "\t\t\t1. Datanodes heart beating with Namenode\n"+ "\t\t\t2. Blocks waiting to be replicated\n"+ "\t\t\t3. Blocks currrently being replicated\n"+ "\t\t\t4. Blocks waiting to be deleted\n";
  String refreshServiceAcl="-refreshServiceAcl: Reload the service-level authorization policy file\n" + "\t\tNamenode will reload the authorization policy file.\n";
  String refreshUserToGroupsMappings="-refreshUserToGroupsMappings: Refresh user-to-groups mappings\n";
  String refreshSuperUserGroupsConfiguration="-refreshSuperUserGroupsConfiguration: Refresh superuser proxy groups mappings\n";
  String printTopology="-printTopology: Print a tree of the racks and their\n" + "\t\tnodes as reported by the Namenode\n";
  String refreshNamenodes="-refreshNamenodes: Takes a datanodehost:port as argument,\n" + "\t\tFor the given datanode, reloads the configuration files,\n" + "\t\tstops serving the removed block-pools\n"+ "\t\tand starts serving new block-pools\n";
  String deleteBlockPool="-deleteBlockPool: Arguments are datanodehost:port, blockpool id\n" + "\t\t and an optional argument \"force\". If force is passed,\n" + "\t\t block pool directory for the given blockpool id on the given\n"+ "\t\t datanode is deleted along with its contents, otherwise\n"+ "\t\t the directory is deleted only if it is empty. The command\n"+ "\t\t will fail if datanode is still serving the block pool.\n"+ "\t\t   Refer to refreshNamenodes to shutdown a block pool\n"+ "\t\t service on a datanode.\n";
  String setBalancerBandwidth="-setBalancerBandwidth <bandwidth>:\n" + "\tChanges the network bandwidth used by each datanode during\n" + "\tHDFS block balancing.\n\n"+ "\t\t<bandwidth> is the maximum number of bytes per second\n"+ "\t\tthat will be used by each datanode. This value overrides\n"+ "\t\tthe dfs.balance.bandwidthPerSec parameter.\n\n"+ "\t\t--- NOTE: The new value is not persistent on the DataNode.---\n";
  String fetchImage="-fetchImage <local directory>:\n" + "\tDownloads the most recent fsimage from the Name Node and saves it in" + "\tthe specified local directory.\n";
  String allowSnapshot="-allowSnapshot <snapshotDir>:\n" + "\tAllow snapshots to be taken on a directory.\n";
  String disallowSnapshot="-disallowSnapshot <snapshotDir>:\n" + "\tDo not allow snapshots to be taken on a directory any more.\n";
  String addCachePool=ADD_CACHE_POOL_USAGE + ": \n" + "\tAdd a new cache pool.\n"+ "\t<name> is the name of the new pool.  It must not already be used.\n"+ "\t<owner> is the owner of the pool.  It defaults to the current\n"+ "\tuser name.\n"+ "\t<group> is the group of the pool.  It defaults to the primary\n"+ "\tgroup name of the current user.\n"+ "\t<mode> is the mode of the pool.  This is a UNIX-style numeric mode\n"+ "\targument, supplied as an octal number.  For example, mode 0755\n"+ "\tgrants the owner all permissions, and grants everyone else\n"+ "\tonly read and list permissions.\n"+ "\tThe mode defaults to "+ String.format("0%03o",FsPermission.getCachePoolDefault().toShort())+ "\n"+ "\t<weight> is the weight of the pool.  This determines what share \n"+ "\tof cluster resources the pool will get.  It defaults to "+ CachePool.DEFAULT_WEIGHT+ "\n";
  String modifyCachePool=MODIFY_CACHE_POOL_USAGE + ": \n" + "\tAdd a new cache pool with the given name.\n"+ "\t<name> is the name of the pool to modify.\n"+ "\t<owner> is the new owner of the pool.\n"+ "\t<group> is the new group of the pool.\n"+ "\t<mode> is the new mode of the pool.\n"+ "\t<weight> is the new weight of the pool.\n";
  String removeCachePool=REMOVE_CACHE_POOL_USAGE + ": \n" + "\tRemove a cache pool.\n"+ "\t<name> is the name of the pool to remove.\n";
  String listCachePools=" -listCachePools [-name <name>] [-verbose]\n" + "\tList cache pools.\n" + "\tIf <name> is specified, we will list only the cache pool with\n"+ "\tthat name.  If <verbose> is specified, we will list detailed\n"+ "\tinformation about each pool\n";
  String help="-help [cmd]: \tDisplays help for the given command or all commands if none\n" + "\t\tis specified.\n";
  if ("report".equals(cmd)) {
    System.out.println(report);
  }
 else   if ("safemode".equals(cmd)) {
    System.out.println(safemode);
  }
 else   if ("saveNamespace".equals(cmd)) {
    System.out.println(saveNamespace);
  }
 else   if ("rollEdits".equals(cmd)) {
    System.out.println(rollEdits);
  }
 else   if ("restoreFailedStorage".equals(cmd)) {
    System.out.println(restoreFailedStorage);
  }
 else   if ("refreshNodes".equals(cmd)) {
    System.out.println(refreshNodes);
  }
 else   if ("finalizeUpgrade".equals(cmd)) {
    System.out.println(finalizeUpgrade);
  }
 else   if ("metasave".equals(cmd)) {
    System.out.println(metaSave);
  }
 else   if (SetQuotaCommand.matches("-" + cmd)) {
    System.out.println(SetQuotaCommand.DESCRIPTION);
  }
 else   if (ClearQuotaCommand.matches("-" + cmd)) {
    System.out.println(ClearQuotaCommand.DESCRIPTION);
  }
 else   if (SetSpaceQuotaCommand.matches("-" + cmd)) {
    System.out.println(SetSpaceQuotaCommand.DESCRIPTION);
  }
 else   if (ClearSpaceQuotaCommand.matches("-" + cmd)) {
    System.out.println(ClearSpaceQuotaCommand.DESCRIPTION);
  }
 else   if ("refreshServiceAcl".equals(cmd)) {
    System.out.println(refreshServiceAcl);
  }
 else   if ("refreshUserToGroupsMappings".equals(cmd)) {
    System.out.println(refreshUserToGroupsMappings);
  }
 else   if ("refreshSuperUserGroupsConfiguration".equals(cmd)) {
    System.out.println(refreshSuperUserGroupsConfiguration);
  }
 else   if ("printTopology".equals(cmd)) {
    System.out.println(printTopology);
  }
 else   if ("refreshNamenodes".equals(cmd)) {
    System.out.println(refreshNamenodes);
  }
 else   if ("deleteBlockPool".equals(cmd)) {
    System.out.println(deleteBlockPool);
  }
 else   if ("setBalancerBandwidth".equals(cmd)) {
    System.out.println(setBalancerBandwidth);
  }
 else   if ("fetchImage".equals(cmd)) {
    System.out.println(fetchImage);
  }
 else   if ("allowSnapshot".equalsIgnoreCase(cmd)) {
    System.out.println(allowSnapshot);
  }
 else   if ("disallowSnapshot".equalsIgnoreCase(cmd)) {
    System.out.println(disallowSnapshot);
  }
 else   if ("addCachePool".equalsIgnoreCase(cmd)) {
    System.out.println(addCachePool);
  }
 else   if ("modifyCachePool".equalsIgnoreCase(cmd)) {
    System.out.println(modifyCachePool);
  }
 else   if ("removeCachePool".equalsIgnoreCase(cmd)) {
    System.out.println(removeCachePool);
  }
 else   if ("listCachePools".equalsIgnoreCase(cmd)) {
    System.out.println(listCachePools);
  }
 else   if ("help".equals(cmd)) {
    System.out.println(help);
  }
 else {
    System.out.println(summary);
    System.out.println(report);
    System.out.println(safemode);
    System.out.println(saveNamespace);
    System.out.println(rollEdits);
    System.out.println(restoreFailedStorage);
    System.out.println(refreshNodes);
    System.out.println(finalizeUpgrade);
    System.out.println(metaSave);
    System.out.println(SetQuotaCommand.DESCRIPTION);
    System.out.println(ClearQuotaCommand.DESCRIPTION);
    System.out.println(SetSpaceQuotaCommand.DESCRIPTION);
    System.out.println(ClearSpaceQuotaCommand.DESCRIPTION);
    System.out.println(refreshServiceAcl);
    System.out.println(refreshUserToGroupsMappings);
    System.out.println(refreshSuperUserGroupsConfiguration);
    System.out.println(printTopology);
    System.out.println(refreshNamenodes);
    System.out.println(deleteBlockPool);
    System.out.println(setBalancerBandwidth);
    System.out.println(fetchImage);
    System.out.println(allowSnapshot);
    System.out.println(disallowSnapshot);
    System.out.println(addCachePool);
    System.out.println(modifyCachePool);
    System.out.println(removeCachePool);
    System.out.println(listCachePools);
    System.out.println(disallowSnapshot);
    System.out.println(help);
    System.out.println();
    ToolRunner.printGenericCommandUsage(System.out);
  }
}
