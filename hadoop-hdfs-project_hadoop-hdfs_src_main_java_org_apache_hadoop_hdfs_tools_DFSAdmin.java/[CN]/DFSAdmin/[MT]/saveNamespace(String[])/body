{
  final DistributedFileSystem dfs=getDFS();
  final Configuration dfsConf=dfs.getConf();
  long timeWindow=0;
  long txGap=0;
  if (argv.length > 1 && "-beforeShutdown".equals(argv[1])) {
    final long checkpointPeriod=dfsConf.getLong(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_PERIOD_KEY,DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_PERIOD_DEFAULT);
    final long checkpointTxnCount=dfsConf.getLong(DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_TXNS_KEY,DFSConfigKeys.DFS_NAMENODE_CHECKPOINT_TXNS_DEFAULT);
    final int toleratePeriodNum=dfsConf.getInt(DFSConfigKeys.DFS_NAMENODE_MISSING_CHECKPOINT_PERIODS_BEFORE_SHUTDOWN_KEY,DFSConfigKeys.DFS_NAMENODE_MISSING_CHECKPOINT_PERIODS_BEFORE_SHUTDONW_DEFAULT);
    timeWindow=checkpointPeriod * toleratePeriodNum;
    txGap=checkpointTxnCount * toleratePeriodNum;
    System.out.println("Do checkpoint if necessary before stopping " + "namenode. The time window is " + timeWindow + " seconds, and the "+ "transaction gap is "+ txGap);
  }
  URI dfsUri=dfs.getUri();
  boolean isHaEnabled=HAUtilClient.isLogicalUri(dfsConf,dfsUri);
  if (isHaEnabled) {
    String nsId=dfsUri.getHost();
    List<ProxyAndInfo<ClientProtocol>> proxies=HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,nsId,ClientProtocol.class);
    for (    ProxyAndInfo<ClientProtocol> proxy : proxies) {
      boolean saved=proxy.getProxy().saveNamespace(timeWindow,txGap);
      if (saved) {
        System.out.println("Save namespace successful for " + proxy.getAddress());
      }
 else {
        System.out.println("No extra checkpoint has been made for " + proxy.getAddress());
      }
    }
  }
 else {
    boolean saved=dfs.saveNamespace(timeWindow,txGap);
    if (saved) {
      System.out.println("Save namespace successful");
    }
 else {
      System.out.println("No extra checkpoint has been made");
    }
  }
  return 0;
}
