{
  List<String> args=new LinkedList<String>();
  for (int i=idx; i < argsArray.length; i++) {
    args.add(argsArray[i]);
  }
  String owner=StringUtils.popOptionWithArgument("-owner",args);
  if (owner == null) {
    owner=UserGroupInformation.getCurrentUser().getShortUserName();
  }
  String group=StringUtils.popOptionWithArgument("-group",args);
  if (group == null) {
    group=UserGroupInformation.getCurrentUser().getGroupNames()[0];
  }
  String modeString=StringUtils.popOptionWithArgument("-mode",args);
  int mode;
  if (modeString == null) {
    mode=FsPermission.getCachePoolDefault().toShort();
  }
 else {
    mode=Integer.parseInt(modeString,8);
  }
  String weightString=StringUtils.popOptionWithArgument("-weight",args);
  int weight;
  if (weightString == null) {
    weight=CachePool.DEFAULT_WEIGHT;
  }
 else {
    weight=Integer.parseInt(weightString);
  }
  String name=StringUtils.popFirstNonOption(args);
  if (name == null) {
    System.err.println("You must specify a name when creating a " + "cache pool.");
    return 1;
  }
  if (!args.isEmpty()) {
    System.err.print("Can't understand arguments: " + Joiner.on(" ").join(args) + "\n");
    System.err.println("Usage is " + ADD_CACHE_POOL_USAGE);
    return 1;
  }
  DistributedFileSystem dfs=getDFS();
  CachePoolInfo info=new CachePoolInfo(name).setOwnerName(owner).setGroupName(group).setMode(new FsPermission((short)mode)).setWeight(weight);
  try {
    dfs.addCachePool(info);
  }
 catch (  IOException e) {
    throw new RemoteException(e.getClass().getName(),e.getMessage());
  }
  System.out.println("Successfully added cache pool " + name + ".");
  return 0;
}
