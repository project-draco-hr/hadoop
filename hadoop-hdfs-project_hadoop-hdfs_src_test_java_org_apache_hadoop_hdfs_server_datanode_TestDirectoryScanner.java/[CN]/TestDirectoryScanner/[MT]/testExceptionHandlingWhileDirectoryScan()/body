{
  cluster=new MiniDFSCluster.Builder(CONF).build();
  try {
    cluster.waitActive();
    bpid=cluster.getNamesystem().getBlockPoolId();
    fds=DataNodeTestUtils.getFSDataset(cluster.getDataNodes().get(0));
    client=cluster.getFileSystem().getClient();
    CONF.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY,1);
    DataNode dataNode=cluster.getDataNodes().get(0);
    createFile(GenericTestUtils.getMethodName(),BLOCK_LENGTH * 2,false);
    List<FsVolumeSpi> volumes=new ArrayList<>();
    Iterator<FsVolumeSpi> iterator=fds.getFsVolumeReferences().iterator();
    while (iterator.hasNext()) {
      FsVolumeSpi volume=iterator.next();
      FsVolumeSpi spy=Mockito.spy(volume);
      Mockito.doThrow(new IOException("Error while getFinalizedDir")).when(spy).getFinalizedDir(volume.getBlockPoolList()[0]);
      volumes.add(spy);
    }
    FsVolumeReferences volReferences=new FsVolumeReferences(volumes);
    FsDatasetSpi<? extends FsVolumeSpi> spyFds=Mockito.spy(fds);
    Mockito.doReturn(volReferences).when(spyFds).getFsVolumeReferences();
    scanner=new DirectoryScanner(dataNode,spyFds,CONF);
    scanner.setRetainDiffs(true);
    scanner.reconcile();
  }
  finally {
    if (scanner != null) {
      scanner.shutdown();
      scanner=null;
    }
    cluster.shutdown();
  }
}
