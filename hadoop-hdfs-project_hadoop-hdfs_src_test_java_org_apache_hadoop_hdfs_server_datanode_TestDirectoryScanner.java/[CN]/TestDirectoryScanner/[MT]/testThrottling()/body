{
  Configuration conf=new Configuration(CONF);
  int blocks=20000;
  int maxRetries=3;
  cluster=new MiniDFSCluster.Builder(conf).build();
  try {
    cluster.waitActive();
    bpid=cluster.getNamesystem().getBlockPoolId();
    fds=DataNodeTestUtils.getFSDataset(cluster.getDataNodes().get(0));
    client=cluster.getFileSystem().getClient();
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY,100);
    DataNode dataNode=cluster.getDataNodes().get(0);
    createFile(GenericTestUtils.getMethodName(),BLOCK_LENGTH * blocks,false);
    float ratio=0.0f;
    int retries=maxRetries;
    while ((retries > 0) && ((ratio < 7f) || (ratio > 10f))) {
      scanner=new DirectoryScanner(dataNode,fds,conf);
      ratio=runThrottleTest(blocks);
      retries-=1;
    }
    LOG.info("RATIO: " + ratio);
    assertTrue("Throttle is too restrictive",ratio <= 10f);
    assertTrue("Throttle is too permissive",ratio >= 7f);
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY,200);
    ratio=0.0f;
    retries=maxRetries;
    while ((retries > 0) && ((ratio < 3f) || (ratio > 4.5f))) {
      scanner=new DirectoryScanner(dataNode,fds,conf);
      ratio=runThrottleTest(blocks);
      retries-=1;
    }
    LOG.info("RATIO: " + ratio);
    assertTrue("Throttle is too restrictive",ratio <= 4.5f);
    assertTrue("Throttle is too permissive",ratio >= 3.0f);
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY,3);
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY,100);
    ratio=0.0f;
    retries=maxRetries;
    while ((retries > 0) && ((ratio < 7f) || (ratio > 10f))) {
      scanner=new DirectoryScanner(dataNode,fds,conf);
      ratio=runThrottleTest(blocks);
      retries-=1;
    }
    LOG.info("RATIO: " + ratio);
    assertTrue("Throttle is too restrictive",ratio <= 10f);
    assertTrue("Throttle is too permissive",ratio >= 7f);
    scanner=new DirectoryScanner(dataNode,fds,CONF);
    scanner.setRetainDiffs(true);
    scan(blocks,0,0,0,0,0);
    scanner.shutdown();
    assertFalse(scanner.getRunStatus());
    assertTrue("Throttle appears to be engaged",scanner.timeWaitingMs.get() < 10L);
    assertTrue("Report complier threads logged no execution time",scanner.timeRunningMs.get() > 0L);
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY,1);
    ratio=0.0f;
    retries=maxRetries;
    ScheduledExecutorService interruptor=Executors.newScheduledThreadPool(maxRetries);
    try {
      while ((retries > 0) && (ratio < 10)) {
        scanner=new DirectoryScanner(dataNode,fds,conf);
        scanner.setRetainDiffs(true);
        final AtomicLong nowMs=new AtomicLong();
        interruptor.schedule(new Runnable(){
          @Override public void run(){
            nowMs.set(Time.monotonicNow());
            scanner.shutdown();
          }
        }
,2L,TimeUnit.SECONDS);
        scanner.reconcile();
        assertFalse(scanner.getRunStatus());
        long finalMs=nowMs.get();
        if (finalMs > 0) {
          LOG.info("Scanner took " + (Time.monotonicNow() - finalMs) + "ms to shutdown");
          assertTrue("Scanner took too long to shutdown",Time.monotonicNow() - finalMs < 1000L);
        }
        ratio=(float)scanner.timeWaitingMs.get() / scanner.timeRunningMs.get();
        retries-=1;
      }
    }
  finally {
      interruptor.shutdown();
    }
    LOG.info("RATIO: " + ratio);
    assertTrue("Throttle is too permissive",ratio > 10);
    assertTrue("Report complier threads logged no execution time",scanner.timeRunningMs.get() > 0L);
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY,0);
    scanner=new DirectoryScanner(dataNode,fds,conf);
    scanner.setRetainDiffs(true);
    scan(blocks,0,0,0,0,0);
    scanner.shutdown();
    assertFalse(scanner.getRunStatus());
    assertTrue("Throttle appears to be engaged",scanner.timeWaitingMs.get() < 10L);
    assertTrue("Report complier threads logged no execution time",scanner.timeRunningMs.get() > 0L);
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY,1000);
    scanner=new DirectoryScanner(dataNode,fds,conf);
    scanner.setRetainDiffs(true);
    scan(blocks,0,0,0,0,0);
    scanner.shutdown();
    assertFalse(scanner.getRunStatus());
    assertTrue("Throttle appears to be engaged",scanner.timeWaitingMs.get() < 10L);
    assertTrue("Report complier threads logged no execution time",scanner.timeRunningMs.get() > 0L);
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THREADS_KEY,1);
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_THROTTLE_LIMIT_MS_PER_SEC_KEY,10);
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY,1);
    scanner=new DirectoryScanner(dataNode,fds,conf);
    scanner.setRetainDiffs(true);
    scanner.start();
    int count=50;
    while ((count > 0) && (scanner.timeWaitingMs.get() < 500L)) {
      Thread.sleep(100L);
      count-=1;
    }
    scanner.shutdown();
    assertFalse(scanner.getRunStatus());
    assertTrue("Throttle does not appear to be engaged",count > 0);
  }
  finally {
    cluster.shutdown();
  }
}
