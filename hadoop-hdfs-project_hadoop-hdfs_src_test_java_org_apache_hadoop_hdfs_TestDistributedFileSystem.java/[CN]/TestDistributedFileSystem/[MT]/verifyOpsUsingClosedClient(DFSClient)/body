{
  Path p=new Path("/non-empty-file");
  try {
    dfsClient.getBlockSize(p.getName());
    fail("getBlockSize using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.getServerDefaults();
    fail("getServerDefaults using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.reportBadBlocks(new LocatedBlock[0]);
    fail("reportBadBlocks using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.getBlockLocations(p.getName(),0,1);
    fail("getBlockLocations using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.getBlockStorageLocations(new ArrayList<BlockLocation>());
    fail("getBlockStorageLocations using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.createSymlink("target","link",true);
    fail("createSymlink using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.getLinkTarget(p.getName());
    fail("getLinkTarget using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.setReplication(p.getName(),(short)3);
    fail("setReplication using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.setStoragePolicy(p.getName(),HdfsConstants.ONESSD_STORAGE_POLICY_NAME);
    fail("setStoragePolicy using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.getStoragePolicies();
    fail("getStoragePolicies using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
    fail("setSafeMode using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.refreshNodes();
    fail("refreshNodes using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.metaSave(p.getName());
    fail("metaSave using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.setBalancerBandwidth(1000L);
    fail("setBalancerBandwidth using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.finalizeUpgrade();
    fail("finalizeUpgrade using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.rollingUpgrade(RollingUpgradeAction.QUERY);
    fail("rollingUpgrade using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.getInotifyEventStream();
    fail("getInotifyEventStream using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.getInotifyEventStream(100L);
    fail("getInotifyEventStream using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.saveNamespace(1000L,200L);
    fail("saveNamespace using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.rollEdits();
    fail("rollEdits using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.restoreFailedStorage("");
    fail("restoreFailedStorage using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.getContentSummary(p.getName());
    fail("getContentSummary using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.setQuota(p.getName(),1000L,500L);
    fail("setQuota using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
  try {
    dfsClient.setQuotaByStorageType(p.getName(),StorageType.DISK,500L);
    fail("setQuotaByStorageType using a closed filesystem!");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Filesystem closed",ioe);
  }
}
