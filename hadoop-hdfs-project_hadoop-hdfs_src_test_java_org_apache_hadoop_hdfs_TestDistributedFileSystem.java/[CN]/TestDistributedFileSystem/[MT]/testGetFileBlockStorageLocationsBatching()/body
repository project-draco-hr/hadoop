{
  final Configuration conf=getTestConfiguration();
  ((Log4JLogger)ProtobufRpcEngine.LOG).getLogger().setLevel(Level.TRACE);
  ((Log4JLogger)BlockStorageLocationUtil.LOG).getLogger().setLevel(Level.TRACE);
  ((Log4JLogger)DFSClient.LOG).getLogger().setLevel(Level.TRACE);
  conf.setBoolean(DFSConfigKeys.DFS_HDFS_BLOCKS_METADATA_ENABLED,true);
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
  try {
    final DistributedFileSystem fs=cluster.getFileSystem();
    final Path tmpFile1=new Path("/tmpfile1.dat");
    final Path tmpFile2=new Path("/tmpfile2.dat");
    DFSTestUtil.createFile(fs,tmpFile1,1024,(short)2,0xDEADDEADl);
    DFSTestUtil.createFile(fs,tmpFile2,1024,(short)2,0xDEADDEADl);
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        try {
          List<BlockLocation> list=Lists.newArrayList();
          list.addAll(Arrays.asList(fs.getFileBlockLocations(tmpFile1,0,1024)));
          list.addAll(Arrays.asList(fs.getFileBlockLocations(tmpFile2,0,1024)));
          int totalRepl=0;
          for (          BlockLocation loc : list) {
            totalRepl+=loc.getHosts().length;
          }
          if (totalRepl == 4) {
            return true;
          }
        }
 catch (        IOException e) {
        }
        return false;
      }
    }
,500,30000);
    BlockLocation[] blockLocs1=fs.getFileBlockLocations(tmpFile1,0,1024);
    BlockLocation[] blockLocs2=fs.getFileBlockLocations(tmpFile2,0,1024);
    BlockLocation[] blockLocs=(BlockLocation[])ArrayUtils.addAll(blockLocs1,blockLocs2);
    BlockStorageLocation[] locs=fs.getFileBlockStorageLocations(Arrays.asList(blockLocs));
    int counter=0;
    for (    BlockStorageLocation l : locs) {
      for (int i=0; i < l.getVolumeIds().length; i++) {
        VolumeId id=l.getVolumeIds()[i];
        String name=l.getNames()[i];
        if (id != null) {
          System.out.println("Datanode " + name + " has block "+ counter+ " on volume id "+ id.toString());
        }
      }
      counter++;
    }
    assertEquals("Expected two HdfsBlockLocations for two 1-block files",2,locs.length);
    for (    BlockStorageLocation l : locs) {
      assertEquals("Expected two replicas for each block",2,l.getVolumeIds().length);
      for (int i=0; i < l.getVolumeIds().length; i++) {
        VolumeId id=l.getVolumeIds()[i];
        String name=l.getNames()[i];
        assertTrue("Expected block to be valid on datanode " + name,id != null);
      }
    }
  }
  finally {
    cluster.shutdown();
  }
}
