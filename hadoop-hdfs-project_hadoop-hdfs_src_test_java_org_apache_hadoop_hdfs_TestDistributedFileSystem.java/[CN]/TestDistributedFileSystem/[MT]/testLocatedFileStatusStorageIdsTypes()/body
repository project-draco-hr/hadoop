{
  final Configuration conf=getTestConfiguration();
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  try {
    final DistributedFileSystem fs=cluster.getFileSystem();
    final Path testFile=new Path("/testListLocatedStatus");
    final int blockSize=4096;
    final int numBlocks=10;
    final int repl=2;
    DFSTestUtil.createFile(fs,testFile,blockSize,numBlocks * blockSize,blockSize,(short)repl,0xADDED);
    RemoteIterator<LocatedFileStatus> it=fs.listLocatedStatus(testFile);
    assertTrue("Expected file to be present",it.hasNext());
    LocatedFileStatus stat=it.next();
    BlockLocation[] locs=stat.getBlockLocations();
    assertEquals("Unexpected number of locations",numBlocks,locs.length);
    Set<String> dnStorageIds=new HashSet<>();
    for (    DataNode d : cluster.getDataNodes()) {
      try (FsDatasetSpi.FsVolumeReferences volumes=d.getFSDataset().getFsVolumeReferences()){
        for (        FsVolumeSpi vol : volumes) {
          dnStorageIds.add(vol.getStorageID());
        }
      }
     }
    for (    BlockLocation loc : locs) {
      String[] ids=loc.getStorageIds();
      Set<String> storageIds=new HashSet<>();
      for (      String id : ids) {
        storageIds.add(id);
      }
      assertEquals("Unexpected num storage ids",repl,storageIds.size());
      assertTrue("Unknown storage IDs found!",dnStorageIds.containsAll(storageIds));
      StorageType[] types=loc.getStorageTypes();
      assertEquals("Unexpected num storage types",repl,types.length);
      for (      StorageType t : types) {
        assertEquals("Unexpected storage type",StorageType.DEFAULT,t);
      }
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
