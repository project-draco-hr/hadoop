{
  MiniDFSCluster cluster=null;
  StaticMapping.addNodeToRack(NetUtils.getLocalHostname(),"/rackClient");
  final Configuration conf=getTestConfiguration();
  conf.setBoolean(FS_CLIENT_TOPOLOGY_RESOLUTION_ENABLED,true);
  conf.set(DFS_CLIENT_CONTEXT,"testContext_" + expectedDistance);
  if (useScriptMapping) {
    conf.setClass(DFSConfigKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,ScriptBasedMapping.class,DNSToSwitchMapping.class);
    if (invalidScriptMappingFile) {
      conf.set(DFSConfigKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY,"invalidScriptFile.txt");
    }
    cluster=new MiniDFSCluster.Builder(conf).useConfiguredTopologyMappingClass(true).build();
  }
 else   if (expectedDistance == 0) {
    cluster=new MiniDFSCluster.Builder(conf).hosts(new String[]{NetUtils.getLocalHostname()}).build();
  }
 else   if (expectedDistance == 2) {
    cluster=new MiniDFSCluster.Builder(conf).racks(new String[]{"/rackClient"}).build();
  }
 else   if (expectedDistance == 4) {
    cluster=new MiniDFSCluster.Builder(conf).racks(new String[]{"/rackFoo"}).build();
  }
  try {
    final FileSystem fs=cluster.getFileSystem();
    DFSTestUtil.getStatistics(fs).reset();
    Path dir=new Path("/test");
    Path file=new Path(dir,"file");
    String input="hello world";
    DFSTestUtil.writeFile(fs,file,input);
    FSDataInputStream stm=fs.open(file);
    byte[] actual=new byte[4096];
    stm.read(actual);
    checkReadStatistics(fs,expectedDistance,input.length());
  }
  finally {
    if (cluster != null)     cluster.shutdown();
  }
}
