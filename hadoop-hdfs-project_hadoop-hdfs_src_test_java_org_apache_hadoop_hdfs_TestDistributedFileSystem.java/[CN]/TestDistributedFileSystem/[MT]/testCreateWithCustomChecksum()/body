{
  Configuration conf=getTestConfiguration();
  MiniDFSCluster cluster=null;
  Path testBasePath=new Path("/test/csum");
  Path path1=new Path(testBasePath,"file_wtih_crc1");
  Path path2=new Path(testBasePath,"file_with_crc2");
  ChecksumOpt opt1=new ChecksumOpt(DataChecksum.Type.CRC32C,512);
  ChecksumOpt opt2=new ChecksumOpt(DataChecksum.Type.CRC32,512);
  FsPermission perm=FsPermission.getDefault().applyUMask(FsPermission.getUMask(conf));
  EnumSet<CreateFlag> flags=EnumSet.of(CreateFlag.OVERWRITE,CreateFlag.CREATE);
  short repl=1;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    FileSystem dfs=cluster.getFileSystem();
    dfs.mkdirs(testBasePath);
    FSDataOutputStream out1=dfs.create(path1,perm,flags,4096,repl,131072L,null,opt1);
    FSDataOutputStream out2=dfs.create(path2,perm,flags,4096,repl,131072L,null,opt2);
    for (int i=0; i < 1024; i++) {
      out1.write(i);
      out2.write(i);
    }
    out1.close();
    out2.close();
    MD5MD5CRC32FileChecksum sum1=(MD5MD5CRC32FileChecksum)dfs.getFileChecksum(path1);
    MD5MD5CRC32FileChecksum sum2=(MD5MD5CRC32FileChecksum)dfs.getFileChecksum(path2);
    assertFalse(sum1.equals(sum2));
    assertEquals(DataChecksum.Type.CRC32C,sum1.getCrcType());
    assertEquals(DataChecksum.Type.CRC32,sum2.getCrcType());
  }
  finally {
    if (cluster != null) {
      cluster.getFileSystem().delete(testBasePath,true);
      cluster.shutdown();
    }
  }
}
