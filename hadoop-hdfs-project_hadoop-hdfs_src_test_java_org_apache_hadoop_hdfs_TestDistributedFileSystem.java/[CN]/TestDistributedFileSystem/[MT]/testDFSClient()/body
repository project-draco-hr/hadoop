{
  Configuration conf=getTestConfiguration();
  final long grace=1000L;
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
    final String filepathstring="/test/LeaseChecker/foo";
    final Path[] filepaths=new Path[4];
    for (int i=0; i < filepaths.length; i++) {
      filepaths[i]=new Path(filepathstring + i);
    }
    final long millis=Time.now();
{
      DistributedFileSystem dfs=(DistributedFileSystem)cluster.getFileSystem();
      dfs.dfs.getLeaseRenewer().setGraceSleepPeriod(grace);
      assertFalse(dfs.dfs.getLeaseRenewer().isRunning());
{
        final FSDataOutputStream out=dfs.create(filepaths[0]);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        out.writeLong(millis);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        out.close();
        Thread.sleep(grace / 4 * 3);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        for (int i=0; i < 3; i++) {
          if (dfs.dfs.getLeaseRenewer().isRunning()) {
            Thread.sleep(grace / 2);
          }
        }
        assertFalse(dfs.dfs.getLeaseRenewer().isRunning());
      }
{
        final FSDataOutputStream out1=dfs.create(filepaths[1]);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        final FSDataOutputStream out2=dfs.create(filepaths[2]);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        out1.writeLong(millis);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        out1.close();
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        out2.writeLong(millis);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        out2.close();
        Thread.sleep(grace / 4 * 3);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
      }
{
        final FSDataOutputStream out3=dfs.create(filepaths[3]);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        Thread.sleep(grace / 4 * 3);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        out3.writeLong(millis);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        out3.close();
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        Thread.sleep(grace / 4 * 3);
        assertTrue(dfs.dfs.getLeaseRenewer().isRunning());
        for (int i=0; i < 3; i++) {
          if (dfs.dfs.getLeaseRenewer().isRunning()) {
            Thread.sleep(grace / 2);
          }
        }
        assertFalse(dfs.dfs.getLeaseRenewer().isRunning());
      }
      dfs.close();
    }
{
      FileSystem fs=cluster.getFileSystem();
      Path dir=new Path("/wrwelkj");
      assertFalse("File should not exist for test.",fs.exists(dir));
      try {
        FSDataInputStream in=fs.open(dir);
        try {
          in.close();
          fs.close();
        }
  finally {
          assertTrue("Did not get a FileNotFoundException for non-existing" + " file.",false);
        }
      }
 catch (      FileNotFoundException fnf) {
      }
    }
{
      DistributedFileSystem dfs=(DistributedFileSystem)cluster.getFileSystem();
      assertFalse(dfs.dfs.getLeaseRenewer().isRunning());
      FSDataInputStream in=dfs.open(filepaths[0]);
      assertFalse(dfs.dfs.getLeaseRenewer().isRunning());
      assertEquals(millis,in.readLong());
      assertFalse(dfs.dfs.getLeaseRenewer().isRunning());
      in.close();
      assertFalse(dfs.dfs.getLeaseRenewer().isRunning());
      dfs.close();
    }
{
      String uri="hdfs://127.0.0.1:" + cluster.getNameNodePort() + "/test/ipAddress/file";
      Path path=new Path(uri);
      FileSystem fs=FileSystem.get(path.toUri(),conf);
      FSDataOutputStream out=fs.create(path);
      byte[] buf=new byte[1024];
      out.write(buf);
      out.close();
      FSDataInputStream in=fs.open(path);
      in.readFully(buf);
      in.close();
      fs.close();
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
