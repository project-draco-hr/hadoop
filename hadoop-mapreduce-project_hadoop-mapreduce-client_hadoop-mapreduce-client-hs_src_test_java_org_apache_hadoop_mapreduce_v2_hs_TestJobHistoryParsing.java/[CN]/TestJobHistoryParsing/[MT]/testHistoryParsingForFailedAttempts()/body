{
  Configuration conf=new Configuration();
  conf.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,MyResolver.class,DNSToSwitchMapping.class);
  RackResolver.init(conf);
  MRApp app=new MRAppWithHistoryWithFailedAttempt(2,1,true,this.getClass().getName(),true);
  app.submit(conf);
  Job job=app.getContext().getAllJobs().values().iterator().next();
  JobId jobId=job.getID();
  app.waitForState(job,JobState.SUCCEEDED);
  app.waitForState(Service.STATE.STOPPED);
  String jobhistoryDir=JobHistoryUtils.getHistoryIntermediateDoneDirForUser(conf);
  JobHistory jobHistory=new JobHistory();
  jobHistory.init(conf);
  JobIndexInfo jobIndexInfo=jobHistory.getJobMetaInfo(jobId).getJobIndexInfo();
  String jobhistoryFileName=FileNameIndexUtils.getDoneFileName(jobIndexInfo);
  Path historyFilePath=new Path(jobhistoryDir,jobhistoryFileName);
  FSDataInputStream in=null;
  FileContext fc=null;
  try {
    fc=FileContext.getFileContext(conf);
    in=fc.open(fc.makeQualified(historyFilePath));
  }
 catch (  IOException ioe) {
    LOG.info("Can not open history file: " + historyFilePath,ioe);
    throw (new Exception("Can not open History File"));
  }
  JobHistoryParser parser=new JobHistoryParser(in);
  JobInfo jobInfo=parser.parse();
  int noOffailedAttempts=0;
  Map<TaskID,TaskInfo> allTasks=jobInfo.getAllTasks();
  for (  Task task : job.getTasks().values()) {
    TaskInfo taskInfo=allTasks.get(TypeConverter.fromYarn(task.getID()));
    for (    TaskAttempt taskAttempt : task.getAttempts().values()) {
      TaskAttemptInfo taskAttemptInfo=taskInfo.getAllTaskAttempts().get(TypeConverter.fromYarn((taskAttempt.getID())));
      Assert.assertEquals("rack-name is incorrect",taskAttemptInfo.getRackname(),RACK_NAME);
      if (taskAttemptInfo.getTaskStatus().equals("FAILED")) {
        noOffailedAttempts++;
      }
    }
  }
  Assert.assertEquals("No of Failed tasks doesn't match.",2,noOffailedAttempts);
}
