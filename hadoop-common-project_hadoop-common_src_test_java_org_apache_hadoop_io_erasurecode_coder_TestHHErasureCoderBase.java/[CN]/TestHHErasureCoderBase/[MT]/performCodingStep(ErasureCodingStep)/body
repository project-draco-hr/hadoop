{
  ECBlock[] inputBlocks=codingStep.getInputBlocks();
  ECBlock[] outputBlocks=codingStep.getOutputBlocks();
  ECChunk[] inputChunks=new ECChunk[inputBlocks.length * subPacketSize];
  ECChunk[] outputChunks=new ECChunk[outputBlocks.length * subPacketSize];
  for (int i=0; i < numChunksInBlock; i+=subPacketSize) {
    for (int k=0; k < subPacketSize; ++k) {
      for (int j=0; j < inputBlocks.length; ++j) {
        inputChunks[k * inputBlocks.length + j]=((TestBlock)inputBlocks[j]).chunks[i + k];
      }
      for (int j=0; j < outputBlocks.length; ++j) {
        outputChunks[k * outputBlocks.length + j]=allocateOutputChunk();
        ((TestBlock)outputBlocks[j]).chunks[i + k]=outputChunks[k * outputBlocks.length + j];
      }
    }
    codingStep.performCoding(inputChunks,outputChunks);
  }
  codingStep.finish();
}
