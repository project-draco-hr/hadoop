{
switch (event.getType()) {
case APPLICATION_STARTED:
    LogHandlerAppStartedEvent appStartedEvent=(LogHandlerAppStartedEvent)event;
  this.appOwners.put(appStartedEvent.getApplicationId(),appStartedEvent.getUser());
this.dispatcher.getEventHandler().handle(new ApplicationEvent(appStartedEvent.getApplicationId(),ApplicationEventType.APPLICATION_LOG_HANDLING_INITED));
break;
case CONTAINER_FINISHED:
break;
case APPLICATION_FINISHED:
LogHandlerAppFinishedEvent appFinishedEvent=(LogHandlerAppFinishedEvent)event;
ApplicationId appId=appFinishedEvent.getApplicationId();
LOG.info("Scheduling Log Deletion for application: " + appId + ", with delay of "+ this.deleteDelaySeconds+ " seconds");
String user=appOwners.remove(appId);
if (user == null) {
LOG.error("Unable to locate user for " + appId);
break;
}
LogDeleterRunnable logDeleter=new LogDeleterRunnable(user,appId);
long deletionTimestamp=System.currentTimeMillis() + this.deleteDelaySeconds * 1000;
LogDeleterProto deleterProto=LogDeleterProto.newBuilder().setUser(user).setDeletionTime(deletionTimestamp).build();
try {
stateStore.storeLogDeleter(appId,deleterProto);
}
 catch (IOException e) {
LOG.error("Unable to record log deleter state",e);
}
try {
sched.schedule(logDeleter,this.deleteDelaySeconds,TimeUnit.SECONDS);
}
 catch (RejectedExecutionException e) {
logDeleter.run();
}
break;
default :
;
}
}
