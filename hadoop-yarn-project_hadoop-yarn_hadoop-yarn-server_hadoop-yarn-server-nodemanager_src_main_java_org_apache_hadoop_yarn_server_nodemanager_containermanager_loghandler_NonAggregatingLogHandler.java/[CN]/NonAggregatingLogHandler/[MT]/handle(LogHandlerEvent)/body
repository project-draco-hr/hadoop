{
switch (event.getType()) {
case APPLICATION_STARTED:
    LogHandlerAppStartedEvent appStartedEvent=(LogHandlerAppStartedEvent)event;
  this.appOwners.put(appStartedEvent.getApplicationId(),appStartedEvent.getUser());
this.dispatcher.getEventHandler().handle(new ApplicationEvent(appStartedEvent.getApplicationId(),ApplicationEventType.APPLICATION_LOG_HANDLING_INITED));
break;
case CONTAINER_FINISHED:
break;
case APPLICATION_FINISHED:
LogHandlerAppFinishedEvent appFinishedEvent=(LogHandlerAppFinishedEvent)event;
LOG.info("Scheduling Log Deletion for application: " + appFinishedEvent.getApplicationId() + ", with delay of "+ this.deleteDelaySeconds+ " seconds");
LogDeleterRunnable logDeleter=new LogDeleterRunnable(appOwners.remove(appFinishedEvent.getApplicationId()),appFinishedEvent.getApplicationId());
try {
sched.schedule(logDeleter,this.deleteDelaySeconds,TimeUnit.SECONDS);
}
 catch (RejectedExecutionException e) {
logDeleter.run();
}
break;
default :
;
}
}
