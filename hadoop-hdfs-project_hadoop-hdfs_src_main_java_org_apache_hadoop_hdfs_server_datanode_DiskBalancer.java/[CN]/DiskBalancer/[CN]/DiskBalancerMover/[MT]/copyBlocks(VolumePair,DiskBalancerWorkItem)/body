{
  FsVolumeSpi source=pair.getSource();
  FsVolumeSpi dest=pair.getDest();
  List<FsVolumeSpi.BlockIterator> poolIters=new LinkedList<>();
  if (source.isTransientStorage() || dest.isTransientStorage()) {
    return;
  }
  try {
    openPoolIters(source,poolIters);
    if (poolIters.size() == 0) {
      LOG.error("No block pools found on volume. volume : {}. Exiting.",source.getBasePath());
      return;
    }
    while (shouldRun()) {
      try {
        if (item.getErrorCount() > getMaxError(item)) {
          LOG.error("Exceeded the max error count. source {}, dest: {} " + "error count: {}",source.getBasePath(),dest.getBasePath(),item.getErrorCount());
          this.setExitFlag();
          continue;
        }
        if (isCloseEnough(item)) {
          LOG.info("Copy from {} to {} done. copied {} bytes and {} " + "blocks.",source.getBasePath(),dest.getBasePath(),item.getBytesCopied(),item.getBlocksCopied());
          this.setExitFlag();
          continue;
        }
        ExtendedBlock block=getNextBlock(poolIters,item);
        if (block == null) {
          this.setExitFlag();
          LOG.error("No source blocks, exiting the copy. Source: {}, " + "dest:{}",source.getBasePath(),dest.getBasePath());
          continue;
        }
        if (!shouldRun()) {
          continue;
        }
        long timeUsed;
        if (dest.getAvailable() > item.getBytesToCopy()) {
          long begin=System.nanoTime();
          this.dataset.moveBlockAcrossVolumes(block,dest);
          long now=System.nanoTime();
          timeUsed=(now - begin) > 0 ? now - begin : 0;
        }
 else {
          LOG.error("Destination volume: {} does not have enough space to" + " accommodate a block. Block Size: {} Exiting from" + " copyBlocks.",dest.getBasePath(),block.getNumBytes());
          this.setExitFlag();
          continue;
        }
        LOG.debug("Moved block with size {} from  {} to {}",block.getNumBytes(),source.getBasePath(),dest.getBasePath());
        item.incCopiedSoFar(block.getNumBytes());
        item.incBlocksCopied();
        Thread.sleep(computeDelay(block.getNumBytes(),timeUsed,item));
      }
 catch (      IOException ex) {
        LOG.error("Exception while trying to copy blocks. error: {}",ex);
        item.incErrorCount();
      }
catch (      InterruptedException e) {
        LOG.error("Copy Block Thread interrupted, exiting the copy.");
        Thread.currentThread().interrupt();
        item.incErrorCount();
        this.setExitFlag();
      }
    }
  }
  finally {
    closePoolIters(poolIters);
  }
}
