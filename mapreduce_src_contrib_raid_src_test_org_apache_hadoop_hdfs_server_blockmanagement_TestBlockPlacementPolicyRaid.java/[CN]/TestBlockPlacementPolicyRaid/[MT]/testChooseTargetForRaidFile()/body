{
  setupCluster();
  try {
    String src="/dir/file";
    String parity=raidrsTempPrefix + src;
    DFSTestUtil.createFile(fs,new Path(src),4,(short)1,0L);
    DFSTestUtil.waitReplication(fs,new Path(src),(short)1);
    refreshPolicy();
    setBlockPlacementPolicy(namesystem,policy);
    String[] racks={"/rack2","/rack2","/rack2","/rack2","/rack2","/rack2"};
    String[] hosts={"host2.rack2.com","host3.rack2.com","host4.rack2.com","host5.rack2.com","host6.rack2.com","host7.rack2.com"};
    cluster.startDataNodes(conf,6,true,null,racks,hosts,null);
    int numBlocks=6;
    DFSTestUtil.createFile(fs,new Path(parity),numBlocks,(short)2,0L);
    DFSTestUtil.waitReplication(fs,new Path(parity),(short)2);
    FileStatus srcStat=fs.getFileStatus(new Path(src));
    BlockLocation[] srcLoc=fs.getFileBlockLocations(srcStat,0,srcStat.getLen());
    FileStatus parityStat=fs.getFileStatus(new Path(parity));
    BlockLocation[] parityLoc=fs.getFileBlockLocations(parityStat,0,parityStat.getLen());
    int parityLen=RaidNode.rsParityLength(conf);
    for (int i=0; i < numBlocks / parityLen; i++) {
      Set<String> locations=new HashSet<String>();
      for (int j=0; j < srcLoc.length; j++) {
        String[] names=srcLoc[j].getNames();
        for (int k=0; k < names.length; k++) {
          LOG.info("Source block location: " + names[k]);
          locations.add(names[k]);
        }
      }
      for (int j=0; j < parityLen; j++) {
        String[] names=parityLoc[j + i * parityLen].getNames();
        for (int k=0; k < names.length; k++) {
          LOG.info("Parity block location: " + names[k]);
          Assert.assertTrue(locations.add(names[k]));
        }
      }
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
