{
  maxDelayBetweenOps=conf.getInt(LG_MAXDELAYBETWEENOPS,maxDelayBetweenOps);
  numOfThreads=conf.getInt(LG_NUMOFTHREADS,numOfThreads);
  readProbs[0]=Double.parseDouble(conf.get(LG_READPR,readProbs[0] + ""));
  writeProbs[0]=Double.parseDouble(conf.get(LG_WRITEPR,writeProbs[0] + ""));
  seed=conf.getLong(LG_SEED,seed);
  numMapTasks=conf.getInt(LG_NUMMAPTASKS,numMapTasks);
  root=new Path(conf.get(LG_ROOT,root.toString()));
  durations[0]=conf.getLong(LG_ELAPSEDTIME,0);
  startTime=conf.getLong(LG_STARTTIME,0);
  scriptFile=conf.get(LG_SCRIPTFILE,null);
  flagFile=new Path(conf.get(LG_FLAGFILE,FLAGFILE_DEFAULT));
  if (durations[0] > 0 && scriptFile != null) {
    System.err.println("Cannot specify both ElapsedTime and ScriptFile, exiting");
    System.exit(-1);
  }
  try {
    if (scriptFile != null && loadScriptFile(scriptFile,false) < 0) {
      System.err.println("Error in scriptFile, exiting");
      System.exit(-1);
    }
  }
 catch (  IOException e) {
    System.err.println("Error loading script file " + scriptFile);
    e.printStackTrace();
  }
  if (durations[0] <= 0) {
    System.err.println("A duration of zero or less is not allowed when running via MapReduce.");
    System.exit(-1);
  }
}
