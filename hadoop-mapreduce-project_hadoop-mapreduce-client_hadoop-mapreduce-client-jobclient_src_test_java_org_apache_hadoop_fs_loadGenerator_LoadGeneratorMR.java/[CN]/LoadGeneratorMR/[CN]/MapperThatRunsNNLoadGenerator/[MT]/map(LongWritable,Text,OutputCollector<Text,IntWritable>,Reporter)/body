{
  ProgressThread progressThread=new ProgressThread(reporter);
  progressThread.start();
  try {
    new LoadGenerator(jobConf).generateLoadOnNN();
    System.out.println("Finished generating load on NN, sending results to the reducer");
    printResults(System.out);
    progressThread.keepGoing=false;
    progressThread.join();
    output.collect(OPEN_EXECTIME,new IntWritable((int)executionTime[OPEN]));
    output.collect(NUMOPS_OPEN,new IntWritable((int)numOfOps[OPEN]));
    output.collect(LIST_EXECTIME,new IntWritable((int)executionTime[LIST]));
    output.collect(NUMOPS_LIST,new IntWritable((int)numOfOps[LIST]));
    output.collect(DELETE_EXECTIME,new IntWritable((int)executionTime[DELETE]));
    output.collect(NUMOPS_DELETE,new IntWritable((int)numOfOps[DELETE]));
    output.collect(CREATE_EXECTIME,new IntWritable((int)executionTime[CREATE]));
    output.collect(NUMOPS_CREATE,new IntWritable((int)numOfOps[CREATE]));
    output.collect(WRITE_CLOSE_EXECTIME,new IntWritable((int)executionTime[WRITE_CLOSE]));
    output.collect(NUMOPS_WRITE_CLOSE,new IntWritable((int)numOfOps[WRITE_CLOSE]));
    output.collect(TOTALOPS,new IntWritable((int)totalOps));
    output.collect(ELAPSED_TIME,new IntWritable((int)totalTime));
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
}
