{
  final int preferredBlockSize=1024;
  Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,preferredBlockSize);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
  DistributedFileSystem fileSystem=cluster.getFileSystem();
  FSDataOutputStream stm=null;
  try {
    Path path=new Path("/" + fName);
    stm=fileSystem.create(path,true,4096,(short)2,AppendTestUtil.BLOCK_SIZE);
    System.out.println("Created file " + path.toString());
    ((DFSOutputStream)stm.getWrappedStream()).hsync(EnumSet.of(SyncFlag.END_BLOCK));
    long currentFileLength=fileSystem.getFileStatus(path).getLen();
    assertEquals(0L,currentFileLength);
    LocatedBlocks blocks=fileSystem.dfs.getLocatedBlocks(path.toString(),0);
    assertEquals(0,blocks.getLocatedBlocks().size());
    stm.write(new byte[preferredBlockSize]);
    ((DFSOutputStream)stm.getWrappedStream()).hsync(EnumSet.of(SyncFlag.END_BLOCK));
    currentFileLength=fileSystem.getFileStatus(path).getLen();
    assertEquals(preferredBlockSize,currentFileLength);
    blocks=fileSystem.dfs.getLocatedBlocks(path.toString(),0);
    assertEquals(1,blocks.getLocatedBlocks().size());
    stm.write(new byte[preferredBlockSize / 2]);
    stm.hsync();
    ((DFSOutputStream)stm.getWrappedStream()).hsync(EnumSet.of(SyncFlag.END_BLOCK));
    currentFileLength=fileSystem.getFileStatus(path).getLen();
    assertEquals(preferredBlockSize + preferredBlockSize / 2,currentFileLength);
    blocks=fileSystem.dfs.getLocatedBlocks(path.toString(),0);
    assertEquals(2,blocks.getLocatedBlocks().size());
    stm.write(new byte[preferredBlockSize / 4]);
    stm.hsync();
    currentFileLength=fileSystem.getFileStatus(path).getLen();
    assertEquals(preferredBlockSize + preferredBlockSize / 2 + preferredBlockSize / 4,currentFileLength);
    blocks=fileSystem.dfs.getLocatedBlocks(path.toString(),0);
    assertEquals(3,blocks.getLocatedBlocks().size());
  }
  finally {
    IOUtils.cleanup(null,stm,fileSystem);
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
