{
  recalculateReduceSchedule=true;
  if (event.getType() == ContainerAllocator.EventType.CONTAINER_REQ) {
    ContainerRequestEvent reqEvent=(ContainerRequestEvent)event;
    JobId jobId=getJob().getID();
    int supportedMaxContainerCapability=getMaxContainerCapability().getMemory();
    if (reqEvent.getAttemptID().getTaskId().getTaskType().equals(TaskType.MAP)) {
      if (mapResourceRequest == 0) {
        mapResourceRequest=reqEvent.getCapability().getMemory();
        eventHandler.handle(new JobHistoryEvent(jobId,new NormalizedResourceEvent(org.apache.hadoop.mapreduce.TaskType.MAP,mapResourceRequest)));
        LOG.info("mapResourceRequest:" + mapResourceRequest);
        if (mapResourceRequest > supportedMaxContainerCapability) {
          String diagMsg="MAP capability required is more than the supported " + "max container capability in the cluster. Killing the Job. mapResourceRequest: " + mapResourceRequest + " maxContainerCapability:"+ supportedMaxContainerCapability;
          LOG.info(diagMsg);
          eventHandler.handle(new JobDiagnosticsUpdateEvent(jobId,diagMsg));
          eventHandler.handle(new JobEvent(jobId,JobEventType.JOB_KILL));
        }
      }
      reqEvent.getCapability().setMemory(mapResourceRequest);
      scheduledRequests.addMap(reqEvent);
    }
 else {
      if (reduceResourceRequest == 0) {
        reduceResourceRequest=reqEvent.getCapability().getMemory();
        eventHandler.handle(new JobHistoryEvent(jobId,new NormalizedResourceEvent(org.apache.hadoop.mapreduce.TaskType.REDUCE,reduceResourceRequest)));
        LOG.info("reduceResourceRequest:" + reduceResourceRequest);
        if (reduceResourceRequest > supportedMaxContainerCapability) {
          String diagMsg="REDUCE capability required is more than the " + "supported max container capability in the cluster. Killing the " + "Job. reduceResourceRequest: " + reduceResourceRequest + " maxContainerCapability:"+ supportedMaxContainerCapability;
          LOG.info(diagMsg);
          eventHandler.handle(new JobDiagnosticsUpdateEvent(jobId,diagMsg));
          eventHandler.handle(new JobEvent(jobId,JobEventType.JOB_KILL));
        }
      }
      reqEvent.getCapability().setMemory(reduceResourceRequest);
      if (reqEvent.getEarlierAttemptFailed()) {
        pendingReduces.addFirst(new ContainerRequest(reqEvent,PRIORITY_REDUCE));
      }
 else {
        pendingReduces.add(new ContainerRequest(reqEvent,PRIORITY_REDUCE));
      }
    }
  }
 else   if (event.getType() == ContainerAllocator.EventType.CONTAINER_DEALLOCATE) {
    LOG.info("Processing the event " + event.toString());
    TaskAttemptId aId=event.getAttemptID();
    boolean removed=scheduledRequests.remove(aId);
    if (!removed) {
      ContainerId containerId=assignedRequests.get(aId);
      if (containerId != null) {
        removed=true;
        assignedRequests.remove(aId);
        containersReleased++;
        pendingRelease.add(containerId);
        release(containerId);
      }
    }
    if (!removed) {
      LOG.error("Could not deallocate container for task attemptId " + aId);
    }
    preemptionPolicy.handleCompletedContainer(event.getAttemptID());
  }
 else   if (event.getType() == ContainerAllocator.EventType.CONTAINER_FAILED) {
    ContainerFailedEvent fEv=(ContainerFailedEvent)event;
    String host=getHost(fEv.getContMgrAddress());
    containerFailedOnHost(host);
    preemptionPolicy.handleFailedContainer(event.getAttemptID());
  }
}
