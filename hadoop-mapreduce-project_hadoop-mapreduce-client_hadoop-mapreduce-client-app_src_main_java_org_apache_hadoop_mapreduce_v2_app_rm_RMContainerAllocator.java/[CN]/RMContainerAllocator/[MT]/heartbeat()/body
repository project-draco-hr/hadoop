{
  scheduleStats.updateAndLogIfChanged("Before Scheduling: ");
  List<Container> allocatedContainers=getResources();
  if (allocatedContainers != null && allocatedContainers.size() > 0) {
    scheduledRequests.assign(allocatedContainers);
  }
  int completedMaps=getJob().getCompletedMaps();
  int completedTasks=completedMaps + getJob().getCompletedReduces();
  if ((lastCompletedTasks != completedTasks) || (scheduledRequests.maps.size() > 0)) {
    lastCompletedTasks=completedTasks;
    recalculateReduceSchedule=true;
  }
  if (recalculateReduceSchedule) {
    preemptReducesIfNeeded();
    scheduleReduces(getJob().getTotalMaps(),completedMaps,scheduledRequests.maps.size(),scheduledRequests.reduces.size(),assignedRequests.maps.size(),assignedRequests.reduces.size(),mapResourceRequest,reduceResourceRequest,pendingReduces.size(),maxReduceRampupLimit,reduceSlowStart);
    recalculateReduceSchedule=false;
  }
  scheduleStats.updateAndLogIfChanged("After Scheduling: ");
}
