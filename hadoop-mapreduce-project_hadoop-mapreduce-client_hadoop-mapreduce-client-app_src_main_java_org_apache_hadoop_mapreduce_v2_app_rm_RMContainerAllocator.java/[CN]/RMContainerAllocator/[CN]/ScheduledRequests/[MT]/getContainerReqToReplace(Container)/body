{
  LOG.info("Finding containerReq for allocated container: " + allocated);
  Priority priority=allocated.getPriority();
  ContainerRequest toBeReplaced=null;
  if (PRIORITY_FAST_FAIL_MAP.equals(priority)) {
    LOG.info("Replacing FAST_FAIL_MAP container " + allocated.getId());
    Iterator<TaskAttemptId> iter=earlierFailedMaps.iterator();
    while (toBeReplaced == null && iter.hasNext()) {
      toBeReplaced=maps.get(iter.next());
    }
    LOG.info("Found replacement: " + toBeReplaced);
    return toBeReplaced;
  }
 else   if (PRIORITY_MAP.equals(priority)) {
    LOG.info("Replacing MAP container " + allocated.getId());
    String host=allocated.getNodeId().getHost();
    LinkedList<TaskAttemptId> list=mapsHostMapping.get(host);
    if (list != null && list.size() > 0) {
      TaskAttemptId tId=list.removeLast();
      if (maps.containsKey(tId)) {
        toBeReplaced=maps.remove(tId);
      }
    }
 else {
      TaskAttemptId tId=maps.keySet().iterator().next();
      toBeReplaced=maps.remove(tId);
    }
  }
 else   if (PRIORITY_REDUCE.equals(priority)) {
    TaskAttemptId tId=reduces.keySet().iterator().next();
    toBeReplaced=reduces.remove(tId);
  }
  LOG.info("Found replacement: " + toBeReplaced);
  return toBeReplaced;
}
