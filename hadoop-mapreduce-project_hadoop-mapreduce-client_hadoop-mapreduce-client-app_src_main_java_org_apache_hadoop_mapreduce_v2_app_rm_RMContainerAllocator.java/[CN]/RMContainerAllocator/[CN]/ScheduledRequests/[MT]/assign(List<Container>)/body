{
  Iterator<Container> it=allocatedContainers.iterator();
  LOG.info("Got allocated containers " + allocatedContainers.size());
  containersAllocated+=allocatedContainers.size();
  int reducePending=reduces.size();
  while (it.hasNext()) {
    Container allocated=it.next();
    if (LOG.isDebugEnabled()) {
      LOG.debug("Assigning container " + allocated.getId() + " with priority "+ allocated.getPriority()+ " to NM "+ allocated.getNodeId());
    }
    boolean isAssignable=true;
    Priority priority=allocated.getPriority();
    Resource allocatedResource=allocated.getResource();
    if (PRIORITY_FAST_FAIL_MAP.equals(priority) || PRIORITY_MAP.equals(priority)) {
      if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,mapResourceRequest,getSchedulerResourceTypes()) <= 0 || maps.isEmpty()) {
        LOG.info("Cannot assign container " + allocated + " for a map as either "+ " container memory less than required "+ mapResourceRequest+ " or no pending map tasks - maps.isEmpty="+ maps.isEmpty());
        isAssignable=false;
      }
    }
 else     if (PRIORITY_REDUCE.equals(priority)) {
      if (ResourceCalculatorUtils.computeAvailableContainers(allocatedResource,reduceResourceRequest,getSchedulerResourceTypes()) <= 0 || (reducePending <= 0)) {
        LOG.info("Cannot assign container " + allocated + " for a reduce as either "+ " container memory less than required "+ reduceResourceRequest+ " or no pending reduce tasks.");
        isAssignable=false;
      }
 else {
        reducePending--;
      }
    }
 else {
      LOG.warn("Container allocated at unwanted priority: " + priority + ". Returning to RM...");
      isAssignable=false;
    }
    if (!isAssignable) {
      containerNotAssigned(allocated);
      it.remove();
      continue;
    }
    String allocatedHost=allocated.getNodeId().getHost();
    if (isNodeBlacklisted(allocatedHost)) {
      LOG.info("Got allocated container on a blacklisted " + " host " + allocatedHost + ". Releasing container "+ allocated);
      ContainerRequest toBeReplacedReq=getContainerReqToReplace(allocated);
      if (toBeReplacedReq != null) {
        LOG.info("Placing a new container request for task attempt " + toBeReplacedReq.attemptID);
        ContainerRequest newReq=getFilteredContainerRequest(toBeReplacedReq);
        decContainerReq(toBeReplacedReq);
        if (toBeReplacedReq.attemptID.getTaskId().getTaskType() == TaskType.MAP) {
          maps.put(newReq.attemptID,newReq);
        }
 else {
          reduces.put(newReq.attemptID,newReq);
        }
        addContainerReq(newReq);
      }
 else {
        LOG.info("Could not map allocated container to a valid request." + " Releasing allocated container " + allocated);
      }
      containerNotAssigned(allocated);
      it.remove();
      continue;
    }
  }
  assignContainers(allocatedContainers);
  it=allocatedContainers.iterator();
  while (it.hasNext()) {
    Container allocated=it.next();
    LOG.info("Releasing unassigned container " + allocated);
    containerNotAssigned(allocated);
  }
}
