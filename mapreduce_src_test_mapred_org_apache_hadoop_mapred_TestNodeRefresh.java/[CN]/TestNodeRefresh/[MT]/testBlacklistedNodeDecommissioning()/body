{
  LOG.info("Testing blacklisted node decommissioning");
  Configuration conf=new Configuration();
  conf.set(JTConfig.JT_MAX_TRACKER_BLACKLISTS,"1");
  startCluster(2,1,0,UserGroupInformation.getLoginUser(),conf);
  assertEquals("Trackers not up",2,mr.getJobTrackerRunner().getJobTracker().getActiveTrackers().length);
  assertEquals("Active tracker count mismatch",2,jt.getClusterStatus(false).getTaskTrackers());
  assertEquals("Blacklisted tracker count mismatch",0,jt.getClusterStatus(false).getBlacklistedTrackers());
  JobConf jConf=mr.createJobConf();
  jConf.set(MRJobConfig.MAX_TASK_FAILURES_PER_TRACKER,"1");
  jConf.setJobName("test-job-fail-once");
  jConf.setMapperClass(FailOnceMapper.class);
  jConf.setReducerClass(IdentityReducer.class);
  jConf.setNumMapTasks(1);
  jConf.setNumReduceTasks(0);
  RunningJob job=UtilsForTests.runJob(jConf,new Path("in"),new Path("out"));
  job.waitForCompletion();
  assertEquals("Active tracker count mismatch",1,jt.getClusterStatus(false).getTaskTrackers());
  assertEquals("Blacklisted tracker count mismatch",1,jt.getClusterStatus(false).getBlacklistedTrackers());
  String hostToDecommission=JobInProgress.convertTrackerNameToHostName(jt.getBlacklistedTrackers()[0].getTaskTrackerName());
  LOG.info("Decommissioning host " + hostToDecommission);
  Set<String> decom=new HashSet<String>(1);
  decom.add(hostToDecommission);
  jt.decommissionNodes(decom);
  assertEquals("Tracker is not lost upon host decommissioning",1,jt.getClusterStatus(false).getTaskTrackers());
  assertEquals("Blacklisted tracker count incorrect in cluster status after " + "decommissioning",0,jt.getClusterStatus(false).getBlacklistedTrackers());
  assertEquals("Tracker is not lost upon host decommissioning",1,jt.taskTrackers().size());
  stopCluster();
}
