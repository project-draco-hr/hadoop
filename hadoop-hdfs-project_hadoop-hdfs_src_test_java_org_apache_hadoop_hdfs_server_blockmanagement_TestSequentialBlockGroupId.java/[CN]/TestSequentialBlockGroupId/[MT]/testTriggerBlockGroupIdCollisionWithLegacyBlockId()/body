{
  long blockGroupIdInitialValue=blockGrpIdGenerator.getCurrentValue();
  blockGrpIdGenerator.skipTo((blockGrpIdGenerator.getCurrentValue() & ~BLOCK_GROUP_INDEX_MASK) + MAX_BLOCKS_IN_GROUP);
  final long curBlockGroupIdValue=blockGrpIdGenerator.getCurrentValue();
  FSNamesystem fsn=cluster.getNamesystem();
  SequentialBlockIdGenerator blockIdGenerator=spy(fsn.getBlockIdManager().getBlockIdGenerator());
  Whitebox.setInternalState(fsn.getBlockIdManager(),"blockIdGenerator",blockIdGenerator);
  SequentialBlockIdGenerator spySequentialBlockIdGenerator=new SequentialBlockIdGenerator(null){
    @Override public long nextValue(){
      return curBlockGroupIdValue;
    }
  }
;
  final Answer<Object> delegator=new GenericTestUtils.DelegateAnswer(spySequentialBlockIdGenerator);
  doAnswer(delegator).when(blockIdGenerator).nextValue();
  Path path1=new Path("/testCollisionWithLegacyBlock_file1.dat");
  DFSTestUtil.createFile(fs,path1,1024,REPLICATION,SEED);
  List<LocatedBlock> contiguousBlocks=DFSTestUtil.getAllBlocks(fs,path1);
  assertThat(contiguousBlocks.size(),is(1));
  Assert.assertEquals("Unexpected BlockId!",curBlockGroupIdValue,contiguousBlocks.get(0).getBlock().getBlockId());
  blockGrpIdGenerator.setCurrentValue(blockGroupIdInitialValue);
  Path path2=new Path(eczone,"testCollisionWithLegacyBlock_file2.dat");
  DFSTestUtil.createFile(fs,path2,cellSize,fileLen,blockSize,REPLICATION,SEED);
  List<LocatedBlock> blocks2=DFSTestUtil.getAllBlocks(fs,path2);
  assertThat("Wrong BlockGrps",blocks2.size(),is(blockGrpCount));
  for (  LocatedBlock locBlock1 : contiguousBlocks) {
    long blockId1=locBlock1.getBlock().getBlockId();
    for (    LocatedBlock locBlock2 : blocks2) {
      long blockId2=locBlock2.getBlock().getBlockId();
      assertThat("BlockGrpId mismatches!",blockId1,is(not(blockId2)));
    }
  }
}
