{
  InetSocketAddress addr=NetUtils.createSocketAddr(opts.host,opts.getPort());
  if (opts.rpcEngine == ProtobufRpcEngine.class) {
    final TestRpcService proxy=RPC.getProxy(TestRpcService.class,0,addr,conf);
    return new RpcServiceWrapper(){
      @Override public String doEcho(      String msg) throws Exception {
        EchoRequestProto req=EchoRequestProto.newBuilder().setMessage(msg).build();
        EchoResponseProto responseProto=proxy.echo(null,req);
        return responseProto.getMessage();
      }
    }
;
  }
 else   if (opts.rpcEngine == WritableRpcEngine.class) {
    final TestProtocol proxy=(TestProtocol)RPC.getProxy(TestProtocol.class,TestProtocol.versionID,addr,conf);
    return new RpcServiceWrapper(){
      @Override public String doEcho(      String msg) throws Exception {
        return proxy.echo(msg);
      }
    }
;
  }
 else {
    throw new RuntimeException("unsupported engine: " + opts.rpcEngine);
  }
}
