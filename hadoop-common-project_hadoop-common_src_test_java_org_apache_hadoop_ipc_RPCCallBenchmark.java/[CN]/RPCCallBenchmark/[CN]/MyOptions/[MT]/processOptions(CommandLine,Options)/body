{
  if (line.hasOption("help") || line.hasOption('?')) {
    HelpFormatter formatter=new HelpFormatter();
    System.out.println("Protobuf IPC benchmark.");
    System.out.println();
    formatter.printHelp(100,"java ... PBRPCBenchmark [options]","\nSupported options:",opts,"");
    return;
  }
  if (line.hasOption('s')) {
    serverThreads=Integer.parseInt(line.getOptionValue('s'));
  }
  if (line.hasOption('r')) {
    serverReaderThreads=Integer.parseInt(line.getOptionValue('r'));
  }
  if (line.hasOption('c')) {
    clientThreads=Integer.parseInt(line.getOptionValue('c'));
  }
  if (line.hasOption('t')) {
    secondsToRun=Integer.parseInt(line.getOptionValue('t'));
  }
  if (line.hasOption('m')) {
    msgSize=Integer.parseInt(line.getOptionValue('m'));
  }
  if (line.hasOption('p')) {
    port=Integer.parseInt(line.getOptionValue('p'));
  }
  if (line.hasOption('h')) {
    host=line.getOptionValue('h');
  }
  if (line.hasOption('e')) {
    String eng=line.getOptionValue('e');
    if ("protobuf".equals(eng)) {
      rpcEngine=ProtobufRpcEngine.class;
    }
 else     if ("writable".equals(eng)) {
      rpcEngine=WritableRpcEngine.class;
    }
 else {
      throw new ParseException("invalid engine: " + eng);
    }
  }
  String[] remainingArgs=line.getArgs();
  if (remainingArgs.length != 0) {
    throw new ParseException("Extra arguments: " + Joiner.on(" ").join(remainingArgs));
  }
}
