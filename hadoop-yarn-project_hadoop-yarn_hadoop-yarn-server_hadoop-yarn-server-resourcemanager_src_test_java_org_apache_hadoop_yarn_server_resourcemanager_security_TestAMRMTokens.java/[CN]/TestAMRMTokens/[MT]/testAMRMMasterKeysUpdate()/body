{
  final AtomicReference<AMRMTokenSecretManager> spySecretMgrRef=new AtomicReference<AMRMTokenSecretManager>();
  MockRM rm=new MockRM(conf){
    @Override protected void doSecureLogin() throws IOException {
    }
    @Override protected RMSecretManagerService createRMSecretManagerService(){
      return new RMSecretManagerService(conf,rmContext){
        @Override protected AMRMTokenSecretManager createAMRMTokenSecretManager(        Configuration conf,        RMContext rmContext){
          AMRMTokenSecretManager spySecretMgr=spy(super.createAMRMTokenSecretManager(conf,rmContext));
          spySecretMgrRef.set(spySecretMgr);
          return spySecretMgr;
        }
      }
;
    }
  }
;
  rm.start();
  MockNM nm=rm.registerNode("127.0.0.1:1234",8000);
  RMApp app=rm.submitApp(200);
  MockAM am=MockRM.launchAndRegisterAM(app,rm,nm);
  AMRMTokenSecretManager spySecretMgr=spySecretMgrRef.get();
  AllocateResponse response=am.allocate(Records.newRecord(AllocateRequest.class));
  Assert.assertNull(response.getAMRMToken());
  Token<AMRMTokenIdentifier> oldToken=rm.getRMContext().getRMApps().get(app.getApplicationId()).getRMAppAttempt(am.getApplicationAttemptId()).getAMRMToken();
  rm.getRMContext().getAMRMTokenSecretManager().rollMasterKey();
  response=am.allocate(Records.newRecord(AllocateRequest.class));
  Assert.assertNotNull(response.getAMRMToken());
  Token<AMRMTokenIdentifier> amrmToken=ConverterUtils.convertFromYarn(response.getAMRMToken(),new Text(response.getAMRMToken().getService()));
  Assert.assertEquals(amrmToken.decodeIdentifier().getKeyId(),rm.getRMContext().getAMRMTokenSecretManager().getMasterKey().getMasterKey().getKeyId());
  reset(spySecretMgr);
  UserGroupInformation ugi=UserGroupInformation.createUserForTesting(am.getApplicationAttemptId().toString(),new String[0]);
  ugi.addTokenIdentifier(oldToken.decodeIdentifier());
  response=am.doAllocateAs(ugi,Records.newRecord(AllocateRequest.class));
  Assert.assertNotNull(response.getAMRMToken());
  verify(spySecretMgr,never()).createAndGetAMRMToken(isA(ApplicationAttemptId.class));
  response=am.allocate(Records.newRecord(AllocateRequest.class));
  Assert.assertNull(response.getAMRMToken());
  rm.getRMContext().getAMRMTokenSecretManager().activateNextMasterKey();
  response=am.allocate(Records.newRecord(AllocateRequest.class));
  Assert.assertNull(response.getAMRMToken());
  rm.stop();
}
