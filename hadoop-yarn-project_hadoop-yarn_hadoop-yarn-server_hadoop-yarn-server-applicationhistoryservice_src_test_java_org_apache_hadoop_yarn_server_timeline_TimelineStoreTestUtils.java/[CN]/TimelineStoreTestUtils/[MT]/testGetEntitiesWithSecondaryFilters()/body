{
  for (int i=0; i < 4; ++i) {
    EnumSet<Field> fields=null;
    if (i == 1) {
      fields=EnumSet.noneOf(Field.class);
    }
 else     if (i == 2) {
      fields=EnumSet.of(Field.PRIMARY_FILTERS);
    }
 else     if (i == 3) {
      fields=EnumSet.of(Field.OTHER_INFO);
    }
    List<TimelineEntity> entities=getEntitiesWithFilters("type_1",null,goodTestingFilters,fields);
    assertEquals(3,entities.size());
    verifyEntityInfo(entityId1,entityType1,(i == 0 ? events1 : null),(i == 0 ? EMPTY_REL_ENTITIES : null),(i == 0 || i == 2 ? primaryFilters : null),(i == 0 || i == 3 ? otherInfo : null),entities.get(0),domainId1);
    verifyEntityInfo(entityId1b,entityType1,(i == 0 ? events1 : null),(i == 0 ? EMPTY_REL_ENTITIES : null),(i == 0 || i == 2 ? primaryFilters : null),(i == 0 || i == 3 ? otherInfo : null),entities.get(1),domainId1);
    verifyEntityInfo(entityId6,entityType1,(i == 0 ? EMPTY_EVENTS : null),(i == 0 ? EMPTY_REL_ENTITIES : null),(i == 0 || i == 2 ? primaryFilters : null),(i == 0 || i == 3 ? otherInfo : null),entities.get(2),domainId2);
    entities=getEntitiesWithFilters("type_1",userFilter,goodTestingFilters,fields);
    assertEquals(3,entities.size());
    if (i == 0) {
      verifyEntityInfo(entityId1,entityType1,(i == 0 ? events1 : null),(i == 0 ? EMPTY_REL_ENTITIES : null),(i == 0 || i == 2 ? primaryFilters : null),(i == 0 || i == 3 ? otherInfo : null),entities.get(0),domainId1);
      verifyEntityInfo(entityId1b,entityType1,(i == 0 ? events1 : null),(i == 0 ? EMPTY_REL_ENTITIES : null),(i == 0 || i == 2 ? primaryFilters : null),(i == 0 || i == 3 ? otherInfo : null),entities.get(1),domainId1);
      verifyEntityInfo(entityId6,entityType1,(i == 0 ? EMPTY_EVENTS : null),(i == 0 ? EMPTY_REL_ENTITIES : null),(i == 0 || i == 2 ? primaryFilters : null),(i == 0 || i == 3 ? otherInfo : null),entities.get(2),domainId2);
    }
    entities=getEntitiesWithFilters("type_1",null,Collections.singleton(new NameValuePair("user","none")),fields);
    assertEquals(0,entities.size());
    entities=getEntitiesWithFilters("type_1",null,badTestingFilters,fields);
    assertEquals(0,entities.size());
    entities=getEntitiesWithFilters("type_1",userFilter,badTestingFilters,fields);
    assertEquals(0,entities.size());
    entities=getEntitiesWithFilters("type_5",null,badTestingFilters,fields);
    assertEquals(0,entities.size());
  }
}
