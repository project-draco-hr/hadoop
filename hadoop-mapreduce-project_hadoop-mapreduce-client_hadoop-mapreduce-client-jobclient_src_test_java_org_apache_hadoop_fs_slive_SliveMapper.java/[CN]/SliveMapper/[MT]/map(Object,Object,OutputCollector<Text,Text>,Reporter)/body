{
  logAndSetStatus(reporter,"Running slive mapper for dummy key " + key + " and dummy value "+ value);
  Random rnd=config.getRandomSeed() != null ? new Random(this.taskId + config.getRandomSeed()) : new Random();
  WeightSelector selector=new WeightSelector(config,rnd);
  long startTime=Timer.now();
  long opAm=0;
  long sleepOps=0;
  int duration=getConfig().getDurationMilliseconds();
  Range<Long> sleepRange=getConfig().getSleepRange();
  Operation sleeper=null;
  if (sleepRange != null) {
    sleeper=new SleepOp(getConfig(),rnd);
  }
  while (Timer.elapsed(startTime) < duration) {
    try {
      logAndSetStatus(reporter,"Attempting to select operation #" + (opAm + 1));
      int currElapsed=(int)(Timer.elapsed(startTime));
      Operation op=selector.select(currElapsed,duration);
      if (op == null) {
        break;
      }
 else {
        ++opAm;
        runOperation(op,reporter,output,opAm);
      }
      if (sleeper != null) {
        ++sleepOps;
        runOperation(sleeper,reporter,output,sleepOps);
      }
    }
 catch (    Exception e) {
      logAndSetStatus(reporter,"Failed at running due to " + StringUtils.stringifyException(e));
      if (getConfig().shouldExitOnFirstError()) {
        break;
      }
    }
  }
{
    long timeTaken=Timer.elapsed(startTime);
    OperationOutput opCount=new OperationOutput(OutputType.LONG,OP_TYPE,ReportWriter.OP_COUNT,opAm);
    output.collect(opCount.getKey(),opCount.getOutputValue());
    OperationOutput overallTime=new OperationOutput(OutputType.LONG,OP_TYPE,ReportWriter.OK_TIME_TAKEN,timeTaken);
    output.collect(overallTime.getKey(),overallTime.getOutputValue());
    logAndSetStatus(reporter,"Finished " + opAm + " operations in "+ timeTaken+ " milliseconds");
  }
}
