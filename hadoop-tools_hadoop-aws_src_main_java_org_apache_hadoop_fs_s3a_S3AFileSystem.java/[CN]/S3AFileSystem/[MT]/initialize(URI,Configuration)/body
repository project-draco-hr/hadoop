{
  super.initialize(name,conf);
  uri=URI.create(name.getScheme() + "://" + name.getAuthority());
  workingDir=new Path("/user",System.getProperty("user.name")).makeQualified(this.uri,this.getWorkingDirectory());
  AWSAccessKeys creds=getAWSAccessKeys(name,conf);
  AWSCredentialsProviderChain credentials=new AWSCredentialsProviderChain(new BasicAWSCredentialsProvider(creds.getAccessKey(),creds.getAccessSecret()),new InstanceProfileCredentialsProvider(),new AnonymousAWSCredentialsProvider());
  bucket=name.getHost();
  ClientConfiguration awsConf=new ClientConfiguration();
  awsConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS,DEFAULT_MAXIMUM_CONNECTIONS));
  boolean secureConnections=conf.getBoolean(SECURE_CONNECTIONS,DEFAULT_SECURE_CONNECTIONS);
  awsConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);
  awsConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES,DEFAULT_MAX_ERROR_RETRIES));
  awsConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT,DEFAULT_ESTABLISH_TIMEOUT));
  awsConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT,DEFAULT_SOCKET_TIMEOUT));
  String signerOverride=conf.getTrimmed(SIGNING_ALGORITHM,"");
  if (!signerOverride.isEmpty()) {
    awsConf.setSignerOverride(signerOverride);
  }
  initProxySupport(conf,awsConf,secureConnections);
  initAmazonS3Client(conf,credentials,awsConf);
  maxKeys=conf.getInt(MAX_PAGING_KEYS,DEFAULT_MAX_PAGING_KEYS);
  partSize=conf.getLong(MULTIPART_SIZE,DEFAULT_MULTIPART_SIZE);
  multiPartThreshold=conf.getLong(MIN_MULTIPART_THRESHOLD,DEFAULT_MIN_MULTIPART_THRESHOLD);
  enableMultiObjectsDelete=conf.getBoolean(ENABLE_MULTI_DELETE,true);
  if (partSize < 5 * 1024 * 1024) {
    LOG.error(MULTIPART_SIZE + " must be at least 5 MB");
    partSize=5 * 1024 * 1024;
  }
  if (multiPartThreshold < 5 * 1024 * 1024) {
    LOG.error(MIN_MULTIPART_THRESHOLD + " must be at least 5 MB");
    multiPartThreshold=5 * 1024 * 1024;
  }
  int maxThreads=conf.getInt(MAX_THREADS,DEFAULT_MAX_THREADS);
  if (maxThreads < 2) {
    LOG.warn(MAX_THREADS + " must be at least 2: forcing to 2.");
    maxThreads=2;
  }
  int totalTasks=conf.getInt(MAX_TOTAL_TASKS,DEFAULT_MAX_TOTAL_TASKS);
  if (totalTasks < 1) {
    LOG.warn(MAX_TOTAL_TASKS + "must be at least 1: forcing to 1.");
    totalTasks=1;
  }
  long keepAliveTime=conf.getLong(KEEPALIVE_TIME,DEFAULT_KEEPALIVE_TIME);
  threadPoolExecutor=new BlockingThreadPoolExecutorService(maxThreads,maxThreads + totalTasks,keepAliveTime,TimeUnit.SECONDS,"s3a-transfer-shared");
  initTransferManager();
  initCannedAcls(conf);
  if (!s3.doesBucketExist(bucket)) {
    throw new IOException("Bucket " + bucket + " does not exist");
  }
  initMultipartUploads(conf);
  serverSideEncryptionAlgorithm=conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM);
  setConf(conf);
}
