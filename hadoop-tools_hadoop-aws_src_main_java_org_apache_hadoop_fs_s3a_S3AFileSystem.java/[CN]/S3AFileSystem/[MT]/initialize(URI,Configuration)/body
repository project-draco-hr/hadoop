{
  super.initialize(name,conf);
  setConf(conf);
  try {
    instrumentation=new S3AInstrumentation(name);
    uri=URI.create(name.getScheme() + "://" + name.getAuthority());
    workingDir=new Path("/user",System.getProperty("user.name")).makeQualified(this.uri,this.getWorkingDirectory());
    bucket=name.getHost();
    AWSCredentialsProvider credentials=getAWSCredentialsProvider(name,conf);
    ClientConfiguration awsConf=new ClientConfiguration();
    awsConf.setMaxConnections(intOption(conf,MAXIMUM_CONNECTIONS,DEFAULT_MAXIMUM_CONNECTIONS,1));
    boolean secureConnections=conf.getBoolean(SECURE_CONNECTIONS,DEFAULT_SECURE_CONNECTIONS);
    awsConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);
    awsConf.setMaxErrorRetry(intOption(conf,MAX_ERROR_RETRIES,DEFAULT_MAX_ERROR_RETRIES,0));
    awsConf.setConnectionTimeout(intOption(conf,ESTABLISH_TIMEOUT,DEFAULT_ESTABLISH_TIMEOUT,0));
    awsConf.setSocketTimeout(intOption(conf,SOCKET_TIMEOUT,DEFAULT_SOCKET_TIMEOUT,0));
    String signerOverride=conf.getTrimmed(SIGNING_ALGORITHM,"");
    if (!signerOverride.isEmpty()) {
      LOG.debug("Signer override = {}",signerOverride);
      awsConf.setSignerOverride(signerOverride);
    }
    initProxySupport(conf,awsConf,secureConnections);
    initUserAgent(conf,awsConf);
    initAmazonS3Client(conf,credentials,awsConf);
    maxKeys=intOption(conf,MAX_PAGING_KEYS,DEFAULT_MAX_PAGING_KEYS,1);
    partSize=conf.getLong(MULTIPART_SIZE,DEFAULT_MULTIPART_SIZE);
    if (partSize < 5 * 1024 * 1024) {
      LOG.error(MULTIPART_SIZE + " must be at least 5 MB");
      partSize=5 * 1024 * 1024;
    }
    multiPartThreshold=conf.getLong(MIN_MULTIPART_THRESHOLD,DEFAULT_MIN_MULTIPART_THRESHOLD);
    if (multiPartThreshold < 5 * 1024 * 1024) {
      LOG.error(MIN_MULTIPART_THRESHOLD + " must be at least 5 MB");
      multiPartThreshold=5 * 1024 * 1024;
    }
    longOption(conf,FS_S3A_BLOCK_SIZE,DEFAULT_BLOCKSIZE,1);
    enableMultiObjectsDelete=conf.getBoolean(ENABLE_MULTI_DELETE,true);
    readAhead=longOption(conf,READAHEAD_RANGE,DEFAULT_READAHEAD_RANGE,0);
    int maxThreads=conf.getInt(MAX_THREADS,DEFAULT_MAX_THREADS);
    if (maxThreads < 2) {
      LOG.warn(MAX_THREADS + " must be at least 2: forcing to 2.");
      maxThreads=2;
    }
    int totalTasks=conf.getInt(MAX_TOTAL_TASKS,DEFAULT_MAX_TOTAL_TASKS);
    if (totalTasks < 1) {
      LOG.warn(MAX_TOTAL_TASKS + "must be at least 1: forcing to 1.");
      totalTasks=1;
    }
    long keepAliveTime=conf.getLong(KEEPALIVE_TIME,DEFAULT_KEEPALIVE_TIME);
    threadPoolExecutor=new BlockingThreadPoolExecutorService(maxThreads,maxThreads + totalTasks,keepAliveTime,TimeUnit.SECONDS,"s3a-transfer-shared");
    initTransferManager();
    initCannedAcls(conf);
    verifyBucketExists();
    initMultipartUploads(conf);
    serverSideEncryptionAlgorithm=conf.getTrimmed(SERVER_SIDE_ENCRYPTION_ALGORITHM);
  }
 catch (  AmazonClientException e) {
    throw translateException("initializing ",new Path(name),e);
  }
}
