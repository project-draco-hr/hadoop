{
  AWSCredentialsProvider credentials;
  String className=conf.getTrimmed(AWS_CREDENTIALS_PROVIDER);
  if (StringUtils.isEmpty(className)) {
    S3xLoginHelper.Login creds=getAWSAccessKeys(binding,conf);
    credentials=new AWSCredentialsProviderChain(new BasicAWSCredentialsProvider(creds.getUser(),creds.getPassword()),new InstanceProfileCredentialsProvider(),new EnvironmentVariableCredentialsProvider());
  }
 else {
    try {
      LOG.debug("Credential provider class is {}",className);
      Class<?> credClass=Class.forName(className);
      try {
        credentials=(AWSCredentialsProvider)credClass.getDeclaredConstructor(URI.class,Configuration.class).newInstance(this.uri,conf);
      }
 catch (      NoSuchMethodException|SecurityException e) {
        credentials=(AWSCredentialsProvider)credClass.getDeclaredConstructor().newInstance();
      }
    }
 catch (    ClassNotFoundException e) {
      throw new IOException(className + " not found.",e);
    }
catch (    NoSuchMethodException|SecurityException e) {
      throw new IOException(String.format("%s constructor exception.  A " + "class specified in %s must provide an accessible constructor " + "accepting URI and Configuration, or an accessible default "+ "constructor.",className,AWS_CREDENTIALS_PROVIDER),e);
    }
catch (    ReflectiveOperationException|IllegalArgumentException e) {
      throw new IOException(className + " instantiation exception.",e);
    }
    LOG.debug("Using {} for {}.",credentials,this.uri);
  }
  return credentials;
}
