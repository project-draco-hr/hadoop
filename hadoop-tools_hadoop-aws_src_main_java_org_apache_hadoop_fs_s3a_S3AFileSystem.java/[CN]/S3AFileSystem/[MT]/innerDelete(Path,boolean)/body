{
  LOG.debug("Delete path {} - recursive {}",f,recursive);
  S3AFileStatus status;
  try {
    status=getFileStatus(f);
  }
 catch (  FileNotFoundException e) {
    LOG.debug("Couldn't delete {} - does not exist",f);
    instrumentation.errorIgnored();
    return false;
  }
  String key=pathToKey(f);
  if (status.isDirectory()) {
    LOG.debug("delete: Path is a directory: {}",f);
    if (!recursive && !status.isEmptyDirectory()) {
      throw new IOException("Path is a folder: " + f + " and it is not an empty directory");
    }
    if (!key.endsWith("/")) {
      key=key + "/";
    }
    if (key.equals("/")) {
      LOG.info("s3a cannot delete the root directory");
      return false;
    }
    if (status.isEmptyDirectory()) {
      LOG.debug("Deleting fake empty directory {}",key);
      s3.deleteObject(bucket,key);
      instrumentation.directoryDeleted();
      statistics.incrementWriteOps(1);
    }
 else {
      LOG.debug("Getting objects for directory prefix {} to delete",key);
      ListObjectsRequest request=new ListObjectsRequest();
      request.setBucketName(bucket);
      request.setPrefix(key);
      request.setMaxKeys(maxKeys);
      List<DeleteObjectsRequest.KeyVersion> keys=new ArrayList<>();
      ObjectListing objects=s3.listObjects(request);
      statistics.incrementReadOps(1);
      while (true) {
        for (        S3ObjectSummary summary : objects.getObjectSummaries()) {
          keys.add(new DeleteObjectsRequest.KeyVersion(summary.getKey()));
          LOG.debug("Got object to delete {}",summary.getKey());
          if (keys.size() == MAX_ENTRIES_TO_DELETE) {
            removeKeys(keys,true);
          }
        }
        if (objects.isTruncated()) {
          objects=s3.listNextBatchOfObjects(objects);
          statistics.incrementReadOps(1);
        }
 else {
          if (!keys.isEmpty()) {
            removeKeys(keys,false);
          }
          break;
        }
      }
    }
  }
 else {
    LOG.debug("delete: Path is a file");
    s3.deleteObject(bucket,key);
    instrumentation.fileDeleted(1);
    statistics.incrementWriteOps(1);
  }
  createFakeDirectoryIfNecessary(f.getParent());
  return true;
}
