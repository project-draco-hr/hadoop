{
  int numThreads=100;
  Phase[] phases={LOADING_FSIMAGE,LOADING_FSIMAGE,LOADING_EDITS,LOADING_EDITS};
  Step[] steps=new Step[]{new Step(INODES),new Step(DELEGATION_KEYS),new Step(INODES),new Step(DELEGATION_KEYS)};
  String[] files={"file1","file1","file2","file2"};
  long[] sizes={1000L,1000L,2000L,2000L};
  long[] totals={10000L,20000L,30000L,40000L};
  ExecutorService exec=Executors.newFixedThreadPool(numThreads);
  try {
    for (int i=0; i < numThreads; ++i) {
      final Phase phase=phases[i % phases.length];
      final Step step=steps[i % steps.length];
      final String file=files[i % files.length];
      final long size=sizes[i % sizes.length];
      final long total=totals[i % totals.length];
      exec.submit(new Callable<Void>(){
        @Override public Void call(){
          startupProgress.beginPhase(phase);
          startupProgress.setFile(phase,file);
          startupProgress.setSize(phase,size);
          startupProgress.setTotal(phase,step,total);
          incrementCounter(startupProgress,phase,step,100L);
          startupProgress.endStep(phase,step);
          startupProgress.endPhase(phase);
          return null;
        }
      }
);
    }
  }
  finally {
    exec.shutdown();
    assertTrue(exec.awaitTermination(10000L,TimeUnit.MILLISECONDS));
  }
  StartupProgressView view=startupProgress.createView();
  assertNotNull(view);
  assertEquals("file1",view.getFile(LOADING_FSIMAGE));
  assertEquals(1000L,view.getSize(LOADING_FSIMAGE));
  assertEquals(10000L,view.getTotal(LOADING_FSIMAGE,new Step(INODES)));
  assertEquals(2500L,view.getCount(LOADING_FSIMAGE,new Step(INODES)));
  assertEquals(20000L,view.getTotal(LOADING_FSIMAGE,new Step(DELEGATION_KEYS)));
  assertEquals(2500L,view.getCount(LOADING_FSIMAGE,new Step(DELEGATION_KEYS)));
  assertEquals("file2",view.getFile(LOADING_EDITS));
  assertEquals(2000L,view.getSize(LOADING_EDITS));
  assertEquals(30000L,view.getTotal(LOADING_EDITS,new Step(INODES)));
  assertEquals(2500L,view.getCount(LOADING_EDITS,new Step(INODES)));
  assertEquals(40000L,view.getTotal(LOADING_EDITS,new Step(DELEGATION_KEYS)));
  assertEquals(2500L,view.getCount(LOADING_EDITS,new Step(DELEGATION_KEYS)));
}
