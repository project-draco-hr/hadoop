{
  TaskAttemptID attemptID=task.getTaskID();
  JobConf conf=task.conf;
  Vector<String> vargs=new Vector<String>(8);
  vargs.add("exec");
  vargs.add(javaHome + "/bin/java");
  String javaOpts=getChildJavaOpts(conf,task.isMapTask());
  javaOpts=javaOpts.replace("@taskid@",attemptID.toString());
  String[] javaOptsSplit=javaOpts.split(" ");
  String libraryPath=workDir;
  boolean hasUserLDPath=false;
  for (int i=0; i < javaOptsSplit.length; i++) {
    if (javaOptsSplit[i].startsWith("-Djava.library.path=")) {
      javaOptsSplit[i]+=SYSTEM_PATH_SEPARATOR + libraryPath;
      hasUserLDPath=true;
      break;
    }
  }
  if (!hasUserLDPath) {
    vargs.add("-Djava.library.path=" + libraryPath);
  }
  for (int i=0; i < javaOptsSplit.length; i++) {
    vargs.add(javaOptsSplit[i]);
  }
  if (childTmpDir != null) {
    vargs.add("-Djava.io.tmpdir=" + childTmpDir);
  }
  long logSize=TaskLog.getTaskLogLength(conf);
  setupLog4jProperties(vargs,logSize,logDir);
  if (conf.getProfileEnabled()) {
    if (conf.getProfileTaskRange(task.isMapTask()).isIncluded(task.getPartition())) {
      File prof=getTaskLogFile(logDir,TaskLog.LogName.PROFILE);
      vargs.add(String.format(conf.getProfileParams(),prof.toString()));
    }
  }
  vargs.add(YarnChild.class.getName());
  vargs.add(taskAttemptListenerAddr.getAddress().getHostAddress());
  vargs.add(Integer.toString(taskAttemptListenerAddr.getPort()));
  vargs.add(attemptID.toString());
  vargs.add(String.valueOf(jvmID.getId()));
  vargs.add("1>" + getTaskLogFile(logDir,TaskLog.LogName.STDERR));
  vargs.add("2>" + getTaskLogFile(logDir,TaskLog.LogName.STDOUT));
  StringBuilder mergedCommand=new StringBuilder();
  for (  CharSequence str : vargs) {
    mergedCommand.append(str).append(" ");
  }
  Vector<String> vargsFinal=new Vector<String>(1);
  vargsFinal.add(mergedCommand.toString());
  return vargsFinal;
}
