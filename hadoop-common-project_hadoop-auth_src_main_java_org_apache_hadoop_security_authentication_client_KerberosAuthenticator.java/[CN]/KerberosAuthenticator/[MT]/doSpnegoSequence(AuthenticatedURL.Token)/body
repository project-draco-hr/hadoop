{
  try {
    AccessControlContext context=AccessController.getContext();
    Subject subject=Subject.getSubject(context);
    if (subject == null || (!KerberosUtil.hasKerberosKeyTab(subject) && !KerberosUtil.hasKerberosTicket(subject))) {
      LOG.debug("No subject in context, logging in");
      subject=new Subject();
      LoginContext login=new LoginContext("",subject,null,new KerberosConfiguration());
      login.login();
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Using subject: " + subject);
    }
    Subject.doAs(subject,new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        GSSContext gssContext=null;
        try {
          GSSManager gssManager=GSSManager.getInstance();
          String servicePrincipal=KerberosUtil.getServicePrincipal("HTTP",KerberosAuthenticator.this.url.getHost());
          Oid oid=KerberosUtil.getOidInstance("NT_GSS_KRB5_PRINCIPAL");
          GSSName serviceName=gssManager.createName(servicePrincipal,oid);
          oid=KerberosUtil.getOidInstance("GSS_KRB5_MECH_OID");
          gssContext=gssManager.createContext(serviceName,oid,null,GSSContext.DEFAULT_LIFETIME);
          gssContext.requestCredDeleg(true);
          gssContext.requestMutualAuth(true);
          byte[] inToken=new byte[0];
          byte[] outToken;
          boolean established=false;
          while (!established) {
            outToken=gssContext.initSecContext(inToken,0,inToken.length);
            if (outToken != null) {
              sendToken(outToken);
            }
            if (!gssContext.isEstablished()) {
              inToken=readToken();
            }
 else {
              established=true;
            }
          }
        }
  finally {
          if (gssContext != null) {
            gssContext.dispose();
            gssContext=null;
          }
        }
        return null;
      }
    }
);
  }
 catch (  PrivilegedActionException ex) {
    if (ex.getException() instanceof IOException) {
      throw (IOException)ex.getException();
    }
 else {
      throw new AuthenticationException(ex.getException());
    }
  }
catch (  LoginException ex) {
    throw new AuthenticationException(ex);
  }
  AuthenticatedURL.extractToken(conn,token);
}
