{
  fsd.writeLock();
  try {
    final INodeFile fileINode=inodesInPath.getLastINode().asFile();
    Preconditions.checkState(fileINode.isUnderConstruction());
    final BlockInfo blockInfo;
    if (isStriped) {
      ErasureCodingPolicy ecPolicy=FSDirErasureCodingOp.getErasureCodingPolicy(fsd.getFSNamesystem(),inodesInPath);
      short numDataUnits=(short)ecPolicy.getNumDataUnits();
      short numParityUnits=(short)ecPolicy.getNumParityUnits();
      short numLocations=(short)(numDataUnits + numParityUnits);
      fsd.updateCount(inodesInPath,0,fileINode.getPreferredBlockSize(),numLocations,true);
      blockInfo=new BlockInfoStriped(block,ecPolicy);
      blockInfo.convertToBlockUnderConstruction(HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION,targets);
    }
 else {
      fsd.updateCount(inodesInPath,0,fileINode.getPreferredBlockSize(),fileINode.getFileReplication(),true);
      short numLocations=fileINode.getFileReplication();
      blockInfo=new BlockInfoContiguous(block,numLocations);
      blockInfo.convertToBlockUnderConstruction(HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION,targets);
    }
    fsd.getBlockManager().addBlockCollection(blockInfo,fileINode);
    fileINode.addBlock(blockInfo);
    if (NameNode.stateChangeLog.isDebugEnabled()) {
      NameNode.stateChangeLog.debug("DIR* FSDirectory.addBlock: " + path + " with "+ block+ " block is added to the in-memory "+ "file system");
    }
    return blockInfo;
  }
  finally {
    fsd.writeUnlock();
  }
}
