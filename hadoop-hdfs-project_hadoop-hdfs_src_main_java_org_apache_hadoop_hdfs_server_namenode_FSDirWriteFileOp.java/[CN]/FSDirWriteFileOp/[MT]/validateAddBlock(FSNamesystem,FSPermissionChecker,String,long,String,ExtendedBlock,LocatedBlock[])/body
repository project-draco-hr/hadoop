{
  final long blockSize;
  final int replication;
  final byte storagePolicyID;
  String clientMachine;
  byte[][] pathComponents=FSDirectory.getPathComponentsForReservedPath(src);
  src=fsn.dir.resolvePath(pc,src,pathComponents);
  FileState fileState=analyzeFileState(fsn,src,fileId,clientName,previous,onRetryBlock);
  final INodeFile pendingFile=fileState.inode;
  if (!fsn.checkFileProgress(src,pendingFile,false)) {
    throw new NotReplicatedYetException("Not replicated yet: " + src);
  }
  if (onRetryBlock[0] != null && onRetryBlock[0].getLocations().length > 0) {
    return null;
  }
  if (pendingFile.getBlocks().length >= fsn.maxBlocksPerFile) {
    throw new IOException("File has reached the limit on maximum number of" + " blocks (" + DFSConfigKeys.DFS_NAMENODE_MAX_BLOCKS_PER_FILE_KEY + "): "+ pendingFile.getBlocks().length+ " >= "+ fsn.maxBlocksPerFile);
  }
  blockSize=pendingFile.getPreferredBlockSize();
  clientMachine=pendingFile.getFileUnderConstructionFeature().getClientMachine();
  replication=pendingFile.getFileReplication();
  storagePolicyID=pendingFile.getStoragePolicyID();
  return new ValidateAddBlockResult(blockSize,replication,storagePolicyID,clientMachine);
}
