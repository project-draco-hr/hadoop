{
  int numMaps=2;
  int numReds=2;
  JobConf conf=new JobConf();
  conf.setNumMapTasks(numMaps);
  conf.setNumReduceTasks(numReds);
  MyFakeJobInProgress jspy=spy(new MyFakeJobInProgress(conf,jobTracker));
  jspy.initTasks();
  TaskAttemptID tid;
  for (int i=0; i < numMaps; i++) {
    jspy.maps[i].setExecStartTime(i + 1);
    tid=jspy.findAndRunNewTask(true,trackers[i],hosts[i],clusterSize,numUniqueHosts);
    jspy.finishTask(tid);
  }
  for (int i=0; i < numReds; i++) {
    jspy.reduces[i].setExecStartTime(i + numMaps + 1);
    tid=jspy.findAndRunNewTask(false,trackers[i],hosts[i],clusterSize,numUniqueHosts);
    jspy.finishTask(tid);
  }
  verify(jspy,times(4)).setFirstTaskLaunchTime(any(TaskInProgress.class));
  ClusterStatus cspy=spy(new ClusterStatus(4,0,0,0,0,4,4,JobTrackerStatus.RUNNING,0));
  JobInProgress.JobSummary.logJobSummary(jspy,cspy);
  verify(jspy).getStatus();
  verify(jspy).getProfile();
  verify(jspy,atLeastOnce()).getJobCounters();
  verify(jspy,atLeastOnce()).getJobID();
  verify(jspy).getStartTime();
  verify(jspy).getFirstTaskLaunchTimes();
  verify(jspy).getFinishTime();
  verify(jspy).getTasks(TaskType.MAP);
  verify(jspy).getTasks(TaskType.REDUCE);
  verify(jspy).getNumSlotsPerMap();
  verify(jspy).getNumSlotsPerReduce();
  verify(cspy).getMaxMapTasks();
  verify(cspy).getMaxReduceTasks();
  assertEquals("firstMapTaskLaunchTime",1,jspy.getFirstTaskLaunchTimes().get(TaskType.MAP).longValue());
  assertEquals("firstReduceTaskLaunchTime",3,jspy.getFirstTaskLaunchTimes().get(TaskType.REDUCE).longValue());
}
