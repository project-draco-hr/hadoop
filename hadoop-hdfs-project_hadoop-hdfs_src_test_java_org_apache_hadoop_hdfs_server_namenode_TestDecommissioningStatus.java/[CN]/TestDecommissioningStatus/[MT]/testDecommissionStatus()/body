{
  InetSocketAddress addr=new InetSocketAddress("localhost",cluster.getNameNodePort());
  DFSClient client=new DFSClient(addr,conf);
  DatanodeInfo[] info=client.datanodeReport(DatanodeReportType.LIVE);
  assertEquals("Number of Datanodes ",2,info.length);
  DistributedFileSystem fileSys=cluster.getFileSystem();
  DFSAdmin admin=new DFSAdmin(cluster.getConfiguration(0));
  short replicas=numDatanodes;
  Path file1=new Path("decommission.dat");
  DFSTestUtil.createFile(fileSys,file1,fileSize,fileSize,blockSize,replicas,seed);
  Path file2=new Path("decommission1.dat");
  FSDataOutputStream st1=writeIncompleteFile(fileSys,file2,replicas);
  for (  DataNode d : cluster.getDataNodes()) {
    DataNodeTestUtils.triggerBlockReport(d);
  }
  FSNamesystem fsn=cluster.getNamesystem();
  final DatanodeManager dm=fsn.getBlockManager().getDatanodeManager();
  for (int iteration=0; iteration < numDatanodes; iteration++) {
    String downnode=decommissionNode(fsn,client,localFileSys,iteration);
    dm.refreshNodes(conf);
    decommissionedNodes.add(downnode);
    BlockManagerTestUtil.recheckDecommissionState(dm);
    final List<DatanodeDescriptor> decommissioningNodes=dm.getDecommissioningNodes();
    if (iteration == 0) {
      assertEquals(decommissioningNodes.size(),1);
      DatanodeDescriptor decommNode=decommissioningNodes.get(0);
      checkDecommissionStatus(decommNode,3,0,1);
      checkDFSAdminDecommissionStatus(decommissioningNodes.subList(0,1),fileSys,admin);
    }
 else {
      assertEquals(decommissioningNodes.size(),2);
      DatanodeDescriptor decommNode1=decommissioningNodes.get(0);
      DatanodeDescriptor decommNode2=decommissioningNodes.get(1);
      checkDecommissionStatus(decommNode1,3,3,1);
      checkDecommissionStatus(decommNode2,4,4,2);
      checkDFSAdminDecommissionStatus(decommissioningNodes.subList(0,2),fileSys,admin);
    }
  }
  writeConfigFile(localFileSys,excludeFile,null);
  dm.refreshNodes(conf);
  st1.close();
  cleanupFile(fileSys,file1);
  cleanupFile(fileSys,file2);
}
