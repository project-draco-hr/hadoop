{
  if (jobBeingTraced != null) {
    if (omitTaskDetails) {
      jobBeingTraced.setMapTasks(null);
      jobBeingTraced.setReduceTasks(null);
      jobBeingTraced.setOtherTasks(null);
    }
    jobBeingTraced.setSuccessfulMapAttemptCDFs(mapCDFArrayList(successfulMapAttemptTimes));
    jobBeingTraced.setFailedMapAttemptCDFs(mapCDFArrayList(failedMapAttemptTimes));
    LoggedDiscreteCDF discCDF=new LoggedDiscreteCDF();
    discCDF.setCDF(successfulReduceAttemptTimes,attemptTimesPercentiles,100);
    jobBeingTraced.setSuccessfulReduceAttemptCDF(discCDF);
    discCDF=new LoggedDiscreteCDF();
    discCDF.setCDF(failedReduceAttemptTimes,attemptTimesPercentiles,100);
    jobBeingTraced.setFailedReduceAttemptCDF(discCDF);
    long totalSuccessfulAttempts=0L;
    long maxTriesToSucceed=0L;
    for (    Map.Entry<Long,Long> ent : successfulNthMapperAttempts) {
      totalSuccessfulAttempts+=ent.getValue();
      maxTriesToSucceed=Math.max(maxTriesToSucceed,ent.getKey());
    }
    if (totalSuccessfulAttempts > 0L) {
      double[] successAfterI=new double[(int)maxTriesToSucceed + 1];
      for (int i=0; i < successAfterI.length; ++i) {
        successAfterI[i]=0.0D;
      }
      for (      Map.Entry<Long,Long> ent : successfulNthMapperAttempts) {
        successAfterI[ent.getKey().intValue()]=((double)ent.getValue()) / totalSuccessfulAttempts;
      }
      jobBeingTraced.setMapperTriesToSucceed(successAfterI);
    }
 else {
      jobBeingTraced.setMapperTriesToSucceed(null);
    }
    jobTraceGen.writeObject(jobBeingTraced);
    jobTraceGen.writeRaw("\n");
    jobBeingTraced=null;
  }
}
