{
  StripedFileTestUtil.verifyLength(dfs,srcPath,length);
  Arrays.sort(killedDnIndex);
  List<List<LocatedBlock>> blockGroupList=new ArrayList<>();
  LocatedBlocks lbs=dfs.getClient().getLocatedBlocks(srcPath.toString(),0L,Long.MAX_VALUE);
  int expectedNumGroup=0;
  if (length > 0) {
    expectedNumGroup=(length - 1) / BLOCK_GROUP_SIZE + 1;
  }
  assertEquals(expectedNumGroup,lbs.getLocatedBlocks().size());
  for (  LocatedBlock firstBlock : lbs.getLocatedBlocks()) {
    Assert.assertTrue(firstBlock instanceof LocatedStripedBlock);
    final long gs=firstBlock.getBlock().getGenerationStamp();
    final String s="gs=" + gs + ", oldGS="+ oldGS;
    LOG.info(s);
    Assert.assertTrue(s,gs >= oldGS);
    LocatedBlock[] blocks=StripedBlockUtil.parseStripedBlockGroup((LocatedStripedBlock)firstBlock,BLOCK_STRIPED_CELL_SIZE,NUM_DATA_BLOCKS,NUM_PARITY_BLOCKS);
    blockGroupList.add(Arrays.asList(blocks));
  }
  for (int group=0; group < blockGroupList.size(); group++) {
    final boolean isLastGroup=group == blockGroupList.size() - 1;
    final int groupSize=!isLastGroup ? BLOCK_GROUP_SIZE : length - (blockGroupList.size() - 1) * BLOCK_GROUP_SIZE;
    final int numCellInGroup=(groupSize - 1) / BLOCK_STRIPED_CELL_SIZE + 1;
    final int lastCellIndex=(numCellInGroup - 1) % NUM_DATA_BLOCKS;
    final int lastCellSize=groupSize - (numCellInGroup - 1) * BLOCK_STRIPED_CELL_SIZE;
    List<LocatedBlock> blockList=blockGroupList.get(group);
    byte[][] dataBlockBytes=new byte[NUM_DATA_BLOCKS][];
    byte[][] parityBlockBytes=new byte[NUM_PARITY_BLOCKS][];
    for (int i=0; i < blockList.size(); i++) {
      final int j=i >= NUM_DATA_BLOCKS ? 0 : i;
      final int numCellInBlock=(numCellInGroup - 1) / NUM_DATA_BLOCKS + (j <= lastCellIndex ? 1 : 0);
      final int blockSize=numCellInBlock * BLOCK_STRIPED_CELL_SIZE + (isLastGroup && j == lastCellIndex ? lastCellSize - BLOCK_STRIPED_CELL_SIZE : 0);
      final byte[] blockBytes=new byte[blockSize];
      if (i < NUM_DATA_BLOCKS) {
        dataBlockBytes[i]=blockBytes;
      }
 else {
        parityBlockBytes[i - NUM_DATA_BLOCKS]=blockBytes;
      }
      final LocatedBlock lb=blockList.get(i);
      LOG.info("i,j=" + i + ", "+ j+ ", numCellInBlock="+ numCellInBlock+ ", blockSize="+ blockSize+ ", lb="+ lb);
      if (lb == null) {
        continue;
      }
      final ExtendedBlock block=lb.getBlock();
      assertEquals(blockSize,block.getNumBytes());
      if (block.getNumBytes() == 0) {
        continue;
      }
      if (Arrays.binarySearch(killedDnIndex,i) < 0) {
        final BlockReader blockReader=BlockReaderTestUtil.getBlockReader(dfs,lb,0,block.getNumBytes());
        blockReader.readAll(blockBytes,0,(int)block.getNumBytes());
        blockReader.close();
      }
    }
    final int groupPosInFile=group * BLOCK_GROUP_SIZE;
    for (int i=0; i < dataBlockBytes.length; i++) {
      boolean killed=false;
      if (Arrays.binarySearch(killedDnIndex,i) >= 0) {
        killed=true;
      }
      final byte[] actual=dataBlockBytes[i];
      for (int posInBlk=0; posInBlk < actual.length; posInBlk++) {
        final long posInFile=StripedBlockUtil.offsetInBlkToOffsetInBG(BLOCK_STRIPED_CELL_SIZE,NUM_DATA_BLOCKS,posInBlk,i) + groupPosInFile;
        Assert.assertTrue(posInFile < length);
        final byte expected=getByte(posInFile);
        if (killed) {
          actual[posInBlk]=expected;
        }
 else {
          if (expected != actual[posInBlk]) {
            String s="expected=" + expected + " but actual="+ actual[posInBlk]+ ", posInFile="+ posInFile+ ", posInBlk="+ posInBlk+ ". group="+ group+ ", i="+ i;
            Assert.fail(s);
          }
        }
      }
    }
    verifyParityBlocks(dfs.getConf(),lbs.getLocatedBlocks().get(group).getBlockSize(),BLOCK_STRIPED_CELL_SIZE,dataBlockBytes,parityBlockBytes,killedDnIndex);
  }
}
