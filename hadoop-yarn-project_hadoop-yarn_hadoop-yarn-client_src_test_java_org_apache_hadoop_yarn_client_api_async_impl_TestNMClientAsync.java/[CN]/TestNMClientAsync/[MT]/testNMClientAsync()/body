{
  Configuration conf=new Configuration();
  conf.setInt(YarnConfiguration.NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE,10);
  int expectedSuccess=40;
  int expectedFailure=40;
  asyncClient=new MockNMClientAsync1(expectedSuccess,expectedFailure);
  asyncClient.init(conf);
  Assert.assertEquals("The max thread pool size is not correctly set",10,asyncClient.maxThreadPoolSize);
  asyncClient.start();
  for (int i=0; i < expectedSuccess + expectedFailure; ++i) {
    if (i == expectedSuccess) {
      while (!((TestCallbackHandler1)asyncClient.getCallbackHandler()).isAllSuccessCallsExecuted()) {
        Thread.sleep(10);
      }
      asyncClient.setClient(mockNMClient(1));
    }
    Container container=mockContainer(i);
    ContainerLaunchContext clc=recordFactory.newRecordInstance(ContainerLaunchContext.class);
    asyncClient.startContainerAsync(container,clc);
  }
  while (!((TestCallbackHandler1)asyncClient.getCallbackHandler()).isStartAndQueryFailureCallsExecuted()) {
    Thread.sleep(10);
  }
  asyncClient.setClient(mockNMClient(2));
  ((TestCallbackHandler1)asyncClient.getCallbackHandler()).path=false;
  for (int i=0; i < expectedFailure; ++i) {
    Container container=mockContainer(expectedSuccess + expectedFailure + i);
    ContainerLaunchContext clc=recordFactory.newRecordInstance(ContainerLaunchContext.class);
    asyncClient.startContainerAsync(container,clc);
  }
  while (!((TestCallbackHandler1)asyncClient.getCallbackHandler()).isStopFailureCallsExecuted()) {
    Thread.sleep(10);
  }
  for (  String errorMsg : ((TestCallbackHandler1)asyncClient.getCallbackHandler()).errorMsgs) {
    System.out.println(errorMsg);
  }
  Assert.assertEquals("Error occurs in CallbackHandler",0,((TestCallbackHandler1)asyncClient.getCallbackHandler()).errorMsgs.size());
  for (  String errorMsg : ((MockNMClientAsync1)asyncClient).errorMsgs) {
    System.out.println(errorMsg);
  }
  Assert.assertEquals("Error occurs in ContainerEventProcessor",0,((MockNMClientAsync1)asyncClient).errorMsgs.size());
  while (asyncClient.containers.size() > 0) {
    Thread.sleep(10);
  }
  asyncClient.stop();
  Assert.assertFalse("The thread of Container Management Event Dispatcher is still alive",asyncClient.eventDispatcherThread.isAlive());
  Assert.assertTrue("The thread pool is not shut down",asyncClient.threadPool.isShutdown());
}
