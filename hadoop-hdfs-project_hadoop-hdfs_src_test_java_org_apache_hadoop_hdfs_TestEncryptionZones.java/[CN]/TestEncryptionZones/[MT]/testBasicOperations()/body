{
  int numZones=0;
  final Path zoneParent=new Path("/zones");
  final Path zone1=new Path(zoneParent,"zone1");
  try {
    dfsAdmin.createEncryptionZone(zone1,TEST_KEY);
    fail("expected /test doesn't exist");
  }
 catch (  IOException e) {
    assertExceptionContains("cannot find",e);
  }
  fsWrapper.mkdir(zone1,FsPermission.getDirDefault(),true);
  dfsAdmin.createEncryptionZone(zone1,TEST_KEY);
  assertNumZones(++numZones);
  assertZonePresent(null,zone1.toString());
  try {
    dfsAdmin.createEncryptionZone(zone1,TEST_KEY);
  }
 catch (  IOException e) {
    assertExceptionContains("already in an encryption zone",e);
  }
  final Path zone1Child=new Path(zone1,"child");
  fsWrapper.mkdir(zone1Child,FsPermission.getDirDefault(),false);
  try {
    dfsAdmin.createEncryptionZone(zone1Child,TEST_KEY);
    fail("EZ in an EZ");
  }
 catch (  IOException e) {
    assertExceptionContains("already in an encryption zone",e);
  }
  try {
    dfsAdmin.createEncryptionZone(zoneParent,TEST_KEY);
    fail("EZ over an EZ");
  }
 catch (  IOException e) {
    assertExceptionContains("encryption zone for a non-empty directory",e);
  }
  final Path notEmpty=new Path("/notEmpty");
  final Path notEmptyChild=new Path(notEmpty,"child");
  fsWrapper.mkdir(notEmptyChild,FsPermission.getDirDefault(),true);
  try {
    dfsAdmin.createEncryptionZone(notEmpty,TEST_KEY);
    fail("Created EZ on an non-empty directory with folder");
  }
 catch (  IOException e) {
    assertExceptionContains("create an encryption zone",e);
  }
  fsWrapper.delete(notEmptyChild,false);
  fsWrapper.createFile(notEmptyChild);
  try {
    dfsAdmin.createEncryptionZone(notEmpty,TEST_KEY);
    fail("Created EZ on an non-empty directory with file");
  }
 catch (  IOException e) {
    assertExceptionContains("create an encryption zone",e);
  }
  try {
    dfsAdmin.createEncryptionZone(notEmptyChild,TEST_KEY);
    fail("Created EZ on a file");
  }
 catch (  IOException e) {
    assertExceptionContains("create an encryption zone for a file.",e);
  }
  final Path zone2=new Path("/zone2");
  fsWrapper.mkdir(zone2,FsPermission.getDirDefault(),false);
  final String myKeyName="mykeyname";
  try {
    dfsAdmin.createEncryptionZone(zone2,myKeyName);
    fail("expected key doesn't exist");
  }
 catch (  IOException e) {
    assertExceptionContains("doesn't exist.",e);
  }
  try {
    dfsAdmin.createEncryptionZone(zone2,"");
    fail("created a zone with empty key name");
  }
 catch (  IOException e) {
    assertExceptionContains("Must specify a key name when creating",e);
  }
  try {
    dfsAdmin.createEncryptionZone(zone2,null);
    fail("created a zone with null key name");
  }
 catch (  IOException e) {
    assertExceptionContains("Must specify a key name when creating",e);
  }
  assertNumZones(1);
  createKey(myKeyName);
  dfsAdmin.createEncryptionZone(zone2,myKeyName);
  assertNumZones(++numZones);
  assertZonePresent(myKeyName,zone2.toString());
  final UserGroupInformation user=UserGroupInformation.createUserForTesting("user",new String[]{"mygroup"});
  final Path nonSuper=new Path("/nonSuper");
  fsWrapper.mkdir(nonSuper,FsPermission.getDirDefault(),false);
  user.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      final HdfsAdmin userAdmin=new HdfsAdmin(FileSystem.getDefaultUri(conf),conf);
      try {
        userAdmin.createEncryptionZone(nonSuper,TEST_KEY);
        fail("createEncryptionZone is superuser-only operation");
      }
 catch (      AccessControlException e) {
        assertExceptionContains("Superuser privilege is required",e);
      }
      return null;
    }
  }
);
  Path deepZone=new Path("/d/e/e/p/zone");
  fsWrapper.mkdir(deepZone,FsPermission.getDirDefault(),true);
  dfsAdmin.createEncryptionZone(deepZone,TEST_KEY);
  assertNumZones(++numZones);
  assertZonePresent(null,deepZone.toString());
}
