{
  final Path zoneParent=new Path("/zones");
  final Path zone1=new Path(zoneParent,"zone1");
  CryptoAdmin cryptoAdmin=new CryptoAdmin(conf);
  fsWrapper.mkdir(zone1,FsPermission.getDirDefault(),true);
  fsWrapper.setPermission(zone1,new FsPermission(FsAction.ALL,FsAction.ALL,FsAction.ALL));
  String[] cryptoArgv=new String[]{"-createZone","-keyName",TEST_KEY,"-path",zone1.toUri().getPath()};
  cryptoAdmin.run(cryptoArgv);
  final Path ezfile1=new Path(zone1,"file1");
  final int len=8192;
  DFSTestUtil.createFile(fs,ezfile1,len,(short)1,0xFEED);
  Configuration clientConf=new Configuration(conf);
  clientConf.setLong(FS_TRASH_INTERVAL_KEY,1);
  final FsShell shell=new FsShell(clientConf);
  String[] argv=new String[]{"-rm",ezfile1.toString()};
  int res=ToolRunner.run(shell,argv);
  assertEquals("Can't remove a file in EZ as superuser",0,res);
  final Path trashDir=new Path(zone1,FileSystem.TRASH_PREFIX);
  assertTrue(fsWrapper.exists(trashDir));
  FileStatus trashFileStatus=fsWrapper.getFileStatus(trashDir);
  assertTrue(trashFileStatus.getPermission().getStickyBit());
  final UserGroupInformation user=UserGroupInformation.createUserForTesting("user",new String[]{"mygroup"});
  user.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      final Path ezfile2=new Path(zone1,"file2");
      final int len=8192;
      FileSystem fs2=FileSystem.get(cluster.getConfiguration(0));
      DFSTestUtil.createFile(fs2,ezfile2,len,(short)1,0xFEED);
      String[] argv=new String[]{"-rm",ezfile2.toString()};
      int res=ToolRunner.run(shell,argv);
      assertEquals("Can't remove a file in EZ as user:mygroup",0,res);
      return null;
    }
  }
);
}
