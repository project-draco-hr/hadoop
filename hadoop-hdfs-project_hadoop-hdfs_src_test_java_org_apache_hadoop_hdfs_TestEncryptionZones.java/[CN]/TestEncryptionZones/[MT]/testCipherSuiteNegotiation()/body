{
  final HdfsAdmin dfsAdmin=new HdfsAdmin(FileSystem.getDefaultUri(conf),conf);
  final Path zone=new Path("/zone");
  fs.mkdirs(zone);
  dfsAdmin.createEncryptionZone(zone,TEST_KEY);
  DFSTestUtil.createFile(fs,new Path(zone,"success1"),0,(short)1,0xFEED);
  fs.getClient().cipherSuites=Lists.newArrayListWithCapacity(0);
  try {
    DFSTestUtil.createFile(fs,new Path(zone,"fail"),0,(short)1,0xFEED);
    fail("Created a file without specifying a CipherSuite!");
  }
 catch (  UnknownCipherSuiteException e) {
    assertExceptionContains("No cipher suites",e);
  }
  fs.getClient().cipherSuites=Lists.newArrayListWithCapacity(3);
  fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN);
  fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN);
  fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN);
  try {
    DFSTestUtil.createFile(fs,new Path(zone,"fail"),0,(short)1,0xFEED);
    fail("Created a file without specifying a CipherSuite!");
  }
 catch (  UnknownCipherSuiteException e) {
    assertExceptionContains("No cipher suites",e);
  }
  fs.getClient().cipherSuites=Lists.newArrayListWithCapacity(3);
  fs.getClient().cipherSuites.add(CipherSuite.AES_CTR_NOPADDING);
  fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN);
  fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN);
  DFSTestUtil.createFile(fs,new Path(zone,"success2"),0,(short)1,0xFEED);
  fs.getClient().cipherSuites=Lists.newArrayListWithCapacity(3);
  fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN);
  fs.getClient().cipherSuites.add(CipherSuite.UNKNOWN);
  fs.getClient().cipherSuites.add(CipherSuite.AES_CTR_NOPADDING);
  DFSTestUtil.createFile(fs,new Path(zone,"success3"),4096,(short)1,0xFEED);
  cluster.getNamesystem().getProvider().flush();
  KeyProvider provider=KeyProviderFactory.get(new URI(conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI)),conf);
  List<String> keys=provider.getKeys();
  assertEquals("Expected NN to have created one key per zone",1,keys.size());
  List<KeyProvider.KeyVersion> allVersions=Lists.newArrayList();
  for (  String key : keys) {
    List<KeyProvider.KeyVersion> versions=provider.getKeyVersions(key);
    assertEquals("Should only have one key version per key",1,versions.size());
    allVersions.addAll(versions);
  }
  for (int i=2; i <= 3; i++) {
    FileEncryptionInfo feInfo=getFileEncryptionInfo(new Path(zone.toString() + "/success" + i));
    assertEquals(feInfo.getCipherSuite(),CipherSuite.AES_CTR_NOPADDING);
  }
}
