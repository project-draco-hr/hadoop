{
  final HdfsAdmin dfsAdmin=new HdfsAdmin(FileSystem.getDefaultUri(conf),conf);
  final Path zone=new Path("/zone");
  fs.mkdirs(zone);
  dfsAdmin.createEncryptionZone(zone,TEST_KEY,NO_TRASH);
  DFSTestUtil.createFile(fs,new Path(zone,"success1"),0,(short)1,0xFEED);
  DFSOutputStream.SUPPORTED_CRYPTO_VERSIONS=new CryptoProtocolVersion[]{};
  try {
    DFSTestUtil.createFile(fs,new Path(zone,"fail"),0,(short)1,0xFEED);
    fail("Created a file without specifying a crypto protocol version");
  }
 catch (  UnknownCryptoProtocolVersionException e) {
    assertExceptionContains("No crypto protocol versions",e);
  }
  DFSOutputStream.SUPPORTED_CRYPTO_VERSIONS=new CryptoProtocolVersion[]{CryptoProtocolVersion.UNKNOWN,CryptoProtocolVersion.UNKNOWN};
  try {
    DFSTestUtil.createFile(fs,new Path(zone,"fail"),0,(short)1,0xFEED);
    fail("Created a file without specifying a known crypto protocol version");
  }
 catch (  UnknownCryptoProtocolVersionException e) {
    assertExceptionContains("No crypto protocol versions",e);
  }
  DFSOutputStream.SUPPORTED_CRYPTO_VERSIONS=new CryptoProtocolVersion[]{CryptoProtocolVersion.UNKNOWN,CryptoProtocolVersion.UNKNOWN,CryptoProtocolVersion.ENCRYPTION_ZONES};
  DFSTestUtil.createFile(fs,new Path(zone,"success2"),0,(short)1,0xFEED);
  DFSOutputStream.SUPPORTED_CRYPTO_VERSIONS=new CryptoProtocolVersion[]{CryptoProtocolVersion.ENCRYPTION_ZONES,CryptoProtocolVersion.UNKNOWN,CryptoProtocolVersion.UNKNOWN};
  DFSTestUtil.createFile(fs,new Path(zone,"success3"),4096,(short)1,0xFEED);
  cluster.getNamesystem().getProvider().flush();
  KeyProvider provider=KeyProviderFactory.get(new URI(conf.getTrimmed(CommonConfigurationKeysPublic.HADOOP_SECURITY_KEY_PROVIDER_PATH)),conf);
  List<String> keys=provider.getKeys();
  assertEquals("Expected NN to have created one key per zone",1,keys.size());
  List<KeyProvider.KeyVersion> allVersions=Lists.newArrayList();
  for (  String key : keys) {
    List<KeyProvider.KeyVersion> versions=provider.getKeyVersions(key);
    assertEquals("Should only have one key version per key",1,versions.size());
    allVersions.addAll(versions);
  }
  for (int i=2; i <= 3; i++) {
    FileEncryptionInfo feInfo=getFileEncryptionInfo(new Path(zone.toString() + "/success" + i));
    assertEquals(feInfo.getCipherSuite(),CipherSuite.AES_CTR_NOPADDING);
  }
  DFSClient old=fs.dfs;
  try {
    testCipherSuiteNegotiation(fs,conf);
  }
  finally {
    fs.dfs=old;
  }
}
