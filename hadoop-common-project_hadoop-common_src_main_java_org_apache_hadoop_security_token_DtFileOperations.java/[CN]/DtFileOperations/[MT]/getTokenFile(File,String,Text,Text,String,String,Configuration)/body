{
  Token<?> token=null;
  Credentials creds=tokenFile.exists() ? Credentials.readTokenStorageFile(tokenFile,conf) : new Credentials();
  ServiceLoader<DtFetcher> loader=ServiceLoader.load(DtFetcher.class);
  for (  DtFetcher fetcher : loader) {
    if (matchService(fetcher,service,url)) {
      if (!fetcher.isTokenRequired()) {
        String message="DtFetcher for service '" + service + "' does not require a token.  Check your configuration.  "+ "Note: security may be disabled or there may be two DtFetcher "+ "providers for the same service designation.";
        LOG.error(message);
        throw new IllegalArgumentException(message);
      }
      token=fetcher.addDelegationTokens(conf,creds,renewer,stripPrefix(url));
    }
  }
  if (alias != null) {
    if (token == null) {
      String message="DtFetcher for service '" + service + "'"+ " does not allow aliasing.  Cannot apply alias '"+ alias+ "'."+ "  Drop alias flag to get token for this service.";
      LOG.error(message);
      throw new IOException(message);
    }
    Token<?> aliasedToken=token.copyToken();
    aliasedToken.setService(alias);
    creds.addToken(alias,aliasedToken);
    LOG.info("Add token with service " + alias);
  }
  doFormattedWrite(tokenFile,fileFormat,creds,conf);
}
