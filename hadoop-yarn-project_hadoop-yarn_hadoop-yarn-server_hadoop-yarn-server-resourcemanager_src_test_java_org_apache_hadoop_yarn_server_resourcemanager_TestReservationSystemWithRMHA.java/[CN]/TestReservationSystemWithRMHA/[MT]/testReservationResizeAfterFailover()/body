{
  startRMs();
  addNodeCapacityToPlan(rm1,102400,100);
  ClientRMService clientService=rm1.getClientRMService();
  ReservationId resID1=getNewReservation(clientService).getReservationId();
  ReservationSubmissionRequest request=createReservationSubmissionRequest(resID1);
  ReservationDefinition reservationDefinition=request.getReservationDefinition();
  ReservationSubmissionResponse response=null;
  try {
    response=clientService.submitReservation(request);
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
  Assert.assertNotNull(response);
  Assert.assertNotNull(resID1);
  LOG.info("Submit reservation response: " + resID1);
  ReservationId resID2=getNewReservation(clientService).getReservationId();
  request.setReservationId(resID2);
  try {
    response=clientService.submitReservation(request);
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
  Assert.assertNotNull(response);
  Assert.assertNotNull(resID2);
  LOG.info("Submit reservation response: " + resID2);
  ReservationId resID3=getNewReservation(clientService).getReservationId();
  request.setReservationId(resID3);
  try {
    response=clientService.submitReservation(request);
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
  Assert.assertNotNull(response);
  Assert.assertNotNull(resID3);
  LOG.info("Submit reservation response: " + resID3);
  waitForReservationActivation(rm1,resID1,ReservationSystemTestUtil.reservationQ);
  Plan plan=rm1.getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ);
  validateReservation(plan,resID1,reservationDefinition);
  validateReservation(plan,resID2,reservationDefinition);
  validateReservation(plan,resID3,reservationDefinition);
  ResourceScheduler scheduler=rm1.getResourceScheduler();
  QueueInfo resQ1=scheduler.getQueueInfo(resID1.toString(),false,false);
  Assert.assertEquals(0.05,resQ1.getCapacity(),0.001f);
  QueueInfo resQ2=scheduler.getQueueInfo(resID2.toString(),false,false);
  Assert.assertEquals(0.05,resQ2.getCapacity(),0.001f);
  QueueInfo resQ3=scheduler.getQueueInfo(resID3.toString(),false,false);
  Assert.assertEquals(0.05,resQ3.getCapacity(),0.001f);
  explicitFailover();
  addNodeCapacityToPlan(rm2,5120,5);
  plan=rm2.getRMContext().getReservationSystem().getPlan(ReservationSystemTestUtil.reservationQ);
  validateReservation(plan,resID1,reservationDefinition);
  validateReservation(plan,resID3,reservationDefinition);
  scheduler=rm2.getResourceScheduler();
  resQ1=scheduler.getQueueInfo(resID1.toString(),false,false);
  Assert.assertEquals(1f / 3f,resQ1.getCapacity(),0.001f);
  resQ2=scheduler.getQueueInfo(resID2.toString(),false,false);
  Assert.assertEquals(1f / 3f,resQ2.getCapacity(),0.001f);
  resQ3=scheduler.getQueueInfo(resID3.toString(),false,false);
  Assert.assertEquals(1f / 3f,resQ3.getCapacity(),0.001f);
}
