{
  if (uris != null) {
    if ((uris.length != timestamps.length) || (uris.length != sizes.length) || (uris.length != visibilities.length)) {
      throw new IllegalArgumentException("Invalid specification for " + "distributed-cache artifacts of type " + type + " :"+ " #uris="+ uris.length+ " #timestamps="+ timestamps.length+ " #visibilities="+ visibilities.length);
    }
    Map<String,Path> classPaths=new HashMap<String,Path>();
    if (pathsToPutOnClasspath != null) {
      for (      Path p : pathsToPutOnClasspath) {
        FileSystem remoteFS=p.getFileSystem(conf);
        p=remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),remoteFS.getWorkingDirectory()));
        classPaths.put(p.toUri().getPath().toString(),p);
      }
    }
    for (int i=0; i < uris.length; ++i) {
      URI u=uris[i];
      Path p=new Path(u);
      FileSystem remoteFS=p.getFileSystem(conf);
      p=remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),remoteFS.getWorkingDirectory()));
      Path name=new Path((null == u.getFragment()) ? p.getName() : u.getFragment());
      if (name.isAbsolute()) {
        throw new IllegalArgumentException("Resource name must be relative");
      }
      String linkName=name.toUri().getPath();
      localResources.put(linkName,BuilderUtils.newLocalResource(p.toUri(),type,visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE,sizes[i],timestamps[i]));
      if (classPaths.containsKey(u.getPath())) {
        MRApps.addToClassPath(env,linkName);
      }
    }
  }
}
