{
  boolean userClassesTakesPrecedence=conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_USER_CLASSPATH_FIRST,false);
  String classpathEnvVar=conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER,false) ? Environment.APP_CLASSPATH.name() : Environment.CLASSPATH.name();
  MRApps.addToEnvironment(environment,classpathEnvVar,crossPlatformifyMREnv(conf,Environment.PWD),conf);
  if (!userClassesTakesPrecedence) {
    MRApps.setMRFrameworkClasspath(environment,conf);
  }
  MRApps.addToEnvironment(environment,classpathEnvVar,MRJobConfig.JOB_JAR + Path.SEPARATOR + MRJobConfig.JOB_JAR,conf);
  MRApps.addToEnvironment(environment,classpathEnvVar,MRJobConfig.JOB_JAR + Path.SEPARATOR + "classes"+ Path.SEPARATOR,conf);
  MRApps.addToEnvironment(environment,classpathEnvVar,MRJobConfig.JOB_JAR + Path.SEPARATOR + "lib"+ Path.SEPARATOR+ "*",conf);
  MRApps.addToEnvironment(environment,classpathEnvVar,crossPlatformifyMREnv(conf,Environment.PWD) + Path.SEPARATOR + "*",conf);
  addToClasspathIfNotJar(DistributedCache.getFileClassPaths(conf),DistributedCache.getCacheFiles(conf),conf,environment,classpathEnvVar);
  addToClasspathIfNotJar(DistributedCache.getArchiveClassPaths(conf),DistributedCache.getCacheArchives(conf),conf,environment,classpathEnvVar);
  if (userClassesTakesPrecedence) {
    MRApps.setMRFrameworkClasspath(environment,conf);
  }
}
