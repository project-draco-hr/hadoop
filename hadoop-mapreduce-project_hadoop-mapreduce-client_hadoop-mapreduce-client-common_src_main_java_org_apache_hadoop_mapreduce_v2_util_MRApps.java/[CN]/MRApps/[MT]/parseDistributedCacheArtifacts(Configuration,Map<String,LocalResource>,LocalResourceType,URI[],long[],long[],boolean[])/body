{
  if (uris != null) {
    if ((uris.length != timestamps.length) || (uris.length != sizes.length) || (uris.length != visibilities.length)) {
      throw new IllegalArgumentException("Invalid specification for " + "distributed-cache artifacts of type " + type + " :"+ " #uris="+ uris.length+ " #timestamps="+ timestamps.length+ " #visibilities="+ visibilities.length);
    }
    for (int i=0; i < uris.length; ++i) {
      URI u=uris[i];
      Path p=new Path(u);
      FileSystem remoteFS=p.getFileSystem(conf);
      String linkName=null;
      if (p.getName().equals(DistributedCache.WILDCARD)) {
        p=p.getParent();
        linkName=p.getName() + Path.SEPARATOR + DistributedCache.WILDCARD;
      }
      p=remoteFS.resolvePath(p.makeQualified(remoteFS.getUri(),remoteFS.getWorkingDirectory()));
      if (linkName == null) {
        linkName=u.getFragment();
        if (linkName != null) {
          Path linkPath=new Path(linkName);
          if (linkPath.isAbsolute()) {
            throw new IllegalArgumentException("Resource name must be " + "relative");
          }
          linkName=linkPath.toUri().getPath();
        }
      }
 else       if (u.getFragment() != null) {
        throw new IllegalArgumentException("Invalid path URI: " + p + " - cannot contain both a URI fragment and a wildcard");
      }
      if (linkName == null) {
        linkName=p.getName();
      }
      LocalResource orig=localResources.get(linkName);
      if (orig != null && !orig.getResource().equals(URL.fromURI(p.toUri()))) {
        throw new InvalidJobConfException(getResourceDescription(orig.getType()) + orig.getResource() + " conflicts with "+ getResourceDescription(type)+ u);
      }
      localResources.put(linkName,LocalResource.newInstance(URL.fromURI(p.toUri()),type,visibilities[i] ? LocalResourceVisibility.PUBLIC : LocalResourceVisibility.PRIVATE,sizes[i],timestamps[i]));
    }
  }
}
