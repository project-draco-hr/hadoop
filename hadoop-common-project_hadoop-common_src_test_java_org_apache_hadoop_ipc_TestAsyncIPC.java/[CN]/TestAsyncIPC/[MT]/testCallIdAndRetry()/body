{
  final Map<Integer,CallInfo> infoMap=new HashMap<Integer,CallInfo>();
  final Client client=new Client(LongWritable.class,conf){
    @Override Call createCall(    RpcKind rpcKind,    Writable rpcRequest){
      Client.setCallIdAndRetryCount(Client.nextCallId(),TestIPC.RANDOM.nextInt(255));
      final Call call=super.createCall(rpcKind,rpcRequest);
      CallInfo info=new CallInfo();
      info.id=call.id;
      info.retry=call.retry;
      infoMap.put(call.id,info);
      return call;
    }
    @Override void checkResponse(    RpcResponseHeaderProto header) throws IOException {
      super.checkResponse(header);
      Assert.assertEquals(infoMap.get(header.getCallId()).retry,header.getRetryCount());
    }
  }
;
  final TestServer server=new TestIPC.TestServer(1,false,conf);
  server.callListener=new Runnable(){
    @Override public void run(){
      Assert.assertEquals(infoMap.get(Server.getCallId()).retry,Server.getCallRetryCount());
    }
  }
;
  try {
    InetSocketAddress addr=NetUtils.getConnectAddress(server);
    server.start();
    final AsyncCaller caller=new AsyncCaller(client,addr,4);
    caller.run();
    caller.assertReturnValues();
  }
  finally {
    client.stop();
    server.stop();
  }
}
