{
  if (argv.length < 1) {
    printUsage("");
    return -1;
  }
  int exitCode=-1;
  int i=0;
  String cmd=argv[i++];
  if ("-safemode".equals(cmd)) {
    if (argv.length != 2) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-report".equals(cmd)) {
    if (argv.length != 1) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-saveNamespace".equals(cmd)) {
    if (argv.length != 1) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-restoreFailedStorage".equals(cmd)) {
    if (argv.length != 2) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-refreshNodes".equals(cmd)) {
    if (argv.length != 1) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-finalizeUpgrade".equals(cmd)) {
    if (argv.length != 1) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-upgradeProgress".equals(cmd)) {
    if (argv.length != 2) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-metasave".equals(cmd)) {
    if (argv.length != 2) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-refreshServiceAcl".equals(cmd)) {
    if (argv.length != 1) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-refreshUserToGroupsMappings".equals(cmd)) {
    if (argv.length != 1) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-printTopology".equals(cmd)) {
    if (argv.length != 1) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-refreshNamenodes".equals(cmd)) {
    if (argv.length != 2) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-deleteBlockPool".equals(cmd)) {
    if ((argv.length != 3) && (argv.length != 4)) {
      printUsage(cmd);
      return exitCode;
    }
  }
 else   if ("-setBalancerBandwidth".equals(cmd)) {
    if (argv.length != 2) {
      printUsage(cmd);
      return exitCode;
    }
  }
  try {
    init();
  }
 catch (  RPC.VersionMismatch v) {
    System.err.println("Version Mismatch between client and server" + "... command aborted.");
    return exitCode;
  }
catch (  IOException e) {
    System.err.println("Bad connection to DFS... command aborted.");
    return exitCode;
  }
  exitCode=0;
  try {
    if ("-report".equals(cmd)) {
      report();
    }
 else     if ("-safemode".equals(cmd)) {
      setSafeMode(argv,i);
    }
 else     if ("-saveNamespace".equals(cmd)) {
      exitCode=saveNamespace();
    }
 else     if ("-restoreFailedStorage".equals(cmd)) {
      exitCode=restoreFaileStorage(argv[i]);
    }
 else     if ("-refreshNodes".equals(cmd)) {
      exitCode=refreshNodes();
    }
 else     if ("-finalizeUpgrade".equals(cmd)) {
      exitCode=finalizeUpgrade();
    }
 else     if ("-upgradeProgress".equals(cmd)) {
      exitCode=upgradeProgress(argv,i);
    }
 else     if ("-metasave".equals(cmd)) {
      exitCode=metaSave(argv,i);
    }
 else     if (ClearQuotaCommand.matches(cmd)) {
      exitCode=new ClearQuotaCommand(argv,i,getDFS()).runAll();
    }
 else     if (SetQuotaCommand.matches(cmd)) {
      exitCode=new SetQuotaCommand(argv,i,getDFS()).runAll();
    }
 else     if (ClearSpaceQuotaCommand.matches(cmd)) {
      exitCode=new ClearSpaceQuotaCommand(argv,i,getDFS()).runAll();
    }
 else     if (SetSpaceQuotaCommand.matches(cmd)) {
      exitCode=new SetSpaceQuotaCommand(argv,i,getDFS()).runAll();
    }
 else     if ("-refreshServiceAcl".equals(cmd)) {
      exitCode=refreshServiceAcl();
    }
 else     if ("-refreshUserToGroupsMappings".equals(cmd)) {
      exitCode=refreshUserToGroupsMappings();
    }
 else     if ("-refreshSuperUserGroupsConfiguration".equals(cmd)) {
      exitCode=refreshSuperUserGroupsConfiguration();
    }
 else     if ("-printTopology".equals(cmd)) {
      exitCode=printTopology();
    }
 else     if ("-refreshNamenodes".equals(cmd)) {
      exitCode=refreshNamenodes(argv,i);
    }
 else     if ("-deleteBlockPool".equals(cmd)) {
      exitCode=deleteBlockPool(argv,i);
    }
 else     if ("-setBalancerBandwidth".equals(cmd)) {
      exitCode=setBalancerBandwidth(argv,i);
    }
 else     if ("-help".equals(cmd)) {
      if (i < argv.length) {
        printHelp(argv[i]);
      }
 else {
        printHelp("");
      }
    }
 else {
      exitCode=-1;
      System.err.println(cmd.substring(1) + ": Unknown command");
      printUsage("");
    }
  }
 catch (  IllegalArgumentException arge) {
    exitCode=-1;
    System.err.println(cmd.substring(1) + ": " + arge.getLocalizedMessage());
    printUsage(cmd);
  }
catch (  RemoteException e) {
    exitCode=-1;
    try {
      String[] content;
      content=e.getLocalizedMessage().split("\n");
      System.err.println(cmd.substring(1) + ": " + content[0]);
    }
 catch (    Exception ex) {
      System.err.println(cmd.substring(1) + ": " + ex.getLocalizedMessage());
    }
  }
catch (  Exception e) {
    exitCode=-1;
    System.err.println(cmd.substring(1) + ": " + e.getLocalizedMessage());
  }
  return exitCode;
}
