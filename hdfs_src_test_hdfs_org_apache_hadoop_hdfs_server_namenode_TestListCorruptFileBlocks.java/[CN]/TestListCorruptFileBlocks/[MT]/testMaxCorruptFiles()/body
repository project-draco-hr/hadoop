{
  MiniDFSCluster cluster=null;
  try {
    Configuration conf=new HdfsConfiguration();
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY,15);
    conf.setInt(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,3 * 1000);
    cluster=new MiniDFSCluster.Builder(conf).build();
    FileSystem fs=cluster.getFileSystem();
    final int maxCorruptFileBlocks=FSNamesystem.DEFAULT_MAX_CORRUPT_FILEBLOCKS_RETURNED;
    DFSTestUtil util=new DFSTestUtil("testMaxCorruptFiles",maxCorruptFileBlocks * 3,1,512);
    util.createFiles(fs,"/srcdat2",(short)1);
    util.waitReplication(fs,"/srcdat2",(short)1);
    final NameNode namenode=cluster.getNameNode();
    Collection<FSNamesystem.CorruptFileBlockInfo> badFiles=namenode.getNamesystem().listCorruptFileBlocks("/srcdat2",null);
    assertTrue("Namenode has " + badFiles.size() + " corrupt files. Expecting none.",badFiles.size() == 0);
    final String bpid=cluster.getNamesystem().getBlockPoolId();
    for (int i=0; i < 4; i++) {
      for (int j=0; j <= 1; j++) {
        File storageDir=MiniDFSCluster.getStorageDir(i,j);
        File data_dir=MiniDFSCluster.getFinalizedDir(storageDir,bpid);
        LOG.info("Removing files from " + data_dir);
        File[] blocks=data_dir.listFiles();
        if (blocks == null)         continue;
        for (int idx=0; idx < blocks.length; idx++) {
          if (!blocks[idx].getName().startsWith("blk_")) {
            continue;
          }
          assertTrue("Cannot remove file.",blocks[idx].delete());
        }
      }
    }
    badFiles=namenode.getNamesystem().listCorruptFileBlocks("/srcdat2",null);
    while (badFiles.size() < maxCorruptFileBlocks) {
      LOG.info("# of corrupt files is: " + badFiles.size());
      Thread.sleep(10000);
      badFiles=namenode.getNamesystem().listCorruptFileBlocks("/srcdat2",null);
    }
    badFiles=namenode.getNamesystem().listCorruptFileBlocks("/srcdat2",null);
    LOG.info("Namenode has bad files. " + badFiles.size());
    assertTrue("Namenode has " + badFiles.size() + " bad files. Expecting "+ maxCorruptFileBlocks+ ".",badFiles.size() == maxCorruptFileBlocks);
    CorruptFileBlockIterator iter=(CorruptFileBlockIterator)fs.listCorruptFileBlocks(new Path("/srcdat2"));
    int corruptPaths=countPaths(iter);
    assertTrue("Expected more than " + maxCorruptFileBlocks + " corrupt file blocks but got "+ corruptPaths,corruptPaths > maxCorruptFileBlocks);
    assertTrue("Iterator should have made more than 1 call but made " + iter.getCallsMade(),iter.getCallsMade() > 1);
    util.cleanup(fs,"/srcdat2");
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
