{
  ArrayList<Expression> operators=new ArrayList<Expression>();
  ArrayList<Expression> primaries=new ArrayList<Expression>();
  for (  Class<? extends Expression> exprClass : EXPRESSIONS) {
    Expression expr=factory.createExpression(exprClass,null);
    if (expr.isOperator()) {
      operators.add(expr);
    }
 else {
      primaries.add(expr);
    }
  }
  Collections.sort(operators,new Comparator<Expression>(){
    @Override public int compare(    Expression arg0,    Expression arg1){
      return arg0.getClass().getName().compareTo(arg1.getClass().getName());
    }
  }
);
  Collections.sort(primaries,new Comparator<Expression>(){
    @Override public int compare(    Expression arg0,    Expression arg1){
      return arg0.getClass().getName().compareTo(arg1.getClass().getName());
    }
  }
);
  StringBuilder sb=new StringBuilder();
  for (  String line : HELP) {
    sb.append(line).append("\n");
  }
  sb.append("\n");
  sb.append("The following primary expressions are recognised:\n");
  for (  Expression expr : primaries) {
    for (    String line : expr.getUsage()) {
      sb.append("  ").append(line).append("\n");
    }
    for (    String line : expr.getHelp()) {
      sb.append("    ").append(line).append("\n");
    }
    sb.append("\n");
  }
  sb.append("The following operators are recognised:\n");
  for (  Expression expr : operators) {
    for (    String line : expr.getUsage()) {
      sb.append("  ").append(line).append("\n");
    }
    for (    String line : expr.getHelp()) {
      sb.append("    ").append(line).append("\n");
    }
    sb.append("\n");
  }
  return sb.toString();
}
