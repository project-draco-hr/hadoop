{
  CommandFormat cf=new CommandFormat(1,Integer.MAX_VALUE,OPTION_FOLLOW_LINK,OPTION_FOLLOW_ARG_LINK,null);
  cf.parse(args);
  if (cf.getOpt(OPTION_FOLLOW_LINK)) {
    getOptions().setFollowLink(true);
  }
 else   if (cf.getOpt(OPTION_FOLLOW_ARG_LINK)) {
    getOptions().setFollowArgLink(true);
  }
  LinkedList<String> expressionArgs=new LinkedList<String>();
  Iterator<String> it=args.iterator();
  boolean isPath=true;
  while (it.hasNext()) {
    String arg=it.next();
    if (isPath) {
      if (arg.startsWith("-")) {
        isPath=false;
      }
    }
    if (!isPath) {
      expressionArgs.add(arg);
      it.remove();
    }
  }
  if (args.isEmpty()) {
    args.add(Path.CUR_DIR);
  }
  Expression expression=parseExpression(expressionArgs);
  if (!expression.isAction()) {
    Expression and=getExpression(And.class);
    Deque<Expression> children=new LinkedList<Expression>();
    children.add(getExpression(Print.class));
    children.add(expression);
    and.addChildren(children);
    expression=and;
  }
  setRootExpression(expression);
}
