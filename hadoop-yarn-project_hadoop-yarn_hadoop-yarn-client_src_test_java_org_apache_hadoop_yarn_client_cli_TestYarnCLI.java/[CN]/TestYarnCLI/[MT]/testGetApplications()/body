{
  ApplicationCLI cli=createAndGetAppCLI();
  ApplicationId applicationId=ApplicationId.newInstance(1234,5);
  ApplicationReport newApplicationReport=ApplicationReport.newInstance(applicationId,ApplicationAttemptId.newInstance(applicationId,1),"user","queue","appname","host",124,null,YarnApplicationState.RUNNING,"diagnostics","url",0,0,FinalApplicationStatus.SUCCEEDED,null,"N/A",0.53789f,"YARN",null,Sets.newHashSet("tag1","tag3"),false,Priority.UNDEFINED,"","");
  List<ApplicationReport> applicationReports=new ArrayList<ApplicationReport>();
  applicationReports.add(newApplicationReport);
  ApplicationId applicationId2=ApplicationId.newInstance(1234,6);
  ApplicationReport newApplicationReport2=ApplicationReport.newInstance(applicationId2,ApplicationAttemptId.newInstance(applicationId2,2),"user2","queue2","appname2","host2",125,null,YarnApplicationState.FINISHED,"diagnostics2","url2",2,2,FinalApplicationStatus.SUCCEEDED,null,"N/A",0.63789f,"NON-YARN",null,Sets.newHashSet("tag2","tag3"),false,Priority.UNDEFINED,"","");
  applicationReports.add(newApplicationReport2);
  ApplicationId applicationId3=ApplicationId.newInstance(1234,7);
  ApplicationReport newApplicationReport3=ApplicationReport.newInstance(applicationId3,ApplicationAttemptId.newInstance(applicationId3,3),"user3","queue3","appname3","host3",126,null,YarnApplicationState.RUNNING,"diagnostics3","url3",3,3,FinalApplicationStatus.SUCCEEDED,null,"N/A",0.73789f,"MAPREDUCE",null,Sets.newHashSet("tag1","tag4"),false,Priority.UNDEFINED,"","");
  applicationReports.add(newApplicationReport3);
  ApplicationId applicationId4=ApplicationId.newInstance(1234,8);
  ApplicationReport newApplicationReport4=ApplicationReport.newInstance(applicationId4,ApplicationAttemptId.newInstance(applicationId4,4),"user4","queue4","appname4","host4",127,null,YarnApplicationState.FAILED,"diagnostics4","url4",4,4,FinalApplicationStatus.SUCCEEDED,null,"N/A",0.83789f,"NON-MAPREDUCE",null,Sets.newHashSet("tag1"),false,Priority.UNDEFINED,"","");
  applicationReports.add(newApplicationReport4);
  ApplicationId applicationId5=ApplicationId.newInstance(1234,9);
  ApplicationReport newApplicationReport5=ApplicationReport.newInstance(applicationId5,ApplicationAttemptId.newInstance(applicationId5,5),"user5","queue5","appname5","host5",128,null,YarnApplicationState.ACCEPTED,"diagnostics5","url5",5,5,FinalApplicationStatus.KILLED,null,"N/A",0.93789f,"HIVE",null,Sets.newHashSet("tag2","tag4"),false,Priority.UNDEFINED,"","");
  applicationReports.add(newApplicationReport5);
  ApplicationId applicationId6=ApplicationId.newInstance(1234,10);
  ApplicationReport newApplicationReport6=ApplicationReport.newInstance(applicationId6,ApplicationAttemptId.newInstance(applicationId6,6),"user6","queue6","appname6","host6",129,null,YarnApplicationState.SUBMITTED,"diagnostics6","url6",6,6,FinalApplicationStatus.KILLED,null,"N/A",0.99789f,"PIG",null,new HashSet<String>(),false,Priority.UNDEFINED,"","");
  applicationReports.add(newApplicationReport6);
  Set<String> appType1=new HashSet<String>();
  EnumSet<YarnApplicationState> appState1=EnumSet.noneOf(YarnApplicationState.class);
  appState1.add(YarnApplicationState.RUNNING);
  appState1.add(YarnApplicationState.ACCEPTED);
  appState1.add(YarnApplicationState.SUBMITTED);
  Set<String> appTag=new HashSet<String>();
  when(client.getApplications(appType1,appState1,appTag)).thenReturn(getApplicationReports(applicationReports,appType1,appState1,appTag,false));
  int result=cli.run(new String[]{"application","-list"});
  assertEquals(0,result);
  verify(client).getApplications(appType1,appState1,appTag);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintWriter pw=new PrintWriter(baos);
  pw.println("Total number of applications (application-types: " + appType1 + ", states: "+ appState1+ " and tags: "+ appTag+ ")"+ ":"+ 4);
  pw.print("                Application-Id\t    Application-Name");
  pw.print("\t    Application-Type");
  pw.print("\t      User\t     Queue\t             State\t       ");
  pw.print("Final-State\t       Progress");
  pw.println("\t                       Tracking-URL");
  pw.print("         application_1234_0005\t             ");
  pw.print("appname\t                YARN\t      user\t     ");
  pw.print("queue\t           RUNNING\t         ");
  pw.print("SUCCEEDED\t         53.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0007\t            ");
  pw.print("appname3\t           MAPREDUCE\t     user3\t    ");
  pw.print("queue3\t           RUNNING\t         ");
  pw.print("SUCCEEDED\t         73.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0009\t            ");
  pw.print("appname5\t                HIVE\t     user5\t    ");
  pw.print("queue5\t          ACCEPTED\t            ");
  pw.print("KILLED\t         93.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0010\t            ");
  pw.print("appname6\t                 PIG\t     user6\t    ");
  pw.print("queue6\t         SUBMITTED\t            ");
  pw.print("KILLED\t         99.79%");
  pw.println("\t                                N/A");
  pw.close();
  String appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(1)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  Set<String> appType2=new HashSet<String>();
  appType2.add("YARN");
  appType2.add("NON-YARN");
  EnumSet<YarnApplicationState> appState2=EnumSet.noneOf(YarnApplicationState.class);
  appState2.add(YarnApplicationState.RUNNING);
  appState2.add(YarnApplicationState.ACCEPTED);
  appState2.add(YarnApplicationState.SUBMITTED);
  when(client.getApplications(appType2,appState2,appTag)).thenReturn(getApplicationReports(applicationReports,appType2,appState2,appTag,false));
  result=cli.run(new String[]{"application","-list","-appTypes","YARN, ,,  NON-YARN","   ,, ,,"});
  assertEquals(0,result);
  verify(client).getApplications(appType2,appState2,appTag);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total number of applications (application-types: " + appType2 + ", states: "+ appState2+ " and tags: "+ appTag+ ")"+ ":"+ 1);
  pw.print("                Application-Id\t    Application-Name");
  pw.print("\t    Application-Type");
  pw.print("\t      User\t     Queue\t             State\t       ");
  pw.print("Final-State\t       Progress");
  pw.println("\t                       Tracking-URL");
  pw.print("         application_1234_0005\t             ");
  pw.print("appname\t                YARN\t      user\t     ");
  pw.print("queue\t           RUNNING\t         ");
  pw.print("SUCCEEDED\t         53.79%");
  pw.println("\t                                N/A");
  pw.close();
  appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(2)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  Set<String> appType3=new HashSet<String>();
  EnumSet<YarnApplicationState> appState3=EnumSet.noneOf(YarnApplicationState.class);
  appState3.add(YarnApplicationState.FINISHED);
  appState3.add(YarnApplicationState.FAILED);
  when(client.getApplications(appType3,appState3,appTag)).thenReturn(getApplicationReports(applicationReports,appType3,appState3,appTag,false));
  result=cli.run(new String[]{"application","-list","--appStates","FINISHED ,, , FAILED",",,FINISHED"});
  assertEquals(0,result);
  verify(client).getApplications(appType3,appState3,appTag);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total number of applications (application-types: " + appType3 + ", states: "+ appState3+ " and tags: "+ appTag+ ")"+ ":"+ 2);
  pw.print("                Application-Id\t    Application-Name");
  pw.print("\t    Application-Type");
  pw.print("\t      User\t     Queue\t             State\t       ");
  pw.print("Final-State\t       Progress");
  pw.println("\t                       Tracking-URL");
  pw.print("         application_1234_0006\t            ");
  pw.print("appname2\t            NON-YARN\t     user2\t    ");
  pw.print("queue2\t          FINISHED\t         ");
  pw.print("SUCCEEDED\t         63.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0008\t            ");
  pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ");
  pw.print("queue4\t            FAILED\t         ");
  pw.print("SUCCEEDED\t         83.79%");
  pw.println("\t                                N/A");
  pw.close();
  appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(3)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  Set<String> appType4=new HashSet<String>();
  appType4.add("YARN");
  appType4.add("NON-YARN");
  EnumSet<YarnApplicationState> appState4=EnumSet.noneOf(YarnApplicationState.class);
  appState4.add(YarnApplicationState.FINISHED);
  appState4.add(YarnApplicationState.FAILED);
  when(client.getApplications(appType4,appState4,appTag)).thenReturn(getApplicationReports(applicationReports,appType4,appState4,appTag,false));
  result=cli.run(new String[]{"application","-list","--appTypes","YARN,NON-YARN","--appStates","FINISHED ,, , FAILED"});
  assertEquals(0,result);
  verify(client).getApplications(appType2,appState2,appTag);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total number of applications (application-types: " + appType4 + ", states: "+ appState4+ " and tags: "+ appTag+ ")"+ ":"+ 1);
  pw.print("                Application-Id\t    Application-Name");
  pw.print("\t    Application-Type");
  pw.print("\t      User\t     Queue\t             State\t       ");
  pw.print("Final-State\t       Progress");
  pw.println("\t                       Tracking-URL");
  pw.print("         application_1234_0006\t            ");
  pw.print("appname2\t            NON-YARN\t     user2\t    ");
  pw.print("queue2\t          FINISHED\t         ");
  pw.print("SUCCEEDED\t         63.79%");
  pw.println("\t                                N/A");
  pw.close();
  appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(4)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  result=cli.run(new String[]{"application","-list","--appStates","FINISHED ,, , INVALID"});
  assertEquals(-1,result);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("The application state  INVALID is invalid.");
  pw.print("The valid application state can be one of the following: ");
  StringBuilder sb=new StringBuilder();
  sb.append("ALL,");
  for (  YarnApplicationState state : YarnApplicationState.values()) {
    sb.append(state + ",");
  }
  String output=sb.toString();
  pw.println(output.substring(0,output.length() - 1));
  pw.close();
  appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(4)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  Set<String> appType5=new HashSet<String>();
  EnumSet<YarnApplicationState> appState5=EnumSet.noneOf(YarnApplicationState.class);
  appState5.add(YarnApplicationState.FINISHED);
  when(client.getApplications(appType5,appState5,appTag)).thenReturn(getApplicationReports(applicationReports,appType5,appState5,appTag,true));
  result=cli.run(new String[]{"application","-list","--appStates","FINISHED ,, , ALL"});
  assertEquals(0,result);
  verify(client).getApplications(appType5,appState5,appTag);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total number of applications (application-types: " + appType5 + ", states: "+ appState5+ " and tags: "+ appTag+ ")"+ ":"+ 6);
  pw.print("                Application-Id\t    Application-Name");
  pw.print("\t    Application-Type");
  pw.print("\t      User\t     Queue\t             State\t       ");
  pw.print("Final-State\t       Progress");
  pw.println("\t                       Tracking-URL");
  pw.print("         application_1234_0005\t             ");
  pw.print("appname\t                YARN\t      user\t     ");
  pw.print("queue\t           RUNNING\t         ");
  pw.print("SUCCEEDED\t         53.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0006\t            ");
  pw.print("appname2\t            NON-YARN\t     user2\t    ");
  pw.print("queue2\t          FINISHED\t         ");
  pw.print("SUCCEEDED\t         63.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0007\t            ");
  pw.print("appname3\t           MAPREDUCE\t     user3\t    ");
  pw.print("queue3\t           RUNNING\t         ");
  pw.print("SUCCEEDED\t         73.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0008\t            ");
  pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ");
  pw.print("queue4\t            FAILED\t         ");
  pw.print("SUCCEEDED\t         83.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0009\t            ");
  pw.print("appname5\t                HIVE\t     user5\t    ");
  pw.print("queue5\t          ACCEPTED\t            ");
  pw.print("KILLED\t         93.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0010\t            ");
  pw.print("appname6\t                 PIG\t     user6\t    ");
  pw.print("queue6\t         SUBMITTED\t            ");
  pw.print("KILLED\t         99.79%");
  pw.println("\t                                N/A");
  pw.close();
  appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(5)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  Set<String> appType6=new HashSet<String>();
  appType6.add("YARN");
  appType6.add("NON-YARN");
  EnumSet<YarnApplicationState> appState6=EnumSet.noneOf(YarnApplicationState.class);
  appState6.add(YarnApplicationState.FINISHED);
  when(client.getApplications(appType6,appState6,appTag)).thenReturn(getApplicationReports(applicationReports,appType6,appState6,appTag,false));
  result=cli.run(new String[]{"application","-list","-appTypes","YARN, ,,  NON-YARN","--appStates","finished"});
  assertEquals(0,result);
  verify(client).getApplications(appType6,appState6,appTag);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total number of applications (application-types: " + appType6 + ", states: "+ appState6+ " and tags: "+ appTag+ ")"+ ":"+ 1);
  pw.print("                Application-Id\t    Application-Name");
  pw.print("\t    Application-Type");
  pw.print("\t      User\t     Queue\t             State\t       ");
  pw.print("Final-State\t       Progress");
  pw.println("\t                       Tracking-URL");
  pw.print("         application_1234_0006\t            ");
  pw.print("appname2\t            NON-YARN\t     user2\t    ");
  pw.print("queue2\t          FINISHED\t         ");
  pw.print("SUCCEEDED\t         63.79%");
  pw.println("\t                                N/A");
  pw.close();
  appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(6)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  Set<String> appTag1=Sets.newHashSet("tag1");
  when(client.getApplications(appType1,appState1,appTag1)).thenReturn(getApplicationReports(applicationReports,appType1,appState1,appTag1,false));
  result=cli.run(new String[]{"application","-list","-appTags","tag1"});
  assertEquals(0,result);
  verify(client).getApplications(appType1,appState1,appTag1);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total number of applications (application-types: " + appType1 + ", states: "+ appState1+ " and tags: "+ appTag1+ ")"+ ":"+ 2);
  pw.print("                Application-Id\t    Application-Name");
  pw.print("\t    Application-Type");
  pw.print("\t      User\t     Queue\t             State\t       ");
  pw.print("Final-State\t       Progress");
  pw.println("\t                       Tracking-URL");
  pw.print("         application_1234_0005\t             ");
  pw.print("appname\t                YARN\t      user\t     ");
  pw.print("queue\t           RUNNING\t         ");
  pw.print("SUCCEEDED\t         53.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0007\t            ");
  pw.print("appname3\t           MAPREDUCE\t     user3\t    ");
  pw.print("queue3\t           RUNNING\t         ");
  pw.print("SUCCEEDED\t         73.79%");
  pw.println("\t                                N/A");
  pw.close();
  appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(7)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  EnumSet<YarnApplicationState> appState7=EnumSet.of(YarnApplicationState.RUNNING,YarnApplicationState.FAILED);
  when(client.getApplications(appType1,appState7,appTag1)).thenReturn(getApplicationReports(applicationReports,appType1,appState7,appTag1,false));
  result=cli.run(new String[]{"application","-list","-appStates","RUNNING,FAILED","-appTags","tag1"});
  assertEquals(0,result);
  verify(client).getApplications(appType1,appState7,appTag1);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total number of applications (application-types: " + appType1 + ", states: "+ appState7+ " and tags: "+ appTag1+ ")"+ ":"+ 3);
  pw.print("                Application-Id\t    Application-Name");
  pw.print("\t    Application-Type");
  pw.print("\t      User\t     Queue\t             State\t       ");
  pw.print("Final-State\t       Progress");
  pw.println("\t                       Tracking-URL");
  pw.print("         application_1234_0005\t             ");
  pw.print("appname\t                YARN\t      user\t     ");
  pw.print("queue\t           RUNNING\t         ");
  pw.print("SUCCEEDED\t         53.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0007\t            ");
  pw.print("appname3\t           MAPREDUCE\t     user3\t    ");
  pw.print("queue3\t           RUNNING\t         ");
  pw.print("SUCCEEDED\t         73.79%");
  pw.println("\t                                N/A");
  pw.print("         application_1234_0008\t            ");
  pw.print("appname4\t       NON-MAPREDUCE\t     user4\t    ");
  pw.print("queue4\t            FAILED\t         ");
  pw.print("SUCCEEDED\t         83.79%");
  pw.println("\t                                N/A");
  pw.close();
  appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(8)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  Set<String> appType9=Sets.newHashSet("YARN");
  Set<String> appTag2=Sets.newHashSet("tag3");
  when(client.getApplications(appType9,appState1,appTag2)).thenReturn(getApplicationReports(applicationReports,appType9,appState1,appTag2,false));
  result=cli.run(new String[]{"application","-list","-appTypes","YARN","-appTags","tag3"});
  assertEquals(0,result);
  verify(client).getApplications(appType9,appState1,appTag2);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total number of applications (application-types: " + appType9 + ", states: "+ appState1+ " and tags: "+ appTag2+ ")"+ ":"+ 1);
  pw.print("                Application-Id\t    Application-Name");
  pw.print("\t    Application-Type");
  pw.print("\t      User\t     Queue\t             State\t       ");
  pw.print("Final-State\t       Progress");
  pw.println("\t                       Tracking-URL");
  pw.print("         application_1234_0005\t             ");
  pw.print("appname\t                YARN\t      user\t     ");
  pw.print("queue\t           RUNNING\t         ");
  pw.print("SUCCEEDED\t         53.79%");
  pw.println("\t                                N/A");
  pw.close();
  appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(9)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  Set<String> appType10=Sets.newHashSet("HIVE");
  Set<String> appTag3=Sets.newHashSet("tag4");
  EnumSet<YarnApplicationState> appState10=EnumSet.of(YarnApplicationState.ACCEPTED);
  when(client.getApplications(appType10,appState10,appTag3)).thenReturn(getApplicationReports(applicationReports,appType10,appState10,appTag3,false));
  result=cli.run(new String[]{"application","-list","-appTypes","HIVE","-appStates","ACCEPTED","-appTags","tag4"});
  assertEquals(0,result);
  verify(client).getApplications(appType10,appState10,appTag3);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total number of applications (application-types: " + appType10 + ", states: "+ appState10+ " and tags: "+ appTag3+ ")"+ ":"+ 1);
  pw.print("                Application-Id\t    Application-Name");
  pw.print("\t    Application-Type");
  pw.print("\t      User\t     Queue\t             State\t       ");
  pw.print("Final-State\t       Progress");
  pw.println("\t                       Tracking-URL");
  pw.print("         application_1234_0009\t            ");
  pw.print("appname5\t                HIVE\t     user5\t    ");
  pw.print("queue5\t          ACCEPTED\t            ");
  pw.print("KILLED\t         93.79%");
  pw.println("\t                                N/A");
  pw.close();
  appsReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appsReportStr,sysOutStream.toString());
  verify(sysOut,times(10)).write(any(byte[].class),anyInt(),anyInt());
}
