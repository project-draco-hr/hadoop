{
  List<NodeReport> nodeReports=new ArrayList<NodeReport>();
  nodeReports.addAll(getNodeReports(1,NodeState.NEW));
  nodeReports.addAll(getNodeReports(2,NodeState.RUNNING));
  nodeReports.addAll(getNodeReports(1,NodeState.UNHEALTHY));
  nodeReports.addAll(getNodeReports(1,NodeState.DECOMMISSIONED));
  nodeReports.addAll(getNodeReports(1,NodeState.REBOOTED));
  nodeReports.addAll(getNodeReports(1,NodeState.LOST));
  NodeCLI cli=new NodeCLI();
  cli.setClient(client);
  cli.setSysOutPrintStream(sysOut);
  Set<NodeState> nodeStates=new HashSet<NodeState>();
  nodeStates.add(NodeState.NEW);
  NodeState[] states=nodeStates.toArray(new NodeState[0]);
  when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports,nodeStates));
  int result=cli.run(new String[]{"-list","-states","NEW"});
  assertEquals(0,result);
  verify(client).getNodeReports(states);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintWriter pw=new PrintWriter(baos);
  pw.println("Total Nodes:1");
  pw.print("         Node-Id\t     Node-State\tNode-Http-Address\t");
  pw.println("Number-of-Running-Containers");
  pw.print("         host0:0\t            NEW\t       host1:8888\t");
  pw.println("                           0");
  pw.close();
  String nodesReportStr=baos.toString("UTF-8");
  Assert.assertEquals(nodesReportStr,sysOutStream.toString());
  verify(sysOut,times(1)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  nodeStates.clear();
  nodeStates.add(NodeState.RUNNING);
  states=nodeStates.toArray(new NodeState[0]);
  when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports,nodeStates));
  result=cli.run(new String[]{"-list","-states","RUNNING"});
  assertEquals(0,result);
  verify(client).getNodeReports(states);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total Nodes:2");
  pw.print("         Node-Id\t     Node-State\tNode-Http-Address\t");
  pw.println("Number-of-Running-Containers");
  pw.print("         host0:0\t        RUNNING\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host1:0\t        RUNNING\t       host1:8888\t");
  pw.println("                           0");
  pw.close();
  nodesReportStr=baos.toString("UTF-8");
  Assert.assertEquals(nodesReportStr,sysOutStream.toString());
  verify(sysOut,times(2)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  result=cli.run(new String[]{"-list"});
  assertEquals(0,result);
  Assert.assertEquals(nodesReportStr,sysOutStream.toString());
  verify(sysOut,times(3)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  result=cli.run(new String[]{"-list","-showDetails"});
  assertEquals(0,result);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total Nodes:2");
  pw.print("         Node-Id\t     Node-State\tNode-Http-Address\t");
  pw.println("Number-of-Running-Containers");
  pw.print("         host0:0\t        RUNNING\t       host1:8888\t");
  pw.println("                           0");
  pw.println("Detailed Node Information :");
  pw.println("\tConfigured Resources : <memory:0, vCores:0>");
  pw.println("\tAllocated Resources : <memory:0, vCores:0>");
  pw.println("\tResource Utilization by Node : PMem:2048 MB, VMem:4096 MB, VCores:8.0");
  pw.println("\tResource Utilization by Containers : PMem:1024 MB, VMem:2048 MB, VCores:4.0");
  pw.println("\tNode-Labels : ");
  pw.print("         host1:0\t        RUNNING\t       host1:8888\t");
  pw.println("                           0");
  pw.println("Detailed Node Information :");
  pw.println("\tConfigured Resources : <memory:0, vCores:0>");
  pw.println("\tAllocated Resources : <memory:0, vCores:0>");
  pw.println("\tResource Utilization by Node : PMem:2048 MB, VMem:4096 MB, VCores:8.0");
  pw.println("\tResource Utilization by Containers : PMem:1024 MB, VMem:2048 MB, VCores:4.0");
  pw.println("\tNode-Labels : ");
  pw.close();
  nodesReportStr=baos.toString("UTF-8");
  Assert.assertEquals(nodesReportStr,sysOutStream.toString());
  verify(sysOut,times(4)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  nodeStates.clear();
  nodeStates.add(NodeState.UNHEALTHY);
  states=nodeStates.toArray(new NodeState[0]);
  when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports,nodeStates));
  result=cli.run(new String[]{"-list","-states","UNHEALTHY"});
  assertEquals(0,result);
  verify(client).getNodeReports(states);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total Nodes:1");
  pw.print("         Node-Id\t     Node-State\tNode-Http-Address\t");
  pw.println("Number-of-Running-Containers");
  pw.print("         host0:0\t      UNHEALTHY\t       host1:8888\t");
  pw.println("                           0");
  pw.close();
  nodesReportStr=baos.toString("UTF-8");
  Assert.assertEquals(nodesReportStr,sysOutStream.toString());
  verify(sysOut,times(5)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  nodeStates.clear();
  nodeStates.add(NodeState.DECOMMISSIONED);
  states=nodeStates.toArray(new NodeState[0]);
  when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports,nodeStates));
  result=cli.run(new String[]{"-list","-states","DECOMMISSIONED"});
  assertEquals(0,result);
  verify(client).getNodeReports(states);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total Nodes:1");
  pw.print("         Node-Id\t     Node-State\tNode-Http-Address\t");
  pw.println("Number-of-Running-Containers");
  pw.print("         host0:0\t DECOMMISSIONED\t       host1:8888\t");
  pw.println("                           0");
  pw.close();
  nodesReportStr=baos.toString("UTF-8");
  Assert.assertEquals(nodesReportStr,sysOutStream.toString());
  verify(sysOut,times(6)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  nodeStates.clear();
  nodeStates.add(NodeState.REBOOTED);
  states=nodeStates.toArray(new NodeState[0]);
  when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports,nodeStates));
  result=cli.run(new String[]{"-list","-states","REBOOTED"});
  assertEquals(0,result);
  verify(client).getNodeReports(states);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total Nodes:1");
  pw.print("         Node-Id\t     Node-State\tNode-Http-Address\t");
  pw.println("Number-of-Running-Containers");
  pw.print("         host0:0\t       REBOOTED\t       host1:8888\t");
  pw.println("                           0");
  pw.close();
  nodesReportStr=baos.toString("UTF-8");
  Assert.assertEquals(nodesReportStr,sysOutStream.toString());
  verify(sysOut,times(7)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  nodeStates.clear();
  nodeStates.add(NodeState.LOST);
  states=nodeStates.toArray(new NodeState[0]);
  when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports,nodeStates));
  result=cli.run(new String[]{"-list","-states","LOST"});
  assertEquals(0,result);
  verify(client).getNodeReports(states);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total Nodes:1");
  pw.print("         Node-Id\t     Node-State\tNode-Http-Address\t");
  pw.println("Number-of-Running-Containers");
  pw.print("         host0:0\t           LOST\t       host1:8888\t");
  pw.println("                           0");
  pw.close();
  nodesReportStr=baos.toString("UTF-8");
  Assert.assertEquals(nodesReportStr,sysOutStream.toString());
  verify(sysOut,times(8)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  nodeStates.clear();
  nodeStates.add(NodeState.NEW);
  nodeStates.add(NodeState.RUNNING);
  nodeStates.add(NodeState.LOST);
  nodeStates.add(NodeState.REBOOTED);
  states=nodeStates.toArray(new NodeState[0]);
  when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports,nodeStates));
  result=cli.run(new String[]{"-list","-states","NEW,RUNNING,LOST,REBOOTED"});
  assertEquals(0,result);
  verify(client).getNodeReports(states);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total Nodes:5");
  pw.print("         Node-Id\t     Node-State\tNode-Http-Address\t");
  pw.println("Number-of-Running-Containers");
  pw.print("         host0:0\t            NEW\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host0:0\t        RUNNING\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host1:0\t        RUNNING\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host0:0\t       REBOOTED\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host0:0\t           LOST\t       host1:8888\t");
  pw.println("                           0");
  pw.close();
  nodesReportStr=baos.toString("UTF-8");
  Assert.assertEquals(nodesReportStr,sysOutStream.toString());
  verify(sysOut,times(9)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  nodeStates.clear();
  for (  NodeState s : NodeState.values()) {
    nodeStates.add(s);
  }
  states=nodeStates.toArray(new NodeState[0]);
  when(client.getNodeReports(states)).thenReturn(getNodeReports(nodeReports,nodeStates));
  result=cli.run(new String[]{"-list","-All"});
  assertEquals(0,result);
  verify(client).getNodeReports(states);
  baos=new ByteArrayOutputStream();
  pw=new PrintWriter(baos);
  pw.println("Total Nodes:7");
  pw.print("         Node-Id\t     Node-State\tNode-Http-Address\t");
  pw.println("Number-of-Running-Containers");
  pw.print("         host0:0\t            NEW\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host0:0\t        RUNNING\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host1:0\t        RUNNING\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host0:0\t      UNHEALTHY\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host0:0\t DECOMMISSIONED\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host0:0\t       REBOOTED\t       host1:8888\t");
  pw.println("                           0");
  pw.print("         host0:0\t           LOST\t       host1:8888\t");
  pw.println("                           0");
  pw.close();
  nodesReportStr=baos.toString("UTF-8");
  Assert.assertEquals(nodesReportStr,sysOutStream.toString());
  verify(sysOut,times(10)).write(any(byte[].class),anyInt(),anyInt());
  sysOutStream.reset();
  result=cli.run(new String[]{"-list","-states","InvalidState"});
  assertEquals(-1,result);
}
