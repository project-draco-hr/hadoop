{
  String outputLine="";
  final String nodeVal=cmd.getOptionValue(DiskBalancer.NODE);
  if (StringUtils.isBlank(nodeVal)) {
    outputLine="The value for '-node' is neither specified or empty.";
    recordOutput(result,outputLine);
  }
 else {
    outputLine=String.format("Reporting volume information for DataNode '%s'.",nodeVal);
    recordOutput(result,outputLine);
    final String trueStr="True";
    final String falseStr="False";
    DiskBalancerDataNode dbdn=getNode(nodeVal);
    if (dbdn == null) {
      outputLine=String.format("Can't find a DataNode that matches '%s'.",nodeVal);
      recordOutput(result,outputLine);
    }
 else {
      result.appendln(String.format(nodeFormat,dbdn.getDataNodeName(),dbdn.getDataNodeIP(),dbdn.getDataNodePort(),dbdn.getDataNodeUUID(),dbdn.getVolumeCount(),dbdn.getNodeDataDensity()));
      for (      DiskBalancerVolumeSet vset : dbdn.getVolumeSets().values()) {
        for (        DiskBalancerVolume vol : vset.getVolumes()) {
          result.appendln(String.format(volumeFormat,vol.getStorageType(),vol.getPath(),vol.getUsedRatio(),vol.getUsed(),vol.getCapacity(),vol.getFreeRatio(),vol.getFreeSpace(),vol.getCapacity(),vol.isFailed() ? trueStr : falseStr,vol.isReadOnly() ? trueStr : falseStr,vol.isSkip() ? trueStr : falseStr,vol.isTransient() ? trueStr : falseStr));
        }
      }
    }
  }
}
