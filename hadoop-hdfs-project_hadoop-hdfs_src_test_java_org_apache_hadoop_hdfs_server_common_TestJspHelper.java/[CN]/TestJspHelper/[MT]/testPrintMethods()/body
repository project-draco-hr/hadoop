{
  JspWriter out=mock(JspWriter.class);
  HttpServletRequest req=mock(HttpServletRequest.class);
  final StringBuffer buffer=new StringBuffer();
  ArgumentCaptor<String> arg=ArgumentCaptor.forClass(String.class);
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invok){
      Object[] args=invok.getArguments();
      buffer.append((String)args[0]);
      return null;
    }
  }
).when(out).print(arg.capture());
  JspHelper.createTitle(out,req,"testfile.txt");
  Mockito.verify(out,Mockito.times(1)).print(Mockito.anyString());
  JspHelper.addTableHeader(out);
  Mockito.verify(out,Mockito.times(1 + 2)).print(Mockito.anyString());
  JspHelper.addTableRow(out,new String[]{" row11","row12 "});
  Mockito.verify(out,Mockito.times(1 + 2 + 4)).print(Mockito.anyString());
  JspHelper.addTableRow(out,new String[]{" row11","row12 "},3);
  Mockito.verify(out,Mockito.times(1 + 2 + 4+ 4)).print(Mockito.anyString());
  JspHelper.addTableRow(out,new String[]{" row21","row22"});
  Mockito.verify(out,Mockito.times(1 + 2 + 4+ 4+ 4)).print(Mockito.anyString());
  JspHelper.addTableFooter(out);
  Mockito.verify(out,Mockito.times(1 + 2 + 4+ 4+ 4+ 1)).print(Mockito.anyString());
  assertFalse(Strings.isNullOrEmpty(buffer.toString()));
}
