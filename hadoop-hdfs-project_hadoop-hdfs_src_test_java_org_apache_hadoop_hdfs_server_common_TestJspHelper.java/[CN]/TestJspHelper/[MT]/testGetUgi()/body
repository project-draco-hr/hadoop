{
  conf.set(DFSConfigKeys.FS_DEFAULT_NAME_KEY,"hdfs://localhost:4321/");
  HttpServletRequest request=mock(HttpServletRequest.class);
  ServletContext context=mock(ServletContext.class);
  String user="TheDoctor";
  Text userText=new Text(user);
  DelegationTokenIdentifier dtId=new DelegationTokenIdentifier(userText,userText,null);
  Token<DelegationTokenIdentifier> token=new Token<DelegationTokenIdentifier>(dtId,new DummySecretManager(0,0,0,0));
  String tokenString=token.encodeToUrlString();
  when(request.getParameter(JspHelper.DELEGATION_PARAMETER_NAME)).thenReturn(tokenString);
  when(request.getRemoteUser()).thenReturn(user);
  when(request.getParameter(JspHelper.NAMENODE_ADDRESS)).thenReturn("1.1.1.1:1111");
  conf.set(DFSConfigKeys.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(conf);
  verifyServiceInToken(context,request,"1.1.1.1:1111");
  token.decodeIdentifier().clearCache();
  when(request.getParameter(JspHelper.NAMENODE_ADDRESS)).thenReturn(null);
  InetSocketAddress addr=new InetSocketAddress("localhost",2222);
  when(context.getAttribute(NameNodeHttpServer.NAMENODE_ADDRESS_ATTRIBUTE_KEY)).thenReturn(addr);
  verifyServiceInToken(context,request,addr.getAddress().getHostAddress() + ":2222");
  userText=new Text(user + "2");
  dtId=new DelegationTokenIdentifier(userText,userText,null);
  token=new Token<DelegationTokenIdentifier>(dtId,new DummySecretManager(0,0,0,0));
  token.setService(new Text("3.3.3.3:3333"));
  tokenString=token.encodeToUrlString();
  when(context.getAttribute(NameNodeHttpServer.NAMENODE_ADDRESS_ATTRIBUTE_KEY)).thenReturn(null);
  when(request.getParameter(JspHelper.DELEGATION_PARAMETER_NAME)).thenReturn(tokenString);
  verifyServiceInToken(context,request,"3.3.3.3:3333");
}
