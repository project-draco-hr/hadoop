{
  conf.set(DFSConfigKeys.FS_DEFAULT_NAME_KEY,"hdfs://localhost:4321/");
  ServletContext context=mock(ServletContext.class);
  String realUser="TheDoctor";
  String user="TheNurse";
  conf.set(DFSConfigKeys.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(conf);
  UserGroupInformation ugi;
  HttpServletRequest request;
  request=getMockRequest(null,null,null);
  try {
    JspHelper.getUGI(context,request,conf);
    Assert.fail("bad request allowed");
  }
 catch (  IOException ioe) {
    Assert.assertEquals("Security enabled but user not authenticated by filter",ioe.getMessage());
  }
  request=getMockRequest(null,realUser,null);
  try {
    JspHelper.getUGI(context,request,conf);
    Assert.fail("bad request allowed");
  }
 catch (  IOException ioe) {
    Assert.assertEquals("Security enabled but user not authenticated by filter",ioe.getMessage());
  }
  request=getMockRequest(realUser,null,null);
  ugi=JspHelper.getUGI(context,request,conf);
  Assert.assertNull(ugi.getRealUser());
  Assert.assertEquals(ugi.getShortUserName(),realUser);
  checkUgiFromAuth(ugi);
  request=getMockRequest(realUser,realUser,null);
  ugi=JspHelper.getUGI(context,request,conf);
  Assert.assertNull(ugi.getRealUser());
  Assert.assertEquals(ugi.getShortUserName(),realUser);
  checkUgiFromAuth(ugi);
  request=getMockRequest(realUser,user,null);
  try {
    JspHelper.getUGI(context,request,conf);
    Assert.fail("bad request allowed");
  }
 catch (  IOException ioe) {
    Assert.assertEquals("Usernames not matched: name=" + user + " != expected="+ realUser,ioe.getMessage());
  }
}
