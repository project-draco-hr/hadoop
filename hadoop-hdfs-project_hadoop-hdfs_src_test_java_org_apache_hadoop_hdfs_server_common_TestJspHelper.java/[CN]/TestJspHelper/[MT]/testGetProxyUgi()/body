{
  conf.set(DFSConfigKeys.FS_DEFAULT_NAME_KEY,"hdfs://localhost:4321/");
  ServletContext context=mock(ServletContext.class);
  String realUser="TheDoctor";
  String user="TheNurse";
  conf.set(DFSConfigKeys.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  conf.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserGroupConfKey(realUser),"*");
  conf.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserIpConfKey(realUser),"*");
  ProxyUsers.refreshSuperUserGroupsConfiguration(conf);
  UserGroupInformation.setConfiguration(conf);
  UserGroupInformation ugi;
  HttpServletRequest request;
  request=getMockRequest(null,null,user);
  try {
    JspHelper.getUGI(context,request,conf);
    Assert.fail("bad request allowed");
  }
 catch (  IOException ioe) {
    Assert.assertEquals("Security enabled but user not authenticated by filter",ioe.getMessage());
  }
  request=getMockRequest(null,realUser,user);
  try {
    JspHelper.getUGI(context,request,conf);
    Assert.fail("bad request allowed");
  }
 catch (  IOException ioe) {
    Assert.assertEquals("Security enabled but user not authenticated by filter",ioe.getMessage());
  }
  request=getMockRequest(realUser,null,user);
  ugi=JspHelper.getUGI(context,request,conf);
  Assert.assertNotNull(ugi.getRealUser());
  Assert.assertEquals(ugi.getRealUser().getShortUserName(),realUser);
  Assert.assertEquals(ugi.getShortUserName(),user);
  checkUgiFromAuth(ugi);
  request=getMockRequest(realUser,realUser,user);
  ugi=JspHelper.getUGI(context,request,conf);
  Assert.assertNotNull(ugi.getRealUser());
  Assert.assertEquals(ugi.getRealUser().getShortUserName(),realUser);
  Assert.assertEquals(ugi.getShortUserName(),user);
  checkUgiFromAuth(ugi);
  request=getMockRequest(realUser,user,user);
  try {
    JspHelper.getUGI(context,request,conf);
    Assert.fail("bad request allowed");
  }
 catch (  IOException ioe) {
    Assert.assertEquals("Usernames not matched: name=" + user + " != expected="+ realUser,ioe.getMessage());
  }
  try {
    request=getMockRequest(user,null,realUser);
    JspHelper.getUGI(context,request,conf);
    Assert.fail("bad proxy request allowed");
  }
 catch (  AuthorizationException ae) {
    Assert.assertEquals("User: " + user + " is not allowed to impersonate "+ realUser,ae.getMessage());
  }
  try {
    request=getMockRequest(user,user,realUser);
    JspHelper.getUGI(context,request,conf);
    Assert.fail("bad proxy request allowed");
  }
 catch (  AuthorizationException ae) {
    Assert.assertEquals("User: " + user + " is not allowed to impersonate "+ realUser,ae.getMessage());
  }
}
