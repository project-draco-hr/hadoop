{
  ContainerId containerId;
  try {
    containerId=ConverterUtils.toContainerId(containerIdStr);
  }
 catch (  IllegalArgumentException ex) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  File logFile=null;
  try {
    logFile=ContainerLogsUtils.getContainerLogFile(containerId,filename,request.getRemoteUser(),nmContext);
  }
 catch (  NotFoundException ex) {
    return Response.status(Status.NOT_FOUND).entity(ex.getMessage()).build();
  }
catch (  YarnException ex) {
    return Response.serverError().entity(ex.getMessage()).build();
  }
  boolean downloadFile=parseBooleanParam(download);
  final long bytes=parseLongParam(size);
  try {
    final FileInputStream fis=ContainerLogsUtils.openLogFileForRead(containerIdStr,logFile,nmContext);
    final long fileLength=logFile.length();
    StreamingOutput stream=new StreamingOutput(){
      @Override public void write(      OutputStream os) throws IOException, WebApplicationException {
        int bufferSize=65536;
        byte[] buf=new byte[bufferSize];
        long toSkip=0;
        long totalBytesToRead=fileLength;
        if (bytes < 0) {
          long absBytes=Math.abs(bytes);
          if (absBytes < fileLength) {
            toSkip=fileLength - absBytes;
            totalBytesToRead=absBytes;
          }
          long skippedBytes=fis.skip(toSkip);
          if (skippedBytes != toSkip) {
            throw new IOException("The bytes were skipped are different " + "from the caller requested");
          }
        }
 else {
          if (bytes < fileLength) {
            totalBytesToRead=bytes;
          }
        }
        long curRead=0;
        long pendingRead=totalBytesToRead - curRead;
        int toRead=pendingRead > buf.length ? buf.length : (int)pendingRead;
        int len=fis.read(buf,0,toRead);
        while (len != -1 && curRead < totalBytesToRead) {
          os.write(buf,0,len);
          curRead+=len;
          pendingRead=totalBytesToRead - curRead;
          toRead=pendingRead > buf.length ? buf.length : (int)pendingRead;
          len=fis.read(buf,0,toRead);
        }
        os.flush();
      }
    }
;
    ResponseBuilder resp=Response.ok(stream);
    if (downloadFile) {
      resp.header("Content-Type","application/octet-stream");
    }
    return resp.build();
  }
 catch (  IOException ex) {
    return Response.serverError().entity(ex.getMessage()).build();
  }
}
