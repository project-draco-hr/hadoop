{
  ContainerId containerId;
  try {
    containerId=ConverterUtils.toContainerId(containerIdStr);
  }
 catch (  IllegalArgumentException ex) {
    return Response.status(Status.BAD_REQUEST).build();
  }
  File logFile=null;
  try {
    logFile=ContainerLogsUtils.getContainerLogFile(containerId,filename,request.getRemoteUser(),nmContext);
  }
 catch (  NotFoundException ex) {
    return Response.status(Status.NOT_FOUND).entity(ex.getMessage()).build();
  }
catch (  YarnException ex) {
    return Response.serverError().entity(ex.getMessage()).build();
  }
  try {
    final FileInputStream fis=ContainerLogsUtils.openLogFileForRead(containerIdStr,logFile,nmContext);
    StreamingOutput stream=new StreamingOutput(){
      @Override public void write(      OutputStream os) throws IOException, WebApplicationException {
        int bufferSize=65536;
        byte[] buf=new byte[bufferSize];
        int len;
        while ((len=fis.read(buf,0,bufferSize)) > 0) {
          os.write(buf,0,len);
        }
        os.flush();
      }
    }
;
    return Response.ok(stream).build();
  }
 catch (  IOException ex) {
    return Response.serverError().entity(ex.getMessage()).build();
  }
}
