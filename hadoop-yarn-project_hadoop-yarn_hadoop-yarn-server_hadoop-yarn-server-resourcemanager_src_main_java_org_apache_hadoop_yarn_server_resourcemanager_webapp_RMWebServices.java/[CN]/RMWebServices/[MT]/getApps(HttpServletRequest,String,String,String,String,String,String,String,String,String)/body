{
  long num=0;
  boolean checkCount=false;
  boolean checkStart=false;
  boolean checkEnd=false;
  long countNum=0;
  long sBegin=0;
  long sEnd=Long.MAX_VALUE;
  long fBegin=0;
  long fEnd=Long.MAX_VALUE;
  init();
  if (count != null && !count.isEmpty()) {
    checkCount=true;
    countNum=Long.parseLong(count);
    if (countNum <= 0) {
      throw new BadRequestException("limit value must be greater then 0");
    }
  }
  if (startedBegin != null && !startedBegin.isEmpty()) {
    checkStart=true;
    sBegin=Long.parseLong(startedBegin);
    if (sBegin < 0) {
      throw new BadRequestException("startedTimeBegin must be greater than 0");
    }
  }
  if (startedEnd != null && !startedEnd.isEmpty()) {
    checkStart=true;
    sEnd=Long.parseLong(startedEnd);
    if (sEnd < 0) {
      throw new BadRequestException("startedTimeEnd must be greater than 0");
    }
  }
  if (sBegin > sEnd) {
    throw new BadRequestException("startedTimeEnd must be greater than startTimeBegin");
  }
  if (finishBegin != null && !finishBegin.isEmpty()) {
    checkEnd=true;
    fBegin=Long.parseLong(finishBegin);
    if (fBegin < 0) {
      throw new BadRequestException("finishTimeBegin must be greater than 0");
    }
  }
  if (finishEnd != null && !finishEnd.isEmpty()) {
    checkEnd=true;
    fEnd=Long.parseLong(finishEnd);
    if (fEnd < 0) {
      throw new BadRequestException("finishTimeEnd must be greater than 0");
    }
  }
  if (fBegin > fEnd) {
    throw new BadRequestException("finishTimeEnd must be greater than finishTimeBegin");
  }
  final ConcurrentMap<ApplicationId,RMApp> apps=rm.getRMContext().getRMApps();
  AppsInfo allApps=new AppsInfo();
  for (  RMApp rmapp : apps.values()) {
    if (checkCount && num == countNum) {
      break;
    }
    if (stateQuery != null && !stateQuery.isEmpty()) {
      RMAppState.valueOf(stateQuery);
      if (!rmapp.getState().toString().equalsIgnoreCase(stateQuery)) {
        continue;
      }
    }
    if (finalStatusQuery != null && !finalStatusQuery.isEmpty()) {
      FinalApplicationStatus.valueOf(finalStatusQuery);
      if (!rmapp.getFinalApplicationStatus().toString().equalsIgnoreCase(finalStatusQuery)) {
        continue;
      }
    }
    if (userQuery != null && !userQuery.isEmpty()) {
      if (!rmapp.getUser().equals(userQuery)) {
        continue;
      }
    }
    if (queueQuery != null && !queueQuery.isEmpty()) {
      ResourceScheduler rs=rm.getResourceScheduler();
      if (rs instanceof CapacityScheduler) {
        CapacityScheduler cs=(CapacityScheduler)rs;
        try {
          cs.getQueueInfo(queueQuery,false,false);
        }
 catch (        IOException e) {
          throw new BadRequestException(e.getMessage());
        }
      }
      if (!rmapp.getQueue().equals(queueQuery)) {
        continue;
      }
    }
    if (checkStart && (rmapp.getStartTime() < sBegin || rmapp.getStartTime() > sEnd)) {
      continue;
    }
    if (checkEnd && (rmapp.getFinishTime() < fBegin || rmapp.getFinishTime() > fEnd)) {
      continue;
    }
    AppInfo app=new AppInfo(rmapp,hasAccess(rmapp,hsr));
    allApps.add(app);
    num++;
  }
  return allApps;
}
