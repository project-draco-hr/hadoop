{
  init();
  ResourceScheduler sched=this.rm.getResourceScheduler();
  if (sched == null) {
    throw new NotFoundException("Null ResourceScheduler instance");
  }
  NodeState acceptedState=null;
  boolean all=false;
  if (state != null && !state.isEmpty()) {
    if (state.equalsIgnoreCase("all")) {
      all=true;
    }
 else {
      acceptedState=NodeState.valueOf(state.toUpperCase());
    }
  }
  NodesInfo allNodes=new NodesInfo();
  for (  RMNode ni : this.rm.getRMContext().getRMNodes().values()) {
    if (all || (acceptedState == null && ni.getState() != NodeState.UNHEALTHY) || acceptedState == ni.getState()) {
      NodeInfo nodeInfo=new NodeInfo(ni,sched);
      allNodes.add(nodeInfo);
    }
  }
  if (all || (acceptedState != null && (acceptedState == NodeState.DECOMMISSIONED || acceptedState == NodeState.LOST || acceptedState == NodeState.REBOOTED))) {
    for (    RMNode ni : this.rm.getRMContext().getInactiveRMNodes().values()) {
      if (all || acceptedState == ni.getState()) {
        NodeInfo nodeInfo=new NodeInfo(ni,sched);
        nodeInfo.setNodeHTTPAddress(EMPTY);
        allNodes.add(nodeInfo);
      }
    }
  }
  return allNodes;
}
