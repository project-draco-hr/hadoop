{
  if (app == null) {
    throw new IllegalArgumentException("app cannot be null");
  }
  String userName=callerUGI.getUserName();
  final ApplicationId appid=app.getApplicationId();
  final String reqTargetQueue=targetQueue;
  try {
    callerUGI.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws IOException, YarnException {
        MoveApplicationAcrossQueuesRequest req=MoveApplicationAcrossQueuesRequest.newInstance(appid,reqTargetQueue);
        rm.getClientRMService().moveApplicationAcrossQueues(req);
        return null;
      }
    }
);
  }
 catch (  UndeclaredThrowableException ue) {
    if (ue.getCause() instanceof YarnException) {
      YarnException ye=(YarnException)ue.getCause();
      if (ye.getCause() instanceof AccessControlException) {
        String appId=app.getApplicationId().toString();
        String msg="Unauthorized attempt to move appid " + appId + " by remote user "+ userName;
        return Response.status(Status.FORBIDDEN).entity(msg).build();
      }
 else       if (ye.getMessage().startsWith("App in") && ye.getMessage().endsWith("state cannot be moved.")) {
        return Response.status(Status.BAD_REQUEST).entity(ye.getMessage()).build();
      }
 else {
        throw ue;
      }
    }
 else {
      throw ue;
    }
  }
  AppQueue ret=new AppQueue();
  ret.setQueue(app.getQueue());
  return Response.status(Status.OK).entity(ret).build();
}
