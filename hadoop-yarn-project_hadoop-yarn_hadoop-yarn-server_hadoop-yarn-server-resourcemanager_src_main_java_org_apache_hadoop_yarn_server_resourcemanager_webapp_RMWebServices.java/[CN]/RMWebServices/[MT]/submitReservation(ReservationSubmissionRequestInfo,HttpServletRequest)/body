{
  init();
  UserGroupInformation callerUGI=getCallerUserGroupInformation(hsr,true);
  if (callerUGI == null) {
    throw new AuthorizationException("Unable to obtain user name, " + "user not authenticated");
  }
  if (UserGroupInformation.isSecurityEnabled() && isStaticUser(callerUGI)) {
    String msg="The default static user cannot carry out this operation.";
    return Response.status(Status.FORBIDDEN).entity(msg).build();
  }
  final ReservationSubmissionRequest reservation=createReservationSubmissionRequest(resContext);
  try {
    callerUGI.doAs(new PrivilegedExceptionAction<ReservationSubmissionResponse>(){
      @Override public ReservationSubmissionResponse run() throws IOException, YarnException {
        return rm.getClientRMService().submitReservation(reservation);
      }
    }
);
  }
 catch (  UndeclaredThrowableException ue) {
    if (ue.getCause() instanceof YarnException) {
      throw new BadRequestException(ue.getCause().getMessage());
    }
    LOG.info("Submit reservation request failed",ue);
    throw ue;
  }
  return Response.status(Status.ACCEPTED).build();
}
