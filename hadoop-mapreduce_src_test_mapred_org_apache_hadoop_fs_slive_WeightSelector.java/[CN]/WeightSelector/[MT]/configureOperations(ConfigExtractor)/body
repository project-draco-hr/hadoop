{
  operations=new TreeMap<OperationType,OperationInfo>();
  Map<OperationType,OperationData> opinfo=cfg.getOperations();
  int totalAm=cfg.getOpCount();
  int opsLeft=totalAm;
  NumberFormat formatter=Formatter.getPercentFormatter();
  for (  final OperationType type : opinfo.keySet()) {
    OperationData opData=opinfo.get(type);
    OperationInfo info=new OperationInfo();
    info.distribution=opData.getDistribution();
    int amLeft=determineHowMany(totalAm,opData,type);
    opsLeft-=amLeft;
    LOG.info(type.name() + " has " + amLeft+ " initial operations out of "+ totalAm+ " for its ratio "+ formatter.format(opData.getPercent()));
    info.amountLeft=amLeft;
    Operation op=factory.getOperation(type);
    if (op != null) {
      Observer fn=new Observer(){
        public void notifyFinished(        Operation op){
          OperationInfo opInfo=operations.get(type);
          if (opInfo != null) {
            --opInfo.amountLeft;
          }
        }
        public void notifyStarting(        Operation op){
        }
      }
;
      info.operation=new ObserveableOp(op,fn);
      operations.put(type,info);
    }
  }
  if (opsLeft > 0) {
    LOG.info(opsLeft + " left over operations found (due to inability to support partial operations)");
  }
}
