{
  requireWinutils();
  String jobId=String.format("%f",Math.random());
  String out=Shell.execCommand(winutils,"task","create","job" + jobId,"cmd /c echo job" + jobId);
  assertTrue(out.trim().equals("job" + jobId));
  jobId=String.format("%f",Math.random());
  out=Shell.execCommand(winutils,"task","create","-c","-1","-m","-1","job" + jobId,"cmd /c echo job" + jobId);
  assertTrue(out.trim().equals("job" + jobId));
  jobId=String.format("%f",Math.random());
  out=Shell.execCommand(winutils,"task","create","-c","10000","-m","128","job" + jobId,"cmd /c echo job" + jobId);
  assertTrue(out.trim().equals("job" + jobId));
  try {
    jobId=String.format("%f",Math.random());
    out=Shell.execCommand(winutils,"task","create","-m","128","job" + jobId,"java -Xmx256m -version");
    fail("Failed to get Shell.ExitCodeException with insufficient memory");
  }
 catch (  Shell.ExitCodeException ece) {
    assertThat(ece.getExitCode(),is(1));
  }
  try {
    jobId=String.format("%f",Math.random());
    Shell.execCommand(winutils,"task","create","-c","-1","-m","-1","foo","job" + jobId,"cmd /c echo job" + jobId);
    fail("Failed to get Shell.ExitCodeException with bad parameters");
  }
 catch (  Shell.ExitCodeException ece) {
    assertThat(ece.getExitCode(),is(1639));
  }
  try {
    jobId=String.format("%f",Math.random());
    Shell.execCommand(winutils,"task","create","-c","-m","-1","job" + jobId,"cmd /c echo job" + jobId);
    fail("Failed to get Shell.ExitCodeException with bad parameters");
  }
 catch (  Shell.ExitCodeException ece) {
    assertThat(ece.getExitCode(),is(1639));
  }
  try {
    jobId=String.format("%f",Math.random());
    Shell.execCommand(winutils,"task","create","-c","foo","job" + jobId,"cmd /c echo job" + jobId);
    fail("Failed to get Shell.ExitCodeException with bad parameters");
  }
 catch (  Shell.ExitCodeException ece) {
    assertThat(ece.getExitCode(),is(1639));
  }
}
