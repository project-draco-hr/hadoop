{
  if (pendingWrites.isEmpty()) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("The async write task has no pending writes, fileId: " + latestAttr.getFileId());
    }
    processCommits(nextOffset.get());
    this.asyncStatus=false;
    return null;
  }
  Entry<OffsetRange,WriteCtx> lastEntry=pendingWrites.lastEntry();
  OffsetRange range=lastEntry.getKey();
  WriteCtx toWrite=lastEntry.getValue();
  if (LOG.isTraceEnabled()) {
    LOG.trace("range.getMin()=" + range.getMin() + " nextOffset="+ nextOffset);
  }
  long offset=nextOffset.get();
  if (range.getMin() > offset) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("The next sequential write has not arrived yet");
    }
    processCommits(nextOffset.get());
    this.asyncStatus=false;
  }
 else   if (range.getMax() <= offset) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Remove write " + range.toString() + " which is already written from the list");
    }
    pendingWrites.remove(range);
  }
 else   if (range.getMin() < offset && range.getMax() > offset) {
    LOG.warn("Got an overlapping write " + range.toString() + ", nextOffset="+ offset+ ". Remove and trim it");
    pendingWrites.remove(range);
    trimWriteRequest(toWrite,offset);
    nextOffset.addAndGet(toWrite.getCount());
    if (LOG.isDebugEnabled()) {
      LOG.debug("Change nextOffset (after trim) to " + nextOffset.get());
    }
    return toWrite;
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Remove write " + range.toString() + " from the list");
    }
    pendingWrites.remove(range);
    nextOffset.addAndGet(toWrite.getCount());
    if (LOG.isDebugEnabled()) {
      LOG.debug("Change nextOffset to " + nextOffset.get());
    }
    return toWrite;
  }
  return null;
}
