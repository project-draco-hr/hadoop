{
  long offset=request.getOffset();
  int count=request.getCount();
  long cachedOffset=nextOffset.get();
  int originalCount=WriteCtx.INVALID_ORIGINAL_COUNT;
  if (LOG.isDebugEnabled()) {
    LOG.debug("requested offset=" + offset + " and current offset="+ cachedOffset);
  }
  if ((offset < cachedOffset) && (offset + count > cachedOffset)) {
    LOG.warn(String.format("Got overwrite with appended data (%d-%d)," + " current offset %d," + " drop the overlapped section (%d-%d)"+ " and append new data (%d-%d).",offset,(offset + count - 1),cachedOffset,offset,(cachedOffset - 1),cachedOffset,(offset + count - 1)));
    if (!pendingWrites.isEmpty()) {
      LOG.warn("There are other pending writes, fail this jumbo write");
      return null;
    }
    LOG.warn("Modify this write to write only the appended data");
    alterWriteRequest(request,cachedOffset);
    originalCount=count;
    offset=request.getOffset();
    count=request.getCount();
  }
  if (offset < cachedOffset) {
    LOG.warn("(offset,count,nextOffset): " + "(" + offset + ","+ count+ ","+ nextOffset+ ")");
    return null;
  }
 else {
    DataState dataState=offset == cachedOffset ? WriteCtx.DataState.NO_DUMP : WriteCtx.DataState.ALLOW_DUMP;
    WriteCtx writeCtx=new WriteCtx(request.getHandle(),request.getOffset(),request.getCount(),originalCount,request.getStableHow(),request.getData(),channel,xid,false,dataState);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Add new write to the list with nextOffset " + cachedOffset + " and requested offset="+ offset);
    }
    if (writeCtx.getDataState() == WriteCtx.DataState.ALLOW_DUMP) {
      updateNonSequentialWriteInMemory(count);
    }
    WriteCtx oldWriteCtx=checkRepeatedWriteRequest(request,channel,xid);
    if (oldWriteCtx == null) {
      pendingWrites.put(new OffsetRange(offset,offset + count),writeCtx);
      if (LOG.isDebugEnabled()) {
        LOG.debug("New write buffered with xid " + xid + " nextOffset "+ cachedOffset+ " req offset="+ offset+ " mapsize="+ pendingWrites.size());
      }
    }
 else {
      LOG.warn("Got a repeated request, same range, with xid: " + xid + " nextOffset "+ +cachedOffset+ " req offset="+ offset);
    }
    return writeCtx;
  }
}
