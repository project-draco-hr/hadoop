{
  Channel channel=writeCtx.getChannel();
  int xid=writeCtx.getXid();
  long offset=writeCtx.getOffset();
  int count=writeCtx.getCount();
  WriteStableHow stableHow=writeCtx.getStableHow();
  FileHandle handle=writeCtx.getHandle();
  if (LOG.isDebugEnabled()) {
    LOG.debug("do write, fileId: " + handle.getFileId() + " offset: "+ offset+ " length: "+ count+ " stableHow: "+ stableHow.name());
  }
  try {
    writeCtx.writeData(fos);
    RpcProgramNfs3.metrics.incrBytesWritten(writeCtx.getCount());
    long flushedOffset=getFlushedOffset();
    if (flushedOffset != (offset + count)) {
      throw new IOException("output stream is out of sync, pos=" + flushedOffset + " and nextOffset should be"+ (offset + count));
    }
    if (writeCtx.getDataState() == WriteCtx.DataState.ALLOW_DUMP) {
synchronized (writeCtx) {
        if (writeCtx.getDataState() == WriteCtx.DataState.ALLOW_DUMP) {
          writeCtx.setDataState(WriteCtx.DataState.NO_DUMP);
          updateNonSequentialWriteInMemory(-count);
          if (LOG.isDebugEnabled()) {
            LOG.debug("After writing " + handle.getFileId() + " at offset "+ offset+ ", updated the memory count, new value: "+ nonSequentialWriteInMemory.get());
          }
        }
      }
    }
    if (!writeCtx.getReplied()) {
      if (stableHow != WriteStableHow.UNSTABLE) {
        LOG.info("Do sync for stable write: " + writeCtx);
        try {
          if (stableHow == WriteStableHow.DATA_SYNC) {
            fos.hsync();
          }
 else {
            Preconditions.checkState(stableHow == WriteStableHow.FILE_SYNC,"Unknown WriteStableHow: " + stableHow);
            fos.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
          }
        }
 catch (        IOException e) {
          LOG.error("hsync failed with writeCtx: " + writeCtx,e);
          throw e;
        }
      }
      WccAttr preOpAttr=latestAttr.getWccAttr();
      WccData fileWcc=new WccData(preOpAttr,latestAttr);
      if (writeCtx.getOriginalCount() != WriteCtx.INVALID_ORIGINAL_COUNT) {
        LOG.warn("Return original count: " + writeCtx.getOriginalCount() + " instead of real data count: "+ count);
        count=writeCtx.getOriginalCount();
      }
      WRITE3Response response=new WRITE3Response(Nfs3Status.NFS3_OK,fileWcc,count,stableHow,Nfs3Constant.WRITE_COMMIT_VERF);
      RpcProgramNfs3.metrics.addWrite(Nfs3Utils.getElapsedTime(writeCtx.startTime));
      Nfs3Utils.writeChannel(channel,response.serialize(new XDR(),xid,new VerifierNone()),xid);
    }
    processCommits(writeCtx.getOffset() + writeCtx.getCount());
  }
 catch (  IOException e) {
    LOG.error("Error writing to fileId " + handle.getFileId() + " at offset "+ offset+ " and length "+ count,e);
    if (!writeCtx.getReplied()) {
      WRITE3Response response=new WRITE3Response(Nfs3Status.NFS3ERR_IO);
      Nfs3Utils.writeChannel(channel,response.serialize(new XDR(),xid,new VerifierNone()),xid);
    }
    LOG.info("Clean up open file context for fileId: " + latestAttr.getFileId());
    cleanup();
  }
}
