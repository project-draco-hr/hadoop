{
  DataInputStream in=new DataInputStream(underlyingIn);
  DataOutputStream out=new DataOutputStream(underlyingOut);
  SaslParticipant sasl=SaslParticipant.createServerSaslParticipant(saslProps,callbackHandler);
  int magicNumber=in.readInt();
  if (magicNumber != SASL_TRANSFER_MAGIC_NUMBER) {
    throw new InvalidMagicNumberException(magicNumber);
  }
  try {
    byte[] remoteResponse=readSaslMessage(in);
    byte[] localResponse=sasl.evaluateChallengeOrResponse(remoteResponse);
    sendSaslMessage(out,localResponse);
    List<CipherOption> cipherOptions=Lists.newArrayList();
    remoteResponse=readSaslMessageAndNegotiationCipherOptions(in,cipherOptions);
    localResponse=sasl.evaluateChallengeOrResponse(remoteResponse);
    checkSaslComplete(sasl,saslProps);
    CipherOption cipherOption=null;
    if (sasl.isNegotiatedQopPrivacy()) {
      cipherOption=negotiateCipherOption(dnConf.getConf(),cipherOptions);
      if (cipherOption != null) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Server using cipher suite " + cipherOption.getCipherSuite().getName());
        }
      }
    }
    sendSaslMessageAndNegotiatedCipherOption(out,localResponse,wrap(cipherOption,sasl));
    return cipherOption != null ? createStreamPair(dnConf.getConf(),cipherOption,underlyingOut,underlyingIn,true) : sasl.createStreamPair(out,in);
  }
 catch (  IOException ioe) {
    if (ioe instanceof SaslException && ioe.getCause() != null && ioe.getCause() instanceof InvalidEncryptionKeyException) {
      sendInvalidKeySaslErrorMessage(out,ioe.getCause().getMessage());
    }
 else {
      sendGenericSaslErrorMessage(out,ioe.getMessage());
    }
    throw ioe;
  }
}
