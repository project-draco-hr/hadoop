{
  Container container=ctx.getContainer();
  PrivilegedOperation launchOp=new PrivilegedOperation(PrivilegedOperation.OperationType.LAUNCH_CONTAINER);
  launchOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),ctx.getExecutionAttribute(USER),Integer.toString(PrivilegedOperation.RunAsUserCommand.LAUNCH_CONTAINER.getValue()),ctx.getExecutionAttribute(APPID),ctx.getExecutionAttribute(CONTAINER_ID_STR),ctx.getExecutionAttribute(CONTAINER_WORK_DIR).toString(),ctx.getExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH).toUri().getPath(),ctx.getExecutionAttribute(NM_PRIVATE_TOKENS_PATH).toUri().getPath(),ctx.getExecutionAttribute(PID_FILE_PATH).toString(),StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,ctx.getExecutionAttribute(LOCAL_DIRS)),StringUtils.join(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR,ctx.getExecutionAttribute(LOG_DIRS)),ctx.getExecutionAttribute(RESOURCES_OPTIONS));
  String tcCommandFile=ctx.getExecutionAttribute(TC_COMMAND_FILE);
  if (tcCommandFile != null) {
    launchOp.appendArgs(tcCommandFile);
  }
  @SuppressWarnings("unchecked") List<String> prefixCommands=(List<String>)ctx.getExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS);
  try {
    privilegedOperationExecutor.executePrivilegedOperation(prefixCommands,launchOp,null,container.getLaunchContext().getEnvironment(),false,false);
  }
 catch (  PrivilegedOperationException e) {
    LOG.warn("Launch container failed. Exception: ",e);
    throw new ContainerExecutionException("Launch container failed",e.getExitCode(),e.getOutput(),e.getErrorOutput());
  }
}
