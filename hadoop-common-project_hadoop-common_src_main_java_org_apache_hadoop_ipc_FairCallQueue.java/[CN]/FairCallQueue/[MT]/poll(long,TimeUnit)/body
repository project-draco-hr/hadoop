{
  int startIdx=this.multiplexer.getAndAdvanceCurrentIndex();
  long nanos=unit.toNanos(timeout);
  takeLock.lockInterruptibly();
  try {
    for (; ; ) {
      BlockingQueue<E> q=this.getFirstNonEmptyQueue(startIdx);
      if (q != null) {
        E e=q.poll();
        if (e != null) {
          return e;
        }
      }
      if (nanos <= 0) {
        return null;
      }
      try {
        nanos=notEmpty.awaitNanos(nanos);
      }
 catch (      InterruptedException ie) {
        notEmpty.signal();
        throw ie;
      }
    }
  }
  finally {
    takeLock.unlock();
  }
}
