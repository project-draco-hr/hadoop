{
  if (priorityLevels < 1) {
    throw new IllegalArgumentException("Number of Priority Levels must be " + "at least 1");
  }
  int numQueues=priorityLevels;
  LOG.info("FairCallQueue is in use with " + numQueues + " queues with total capacity of "+ capacity);
  this.queues=new ArrayList<BlockingQueue<E>>(numQueues);
  this.overflowedCalls=new ArrayList<AtomicLong>(numQueues);
  int queueCapacity=capacity / numQueues;
  int capacityForFirstQueue=queueCapacity + (capacity % numQueues);
  for (int i=0; i < numQueues; i++) {
    if (i == 0) {
      this.queues.add(new LinkedBlockingQueue<E>(capacityForFirstQueue));
    }
 else {
      this.queues.add(new LinkedBlockingQueue<E>(queueCapacity));
    }
    this.overflowedCalls.add(new AtomicLong(0));
  }
  this.multiplexer=new WeightedRoundRobinMultiplexer(numQueues,ns,conf);
  MetricsProxy mp=MetricsProxy.getInstance(ns);
  mp.setDelegate(this);
}
