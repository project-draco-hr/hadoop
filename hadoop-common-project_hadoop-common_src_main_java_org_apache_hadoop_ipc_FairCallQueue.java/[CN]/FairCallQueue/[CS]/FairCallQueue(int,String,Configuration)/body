{
  int numQueues=parseNumQueues(ns,conf);
  LOG.info("FairCallQueue is in use with " + numQueues + " queues.");
  this.queues=new ArrayList<BlockingQueue<E>>(numQueues);
  this.overflowedCalls=new ArrayList<AtomicLong>(numQueues);
  for (int i=0; i < numQueues; i++) {
    this.queues.add(new LinkedBlockingQueue<E>(capacity));
    this.overflowedCalls.add(new AtomicLong(0));
  }
  this.scheduler=new DecayRpcScheduler(numQueues,ns,conf);
  this.multiplexer=new WeightedRoundRobinMultiplexer(numQueues,ns,conf);
  MetricsProxy mp=MetricsProxy.getInstance(ns);
  mp.setDelegate(this);
}
