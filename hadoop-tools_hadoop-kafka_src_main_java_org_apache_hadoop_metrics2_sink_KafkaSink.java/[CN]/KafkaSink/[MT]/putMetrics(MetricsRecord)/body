{
  if (producer == null) {
    throw new MetricsException("Producer in KafkaSink is null!");
  }
  StringBuilder jsonLines=new StringBuilder();
  long timestamp=record.timestamp();
  Instant instant=Instant.ofEpochMilli(timestamp);
  LocalDateTime ldt=LocalDateTime.ofInstant(instant,zoneId);
  String date=ldt.format(dateFormat);
  String time=ldt.format(timeFormat);
  jsonLines.append("{\"hostname\": \"" + hostname);
  jsonLines.append("\", \"timestamp\": " + timestamp);
  jsonLines.append(", \"date\": \"" + date);
  jsonLines.append("\",\"time\": \"" + time);
  jsonLines.append("\",\"name\": \"" + record.name() + "\" ");
  for (  MetricsTag tag : record.tags()) {
    jsonLines.append(", \"" + tag.name().toString().replaceAll("[\\p{Cc}]","") + "\": ");
    jsonLines.append(" \"" + tag.value().toString() + "\"");
  }
  for (  AbstractMetric metric : record.metrics()) {
    jsonLines.append(", \"" + metric.name().toString().replaceAll("[\\p{Cc}]","") + "\": ");
    jsonLines.append(" \"" + metric.value().toString() + "\"");
  }
  jsonLines.append("}");
  LOG.debug("kafka message: " + jsonLines.toString());
  ProducerRecord<Integer,byte[]> data=new ProducerRecord<Integer,byte[]>(topic,jsonLines.toString().getBytes(Charset.forName("UTF-8")));
  Future<RecordMetadata> future=producer.send(data);
  jsonLines.setLength(0);
  try {
    future.get();
  }
 catch (  InterruptedException e) {
    throw new MetricsException("Error sending data",e);
  }
catch (  ExecutionException e) {
    throw new MetricsException("Error sending data",e);
  }
}
