{
  HdfsFileStatus status=nn.getRpcServer().getFileInfo(testdir);
  long dirId=status.getFileId();
  XDR xdr_req=new XDR();
  FileHandle handle=new FileHandle(dirId);
  handle.serialize(xdr_req);
  xdr_req.writeLongAsHyper(0);
  xdr_req.writeLongAsHyper(0);
  xdr_req.writeInt(100);
  xdr_req.writeInt(1000);
  READDIRPLUS3Response responsePlus=nfsd.readdirplus(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
  List<EntryPlus3> direntPlus=responsePlus.getDirListPlus().getEntries();
  assertTrue(direntPlus.size() == 5);
  status=nn.getRpcServer().getFileInfo(testdir + "/f2");
  long f2Id=status.getFileId();
  xdr_req=new XDR();
  handle=new FileHandle(dirId);
  handle.serialize(xdr_req);
  xdr_req.writeLongAsHyper(f2Id);
  xdr_req.writeLongAsHyper(0);
  xdr_req.writeInt(100);
  xdr_req.writeInt(1000);
  responsePlus=nfsd.readdirplus(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
  direntPlus=responsePlus.getDirListPlus().getEntries();
  assertTrue(direntPlus.size() == 1);
  EntryPlus3 entryPlus=direntPlus.get(0);
  assertTrue(entryPlus.getName().equals("f3"));
  hdfs.delete(new Path(testdir + "/f2"),false);
  responsePlus=nfsd.readdirplus(xdr_req.asReadOnlyWrap(),securityHandler,new InetSocketAddress("localhost",1234));
  direntPlus=responsePlus.getDirListPlus().getEntries();
  assertTrue(direntPlus.size() == 2);
}
