{
  boolean firstReplicationLog=true;
  int underReplicatedBlocks=0;
  int decommissionOnlyReplicas=0;
  int underReplicatedInOpenFiles=0;
  while (it.hasNext()) {
    numBlocksChecked++;
    final BlockInfo block=it.next();
    if (blockManager.blocksMap.getStoredBlock(block) == null) {
      LOG.trace("Removing unknown block {}",block);
      it.remove();
      continue;
    }
    BlockCollection bc=blockManager.getBlockCollection(block);
    if (bc == null) {
      continue;
    }
    final NumberReplicas num=blockManager.countNodes(block);
    final int liveReplicas=num.liveReplicas();
    if (blockManager.isNeededReplication(block,bc.getPreferredBlockReplication(),liveReplicas)) {
      if (!blockManager.neededReplications.contains(block) && blockManager.pendingReplications.getNumReplicas(block) == 0 && namesystem.isPopulatingReplQueues()) {
        blockManager.neededReplications.add(block,liveReplicas,num.decommissionedAndDecommissioning(),bc.getPreferredBlockReplication());
      }
    }
    if (isSufficient(block,bc,num)) {
      if (pruneReliableBlocks) {
        it.remove();
      }
      continue;
    }
    if (insufficientList != null) {
      insufficientList.add(block);
    }
    if (firstReplicationLog) {
      logBlockReplicationInfo(block,bc,datanode,num,blockManager.blocksMap.getStorages(block));
      firstReplicationLog=false;
    }
    underReplicatedBlocks++;
    if (bc.isUnderConstruction()) {
      underReplicatedInOpenFiles++;
    }
    if ((liveReplicas == 0) && (num.decommissionedAndDecommissioning() > 0)) {
      decommissionOnlyReplicas++;
    }
  }
  datanode.decommissioningStatus.set(underReplicatedBlocks,decommissionOnlyReplicas,underReplicatedInOpenFiles);
}
