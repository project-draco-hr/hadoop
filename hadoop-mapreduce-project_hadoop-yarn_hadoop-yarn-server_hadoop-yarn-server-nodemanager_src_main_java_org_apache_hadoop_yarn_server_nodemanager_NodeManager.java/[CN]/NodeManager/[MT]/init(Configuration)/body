{
  Context context=new NMContext();
  if (UserGroupInformation.isSecurityEnabled()) {
    LOG.info("Security is enabled on NodeManager. " + "Creating ContainerTokenSecretManager");
    this.containerTokenSecretManager=new ContainerTokenSecretManager();
  }
  this.aclsManager=new ApplicationACLsManager(conf);
  ContainerExecutor exec=ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.NM_CONTAINER_EXECUTOR,DefaultContainerExecutor.class,ContainerExecutor.class),conf);
  try {
    exec.init();
  }
 catch (  IOException e) {
    throw new YarnException("Failed to initialize container executor",e);
  }
  DeletionService del=new DeletionService(exec);
  addService(del);
  AsyncDispatcher dispatcher=new AsyncDispatcher();
  NodeHealthCheckerService healthChecker=null;
  if (NodeHealthCheckerService.shouldRun(conf)) {
    healthChecker=new NodeHealthCheckerService();
    addService(healthChecker);
  }
  NodeStatusUpdater nodeStatusUpdater=createNodeStatusUpdater(context,dispatcher,healthChecker,this.containerTokenSecretManager);
  nodeStatusUpdater.register(this);
  NodeResourceMonitor nodeResourceMonitor=createNodeResourceMonitor();
  addService(nodeResourceMonitor);
  ContainerManagerImpl containerManager=createContainerManager(context,exec,del,nodeStatusUpdater,this.containerTokenSecretManager,this.aclsManager);
  addService(containerManager);
  Service webServer=createWebServer(context,containerManager.getContainersMonitor(),this.aclsManager);
  addService(webServer);
  dispatcher.register(ContainerManagerEventType.class,containerManager);
  addService(dispatcher);
  DefaultMetricsSystem.initialize("NodeManager");
  addService(nodeStatusUpdater);
  super.init(conf);
}
