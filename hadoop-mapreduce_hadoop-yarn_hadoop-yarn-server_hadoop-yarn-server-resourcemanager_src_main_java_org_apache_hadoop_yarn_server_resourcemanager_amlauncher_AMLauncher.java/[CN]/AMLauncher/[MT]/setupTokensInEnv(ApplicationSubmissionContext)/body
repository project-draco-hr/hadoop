{
  Map<String,String> env=new HashMap<String,String>();
  if (UserGroupInformation.isSecurityEnabled()) {
    Credentials credentials=new Credentials();
    DataInputByteBuffer dibb=new DataInputByteBuffer();
    if (asc.getFsTokensTodo() != null) {
      dibb.reset(asc.getFsTokensTodo());
      credentials.readTokenStorageStream(dibb);
    }
    ApplicationTokenIdentifier id=new ApplicationTokenIdentifier(application.getAppAttemptId().getApplicationId());
    Token<ApplicationTokenIdentifier> token=new Token<ApplicationTokenIdentifier>(id,this.applicationTokenSecretManager);
    String schedulerAddressStr=this.conf.get(YarnConfiguration.SCHEDULER_ADDRESS,YarnConfiguration.DEFAULT_SCHEDULER_BIND_ADDRESS);
    InetSocketAddress unresolvedAddr=NetUtils.createSocketAddr(schedulerAddressStr);
    String resolvedAddr=unresolvedAddr.getAddress().getHostAddress() + ":" + unresolvedAddr.getPort();
    token.setService(new Text(resolvedAddr));
    String appMasterTokenEncoded=token.encodeToUrlString();
    LOG.debug("Putting appMaster token in env : " + appMasterTokenEncoded);
    env.put(ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME,appMasterTokenEncoded);
    credentials.addToken(new Text(resolvedAddr),token);
    DataOutputBuffer dob=new DataOutputBuffer();
    credentials.writeTokenStorageToStream(dob);
    asc.setFsTokensTodo(ByteBuffer.wrap(dob.getData(),0,dob.getLength()));
    ApplicationTokenIdentifier identifier=new ApplicationTokenIdentifier(application.getAppAttemptId().getApplicationId());
    SecretKey clientSecretKey=this.clientToAMSecretManager.getMasterKey(identifier);
    String encoded=Base64.encodeBase64URLSafeString(clientSecretKey.getEncoded());
    LOG.debug("The encoded client secret-key to be put in env : " + encoded);
    env.put(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME,encoded);
  }
  return env;
}
