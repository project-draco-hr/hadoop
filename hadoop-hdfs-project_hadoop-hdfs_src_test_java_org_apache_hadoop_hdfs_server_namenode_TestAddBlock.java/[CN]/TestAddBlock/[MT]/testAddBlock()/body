{
  DistributedFileSystem fs=cluster.getFileSystem();
  final Path file1=new Path("/file1");
  final Path file2=new Path("/file2");
  final Path file3=new Path("/file3");
  final Path file4=new Path("/file4");
  DFSTestUtil.createFile(fs,file1,BLOCKSIZE - 1,REPLICATION,0L);
  DFSTestUtil.createFile(fs,file2,BLOCKSIZE,REPLICATION,0L);
  DFSTestUtil.createFile(fs,file3,BLOCKSIZE * 2 - 1,REPLICATION,0L);
  DFSTestUtil.createFile(fs,file4,BLOCKSIZE * 2,REPLICATION,0L);
  cluster.restartNameNode(true);
  FSDirectory fsdir=cluster.getNamesystem().getFSDirectory();
  INodeFile file1Node=fsdir.getINode4Write(file1.toString()).asFile();
  BlockInfo[] file1Blocks=file1Node.getBlocks();
  assertEquals(1,file1Blocks.length);
  assertEquals(BLOCKSIZE - 1,file1Blocks[0].getNumBytes());
  assertEquals(BlockUCState.COMPLETE,file1Blocks[0].getBlockUCState());
  INodeFile file2Node=fsdir.getINode4Write(file2.toString()).asFile();
  BlockInfo[] file2Blocks=file2Node.getBlocks();
  assertEquals(1,file2Blocks.length);
  assertEquals(BLOCKSIZE,file2Blocks[0].getNumBytes());
  assertEquals(BlockUCState.COMPLETE,file2Blocks[0].getBlockUCState());
  INodeFile file3Node=fsdir.getINode4Write(file3.toString()).asFile();
  BlockInfo[] file3Blocks=file3Node.getBlocks();
  assertEquals(2,file3Blocks.length);
  assertEquals(BLOCKSIZE,file3Blocks[0].getNumBytes());
  assertEquals(BlockUCState.COMPLETE,file3Blocks[0].getBlockUCState());
  assertEquals(BLOCKSIZE - 1,file3Blocks[1].getNumBytes());
  assertEquals(BlockUCState.COMPLETE,file3Blocks[1].getBlockUCState());
  INodeFile file4Node=fsdir.getINode4Write(file4.toString()).asFile();
  BlockInfo[] file4Blocks=file4Node.getBlocks();
  assertEquals(2,file4Blocks.length);
  assertEquals(BLOCKSIZE,file4Blocks[0].getNumBytes());
  assertEquals(BlockUCState.COMPLETE,file4Blocks[0].getBlockUCState());
  assertEquals(BLOCKSIZE,file4Blocks[1].getNumBytes());
  assertEquals(BlockUCState.COMPLETE,file4Blocks[1].getBlockUCState());
}
