{
  final Random r=new Random();
  final long s=r.nextLong();
  r.setSeed(s);
  LOG.info("spec: " + s);
  final DataInputBuffer in=new DataInputBuffer();
  final DataOutputBuffer out=new DataOutputBuffer();
  a.setType(GridmixKey.REDUCE_SPEC);
  b.setType(GridmixKey.REDUCE_SPEC);
  for (int i=0; i < 100; ++i) {
    final int in_rec=r.nextInt(Integer.MAX_VALUE);
    a.setReduceInputRecords(in_rec);
    final int out_rec=r.nextInt(Integer.MAX_VALUE);
    a.setReduceOutputRecords(out_rec);
    final int out_bytes=r.nextInt(Integer.MAX_VALUE);
    a.setReduceOutputBytes(out_bytes);
    final int min=WritableUtils.getVIntSize(in_rec) + WritableUtils.getVIntSize(out_rec) + WritableUtils.getVIntSize(out_bytes)+ WritableUtils.getVIntSize(0);
    assertEquals(min + 2,a.fixedBytes());
    final int size=r.nextInt(1024) + a.fixedBytes() + 1;
    setSerialize(a,r.nextLong(),size,out);
    assertEquals(size,out.getLength());
    assertTrue(a.equals(a));
    assertEquals(0,a.compareTo(a));
    in.reset(out.getData(),0,out.getLength());
    b.readFields(in);
    assertEquals(size,b.getSize());
    assertEquals(in_rec,b.getReduceInputRecords());
    assertEquals(out_rec,b.getReduceOutputRecords());
    assertEquals(out_bytes,b.getReduceOutputBytes());
    assertTrue(a.equals(b));
    assertEquals(0,a.compareTo(b));
    assertEquals(a.hashCode(),b.hashCode());
  }
}
