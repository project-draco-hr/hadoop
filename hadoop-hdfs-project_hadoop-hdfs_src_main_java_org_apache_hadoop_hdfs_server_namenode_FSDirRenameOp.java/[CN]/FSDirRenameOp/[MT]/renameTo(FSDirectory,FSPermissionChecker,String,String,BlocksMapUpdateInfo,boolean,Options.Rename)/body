{
  final INodesInPath srcIIP=fsd.resolvePathForWrite(pc,src,false);
  final INodesInPath dstIIP=fsd.resolvePathForWrite(pc,dst,false);
  src=srcIIP.getPath();
  dst=dstIIP.getPath();
  if (fsd.isPermissionEnabled()) {
    boolean renameToTrash=false;
    if (null != options && Arrays.asList(options).contains(Options.Rename.TO_TRASH)) {
      renameToTrash=true;
    }
    if (renameToTrash) {
      fsd.checkPermission(pc,srcIIP,false,null,FsAction.WRITE,null,FsAction.ALL,true);
    }
 else {
      fsd.checkPermission(pc,srcIIP,false,null,FsAction.WRITE,null,null,false);
    }
    fsd.checkPermission(pc,dstIIP,false,FsAction.WRITE,null,null,null,false);
  }
  if (NameNode.stateChangeLog.isDebugEnabled()) {
    NameNode.stateChangeLog.debug("DIR* FSDirectory.renameTo: " + src + " to "+ dst);
  }
  final long mtime=Time.now();
  fsd.writeLock();
  try {
    if (unprotectedRenameTo(fsd,src,dst,srcIIP,dstIIP,mtime,collectedBlocks,options)) {
      FSDirDeleteOp.incrDeletedFileCount(1);
    }
  }
  finally {
    fsd.writeUnlock();
  }
  fsd.getEditLog().logRename(src,dst,mtime,logRetryCache,options);
  return dst;
}
