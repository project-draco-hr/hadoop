{
  html._(MetricsOverviewTable.class);
  ResourceScheduler sched=rm.getResourceScheduler();
  String type=$(NODE_STATE);
  String labelFilter=$(NODE_LABEL,CommonNodeLabelsManager.ANY).trim();
  TBODY<TABLE<Hamlet>> tbody=html.table("#nodes").thead().tr().th(".nodelabels","Node Labels").th(".rack","Rack").th(".state","Node State").th(".nodeaddress","Node Address").th(".nodehttpaddress","Node HTTP Address").th(".lastHealthUpdate","Last health-update").th(".healthReport","Health-report").th(".containers","Containers").th(".mem","Mem Used").th(".mem","Mem Avail").th(".vcores","VCores Used").th(".vcores","VCores Avail").th(".nodeManagerVersion","Version")._()._().tbody();
  NodeState stateFilter=null;
  if (type != null && !type.isEmpty()) {
    stateFilter=NodeState.valueOf(StringUtils.toUpperCase(type));
  }
  Collection<RMNode> rmNodes=this.rm.getRMContext().getRMNodes().values();
  boolean isInactive=false;
  if (stateFilter != null) {
switch (stateFilter) {
case DECOMMISSIONED:
case LOST:
case REBOOTED:
case SHUTDOWN:
      rmNodes=this.rm.getRMContext().getInactiveRMNodes().values();
    isInactive=true;
  break;
case DECOMMISSIONING:
break;
default :
LOG.debug("Unexpected state filter for inactive RM node");
}
}
StringBuilder nodeTableData=new StringBuilder("[\n");
for (RMNode ni : rmNodes) {
if (stateFilter != null) {
NodeState state=ni.getState();
if (!stateFilter.equals(state)) {
continue;
}
}
 else {
if (ni.getState() == NodeState.UNHEALTHY) {
continue;
}
}
if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {
if (labelFilter.isEmpty()) {
if (!ni.getNodeLabels().isEmpty()) {
continue;
}
}
 else if (!ni.getNodeLabels().contains(labelFilter)) {
continue;
}
}
NodeInfo info=new NodeInfo(ni,sched);
int usedMemory=(int)info.getUsedMemory();
int availableMemory=(int)info.getAvailableMemory();
nodeTableData.append("[\"").append(StringUtils.join(",",info.getNodeLabels())).append("\",\"").append(info.getRack()).append("\",\"").append(info.getState()).append("\",\"").append(info.getNodeId());
if (isInactive) {
nodeTableData.append("\",\"").append("N/A").append("\",\"");
}
 else {
String httpAddress=info.getNodeHTTPAddress();
nodeTableData.append("\",\"<a ").append("href='" + "//" + httpAddress).append("'>").append(httpAddress).append("</a>\",").append("\"");
}
nodeTableData.append("<br title='").append(String.valueOf(info.getLastHealthUpdate())).append("'>").append(Times.format(info.getLastHealthUpdate())).append("\",\"").append(info.getHealthReport()).append("\",\"").append(String.valueOf(info.getNumContainers())).append("\",\"").append("<br title='").append(String.valueOf(usedMemory)).append("'>").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB)).append("\",\"").append("<br title='").append(String.valueOf(availableMemory)).append("'>").append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB)).append("\",\"").append(String.valueOf(info.getUsedVirtualCores())).append("\",\"").append(String.valueOf(info.getAvailableVirtualCores())).append("\",\"").append(ni.getNodeManagerVersion()).append("\"],\n");
}
if (nodeTableData.charAt(nodeTableData.length() - 2) == ',') {
nodeTableData.delete(nodeTableData.length() - 2,nodeTableData.length() - 1);
}
nodeTableData.append("]");
html.script().$type("text/javascript")._("var nodeTableData=" + nodeTableData)._();
tbody._()._();
}
