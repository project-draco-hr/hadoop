{
  List<Pair<String,String>> argsAndConfNames=new ArrayList<Pair<String,String>>();
  argsAndConfNames.add(new Pair<String,String>("-libjars","tmpjars"));
  argsAndConfNames.add(new Pair<String,String>("-files","tmpfiles"));
  argsAndConfNames.add(new Pair<String,String>("-archives","tmparchives"));
  for (  Pair<String,String> argAndConfName : argsAndConfNames) {
    String arg=argAndConfName.getFirst();
    String configName=argAndConfName.getSecond();
    File tmpFileOne=new File(testDir,"tmpfile1");
    Path tmpPathOne=new Path(tmpFileOne.toString());
    File tmpFileTwo=new File(testDir,"tmpfile2");
    Path tmpPathTwo=new Path(tmpFileTwo.toString());
    localFs.create(tmpPathOne);
    localFs.create(tmpPathTwo);
    String[] args=new String[2];
    args[0]=arg;
    args[1]=String.format("%s,,%s",tmpFileOne.toURI().toString(),tmpFileTwo.toURI().toString());
    try {
      new GenericOptionsParser(conf,args);
      fail("Expected exception for empty filename");
    }
 catch (    IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains("File name can't be" + " empty string",e);
    }
    args[1]=",,";
    try {
      new GenericOptionsParser(conf,args);
      fail("Expected exception for zero file list length");
    }
 catch (    IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains("File name can't be" + " empty string",e);
    }
    args[1]=String.format("%s, ,%s",tmpFileOne.toURI().toString(),tmpFileTwo.toURI().toString());
    try {
      new GenericOptionsParser(conf,args);
      fail("Expected exception for filename with space character");
    }
 catch (    IllegalArgumentException e) {
      GenericTestUtils.assertExceptionContains("URISyntaxException",e);
    }
  }
}
