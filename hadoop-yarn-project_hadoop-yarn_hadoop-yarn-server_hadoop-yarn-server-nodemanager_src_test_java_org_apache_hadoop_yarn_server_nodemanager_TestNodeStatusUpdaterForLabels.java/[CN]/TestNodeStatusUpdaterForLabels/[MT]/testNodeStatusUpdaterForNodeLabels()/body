{
  final ResourceTrackerForLabels resourceTracker=new ResourceTrackerForLabels();
  nm=new NodeManager(){
    @Override protected NodeLabelsProvider createNodeLabelsProvider(    Configuration conf) throws IOException {
      return dummyLabelsProviderRef;
    }
    @Override protected NodeStatusUpdater createNodeStatusUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker,    NodeLabelsProvider labelsProvider){
      return new NodeStatusUpdaterImpl(context,dispatcher,healthChecker,metrics,labelsProvider){
        @Override protected ResourceTracker getRMClient(){
          return resourceTracker;
        }
        @Override protected void stopRMProxy(){
          return;
        }
      }
;
    }
  }
;
  YarnConfiguration conf=createNMConfigForDistributeNodeLabels();
  conf.setLong(YarnConfiguration.NM_NODE_LABELS_RESYNC_INTERVAL,2000);
  nm.init(conf);
  resourceTracker.resetNMHeartbeatReceiveFlag();
  nm.start();
  resourceTracker.waitTillRegister();
  assertNLCollectionEquals(dummyLabelsProviderRef.getNodeLabels(),resourceTracker.labels);
  resourceTracker.waitTillHeartbeat();
  resourceTracker.resetNMHeartbeatReceiveFlag();
  dummyLabelsProviderRef.setNodeLabels(toNodeLabelSet("P"));
  sendOutofBandHeartBeat();
  resourceTracker.waitTillHeartbeat();
  assertNLCollectionEquals(dummyLabelsProviderRef.getNodeLabels(),resourceTracker.labels);
  resourceTracker.resetNMHeartbeatReceiveFlag();
  sendOutofBandHeartBeat();
  resourceTracker.waitTillHeartbeat();
  resourceTracker.resetNMHeartbeatReceiveFlag();
  assertNull("If no change in labels then null should be sent as part of request",resourceTracker.labels);
  dummyLabelsProviderRef.setNodeLabels(null);
  sendOutofBandHeartBeat();
  resourceTracker.waitTillHeartbeat();
  assertNotNull("If provider sends null then empty label set should be sent and not null",resourceTracker.labels);
  assertTrue("If provider sends null then empty labels should be sent",resourceTracker.labels.isEmpty());
  resourceTracker.resetNMHeartbeatReceiveFlag();
  int nullLabels=0;
  int nonNullLabels=0;
  dummyLabelsProviderRef.setNodeLabels(toNodeLabelSet("P1"));
  for (int i=0; i < 5; i++) {
    sendOutofBandHeartBeat();
    resourceTracker.waitTillHeartbeat();
    if (null == resourceTracker.labels) {
      nullLabels++;
    }
 else {
      Assert.assertEquals("In heartbeat PI labels should be send",toNodeLabelSet("P1"),resourceTracker.labels);
      nonNullLabels++;
    }
    resourceTracker.resetNMHeartbeatReceiveFlag();
    Thread.sleep(1000);
  }
  Assert.assertTrue("More than one heartbeat with empty labels expected",nullLabels > 1);
  Assert.assertTrue("More than one heartbeat with labels expected",nonNullLabels > 1);
  nm.stop();
}
