{
  LOG.info("Processing the event " + event.toString());
  final String containerManagerBindAddr=event.getContainerMgrAddress();
  ContainerId containerID=event.getContainerID();
  ContainerToken containerToken=event.getContainerToken();
switch (event.getType()) {
case CONTAINER_REMOTE_LAUNCH:
    ContainerRemoteLaunchEvent launchEv=(ContainerRemoteLaunchEvent)event;
  TaskAttemptId taskAttemptID=launchEv.getTaskAttemptID();
try {
  ContainerManager proxy=getCMProxy(containerID,containerManagerBindAddr,containerToken);
  ContainerLaunchContext containerLaunchContext=launchEv.getContainer();
  StartContainerRequest startRequest=recordFactory.newRecordInstance(StartContainerRequest.class);
  startRequest.setContainerLaunchContext(containerLaunchContext);
  StartContainerResponse response=proxy.startContainer(startRequest);
  ByteBuffer portInfo=response.getServiceResponse(ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID);
  int port=-1;
  if (portInfo != null) {
    port=ShuffleHandler.deserializeMetaData(portInfo);
  }
  LOG.info("Shuffle port returned by ContainerManager for " + taskAttemptID + " : "+ port);
  if (port < 0) {
    throw new IllegalStateException("Invalid shuffle port number " + port + " returned for "+ taskAttemptID);
  }
  context.getEventHandler().handle(new TaskAttemptContainerLaunchedEvent(taskAttemptID,port));
}
 catch (Throwable t) {
  String message="Container launch failed for " + containerID + " : "+ StringUtils.stringifyException(t);
  LOG.error(message);
  context.getEventHandler().handle(new TaskAttemptDiagnosticsUpdateEvent(taskAttemptID,message));
  context.getEventHandler().handle(new TaskAttemptEvent(taskAttemptID,TaskAttemptEventType.TA_CONTAINER_LAUNCH_FAILED));
}
break;
case CONTAINER_REMOTE_CLEANUP:
if (eventQueue.contains(event)) {
eventQueue.remove(event);
context.getEventHandler().handle(new ContainerAllocatorEvent(event.getTaskAttemptID(),ContainerAllocator.EventType.CONTAINER_DEALLOCATE));
}
 else {
try {
ContainerManager proxy=getCMProxy(containerID,containerManagerBindAddr,containerToken);
StopContainerRequest stopRequest=recordFactory.newRecordInstance(StopContainerRequest.class);
stopRequest.setContainerId(event.getContainerID());
proxy.stopContainer(stopRequest);
}
 catch (Throwable t) {
LOG.warn("cleanup failed for container " + event.getContainerID(),t);
}
context.getEventHandler().handle(new TaskAttemptEvent(event.getTaskAttemptID(),TaskAttemptEventType.TA_CONTAINER_CLEANED));
}
break;
}
}
