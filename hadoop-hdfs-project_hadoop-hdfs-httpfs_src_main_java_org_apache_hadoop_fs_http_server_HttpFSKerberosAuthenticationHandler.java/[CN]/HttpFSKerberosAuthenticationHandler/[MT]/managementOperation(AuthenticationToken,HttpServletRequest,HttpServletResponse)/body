{
  boolean requestContinues=true;
  String op=request.getParameter(HttpFSFileSystem.OP_PARAM);
  op=(op != null) ? op.toUpperCase() : null;
  if (DELEGATION_TOKEN_OPS.contains(op) && !request.getMethod().equals("OPTIONS")) {
    DelegationTokenOperation dtOp=DelegationTokenOperation.valueOf(op);
    if (dtOp.getHttpMethod().equals(request.getMethod())) {
      if (dtOp.requiresKerberosCredentials() && token == null) {
        response.sendError(HttpServletResponse.SC_UNAUTHORIZED,MessageFormat.format("Operation [{0}] requires SPNEGO authentication established",dtOp));
        requestContinues=false;
      }
 else {
        DelegationTokenManager tokenManager=HttpFSServerWebApp.get().get(DelegationTokenManager.class);
        try {
          Map map=null;
switch (dtOp) {
case GETDELEGATIONTOKEN:
            String renewerParam=request.getParameter(HttpFSKerberosAuthenticator.RENEWER_PARAM);
          if (renewerParam == null) {
            renewerParam=token.getUserName();
          }
        Token<?> dToken=tokenManager.createToken(UserGroupInformation.getCurrentUser(),renewerParam);
      map=delegationTokenToJSON(dToken);
    break;
case RENEWDELEGATIONTOKEN:
case CANCELDELEGATIONTOKEN:
  String tokenParam=request.getParameter(HttpFSKerberosAuthenticator.TOKEN_PARAM);
if (tokenParam == null) {
  response.sendError(HttpServletResponse.SC_BAD_REQUEST,MessageFormat.format("Operation [{0}] requires the parameter [{1}]",dtOp,HttpFSKerberosAuthenticator.TOKEN_PARAM));
  requestContinues=false;
}
 else {
  if (dtOp == DelegationTokenOperation.CANCELDELEGATIONTOKEN) {
    Token<DelegationTokenIdentifier> dt=new Token<DelegationTokenIdentifier>();
    dt.decodeFromUrlString(tokenParam);
    tokenManager.cancelToken(dt,UserGroupInformation.getCurrentUser().getUserName());
  }
 else {
    Token<DelegationTokenIdentifier> dt=new Token<DelegationTokenIdentifier>();
    dt.decodeFromUrlString(tokenParam);
    long expirationTime=tokenManager.renewToken(dt,token.getUserName());
    map=new HashMap();
    map.put("long",expirationTime);
  }
}
break;
}
if (requestContinues) {
response.setStatus(HttpServletResponse.SC_OK);
if (map != null) {
response.setContentType(MediaType.APPLICATION_JSON);
Writer writer=response.getWriter();
JSONObject.writeJSONString(map,writer);
writer.write(ENTER);
writer.flush();
}
requestContinues=false;
}
}
 catch (DelegationTokenManagerException ex) {
throw new AuthenticationException(ex.toString(),ex);
}
}
}
 else {
response.sendError(HttpServletResponse.SC_BAD_REQUEST,MessageFormat.format("Wrong HTTP method [{0}] for operation [{1}], it should be [{2}]",request.getMethod(),dtOp,dtOp.getHttpMethod()));
requestContinues=false;
}
}
return requestContinues;
}
