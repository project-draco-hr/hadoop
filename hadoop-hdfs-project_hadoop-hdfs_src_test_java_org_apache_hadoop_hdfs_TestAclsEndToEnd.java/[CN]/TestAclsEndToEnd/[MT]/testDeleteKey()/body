{
  Configuration conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.CREATE",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "MANAGEMENT",realUgi.getUserName());
  try {
    setup(conf);
    assertTrue("Exception during key creation",createKey(realUgi,KEY1,conf));
    assertTrue("Exception during key creation",createKey(realUgi,KEY2,conf));
    assertTrue("Exception during key creation",createKey(realUgi,KEY3,conf));
  }
  finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DELETE",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "MANAGEMENT",realUgi.getUserName());
  try {
    setup(conf,false);
    assertTrue("Exception during key deletion with correct config" + " using whitelist key ACLs",deleteKey(realUgi,KEY1));
  }
  finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DELETE",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "MANAGEMENT",realUgi.getUserName());
  try {
    setup(conf,false);
    assertTrue("Exception during key deletion with correct config" + " using default key ACLs",deleteKey(realUgi,KEY2));
  }
  finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DELETE",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "blacklist.DELETE",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "MANAGEMENT",realUgi.getUserName());
  try {
    setup(conf,false);
    assertFalse("Allowed key deletion with blacklist for DELETE",deleteKey(realUgi,KEY3));
  }
  finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DELETE"," ");
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "MANAGEMENT",realUgi.getUserName());
  try {
    setup(conf,false);
    assertFalse("Allowed key deletion without DELETE KMS ACL",deleteKey(realUgi,KEY3));
  }
  finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DELETE",realUgi.getUserName());
  try {
    setup(conf,false);
    assertFalse("Allowed key deletion without MANAGMENT key ACL",deleteKey(realUgi,KEY3));
  }
  finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DELETE",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "MANAGEMENT",realUgi.getUserName());
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + KEY3 + ".DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false);
    assertFalse("Allowed key deletion when default key ACL should have been" + " overridden by key ACL",deleteKey(realUgi,KEY3));
  }
  finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "MANAGEMENT",realUgi.getUserName());
  try {
    setup(conf,false);
    assertTrue("Exception during key deletion with default KMS ACLs",deleteKey(realUgi,KEY3));
  }
  finally {
    teardown();
  }
}
