{
  Configuration conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.CREATE",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "MANAGEMENT",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  assertTrue(new File(kmsDir,"kms.keystore").length() == 0);
  try {
    setup(conf);
    assertTrue("Exception during key creation",createKey(realUgi,KEY1,conf));
    fs.mkdirs(ZONE1);
    assertTrue("Exception during zone creation",createEncryptionZone(realUgi,KEY1,ZONE1));
    assertTrue("Exception during file creation",createFile(realUgi,FILE1,TEXT));
  }
 catch (  Throwable ex) {
    fs.delete(ZONE1,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertTrue("Exception while reading file with correct config with" + " whitelist ACLs",compareFile(realUgi,FILE1,TEXT));
  }
 catch (  Throwable ex) {
    fs.delete(ZONE1,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertTrue("Exception while reading file with correct config" + " with default ACLs",compareFile(realUgi,FILE1,TEXT));
  }
 catch (  Throwable ex) {
    fs.delete(ZONE1,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + KEY1 + ".READ",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertFalse("Allowed file read when default key ACLs should have been" + " overridden by key ACL",compareFile(realUgi,FILE1,TEXT));
  }
 catch (  Throwable ex) {
    fs.delete(ZONE1,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "blacklist.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertFalse("Allowed file read with blacklist for DECRYPT_EEK",compareFile(realUgi,FILE1,TEXT));
  }
 catch (  Throwable ex) {
    fs.delete(ZONE1,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertTrue("Exception while reading file with default KMS ACLs",compareFile(realUgi,FILE1,TEXT));
  }
 catch (  Throwable ex) {
    fs.delete(ZONE1,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK"," ");
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertFalse("Allowed file read without DECRYPT_EEK KMS ACL",compareFile(realUgi,FILE1,TEXT));
  }
 catch (  Throwable ex) {
    fs.delete(ZONE1,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  try {
    setup(conf,false,false);
    assertFalse("Allowed file read without DECRYPT_EEK key ACL",compareFile(realUgi,FILE1,TEXT));
  }
 catch (  Throwable ex) {
    fs.delete(ZONE1,true);
    throw ex;
  }
 finally {
    teardown();
  }
}
