{
  Configuration conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.CREATE",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "MANAGEMENT",realUgi.getUserName());
  try {
    setup(conf);
    assertTrue("Exception during key creation",createKey(realUgi,KEY1,conf));
  }
  finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  try {
    setup(conf,false);
    fs.mkdirs(ZONE1);
    assertTrue("Exception during zone creation with correct config using" + " whitelist key ACLs",createEncryptionZone(realUgi,KEY1,ZONE1));
  }
  finally {
    fs.delete(ZONE1,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  try {
    setup(conf,false);
    fs.mkdirs(ZONE2);
    assertTrue("Exception during zone creation with correct config using" + " default key ACLs",createEncryptionZone(realUgi,KEY1,ZONE2));
  }
  finally {
    fs.delete(ZONE2,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + KEY1 + ".DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false);
    fs.mkdirs(ZONE3);
    assertFalse("Allowed creation of zone when default key ACLs should have" + " been overridden by key ACL",createEncryptionZone(realUgi,KEY1,ZONE3));
  }
  finally {
    fs.delete(ZONE3,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "blacklist.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  try {
    setup(conf,false);
    fs.mkdirs(ZONE3);
    assertFalse("Allowed zone creation of zone with blacklisted GET_METADATA",createEncryptionZone(realUgi,KEY1,ZONE3));
  }
  finally {
    fs.delete(ZONE3,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "blacklist.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  try {
    setup(conf,false);
    fs.mkdirs(ZONE3);
    assertFalse("Allowed zone creation of zone with blacklisted GENERATE_EEK",createEncryptionZone(realUgi,KEY1,ZONE3));
  }
  finally {
    fs.delete(ZONE3,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  try {
    setup(conf,false);
    fs.mkdirs(ZONE3);
    assertTrue("Exception during zone creation with default KMS ACLs",createEncryptionZone(realUgi,KEY1,ZONE3));
  }
  finally {
    fs.delete(ZONE3,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA"," ");
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  try {
    setup(conf,false);
    fs.mkdirs(ZONE4);
    assertFalse("Allowed zone creation without GET_METADATA KMS ACL",createEncryptionZone(realUgi,KEY1,ZONE4));
  }
  finally {
    fs.delete(ZONE4,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK"," ");
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  try {
    setup(conf,false);
    fs.mkdirs(ZONE4);
    assertFalse("Allowed zone creation without GENERATE_EEK KMS ACL",createEncryptionZone(realUgi,KEY1,ZONE4));
  }
  finally {
    fs.delete(ZONE4,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  try {
    setup(conf,false);
    fs.mkdirs(ZONE4);
    assertFalse("Allowed zone creation without READ ACL",createEncryptionZone(realUgi,KEY1,ZONE4));
  }
  finally {
    fs.delete(ZONE4,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  try {
    setup(conf,false);
    fs.mkdirs(ZONE4);
    assertFalse("Allowed zone creation without GENERATE_EEK ACL",createEncryptionZone(realUgi,KEY1,ZONE4));
  }
  finally {
    fs.delete(ZONE4,true);
    teardown();
  }
}
