{
  Configuration conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.CREATE",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GET_METADATA",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "MANAGEMENT",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "READ",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  assertTrue(new File(kmsDir,"kms.keystore").length() == 0);
  try {
    setup(conf);
    assertTrue("Exception during key creation",createKey(realUgi,KEY1,conf));
    fs.mkdirs(ZONE1);
    assertTrue("Exception during zone creation",createEncryptionZone(realUgi,KEY1,ZONE1));
    fs.mkdirs(ZONE2);
    assertTrue("Exception during zone creation",createEncryptionZone(realUgi,KEY1,ZONE2));
    fs.mkdirs(ZONE3);
    assertTrue("Exception during zone creation",createEncryptionZone(realUgi,KEY1,ZONE3));
    fs.mkdirs(ZONE4);
    assertTrue("Exception during zone creation",createEncryptionZone(realUgi,KEY1,ZONE4));
  }
 catch (  Throwable ex) {
    fs.delete(ZONE1,true);
    fs.delete(ZONE2,true);
    fs.delete(ZONE3,true);
    fs.delete(ZONE4,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertTrue("Exception during file creation with correct config" + " using whitelist ACL",createFile(realUgi,FILE1,TEXT));
  }
  finally {
    fs.delete(ZONE1,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertTrue("Exception during file creation with correct config" + " using whitelist ACL",createFile(realUgi,FILE2,TEXT));
  }
  finally {
    fs.delete(ZONE2,true);
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + KEY1 + ".READ",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertFalse("Allowed file creation when default key ACLs should have been" + " overridden by key ACL",createFile(realUgi,FILE3,TEXT));
  }
 catch (  Exception ex) {
    fs.delete(ZONE3,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "blacklist.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertFalse("Allowed file creation with blacklist for GENERATE_EEK",createFile(realUgi,FILE3,TEXT));
  }
 catch (  Exception ex) {
    fs.delete(ZONE3,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "blacklist.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertFalse("Allowed file creation with blacklist for DECRYPT_EEK",createFile(realUgi,FILE3,TEXT));
  }
 catch (  Exception ex) {
    fs.delete(ZONE3,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertTrue("Exception during file creation with default KMS ACLs",createFile(realUgi,FILE3,TEXT));
  }
 catch (  Exception ex) {
    fs.delete(ZONE3,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK"," ");
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertFalse("Allowed file creation without GENERATE_EEK KMS ACL",createFile(realUgi,FILE4,TEXT));
  }
 catch (  Exception ex) {
    fs.delete(ZONE3,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK"," ");
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertFalse("Allowed file creation without DECRYPT_EEK KMS ACL",createFile(realUgi,FILE3,TEXT));
  }
 catch (  Exception ex) {
    fs.delete(ZONE3,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "DECRYPT_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertFalse("Allowed file creation without GENERATE_EEK key ACL",createFile(realUgi,FILE3,TEXT));
  }
 catch (  Exception ex) {
    fs.delete(ZONE3,true);
    throw ex;
  }
 finally {
    teardown();
  }
  conf=new Configuration();
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.GENERATE_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.CONFIG_PREFIX + "acl.DECRYPT_EEK",realUgi.getUserName());
  conf.set(KMSConfiguration.WHITELIST_KEY_ACL_PREFIX + "GENERATE_EEK",realUgi.getUserName());
  try {
    setup(conf,false,false);
    assertFalse("Allowed file creation without DECRYPT_EEK key ACL",createFile(realUgi,FILE3,TEXT));
  }
 catch (  Exception ex) {
    fs.delete(ZONE3,true);
    throw ex;
  }
 finally {
    teardown();
  }
}
