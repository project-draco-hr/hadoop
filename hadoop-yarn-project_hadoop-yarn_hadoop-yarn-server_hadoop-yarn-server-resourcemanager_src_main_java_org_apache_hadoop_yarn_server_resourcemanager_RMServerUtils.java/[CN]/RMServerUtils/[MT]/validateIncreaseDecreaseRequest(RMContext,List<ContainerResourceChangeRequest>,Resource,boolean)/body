{
  if (requests == null) {
    return;
  }
  for (  ContainerResourceChangeRequest request : requests) {
    if (request.getCapability().getMemory() < 0 || request.getCapability().getMemory() > maximumAllocation.getMemory()) {
      throw new InvalidResourceRequestException("Invalid " + (increase ? "increase" : "decrease") + " request"+ ", requested memory < 0"+ ", or requested memory > max configured"+ ", requestedMemory="+ request.getCapability().getMemory()+ ", maxMemory="+ maximumAllocation.getMemory());
    }
    if (request.getCapability().getVirtualCores() < 0 || request.getCapability().getVirtualCores() > maximumAllocation.getVirtualCores()) {
      throw new InvalidResourceRequestException("Invalid " + (increase ? "increase" : "decrease") + " request"+ ", requested virtual cores < 0"+ ", or requested virtual cores > max configured"+ ", requestedVirtualCores="+ request.getCapability().getVirtualCores()+ ", maxVirtualCores="+ maximumAllocation.getVirtualCores());
    }
    ContainerId containerId=request.getContainerId();
    ResourceScheduler scheduler=rmContext.getScheduler();
    RMContainer rmContainer=scheduler.getRMContainer(containerId);
    if (null == rmContainer) {
      String msg="Failed to get rmContainer for " + (increase ? "increase" : "decrease") + " request, with container-id="+ containerId;
      throw new InvalidResourceRequestException(msg);
    }
    ResourceCalculator rc=scheduler.getResourceCalculator();
    Resource targetResource=Resources.normalize(rc,request.getCapability(),scheduler.getMinimumResourceCapability(),scheduler.getMaximumResourceCapability(),scheduler.getMinimumResourceCapability());
    request.setCapability(targetResource);
  }
}
