{
  int argsLen=(args == null) ? 0 : args.length;
  StartupOption startOpt=StartupOption.REGULAR;
  for (int i=0; i < argsLen; i++) {
    String cmd=args[i];
    if (StartupOption.FORMAT.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.FORMAT;
      for (i=i + 1; i < argsLen; i++) {
        if (args[i].equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {
          i++;
          if (i >= argsLen) {
            LOG.error("Must specify a valid cluster ID after the " + StartupOption.CLUSTERID.getName() + " flag");
            return null;
          }
          String clusterId=args[i];
          if (clusterId.isEmpty() || clusterId.equalsIgnoreCase(StartupOption.FORCE.getName()) || clusterId.equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {
            LOG.error("Must specify a valid cluster ID after the " + StartupOption.CLUSTERID.getName() + " flag");
            return null;
          }
          startOpt.setClusterId(clusterId);
        }
        if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {
          startOpt.setForceFormat(true);
        }
        if (args[i].equalsIgnoreCase(StartupOption.NONINTERACTIVE.getName())) {
          startOpt.setInteractiveFormat(false);
        }
      }
    }
 else     if (StartupOption.GENCLUSTERID.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.GENCLUSTERID;
    }
 else     if (StartupOption.REGULAR.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.REGULAR;
    }
 else     if (StartupOption.BACKUP.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.BACKUP;
    }
 else     if (StartupOption.CHECKPOINT.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.CHECKPOINT;
    }
 else     if (StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) || StartupOption.UPGRADEONLY.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.UPGRADE.getName().equalsIgnoreCase(cmd) ? StartupOption.UPGRADE : StartupOption.UPGRADEONLY;
      while (i + 1 < argsLen) {
        String flag=args[i + 1];
        if (flag.equalsIgnoreCase(StartupOption.CLUSTERID.getName())) {
          if (i + 2 < argsLen) {
            i+=2;
            startOpt.setClusterId(args[i]);
          }
 else {
            LOG.error("Must specify a valid cluster ID after the " + StartupOption.CLUSTERID.getName() + " flag");
            return null;
          }
        }
 else         if (flag.equalsIgnoreCase(StartupOption.RENAMERESERVED.getName())) {
          if (i + 2 < argsLen) {
            FSImageFormat.setRenameReservedPairs(args[i + 2]);
            i+=2;
          }
 else {
            FSImageFormat.useDefaultRenameReservedPairs();
            i+=1;
          }
        }
 else {
          LOG.error("Unknown upgrade flag " + flag);
          return null;
        }
      }
    }
 else     if (StartupOption.ROLLINGUPGRADE.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.ROLLINGUPGRADE;
      ++i;
      if (i >= argsLen) {
        LOG.error("Must specify a rolling upgrade startup option " + RollingUpgradeStartupOption.getAllOptionString());
        return null;
      }
      startOpt.setRollingUpgradeStartupOption(args[i]);
    }
 else     if (StartupOption.ROLLBACK.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.ROLLBACK;
    }
 else     if (StartupOption.IMPORT.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.IMPORT;
    }
 else     if (StartupOption.BOOTSTRAPSTANDBY.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.BOOTSTRAPSTANDBY;
      return startOpt;
    }
 else     if (StartupOption.INITIALIZESHAREDEDITS.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.INITIALIZESHAREDEDITS;
      for (i=i + 1; i < argsLen; i++) {
        if (StartupOption.NONINTERACTIVE.getName().equals(args[i])) {
          startOpt.setInteractiveFormat(false);
        }
 else         if (StartupOption.FORCE.getName().equals(args[i])) {
          startOpt.setForceFormat(true);
        }
 else {
          LOG.error("Invalid argument: " + args[i]);
          return null;
        }
      }
      return startOpt;
    }
 else     if (StartupOption.RECOVER.getName().equalsIgnoreCase(cmd)) {
      if (startOpt != StartupOption.REGULAR) {
        throw new RuntimeException("Can't combine -recover with " + "other startup options.");
      }
      startOpt=StartupOption.RECOVER;
      while (++i < argsLen) {
        if (args[i].equalsIgnoreCase(StartupOption.FORCE.getName())) {
          startOpt.setForce(MetaRecoveryContext.FORCE_FIRST_CHOICE);
        }
 else {
          throw new RuntimeException("Error parsing recovery options: " + "can't understand option \"" + args[i] + "\"");
        }
      }
    }
 else     if (StartupOption.METADATAVERSION.getName().equalsIgnoreCase(cmd)) {
      startOpt=StartupOption.METADATAVERSION;
    }
 else {
      return null;
    }
  }
  return startOpt;
}
