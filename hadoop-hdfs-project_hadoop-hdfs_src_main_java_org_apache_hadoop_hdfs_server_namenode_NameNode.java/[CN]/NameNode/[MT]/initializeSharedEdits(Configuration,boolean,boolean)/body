{
  String nsId=DFSUtil.getNamenodeNameServiceId(conf);
  String namenodeId=HAUtil.getNameNodeId(conf,nsId);
  initializeGenericKeys(conf,nsId,namenodeId);
  if (conf.get(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY) == null) {
    LOG.fatal("No shared edits directory configured for namespace " + nsId + " namenode "+ namenodeId);
    return false;
  }
  NNStorage existingStorage=null;
  try {
    Configuration confWithoutShared=new Configuration(conf);
    confWithoutShared.unset(DFSConfigKeys.DFS_NAMENODE_SHARED_EDITS_DIR_KEY);
    FSNamesystem fsns=FSNamesystem.loadFromDisk(confWithoutShared,FSNamesystem.getNamespaceDirs(conf),FSNamesystem.getNamespaceEditsDirs(conf,false));
    existingStorage=fsns.getFSImage().getStorage();
    NamespaceInfo nsInfo=existingStorage.getNamespaceInfo();
    List<URI> sharedEditsDirs=FSNamesystem.getSharedEditsDirs(conf);
    FSImage sharedEditsImage=new FSImage(conf,Lists.<URI>newArrayList(),sharedEditsDirs);
    sharedEditsImage.getEditLog().initJournalsForWrite();
    if (!sharedEditsImage.confirmFormat(force,interactive)) {
      return true;
    }
    NNStorage newSharedStorage=sharedEditsImage.getStorage();
    newSharedStorage.format(nsInfo);
    sharedEditsImage.getEditLog().formatNonFileJournals(nsInfo);
    fsns.getFSImage().getEditLog().close();
    fsns.getFSImage().getEditLog().initJournalsForWrite();
    fsns.getFSImage().getEditLog().recoverUnclosedStreams();
    copyEditLogSegmentsToSharedDir(fsns,sharedEditsDirs,newSharedStorage,conf);
  }
 catch (  IOException ioe) {
    LOG.error("Could not initialize shared edits dir",ioe);
    return true;
  }
 finally {
    if (existingStorage != null) {
      try {
        existingStorage.unlockAll();
      }
 catch (      IOException ioe) {
        LOG.warn("Could not unlock storage directories",ioe);
        return true;
      }
    }
  }
  return false;
}
