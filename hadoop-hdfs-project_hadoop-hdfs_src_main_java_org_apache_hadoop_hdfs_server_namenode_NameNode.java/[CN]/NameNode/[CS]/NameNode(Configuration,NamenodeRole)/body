{
  this.conf=conf;
  this.role=role;
  String nsId=getNameServiceId(conf);
  String namenodeId=HAUtil.getNameNodeId(conf,nsId);
  this.haEnabled=HAUtil.isHAEnabled(conf,nsId);
  this.allowStaleStandbyReads=HAUtil.shouldAllowStandbyReads(conf);
  this.haContext=createHAContext();
  try {
    initializeGenericKeys(conf,nsId,namenodeId);
    initialize(conf);
    if (!haEnabled) {
      state=ACTIVE_STATE;
    }
 else {
      state=STANDBY_STATE;
      ;
    }
    state.enterState(haContext);
  }
 catch (  IOException e) {
    this.stop();
    throw e;
  }
catch (  HadoopIllegalArgumentException e) {
    this.stop();
    throw e;
  }
catch (  ServiceFailedException e) {
    this.stop();
    throw new IOException("Service failed to start",e);
  }
}
