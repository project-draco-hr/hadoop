{
  PendingReconstructionBlocks pendingReconstructions;
  pendingReconstructions=new PendingReconstructionBlocks(TIMEOUT * 1000);
  pendingReconstructions.start();
  DatanodeStorageInfo[] storages=DFSTestUtil.createDatanodeStorageInfos(10);
  for (int i=0; i < storages.length; i++) {
    BlockInfo block=genBlockInfo(i,i,0);
    DatanodeStorageInfo[] targets=new DatanodeStorageInfo[i];
    System.arraycopy(storages,0,targets,0,i);
    pendingReconstructions.increment(block,DatanodeStorageInfo.toDatanodeDescriptors(targets));
  }
  assertEquals("Size of pendingReconstruction ",10,pendingReconstructions.size());
  BlockInfo blk=genBlockInfo(8,8,0);
  pendingReconstructions.decrement(blk,storages[7].getDatanodeDescriptor());
  assertEquals("pendingReconstructions.getNumReplicas ",7,pendingReconstructions.getNumReplicas(blk));
  pendingReconstructions.increment(blk,storages[0].getDatanodeDescriptor());
  assertEquals("pendingReconstructions.getNumReplicas ",7,pendingReconstructions.getNumReplicas(blk));
  for (int i=0; i < 7; i++) {
    pendingReconstructions.decrement(blk,storages[i].getDatanodeDescriptor());
  }
  assertTrue(pendingReconstructions.size() == 9);
  pendingReconstructions.increment(blk,DatanodeStorageInfo.toDatanodeDescriptors(DFSTestUtil.createDatanodeStorageInfos(8)));
  assertTrue(pendingReconstructions.size() == 10);
  for (int i=0; i < 10; i++) {
    BlockInfo block=genBlockInfo(i,i,0);
    int numReplicas=pendingReconstructions.getNumReplicas(block);
    assertTrue(numReplicas == i);
  }
  assertNull(pendingReconstructions.getTimedOutBlocks());
  assertEquals(0L,pendingReconstructions.getNumTimedOuts());
  try {
    Thread.sleep(1000);
  }
 catch (  Exception ignored) {
  }
  for (int i=10; i < 15; i++) {
    BlockInfo block=genBlockInfo(i,i,0);
    pendingReconstructions.increment(block,DatanodeStorageInfo.toDatanodeDescriptors(DFSTestUtil.createDatanodeStorageInfos(i)));
  }
  assertEquals(15,pendingReconstructions.size());
  assertEquals(0L,pendingReconstructions.getNumTimedOuts());
  int loop=0;
  while (pendingReconstructions.size() > 0) {
    try {
      Thread.sleep(1000);
    }
 catch (    Exception e) {
    }
    loop++;
  }
  System.out.println("Had to wait for " + loop + " seconds for the lot to timeout");
  assertEquals("Size of pendingReconstructions ",0,pendingReconstructions.size());
  assertEquals(15L,pendingReconstructions.getNumTimedOuts());
  Block[] timedOut=pendingReconstructions.getTimedOutBlocks();
  assertNotNull(timedOut);
  assertEquals(15,timedOut.length);
  assertEquals(15L,pendingReconstructions.getNumTimedOuts());
  for (  Block block : timedOut) {
    assertTrue(block.getBlockId() < 15);
  }
  pendingReconstructions.stop();
}
