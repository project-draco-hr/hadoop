{
  NativeAzureFileSystem mockFs=Mockito.spy((NativeAzureFileSystem)fs);
  String path=mockFs.pathToKey(mockFs.makeAbsolute(new Path("root")));
  AzureFileSystemThreadPoolExecutor mockThreadPoolExecutor=Mockito.spy(mockFs.getThreadPoolExecutor(renameThreads,"AzureBlobRenameThread","Rename",path,NativeAzureFileSystem.AZURE_RENAME_THREADS));
  Mockito.when(mockFs.getThreadPoolExecutor(renameThreads,"AzureBlobRenameThread","Rename",path,NativeAzureFileSystem.AZURE_RENAME_THREADS)).thenReturn(mockThreadPoolExecutor);
  ThreadPoolExecutor mockThreadExecutor=Mockito.spy(mockThreadPoolExecutor.getThreadPool(7));
  Mockito.when(mockThreadPoolExecutor.getThreadPool(7)).thenReturn(mockThreadExecutor);
  Mockito.doCallRealMethod().doThrow(new RejectedExecutionException()).when(mockThreadExecutor).execute(Mockito.any(Runnable.class));
  validateRenameFolder(mockFs,"root","rootnew");
  String content=logs.getOutput();
  assertTrue(content.contains("Using thread pool for Rename operation with threads 7"));
  assertTrue(content.contains("6 threads not used for Rename operation on blob"));
}
