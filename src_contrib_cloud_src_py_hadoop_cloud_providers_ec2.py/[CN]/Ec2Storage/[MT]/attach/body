def attach(self, role, instances):
    mountable_volumes_list = self._get_mountable_volumes(role)
    if (not mountable_volumes_list):
        return
    ec2_volumes = self._get_ec2_volumes_dict(mountable_volumes_list)
    available_mountable_volumes_list = []
    available_instances_dict = {}
    for instance in instances:
        available_instances_dict[instance.id] = instance
    for mountable_volumes in mountable_volumes_list:
        available = True
        for mountable_volume in mountable_volumes:
            if (ec2_volumes[mountable_volume.volume_id].status != 'available'):
                available = False
                attach_data = ec2_volumes[mountable_volume.volume_id].attach_data
                instance_id = attach_data.instance_id
                if available_instances_dict.has_key(instance_id):
                    del available_instances_dict[instance_id]
        if available:
            available_mountable_volumes_list.append(mountable_volumes)
    if (len(available_instances_dict) != len(available_mountable_volumes_list)):
        logger.warning(('Number of available instances (%s) and volumes (%s)         do not match.' % (len(available_instances_dict), len(available_mountable_volumes_list))))
    for (instance, mountable_volumes) in zip(available_instances_dict.values(), available_mountable_volumes_list):
        print ('Attaching storage to %s' % instance.id)
        for mountable_volume in mountable_volumes:
            volume = ec2_volumes[mountable_volume.volume_id]
            print ('Attaching %s to %s' % (volume.id, instance.id))
            volume.attach(instance.id, mountable_volume.device)
