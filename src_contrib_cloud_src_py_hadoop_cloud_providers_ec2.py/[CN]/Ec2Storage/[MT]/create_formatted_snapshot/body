@staticmethod
def create_formatted_snapshot(cluster, size, availability_zone, image_id, key_name, ssh_options):
    '\n    Creates a formatted snapshot of a given size. This saves having to format\n    volumes when they are first attached.\n    '
    conn = cluster.ec2Connection
    print 'Starting instance'
    reservation = conn.run_instances(image_id, key_name=key_name, placement=availability_zone)
    instance = reservation.instances[0]
    try:
        cluster.wait_for_instances([instance.id])
        print ('Started instance %s' % instance.id)
    except TimeoutException:
        print 'Timeout'
        return
    print 
    print 'Waiting 60 seconds before attaching storage'
    time.sleep(60)
    instance.update()
    print ('Creating volume of size %s in %s' % (size, availability_zone))
    volume = conn.create_volume(size, availability_zone)
    print ('Created volume %s' % volume)
    print ('Attaching volume to %s' % instance.id)
    volume.attach(instance.id, '/dev/sdj')
    _run_command_on_instance(instance, ssh_options, "\n      while true ; do\n        echo 'Waiting for /dev/sdj...';\n        if [ -e /dev/sdj ]; then break; fi;\n        sleep 1;\n      done;\n      mkfs.ext3 -F -m 0.5 /dev/sdj\n    ")
    print 'Detaching volume'
    conn.detach_volume(volume.id, instance.id)
    print 'Creating snapshot'
    snapshot = volume.create_snapshot()
    print ('Created snapshot %s' % snapshot.id)
    _wait_for_volume(conn, volume.id)
    print 
    print 'Deleting volume'
    volume.delete()
    print 'Deleted volume'
    print 'Stopping instance'
    terminated = conn.terminate_instances([instance.id])
    print ('Stopped instance %s' % terminated)
