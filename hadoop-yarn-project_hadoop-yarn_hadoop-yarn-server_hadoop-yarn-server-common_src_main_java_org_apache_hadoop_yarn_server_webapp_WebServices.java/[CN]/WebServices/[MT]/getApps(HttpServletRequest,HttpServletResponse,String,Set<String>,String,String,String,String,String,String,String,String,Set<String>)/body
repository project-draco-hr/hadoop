{
  UserGroupInformation callerUGI=getUser(req);
  boolean checkEnd=false;
  boolean checkAppTypes=false;
  boolean checkAppStates=false;
  long countNum=Long.MAX_VALUE;
  long sBegin=0;
  long sEnd=Long.MAX_VALUE;
  long fBegin=0;
  long fEnd=Long.MAX_VALUE;
  if (count != null && !count.isEmpty()) {
    countNum=Long.parseLong(count);
    if (countNum <= 0) {
      throw new BadRequestException("limit value must be greater then 0");
    }
  }
  if (startedBegin != null && !startedBegin.isEmpty()) {
    sBegin=Long.parseLong(startedBegin);
    if (sBegin < 0) {
      throw new BadRequestException("startedTimeBegin must be greater than 0");
    }
  }
  if (startedEnd != null && !startedEnd.isEmpty()) {
    sEnd=Long.parseLong(startedEnd);
    if (sEnd < 0) {
      throw new BadRequestException("startedTimeEnd must be greater than 0");
    }
  }
  if (sBegin > sEnd) {
    throw new BadRequestException("startedTimeEnd must be greater than startTimeBegin");
  }
  if (finishBegin != null && !finishBegin.isEmpty()) {
    checkEnd=true;
    fBegin=Long.parseLong(finishBegin);
    if (fBegin < 0) {
      throw new BadRequestException("finishTimeBegin must be greater than 0");
    }
  }
  if (finishEnd != null && !finishEnd.isEmpty()) {
    checkEnd=true;
    fEnd=Long.parseLong(finishEnd);
    if (fEnd < 0) {
      throw new BadRequestException("finishTimeEnd must be greater than 0");
    }
  }
  if (fBegin > fEnd) {
    throw new BadRequestException("finishTimeEnd must be greater than finishTimeBegin");
  }
  Set<String> appTypes=parseQueries(applicationTypes,false);
  if (!appTypes.isEmpty()) {
    checkAppTypes=true;
  }
  if (stateQuery != null && !stateQuery.isEmpty()) {
    statesQuery.add(stateQuery);
  }
  Set<String> appStates=parseQueries(statesQuery,true);
  if (!appStates.isEmpty()) {
    checkAppStates=true;
  }
  AppsInfo allApps=new AppsInfo();
  Collection<ApplicationReport> appReports=null;
  final GetApplicationsRequest request=GetApplicationsRequest.newInstance();
  request.setLimit(countNum);
  request.setStartRange(new LongRange(sBegin,sEnd));
  try {
    if (callerUGI == null) {
      appReports=appBaseProt.getApplications(request).getApplicationList();
    }
 else {
      appReports=callerUGI.doAs(new PrivilegedExceptionAction<Collection<ApplicationReport>>(){
        @Override public Collection<ApplicationReport> run() throws Exception {
          return appBaseProt.getApplications(request).getApplicationList();
        }
      }
);
    }
  }
 catch (  Exception e) {
    rewrapAndThrowException(e);
  }
  for (  ApplicationReport appReport : appReports) {
    if (checkAppStates && !appStates.contains(StringUtils.toLowerCase(appReport.getYarnApplicationState().toString()))) {
      continue;
    }
    if (finalStatusQuery != null && !finalStatusQuery.isEmpty()) {
      FinalApplicationStatus.valueOf(finalStatusQuery);
      if (!appReport.getFinalApplicationStatus().toString().equalsIgnoreCase(finalStatusQuery)) {
        continue;
      }
    }
    if (userQuery != null && !userQuery.isEmpty()) {
      if (!appReport.getUser().equals(userQuery)) {
        continue;
      }
    }
    if (queueQuery != null && !queueQuery.isEmpty()) {
      if (!appReport.getQueue().equals(queueQuery)) {
        continue;
      }
    }
    if (checkAppTypes && !appTypes.contains(StringUtils.toLowerCase(appReport.getApplicationType().trim()))) {
      continue;
    }
    if (checkEnd && (appReport.getFinishTime() < fBegin || appReport.getFinishTime() > fEnd)) {
      continue;
    }
    AppInfo app=new AppInfo(appReport);
    allApps.add(app);
  }
  return allApps;
}
