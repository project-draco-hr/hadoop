{
  MiniDFSCluster cluster=null;
  conf.setBoolean(DFSConfigKeys.DFS_DATANODE_USE_DN_HOSTNAME,useDnHostname);
  if (useDnHostname) {
    conf.set(DFSConfigKeys.DFS_DATANODE_HOST_NAME_KEY,"localhost");
  }
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).checkDataNodeHostConfig(true).build();
    cluster.waitActive();
    DistributedFileSystem dfs=cluster.getFileSystem();
    String filestr="/foo";
    Path filepath=new Path(filestr);
    DFSTestUtil.createFile(dfs,filepath,1024L,(short)3,0L);
    assertTrue(dfs.exists(filepath));
    LocatedBlock locatedblock=getLastLocatedBlock(DFSClientAdapter.getDFSClient(dfs).getNamenode(),filestr);
    DatanodeInfo[] datanodeinfo=locatedblock.getLocations();
    assertTrue(datanodeinfo.length > 0);
    DataNode datanode=cluster.getDataNode(datanodeinfo[0].getIpcPort());
    InterDatanodeProtocol idp=DataNodeTestUtils.createInterDatanodeProtocolProxy(datanode,datanodeinfo[0],conf,useDnHostname);
    DataNodeTestUtils.shutdownBlockScanner(datanode);
    ExtendedBlock b=locatedblock.getBlock();
    InterDatanodeProtocol.LOG.info("b=" + b + ", "+ b.getClass());
    checkMetaInfo(b,datanode);
    long recoveryId=b.getGenerationStamp() + 1;
    idp.initReplicaRecovery(new RecoveringBlock(b,locatedblock.getLocations(),recoveryId));
    ExtendedBlock newblock=new ExtendedBlock(b.getBlockPoolId(),b.getBlockId(),b.getNumBytes() / 2,b.getGenerationStamp() + 1);
    idp.updateReplicaUnderRecovery(b,recoveryId,b.getBlockId(),newblock.getNumBytes());
    checkMetaInfo(newblock,datanode);
    ExtendedBlock badBlock=new ExtendedBlock("fake-pool",b.getBlockId(),0,0);
    assertNull(idp.initReplicaRecovery(new RecoveringBlock(badBlock,locatedblock.getLocations(),recoveryId)));
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
