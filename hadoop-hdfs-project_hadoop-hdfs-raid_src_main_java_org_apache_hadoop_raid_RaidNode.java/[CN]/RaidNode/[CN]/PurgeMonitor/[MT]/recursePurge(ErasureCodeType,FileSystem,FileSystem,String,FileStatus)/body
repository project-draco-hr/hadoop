{
  Path destPath=dest.getPath();
  String destStr=destPath.toUri().getPath();
  LOG.debug("Checking " + destPath + " prefix "+ destPrefix);
  if (dest.isDirectory() && destStr.endsWith(HAR_SUFFIX)) {
    try {
      int harUsedPercent=usefulHar(code,srcFs,destFs,destPath,destPrefix,conf);
      LOG.info("Useful percentage of " + destStr + " "+ harUsedPercent);
      if (harUsedPercent <= conf.getInt("raid.har.usage.threshold",0)) {
        LOG.info("Purging " + destStr + " at usage "+ harUsedPercent);
        boolean done=destFs.delete(destPath,true);
        if (!done) {
          LOG.error("Unable to purge directory " + destPath);
        }
      }
    }
 catch (    IOException e) {
      LOG.warn("Error during purging " + destStr + " "+ StringUtils.stringifyException(e));
    }
    return;
  }
  if (!destStr.startsWith(destPrefix)) {
    LOG.error("Destination path " + destStr + " should have "+ destPrefix+ " as its prefix.");
    return;
  }
  if (dest.isDirectory()) {
    FileStatus[] files=null;
    files=destFs.listStatus(destPath);
    if (files == null || files.length == 0) {
      boolean done=destFs.delete(destPath,true);
      if (done) {
        LOG.info("Purged directory " + destPath);
      }
 else {
        LOG.error("Unable to purge directory " + destPath);
      }
    }
    if (files != null) {
      for (      FileStatus one : files) {
        recursePurge(code,srcFs,destFs,destPrefix,one);
      }
    }
    return;
  }
  String src=destStr.replaceFirst(destPrefix,"");
  Path srcPath=new Path(src);
  boolean shouldDelete=false;
  if (!srcFs.exists(srcPath)) {
    shouldDelete=true;
  }
 else {
    try {
      if (code == ErasureCodeType.XOR) {
        ParityFilePair ppair=getParityFile(getDestinationPath(ErasureCodeType.RS,conf),srcPath,conf);
        if (ppair != null) {
          shouldDelete=true;
        }
      }
      if (!shouldDelete) {
        Path dstPath=(new Path(destPrefix.trim())).makeQualified(destFs);
        ParityFilePair ppair=getParityFile(dstPath,srcPath);
        if (ppair == null || !destFs.equals(ppair.getFileSystem()) || !destPath.equals(ppair.getPath())) {
          shouldDelete=true;
        }
      }
    }
 catch (    IOException e) {
      LOG.warn("Error during purging " + src + " "+ StringUtils.stringifyException(e));
    }
  }
  if (shouldDelete) {
    boolean done=destFs.delete(destPath,false);
    if (done) {
      LOG.info("Purged file " + destPath);
    }
 else {
      LOG.error("Unable to purge file " + destPath);
    }
  }
}
