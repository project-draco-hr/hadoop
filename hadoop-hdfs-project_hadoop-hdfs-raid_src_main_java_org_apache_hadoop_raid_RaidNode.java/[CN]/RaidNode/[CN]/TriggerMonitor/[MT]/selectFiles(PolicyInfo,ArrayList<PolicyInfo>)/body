{
  Path destPrefix=getDestinationPath(info.getErasureCode(),conf);
  String policyName=info.getName();
  Path srcPath=info.getSrcPath();
  long modTimePeriod=Long.parseLong(info.getProperty("modTimePeriod"));
  int selectLimit=configMgr.getMaxFilesPerJob();
  int targetRepl=Integer.parseInt(info.getProperty("targetReplication"));
  long selectStartTime=Time.now();
  ScanState scanState=scanStateMap.get(policyName);
  if (scanState.pendingTraversal != null) {
    DirectoryTraversal dt=scanState.pendingTraversal;
    LOG.info("Resuming traversal for policy " + policyName);
    DirectoryTraversal.FileFilter filter=filterForPolicy(selectStartTime,info,allPolicies,scanState.stats);
    List<FileStatus> returnSet=dt.getFilteredFiles(filter,selectLimit);
    if (dt.doneTraversal()) {
      scanState.pendingTraversal=null;
    }
    return returnSet;
  }
  String destpstr=destPrefix.toString();
  if (!destpstr.endsWith(Path.SEPARATOR)) {
    destpstr+=Path.SEPARATOR;
  }
  List<FileStatus> returnSet=new LinkedList<FileStatus>();
  FileSystem fs=srcPath.getFileSystem(conf);
  FileStatus[] gpaths=fs.globStatus(srcPath);
  if (gpaths != null) {
    List<FileStatus> selectedPaths=new LinkedList<FileStatus>();
    for (    FileStatus onepath : gpaths) {
      String pathstr=onepath.getPath().makeQualified(fs).toString();
      if (!pathstr.endsWith(Path.SEPARATOR)) {
        pathstr+=Path.SEPARATOR;
      }
      if (pathstr.startsWith(destpstr) || destpstr.startsWith(pathstr)) {
        LOG.info("Skipping source " + pathstr + " because it conflicts with raid directory "+ destpstr);
      }
 else {
        selectedPaths.add(onepath);
      }
    }
    scanState.fullScanStartTime=now();
    DirectoryTraversal dt=new DirectoryTraversal(fs,selectedPaths,conf.getInt("raid.directorytraversal.threads",4));
    DirectoryTraversal.FileFilter filter=filterForPolicy(selectStartTime,info,allPolicies,scanState.stats);
    returnSet=dt.getFilteredFiles(filter,selectLimit);
    if (!dt.doneTraversal()) {
      scanState.pendingTraversal=dt;
    }
  }
  return returnSet;
}
