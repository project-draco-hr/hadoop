{
  WebResource r=resource();
  Map<JobId,Job> jobsMap=appContext.getAllJobs();
  int size=jobsMap.size();
  ArrayList<Long> finishTime=new ArrayList<Long>(size);
  for (  Map.Entry<JobId,Job> entry : jobsMap.entrySet()) {
    finishTime.add(entry.getValue().getReport().getFinishTime());
  }
  Collections.sort(finishTime);
  assertTrue("Error we must have atleast 3 jobs",size >= 3);
  long midFinishTime=finishTime.get(size - 2);
  ClientResponse response=r.path("ws").path("v1").path("history").path("mapreduce").path("jobs").queryParam("finishedTimeBegin",String.valueOf(40000)).queryParam("finishedTimeEnd",String.valueOf(midFinishTime)).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  JSONObject json=response.getEntity(JSONObject.class);
  assertEquals("incorrect number of elements",1,json.length());
  JSONObject jobs=json.getJSONObject("jobs");
  JSONArray arr=jobs.getJSONArray("job");
  assertEquals("incorrect number of elements",size - 1,arr.length());
}
