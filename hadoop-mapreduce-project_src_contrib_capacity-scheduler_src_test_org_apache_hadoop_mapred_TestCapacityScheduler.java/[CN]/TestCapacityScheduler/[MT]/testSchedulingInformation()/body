{
  String[] qs={"default","q2"};
  taskTrackerManager=new FakeTaskTrackerManager(2,1,1);
  scheduler.setTaskTrackerManager(taskTrackerManager);
  taskTrackerManager.addQueues(qs);
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",50.0f,true,25));
  queues.add(new FakeQueueInfo("q2",50.0f,true,25));
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  scheduler.assignTasks(tracker("tt1"));
  scheduler.assignTasks(tracker("tt2"));
  int totalMaps=taskTrackerManager.getClusterStatus().getMaxMapTasks();
  int totalReduces=taskTrackerManager.getClusterStatus().getMaxReduceTasks();
  QueueManager queueManager=scheduler.taskTrackerManager.getQueueManager();
  String schedulingInfo=queueManager.getJobQueueInfo("default").getSchedulingInfo();
  String schedulingInfo2=queueManager.getJobQueueInfo("q2").getSchedulingInfo();
  String[] infoStrings=schedulingInfo.split("\n");
  assertEquals(infoStrings.length,18);
  assertEquals(infoStrings[0],"Queue configuration");
  assertEquals(infoStrings[1],"Capacity Percentage: 50.0%");
  assertEquals(infoStrings[2],"User Limit: 25%");
  assertEquals(infoStrings[3],"Priority Supported: YES");
  assertEquals(infoStrings[4],"-------------");
  assertEquals(infoStrings[5],"Map tasks");
  assertEquals(infoStrings[6],"Capacity: " + totalMaps * 50 / 100 + " slots");
  assertEquals(infoStrings[7],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[8],"Running tasks: 0");
  assertEquals(infoStrings[9],"-------------");
  assertEquals(infoStrings[10],"Reduce tasks");
  assertEquals(infoStrings[11],"Capacity: " + totalReduces * 50 / 100 + " slots");
  assertEquals(infoStrings[12],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[13],"Running tasks: 0");
  assertEquals(infoStrings[14],"-------------");
  assertEquals(infoStrings[15],"Job info");
  assertEquals(infoStrings[16],"Number of Waiting Jobs: 0");
  assertEquals(infoStrings[17],"Number of users who have submitted jobs: 0");
  assertEquals(schedulingInfo,schedulingInfo2);
  ArrayList<FakeJobInProgress> userJobs=taskTrackerManager.submitJobs(1,5,"default").get("u1");
  schedulingInfo=queueManager.getJobQueueInfo("default").getSchedulingInfo();
  infoStrings=schedulingInfo.split("\n");
  assertEquals(infoStrings.length,18);
  assertEquals(infoStrings[7],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[8],"Running tasks: 0");
  assertEquals(infoStrings[12],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[13],"Running tasks: 0");
  assertEquals(infoStrings[16],"Number of Waiting Jobs: 5");
  assertEquals(infoStrings[17],"Number of users who have submitted jobs: 1");
  controlledInitializationPoller.selectJobsToInitialize();
  schedulingInfo=queueManager.getJobQueueInfo("default").getSchedulingInfo();
  infoStrings=schedulingInfo.split("\n");
  assertEquals(infoStrings.length,18);
  assertEquals(infoStrings[7],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[8],"Running tasks: 0");
  assertEquals(infoStrings[12],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[13],"Running tasks: 0");
  assertEquals(infoStrings[16],"Number of Waiting Jobs: 5");
  raiseStatusChangeEvents(scheduler.jobQueuesManager);
  raiseStatusChangeEvents(scheduler.jobQueuesManager,"q2");
  Map<String,String> strs=new HashMap<String,String>();
  strs.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000001_0 on tt1");
  strs.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000001_0 on tt1");
  List<Task> t1=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",strs);
  controlledInitializationPoller.selectJobsToInitialize();
  scheduler.updateContextInfoForTests();
  schedulingInfo=queueManager.getJobQueueInfo("default").getSchedulingInfo();
  infoStrings=schedulingInfo.split("\n");
  assertEquals(infoStrings.length,22);
  assertEquals(infoStrings[7],"Used capacity: 1 (100.0% of Capacity)");
  assertEquals(infoStrings[8],"Running tasks: 1");
  assertEquals(infoStrings[9],"Active users:");
  assertEquals(infoStrings[10],"User 'u1': 1 (100.0% of used capacity)");
  assertEquals(infoStrings[14],"Used capacity: 1 (100.0% of Capacity)");
  assertEquals(infoStrings[15],"Running tasks: 1");
  assertEquals(infoStrings[20],"Number of Waiting Jobs: 4");
  scheduler.updateContextInfoForTests();
  schedulingInfo=queueManager.getJobQueueInfo("default").getSchedulingInfo();
  infoStrings=schedulingInfo.split("\n");
  assertEquals(infoStrings.length,22);
  assertEquals(infoStrings[7],"Used capacity: 1 (100.0% of Capacity)");
  assertEquals(infoStrings[8],"Running tasks: 1");
  assertEquals(infoStrings[9],"Active users:");
  assertEquals(infoStrings[10],"User 'u1': 1 (100.0% of used capacity)");
  assertEquals(infoStrings[14],"Used capacity: 1 (100.0% of Capacity)");
  assertEquals(infoStrings[15],"Running tasks: 1");
  assertEquals(infoStrings[16],"Active users:");
  assertEquals(infoStrings[17],"User 'u1': 1 (100.0% of used capacity)");
  assertEquals(infoStrings[20],"Number of Waiting Jobs: 4");
  FakeJobInProgress u1j1=userJobs.get(0);
  for (  Task task : t1) {
    taskTrackerManager.finishTask(task.getTaskID().toString(),u1j1);
  }
  taskTrackerManager.finalizeJob(u1j1);
  scheduler.updateContextInfoForTests();
  schedulingInfo=queueManager.getJobQueueInfo("default").getSchedulingInfo();
  infoStrings=schedulingInfo.split("\n");
  assertEquals(infoStrings.length,18);
  assertEquals(infoStrings[7],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[8],"Running tasks: 0");
  assertEquals(infoStrings[12],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[13],"Running tasks: 0");
  assertEquals(infoStrings[16],"Number of Waiting Jobs: 4");
  FakeJobInProgress u1j2=userJobs.get(1);
  assertTrue("User1 job 2 not initalized ",u1j2.getStatus().getRunState() == JobStatus.RUNNING);
  taskTrackerManager.finalizeJob(u1j2,JobStatus.FAILED);
  controlledInitializationPoller.selectJobsToInitialize();
  scheduler.updateContextInfoForTests();
  schedulingInfo=queueManager.getJobQueueInfo("default").getSchedulingInfo();
  infoStrings=schedulingInfo.split("\n");
  assertEquals(infoStrings.length,18);
  assertEquals(infoStrings[7],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[8],"Running tasks: 0");
  assertEquals(infoStrings[12],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[13],"Running tasks: 0");
  assertEquals(infoStrings[16],"Number of Waiting Jobs: 3");
  FakeJobInProgress u1j5=userJobs.get(4);
  assertFalse("User1 job 5 initalized ",u1j5.getStatus().getRunState() == JobStatus.RUNNING);
  taskTrackerManager.finalizeJob(u1j5,JobStatus.FAILED);
  controlledInitializationPoller.selectJobsToInitialize();
  scheduler.updateContextInfoForTests();
  schedulingInfo=queueManager.getJobQueueInfo("default").getSchedulingInfo();
  infoStrings=schedulingInfo.split("\n");
  assertEquals(infoStrings.length,18);
  assertEquals(infoStrings[7],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[8],"Running tasks: 0");
  assertEquals(infoStrings[12],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[13],"Running tasks: 0");
  assertEquals(infoStrings[16],"Number of Waiting Jobs: 2");
  raiseStatusChangeEvents(scheduler.jobQueuesManager);
  raiseStatusChangeEvents(scheduler.jobQueuesManager,"q2");
  strs.clear();
  strs.put(CapacityTestUtils.MAP,"attempt_test_0003_m_000001_0 on tt1");
  strs.put(CapacityTestUtils.REDUCE,"attempt_test_0003_r_000001_0 on tt1");
  t1=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",strs);
  FakeJobInProgress u1j3=userJobs.get(2);
  assertTrue("User Job 3 not running ",u1j3.getStatus().getRunState() == JobStatus.RUNNING);
  controlledInitializationPoller.selectJobsToInitialize();
  scheduler.updateContextInfoForTests();
  schedulingInfo=queueManager.getJobQueueInfo("default").getSchedulingInfo();
  infoStrings=schedulingInfo.split("\n");
  assertEquals(infoStrings.length,22);
  assertEquals(infoStrings[7],"Used capacity: 1 (100.0% of Capacity)");
  assertEquals(infoStrings[8],"Running tasks: 1");
  assertEquals(infoStrings[9],"Active users:");
  assertEquals(infoStrings[10],"User 'u1': 1 (100.0% of used capacity)");
  assertEquals(infoStrings[14],"Used capacity: 1 (100.0% of Capacity)");
  assertEquals(infoStrings[15],"Running tasks: 1");
  assertEquals(infoStrings[16],"Active users:");
  assertEquals(infoStrings[17],"User 'u1': 1 (100.0% of used capacity)");
  assertEquals(infoStrings[20],"Number of Waiting Jobs: 1");
  taskTrackerManager.finalizeJob(u1j3,JobStatus.FAILED);
  scheduler.updateContextInfoForTests();
  schedulingInfo=queueManager.getJobQueueInfo("default").getSchedulingInfo();
  infoStrings=schedulingInfo.split("\n");
  assertEquals(infoStrings.length,18);
  assertEquals(infoStrings[7],"Used capacity: 0 (0.0% of Capacity)");
  assertEquals(infoStrings[8],"Running tasks: 0");
  assertEquals(infoStrings[16],"Number of Waiting Jobs: 1");
}
