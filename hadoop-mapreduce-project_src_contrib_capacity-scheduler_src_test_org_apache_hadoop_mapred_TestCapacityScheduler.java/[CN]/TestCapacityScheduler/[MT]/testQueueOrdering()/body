{
  taskTrackerManager=new FakeTaskTrackerManager(2,6,6);
  scheduler.setTaskTrackerManager(taskTrackerManager);
  String[] qs={"default","q1"};
  String[] reversedQs={qs[1],qs[0]};
  taskTrackerManager.addQueues(qs);
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",50.0f,true,100));
  queues.add(new FakeQueueInfo("q1",50.0f,true,100));
  scheduler.getConf().setLong(JTConfig.JT_MAX_MAPMEMORY_MB,2 * 1024);
  scheduler.getConf().setLong(MRConfig.MAPMEMORY_MB,1 * 1024);
  scheduler.getConf().setLong(JTConfig.JT_MAX_REDUCEMEMORY_MB,1 * 1024);
  scheduler.getConf().setLong(MRConfig.REDUCEMEMORY_MB,1 * 1024);
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  LOG.debug("Submit one high memory(2GB maps, 2GB reduces) job of " + "6 map and 6 reduce tasks");
  JobConf jConf=new JobConf(conf);
  jConf.setMemoryForMapTask(2 * 1024);
  jConf.setMemoryForReduceTask(2 * 1024);
  jConf.setNumMapTasks(6);
  jConf.setNumReduceTasks(6);
  jConf.setQueueName("default");
  jConf.setUser("u1");
  FakeJobInProgress job1=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  jConf=new JobConf(conf);
  jConf.setMemoryForMapTask(1 * 1024);
  jConf.setMemoryForReduceTask(1 * 1024);
  jConf.setNumMapTasks(6);
  jConf.setNumReduceTasks(6);
  jConf.setUser("u1");
  jConf.setQueueName("q1");
  FakeJobInProgress job2=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  HashMap<String,String> expectedStrings=new HashMap<String,String>();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000001_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000001_0 on tt1");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  checkQueuesOrder(qs,scheduler.getOrderedQueues(TaskType.MAP));
  checkQueuesOrder(qs,scheduler.getOrderedQueues(TaskType.REDUCE));
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0002_m_000001_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_000001_0 on tt1");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  checkQueuesOrder(reversedQs,scheduler.getOrderedQueues(TaskType.MAP));
  checkQueuesOrder(reversedQs,scheduler.getOrderedQueues(TaskType.REDUCE));
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0002_m_000002_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_000002_0 on tt1");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  checkQueuesOrder(reversedQs,scheduler.getOrderedQueues(TaskType.MAP));
  checkQueuesOrder(reversedQs,scheduler.getOrderedQueues(TaskType.REDUCE));
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0002_m_000003_0 on tt2");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_000003_0 on tt2");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt2",expectedStrings);
  checkQueuesOrder(reversedQs,scheduler.getOrderedQueues(TaskType.MAP));
  checkQueuesOrder(reversedQs,scheduler.getOrderedQueues(TaskType.REDUCE));
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000002_0 on tt2");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000002_0 on tt2");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt2",expectedStrings);
  checkQueuesOrder(qs,scheduler.getOrderedQueues(TaskType.MAP));
  checkQueuesOrder(qs,scheduler.getOrderedQueues(TaskType.REDUCE));
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0002_m_000004_0 on tt2");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_000004_0 on tt2");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt2",expectedStrings);
  checkQueuesOrder(reversedQs,scheduler.getOrderedQueues(TaskType.MAP));
  checkQueuesOrder(reversedQs,scheduler.getOrderedQueues(TaskType.REDUCE));
}
