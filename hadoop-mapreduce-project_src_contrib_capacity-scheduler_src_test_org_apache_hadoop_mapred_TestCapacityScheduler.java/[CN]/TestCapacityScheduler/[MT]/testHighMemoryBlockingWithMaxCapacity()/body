{
  taskTrackerManager=new FakeTaskTrackerManager(2,2,2);
  taskTrackerManager.addQueues(new String[]{"defaultXYZM"});
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("defaultXYZM",25.0f,true,50));
  scheduler.setTaskTrackerManager(taskTrackerManager);
  scheduler.getConf().setLong(JTConfig.JT_MAX_MAPMEMORY_MB,2 * 1024);
  scheduler.getConf().setLong(MRConfig.MAPMEMORY_MB,1 * 1024);
  scheduler.getConf().setLong(JTConfig.JT_MAX_REDUCEMEMORY_MB,2 * 1024);
  scheduler.getConf().setLong(MRConfig.REDUCEMEMORY_MB,1 * 1024);
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  scheduler.getRoot().getChildren().get(0).getQueueSchedulingContext().setMaxCapacityPercent(50);
  JobConf jConf=new JobConf(conf);
  jConf.setMemoryForMapTask(2 * 1024);
  jConf.setMemoryForReduceTask(1 * 1024);
  jConf.setNumMapTasks(2);
  jConf.setNumReduceTasks(1);
  jConf.setQueueName("defaultXYZM");
  jConf.setUser("u1");
  FakeJobInProgress job1=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  jConf=new JobConf(conf);
  jConf.setMemoryForMapTask(1 * 1024);
  jConf.setMemoryForReduceTask(2 * 1024);
  jConf.setNumMapTasks(1);
  jConf.setNumReduceTasks(2);
  jConf.setQueueName("defaultXYZM");
  jConf.setUser("u1");
  FakeJobInProgress job2=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  HashMap<String,String> expectedStrings=new HashMap<String,String>();
  expectedStrings.put(MAP,"attempt_test_0001_m_000001_0 on tt1");
  expectedStrings.put(REDUCE,"attempt_test_0001_r_000001_0 on tt1");
  List<Task> tasks=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  checkOccupiedSlots("defaultXYZM",TaskType.MAP,1,2,200.0f,1,0);
  checkOccupiedSlots("defaultXYZM",TaskType.REDUCE,1,1,100.0f,0,2);
  checkMemReservedForTasksOnTT("tt1",2 * 1024L,1 * 1024L);
  assertNull(scheduler.assignTasks(tracker("tt2")));
  for (  Task task : tasks) {
    taskTrackerManager.finishTask(task.getTaskID().toString(),job1);
  }
  expectedStrings.put(MAP,"attempt_test_0001_m_000002_0 on tt2");
  expectedStrings.put(REDUCE,"attempt_test_0002_r_000001_0 on tt2");
  tasks=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt2",expectedStrings);
  checkOccupiedSlots("defaultXYZM",TaskType.MAP,1,2,200.0f,1,0);
  checkOccupiedSlots("defaultXYZM",TaskType.REDUCE,1,2,200.0f,0,2);
  checkMemReservedForTasksOnTT("tt2",2 * 1024L,2 * 1024L);
  for (  Task task : tasks) {
    taskTrackerManager.finishTask(task.getTaskID().toString(),job2);
  }
  expectedStrings.put(MAP,"attempt_test_0002_m_000001_0 on tt2");
  expectedStrings.put(REDUCE,"attempt_test_0002_r_000002_0 on tt2");
  tasks=checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt2",expectedStrings);
}
