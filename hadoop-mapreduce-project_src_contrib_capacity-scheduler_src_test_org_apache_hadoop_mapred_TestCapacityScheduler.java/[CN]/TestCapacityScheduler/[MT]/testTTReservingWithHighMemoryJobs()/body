{
  taskTrackerManager=new FakeTaskTrackerManager(3,2,0);
  taskTrackerManager.addQueues(new String[]{"default"});
  ArrayList<FakeQueueInfo> queues=new ArrayList<FakeQueueInfo>();
  queues.add(new FakeQueueInfo("default",100.0f,true,25));
  scheduler.setTaskTrackerManager(taskTrackerManager);
  scheduler.getConf().setLong(JTConfig.JT_MAX_MAPMEMORY_MB,2 * 1024);
  scheduler.getConf().setLong(MRConfig.MAPMEMORY_MB,1 * 1024);
  scheduler.getConf().setLong(JTConfig.JT_MAX_REDUCEMEMORY_MB,1 * 1024);
  scheduler.getConf().setLong(MRConfig.REDUCEMEMORY_MB,1 * 1024);
  taskTrackerManager.setFakeQueues(queues);
  scheduler.start();
  LOG.debug("Submit a regular memory(1GB vmem maps/reduces) job of " + "3 map/red tasks");
  JobConf jConf=new JobConf(conf);
  jConf=new JobConf(conf);
  jConf.setMemoryForMapTask(1 * 1024);
  jConf.setMemoryForReduceTask(1 * 1024);
  jConf.setNumMapTasks(3);
  jConf.setNumReduceTasks(3);
  jConf.setQueueName("default");
  jConf.setUser("u1");
  FakeJobInProgress job1=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  checkAssignment(taskTrackerManager,scheduler,"tt1","attempt_test_0001_m_000001_0 on tt1");
  checkAssignment(taskTrackerManager,scheduler,"tt2","attempt_test_0001_m_000002_0 on tt2");
  checkAssignment(taskTrackerManager,scheduler,"tt3","attempt_test_0001_m_000003_0 on tt3");
  scheduler.updateContextInfoForTests();
  LOG.info(job1.getSchedulingInfo());
  assertEquals(JobQueue.getJobQueueSchedInfo(3,3,0,0,0,0),job1.getSchedulingInfo().toString());
  LOG.debug("Submit one high memory(2GB maps, 0MB reduces) job of " + "2 map tasks");
  jConf.setMemoryForMapTask(2 * 1024);
  jConf.setMemoryForReduceTask(0);
  jConf.setNumMapTasks(2);
  jConf.setNumReduceTasks(0);
  jConf.setQueueName("default");
  jConf.setUser("u1");
  FakeJobInProgress job2=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  LOG.debug("Submit another regular memory(1GB vmem maps/reduces) job of " + "2 map/red tasks");
  jConf=new JobConf(conf);
  jConf.setMemoryForMapTask(1 * 1024);
  jConf.setMemoryForReduceTask(1 * 1024);
  jConf.setNumMapTasks(2);
  jConf.setNumReduceTasks(2);
  jConf.setQueueName("default");
  jConf.setUser("u1");
  FakeJobInProgress job3=taskTrackerManager.submitJobAndInit(JobStatus.PREP,jConf);
  assertNull(scheduler.assignTasks(tracker("tt1")));
  scheduler.updateContextInfoForTests();
  LOG.info(job2.getSchedulingInfo());
  assertEquals(JobQueue.getJobQueueSchedInfo(0,0,2,0,0,0),job2.getSchedulingInfo().toString());
  assertNull(scheduler.assignTasks(tracker("tt2")));
  scheduler.updateContextInfoForTests();
  LOG.info(job2.getSchedulingInfo());
  assertEquals(JobQueue.getJobQueueSchedInfo(0,0,4,0,0,0),job2.getSchedulingInfo().toString());
  assertNull(scheduler.assignTasks(tracker("tt1")));
  scheduler.updateContextInfoForTests();
  LOG.info(job2.getSchedulingInfo());
  assertEquals(JobQueue.getJobQueueSchedInfo(0,0,4,0,0,0),job2.getSchedulingInfo().toString());
  assertNull(scheduler.assignTasks(tracker("tt2")));
  scheduler.updateContextInfoForTests();
  LOG.info(job2.getSchedulingInfo());
  assertEquals(JobQueue.getJobQueueSchedInfo(0,0,4,0,0,0),job2.getSchedulingInfo().toString());
  checkAssignment(taskTrackerManager,scheduler,"tt3","attempt_test_0003_m_000001_0 on tt3");
  scheduler.updateContextInfoForTests();
  LOG.info(job2.getSchedulingInfo());
  assertEquals(JobQueue.getJobQueueSchedInfo(0,0,4,0,0,0),job2.getSchedulingInfo().toString());
  assertNull(scheduler.assignTasks(tracker("tt3")));
}
