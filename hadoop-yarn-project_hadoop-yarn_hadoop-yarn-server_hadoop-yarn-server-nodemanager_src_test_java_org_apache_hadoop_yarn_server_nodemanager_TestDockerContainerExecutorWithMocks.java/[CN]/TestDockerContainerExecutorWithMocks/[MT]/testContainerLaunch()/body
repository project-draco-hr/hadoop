{
  String appSubmitter="nobody";
  String appId="APP_ID";
  String containerId="CONTAINER_ID";
  String testImage="\"sequenceiq/hadoop-docker:2.4.1\"";
  Container container=mock(Container.class,RETURNS_DEEP_STUBS);
  ContainerId cId=mock(ContainerId.class,RETURNS_DEEP_STUBS);
  ContainerLaunchContext context=mock(ContainerLaunchContext.class);
  HashMap<String,String> env=new HashMap<String,String>();
  when(container.getContainerId()).thenReturn(cId);
  when(container.getLaunchContext()).thenReturn(context);
  when(cId.getApplicationAttemptId().getApplicationId().toString()).thenReturn(appId);
  when(cId.toString()).thenReturn(containerId);
  when(context.getEnvironment()).thenReturn(env);
  env.put(YarnConfiguration.NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME,testImage);
  Path scriptPath=new Path("file:///bin/echo");
  Path tokensPath=new Path("file:///dev/null");
  Path pidFile=new Path(workDir,"pid");
  dockerContainerExecutor.activateContainer(cId,pidFile);
  int ret=dockerContainerExecutor.launchContainer(container,scriptPath,tokensPath,appSubmitter,appId,workDir,dirsHandler.getLocalDirs(),dirsHandler.getLogDirs());
  assertEquals(0,ret);
  Path sessionScriptPath=new Path(workDir,Shell.appendScriptExtension(DockerContainerExecutor.DOCKER_CONTAINER_EXECUTOR_SESSION_SCRIPT));
  LineNumberReader lnr=new LineNumberReader(new FileReader(sessionScriptPath.toString()));
  boolean cmdFound=false;
  List<String> localDirs=dirsToMount(dirsHandler.getLocalDirs());
  List<String> logDirs=dirsToMount(dirsHandler.getLogDirs());
  List<String> workDirMount=dirsToMount(Collections.singletonList(workDir.toUri().getPath()));
  List<String> expectedCommands=new ArrayList<String>(Arrays.asList(DOCKER_LAUNCH_COMMAND,"run","--rm","--net=host","--name",containerId));
  expectedCommands.addAll(localDirs);
  expectedCommands.addAll(logDirs);
  expectedCommands.addAll(workDirMount);
  String shellScript=workDir + "/launch_container.sh";
  expectedCommands.addAll(Arrays.asList(testImage.replaceAll("['\"]",""),"bash","\"" + shellScript + "\""));
  String expectedPidString="echo `/bin/true inspect --format {{.State.Pid}} " + containerId + "` > "+ pidFile.toString()+ ".tmp";
  boolean pidSetterFound=false;
  while (lnr.ready()) {
    String line=lnr.readLine();
    LOG.debug("line: " + line);
    if (line.startsWith(DOCKER_LAUNCH_COMMAND)) {
      List<String> command=new ArrayList<String>();
      for (      String s : line.split("\\s+")) {
        command.add(s.trim());
      }
      assertEquals(expectedCommands,command);
      cmdFound=true;
    }
 else     if (line.startsWith("echo")) {
      assertEquals(expectedPidString,line);
      pidSetterFound=true;
    }
  }
  assertTrue(cmdFound);
  assertTrue(pidSetterFound);
}
