{
  @SuppressWarnings("unchecked") final Map<String,String[]> original=(Map<String,String[]>)request.getParameterMap();
  if (!ParamFilter.containsUpperCase(original.keySet())) {
    return request;
  }
  final Map<String,List<String>> m=new HashMap<String,List<String>>();
  for (  Map.Entry<String,String[]> entry : original.entrySet()) {
    final String key=StringUtils.toLowerCase(entry.getKey());
    List<String> strings=m.get(key);
    if (strings == null) {
      strings=new ArrayList<String>();
      m.put(key,strings);
    }
    for (    String v : entry.getValue()) {
      strings.add(v);
    }
  }
  return new HttpServletRequestWrapper(request){
    private Map<String,String[]> parameters=null;
    @Override public Map<String,String[]> getParameterMap(){
      if (parameters == null) {
        parameters=new HashMap<String,String[]>();
        for (        Map.Entry<String,List<String>> entry : m.entrySet()) {
          final List<String> a=entry.getValue();
          parameters.put(entry.getKey(),a.toArray(new String[a.size()]));
        }
      }
      return parameters;
    }
    @Override public String getParameter(    String name){
      final List<String> a=m.get(name);
      return a == null ? null : a.get(0);
    }
    @Override public String[] getParameterValues(    String name){
      return getParameterMap().get(name);
    }
    @Override public Enumeration<String> getParameterNames(){
      final Iterator<String> i=m.keySet().iterator();
      return new Enumeration<String>(){
        @Override public boolean hasMoreElements(){
          return i.hasNext();
        }
        @Override public String nextElement(){
          return i.next();
        }
      }
;
    }
  }
;
}
