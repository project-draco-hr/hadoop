{
  JobConf conf=new JobConf();
  conf.setNumMapTasks(1);
  conf.setNumReduceTasks(1);
  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);
  TaskTracker tt1=jobTracker.getTaskTracker(trackers[0]);
  TaskTracker tt2=jobTracker.getTaskTracker(trackers[1]);
  tt1.reserveSlots(TaskType.MAP,job,1);
  tt1.reserveSlots(TaskType.REDUCE,job,1);
  tt2.reserveSlots(TaskType.MAP,job,1);
  tt2.reserveSlots(TaskType.REDUCE,job,1);
  assertEquals("Tracker 1 not reserved for the job 1",2,job.getNumReservedTaskTrackersForMaps());
  assertEquals("Tracker 1 not reserved for the job 1",2,job.getNumReservedTaskTrackersForReduces());
  runBlackListingJob(jobTracker,trackers);
  assertEquals("Tracker 1 not unreserved for the job 1",1,job.getNumReservedTaskTrackersForMaps());
  assertEquals("Tracker 1 not unreserved for the job 1",1,job.getNumReservedTaskTrackersForReduces());
  assertEquals("Tracker 1 not blacklisted",1,jobTracker.getBlacklistedTrackerCount());
  checkReasonForBlackListing(hosts[0],exceedsFailuresReasonSet);
  TaskTrackerHealthStatus status=getUnhealthyNodeStatus("ERROR");
  sendHeartBeat(status,false);
  assertEquals("All trackers not blacklisted",3,jobTracker.getBlacklistedTrackerCount());
  checkReasonForBlackListing(hosts[0],unhealthyAndExceedsFailure);
  checkReasonForBlackListing(hosts[1],nodeUnHealthyReasonSet);
  checkReasonForBlackListing(hosts[2],nodeUnHealthyReasonSet);
  assertEquals("Tracker 1 not unreserved for the job 1",0,job.getNumReservedTaskTrackersForMaps());
  assertEquals("Tracker 1 not unreserved for the job 1",0,job.getNumReservedTaskTrackersForReduces());
  clock.jumpADay=true;
  sendHeartBeat(null,false);
}
