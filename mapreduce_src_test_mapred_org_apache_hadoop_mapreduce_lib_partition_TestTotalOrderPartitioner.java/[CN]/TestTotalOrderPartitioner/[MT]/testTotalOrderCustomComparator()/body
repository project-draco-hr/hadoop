{
  TotalOrderPartitioner<Text,NullWritable> partitioner=new TotalOrderPartitioner<Text,NullWritable>();
  Configuration conf=new Configuration();
  Text[] revSplitStrings=Arrays.copyOf(splitStrings,splitStrings.length);
  Arrays.sort(revSplitStrings,new ReverseStringComparator());
  Path p=TestTotalOrderPartitioner.<Text>writePartitionFile("totalordercustomcomparator",conf,revSplitStrings);
  conf.setBoolean(TotalOrderPartitioner.NATURAL_ORDER,false);
  conf.setClass(MRJobConfig.MAP_OUTPUT_KEY_CLASS,Text.class,Object.class);
  conf.setClass(MRJobConfig.KEY_COMPARATOR,ReverseStringComparator.class,RawComparator.class);
  ArrayList<Check<Text>> revCheck=new ArrayList<Check<Text>>();
  revCheck.add(new Check<Text>(new Text("aaaaa"),9));
  revCheck.add(new Check<Text>(new Text("aaabb"),9));
  revCheck.add(new Check<Text>(new Text("aabbb"),9));
  revCheck.add(new Check<Text>(new Text("aaaaa"),9));
  revCheck.add(new Check<Text>(new Text("babbb"),8));
  revCheck.add(new Check<Text>(new Text("baabb"),8));
  revCheck.add(new Check<Text>(new Text("yai"),1));
  revCheck.add(new Check<Text>(new Text("yak"),1));
  revCheck.add(new Check<Text>(new Text("z"),0));
  revCheck.add(new Check<Text>(new Text("ddngo"),4));
  revCheck.add(new Check<Text>(new Text("hi"),3));
  try {
    partitioner.setConf(conf);
    NullWritable nw=NullWritable.get();
    for (    Check<Text> chk : revCheck) {
      assertEquals(chk.data.toString(),chk.part,partitioner.getPartition(chk.data,nw,splitStrings.length + 1));
    }
  }
  finally {
    p.getFileSystem(conf).delete(p,true);
  }
}
