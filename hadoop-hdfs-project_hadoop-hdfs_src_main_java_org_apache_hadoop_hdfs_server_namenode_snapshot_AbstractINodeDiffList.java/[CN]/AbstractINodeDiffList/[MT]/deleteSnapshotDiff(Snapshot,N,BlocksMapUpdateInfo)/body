{
  int snapshotIndex=Collections.binarySearch(diffs,snapshot);
  if (snapshotIndex < 0) {
    return null;
  }
 else {
    final D removed=diffs.remove(snapshotIndex);
    if (snapshotIndex == 0) {
      if (removed.snapshotINode != null) {
        removed.snapshotINode.clearReferences();
      }
    }
 else {
      final AbstractINodeDiff<N,D> previous=diffs.get(snapshotIndex - 1);
      if (previous.snapshotINode == null) {
        previous.snapshotINode=removed.snapshotINode;
      }
 else       if (removed.snapshotINode != null) {
        removed.snapshotINode.clearReferences();
      }
      previous.combinePosteriorAndCollectBlocks(currentINode,removed,collectedBlocks);
      previous.setPosterior(removed.getPosterior());
    }
    removed.setPosterior(null);
    return removed;
  }
}
