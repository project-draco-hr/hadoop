{
  int snapshotIndex=Collections.binarySearch(diffs,snapshot.getId());
  Quota.Counts counts=Quota.Counts.newInstance();
  D removed=null;
  if (snapshotIndex == 0) {
    if (prior != null) {
      diffs.get(snapshotIndex).setSnapshot(prior);
    }
 else {
      removed=diffs.remove(0);
      if (countDiffChange) {
        counts.add(Quota.NAMESPACE,1);
      }
 else {
        currentINode.addSpaceConsumed(-1,0,false);
      }
      counts.add(removed.destroyDiffAndCollectBlocks(currentINode,collectedBlocks,removedINodes));
    }
  }
 else   if (snapshotIndex > 0) {
    final AbstractINodeDiff<N,A,D> previous=diffs.get(snapshotIndex - 1);
    if (!previous.getSnapshot().equals(prior)) {
      diffs.get(snapshotIndex).setSnapshot(prior);
    }
 else {
      removed=diffs.remove(snapshotIndex);
      if (countDiffChange) {
        counts.add(Quota.NAMESPACE,1);
      }
 else {
        currentINode.addSpaceConsumed(-1,0,false);
      }
      if (previous.snapshotINode == null) {
        previous.snapshotINode=removed.snapshotINode;
      }
      counts.add(previous.combinePosteriorAndCollectBlocks(currentINode,removed,collectedBlocks,removedINodes));
      previous.setPosterior(removed.getPosterior());
      removed.setPosterior(null);
    }
  }
  return counts;
}
