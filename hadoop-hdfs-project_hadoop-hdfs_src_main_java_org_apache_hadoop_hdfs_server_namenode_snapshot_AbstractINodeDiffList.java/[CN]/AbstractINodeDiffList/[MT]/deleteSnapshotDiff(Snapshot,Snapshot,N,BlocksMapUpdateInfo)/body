{
  int snapshotIndex=Collections.binarySearch(diffs,snapshot);
  int removedNum=0;
  D removed=null;
  if (snapshotIndex == 0) {
    if (prior != null) {
      diffs.get(snapshotIndex).setSnapshot(prior);
    }
 else {
      removed=diffs.remove(0);
      removedNum++;
      removedNum+=removed.destroyAndCollectBlocks(currentINode,collectedBlocks);
    }
  }
 else   if (snapshotIndex > 0) {
    final AbstractINodeDiff<N,D> previous=diffs.get(snapshotIndex - 1);
    if (!previous.getSnapshot().equals(prior)) {
      diffs.get(snapshotIndex).setSnapshot(prior);
    }
 else {
      removed=diffs.remove(snapshotIndex);
      removedNum++;
      if (previous.snapshotINode == null) {
        previous.snapshotINode=removed.snapshotINode;
      }
 else       if (removed.snapshotINode != null) {
        removed.snapshotINode.clearReferences();
      }
      removedNum+=previous.combinePosteriorAndCollectBlocks(currentINode,removed,collectedBlocks);
      previous.setPosterior(removed.getPosterior());
      removed.setPosterior(null);
    }
  }
  return removedNum;
}
