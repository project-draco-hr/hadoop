{
  int snapshotIndex=Collections.binarySearch(diffs,snapshot);
  D removed;
  if (snapshotIndex == 0) {
    if (prior != Snapshot.NO_SNAPSHOT_ID) {
      diffs.get(snapshotIndex).setSnapshotId(prior);
    }
 else {
      removed=diffs.remove(0);
      removed.destroyDiffAndCollectBlocks(reclaimContext,currentINode);
    }
  }
 else   if (snapshotIndex > 0) {
    final AbstractINodeDiff<N,A,D> previous=diffs.get(snapshotIndex - 1);
    if (previous.getSnapshotId() != prior) {
      diffs.get(snapshotIndex).setSnapshotId(prior);
    }
 else {
      removed=diffs.remove(snapshotIndex);
      if (previous.snapshotINode == null) {
        previous.snapshotINode=removed.snapshotINode;
      }
      previous.combinePosteriorAndCollectBlocks(reclaimContext,currentINode,removed);
      previous.setPosterior(removed.getPosterior());
      removed.setPosterior(null);
    }
  }
}
