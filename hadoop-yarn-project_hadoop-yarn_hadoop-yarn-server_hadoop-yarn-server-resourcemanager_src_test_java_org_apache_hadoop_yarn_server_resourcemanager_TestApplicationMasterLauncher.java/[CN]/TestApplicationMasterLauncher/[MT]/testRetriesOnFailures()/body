{
  final ContainerManagementProtocol mockProxy=mock(ContainerManagementProtocol.class);
  final StartContainersResponse mockResponse=mock(StartContainersResponse.class);
  when(mockProxy.startContainers(any(StartContainersRequest.class))).thenThrow(new NMNotYetReadyException("foo")).thenReturn(mockResponse);
  Configuration conf=new Configuration();
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,1);
  conf.setInt(YarnConfiguration.CLIENT_NM_CONNECT_RETRY_INTERVAL_MS,1);
  final DrainDispatcher dispatcher=new DrainDispatcher();
  MockRM rm=new MockRMWithCustomAMLauncher(conf,null){
    @Override protected ApplicationMasterLauncher createAMLauncher(){
      return new ApplicationMasterLauncher(getRMContext()){
        @Override protected Runnable createRunnableLauncher(        RMAppAttempt application,        AMLauncherEventType event){
          return new AMLauncher(context,application,event,getConfig()){
            @Override protected YarnRPC getYarnRPC(){
              YarnRPC mockRpc=mock(YarnRPC.class);
              when(mockRpc.getProxy(any(Class.class),any(InetSocketAddress.class),any(Configuration.class))).thenReturn(mockProxy);
              return mockRpc;
            }
          }
;
        }
      }
;
    }
    @Override protected Dispatcher createDispatcher(){
      return dispatcher;
    }
  }
;
  rm.start();
  MockNM nm1=rm.registerNode("127.0.0.1:1234",5120);
  RMApp app=rm.submitApp(2000);
  final ApplicationAttemptId appAttemptId=app.getCurrentAppAttempt().getAppAttemptId();
  nm1.nodeHeartbeat(true);
  dispatcher.await();
  rm.waitForState(appAttemptId,RMAppAttemptState.LAUNCHED,500);
}
