{
  ensureState(JobState.RUNNING);
  String reasonforFailure=" ";
  int numMaps=0;
  int numReduces=0;
  try {
    updateStatus();
    if (status.getState().equals(JobStatus.State.FAILED))     reasonforFailure=getTaskFailureEventString();
    numMaps=getTaskReports(TaskType.MAP).length;
    numReduces=getTaskReports(TaskType.REDUCE).length;
  }
 catch (  IOException e) {
  }
catch (  InterruptedException ie) {
  }
  StringBuffer sb=new StringBuffer();
  sb.append("Job: ").append(status.getJobID()).append("\n");
  sb.append("Job File: ").append(status.getJobFile()).append("\n");
  sb.append("Job Tracking URL : ").append(status.getTrackingUrl());
  sb.append("\n");
  sb.append("Uber job : ").append(status.isUber()).append("\n");
  sb.append("Number of maps: ").append(numMaps);
  sb.append("Number of reduces: ").append(numReduces);
  sb.append("map() completion: ");
  sb.append(status.getMapProgress()).append("\n");
  sb.append("reduce() completion: ");
  sb.append(status.getReduceProgress()).append("\n");
  sb.append("Job state: ");
  sb.append(status.getState()).append("\n");
  sb.append("retired: ").append(status.isRetired()).append("\n");
  sb.append("reason for failure: ").append(reasonforFailure);
  return sb.toString();
}
