{
  boolean requestCompleted=false;
  UserGroupInformation ugi=null;
  AuthenticationToken authToken=(AuthenticationToken)request.getUserPrincipal();
  if (authToken != null && authToken != AuthenticationToken.ANONYMOUS) {
    ugi=(UserGroupInformation)request.getAttribute(DelegationTokenAuthenticationHandler.DELEGATION_TOKEN_UGI_ATTRIBUTE);
    if (ugi == null) {
      String realUser=request.getUserPrincipal().getName();
      ugi=UserGroupInformation.createRemoteUser(realUser,handlerAuthMethod);
      String doAsUser=getDoAs(request);
      if (doAsUser != null) {
        ugi=UserGroupInformation.createProxyUser(doAsUser,ugi);
        try {
          ProxyUsers.authorize(ugi,request.getRemoteAddr());
        }
 catch (        AuthorizationException ex) {
          HttpExceptionUtils.createServletExceptionResponse(response,HttpServletResponse.SC_FORBIDDEN,ex);
          requestCompleted=true;
          if (LOG.isDebugEnabled()) {
            LOG.debug("Authentication exception: " + ex.getMessage(),ex);
          }
 else {
            LOG.warn("Authentication exception: " + ex.getMessage());
          }
        }
      }
    }
    UGI_TL.set(ugi);
  }
  if (!requestCompleted) {
    final UserGroupInformation ugiF=ugi;
    try {
      request=new HttpServletRequestWrapper(request){
        @Override public String getAuthType(){
          return (ugiF != null) ? handlerAuthMethod.toString() : null;
        }
        @Override public String getRemoteUser(){
          return (ugiF != null) ? ugiF.getShortUserName() : null;
        }
        @Override public Principal getUserPrincipal(){
          return (ugiF != null) ? new Principal(){
            @Override public String getName(){
              return ugiF.getUserName();
            }
          }
 : null;
        }
      }
;
      super.doFilter(filterChain,request,response);
    }
  finally {
      UGI_TL.remove();
    }
  }
}
