{
  if (args.length < 1) {
    System.out.println("Usage: IsolationRunner <path>/job.xml " + "<optional-user-name>");
    return false;
  }
  File jobFilename=new File(args[0]);
  if (!jobFilename.exists() || !jobFilename.isFile()) {
    System.out.println(jobFilename + " is not a valid job file.");
    return false;
  }
  String user;
  if (args.length > 1) {
    user=args[1];
  }
 else {
    user=UserGroupInformation.getCurrentUser().getShortUserName();
  }
  JobConf conf=new JobConf(new Path(jobFilename.toString()));
  conf.setUser(user);
  TaskAttemptID taskId=TaskAttemptID.forName(conf.get(JobContext.TASK_ATTEMPT_ID));
  if (taskId == null) {
    System.out.println("mapreduce.task.attempt.id not found in configuration;" + " job.xml is not a task config");
  }
  boolean isMap=conf.getBoolean(JobContext.TASK_ISMAP,true);
  if (!isMap) {
    System.out.println("Only map tasks are supported.");
    return false;
  }
  int partition=conf.getInt(JobContext.TASK_PARTITION,0);
  FileSystem local=FileSystem.getLocal(conf);
  LocalDirAllocator lDirAlloc=new LocalDirAllocator(MRConfig.LOCAL_DIR);
  File workDirName=TaskRunner.formWorkDir(lDirAlloc,taskId,false,conf);
  local.setWorkingDirectory(new Path(workDirName.toString()));
  FileSystem.get(conf).setWorkingDirectory(conf.getWorkingDirectory());
  ClassLoader classLoader=makeClassLoader(conf,new File(workDirName.toString()));
  Thread.currentThread().setContextClassLoader(classLoader);
  conf.setClassLoader(classLoader);
  Path localMetaSplit=new LocalDirAllocator(MRConfig.LOCAL_DIR).getLocalPathToRead(TaskTracker.getLocalSplitMetaFile(conf.getUser(),taskId.getJobID().toString(),taskId.toString()),conf);
  DataInputStream splitFile=FileSystem.getLocal(conf).open(localMetaSplit);
  TaskSplitIndex splitIndex=new TaskSplitIndex();
  splitIndex.readFields(splitFile);
  splitFile.close();
  Task task=new MapTask(jobFilename.toString(),taskId,partition,splitIndex,1);
  task.setConf(conf);
  task.run(conf,new FakeUmbilical());
  return true;
}
