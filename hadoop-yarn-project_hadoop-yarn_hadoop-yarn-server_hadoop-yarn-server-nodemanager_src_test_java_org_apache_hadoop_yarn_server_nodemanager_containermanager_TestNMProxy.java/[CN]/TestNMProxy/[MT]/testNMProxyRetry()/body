{
  containerManager.start();
  containerManager.setBlockNewContainerRequests(false);
  StartContainersRequest allRequests=Records.newRecord(StartContainersRequest.class);
  ApplicationId appId=ApplicationId.newInstance(1,1);
  ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
  org.apache.hadoop.yarn.api.records.Token nmToken=context.getNMTokenSecretManager().createNMToken(attemptId,context.getNodeId(),user);
  final InetSocketAddress address=conf.getSocketAddr(YarnConfiguration.NM_BIND_HOST,YarnConfiguration.NM_ADDRESS,YarnConfiguration.DEFAULT_NM_ADDRESS,YarnConfiguration.DEFAULT_NM_PORT);
  Token<NMTokenIdentifier> token=ConverterUtils.convertFromYarn(nmToken,SecurityUtil.buildTokenService(address));
  UserGroupInformation ugi=UserGroupInformation.createRemoteUser(user);
  ugi.addToken(token);
  ContainerManagementProtocol proxy=NMProxy.createNMProxy(conf,ContainerManagementProtocol.class,ugi,YarnRPC.create(conf),address);
  retryCount=0;
  shouldThrowNMNotYetReadyException=false;
  proxy.startContainers(allRequests);
  Assert.assertEquals(5,retryCount);
  retryCount=0;
  shouldThrowNMNotYetReadyException=false;
  proxy.stopContainers(Records.newRecord(StopContainersRequest.class));
  Assert.assertEquals(5,retryCount);
  retryCount=0;
  shouldThrowNMNotYetReadyException=false;
  proxy.getContainerStatuses(Records.newRecord(GetContainerStatusesRequest.class));
  Assert.assertEquals(5,retryCount);
  retryCount=0;
  shouldThrowNMNotYetReadyException=true;
  proxy.startContainers(allRequests);
  Assert.assertEquals(5,retryCount);
}
