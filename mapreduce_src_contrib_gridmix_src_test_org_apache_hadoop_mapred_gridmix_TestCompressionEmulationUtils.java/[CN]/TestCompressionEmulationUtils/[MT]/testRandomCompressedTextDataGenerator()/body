{
  int wordSize=10;
  int listSize=20;
  long dataSize=10 * 1024 * 1024;
  Configuration conf=new Configuration();
  CompressionEmulationUtil.setCompressionEmulationEnabled(conf,true);
  CompressionEmulationUtil.setInputCompressionEmulationEnabled(conf,true);
  conf.setInt(RandomTextDataGenerator.GRIDMIX_DATAGEN_RANDOMTEXT_LISTSIZE,listSize);
  conf.setInt(RandomTextDataGenerator.GRIDMIX_DATAGEN_RANDOMTEXT_WORDSIZE,wordSize);
  conf.setLong(GenerateData.GRIDMIX_GEN_BYTES,dataSize);
  FileSystem lfs=FileSystem.getLocal(conf);
  Path rootTempDir=new Path(System.getProperty("test.build.data","/tmp")).makeQualified(lfs.getUri(),lfs.getWorkingDirectory());
  Path tempDir=new Path(rootTempDir,"TestRandomCompressedTextDataGenr");
  lfs.delete(tempDir,true);
  runDataGenJob(conf,tempDir);
  FileStatus[] files=lfs.listStatus(tempDir,new Utils.OutputFileUtils.OutputFilesFilter());
  long size=0;
  long maxLineSize=0;
  for (  FileStatus status : files) {
    InputStream in=CompressionEmulationUtil.getPossiblyDecompressedInputStream(status.getPath(),conf,0);
    BufferedReader reader=new BufferedReader(new InputStreamReader(in));
    String line=reader.readLine();
    if (line != null) {
      long lineSize=line.getBytes().length;
      if (lineSize > maxLineSize) {
        maxLineSize=lineSize;
      }
      while (line != null) {
        for (        String word : line.split("\\s")) {
          size+=word.getBytes().length;
        }
        line=reader.readLine();
      }
    }
    reader.close();
  }
  assertTrue(size >= dataSize);
  assertTrue(size <= dataSize + maxLineSize);
}
