{
  long nsDelta=1;
  final long dsDeltaNoReplication;
  short dsReplication;
  FileWithSnapshotFeature sf=getFileWithSnapshotFeature();
  if (sf != null) {
    FileDiffList fileDiffList=sf.getDiffs();
    int last=fileDiffList.getLastSnapshotId();
    if (lastSnapshotId == Snapshot.CURRENT_STATE_ID || last == Snapshot.CURRENT_STATE_ID) {
      dsDeltaNoReplication=diskspaceConsumedNoReplication();
      dsReplication=getBlockReplication();
    }
 else     if (last < lastSnapshotId) {
      dsDeltaNoReplication=computeFileSize(true,false);
      dsReplication=getFileReplication();
    }
 else {
      int sid=fileDiffList.getSnapshotById(lastSnapshotId);
      dsDeltaNoReplication=diskspaceConsumedNoReplication(sid);
      dsReplication=getReplication(sid);
    }
  }
 else {
    dsDeltaNoReplication=diskspaceConsumedNoReplication();
    dsReplication=getBlockReplication();
  }
  counts.addNameSpace(nsDelta);
  counts.addDiskSpace(dsDeltaNoReplication * dsReplication);
  if (getStoragePolicyID() != BlockStoragePolicySuite.ID_UNSPECIFIED) {
    BlockStoragePolicy bsp=bsps.getPolicy(getStoragePolicyID());
    List<StorageType> storageTypes=bsp.chooseStorageTypes(dsReplication);
    for (    StorageType t : storageTypes) {
      if (!t.supportTypeQuota()) {
        continue;
      }
      counts.addTypeSpace(t,dsDeltaNoReplication);
    }
  }
  return counts;
}
