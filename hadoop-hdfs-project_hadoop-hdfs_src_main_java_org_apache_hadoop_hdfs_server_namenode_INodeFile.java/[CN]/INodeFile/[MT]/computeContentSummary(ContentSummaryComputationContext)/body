{
  final ContentCounts counts=summary.getCounts();
  FileWithSnapshotFeature sf=getFileWithSnapshotFeature();
  final long fileLen;
  if (sf == null) {
    fileLen=computeFileSize();
    counts.addContent(Content.FILE,1);
  }
 else {
    final FileDiffList diffs=sf.getDiffs();
    final int n=diffs.asList().size();
    counts.addContent(Content.FILE,n);
    if (n > 0 && sf.isCurrentFileDeleted()) {
      fileLen=diffs.getLast().getFileSize();
    }
 else {
      fileLen=computeFileSize();
    }
  }
  counts.addContent(Content.LENGTH,fileLen);
  counts.addContent(Content.DISKSPACE,storagespaceConsumed(null).getStorageSpace());
  if (getStoragePolicyID() != BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {
    BlockStoragePolicy bsp=summary.getBlockStoragePolicySuite().getPolicy(getStoragePolicyID());
    List<StorageType> storageTypes=bsp.chooseStorageTypes(getFileReplication());
    for (    StorageType t : storageTypes) {
      if (!t.supportTypeQuota()) {
        continue;
      }
      counts.addTypeSpace(t,fileLen);
    }
  }
  return summary;
}
