{
  final QuotaCounts counts=new QuotaCounts.Builder().nameSpace(1).build();
  final BlockStoragePolicy bsp=bsps.getPolicy(blockStoragePolicyId);
  FileWithSnapshotFeature sf=getFileWithSnapshotFeature();
  if (sf == null) {
    counts.add(storagespaceConsumed(bsp));
    return counts;
  }
  FileDiffList fileDiffList=sf.getDiffs();
  int last=fileDiffList.getLastSnapshotId();
  if (lastSnapshotId == Snapshot.CURRENT_STATE_ID || last == Snapshot.CURRENT_STATE_ID) {
    counts.add(storagespaceConsumed(bsp));
    return counts;
  }
  final long ssDeltaNoReplication;
  short replication;
  if (isStriped()) {
    return computeQuotaUsageWithStriped(bsps,counts);
  }
  if (last < lastSnapshotId) {
    ssDeltaNoReplication=computeFileSize(true,false);
    replication=getFileReplication();
  }
 else {
    int sid=fileDiffList.getSnapshotById(lastSnapshotId);
    ssDeltaNoReplication=computeFileSize(sid);
    replication=getFileReplication(sid);
  }
  counts.addStorageSpace(ssDeltaNoReplication * replication);
  if (bsp != null) {
    List<StorageType> storageTypes=bsp.chooseStorageTypes(replication);
    for (    StorageType t : storageTypes) {
      if (!t.supportTypeQuota()) {
        continue;
      }
      counts.addTypeSpace(t,ssDeltaNoReplication);
    }
  }
  return counts;
}
