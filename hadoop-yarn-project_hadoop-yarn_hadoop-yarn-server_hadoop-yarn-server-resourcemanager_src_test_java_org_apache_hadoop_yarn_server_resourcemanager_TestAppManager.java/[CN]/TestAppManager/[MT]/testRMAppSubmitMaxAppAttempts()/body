{
  int[] globalMaxAppAttempts=new int[]{10,1};
  int[][] individualMaxAppAttempts=new int[][]{new int[]{9,10,11,0},new int[]{1,10,0,-1}};
  int[][] expectedNums=new int[][]{new int[]{9,10,10,10},new int[]{1,1,1,1}};
  for (int i=0; i < globalMaxAppAttempts.length; ++i) {
    for (int j=0; j < individualMaxAppAttempts.length; ++j) {
      ResourceScheduler scheduler=mockResourceScheduler();
      Configuration conf=new Configuration();
      conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,globalMaxAppAttempts[i]);
      ApplicationMasterService masterService=new ApplicationMasterService(rmContext,scheduler);
      TestRMAppManager appMonitor=new TestRMAppManager(rmContext,new ClientToAMTokenSecretManagerInRM(),scheduler,masterService,new ApplicationACLsManager(conf),conf);
      ApplicationId appID=MockApps.newAppID(i * 4 + j + 1);
      asContext.setApplicationId(appID);
      if (individualMaxAppAttempts[i][j] != 0) {
        asContext.setMaxAppAttempts(individualMaxAppAttempts[i][j]);
      }
      appMonitor.submitApplication(asContext);
      RMApp app=rmContext.getRMApps().get(appID);
      Assert.assertEquals("max application attempts doesn't match",expectedNums[i][j],app.getMaxAppAttempts());
      int timeoutSecs=0;
      while ((getAppEventType() == RMAppEventType.KILL) && timeoutSecs++ < 20) {
        Thread.sleep(1000);
      }
      setAppEventType(RMAppEventType.KILL);
    }
  }
}
