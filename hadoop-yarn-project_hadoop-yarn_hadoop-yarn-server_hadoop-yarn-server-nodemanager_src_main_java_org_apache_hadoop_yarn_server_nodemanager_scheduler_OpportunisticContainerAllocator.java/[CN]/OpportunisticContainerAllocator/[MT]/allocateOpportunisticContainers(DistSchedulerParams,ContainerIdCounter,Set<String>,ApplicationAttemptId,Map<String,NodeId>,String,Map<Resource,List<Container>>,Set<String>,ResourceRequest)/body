{
  int toAllocate=anyAsk.getNumContainers() - (containers.isEmpty() ? 0 : containers.get(anyAsk.getCapability()).size());
  List<String> topKNodesLeft=new ArrayList<>();
  for (  String s : allNodes.keySet()) {
    if (nodesAllocated.contains(s) || blacklist.contains(s)) {
      continue;
    }
    topKNodesLeft.add(s);
  }
  int numAllocated=0;
  int nextNodeToAllocate=0;
  for (int numCont=0; numCont < toAllocate; numCont++) {
    String topNode=topKNodesLeft.get(nextNodeToAllocate);
    nextNodeToAllocate++;
    nextNodeToAllocate%=topKNodesLeft.size();
    NodeId nodeId=allNodes.get(topNode);
    Container container=buildContainer(appParams,idCounter,anyAsk,id,userName,nodeId);
    List<Container> cList=containers.get(anyAsk.getCapability());
    if (cList == null) {
      cList=new ArrayList<>();
      containers.put(anyAsk.getCapability(),cList);
    }
    cList.add(container);
    numAllocated++;
    LOG.info("Allocated " + numAllocated + " opportunistic containers.");
  }
}
