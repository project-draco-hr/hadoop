{
  containerManager.start();
  File scriptFile=new File(tmpDir,"scriptFile.sh");
  PrintWriter fileWriter=new PrintWriter(scriptFile);
  File processStartFile=new File(tmpDir,"start_file.txt").getAbsoluteFile();
  fileWriter.write("\numask 0");
  fileWriter.write("\necho Hello World! > " + processStartFile);
  fileWriter.write("\necho $$ >> " + processStartFile);
  fileWriter.write("\nexec sleep 100");
  fileWriter.close();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  ContainerId cId=createContainerId();
  containerLaunchContext.setContainerId(cId);
  containerLaunchContext.setUser(user);
  URL resource_alpha=ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));
  LocalResource rsrc_alpha=recordFactory.newRecordInstance(LocalResource.class);
  rsrc_alpha.setResource(resource_alpha);
  rsrc_alpha.setSize(-1);
  rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);
  rsrc_alpha.setType(LocalResourceType.FILE);
  rsrc_alpha.setTimestamp(scriptFile.lastModified());
  String destinationFile="dest_file";
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  localResources.put(destinationFile,rsrc_alpha);
  containerLaunchContext.setLocalResources(localResources);
  containerLaunchContext.setUser(containerLaunchContext.getUser());
  List<String> commands=new ArrayList<String>();
  commands.add("/bin/bash");
  commands.add(scriptFile.getAbsolutePath());
  containerLaunchContext.setCommands(commands);
  containerLaunchContext.setResource(recordFactory.newRecordInstance(Resource.class));
  containerLaunchContext.getResource().setMemory(100 * 1024 * 1024);
  StartContainerRequest startRequest=recordFactory.newRecordInstance(StartContainerRequest.class);
  startRequest.setContainerLaunchContext(containerLaunchContext);
  containerManager.startContainer(startRequest);
  int timeoutSecs=0;
  while (!processStartFile.exists() && timeoutSecs++ < 20) {
    Thread.sleep(1000);
    LOG.info("Waiting for process start-file to be created");
  }
  Assert.assertTrue("ProcessStartFile doesn't exist!",processStartFile.exists());
  BufferedReader reader=new BufferedReader(new FileReader(processStartFile));
  Assert.assertEquals("Hello World!",reader.readLine());
  String pid=reader.readLine().trim();
  Assert.assertEquals(null,reader.readLine());
  Assert.assertTrue("Process is not alive!",exec.signalContainer(user,pid,Signal.NULL));
  Assert.assertTrue("Process is not alive!",exec.signalContainer(user,pid,Signal.NULL));
  StopContainerRequest stopRequest=recordFactory.newRecordInstance(StopContainerRequest.class);
  stopRequest.setContainerId(cId);
  containerManager.stopContainer(stopRequest);
  BaseContainerManagerTest.waitForContainerState(containerManager,cId,ContainerState.COMPLETE);
  GetContainerStatusRequest gcsRequest=recordFactory.newRecordInstance(GetContainerStatusRequest.class);
  gcsRequest.setContainerId(cId);
  ContainerStatus containerStatus=containerManager.getContainerStatus(gcsRequest).getStatus();
  Assert.assertEquals(ExitCode.TERMINATED.getExitCode(),containerStatus.getExitStatus());
  Assert.assertFalse("Process is still alive!",exec.signalContainer(user,pid,Signal.NULL));
}
