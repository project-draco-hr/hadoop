{
  Path file0=new Path(sub1,"file0");
  Path file1=new Path(sub1,"file1");
  DFSTestUtil.createFile(hdfs,file0,BLOCKSIZE,REPLICATION,seed);
  DFSTestUtil.createFile(hdfs,file1,BLOCKSIZE,REPLICATION,seed);
  String snapshotName="s1";
  try {
    hdfs.deleteSnapshot(sub1,snapshotName);
    fail("SnapshotException expected: " + sub1.toString() + " is not snapshottable yet");
  }
 catch (  Exception e) {
    GenericTestUtils.assertExceptionContains("Directory is not a snapshottable directory: " + sub1,e);
  }
  hdfs.allowSnapshot(sub1.toString());
  try {
    hdfs.deleteSnapshot(sub1,snapshotName);
    fail("SnapshotException expected: snapshot " + snapshotName + " does not exist for "+ sub1.toString());
  }
 catch (  Exception e) {
    GenericTestUtils.assertExceptionContains("Cannot delete snapshot " + snapshotName + " from path "+ sub1.toString()+ ": the snapshot does not exist.",e);
  }
  hdfs.createSnapshot(sub1,snapshotName);
  hdfs.deleteSnapshot(sub1,snapshotName);
  hdfs.createSnapshot(sub1,snapshotName);
  Path newFile=new Path(sub1,"newFile");
  DFSTestUtil.createFile(hdfs,newFile,BLOCKSIZE,REPLICATION,seed);
  String snapshotName2="s2";
  hdfs.createSnapshot(sub1,snapshotName2);
  Path ss=SnapshotTestHelper.getSnapshotPath(sub1,snapshotName2,"newFile");
  FileStatus statusBeforeDeletion=hdfs.getFileStatus(ss);
  hdfs.deleteSnapshot(sub1,snapshotName);
  FileStatus statusAfterDeletion=hdfs.getFileStatus(ss);
  assertEquals(statusBeforeDeletion.toString(),statusAfterDeletion.toString());
}
