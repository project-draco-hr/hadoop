{
  Path modDir=modDirStr.isEmpty() ? snapshotRoot : new Path(snapshotRoot,modDirStr);
  final int delta=modDirStr.isEmpty() ? 0 : 1;
  Path file10=new Path(modDir,"file10");
  Path file11=new Path(modDir,"file11");
  Path file12=new Path(modDir,"file12");
  Path file13=new Path(modDir,"file13");
  Path file14=new Path(modDir,"file14");
  Path file15=new Path(modDir,"file15");
  DFSTestUtil.createFile(hdfs,file10,BLOCKSIZE,REPLICATION_1,seed);
  DFSTestUtil.createFile(hdfs,file11,BLOCKSIZE,REPLICATION_1,seed);
  DFSTestUtil.createFile(hdfs,file12,BLOCKSIZE,REPLICATION_1,seed);
  DFSTestUtil.createFile(hdfs,file13,BLOCKSIZE,REPLICATION_1,seed);
  SnapshotTestHelper.createSnapshot(hdfs,snapshotRoot,"s1");
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 5,8 * BLOCKSIZE);
  hdfs.delete(file11,true);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 6 + delta,8 * BLOCKSIZE);
  hdfs.setReplication(file12,REPLICATION);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 7 + delta,9 * BLOCKSIZE);
  hdfs.setReplication(file13,REPLICATION);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 8 + delta,10 * BLOCKSIZE);
  DFSTestUtil.createFile(hdfs,file14,BLOCKSIZE,REPLICATION,seed);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 9 + delta,13 * BLOCKSIZE);
  DFSTestUtil.createFile(hdfs,file15,BLOCKSIZE,REPLICATION,seed);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 10 + delta,16 * BLOCKSIZE);
  hdfs.createSnapshot(snapshotRoot,"s2");
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 11 + delta,16 * BLOCKSIZE);
  DFSTestUtil.createFile(hdfs,file11,BLOCKSIZE,REPLICATION,seed);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 12 + delta * 2,19 * BLOCKSIZE);
  hdfs.delete(file12,true);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 13 + delta * 2,19 * BLOCKSIZE);
  hdfs.setReplication(file13,(short)(REPLICATION - 2));
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 14 + delta * 2,19 * BLOCKSIZE);
  hdfs.delete(file14,true);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 15 + delta * 2,19 * BLOCKSIZE);
  hdfs.setReplication(file15,REPLICATION_1);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 16 + delta * 2,19 * BLOCKSIZE);
  hdfs.createSnapshot(snapshotRoot,"s3");
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 17 + delta * 2,19 * BLOCKSIZE);
  hdfs.setReplication(file10,REPLICATION);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 18 + delta * 2,20 * BLOCKSIZE);
  Path file10_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file10");
  Path file11_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file11");
  Path file12_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file12");
  Path file13_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file13");
  FileStatus statusBeforeDeletion10=hdfs.getFileStatus(file10_s1);
  FileStatus statusBeforeDeletion11=hdfs.getFileStatus(file11_s1);
  FileStatus statusBeforeDeletion12=hdfs.getFileStatus(file12_s1);
  FileStatus statusBeforeDeletion13=hdfs.getFileStatus(file13_s1);
  hdfs.deleteSnapshot(snapshotRoot,"s2");
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 12 + delta,14 * BLOCKSIZE);
  FileStatus statusAfterDeletion10=hdfs.getFileStatus(file10_s1);
  FileStatus statusAfterDeletion11=hdfs.getFileStatus(file11_s1);
  FileStatus statusAfterDeletion12=hdfs.getFileStatus(file12_s1);
  FileStatus statusAfterDeletion13=hdfs.getFileStatus(file13_s1);
  assertEquals(statusBeforeDeletion10.toString(),statusAfterDeletion10.toString());
  assertEquals(statusBeforeDeletion11.toString(),statusAfterDeletion11.toString());
  assertEquals(statusBeforeDeletion12.toString(),statusAfterDeletion12.toString());
  assertEquals(statusBeforeDeletion13.toString(),statusAfterDeletion13.toString());
  Path file14_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file14");
  assertFalse(hdfs.exists(file14_s1));
  Path file15_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file15");
  assertFalse(hdfs.exists(file15_s1));
  INodeFile nodeFile13=(INodeFile)fsdir.getINode(file13.toString());
  assertEquals(REPLICATION_1,nodeFile13.getBlockReplication());
  INodeFile nodeFile12=(INodeFile)fsdir.getINode(file12_s1.toString());
  assertEquals(REPLICATION_1,nodeFile12.getBlockReplication());
}
