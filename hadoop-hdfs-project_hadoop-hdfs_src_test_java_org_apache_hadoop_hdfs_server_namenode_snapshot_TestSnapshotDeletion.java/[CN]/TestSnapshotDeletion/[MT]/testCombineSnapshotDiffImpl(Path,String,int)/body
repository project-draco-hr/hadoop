{
  Path modDir=modDirStr.isEmpty() ? snapshotRoot : new Path(snapshotRoot,modDirStr);
  Path file10=new Path(modDir,"file10");
  Path file11=new Path(modDir,"file11");
  Path file12=new Path(modDir,"file12");
  Path file13=new Path(modDir,"file13");
  Path file14=new Path(modDir,"file14");
  Path file15=new Path(modDir,"file15");
  DFSTestUtil.createFile(hdfs,file10,BLOCKSIZE,REPLICATION_1,seed);
  DFSTestUtil.createFile(hdfs,file11,BLOCKSIZE,REPLICATION_1,seed);
  DFSTestUtil.createFile(hdfs,file12,BLOCKSIZE,REPLICATION_1,seed);
  DFSTestUtil.createFile(hdfs,file13,BLOCKSIZE,REPLICATION_1,seed);
  SnapshotTestHelper.createSnapshot(hdfs,snapshotRoot,"s1");
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 4,8 * BLOCKSIZE);
  hdfs.delete(file11,true);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 4,8 * BLOCKSIZE);
  hdfs.setReplication(file12,REPLICATION);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 4,9 * BLOCKSIZE);
  hdfs.setReplication(file13,REPLICATION);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 4,10 * BLOCKSIZE);
  DFSTestUtil.createFile(hdfs,file14,BLOCKSIZE,REPLICATION,seed);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 5,13 * BLOCKSIZE);
  DFSTestUtil.createFile(hdfs,file15,BLOCKSIZE,REPLICATION,seed);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 6,16 * BLOCKSIZE);
  hdfs.createSnapshot(snapshotRoot,"s2");
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 6,16 * BLOCKSIZE);
  DFSTestUtil.createFile(hdfs,file11,BLOCKSIZE,REPLICATION,seed);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 7,19 * BLOCKSIZE);
  hdfs.delete(file12,true);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 7,19 * BLOCKSIZE);
  hdfs.setReplication(file13,(short)(REPLICATION - 2));
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 7,19 * BLOCKSIZE);
  hdfs.delete(file14,true);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 7,19 * BLOCKSIZE);
  hdfs.setReplication(file15,REPLICATION_1);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 7,19 * BLOCKSIZE);
  hdfs.createSnapshot(snapshotRoot,"s3");
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 7,19 * BLOCKSIZE);
  hdfs.setReplication(file10,REPLICATION);
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 7,20 * BLOCKSIZE);
  Path file10_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file10");
  Path file11_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file11");
  Path file12_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file12");
  Path file13_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file13");
  Path file14_s2=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s2",modDirStr + "file14");
  Path file15_s2=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s2",modDirStr + "file15");
  FileStatus statusBeforeDeletion10=hdfs.getFileStatus(file10_s1);
  FileStatus statusBeforeDeletion11=hdfs.getFileStatus(file11_s1);
  FileStatus statusBeforeDeletion12=hdfs.getFileStatus(file12_s1);
  FileStatus statusBeforeDeletion13=hdfs.getFileStatus(file13_s1);
  INodeFile file14Node=TestSnapshotBlocksMap.assertBlockCollection(file14_s2.toString(),1,fsdir,blockmanager);
  BlockInfo[] blocks_14=file14Node.getBlocks();
  TestSnapshotBlocksMap.assertBlockCollection(file15_s2.toString(),1,fsdir,blockmanager);
  hdfs.deleteSnapshot(snapshotRoot,"s2");
  checkQuotaUsageComputation(snapshotRoot,dirNodeNum + 6,14 * BLOCKSIZE);
  FileStatus statusAfterDeletion10=hdfs.getFileStatus(file10_s1);
  FileStatus statusAfterDeletion11=hdfs.getFileStatus(file11_s1);
  FileStatus statusAfterDeletion12=hdfs.getFileStatus(file12_s1);
  FileStatus statusAfterDeletion13=hdfs.getFileStatus(file13_s1);
  assertEquals(statusBeforeDeletion10.toString(),statusAfterDeletion10.toString());
  assertEquals(statusBeforeDeletion11.toString(),statusAfterDeletion11.toString());
  assertEquals(statusBeforeDeletion12.toString(),statusAfterDeletion12.toString());
  assertEquals(statusBeforeDeletion13.toString(),statusAfterDeletion13.toString());
  TestSnapshotBlocksMap.assertBlockCollection(file10_s1.toString(),1,fsdir,blockmanager);
  TestSnapshotBlocksMap.assertBlockCollection(file11_s1.toString(),1,fsdir,blockmanager);
  TestSnapshotBlocksMap.assertBlockCollection(file12_s1.toString(),1,fsdir,blockmanager);
  TestSnapshotBlocksMap.assertBlockCollection(file13_s1.toString(),1,fsdir,blockmanager);
  Path file14_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file14");
  Path file15_s1=SnapshotTestHelper.getSnapshotPath(snapshotRoot,"s1",modDirStr + "file15");
  assertFalse(hdfs.exists(file14_s1));
  assertFalse(hdfs.exists(file15_s1));
  for (  BlockInfo b : blocks_14) {
    assertEquals(INVALID_INODE_ID,b.getBlockCollectionId());
  }
  INodeFile nodeFile13=(INodeFile)fsdir.getINode(file13.toString());
  for (  BlockInfo b : nodeFile13.getBlocks()) {
    assertEquals(REPLICATION_1,b.getReplication());
  }
  TestSnapshotBlocksMap.assertBlockCollection(file13.toString(),1,fsdir,blockmanager);
  INodeFile nodeFile12=(INodeFile)fsdir.getINode(file12_s1.toString());
  for (  BlockInfo b : nodeFile12.getBlocks()) {
    assertEquals(REPLICATION_1,b.getReplication());
  }
}
