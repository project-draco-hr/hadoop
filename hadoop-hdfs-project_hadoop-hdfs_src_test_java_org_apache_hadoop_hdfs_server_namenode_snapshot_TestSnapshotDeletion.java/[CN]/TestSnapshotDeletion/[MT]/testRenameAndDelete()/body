{
  final Path foo=new Path("/foo");
  final Path x=new Path(foo,"x");
  final Path y=new Path(foo,"y");
  final Path trash=new Path("/trash");
  hdfs.mkdirs(x);
  hdfs.mkdirs(y);
  final long parentId=fsdir.getINode4Write(y.toString()).getId();
  hdfs.mkdirs(trash);
  hdfs.allowSnapshot(foo);
  hdfs.createSnapshot(foo,"s0");
  final Path file=new Path(x,"bar");
  DFSTestUtil.createFile(hdfs,file,BLOCKSIZE,(short)1,0L);
  final long fileId=fsdir.getINode4Write(file.toString()).getId();
  final Path newFile=new Path(y,"bar");
  hdfs.rename(file,newFile);
  hdfs.createSnapshot(foo,"s1");
  final Path deletedY=new Path(trash,"y");
  hdfs.rename(y,deletedY);
  hdfs.createSnapshot(foo,"s2");
  hdfs.delete(deletedY,true);
  hdfs.deleteSnapshot(foo,"s1");
  INode p=fsdir.getInode(parentId);
  Assert.assertNotNull(p);
  INodeDirectory pd=p.asDirectory();
  Assert.assertNotNull(pd);
  Assert.assertNull(pd.getChild("bar".getBytes(),Snapshot.CURRENT_STATE_ID));
  Assert.assertNull(fsdir.getInode(fileId));
}
