{
  cluster.shutdown();
  Configuration newConf=new Configuration(conf);
  newConf.setBoolean(DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY,false);
  cluster=new MiniDFSCluster.Builder(newConf).numDataNodes(0).build();
  cluster.waitActive();
  hdfs=cluster.getFileSystem();
  final Path path=new Path("/dir");
  hdfs.mkdirs(path);
  hdfs.allowSnapshot(path);
  hdfs.mkdirs(new Path(path,"/test"));
  hdfs.createSnapshot(path,"s1");
  UserGroupInformation anotherUser=UserGroupInformation.createRemoteUser("anotheruser");
  anotherUser.doAs(new PrivilegedAction<Object>(){
    @Override public Object run(){
      DistributedFileSystem anotherUserFS=null;
      try {
        anotherUserFS=cluster.getFileSystem();
        anotherUserFS.deleteSnapshot(path,"s1");
      }
 catch (      IOException e) {
        fail("Failed to delete snapshot : " + e.getLocalizedMessage());
      }
 finally {
        IOUtils.closeStream(anotherUserFS);
      }
      return null;
    }
  }
);
}
