{
  cluster.getNamesystem().getSnapshotManager().setAllowNestedSnapshots(true);
  final Path subFile0=new Path(sub,"file0");
  final Path subsubFile0=new Path(subsub,"file0");
  DFSTestUtil.createFile(hdfs,subFile0,BLOCKSIZE,REPLICATION,seed);
  DFSTestUtil.createFile(hdfs,subsubFile0,BLOCKSIZE,REPLICATION,seed);
  hdfs.setOwner(subsub,"owner","group");
  SnapshotTestHelper.createSnapshot(hdfs,sub,"s0");
  checkQuotaUsageComputation(sub,5,BLOCKSIZE * 6);
  final Path subFile1=new Path(sub,"file1");
  final Path subsubFile1=new Path(subsub,"file1");
  DFSTestUtil.createFile(hdfs,subFile1,BLOCKSIZE,REPLICATION_1,seed);
  DFSTestUtil.createFile(hdfs,subsubFile1,BLOCKSIZE,REPLICATION,seed);
  checkQuotaUsageComputation(sub,8,BLOCKSIZE * 11);
  SnapshotTestHelper.createSnapshot(hdfs,sub,"s1");
  checkQuotaUsageComputation(sub,9,BLOCKSIZE * 11);
  SnapshotTestHelper.createSnapshot(hdfs,dir,"s2");
  checkQuotaUsageComputation(dir,11,BLOCKSIZE * 11);
  checkQuotaUsageComputation(sub,9,BLOCKSIZE * 11);
  hdfs.setOwner(subsub,"unknown","unknown");
  hdfs.setReplication(subsubFile1,REPLICATION_1);
  checkQuotaUsageComputation(dir,13,BLOCKSIZE * 11);
  checkQuotaUsageComputation(sub,11,BLOCKSIZE * 11);
  hdfs.delete(subFile1,true);
  checkQuotaUsageComputation(new Path("/"),16,BLOCKSIZE * 11);
  checkQuotaUsageComputation(dir,15,BLOCKSIZE * 11);
  checkQuotaUsageComputation(sub,13,BLOCKSIZE * 11);
  Path subsubSnapshotCopy=SnapshotTestHelper.getSnapshotPath(dir,"s2",sub.getName() + Path.SEPARATOR + subsub.getName());
  Path subsubFile1SCopy=SnapshotTestHelper.getSnapshotPath(dir,"s2",sub.getName() + Path.SEPARATOR + subsub.getName()+ Path.SEPARATOR+ subsubFile1.getName());
  Path subFile1SCopy=SnapshotTestHelper.getSnapshotPath(dir,"s2",sub.getName() + Path.SEPARATOR + subFile1.getName());
  FileStatus subsubStatus=hdfs.getFileStatus(subsubSnapshotCopy);
  assertEquals("owner",subsubStatus.getOwner());
  assertEquals("group",subsubStatus.getGroup());
  FileStatus subsubFile1Status=hdfs.getFileStatus(subsubFile1SCopy);
  assertEquals(REPLICATION,subsubFile1Status.getReplication());
  FileStatus subFile1Status=hdfs.getFileStatus(subFile1SCopy);
  assertEquals(REPLICATION_1,subFile1Status.getReplication());
  hdfs.deleteSnapshot(dir,"s2");
  checkQuotaUsageComputation(new Path("/"),14,BLOCKSIZE * 11);
  checkQuotaUsageComputation(dir,13,BLOCKSIZE * 11);
  checkQuotaUsageComputation(sub,12,BLOCKSIZE * 11);
  try {
    hdfs.getFileStatus(subsubSnapshotCopy);
    fail("should throw FileNotFoundException");
  }
 catch (  FileNotFoundException e) {
    GenericTestUtils.assertExceptionContains("File does not exist: " + subsubSnapshotCopy.toString(),e);
  }
  try {
    hdfs.getFileStatus(subsubFile1SCopy);
    fail("should throw FileNotFoundException");
  }
 catch (  FileNotFoundException e) {
    GenericTestUtils.assertExceptionContains("File does not exist: " + subsubFile1SCopy.toString(),e);
  }
  try {
    hdfs.getFileStatus(subFile1SCopy);
    fail("should throw FileNotFoundException");
  }
 catch (  FileNotFoundException e) {
    GenericTestUtils.assertExceptionContains("File does not exist: " + subFile1SCopy.toString(),e);
  }
  subsubSnapshotCopy=SnapshotTestHelper.getSnapshotPath(sub,"s1",subsub.getName());
  subsubFile1SCopy=SnapshotTestHelper.getSnapshotPath(sub,"s1",subsub.getName() + Path.SEPARATOR + subsubFile1.getName());
  subFile1SCopy=SnapshotTestHelper.getSnapshotPath(sub,"s1",subFile1.getName());
  subsubStatus=hdfs.getFileStatus(subsubSnapshotCopy);
  assertEquals("owner",subsubStatus.getOwner());
  assertEquals("group",subsubStatus.getGroup());
  subsubFile1Status=hdfs.getFileStatus(subsubFile1SCopy);
  assertEquals(REPLICATION,subsubFile1Status.getReplication());
  subFile1Status=hdfs.getFileStatus(subFile1SCopy);
  assertEquals(REPLICATION_1,subFile1Status.getReplication());
}
