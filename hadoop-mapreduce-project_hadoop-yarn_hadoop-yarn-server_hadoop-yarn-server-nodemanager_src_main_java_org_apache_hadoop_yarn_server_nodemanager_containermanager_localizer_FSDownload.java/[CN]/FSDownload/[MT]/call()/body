{
  final Path sCopy;
  try {
    sCopy=ConverterUtils.getPathFromYarnURL(resource.getResource());
  }
 catch (  URISyntaxException e) {
    throw new IOException("Invalid resource",e);
  }
  Path tmp;
  Path dst=dirs.getLocalPathForWrite(".",getEstimatedSize(resource),conf);
  do {
    tmp=new Path(dst,String.valueOf(rand.nextLong()));
  }
 while (files.util().exists(tmp));
  dst=tmp;
  files.mkdir(dst,cachePerms,false);
  final Path dst_work=new Path(dst + "_tmp");
  files.mkdir(dst_work,cachePerms,false);
  Path dFinal=files.makeQualified(new Path(dst_work,sCopy.getName()));
  try {
    Path dTmp=null == userUgi ? files.makeQualified(copy(sCopy,dst_work)) : userUgi.doAs(new PrivilegedExceptionAction<Path>(){
      public Path run() throws Exception {
        return files.makeQualified(copy(sCopy,dst_work));
      }
    }
);
    unpack(new File(dTmp.toUri()),new File(dFinal.toUri()));
    files.rename(dst_work,dst,Rename.OVERWRITE);
  }
 catch (  Exception e) {
    try {
      files.delete(dst,true);
    }
 catch (    IOException ignore) {
    }
    throw e;
  }
 finally {
    try {
      files.delete(dst_work,true);
    }
 catch (    FileNotFoundException ignore) {
    }
    rand=null;
    conf=null;
    resource=null;
    dirs=null;
    cachePerms=null;
  }
  return files.makeQualified(new Path(dst,sCopy.getName()));
}
