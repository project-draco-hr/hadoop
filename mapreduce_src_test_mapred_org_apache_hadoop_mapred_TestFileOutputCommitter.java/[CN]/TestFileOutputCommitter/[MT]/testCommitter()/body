{
  JobConf job=new JobConf();
  setConfForFileOutputCommitter(job);
  JobContext jContext=new JobContextImpl(job,taskID.getJobID());
  TaskAttemptContext tContext=new TaskAttemptContextImpl(job,taskID);
  FileOutputCommitter committer=new FileOutputCommitter();
  FileOutputFormat.setWorkOutputPath(job,committer.getTempTaskOutputPath(tContext));
  committer.setupJob(jContext);
  committer.setupTask(tContext);
  String file="test.txt";
  Reporter reporter=Reporter.NULL;
  FileSystem localFs=FileSystem.getLocal(job);
  TextOutputFormat theOutputFormat=new TextOutputFormat();
  RecordWriter theRecordWriter=theOutputFormat.getRecordWriter(localFs,job,file,reporter);
  writeOutput(theRecordWriter,reporter);
  committer.commitTask(tContext);
  committer.commitJob(jContext);
  File expectedFile=new File(new Path(outDir,file).toString());
  StringBuffer expectedOutput=new StringBuffer();
  expectedOutput.append(key1).append('\t').append(val1).append("\n");
  expectedOutput.append(val1).append("\n");
  expectedOutput.append(val2).append("\n");
  expectedOutput.append(key2).append("\n");
  expectedOutput.append(key1).append("\n");
  expectedOutput.append(key2).append('\t').append(val2).append("\n");
  String output=UtilsForTests.slurp(expectedFile);
  assertEquals(output,expectedOutput.toString());
  FileUtil.fullyDelete(new File(outDir.toString()));
}
