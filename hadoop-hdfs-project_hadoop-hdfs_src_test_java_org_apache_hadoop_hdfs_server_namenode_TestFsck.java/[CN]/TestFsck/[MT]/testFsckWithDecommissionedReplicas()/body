{
  final short REPL_FACTOR=1;
  short NUM_DN=2;
  final long blockSize=512;
  final long fileSize=1024;
  boolean checkDecommissionInProgress=false;
  String[] racks={"/rack1","/rack2"};
  String[] hosts={"host1","host2"};
  Configuration conf=new Configuration();
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
  conf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY,1);
  MiniDFSCluster cluster;
  DistributedFileSystem dfs;
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DN).hosts(hosts).racks(racks).build();
  assertNotNull("Failed Cluster Creation",cluster);
  cluster.waitClusterUp();
  dfs=cluster.getFileSystem();
  assertNotNull("Failed to get FileSystem",dfs);
  DFSTestUtil util=new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(1).build();
  final String testFile=new String("/testfile");
  final Path path=new Path(testFile);
  util.createFile(dfs,path,fileSize,REPL_FACTOR,1000L);
  util.waitReplication(dfs,path,REPL_FACTOR);
  try {
    String outStr=runFsck(conf,0,true,testFile);
    System.out.println(outStr);
    assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
    FSNamesystem fsn=cluster.getNameNode().getNamesystem();
    BlockManager bm=fsn.getBlockManager();
    ExtendedBlock eb=util.getFirstBlock(dfs,path);
    BlockCollection bc=null;
    try {
      fsn.writeLock();
      BlockInfo bi=bm.getStoredBlock(eb.getLocalBlock());
      bc=fsn.getBlockCollection(bi);
    }
  finally {
      fsn.writeUnlock();
    }
    DatanodeDescriptor dn=bc.getBlocks()[0].getDatanode(0);
    bm.getDatanodeManager().getDecomManager().startDecommission(dn);
    String dnName=dn.getXferAddr();
    DatanodeInfo datanodeInfo=null;
    int count=0;
    do {
      Thread.sleep(2000);
      for (      DatanodeInfo info : dfs.getDataNodeStats()) {
        if (dnName.equals(info.getXferAddr())) {
          datanodeInfo=info;
        }
      }
      if (!checkDecommissionInProgress && datanodeInfo != null && datanodeInfo.isDecommissionInProgress()) {
        String fsckOut=runFsck(conf,0,true,testFile);
        checkDecommissionInProgress=true;
      }
    }
 while (datanodeInfo != null && !datanodeInfo.isDecommissioned());
    String fsckOut=runFsck(conf,0,true,testFile);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
