{
  final short NUM_REPLICAS=1;
  Configuration conf=new Configuration();
  NameNode namenode=mock(NameNode.class);
  NetworkTopology nettop=mock(NetworkTopology.class);
  Map<String,String[]> pmap=new HashMap<String,String[]>();
  Writer result=new StringWriter();
  PrintWriter out=new PrintWriter(result,true);
  InetAddress remoteAddress=InetAddress.getLocalHost();
  FSNamesystem fsName=mock(FSNamesystem.class);
  BlockManager blockManager=mock(BlockManager.class);
  DatanodeManager dnManager=mock(DatanodeManager.class);
  when(namenode.getNamesystem()).thenReturn(fsName);
  when(fsName.getBlockLocations(any(FSPermissionChecker.class),anyString(),anyLong(),anyLong(),anyBoolean(),anyBoolean())).thenThrow(new FileNotFoundException());
  when(fsName.getBlockManager()).thenReturn(blockManager);
  when(blockManager.getDatanodeManager()).thenReturn(dnManager);
  NamenodeFsck fsck=new NamenodeFsck(conf,namenode,nettop,pmap,out,NUM_REPLICAS,remoteAddress);
  String pathString="/tmp/testFile";
  long length=123L;
  boolean isDir=false;
  int blockReplication=1;
  long blockSize=128 * 1024L;
  long modTime=123123123L;
  long accessTime=123123120L;
  FsPermission perms=FsPermission.getDefault();
  String owner="foo";
  String group="bar";
  byte[] symlink=null;
  byte[] path=new byte[128];
  path=DFSUtil.string2Bytes(pathString);
  long fileId=312321L;
  int numChildren=1;
  byte storagePolicy=0;
  HdfsFileStatus file=new HdfsFileStatus(length,isDir,blockReplication,blockSize,modTime,accessTime,perms,owner,group,symlink,path,fileId,numChildren,null,storagePolicy);
  Result res=new Result(conf);
  try {
    fsck.check(pathString,file,res);
  }
 catch (  Exception e) {
    fail("Unexpected exception " + e.getMessage());
  }
  assertTrue(res.toString().contains("HEALTHY"));
}
