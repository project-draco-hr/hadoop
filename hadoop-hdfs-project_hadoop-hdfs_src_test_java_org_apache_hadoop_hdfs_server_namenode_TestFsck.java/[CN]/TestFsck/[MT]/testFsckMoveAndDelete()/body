{
  final int MAX_MOVE_TRIES=5;
  DFSTestUtil util=new DFSTestUtil.Builder().setName("TestFsckMoveAndDelete").setNumFiles(5).build();
  MiniDFSCluster cluster=null;
  FileSystem fs=null;
  try {
    Configuration conf=new HdfsConfiguration();
    conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,10000L);
    conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY,1);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(4).build();
    String topDir="/srcdat";
    fs=cluster.getFileSystem();
    cluster.waitActive();
    util.createFiles(fs,topDir);
    util.waitReplication(fs,topDir,(short)3);
    String outStr=runFsck(conf,0,true,"/");
    assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
    String[] fileNames=util.getFileNames(topDir);
    DFSClient dfsClient=new DFSClient(new InetSocketAddress("localhost",cluster.getNameNodePort()),conf);
    String corruptFileName=fileNames[0];
    ExtendedBlock block=dfsClient.getNamenode().getBlockLocations(corruptFileName,0,Long.MAX_VALUE).get(0).getBlock();
    for (int i=0; i < 4; i++) {
      File blockFile=cluster.getBlockFile(i,block);
      if (blockFile != null && blockFile.exists()) {
        assertTrue(blockFile.delete());
      }
    }
    outStr=runFsck(conf,1,false,"/");
    while (!outStr.contains(NamenodeFsck.CORRUPT_STATUS)) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException ignore) {
      }
      outStr=runFsck(conf,1,false,"/");
    }
    for (int i=0; i < MAX_MOVE_TRIES; i++) {
      outStr=runFsck(conf,1,true,"/","-move");
      assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS));
      String[] newFileNames=util.getFileNames(topDir);
      boolean found=false;
      for (      String f : newFileNames) {
        if (f.equals(corruptFileName)) {
          found=true;
          break;
        }
      }
      assertTrue(found);
    }
    outStr=runFsck(conf,1,true,"/","-move","-delete");
    assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS));
    outStr=runFsck(conf,0,true,"/");
    assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
    util.cleanup(fs,topDir);
    if (fs != null) {
      try {
        fs.close();
      }
 catch (      Exception e) {
      }
    }
    cluster.shutdown();
  }
  finally {
    if (fs != null) {
      try {
        fs.close();
      }
 catch (      Exception e) {
      }
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
