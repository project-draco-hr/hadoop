{
  DFSTestUtil util=new DFSTestUtil.Builder().setName("TestFsck").setNumFiles(20).build();
  MiniDFSCluster cluster=null;
  FileSystem fs=null;
  try {
    Configuration conf=new HdfsConfiguration();
    final long precision=1L;
    conf.setLong(DFSConfigKeys.DFS_NAMENODE_ACCESSTIME_PRECISION_KEY,precision);
    conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,10000L);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(4).build();
    fs=cluster.getFileSystem();
    final String fileName="/srcdat";
    util.createFiles(fs,fileName);
    util.waitReplication(fs,fileName,(short)3);
    final Path file=new Path(fileName);
    long aTime=fs.getFileStatus(file).getAccessTime();
    Thread.sleep(precision);
    setupAuditLogs();
    String outStr=runFsck(conf,0,true,"/");
    verifyAuditLogs();
    assertEquals(aTime,fs.getFileStatus(file).getAccessTime());
    System.out.println(outStr);
    assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
    if (fs != null) {
      try {
        fs.close();
      }
 catch (      Exception e) {
      }
    }
    cluster.shutdown();
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).build();
    outStr=runFsck(conf,1,true,"/");
    assertTrue(outStr.contains(NamenodeFsck.CORRUPT_STATUS));
    System.out.println(outStr);
    cluster.startDataNodes(conf,4,true,null,null);
    cluster.waitActive();
    cluster.waitClusterUp();
    fs=cluster.getFileSystem();
    util.cleanup(fs,"/srcdat");
  }
  finally {
    if (fs != null) {
      try {
        fs.close();
      }
 catch (      Exception e) {
      }
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
