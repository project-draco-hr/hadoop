{
  final DFSTestUtil util=new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(20).build();
  final Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,10000L);
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(4).build();
    final MiniDFSCluster c2=cluster;
    final String dir="/dfsck";
    final Path dirpath=new Path(dir);
    final FileSystem fs=c2.getFileSystem();
    util.createFiles(fs,dir);
    util.waitReplication(fs,dir,(short)3);
    fs.setPermission(dirpath,new FsPermission((short)0700));
    UserGroupInformation fakeUGI=UserGroupInformation.createUserForTesting("ProbablyNotARealUserName",new String[]{"ShangriLa"});
    fakeUGI.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        System.out.println(runFsck(conf,-1,true,dir));
        return null;
      }
    }
);
    fs.setPermission(dirpath,new FsPermission((short)0777));
    fakeUGI.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final String outStr=runFsck(conf,0,true,dir);
        System.out.println(outStr);
        assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
        return null;
      }
    }
);
    util.cleanup(fs,dir);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
