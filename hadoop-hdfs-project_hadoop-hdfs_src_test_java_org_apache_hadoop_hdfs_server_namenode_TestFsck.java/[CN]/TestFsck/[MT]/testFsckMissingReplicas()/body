{
  final short REPL_FACTOR=2;
  final short NUM_REPLICAS=1;
  final short NUM_BLOCKS=3;
  final long blockSize=512;
  Configuration conf=new Configuration();
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
  MiniDFSCluster cluster=null;
  DistributedFileSystem dfs=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_REPLICAS).build();
    assertNotNull("Failed Cluster Creation",cluster);
    cluster.waitClusterUp();
    dfs=cluster.getFileSystem();
    assertNotNull("Failed to get FileSystem",dfs);
    final String pathString=new String("/testfile");
    final Path path=new Path(pathString);
    long fileLen=blockSize * NUM_BLOCKS;
    DFSTestUtil.createFile(dfs,path,fileLen,REPL_FACTOR,1);
    NameNode namenode=cluster.getNameNode();
    NetworkTopology nettop=cluster.getNamesystem().getBlockManager().getDatanodeManager().getNetworkTopology();
    Map<String,String[]> pmap=new HashMap<String,String[]>();
    Writer result=new StringWriter();
    PrintWriter out=new PrintWriter(result,true);
    InetAddress remoteAddress=InetAddress.getLocalHost();
    NamenodeFsck fsck=new NamenodeFsck(conf,namenode,nettop,pmap,out,NUM_REPLICAS,remoteAddress);
    final HdfsFileStatus file=namenode.getRpcServer().getFileInfo(pathString);
    assertNotNull(file);
    Result replRes=new ReplicationResult(conf);
    Result ecRes=new ErasureCodingResult(conf);
    fsck.check(pathString,file,replRes,ecRes);
    System.out.println(result.toString());
    assertEquals(replRes.missingReplicas,(NUM_BLOCKS * REPL_FACTOR) - (NUM_BLOCKS * NUM_REPLICAS));
    assertEquals(replRes.numExpectedReplicas,NUM_BLOCKS * REPL_FACTOR);
  }
  finally {
    if (dfs != null) {
      dfs.close();
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
