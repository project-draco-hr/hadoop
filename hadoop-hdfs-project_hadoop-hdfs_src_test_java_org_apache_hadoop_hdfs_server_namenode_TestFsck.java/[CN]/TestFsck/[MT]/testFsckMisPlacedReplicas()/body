{
  final short REPL_FACTOR=2;
  short NUM_DN=2;
  final short NUM_BLOCKS=3;
  final long blockSize=512;
  String[] racks={"/rack1","/rack1"};
  String[] hosts={"host1","host2"};
  Configuration conf=new Configuration();
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,blockSize);
  MiniDFSCluster cluster=null;
  DistributedFileSystem dfs=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DN).hosts(hosts).racks(racks).build();
    assertNotNull("Failed Cluster Creation",cluster);
    cluster.waitClusterUp();
    dfs=cluster.getFileSystem();
    assertNotNull("Failed to get FileSystem",dfs);
    final String pathString=new String("/testfile");
    final Path path=new Path(pathString);
    long fileLen=blockSize * NUM_BLOCKS;
    DFSTestUtil.createFile(dfs,path,fileLen,REPL_FACTOR,1);
    NameNode namenode=cluster.getNameNode();
    NetworkTopology nettop=cluster.getNamesystem().getBlockManager().getDatanodeManager().getNetworkTopology();
    nettop.add(DFSTestUtil.getDatanodeDescriptor("/rack2","/host3"));
    NUM_DN++;
    Map<String,String[]> pmap=new HashMap<String,String[]>();
    Writer result=new StringWriter();
    PrintWriter out=new PrintWriter(result,true);
    InetAddress remoteAddress=InetAddress.getLocalHost();
    NamenodeFsck fsck=new NamenodeFsck(conf,namenode,nettop,pmap,out,NUM_DN,remoteAddress);
    final HdfsFileStatus file=namenode.getRpcServer().getFileInfo(pathString);
    assertNotNull(file);
    Result res=new Result(conf);
    fsck.check(pathString,file,res);
    assertEquals(res.numMisReplicatedBlocks,NUM_BLOCKS);
  }
  finally {
    if (dfs != null) {
      dfs.close();
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
