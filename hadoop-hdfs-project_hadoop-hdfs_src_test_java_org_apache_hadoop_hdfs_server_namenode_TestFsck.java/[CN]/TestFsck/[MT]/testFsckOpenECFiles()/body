{
  DFSTestUtil util=new DFSTestUtil.Builder().setName("TestFsckECFile").setNumFiles(4).build();
  Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,10000L);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(10).build();
  FileSystem fs=null;
  try {
    String topDir="/myDir";
    byte[] randomBytes=new byte[3000000];
    int seed=42;
    new Random(seed).nextBytes(randomBytes);
    cluster.waitActive();
    fs=cluster.getFileSystem();
    util.createFiles(fs,topDir);
    cluster.getFileSystem().getClient().setErasureCodingPolicy(topDir,null);
    DFSTestUtil.createFile(fs,new Path(topDir,"ecFile"),1024,(short)1,0L);
    Path openFile=new Path(topDir + "/openECFile");
    FSDataOutputStream out=fs.create(openFile);
    int writeCount=0;
    while (writeCount != 300) {
      out.write(randomBytes);
      writeCount++;
    }
    runFsck(conf,0,true,topDir,"-files","-blocks","-openforwrite");
    String outStr=runFsck(conf,0,true,openFile.toString(),"-files","-blocks","-openforwrite");
    assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
    assertTrue(outStr.contains("OPENFORWRITE"));
    assertTrue(outStr.contains("Live_repl=9"));
    assertTrue(outStr.contains("Expected_repl=9"));
    outStr=runFsck(conf,0,true,openFile.toString(),"-files","-blocks","-locations","-openforwrite","-replicaDetails");
    assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
    assertTrue(outStr.contains("OPENFORWRITE"));
    assertTrue(outStr.contains("Live_repl=9"));
    assertTrue(outStr.contains("Expected_repl=9"));
    assertTrue(outStr.contains("Under Construction Block:"));
    out.close();
    outStr=runFsck(conf,0,true,openFile.toString(),"-files","-blocks","-locations","-racks","-replicaDetails");
    assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS));
    assertFalse(outStr.contains("OPENFORWRITE"));
    assertFalse(outStr.contains("Under Construction Block:"));
    assertFalse(outStr.contains("Expected_repl=9"));
    assertTrue(outStr.contains("Live_repl=9"));
    util.cleanup(fs,topDir);
  }
  finally {
    if (fs != null) {
      try {
        fs.close();
      }
 catch (      Exception e) {
      }
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
