{
  CountDownLatch latch=new CountDownLatch(1);
  final Dispatcher dispatcher=new MyAsyncDispatch(latch,JobEventType.JOB_KILL);
  MRApp app=new MRApp(1,1,false,this.getClass().getName(),true){
    @Override public Dispatcher createDispatcher(){
      return dispatcher;
    }
  }
;
  Job job=app.submit(new Configuration());
  JobId jobId=app.getJobId();
  app.waitForState(job,JobState.RUNNING);
  Assert.assertEquals("Num tasks not correct",2,job.getTasks().size());
  Iterator<Task> it=job.getTasks().values().iterator();
  Task mapTask=it.next();
  Task reduceTask=it.next();
  app.waitForState(mapTask,TaskState.RUNNING);
  app.waitForState(reduceTask,TaskState.RUNNING);
  TaskAttempt mapAttempt=mapTask.getAttempts().values().iterator().next();
  app.waitForState(mapAttempt,TaskAttemptState.RUNNING);
  TaskAttempt reduceAttempt=reduceTask.getAttempts().values().iterator().next();
  app.waitForState(reduceAttempt,TaskAttemptState.RUNNING);
  app.getContext().getEventHandler().handle(new JobEvent(jobId,JobEventType.JOB_KILL));
  app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt.getID(),TaskAttemptEventType.TA_DONE));
  latch.countDown();
  app.waitForInternalState((JobImpl)job,JobStateInternal.KILLED);
}
