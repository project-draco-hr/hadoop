{
  final Dispatcher dispatcher=new AsyncDispatcher(){
    private TaskAttemptEvent cachedKillEvent;
    @Override protected void dispatch(    Event event){
      if (event instanceof TaskAttemptEvent) {
        TaskAttemptEvent killEvent=(TaskAttemptEvent)event;
        if (killEvent.getType() == TaskAttemptEventType.TA_KILL) {
          TaskAttemptId taID=killEvent.getTaskAttemptID();
          if (taID.getTaskId().getTaskType() == TaskType.REDUCE && taID.getTaskId().getId() == 0 && taID.getId() == 0) {
            super.dispatch(new TaskAttemptEvent(taID,TaskAttemptEventType.TA_DONE));
            super.dispatch(new TaskAttemptEvent(taID,TaskAttemptEventType.TA_CONTAINER_CLEANED));
            super.dispatch(new TaskTAttemptEvent(taID,TaskEventType.T_ATTEMPT_SUCCEEDED));
            this.cachedKillEvent=killEvent;
            return;
          }
        }
      }
 else       if (event instanceof TaskEvent) {
        TaskEvent taskEvent=(TaskEvent)event;
        if (taskEvent.getType() == TaskEventType.T_ATTEMPT_SUCCEEDED && this.cachedKillEvent != null) {
          super.dispatch(this.cachedKillEvent);
          return;
        }
      }
      super.dispatch(event);
    }
  }
;
  MRApp app=new MRApp(1,1,false,this.getClass().getName(),true){
    @Override public Dispatcher createDispatcher(){
      return dispatcher;
    }
  }
;
  Job job=app.submit(new Configuration());
  JobId jobId=app.getJobId();
  app.waitForState(job,JobState.RUNNING);
  Assert.assertEquals("Num tasks not correct",2,job.getTasks().size());
  Iterator<Task> it=job.getTasks().values().iterator();
  Task mapTask=it.next();
  Task reduceTask=it.next();
  app.waitForState(mapTask,TaskState.RUNNING);
  app.waitForState(reduceTask,TaskState.RUNNING);
  TaskAttempt mapAttempt=mapTask.getAttempts().values().iterator().next();
  app.waitForState(mapAttempt,TaskAttemptState.RUNNING);
  TaskAttempt reduceAttempt=reduceTask.getAttempts().values().iterator().next();
  app.waitForState(reduceAttempt,TaskAttemptState.RUNNING);
  app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt.getID(),TaskAttemptEventType.TA_DONE));
  app.waitForState(mapTask,TaskState.SUCCEEDED);
  app.getContext().getEventHandler().handle(new JobEvent(jobId,JobEventType.JOB_KILL));
  app.waitForInternalState((JobImpl)job,JobStateInternal.KILLED);
}
