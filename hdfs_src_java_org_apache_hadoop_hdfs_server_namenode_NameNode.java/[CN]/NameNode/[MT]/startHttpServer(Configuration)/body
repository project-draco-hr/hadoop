{
  final InetSocketAddress infoSocAddr=getHttpServerAddress(conf);
  final String infoHost=infoSocAddr.getHostName();
  if (UserGroupInformation.isSecurityEnabled()) {
    String httpsUser=SecurityUtil.getServerPrincipal(conf.get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY),infoHost);
    if (httpsUser == null) {
      LOG.warn(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY + " not defined in config. Starting http server as " + SecurityUtil.getServerPrincipal(conf.get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),rpcAddress.getHostName())+ ": Kerberized SSL may be not function correctly.");
    }
 else {
      LOG.info("Logging in as " + httpsUser + " to start http server.");
      SecurityUtil.login(conf,DFSConfigKeys.DFS_NAMENODE_KEYTAB_FILE_KEY,DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY,infoHost);
    }
  }
  UserGroupInformation ugi=UserGroupInformation.getLoginUser();
  try {
    this.httpServer=ugi.doAs(new PrivilegedExceptionAction<HttpServer>(){
      @Override public HttpServer run() throws IOException, InterruptedException {
        int infoPort=infoSocAddr.getPort();
        httpServer=new HttpServer("hdfs",infoHost,infoPort,infoPort == 0,conf,new AccessControlList(conf.get(DFSConfigKeys.DFS_ADMIN," ")));
        boolean certSSL=conf.getBoolean("dfs.https.enable",false);
        boolean useKrb=UserGroupInformation.isSecurityEnabled();
        if (certSSL || useKrb) {
          boolean needClientAuth=conf.getBoolean(DFSConfigKeys.DFS_CLIENT_HTTPS_NEED_AUTH_KEY,DFSConfigKeys.DFS_CLIENT_HTTPS_NEED_AUTH_DEFAULT);
          InetSocketAddress secInfoSocAddr=NetUtils.createSocketAddr(conf.get(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_DEFAULT));
          Configuration sslConf=new HdfsConfiguration(false);
          if (certSSL) {
            sslConf.addResource(conf.get("dfs.https.server.keystore.resource","ssl-server.xml"));
          }
          httpServer.addSslListener(secInfoSocAddr,sslConf,needClientAuth,useKrb);
          InetSocketAddress datanodeSslPort=NetUtils.createSocketAddr(conf.get("dfs.datanode.https.address",infoHost + ":" + 50475));
          httpServer.setAttribute("datanode.https.port",datanodeSslPort.getPort());
        }
        httpServer.setAttribute("name.node",NameNode.this);
        httpServer.setAttribute(NAMENODE_ADDRESS_ATTRIBUTE_KEY,getNameNodeAddress());
        httpServer.setAttribute("name.system.image",getFSImage());
        httpServer.setAttribute(JspHelper.CURRENT_CONF,conf);
        httpServer.addInternalServlet("getDelegationToken",GetDelegationTokenServlet.PATH_SPEC,GetDelegationTokenServlet.class,true);
        httpServer.addInternalServlet("renewDelegationToken",RenewDelegationTokenServlet.PATH_SPEC,RenewDelegationTokenServlet.class,true);
        httpServer.addInternalServlet("cancelDelegationToken",CancelDelegationTokenServlet.PATH_SPEC,CancelDelegationTokenServlet.class,true);
        httpServer.addInternalServlet("fsck","/fsck",FsckServlet.class,true);
        httpServer.addInternalServlet("getimage","/getimage",GetImageServlet.class,true);
        httpServer.addInternalServlet("listPaths","/listPaths/*",ListPathsServlet.class,false);
        httpServer.addInternalServlet("data","/data/*",FileDataServlet.class,false);
        httpServer.addInternalServlet("checksum","/fileChecksum/*",FileChecksumServlets.RedirectServlet.class,false);
        httpServer.addInternalServlet("contentSummary","/contentSummary/*",ContentSummaryServlet.class,false);
        httpServer.start();
        infoPort=httpServer.getPort();
        httpAddress=new InetSocketAddress(infoHost,infoPort);
        setHttpServerAddress(conf);
        LOG.info(getRole() + " Web-server up at: " + httpAddress);
        return httpServer;
      }
    }
);
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
 finally {
    if (UserGroupInformation.isSecurityEnabled() && conf.get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY) != null) {
      LOG.info("Logging back in as " + SecurityUtil.getServerPrincipal(conf.get(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY),rpcAddress.getHostName()) + " following http server start.");
      SecurityUtil.login(conf,DFSConfigKeys.DFS_NAMENODE_KEYTAB_FILE_KEY,DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY,rpcAddress.getHostName());
    }
  }
}
