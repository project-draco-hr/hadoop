{
  if (!conf.getBoolean(DFSConfigKeys.DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY,DFSConfigKeys.DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_DEFAULT)) {
    throw new IOException("The option " + DFSConfigKeys.DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY + " is set to false for this filesystem, so it "+ "cannot be formatted. You will need to set "+ DFSConfigKeys.DFS_NAMENODE_SUPPORT_ALLOW_FORMAT_KEY+ " parameter "+ "to true in order to format this filesystem");
  }
  Collection<URI> dirsToFormat=FSNamesystem.getNamespaceDirs(conf);
  Collection<URI> editDirsToFormat=FSNamesystem.getNamespaceEditsDirs(conf);
  for (Iterator<URI> it=dirsToFormat.iterator(); it.hasNext(); ) {
    File curDir=new File(it.next().getPath());
    if (!curDir.exists() || (curDir.isDirectory() && FileUtil.listFiles(curDir).length == 0))     continue;
    if (isConfirmationNeeded) {
      if (!confirmPrompt("Re-format filesystem in " + curDir + " ?")) {
        System.err.println("Format aborted in " + curDir);
        return true;
      }
    }
  }
  String clusterId=StartupOption.FORMAT.getClusterId();
  if (clusterId == null || clusterId.equals("")) {
    clusterId=NNStorage.newClusterID();
  }
  System.out.println("Formatting using clusterid: " + clusterId);
  FSImage fsImage=new FSImage(dirsToFormat,editDirsToFormat);
  FSNamesystem nsys=new FSNamesystem(fsImage,conf);
  nsys.dir.fsImage.getStorage().format(clusterId);
  return false;
}
