{
  while (alternates != null && nextLocation < alternates.length) {
    try {
      int idx=nextLocation++;
      long corruptOffset=(offset / stat.getBlockSize()) * stat.getBlockSize();
      Configuration clientConf=new Configuration(conf);
      Class<?> clazz=conf.getClass("fs.raid.underlyingfs.impl",DistributedFileSystem.class);
      clientConf.set("fs.hdfs.impl",clazz.getName());
      clientConf.setBoolean("fs.hdfs.impl.disable.cache",true);
      Path npath=RaidNode.unRaidCorruptBlock(clientConf,path,alternates[idx].destPath,alternates[idx].createDecoder(),stripeLength,corruptOffset);
      if (npath == null)       continue;
      try {
        String outdir=conf.get("fs.raid.recoverylogdir");
        if (outdir != null) {
          DateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss");
          java.util.Date date=new java.util.Date();
          String fname=path.getName() + dateFormat.format(date) + (new Random()).nextInt()+ ".txt";
          Path outputunraid=new Path(outdir,fname);
          FileSystem fs=outputunraid.getFileSystem(conf);
          FSDataOutputStream dout=fs.create(outputunraid);
          PrintStream ps=new PrintStream(dout);
          ps.println("Recovery attempt log");
          ps.println("Source path : " + path);
          ps.println("Alternate path : " + alternates[idx].destPath);
          ps.println("Stripe lentgh : " + stripeLength);
          ps.println("Corrupt offset : " + corruptOffset);
          String output=(npath == null) ? "UNSUCCESSFUL" : npath.toString();
          ps.println("Output from unRaid : " + output);
          ps.close();
        }
      }
 catch (      Exception exc) {
        LOG.info("Error while creating recovery log: " + exc);
      }
      closeCurrentStream();
      LOG.info("Using block at offset " + corruptOffset + " from "+ npath);
      currentBlock.path=npath;
      currentBlock.actualFileOffset=0;
      openCurrentStream();
      return;
    }
 catch (    Exception e) {
      LOG.info("Error in using alternate path " + path + ". "+ e+ " Ignoring...");
    }
  }
  throw curexp;
}
