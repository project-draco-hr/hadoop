{
  DFSTestUtil.createFile(fs,TEST_FILE_PATH,30 * SMALL_BLOCK,(short)1,1L);
  banner("rolling NN1's edit log, forcing catch-up");
  HATestUtil.waitForStandbyToCatchUp(nn1,nn2);
  nn1.getRpcServer().setReplication(TEST_FILE,(short)2);
  while (BlockManagerTestUtil.getComputedDatanodeWork(nn1.getNamesystem().getBlockManager()) > 0) {
    LOG.info("Getting more replication work computed");
  }
  BlockManager bm1=nn1.getNamesystem().getBlockManager();
  while (bm1.getPendingReplicationBlocksCount() > 0) {
    BlockManagerTestUtil.updateState(bm1);
    cluster.triggerHeartbeats();
    Thread.sleep(1000);
  }
  banner("triggering BRs");
  cluster.triggerBlockReports();
  nn1.getRpcServer().setReplication(TEST_FILE,(short)1);
  banner("computing invalidation on nn1");
  BlockManagerTestUtil.computeInvalidationWork(nn1.getNamesystem().getBlockManager());
  doMetasave(nn1);
  banner("computing invalidation on nn2");
  BlockManagerTestUtil.computeInvalidationWork(nn2.getNamesystem().getBlockManager());
  doMetasave(nn2);
  banner("Metadata immediately before failover");
  doMetasave(nn2);
  banner("Failing to NN2 but let NN1 continue to think it's active");
  NameNodeAdapter.abortEditLogs(nn1);
  NameNodeAdapter.enterSafeMode(nn1,false);
  BlockManagerTestUtil.computeInvalidationWork(nn2.getNamesystem().getBlockManager());
  cluster.transitionToActive(1);
  assertEquals(1,nn2.getRpcServer().getFileInfo(TEST_FILE).getReplication());
  banner("Metadata immediately after failover");
  doMetasave(nn2);
  banner("Triggering heartbeats and block reports so that fencing is completed");
  cluster.triggerHeartbeats();
  cluster.triggerBlockReports();
  banner("Metadata after nodes have all block-reported");
  doMetasave(nn2);
  assertEquals(0,nn2.getNamesystem().getPostponedMisreplicatedBlocks());
  BlockManagerTestUtil.computeInvalidationWork(nn2.getNamesystem().getBlockManager());
  HATestUtil.waitForNNToIssueDeletions(nn2);
  cluster.triggerHeartbeats();
  HATestUtil.waitForDNDeletions(cluster);
  cluster.triggerDeletionReports();
  assertEquals(0,nn2.getNamesystem().getUnderReplicatedBlocks());
  assertEquals(0,nn2.getNamesystem().getPendingReplicationBlocks());
  banner("Making sure the file is still readable");
  FileSystem fs2=cluster.getFileSystem(1);
  DFSTestUtil.readFile(fs2,TEST_FILE_PATH);
}
