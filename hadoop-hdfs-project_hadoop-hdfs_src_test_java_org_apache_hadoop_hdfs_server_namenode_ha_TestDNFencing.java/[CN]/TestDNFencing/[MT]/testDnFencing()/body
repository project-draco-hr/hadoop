{
  DFSTestUtil.createFile(fs,TEST_FILE_PATH,30 * SMALL_BLOCK,(short)3,1L);
  ExtendedBlock block=DFSTestUtil.getFirstBlock(fs,TEST_FILE_PATH);
  nn1.getRpcServer().setReplication(TEST_FILE,(short)1);
  BlockManagerTestUtil.computeInvalidationWork(nn1.getNamesystem().getBlockManager());
  cluster.triggerHeartbeats();
  banner("Failing to NN2 but let NN1 continue to think it's active");
  NameNodeAdapter.abortEditLogs(nn1);
  NameNodeAdapter.enterSafeMode(nn1,false);
  cluster.transitionToActive(1);
  assertEquals(1,nn2.getRpcServer().getFileInfo(TEST_FILE).getReplication());
  banner("NN2 Metadata immediately after failover");
  doMetasave(nn2);
  assertEquals(30,nn2.getNamesystem().getPostponedMisreplicatedBlocks());
  banner("Triggering heartbeats and block reports so that fencing is completed");
  cluster.triggerHeartbeats();
  cluster.triggerBlockReports();
  banner("Metadata after nodes have all block-reported");
  doMetasave(nn2);
  assertEquals(0,nn2.getNamesystem().getPostponedMisreplicatedBlocks());
  BlockManagerTestUtil.computeInvalidationWork(nn2.getNamesystem().getBlockManager());
  cluster.triggerHeartbeats();
  HATestUtil.waitForDNDeletions(cluster);
  cluster.triggerDeletionReports();
  assertEquals(0,nn2.getNamesystem().getUnderReplicatedBlocks());
  assertEquals(0,nn2.getNamesystem().getPendingReplicationBlocks());
  banner("Making sure the file is still readable");
  FileSystem fs2=cluster.getFileSystem(1);
  DFSTestUtil.readFile(fs2,TEST_FILE_PATH);
  banner("Waiting for the actual block files to get deleted from DNs.");
  waitForTrueReplication(cluster,block,1);
}
