{
  CommandLineParser parser=new CustomParser();
  CommandLine command;
  try {
    command=parser.parse(cliOptions,args,true);
  }
 catch (  ParseException e) {
    throw new IllegalArgumentException("Unable to parse arguments. " + Arrays.toString(args),e);
  }
  DistCpOptions option=parseSourceAndTargetPaths(command);
  if (command.hasOption(DistCpOptionSwitch.IGNORE_FAILURES.getSwitch())) {
    option.setIgnoreFailures(true);
  }
  if (command.hasOption(DistCpOptionSwitch.ATOMIC_COMMIT.getSwitch())) {
    option.setAtomicCommit(true);
  }
  if (command.hasOption(DistCpOptionSwitch.WORK_PATH.getSwitch()) && option.shouldAtomicCommit()) {
    String workPath=getVal(command,DistCpOptionSwitch.WORK_PATH.getSwitch());
    if (workPath != null && !workPath.isEmpty()) {
      option.setAtomicWorkPath(new Path(workPath));
    }
  }
 else   if (command.hasOption(DistCpOptionSwitch.WORK_PATH.getSwitch())) {
    throw new IllegalArgumentException("-tmp work-path can only be specified along with -atomic");
  }
  if (command.hasOption(DistCpOptionSwitch.LOG_PATH.getSwitch())) {
    option.setLogPath(new Path(getVal(command,DistCpOptionSwitch.LOG_PATH.getSwitch())));
  }
  if (command.hasOption(DistCpOptionSwitch.SYNC_FOLDERS.getSwitch())) {
    option.setSyncFolder(true);
  }
  if (command.hasOption(DistCpOptionSwitch.OVERWRITE.getSwitch())) {
    option.setOverwrite(true);
  }
  if (command.hasOption(DistCpOptionSwitch.APPEND.getSwitch())) {
    option.setAppend(true);
  }
  if (command.hasOption(DistCpOptionSwitch.DELETE_MISSING.getSwitch())) {
    option.setDeleteMissing(true);
  }
  if (command.hasOption(DistCpOptionSwitch.SKIP_CRC.getSwitch())) {
    option.setSkipCRC(true);
  }
  if (command.hasOption(DistCpOptionSwitch.BLOCKING.getSwitch())) {
    option.setBlocking(false);
  }
  parseBandwidth(command,option);
  parseNumListStatusThreads(command,option);
  parseMaxMaps(command,option);
  if (command.hasOption(DistCpOptionSwitch.COPY_STRATEGY.getSwitch())) {
    option.setCopyStrategy(getVal(command,DistCpOptionSwitch.COPY_STRATEGY.getSwitch()));
  }
  parsePreserveStatus(command,option);
  if (command.hasOption(DistCpOptionSwitch.DIFF.getSwitch())) {
    String[] snapshots=getVals(command,DistCpOptionSwitch.DIFF.getSwitch());
    Preconditions.checkArgument(snapshots != null && snapshots.length == 2,"Must provide both the starting and ending snapshot names");
    option.setUseDiff(true,snapshots[0],snapshots[1]);
  }
  parseFileLimit(command);
  parseSizeLimit(command);
  if (command.hasOption(DistCpOptionSwitch.FILTERS.getSwitch())) {
    option.setFiltersFile(getVal(command,DistCpOptionSwitch.FILTERS.getSwitch()));
  }
  return option;
}
