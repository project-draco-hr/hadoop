{
  MiniDFSCluster cluster=null;
  int HEARTBEAT_INTERVAL=1;
  HostsFileWriter hostsFileWriter=new HostsFileWriter();
  hostsFileWriter.initialize(config,"work-dir/restartnn");
  byte b[]={127,0,0,1};
  InetAddress inetAddress=InetAddress.getByAddress(b);
  hostsFileWriter.initIncludeHosts(new String[]{inetAddress.getHostName()});
  int numDatanodes=1;
  try {
    cluster=new MiniDFSCluster.Builder(config).numDataNodes(numDatanodes).setupHostsFile(true).build();
    cluster.waitActive();
    cluster.restartNameNode();
    NamenodeProtocols nn=cluster.getNameNodeRpc();
    assertNotNull(nn);
    assertTrue(cluster.isDataNodeUp());
    DatanodeInfo[] info=nn.getDatanodeReport(DatanodeReportType.LIVE);
    for (int i=0; i < 5 && info.length != numDatanodes; i++) {
      Thread.sleep(HEARTBEAT_INTERVAL * 1000);
      info=nn.getDatanodeReport(DatanodeReportType.LIVE);
    }
    assertEquals("Number of live nodes should be " + numDatanodes,numDatanodes,info.length);
  }
 catch (  IOException e) {
    fail(StringUtils.stringifyException(e));
    throw e;
  }
 finally {
    if (cluster != null) {
      cluster.shutdown();
    }
    hostsFileWriter.cleanup();
  }
}
