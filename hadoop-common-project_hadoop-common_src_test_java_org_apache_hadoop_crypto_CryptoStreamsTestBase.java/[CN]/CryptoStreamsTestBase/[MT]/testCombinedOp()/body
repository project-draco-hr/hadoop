{
  OutputStream out=getOutputStream(defaultBufferSize);
  writeData(out);
  final int len1=dataLen / 8;
  final int len2=dataLen / 10;
  InputStream in=getInputStream(defaultBufferSize);
  byte[] readData=new byte[len1];
  readAll(in,readData,0,len1);
  byte[] expectedData=new byte[len1];
  System.arraycopy(data,0,expectedData,0,len1);
  Assert.assertArrayEquals(readData,expectedData);
  long pos=((Seekable)in).getPos();
  Assert.assertEquals(len1,pos);
  ((Seekable)in).seek(pos + len2);
  long n=in.skip(len2);
  Assert.assertEquals(len2,n);
  positionedReadCheck(in,dataLen / 4);
  pos=((Seekable)in).getPos();
  Assert.assertEquals(len1 + len2 + len2,pos);
  ByteBuffer buf=ByteBuffer.allocate(len1);
  int nRead=((ByteBufferReadable)in).read(buf);
  Assert.assertEquals(nRead,buf.position());
  readData=new byte[nRead];
  buf.rewind();
  buf.get(readData);
  expectedData=new byte[nRead];
  System.arraycopy(data,(int)pos,expectedData,0,nRead);
  Assert.assertArrayEquals(readData,expectedData);
  long lastPos=pos;
  pos=((Seekable)in).getPos();
  Assert.assertEquals(lastPos + nRead,pos);
  positionedReadCheck(in,dataLen / 3);
  readData=new byte[len1];
  readAll(in,readData,0,len1);
  expectedData=new byte[len1];
  System.arraycopy(data,(int)pos,expectedData,0,len1);
  Assert.assertArrayEquals(readData,expectedData);
  lastPos=pos;
  pos=((Seekable)in).getPos();
  Assert.assertEquals(lastPos + len1,pos);
  buf=ByteBuffer.allocate(len1);
  nRead=((ByteBufferReadable)in).read(buf);
  Assert.assertEquals(nRead,buf.position());
  readData=new byte[nRead];
  buf.rewind();
  buf.get(readData);
  expectedData=new byte[nRead];
  System.arraycopy(data,(int)pos,expectedData,0,nRead);
  Assert.assertArrayEquals(readData,expectedData);
  lastPos=pos;
  pos=((Seekable)in).getPos();
  Assert.assertEquals(lastPos + nRead,pos);
  ((Seekable)in).seek(dataLen);
  buf.clear();
  n=((ByteBufferReadable)in).read(buf);
  Assert.assertEquals(n,-1);
  in.close();
}
