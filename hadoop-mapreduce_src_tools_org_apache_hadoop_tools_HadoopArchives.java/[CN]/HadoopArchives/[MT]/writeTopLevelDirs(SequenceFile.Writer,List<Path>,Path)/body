{
  List<Path> justDirs=new ArrayList<Path>();
  for (  Path p : paths) {
    if (!p.getFileSystem(getConf()).isFile(p)) {
      justDirs.add(new Path(p.toUri().getPath()));
    }
 else {
      justDirs.add(new Path(p.getParent().toUri().getPath()));
    }
  }
  TreeMap<String,HashSet<String>> allpaths=new TreeMap<String,HashSet<String>>();
  Path deepest=largestDepth(paths);
  Path root=new Path(Path.SEPARATOR);
  for (int i=parentPath.depth(); i < deepest.depth(); i++) {
    List<Path> parents=new ArrayList<Path>();
    for (    Path p : justDirs) {
      if (p.compareTo(root) == 0) {
      }
 else {
        Path parent=p.getParent();
        if (null != parent) {
          if (allpaths.containsKey(parent.toString())) {
            HashSet<String> children=allpaths.get(parent.toString());
            children.add(p.getName());
          }
 else {
            HashSet<String> children=new HashSet<String>();
            children.add(p.getName());
            allpaths.put(parent.toString(),children);
          }
          parents.add(parent);
        }
      }
    }
    justDirs=parents;
  }
  Set<Map.Entry<String,HashSet<String>>> keyVals=allpaths.entrySet();
  for (  Map.Entry<String,HashSet<String>> entry : keyVals) {
    final Path relPath=relPathToRoot(new Path(entry.getKey()),parentPath);
    if (relPath != null) {
      final String[] children=new String[entry.getValue().size()];
      int i=0;
      for (      String child : entry.getValue()) {
        children[i++]=child;
      }
      append(srcWriter,0L,relPath.toString(),children);
    }
  }
}
