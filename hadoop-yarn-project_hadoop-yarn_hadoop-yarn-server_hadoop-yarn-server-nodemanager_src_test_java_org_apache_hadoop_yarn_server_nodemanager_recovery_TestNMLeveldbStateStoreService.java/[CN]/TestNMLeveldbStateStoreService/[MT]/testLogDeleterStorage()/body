{
  RecoveredLogDeleterState state=stateStore.loadLogDeleterState();
  assertTrue(state.getLogDeleterMap().isEmpty());
  final ApplicationId appId1=ApplicationId.newInstance(1,1);
  LogDeleterProto proto1=LogDeleterProto.newBuilder().setUser("user1").setDeletionTime(1234).build();
  stateStore.storeLogDeleter(appId1,proto1);
  restartStateStore();
  state=stateStore.loadLogDeleterState();
  assertEquals(1,state.getLogDeleterMap().size());
  assertEquals(proto1,state.getLogDeleterMap().get(appId1));
  final ApplicationId appId2=ApplicationId.newInstance(2,2);
  LogDeleterProto proto2=LogDeleterProto.newBuilder().setUser("user2").setDeletionTime(5678).build();
  stateStore.storeLogDeleter(appId2,proto2);
  restartStateStore();
  state=stateStore.loadLogDeleterState();
  assertEquals(2,state.getLogDeleterMap().size());
  assertEquals(proto1,state.getLogDeleterMap().get(appId1));
  assertEquals(proto2,state.getLogDeleterMap().get(appId2));
  stateStore.removeLogDeleter(appId1);
  restartStateStore();
  state=stateStore.loadLogDeleterState();
  assertEquals(1,state.getLogDeleterMap().size());
  assertEquals(proto2,state.getLogDeleterMap().get(appId2));
  stateStore.removeLogDeleter(appId2);
  restartStateStore();
  state=stateStore.loadLogDeleterState();
  assertTrue(state.getLogDeleterMap().isEmpty());
}
