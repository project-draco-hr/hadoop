{
  RecoveredApplicationsState state=stateStore.loadApplicationsState();
  assertTrue(state.getApplications().isEmpty());
  assertTrue(state.getFinishedApplications().isEmpty());
  final ApplicationId appId1=ApplicationId.newInstance(1234,1);
  ContainerManagerApplicationProto.Builder builder=ContainerManagerApplicationProto.newBuilder();
  builder.setId(((ApplicationIdPBImpl)appId1).getProto());
  builder.setUser("user1");
  ContainerManagerApplicationProto appProto1=builder.build();
  stateStore.storeApplication(appId1,appProto1);
  restartStateStore();
  state=stateStore.loadApplicationsState();
  assertEquals(1,state.getApplications().size());
  assertEquals(appProto1,state.getApplications().get(0));
  assertTrue(state.getFinishedApplications().isEmpty());
  stateStore.storeFinishedApplication(appId1);
  final ApplicationId appId2=ApplicationId.newInstance(1234,2);
  builder=ContainerManagerApplicationProto.newBuilder();
  builder.setId(((ApplicationIdPBImpl)appId2).getProto());
  builder.setUser("user2");
  ContainerManagerApplicationProto appProto2=builder.build();
  stateStore.storeApplication(appId2,appProto2);
  restartStateStore();
  state=stateStore.loadApplicationsState();
  assertEquals(2,state.getApplications().size());
  assertTrue(state.getApplications().contains(appProto1));
  assertTrue(state.getApplications().contains(appProto2));
  assertEquals(1,state.getFinishedApplications().size());
  assertEquals(appId1,state.getFinishedApplications().get(0));
  stateStore.storeFinishedApplication(appId2);
  stateStore.removeApplication(appId2);
  restartStateStore();
  state=stateStore.loadApplicationsState();
  assertEquals(1,state.getApplications().size());
  assertEquals(appProto1,state.getApplications().get(0));
  assertEquals(1,state.getFinishedApplications().size());
  assertEquals(appId1,state.getFinishedApplications().get(0));
}
