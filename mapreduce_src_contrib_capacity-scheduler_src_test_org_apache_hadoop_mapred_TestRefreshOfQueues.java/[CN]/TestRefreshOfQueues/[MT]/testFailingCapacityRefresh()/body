{
  JobQueueInfo[] queues=TestQueueManagerRefresh.getSimpleQueueHierarchy();
  queues[0].getProperties().setProperty(CapacitySchedulerConf.CAPACITY_PROPERTY,String.valueOf(100));
  queues[1].getProperties().setProperty(CapacitySchedulerConf.CAPACITY_PROPERTY,String.valueOf(70));
  queues[2].getProperties().setProperty(CapacitySchedulerConf.CAPACITY_PROPERTY,String.valueOf(50));
  QueueManagerTestUtils.writeQueueConfigurationFile(queueConfigFile.getAbsolutePath(),new JobQueueInfo[]{queues[0]});
  try {
    setupAndStartSchedulerFramework(2,2,2);
    fail("Scheduler should have failed to start!");
  }
 catch (  IOException ioe) {
    assertTrue(ioe.getMessage().contains(String.format(QueueHierarchyBuilder.TOTAL_CAPACITY_OVERFLOWN_MSG,queues[1].getQueueName() + "," + queues[2].getQueueName(),Float.valueOf(120.0f))));
  }
  queues[1].getProperties().setProperty(CapacitySchedulerConf.CAPACITY_PROPERTY,String.valueOf(50));
  QueueManagerTestUtils.writeQueueConfigurationFile(queueConfigFile.getAbsolutePath(),new JobQueueInfo[]{queues[0]});
  setupAndStartSchedulerFramework(2,2,2);
  queues[1].getProperties().setProperty(CapacitySchedulerConf.CAPACITY_PROPERTY,String.valueOf(35));
  queues[2].getProperties().setProperty(CapacitySchedulerConf.CAPACITY_PROPERTY,String.valueOf(95));
  QueueManagerTestUtils.writeQueueConfigurationFile(queueConfigFile.getAbsolutePath(),new JobQueueInfo[]{queues[0]});
  try {
    refreshQueues(taskTrackerManager.getQueueManager(),null,scheduler);
  }
 catch (  IOException ioe) {
    assertTrue(ioe.getMessage().contains(String.format(QueueHierarchyBuilder.TOTAL_CAPACITY_OVERFLOWN_MSG,queues[1].getQueueName() + "," + queues[2].getQueueName(),Float.valueOf(130.0f))));
  }
}
