{
  ServiceManager serviceManager=new ServiceManager("ServiceManager");
  for (int i=0; i < NUM_OF_SERVICES; i++) {
    CompositeServiceImpl service=new CompositeServiceImpl(i);
    serviceManager.addTestService(service);
  }
  CompositeServiceImpl[] services=serviceManager.getServices().toArray(new CompositeServiceImpl[0]);
  assertEquals("Number of registered services ",NUM_OF_SERVICES,services.length);
  Configuration conf=new Configuration();
  serviceManager.init(conf);
  for (int i=0; i < NUM_OF_SERVICES; i++) {
    assertEquals("For " + services[i] + " service, init() call sequence number should have been ",i,services[i].getCallSequenceNumber());
  }
  for (int i=0; i < NUM_OF_SERVICES; i++) {
    services[i].reset();
  }
  serviceManager.start();
  for (int i=0; i < NUM_OF_SERVICES; i++) {
    assertEquals("For " + services[i] + " service, start() call sequence number should have been ",i,services[i].getCallSequenceNumber());
  }
  for (int i=0; i < NUM_OF_SERVICES; i++) {
    services[i].reset();
  }
  serviceManager.stop();
  for (int i=0; i < NUM_OF_SERVICES; i++) {
    assertEquals("For " + services[i] + " service, stop() call sequence number should have been ",((NUM_OF_SERVICES - 1) - i),services[i].getCallSequenceNumber());
  }
  serviceManager.stop();
  for (int i=0; i < NUM_OF_SERVICES; i++) {
    assertEquals("For " + services[i] + " service, stop() call sequence number should have been ",((NUM_OF_SERVICES - 1) - i),services[i].getCallSequenceNumber());
  }
}
