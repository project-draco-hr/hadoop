{
  List<ResourceRequest> askCopy=new ArrayList<ResourceRequest>();
  for (  ResourceRequest req : ask) {
    ResourceRequest reqCopy=ResourceRequest.newInstance(req.getPriority(),req.getResourceName(),req.getCapability(),req.getNumContainers(),req.getRelaxLocality());
    askCopy.add(reqCopy);
  }
  SecurityUtil.setTokenServiceUseIp(false);
  Allocation normalAlloc=super.allocate(applicationAttemptId,askCopy,release,blacklistAdditions,blacklistRemovals,null,null);
  List<Container> containers=normalAlloc.getContainers();
  if (containers.size() > 0) {
    FiCaSchedulerApp application=super.getApplicationAttempt(applicationAttemptId);
    ContainerId containerId=BuilderUtils.newContainerId(application.getApplicationAttemptId(),application.getNewContainerId());
    Container excessC=mock(Container.class);
    when(excessC.getId()).thenReturn(containerId);
    when(excessC.getPriority()).thenReturn(RMContainerAllocator.PRIORITY_REDUCE);
    Resource mockR=mock(Resource.class);
    when(mockR.getMemorySize()).thenReturn(2048L);
    when(excessC.getResource()).thenReturn(mockR);
    NodeId nId=mock(NodeId.class);
    when(nId.getHost()).thenReturn("local");
    when(excessC.getNodeId()).thenReturn(nId);
    containers.add(excessC);
  }
  Allocation excessAlloc=mock(Allocation.class);
  when(excessAlloc.getContainers()).thenReturn(containers);
  return excessAlloc;
}
