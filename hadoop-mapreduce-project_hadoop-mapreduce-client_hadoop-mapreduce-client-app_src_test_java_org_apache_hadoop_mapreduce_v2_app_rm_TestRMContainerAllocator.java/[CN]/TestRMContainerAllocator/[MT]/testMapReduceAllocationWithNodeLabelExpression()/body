{
  LOG.info("Running testMapReduceAllocationWithNodeLabelExpression");
  Configuration conf=new Configuration();
  conf.setFloat(MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART,1.0f);
  conf.set(MRJobConfig.MAP_NODE_LABEL_EXP,"MapNodes");
  conf.set(MRJobConfig.REDUCE_NODE_LABEL_EXP,"ReduceNodes");
  ApplicationId appId=ApplicationId.newInstance(1,1);
  ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,1);
  JobId jobId=MRBuilderUtils.newJobId(appAttemptId.getApplicationId(),0);
  Job mockJob=mock(Job.class);
  when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"job","user",JobState.RUNNING,0,0,0,0,0,0,0,"jobfile",null,false,""));
  final MockScheduler mockScheduler=new MockScheduler(appAttemptId);
  MyContainerAllocator allocator=new MyContainerAllocator(null,conf,appAttemptId,mockJob,SystemClock.getInstance()){
    @Override protected void register(){
    }
    @Override protected ApplicationMasterProtocol createSchedulerProxy(){
      return mockScheduler;
    }
  }
;
  ContainerRequestEvent reqMapEvents;
  reqMapEvents=createReq(jobId,0,1024,new String[]{"map"});
  allocator.sendRequests(Arrays.asList(reqMapEvents));
  ContainerRequestEvent reqReduceEvents;
  reqReduceEvents=createReq(jobId,0,2048,new String[]{"reduce"},false,true);
  allocator.sendRequests(Arrays.asList(reqReduceEvents));
  allocator.schedule();
  Assert.assertEquals(3,mockScheduler.lastAsk.size());
  validateLabelsRequests(mockScheduler.lastAsk.get(0),false);
  validateLabelsRequests(mockScheduler.lastAsk.get(1),false);
  validateLabelsRequests(mockScheduler.lastAsk.get(2),false);
  ContainerId cid0=mockScheduler.assignContainer("map",false);
  allocator.schedule();
  Assert.assertEquals(3,mockScheduler.lastAsk.size());
  validateLabelsRequests(mockScheduler.lastAsk.get(0),true);
  validateLabelsRequests(mockScheduler.lastAsk.get(1),true);
  validateLabelsRequests(mockScheduler.lastAsk.get(2),true);
  allocator.close();
}
