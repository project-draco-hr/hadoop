{
  final Configuration conf=new Configuration();
  conf.setFloat(MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART,0.0f);
  final MyResourceManager2 rm=new MyResourceManager2(conf);
  rm.start();
  final DrainDispatcher dispatcher=(DrainDispatcher)rm.getRMContext().getDispatcher();
  final RMApp app=rm.submitApp(2048);
  dispatcher.await();
  final String host="host1";
  final MockNM nm=rm.registerNode(String.format("%s:1234",host),4096);
  nm.nodeHeartbeat(true);
  dispatcher.await();
  final ApplicationAttemptId appAttemptId=app.getCurrentAppAttempt().getAppAttemptId();
  rm.sendAMLaunched(appAttemptId);
  dispatcher.await();
  final JobId jobId=MRBuilderUtils.newJobId(appAttemptId.getApplicationId(),0);
  final Job mockJob=mock(Job.class);
  when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"job","user",JobState.RUNNING,0,0,0,0,0,0,0,"jobfile",null,false,""));
  final MyContainerAllocator allocator=new MyContainerAllocator(rm,conf,appAttemptId,mockJob,new SystemClock());
  final String[] locations=new String[]{host};
  allocator.sendRequest(createReq(jobId,0,1024,locations,false,true));
  allocator.scheduleAllReduces();
  allocator.makeRemoteRequest();
  nm.nodeHeartbeat(true);
  dispatcher.await();
  allocator.sendRequest(createReq(jobId,1,1024,locations,false,false));
  int assignedContainer;
  for (assignedContainer=0; assignedContainer < 1; ) {
    assignedContainer+=allocator.schedule().size();
    nm.nodeHeartbeat(true);
    dispatcher.await();
  }
  Assert.assertEquals(assignedContainer,1);
}
