{
  int totalMaps=10;
  int succeededMaps=1;
  int scheduledMaps=10;
  int scheduledReduces=0;
  int assignedMaps=2;
  int assignedReduces=0;
  Resource mapResourceReqt=BuilderUtils.newResource(1024,1);
  Resource reduceResourceReqt=BuilderUtils.newResource(2 * 1024,1);
  int numPendingReduces=4;
  float maxReduceRampupLimit=0.5f;
  float reduceSlowStart=0.2f;
  RMContainerAllocator allocator=mock(RMContainerAllocator.class);
  doCallRealMethod().when(allocator).scheduleReduces(anyInt(),anyInt(),anyInt(),anyInt(),anyInt(),anyInt(),any(Resource.class),any(Resource.class),anyInt(),anyFloat(),anyFloat());
  doReturn(EnumSet.of(SchedulerResourceTypes.MEMORY)).when(allocator).getSchedulerResourceTypes();
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator,never()).setIsReduceStarted(true);
  allocator.scheduleReduces(totalMaps,succeededMaps,0,scheduledReduces,totalMaps - succeededMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator,never()).setIsReduceStarted(true);
  verify(allocator,never()).scheduleAllReduces();
  succeededMaps=3;
  doReturn(BuilderUtils.newResource(0,0)).when(allocator).getResourceLimit();
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator,times(1)).setIsReduceStarted(true);
  doReturn(BuilderUtils.newResource(100 * 1024,100 * 1)).when(allocator).getResourceLimit();
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator).rampUpReduces(anyInt());
  verify(allocator,never()).rampDownReduces(anyInt());
  scheduledReduces=3;
  doReturn(BuilderUtils.newResource(10 * 1024,10 * 1)).when(allocator).getResourceLimit();
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator).rampDownReduces(anyInt());
  scheduledMaps=2;
  assignedReduces=2;
  doReturn(BuilderUtils.newResource(10 * 1024,10 * 1)).when(allocator).getResourceLimit();
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator,times(2)).rampDownReduces(anyInt());
  doReturn(EnumSet.of(SchedulerResourceTypes.MEMORY,SchedulerResourceTypes.CPU)).when(allocator).getSchedulerResourceTypes();
  scheduledMaps=10;
  assignedReduces=0;
  doReturn(BuilderUtils.newResource(100 * 1024,5 * 1)).when(allocator).getResourceLimit();
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator,times(3)).rampDownReduces(anyInt());
  doReturn(BuilderUtils.newResource(10 * 1024,100 * 1)).when(allocator).getResourceLimit();
  allocator.scheduleReduces(totalMaps,succeededMaps,scheduledMaps,scheduledReduces,assignedMaps,assignedReduces,mapResourceReqt,reduceResourceReqt,numPendingReduces,maxReduceRampupLimit,reduceSlowStart);
  verify(allocator,times(4)).rampDownReduces(anyInt());
}
