{
  LOG.info("Running testUpdateAskOnRampDownAllReduces");
  Configuration conf=new Configuration();
  MyResourceManager rm=new MyResourceManager(conf);
  rm.start();
  DrainDispatcher dispatcher=(DrainDispatcher)rm.getRMContext().getDispatcher();
  RMApp app=rm.submitApp(1024);
  dispatcher.await();
  MockNM amNodeManager=rm.registerNode("amNM:1234",1260);
  amNodeManager.nodeHeartbeat(true);
  dispatcher.await();
  ApplicationAttemptId appAttemptId=app.getCurrentAppAttempt().getAppAttemptId();
  rm.sendAMLaunched(appAttemptId);
  dispatcher.await();
  JobId jobId=MRBuilderUtils.newJobId(appAttemptId.getApplicationId(),0);
  Job mockJob=mock(Job.class);
  when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"job","user",JobState.RUNNING,0,0,0,0,0,0,0,"jobfile",null,false,""));
  MyContainerAllocator allocator=new MyContainerAllocator(rm,conf,appAttemptId,mockJob);
  ControlledClock clock=(ControlledClock)allocator.getContext().getClock();
  clock.setTime(System.currentTimeMillis());
  MockNM nodeManager=rm.registerNode("h1:1234",1024);
  dispatcher.await();
  ContainerRequestEvent event1=createReq(jobId,1,1024,new String[]{"h1"});
  allocator.sendRequest(event1);
  ContainerRequestEvent event2=createReq(jobId,2,1024,new String[]{"h2"});
  allocator.sendRequest(event2);
  ContainerRequestEvent event3=createReq(jobId,3,1024,new String[]{"h2"},false,true);
  allocator.sendRequest(event3);
  allocator.schedule();
  dispatcher.await();
  clock.setTime(System.currentTimeMillis() + 500000L);
  ContainerRequestEvent event4=createReq(jobId,4,1024,new String[]{"h3"},false,true);
  allocator.sendRequest(event4);
  allocator.schedule();
  dispatcher.await();
  nodeManager.nodeHeartbeat(true);
  dispatcher.await();
  rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(1024,1));
  allocator.schedule();
  dispatcher.await();
  Assert.assertEquals(1,allocator.getAssignedRequests().maps.size());
  ContainerAllocatorEvent deallocate=createDeallocateEvent(jobId,1,false);
  allocator.sendDeallocate(deallocate);
  Assert.assertEquals(1,allocator.getScheduledRequests().reduces.size());
  Assert.assertEquals(1,allocator.getNumOfPendingReduces());
  Assert.assertEquals(1,allocator.getScheduledRequests().maps.size());
  Assert.assertEquals(0,allocator.getAssignedRequests().maps.size());
  Assert.assertEquals(6,allocator.getAsk().size());
  for (  ResourceRequest req : allocator.getAsk()) {
    boolean isReduce=req.getPriority().equals(RMContainerAllocator.PRIORITY_REDUCE);
    if (isReduce) {
      Assert.assertTrue((req.getResourceName().equals("*") || req.getResourceName().equals("/default-rack") || req.getResourceName().equals("h2")) && req.getNumContainers() == 1);
    }
 else {
      Assert.assertTrue(((req.getResourceName().equals("*") || req.getResourceName().equals("/default-rack")) && req.getNumContainers() == 1) || (req.getResourceName().equals("h1") && req.getNumContainers() == 0));
    }
  }
  rm.getMyFifoScheduler().forceResourceLimit(Resource.newInstance(0,0));
  allocator.schedule();
  dispatcher.await();
  Assert.assertEquals(0,allocator.getScheduledRequests().reduces.size());
  Assert.assertEquals(2,allocator.getNumOfPendingReduces());
  Assert.assertEquals(3,allocator.getAsk().size());
  for (  ResourceRequest req : allocator.getAsk()) {
    Assert.assertEquals(RMContainerAllocator.PRIORITY_REDUCE,req.getPriority());
    Assert.assertTrue(req.getResourceName().equals("*") || req.getResourceName().equals("/default-rack") || req.getResourceName().equals("h2"));
    Assert.assertEquals(Resource.newInstance(1024,1),req.getCapability());
    Assert.assertEquals(0,req.getNumContainers());
  }
}
