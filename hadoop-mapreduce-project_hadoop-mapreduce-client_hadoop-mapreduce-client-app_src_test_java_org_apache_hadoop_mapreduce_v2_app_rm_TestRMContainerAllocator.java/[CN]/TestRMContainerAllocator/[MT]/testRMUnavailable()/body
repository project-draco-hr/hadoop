{
  Configuration conf=new Configuration();
  conf.setInt(MRJobConfig.MR_AM_TO_RM_WAIT_INTERVAL_MS,0);
  MyResourceManager rm1=new MyResourceManager(conf);
  rm1.start();
  DrainDispatcher dispatcher=(DrainDispatcher)rm1.getRMContext().getDispatcher();
  RMApp app=rm1.submitApp(1024);
  dispatcher.await();
  MockNM nm1=new MockNM("h1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  nm1.nodeHeartbeat(true);
  dispatcher.await();
  ApplicationAttemptId appAttemptId=app.getCurrentAppAttempt().getAppAttemptId();
  rm1.sendAMLaunched(appAttemptId);
  dispatcher.await();
  JobId jobId=MRBuilderUtils.newJobId(appAttemptId.getApplicationId(),0);
  Job mockJob=mock(Job.class);
  when(mockJob.getReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"job","user",JobState.RUNNING,0,0,0,0,0,0,0,"jobfile",null,false,""));
  MyContainerAllocator2 allocator=new MyContainerAllocator2(rm1,conf,appAttemptId,mockJob);
  allocator.jobEvents.clear();
  try {
    allocator.schedule();
    Assert.fail("Should Have Exception");
  }
 catch (  RMContainerAllocationException e) {
    Assert.assertTrue(e.getMessage().contains("Could not contact RM after"));
  }
  dispatcher.await();
  Assert.assertEquals("Should Have 1 Job Event",1,allocator.jobEvents.size());
  JobEvent event=allocator.jobEvents.get(0);
  Assert.assertTrue("Should Reboot",event.getType().equals(JobEventType.JOB_AM_REBOOT));
}
