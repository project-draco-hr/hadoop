{
  long size=kvbuffer.length + partitions * APPROX_HEADER_LENGTH;
  FSDataOutputStream out=null;
  try {
    final SpillRecord spillRec=new SpillRecord(partitions);
    final Path filename=mapOutputFile.getSpillFileForWrite(numSpills,size);
    out=rfs.create(filename);
    IndexRecord rec=new IndexRecord();
    for (int i=0; i < partitions; ++i) {
      IFile.Writer<K,V> writer=null;
      try {
        long segmentStart=out.getPos();
        FSDataOutputStream partitionOut=CryptoUtils.wrapIfNecessary(job,out);
        writer=new IFile.Writer<K,V>(job,partitionOut,keyClass,valClass,codec,spilledRecordsCounter);
        if (i == partition) {
          final long recordStart=out.getPos();
          writer.append(key,value);
          mapOutputByteCounter.increment(out.getPos() - recordStart);
        }
        writer.close();
        rec.startOffset=segmentStart;
        rec.rawLength=writer.getRawLength() + CryptoUtils.cryptoPadding(job);
        rec.partLength=writer.getCompressedLength() + CryptoUtils.cryptoPadding(job);
        spillRec.putIndex(rec,i);
        writer=null;
      }
 catch (      IOException e) {
        if (null != writer)         writer.close();
        throw e;
      }
    }
    if (totalIndexCacheMemory >= indexCacheMemoryLimit) {
      Path indexFilename=mapOutputFile.getSpillIndexFileForWrite(numSpills,partitions * MAP_OUTPUT_INDEX_RECORD_LENGTH);
      spillRec.writeToFile(indexFilename,job);
    }
 else {
      indexCacheList.add(spillRec);
      totalIndexCacheMemory+=spillRec.size() * MAP_OUTPUT_INDEX_RECORD_LENGTH;
    }
    ++numSpills;
  }
  finally {
    if (out != null)     out.close();
  }
}
