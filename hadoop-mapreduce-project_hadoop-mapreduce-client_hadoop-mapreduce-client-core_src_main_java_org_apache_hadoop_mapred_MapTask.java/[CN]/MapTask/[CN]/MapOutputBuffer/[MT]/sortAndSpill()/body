{
  final long size=(bufend >= bufstart ? bufend - bufstart : (bufvoid - bufend) + bufstart) + partitions * APPROX_HEADER_LENGTH;
  FSDataOutputStream out=null;
  try {
    final SpillRecord spillRec=new SpillRecord(partitions);
    final Path filename=mapOutputFile.getSpillFileForWrite(numSpills,size);
    out=rfs.create(filename);
    final int mstart=kvend / NMETA;
    final int mend=1 + (kvstart >= kvend ? kvstart : kvmeta.capacity() + kvstart) / NMETA;
    sorter.sort(MapOutputBuffer.this,mstart,mend,reporter);
    int spindex=mstart;
    final IndexRecord rec=new IndexRecord();
    final InMemValBytes value=new InMemValBytes();
    for (int i=0; i < partitions; ++i) {
      IFile.Writer<K,V> writer=null;
      try {
        long segmentStart=out.getPos();
        FSDataOutputStream partitionOut=CryptoUtils.wrapIfNecessary(job,out);
        writer=new Writer<K,V>(job,partitionOut,keyClass,valClass,codec,spilledRecordsCounter);
        if (combinerRunner == null) {
          DataInputBuffer key=new DataInputBuffer();
          while (spindex < mend && kvmeta.get(offsetFor(spindex % maxRec) + PARTITION) == i) {
            final int kvoff=offsetFor(spindex % maxRec);
            int keystart=kvmeta.get(kvoff + KEYSTART);
            int valstart=kvmeta.get(kvoff + VALSTART);
            key.reset(kvbuffer,keystart,valstart - keystart);
            getVBytesForOffset(kvoff,value);
            writer.append(key,value);
            ++spindex;
          }
        }
 else {
          int spstart=spindex;
          while (spindex < mend && kvmeta.get(offsetFor(spindex % maxRec) + PARTITION) == i) {
            ++spindex;
          }
          if (spstart != spindex) {
            combineCollector.setWriter(writer);
            RawKeyValueIterator kvIter=new MRResultIterator(spstart,spindex);
            combinerRunner.combine(kvIter,combineCollector);
          }
        }
        writer.close();
        rec.startOffset=segmentStart;
        rec.rawLength=writer.getRawLength() + CryptoUtils.cryptoPadding(job);
        rec.partLength=writer.getCompressedLength() + CryptoUtils.cryptoPadding(job);
        spillRec.putIndex(rec,i);
        writer=null;
      }
  finally {
        if (null != writer)         writer.close();
      }
    }
    if (totalIndexCacheMemory >= indexCacheMemoryLimit) {
      Path indexFilename=mapOutputFile.getSpillIndexFileForWrite(numSpills,partitions * MAP_OUTPUT_INDEX_RECORD_LENGTH);
      spillRec.writeToFile(indexFilename,job);
    }
 else {
      indexCacheList.add(spillRec);
      totalIndexCacheMemory+=spillRec.size() * MAP_OUTPUT_INDEX_RECORD_LENGTH;
    }
    LOG.info("Finished spill " + numSpills);
    ++numSpills;
  }
  finally {
    if (out != null)     out.close();
  }
}
