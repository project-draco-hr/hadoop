{
  InputSplit inputSplit=getSplitDetails(new Path(splitIndex.getSplitLocation()),splitIndex.getStartOffset());
  updateJobWithSplit(job,inputSplit);
  reporter.setInputSplit(inputSplit);
  RecordReader<INKEY,INVALUE> in=isSkipping() ? new SkippingRecordReader<INKEY,INVALUE>(umbilical,reporter,job) : new TrackedRecordReader<INKEY,INVALUE>(reporter,job);
  job.setBoolean(JobContext.SKIP_RECORDS,isSkipping());
  int numReduceTasks=conf.getNumReduceTasks();
  LOG.info("numReduceTasks: " + numReduceTasks);
  MapOutputCollector<OUTKEY,OUTVALUE> collector=null;
  if (numReduceTasks > 0) {
    collector=createSortingCollector(job,reporter);
  }
 else {
    collector=new DirectMapOutputCollector<OUTKEY,OUTVALUE>();
    MapOutputCollector.Context context=new MapOutputCollector.Context(this,job,reporter);
    collector.init(context);
  }
  MapRunnable<INKEY,INVALUE,OUTKEY,OUTVALUE> runner=ReflectionUtils.newInstance(job.getMapRunnerClass(),job);
  try {
    runner.run(in,new OldOutputCollector(collector,conf),reporter);
    mapPhase.complete();
    if (numReduceTasks > 0) {
      setPhase(TaskStatus.Phase.SORT);
    }
    statusUpdate(umbilical);
    collector.flush();
  }
  finally {
    in.close();
    collector.close();
  }
}
