{
switch (event.getType()) {
case STORE_APP:
{
      ApplicationState apptState=((RMStateStoreAppEvent)event).getAppState();
      Exception storedException=null;
      ApplicationStateDataPBImpl appStateData=new ApplicationStateDataPBImpl();
      appStateData.setSubmitTime(apptState.getSubmitTime());
      appStateData.setApplicationSubmissionContext(apptState.getApplicationSubmissionContext());
      appStateData.setUser(apptState.getUser());
      ApplicationId appId=apptState.getApplicationSubmissionContext().getApplicationId();
      LOG.info("Storing info for app: " + appId);
      try {
        storeApplicationState(appId.toString(),appStateData);
      }
 catch (      Exception e) {
        LOG.error("Error storing app: " + appId,e);
        storedException=e;
      }
 finally {
        notifyDoneStoringApplication(appId,storedException);
      }
    }
  break;
case STORE_APP_ATTEMPT:
{
  ApplicationAttemptState attemptState=((RMStateStoreAppAttemptEvent)event).getAppAttemptState();
  Exception storedException=null;
  Credentials credentials=attemptState.getAppAttemptCredentials();
  ByteBuffer appAttemptTokens=null;
  try {
    if (credentials != null) {
      DataOutputBuffer dob=new DataOutputBuffer();
      credentials.writeTokenStorageToStream(dob);
      appAttemptTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    }
    ApplicationAttemptStateDataPBImpl attemptStateData=(ApplicationAttemptStateDataPBImpl)ApplicationAttemptStateDataPBImpl.newApplicationAttemptStateData(attemptState.getAttemptId(),attemptState.getMasterContainer(),appAttemptTokens);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Storing info for attempt: " + attemptState.getAttemptId());
    }
    storeApplicationAttemptState(attemptState.getAttemptId().toString(),attemptStateData);
  }
 catch (  Exception e) {
    LOG.error("Error storing appAttempt: " + attemptState.getAttemptId(),e);
    storedException=e;
  }
 finally {
    notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),storedException);
  }
}
break;
case REMOVE_APP:
{
ApplicationState appState=((RMStateStoreRemoveAppEvent)event).getAppState();
ApplicationId appId=appState.getAppId();
Exception removedException=null;
LOG.info("Removing info for app: " + appId);
try {
removeApplicationState(appState);
}
 catch (Exception e) {
LOG.error("Error removing app: " + appId,e);
removedException=e;
}
 finally {
notifyDoneRemovingApplcation(appId,removedException);
}
}
break;
default :
LOG.error("Unknown RMStateStoreEvent type: " + event.getType());
}
}
