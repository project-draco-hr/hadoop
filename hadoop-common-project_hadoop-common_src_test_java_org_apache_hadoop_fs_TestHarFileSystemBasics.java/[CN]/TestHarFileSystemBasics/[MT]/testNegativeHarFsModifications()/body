{
  final Path fooPath=new Path(rootPath,"foo/bar");
  localFileSystem.createNewFile(fooPath);
  try {
    harFileSystem.create(fooPath,new FsPermission("+rwx"),true,1024,(short)88,1024,null);
    Assert.fail("IOException expected.");
  }
 catch (  IOException ioe) {
  }
  try {
    harFileSystem.setReplication(fooPath,(short)55);
    Assert.fail("IOException expected.");
  }
 catch (  IOException ioe) {
  }
  try {
    harFileSystem.delete(fooPath,true);
    Assert.fail("IOException expected.");
  }
 catch (  IOException ioe) {
  }
  try {
    harFileSystem.mkdirs(fooPath,new FsPermission("+rwx"));
    Assert.fail("IOException expected.");
  }
 catch (  IOException ioe) {
  }
  final Path indexPath=new Path(harPath,"_index");
  try {
    harFileSystem.copyFromLocalFile(false,indexPath,fooPath);
    Assert.fail("IOException expected.");
  }
 catch (  IOException ioe) {
  }
  try {
    harFileSystem.startLocalOutput(fooPath,indexPath);
    Assert.fail("IOException expected.");
  }
 catch (  IOException ioe) {
  }
  try {
    harFileSystem.completeLocalOutput(fooPath,indexPath);
    Assert.fail("IOException expected.");
  }
 catch (  IOException ioe) {
  }
  try {
    harFileSystem.setOwner(fooPath,"user","group");
    Assert.fail("IOException expected.");
  }
 catch (  IOException ioe) {
  }
  try {
    harFileSystem.setPermission(fooPath,new FsPermission("+x"));
    Assert.fail("IOException expected.");
  }
 catch (  IOException ioe) {
  }
}
