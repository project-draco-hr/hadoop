{
  LocalResourceRequest req=event.getLocalResourceRequest();
  LocalizedResource rsrc=localrsrc.get(req);
switch (event.getType()) {
case LOCALIZED:
    if (useLocalCacheDirectoryManager) {
      inProgressLocalResourcesMap.remove(req);
    }
  break;
case REQUEST:
if (rsrc != null && (!isResourcePresent(rsrc))) {
  LOG.info("Resource " + rsrc.getLocalPath() + " is missing, localizing it again");
  removeResource(req);
  rsrc=null;
}
if (null == rsrc) {
rsrc=new LocalizedResource(req,dispatcher);
localrsrc.put(req,rsrc);
}
break;
case RELEASE:
if (null == rsrc) {
ResourceReleaseEvent relEvent=(ResourceReleaseEvent)event;
LOG.info("Container " + relEvent.getContainer() + " sent RELEASE event on a resource request "+ req+ " not present in cache.");
return;
}
break;
case LOCALIZATION_FAILED:
removeResource(req);
break;
case RECOVERED:
if (rsrc != null) {
LOG.warn("Ignoring attempt to recover existing resource " + rsrc);
return;
}
rsrc=recoverResource(req,(ResourceRecoveredEvent)event);
localrsrc.put(req,rsrc);
break;
}
if (rsrc == null) {
LOG.warn("Received " + event.getType() + " event for request "+ req+ " but localized resource is missing");
return;
}
rsrc.handle(event);
if (event.getType() == ResourceEventType.RELEASE) {
if (rsrc.getState() == ResourceState.DOWNLOADING && rsrc.getRefCount() <= 0 && rsrc.getRequest().getVisibility() != LocalResourceVisibility.PUBLIC) {
removeResource(req);
}
}
if (event.getType() == ResourceEventType.LOCALIZED) {
if (rsrc.getLocalPath() != null) {
try {
stateStore.finishResourceLocalization(user,appId,buildLocalizedResourceProto(rsrc));
}
 catch (IOException ioe) {
LOG.error("Error storing resource state for " + rsrc,ioe);
}
}
 else {
LOG.warn("Resource " + rsrc + " localized without a location");
}
}
}
