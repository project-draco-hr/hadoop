{
  if (nmTokenIdentifier == null) {
    throw RPCUtil.getRemoteException(INVALID_NMTOKEN_MSG);
  }
  if (containerTokenIdentifier == null) {
    throw RPCUtil.getRemoteException(INVALID_CONTAINERTOKEN_MSG);
  }
  ContainerId containerId=containerTokenIdentifier.getContainerID();
  String containerIDStr=containerId.toString();
  boolean unauthorized=false;
  StringBuilder messageBuilder=new StringBuilder("Unauthorized request to " + (startRequest ? "start container." : "increase container resource."));
  if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId().equals(containerId.getApplicationAttemptId().getApplicationId())) {
    unauthorized=true;
    messageBuilder.append("\nNMToken for application attempt : ").append(nmTokenIdentifier.getApplicationAttemptId()).append(" was used for " + (startRequest ? "starting " : "increasing resource of ") + "container with container token").append(" issued for application attempt : ").append(containerId.getApplicationAttemptId());
  }
 else   if (startRequest && !this.context.getContainerTokenSecretManager().isValidStartContainerRequest(containerTokenIdentifier)) {
    unauthorized=true;
    messageBuilder.append("\n Attempt to relaunch the same ").append("container with id ").append(containerIDStr).append(".");
  }
 else   if (containerTokenIdentifier.getExpiryTimeStamp() < System.currentTimeMillis()) {
    unauthorized=true;
    messageBuilder.append("\nThis token is expired. current time is ").append(System.currentTimeMillis()).append(" found ").append(containerTokenIdentifier.getExpiryTimeStamp());
    messageBuilder.append("\nNote: System times on machines may be out of sync.").append(" Check system time and time zones.");
  }
  if (unauthorized) {
    String msg=messageBuilder.toString();
    LOG.error(msg);
    throw RPCUtil.getRemoteException(msg);
  }
  if (containerTokenIdentifier.getRMIdentifier() != nodeStatusUpdater.getRMIdentifier()) {
    StringBuilder sb=new StringBuilder("\nContainer ");
    sb.append(containerTokenIdentifier.getContainerID().toString()).append(" rejected as it is allocated by a previous RM");
    throw new InvalidContainerException(sb.toString());
  }
}
