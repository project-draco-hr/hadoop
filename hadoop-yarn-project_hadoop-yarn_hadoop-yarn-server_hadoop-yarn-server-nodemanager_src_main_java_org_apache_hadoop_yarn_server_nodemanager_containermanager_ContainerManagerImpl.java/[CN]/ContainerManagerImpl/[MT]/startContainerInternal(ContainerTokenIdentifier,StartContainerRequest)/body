{
  ContainerId containerId=containerTokenIdentifier.getContainerID();
  String containerIdStr=containerId.toString();
  String user=containerTokenIdentifier.getApplicationSubmitter();
  LOG.info("Start request for " + containerIdStr + " by user "+ user);
  ContainerLaunchContext launchContext=request.getContainerLaunchContext();
  Credentials credentials=YarnServerSecurityUtils.parseCredentials(launchContext);
  Container container=new ContainerImpl(getConfig(),this.dispatcher,launchContext,credentials,metrics,containerTokenIdentifier,context);
  ApplicationId applicationID=containerId.getApplicationAttemptId().getApplicationId();
  if (context.getContainers().putIfAbsent(containerId,container) != null) {
    NMAuditLogger.logFailure(user,AuditConstants.START_CONTAINER,"ContainerManagerImpl","Container already running on this node!",applicationID,containerId);
    throw RPCUtil.getRemoteException("Container " + containerIdStr + " already is running on this node!!");
  }
  this.readLock.lock();
  try {
    if (!isServiceStopped()) {
      FlowContext flowContext=null;
      if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {
        String flowName=launchContext.getEnvironment().get(TimelineUtils.FLOW_NAME_TAG_PREFIX);
        String flowVersion=launchContext.getEnvironment().get(TimelineUtils.FLOW_VERSION_TAG_PREFIX);
        String flowRunIdStr=launchContext.getEnvironment().get(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX);
        long flowRunId=0L;
        if (flowRunIdStr != null && !flowRunIdStr.isEmpty()) {
          flowRunId=Long.parseLong(flowRunIdStr);
        }
        flowContext=new FlowContext(flowName,flowVersion,flowRunId);
      }
      if (!context.getApplications().containsKey(applicationID)) {
        Application application=new ApplicationImpl(dispatcher,user,flowContext,applicationID,credentials,context);
        if (context.getApplications().putIfAbsent(applicationID,application) == null) {
          LOG.info("Creating a new application reference for app " + applicationID);
          LogAggregationContext logAggregationContext=containerTokenIdentifier.getLogAggregationContext();
          Map<ApplicationAccessType,String> appAcls=container.getLaunchContext().getApplicationACLs();
          context.getNMStateStore().storeApplication(applicationID,buildAppProto(applicationID,user,credentials,appAcls,logAggregationContext));
          dispatcher.getEventHandler().handle(new ApplicationInitEvent(applicationID,appAcls,logAggregationContext));
        }
      }
      dispatcher.getEventHandler().handle(new ApplicationContainerInitEvent(container));
      this.context.getNMStateStore().storeContainer(containerId,request);
      this.context.getContainerTokenSecretManager().startContainerSuccessful(containerTokenIdentifier);
      NMAuditLogger.logSuccess(user,AuditConstants.START_CONTAINER,"ContainerManageImpl",applicationID,containerId);
      metrics.launchedContainer();
      metrics.allocateContainer(containerTokenIdentifier.getResource());
    }
 else {
      throw new YarnException("Container start failed as the NodeManager is " + "in the process of shutting down");
    }
  }
  finally {
    this.readLock.unlock();
  }
}
