{
  if (blockNewContainerRequests.get()) {
    throw RPCUtil.getRemoteException(new NMNotYetReadyException("Rejecting new containers as NodeManager has not" + " yet connected with ResourceManager"));
  }
  ContainerLaunchContext launchContext=request.getContainerLaunchContext();
  org.apache.hadoop.yarn.api.records.Container lauchContainer=request.getContainer();
  ContainerId containerID=lauchContainer.getId();
  String containerIDStr=containerID.toString();
  UserGroupInformation remoteUgi=getRemoteUgi(containerIDStr);
  authorizeRequest(containerIDStr,launchContext,lauchContainer,remoteUgi);
  if (lauchContainer.getRMIdentifer() != nodeStatusUpdater.getRMIdentifier()) {
    String msg="\nContainer " + containerIDStr + " rejected as it is allocated by a previous RM";
    LOG.error(msg);
    throw RPCUtil.getRemoteException(new InvalidContainerException(msg));
  }
  LOG.info("Start request for " + containerIDStr + " by user "+ launchContext.getUser());
  ByteBuffer tokens=launchContext.getContainerTokens();
  Credentials credentials=new Credentials();
  if (tokens != null) {
    DataInputByteBuffer buf=new DataInputByteBuffer();
    tokens.rewind();
    buf.reset(tokens);
    try {
      credentials.readTokenStorageStream(buf);
      if (LOG.isDebugEnabled()) {
        for (        Token<? extends TokenIdentifier> tk : credentials.getAllTokens()) {
          LOG.debug(tk.getService() + " = " + tk.toString());
        }
      }
    }
 catch (    IOException e) {
      throw RPCUtil.getRemoteException(e);
    }
  }
  Container container=new ContainerImpl(getConfig(),this.dispatcher,launchContext,lauchContainer,credentials,metrics);
  ApplicationId applicationID=containerID.getApplicationAttemptId().getApplicationId();
  if (context.getContainers().putIfAbsent(containerID,container) != null) {
    NMAuditLogger.logFailure(launchContext.getUser(),AuditConstants.START_CONTAINER,"ContainerManagerImpl","Container already running on this node!",applicationID,containerID);
    throw RPCUtil.getRemoteException("Container " + containerIDStr + " already is running on this node!!");
  }
  Application application=new ApplicationImpl(dispatcher,this.aclsManager,launchContext.getUser(),applicationID,credentials,context);
  if (null == context.getApplications().putIfAbsent(applicationID,application)) {
    LOG.info("Creating a new application reference for app " + applicationID);
    dispatcher.getEventHandler().handle(new ApplicationInitEvent(applicationID,container.getLaunchContext().getApplicationACLs()));
  }
  dispatcher.getEventHandler().handle(new ApplicationContainerInitEvent(container));
  if (UserGroupInformation.isSecurityEnabled()) {
    ContainerTokenIdentifier tokenId=selectContainerTokenIdentifier(remoteUgi);
    this.context.getContainerTokenSecretManager().startContainerSuccessful(tokenId);
  }
  NMAuditLogger.logSuccess(launchContext.getUser(),AuditConstants.START_CONTAINER,"ContainerManageImpl",applicationID,containerID);
  StartContainerResponse response=recordFactory.newRecordInstance(StartContainerResponse.class);
  response.setAllServiceResponse(auxiliaryServices.getMeta());
  metrics.launchedContainer();
  metrics.allocateContainer(lauchContainer.getResource());
  return response;
}
