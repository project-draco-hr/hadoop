{
switch (event.getType()) {
case FINISH_APPS:
    CMgrCompletedAppsEvent appsFinishedEvent=(CMgrCompletedAppsEvent)event;
  for (  ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {
    Application app=this.context.getApplications().get(appID);
    if (app == null) {
      LOG.warn("couldn't find application " + appID + " while processing"+ " FINISH_APPS event");
      continue;
    }
    String diagnostic="";
    if (appsFinishedEvent.getReason() == CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {
      diagnostic="Application killed on shutdown";
    }
 else     if (appsFinishedEvent.getReason() == CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {
      diagnostic="Application killed by ResourceManager";
    }
    try {
      this.context.getNMStateStore().storeFinishedApplication(appID);
    }
 catch (    IOException e) {
      LOG.error("Unable to update application state in store",e);
    }
    this.dispatcher.getEventHandler().handle(new ApplicationFinishEvent(appID,diagnostic));
  }
break;
case FINISH_CONTAINERS:
CMgrCompletedContainersEvent containersFinishedEvent=(CMgrCompletedContainersEvent)event;
for (ContainerId container : containersFinishedEvent.getContainersToCleanup()) {
this.dispatcher.getEventHandler().handle(new ContainerKillEvent(container,ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,"Container Killed by ResourceManager"));
}
break;
case DECREASE_CONTAINERS_RESOURCE:
CMgrDecreaseContainersResourceEvent containersDecreasedEvent=(CMgrDecreaseContainersResourceEvent)event;
for (org.apache.hadoop.yarn.api.records.Container container : containersDecreasedEvent.getContainersToDecrease()) {
try {
changeContainerResourceInternal(container.getId(),container.getResource(),false);
}
 catch (YarnException e) {
LOG.error("Unable to decrease container resource",e);
}
catch (IOException e) {
LOG.error("Unable to update container resource in store",e);
}
}
break;
case SIGNAL_CONTAINERS:
CMgrSignalContainersEvent containersSignalEvent=(CMgrSignalContainersEvent)event;
for (SignalContainerRequest request : containersSignalEvent.getContainersToSignal()) {
ContainerId containerId=request.getContainerId();
Container container=this.context.getContainers().get(containerId);
if (container != null) {
LOG.info(containerId + " signal request by ResourceManager.");
this.dispatcher.getEventHandler().handle(new SignalContainersLauncherEvent(container,request.getCommand()));
}
 else {
LOG.info("Container " + containerId + " no longer exists");
}
}
break;
default :
throw new YarnRuntimeException("Got an unknown ContainerManagerEvent type: " + event.getType());
}
}
