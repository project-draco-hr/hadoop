{
  int exitCode=1;
  handleOpts(args);
  FileSystem fs=null;
  Path remoteRootLogDir=new Path(conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));
  String suffix=LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);
  Path workingDir=new Path(remoteRootLogDir,"archive-logs-work");
  if (verbose) {
    LOG.info("Remote Log Dir Root: " + remoteRootLogDir);
    LOG.info("Log Suffix: " + suffix);
    LOG.info("Working Dir: " + workingDir);
  }
  try {
    fs=FileSystem.get(conf);
    if (prepareWorkingDir(fs,workingDir)) {
      checkFilesAndSeedApps(fs,remoteRootLogDir,suffix);
      filterAppsByAggregatedStatus();
      checkMaxEligible();
      if (eligibleApplications.isEmpty()) {
        LOG.info("No eligible applications to process");
        exitCode=0;
      }
 else {
        StringBuilder sb=new StringBuilder("Will process the following applications:");
        for (        AppInfo app : eligibleApplications) {
          sb.append("\n\t").append(app.getAppId());
        }
        LOG.info(sb.toString());
        File localScript=File.createTempFile("hadoop-archive-logs-",".sh");
        generateScript(localScript,workingDir,remoteRootLogDir,suffix);
        exitCode=runDistributedShell(localScript) ? 0 : 1;
      }
    }
  }
  finally {
    if (fs != null) {
      if (fs.exists(workingDir)) {
        fs.delete(workingDir,true);
      }
      fs.close();
    }
  }
  return exitCode;
}
