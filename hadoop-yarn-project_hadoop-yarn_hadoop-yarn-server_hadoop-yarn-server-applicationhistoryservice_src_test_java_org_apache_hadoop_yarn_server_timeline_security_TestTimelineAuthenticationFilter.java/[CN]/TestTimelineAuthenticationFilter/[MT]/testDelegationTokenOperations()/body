{
  TimelineClient httpUserClient=KerberosTestUtils.doAs(HTTP_USER + "/localhost",new Callable<TimelineClient>(){
    @Override public TimelineClient call() throws Exception {
      return createTimelineClientForUGI();
    }
  }
);
  UserGroupInformation httpUser=KerberosTestUtils.doAs(HTTP_USER + "/localhost",new Callable<UserGroupInformation>(){
    @Override public UserGroupInformation call() throws Exception {
      return UserGroupInformation.getCurrentUser();
    }
  }
);
  Token<TimelineDelegationTokenIdentifier> token=httpUserClient.getDelegationToken(httpUser.getShortUserName());
  Assert.assertNotNull(token);
  TimelineDelegationTokenIdentifier tDT=token.decodeIdentifier();
  Assert.assertNotNull(tDT);
  Assert.assertEquals(new Text(HTTP_USER),tDT.getOwner());
  long renewTime1=httpUserClient.renewDelegationToken(token);
  Thread.sleep(100);
  long renewTime2=httpUserClient.renewDelegationToken(token);
  Assert.assertTrue(renewTime1 < renewTime2);
  httpUserClient.cancelDelegationToken(token);
  try {
    httpUserClient.renewDelegationToken(token);
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertTrue(e.getMessage().contains("Renewal request for unknown token"));
  }
  UserGroupInformation fooUgi=UserGroupInformation.createProxyUser(FOO_USER,httpUser);
  TimelineClient fooUserClient=fooUgi.doAs(new PrivilegedExceptionAction<TimelineClient>(){
    @Override public TimelineClient run() throws Exception {
      return createTimelineClientForUGI();
    }
  }
);
  token=fooUserClient.getDelegationToken(httpUser.getShortUserName());
  Assert.assertNotNull(token);
  tDT=token.decodeIdentifier();
  Assert.assertNotNull(tDT);
  Assert.assertEquals(new Text(FOO_USER),tDT.getOwner());
  Assert.assertEquals(new Text(HTTP_USER),tDT.getRealUser());
  final Token<TimelineDelegationTokenIdentifier> tokenToRenew=token;
  renewTime1=httpUserClient.renewDelegationToken(tokenToRenew);
  renewTime2=httpUserClient.renewDelegationToken(tokenToRenew);
  Assert.assertTrue(renewTime1 < renewTime2);
  fooUserClient.cancelDelegationToken(tokenToRenew);
  try {
    httpUserClient.renewDelegationToken(tokenToRenew);
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertTrue(e.getMessage().contains("Renewal request for unknown token"));
  }
  UserGroupInformation barUgi=UserGroupInformation.createProxyUser(BAR_USER,httpUser);
  TimelineClient barUserClient=barUgi.doAs(new PrivilegedExceptionAction<TimelineClient>(){
    @Override public TimelineClient run(){
      return createTimelineClientForUGI();
    }
  }
);
  try {
    barUserClient.getDelegationToken(httpUser.getShortUserName());
    Assert.fail();
  }
 catch (  Exception e) {
    Assert.assertTrue(e.getCause() instanceof AuthorizationException || e.getCause() instanceof AuthenticationException);
  }
}
