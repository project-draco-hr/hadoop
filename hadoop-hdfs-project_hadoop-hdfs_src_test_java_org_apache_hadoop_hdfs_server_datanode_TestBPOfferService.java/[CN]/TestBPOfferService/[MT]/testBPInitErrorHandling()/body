{
  final DataNode mockDn=Mockito.mock(DataNode.class);
  Mockito.doReturn(true).when(mockDn).shouldRun();
  Configuration conf=new Configuration();
  File dnDataDir=new File(new File(TEST_BUILD_DATA,"testBPInitErrorHandling"),"data");
  conf.set(DFS_DATANODE_DATA_DIR_KEY,dnDataDir.toURI().toString());
  Mockito.doReturn(conf).when(mockDn).getConf();
  Mockito.doReturn(new DNConf(conf)).when(mockDn).getDnConf();
  Mockito.doReturn(DataNodeMetrics.create(conf,"fake dn")).when(mockDn).getMetrics();
  final AtomicInteger count=new AtomicInteger();
  Mockito.doAnswer(new Answer<Void>(){
    @Override public Void answer(    InvocationOnMock invocation) throws Throwable {
      if (count.getAndIncrement() == 0) {
        throw new IOException("faked initBlockPool exception");
      }
      Mockito.doReturn(mockFSDataset).when(mockDn).getFSDataset();
      return null;
    }
  }
).when(mockDn).initBlockPool(Mockito.any(BPOfferService.class));
  BPOfferService bpos=setupBPOSForNNs(mockDn,mockNN1,mockNN2);
  List<BPServiceActor> actors=bpos.getBPServiceActors();
  assertEquals(2,actors.size());
  bpos.start();
  try {
    waitForInitialization(bpos);
    waitForBlockReport(mockNN1,mockNN2);
  }
  finally {
    bpos.stop();
    bpos.join();
  }
}
