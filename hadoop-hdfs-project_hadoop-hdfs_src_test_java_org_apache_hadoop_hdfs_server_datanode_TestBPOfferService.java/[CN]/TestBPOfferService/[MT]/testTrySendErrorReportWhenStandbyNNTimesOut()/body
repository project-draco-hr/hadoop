{
  BPOfferService bpos=setupBPOSForNNs(mockNN1,mockNN2);
  bpos.start();
  try {
    waitForInitialization(bpos);
    assertNull(bpos.getActiveNN());
    mockHaStatuses[0]=new NNHAStatusHeartbeat(HAServiceState.ACTIVE,1);
    bpos.triggerHeartbeatForTests();
    assertSame(mockNN1,bpos.getActiveNN());
    Mockito.doAnswer(new BPOfferServiceSynchronousCallAnswer(0)).when(mockNN1).errorReport(Mockito.any(DatanodeRegistration.class),Mockito.anyInt(),Mockito.anyString());
    Mockito.doAnswer(new BPOfferServiceSynchronousCallAnswer(1)).when(mockNN2).errorReport(Mockito.any(DatanodeRegistration.class),Mockito.anyInt(),Mockito.anyString());
    String errorString="Can't send invalid block " + FAKE_BLOCK;
    bpos.trySendErrorReport(DatanodeProtocol.INVALID_BLOCK,errorString);
    bpos.trySendErrorReport(DatanodeProtocol.INVALID_BLOCK,errorString);
    Thread.sleep(10000);
    long difference=secondCallTime - firstCallTime;
    assertTrue("Active namenode trySendErrorReport processing " + "should be independent of standby namenode trySendErrorReport" + " processing ",difference < 5000);
  }
  finally {
    bpos.stop();
  }
}
