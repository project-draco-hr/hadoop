{
  final BPOfferService bpos=setupBPOSForNNs(mockNN1,mockNN2);
  bpos.start();
  try {
    waitForInitialization(bpos);
    assertNull(bpos.getActiveNN());
    mockHaStatuses[0]=new NNHAStatusHeartbeat(HAServiceState.ACTIVE,1);
    bpos.triggerHeartbeatForTests();
    assertSame(mockNN1,bpos.getActiveNN());
    Mockito.doNothing().when(mockNN1).blockReceivedAndDeleted(Mockito.any(DatanodeRegistration.class),Mockito.anyString(),Mockito.any(StorageReceivedDeletedBlocks[].class));
    final IOException re=new IOException("Standby NN is currently not able to process IBR");
    final AtomicBoolean ibrReported=new AtomicBoolean(false);
    Mockito.doAnswer(new Answer<Void>(){
      @Override public Void answer(      InvocationOnMock invocation) throws Throwable {
        ibrReported.set(true);
        throw re;
      }
    }
).when(mockNN2).blockReceivedAndDeleted(Mockito.any(DatanodeRegistration.class),Mockito.anyString(),Mockito.any(StorageReceivedDeletedBlocks[].class));
    DatanodeStorage storage=Mockito.mock(DatanodeStorage.class);
    Mockito.doReturn(storage).when(mockFSDataset).getStorage("storage0");
    bpos.notifyNamenodeReceivedBlock(FAKE_BLOCK,null,"storage0",false);
    bpos.triggerHeartbeatForTests();
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return ibrReported.get();
      }
    }
,100,1000);
    datanodeCommands[1]=new DatanodeCommand[]{new RegisterCommand()};
    assertEquals("IBR size before reRegister should be non-0",1,getStandbyIBRSize(bpos));
    bpos.triggerHeartbeatForTests();
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return getStandbyIBRSize(bpos) == 0;
      }
    }
,100,1000);
  }
  finally {
    bpos.stop();
    bpos.join();
  }
}
