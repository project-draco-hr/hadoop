{
  BPOfferService bpos=setupBPOSForNNs(mockNN1,mockNN2);
  bpos.start();
  try {
    waitForInitialization(bpos);
    assertNull(bpos.getActiveNN());
    mockHaStatuses[0]=new NNHAStatusHeartbeat(HAServiceState.ACTIVE,1);
    bpos.triggerHeartbeatForTests();
    assertSame(mockNN1,bpos.getActiveNN());
    Mockito.doAnswer(new BPOfferServiceSynchronousCallAnswer(0)).when(mockNN1).reportBadBlocks(Mockito.any(LocatedBlock[].class));
    Mockito.doAnswer(new BPOfferServiceSynchronousCallAnswer(1)).when(mockNN2).reportBadBlocks(Mockito.any(LocatedBlock[].class));
    bpos.reportBadBlocks(FAKE_BLOCK,mockFSDataset.getVolume(FAKE_BLOCK).getStorageID(),mockFSDataset.getVolume(FAKE_BLOCK).getStorageType());
    bpos.reportBadBlocks(FAKE_BLOCK,mockFSDataset.getVolume(FAKE_BLOCK).getStorageID(),mockFSDataset.getVolume(FAKE_BLOCK).getStorageType());
    Thread.sleep(10000);
    long difference=secondCallTime - firstCallTime;
    assertTrue("Active namenode reportBadBlock processing should be " + "independent of standby namenode reportBadBlock processing ",difference < 5000);
  }
  finally {
    bpos.stop();
    bpos.join();
  }
}
