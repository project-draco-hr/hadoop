{
  final Configuration conf=new HdfsConfiguration();
  conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,0);
  conf.setBoolean(DFSConfigKeys.DFS_PERSIST_BLOCKS_KEY,true);
  MiniDFSCluster cluster=null;
  long len=0;
  FSDataOutputStream stream;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    FileSystem fs=cluster.getFileSystem();
    stream=fs.create(FILE_PATH,true,BLOCK_SIZE,(short)1,BLOCK_SIZE);
    stream.write(DATA_BEFORE_RESTART);
    if (useFlush)     stream.flush();
 else     stream.hflush();
    while (len <= BLOCK_SIZE) {
      FileStatus status=fs.getFileStatus(FILE_PATH);
      len=status.getLen();
      Thread.sleep(100);
    }
    cluster.restartNameNode();
    FileStatus status=fs.getFileStatus(FILE_PATH);
    assertTrue("Length too short: " + status.getLen(),status.getLen() >= len);
    stream.write(DATA_AFTER_RESTART);
    stream.close();
    FSDataInputStream readStream=fs.open(FILE_PATH);
    try {
      byte[] verifyBuf=new byte[DATA_BEFORE_RESTART.length];
      IOUtils.readFully(readStream,verifyBuf,0,verifyBuf.length);
      assertArrayEquals(DATA_BEFORE_RESTART,verifyBuf);
      IOUtils.readFully(readStream,verifyBuf,0,verifyBuf.length);
      assertArrayEquals(DATA_AFTER_RESTART,verifyBuf);
    }
  finally {
      IOUtils.closeStream(readStream);
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
