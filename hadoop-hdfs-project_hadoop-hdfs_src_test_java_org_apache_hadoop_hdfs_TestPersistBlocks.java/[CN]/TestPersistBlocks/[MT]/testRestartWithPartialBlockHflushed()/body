{
  final Configuration conf=new HdfsConfiguration();
  conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,0);
  MiniDFSCluster cluster=null;
  FSDataOutputStream stream;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    FileSystem fs=cluster.getFileSystem();
    DFSUtilClient.getNNAddress(conf).getPort();
    stream=fs.create(FILE_PATH,true,BLOCK_SIZE,(short)1,BLOCK_SIZE);
    stream.write(DATA_BEFORE_RESTART);
    stream.write((byte)1);
    stream.hflush();
    cluster.restartNameNode();
    stream.write((byte)2);
    stream.hflush();
    stream.close();
    assertEquals(DATA_BEFORE_RESTART.length + 2,fs.getFileStatus(FILE_PATH).getLen());
    FSDataInputStream readStream=fs.open(FILE_PATH);
    try {
      byte[] verifyBuf=new byte[DATA_BEFORE_RESTART.length + 2];
      IOUtils.readFully(readStream,verifyBuf,0,verifyBuf.length);
      byte[] expectedBuf=new byte[DATA_BEFORE_RESTART.length + 2];
      System.arraycopy(DATA_BEFORE_RESTART,0,expectedBuf,0,DATA_BEFORE_RESTART.length);
      System.arraycopy(new byte[]{1,2},0,expectedBuf,DATA_BEFORE_RESTART.length,2);
      assertArrayEquals(expectedBuf,verifyBuf);
    }
  finally {
      IOUtils.closeStream(readStream);
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
