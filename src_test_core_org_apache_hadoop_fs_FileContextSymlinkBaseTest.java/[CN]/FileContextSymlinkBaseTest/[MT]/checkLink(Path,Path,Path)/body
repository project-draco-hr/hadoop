{
  Path dir=new Path(testBaseDir1());
  assertTrue(fc.isFile(linkAbs));
  assertFalse(fc.isDirectory(linkAbs));
  assertFalse(fc.getFileStatus(linkAbs).isSymlink());
  assertFalse(fc.getFileStatus(linkAbs).isDir());
  assertEquals(fileSize,fc.getFileStatus(linkAbs).getLen());
  assertTrue(fc.getFileLinkStatus(linkAbs).isSymlink());
  assertFalse(fc.getFileLinkStatus(linkAbs).isDir());
  assertEquals(targetQual.toString(),fc.getFileLinkStatus(linkAbs).getSymlink().toString());
  assertEquals(targetQual,fc.getFileLinkStatus(linkAbs).getSymlink());
  if (!"file".equals(getScheme())) {
    FileContext localFc=FileContext.getLocalFSFileContext();
    Path linkQual=new Path(testURI().toString(),linkAbs);
    assertEquals(targetQual,localFc.getFileLinkStatus(linkQual).getSymlink());
  }
  assertEquals(expectedTarget,fc.getLinkTarget(linkAbs));
  fc.setWorkingDirectory(dir);
  readFile(new Path("linkToFile"));
  readFile(linkAbs);
  readFile(new Path(testURI().toString(),linkAbs));
  boolean failureExpected="file".equals(getScheme()) ? false : true;
  try {
    readFile(new Path(getScheme() + "://" + testBaseDir1()+ "/linkToFile"));
    assertFalse(failureExpected);
  }
 catch (  Exception e) {
    assertTrue(failureExpected);
  }
  if (!"file".equals(getScheme())) {
    FileContext localFc=FileContext.getLocalFSFileContext();
    readFile(localFc,new Path(testURI().toString(),linkAbs));
  }
}
