{
  rm.start();
  try {
    rm.submitApp(10,"app1","user1",null,"b1");
    rm.submitApp(20,"app2","user2",null,"b1");
    WebResource r=resource();
    ClientResponse response=r.path("ws").path("v1").path("cluster").path("scheduler/").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    JSONObject json=response.getEntity(JSONObject.class);
    JSONObject schedulerInfo=json.getJSONObject("scheduler").getJSONObject("schedulerInfo");
    JSONObject b1=getSubQueue(getSubQueue(schedulerInfo,"b"),"b1");
    JSONArray users=b1.getJSONObject("users").getJSONArray("user");
    for (int i=0; i < 2; ++i) {
      JSONObject user=users.getJSONObject(i);
      assertTrue("User isn't user1 or user2",user.getString("username").equals("user1") || user.getString("username").equals("user2"));
      user.getInt("numActiveApplications");
      user.getInt("numPendingApplications");
      checkResourcesUsed(user);
    }
    try {
      b1.getJSONObject("queues");
      fail("CapacitySchedulerQueueInfo should omit field 'queues'" + "if child queue is empty.");
    }
 catch (    JSONException je) {
      assertEquals("JSONObject[\"queues\"] not found.",je.getMessage());
    }
  }
  finally {
    rm.stop();
  }
}
