{
  if (LOG.isTraceEnabled()) {
    LOG.trace(this + ": trying to construct a BlockReaderLocal " + "for short-circuit reads.");
  }
  if (pathInfo == null) {
    pathInfo=clientContext.getDomainSocketFactory().getPathInfo(inetSocketAddress,conf.getShortCircuitConf());
  }
  if (!pathInfo.getPathState().getUsableForShortCircuit()) {
    PerformanceAdvisory.LOG.debug("{}: {} is not usable for short circuit; " + "giving up on BlockReaderLocal.",this,pathInfo);
    return null;
  }
  ShortCircuitCache cache=clientContext.getShortCircuitCache();
  ExtendedBlockId key=new ExtendedBlockId(block.getBlockId(),block.getBlockPoolId());
  ShortCircuitReplicaInfo info=cache.fetchOrCreate(key,this);
  InvalidToken exc=info.getInvalidTokenException();
  if (exc != null) {
    if (LOG.isTraceEnabled()) {
      LOG.trace(this + ": got InvalidToken exception while trying to " + "construct BlockReaderLocal via "+ pathInfo.getPath());
    }
    throw exc;
  }
  if (info.getReplica() == null) {
    PerformanceAdvisory.LOG.debug("{}: failed to get " + "ShortCircuitReplica. Cannot construct " + "BlockReaderLocal via {}",this,pathInfo.getPath());
    return null;
  }
  return new BlockReaderLocal.Builder(conf.getShortCircuitConf()).setFilename(fileName).setBlock(block).setStartOffset(startOffset).setShortCircuitReplica(info.getReplica()).setVerifyChecksum(verifyChecksum).setCachingStrategy(cachingStrategy).setStorageType(storageType).setTracer(tracer).build();
}
