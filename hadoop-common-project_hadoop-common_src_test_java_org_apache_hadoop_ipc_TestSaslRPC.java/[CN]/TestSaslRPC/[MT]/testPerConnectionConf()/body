{
  TestTokenSecretManager sm=new TestTokenSecretManager();
  final Server server=new RPC.Builder(conf).setProtocol(TestSaslProtocol.class).setInstance(new TestSaslImpl()).setBindAddress(ADDRESS).setPort(0).setNumHandlers(5).setVerbose(true).setSecretManager(sm).build();
  server.start();
  final UserGroupInformation current=UserGroupInformation.getCurrentUser();
  final InetSocketAddress addr=NetUtils.getConnectAddress(server);
  TestTokenIdentifier tokenId=new TestTokenIdentifier(new Text(current.getUserName()));
  Token<TestTokenIdentifier> token=new Token<TestTokenIdentifier>(tokenId,sm);
  SecurityUtil.setTokenService(token,addr);
  current.addToken(token);
  Configuration newConf=new Configuration(conf);
  newConf.set(CommonConfigurationKeysPublic.HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY,"");
  TestSaslProtocol proxy1=null;
  TestSaslProtocol proxy2=null;
  TestSaslProtocol proxy3=null;
  int timeouts[]={111222,3333333};
  try {
    newConf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,timeouts[0]);
    proxy1=RPC.getProxy(TestSaslProtocol.class,TestSaslProtocol.versionID,addr,newConf);
    proxy1.getAuthMethod();
    Client client=WritableRpcEngine.getClient(conf);
    Set<ConnectionId> conns=client.getConnectionIds();
    assertEquals("number of connections in cache is wrong",1,conns.size());
    proxy2=RPC.getProxy(TestSaslProtocol.class,TestSaslProtocol.versionID,addr,newConf);
    proxy2.getAuthMethod();
    assertEquals("number of connections in cache is wrong",1,conns.size());
    newConf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY,timeouts[1]);
    proxy3=RPC.getProxy(TestSaslProtocol.class,TestSaslProtocol.versionID,addr,newConf);
    proxy3.getAuthMethod();
    assertEquals("number of connections in cache is wrong",2,conns.size());
    ConnectionId[] connsArray={RPC.getConnectionIdForProxy(proxy1),RPC.getConnectionIdForProxy(proxy2),RPC.getConnectionIdForProxy(proxy3)};
    assertEquals(connsArray[0],connsArray[1]);
    assertEquals(connsArray[0].getMaxIdleTime(),timeouts[0]);
    assertFalse(connsArray[0].equals(connsArray[2]));
    assertNotSame(connsArray[2].getMaxIdleTime(),timeouts[1]);
  }
  finally {
    server.stop();
    RPC.stopProxy(proxy1);
    RPC.stopProxy(proxy2);
    RPC.stopProxy(proxy3);
  }
}
