{
  TestTokenSecretManager sm=new TestTokenSecretManager();
  final Server server=new RPC.Builder(conf).setProtocol(TestSaslProtocol.class).setInstance(new TestSaslImpl()).setBindAddress(ADDRESS).setPort(0).setNumHandlers(5).setVerbose(true).setSecretManager(sm).build();
  server.start();
  final UserGroupInformation current=UserGroupInformation.getCurrentUser();
  final InetSocketAddress addr=NetUtils.getConnectAddress(server);
  TestTokenIdentifier tokenId=new TestTokenIdentifier(new Text(current.getUserName()));
  Token<TestTokenIdentifier> token=new Token<TestTokenIdentifier>(tokenId,sm);
  SecurityUtil.setTokenService(token,addr);
  current.addToken(token);
  Configuration newConf=new Configuration(conf);
  newConf.set(CommonConfigurationKeysPublic.HADOOP_RPC_SOCKET_FACTORY_CLASS_DEFAULT_KEY,"");
  newConf.set(SERVER_PRINCIPAL_KEY,SERVER_PRINCIPAL_1);
  TestSaslProtocol proxy1=null;
  TestSaslProtocol proxy2=null;
  TestSaslProtocol proxy3=null;
  try {
    proxy1=(TestSaslProtocol)RPC.getProxy(TestSaslProtocol.class,TestSaslProtocol.versionID,addr,newConf);
    proxy1.getAuthMethod();
    Client client=WritableRpcEngine.getClient(conf);
    Set<ConnectionId> conns=client.getConnectionIds();
    assertEquals("number of connections in cache is wrong",1,conns.size());
    proxy2=(TestSaslProtocol)RPC.getProxy(TestSaslProtocol.class,TestSaslProtocol.versionID,addr,newConf);
    proxy2.getAuthMethod();
    assertEquals("number of connections in cache is wrong",1,conns.size());
    newConf.set(SERVER_PRINCIPAL_KEY,SERVER_PRINCIPAL_2);
    proxy3=(TestSaslProtocol)RPC.getProxy(TestSaslProtocol.class,TestSaslProtocol.versionID,addr,newConf);
    proxy3.getAuthMethod();
    ConnectionId[] connsArray=conns.toArray(new ConnectionId[0]);
    assertEquals("number of connections in cache is wrong",2,connsArray.length);
    String p1=connsArray[0].getServerPrincipal();
    String p2=connsArray[1].getServerPrincipal();
    assertFalse("should have different principals",p1.equals(p2));
    assertTrue("principal not as expected",p1.equals(SERVER_PRINCIPAL_1) || p1.equals(SERVER_PRINCIPAL_2));
    assertTrue("principal not as expected",p2.equals(SERVER_PRINCIPAL_1) || p2.equals(SERVER_PRINCIPAL_2));
  }
  finally {
    server.stop();
    RPC.stopProxy(proxy1);
    RPC.stopProxy(proxy2);
    RPC.stopProxy(proxy3);
  }
}
