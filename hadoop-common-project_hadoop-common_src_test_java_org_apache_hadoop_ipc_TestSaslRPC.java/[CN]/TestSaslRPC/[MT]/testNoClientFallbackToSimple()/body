{
  clientFallBackToSimpleAllowed=false;
  assertAuthEquals(SIMPLE,getAuthMethod(SIMPLE,SIMPLE));
  assertAuthEquals(SIMPLE,getAuthMethod(SIMPLE,SIMPLE,UseToken.OTHER));
  assertAuthEquals(SIMPLE,getAuthMethod(SIMPLE,SIMPLE,UseToken.VALID));
  assertAuthEquals(SIMPLE,getAuthMethod(SIMPLE,SIMPLE,UseToken.INVALID));
  assertAuthEquals(NoFallback,getAuthMethod(KERBEROS,SIMPLE));
  assertAuthEquals(NoFallback,getAuthMethod(KERBEROS,SIMPLE,UseToken.OTHER));
  assertAuthEquals(NoFallback,getAuthMethod(KERBEROS,SIMPLE,UseToken.VALID));
  assertAuthEquals(NoFallback,getAuthMethod(KERBEROS,SIMPLE,UseToken.INVALID));
  forceSecretManager=true;
  assertAuthEquals(SIMPLE,getAuthMethod(SIMPLE,SIMPLE));
  assertAuthEquals(SIMPLE,getAuthMethod(SIMPLE,SIMPLE,UseToken.OTHER));
  assertAuthEquals(TOKEN,getAuthMethod(SIMPLE,SIMPLE,UseToken.VALID));
  assertAuthEquals(BadToken,getAuthMethod(SIMPLE,SIMPLE,UseToken.INVALID));
  assertAuthEquals(NoFallback,getAuthMethod(KERBEROS,SIMPLE));
  assertAuthEquals(NoFallback,getAuthMethod(KERBEROS,SIMPLE,UseToken.OTHER));
  assertAuthEquals(TOKEN,getAuthMethod(KERBEROS,SIMPLE,UseToken.VALID));
  assertAuthEquals(BadToken,getAuthMethod(KERBEROS,SIMPLE,UseToken.INVALID));
  assertAuthEquals(Denied(SIMPLE),getAuthMethod(SIMPLE,TOKEN));
  assertAuthEquals(No(TOKEN),getAuthMethod(SIMPLE,TOKEN,UseToken.OTHER));
  assertAuthEquals(TOKEN,getAuthMethod(SIMPLE,TOKEN,UseToken.VALID));
  assertAuthEquals(BadToken,getAuthMethod(SIMPLE,TOKEN,UseToken.INVALID));
  assertAuthEquals(No(TOKEN),getAuthMethod(KERBEROS,TOKEN));
  assertAuthEquals(No(TOKEN),getAuthMethod(KERBEROS,TOKEN,UseToken.OTHER));
  assertAuthEquals(TOKEN,getAuthMethod(KERBEROS,TOKEN,UseToken.VALID));
  assertAuthEquals(BadToken,getAuthMethod(KERBEROS,TOKEN,UseToken.INVALID));
}
