{
  String currentUser=UserGroupInformation.getCurrentUser().getUserName();
  final Configuration serverConf=new Configuration(conf);
  SecurityUtil.setAuthenticationMethod(serverAuth,serverConf);
  UserGroupInformation.setConfiguration(serverConf);
  final UserGroupInformation serverUgi=UserGroupInformation.createRemoteUser(currentUser + "-SERVER/localhost@NONE");
  serverUgi.setAuthenticationMethod(serverAuth);
  final TestTokenSecretManager sm=new TestTokenSecretManager();
  boolean useSecretManager=(serverAuth != SIMPLE);
  if (enableSecretManager != null) {
    useSecretManager&=enableSecretManager.booleanValue();
  }
  if (forceSecretManager != null) {
    useSecretManager|=forceSecretManager.booleanValue();
  }
  final SecretManager<?> serverSm=useSecretManager ? sm : null;
  Server server=serverUgi.doAs(new PrivilegedExceptionAction<Server>(){
    @Override public Server run() throws IOException {
      Server server=new RPC.Builder(serverConf).setProtocol(TestSaslProtocol.class).setInstance(new TestSaslImpl()).setBindAddress(ADDRESS).setPort(0).setNumHandlers(5).setVerbose(true).setSecretManager(serverSm).build();
      server.start();
      return server;
    }
  }
);
  final Configuration clientConf=new Configuration(conf);
  SecurityUtil.setAuthenticationMethod(clientAuth,clientConf);
  clientConf.setBoolean(CommonConfigurationKeys.IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY,clientFallBackToSimpleAllowed);
  UserGroupInformation.setConfiguration(clientConf);
  final UserGroupInformation clientUgi=UserGroupInformation.createRemoteUser(currentUser + "-CLIENT");
  clientUgi.setAuthenticationMethod(clientAuth);
  final InetSocketAddress addr=NetUtils.getConnectAddress(server);
  if (useToken) {
    TestTokenIdentifier tokenId=new TestTokenIdentifier(new Text(clientUgi.getUserName()));
    Token<TestTokenIdentifier> token=useValidToken ? new Token<TestTokenIdentifier>(tokenId,sm) : new Token<TestTokenIdentifier>(tokenId.getBytes(),"bad-password!".getBytes(),tokenId.getKind(),null);
    SecurityUtil.setTokenService(token,addr);
    clientUgi.addToken(token);
  }
  try {
    return clientUgi.doAs(new PrivilegedExceptionAction<String>(){
      @Override public String run() throws IOException {
        TestSaslProtocol proxy=null;
        try {
          proxy=(TestSaslProtocol)RPC.getProxy(TestSaslProtocol.class,TestSaslProtocol.versionID,addr,clientConf);
          proxy.ping();
          if (serverAuth != SIMPLE) {
            assertEquals(SaslRpcServer.SASL_PROPS.get(Sasl.QOP),"auth");
          }
          assertEquals(clientUgi.getUserName(),proxy.getAuthUser());
          return proxy.getAuthMethod().toString();
        }
  finally {
          if (proxy != null) {
            RPC.stopProxy(proxy);
          }
        }
      }
    }
);
  }
  finally {
    server.stop();
  }
}
