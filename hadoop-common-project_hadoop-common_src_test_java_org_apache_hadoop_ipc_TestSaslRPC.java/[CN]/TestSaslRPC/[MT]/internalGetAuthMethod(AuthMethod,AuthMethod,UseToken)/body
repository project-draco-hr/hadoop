{
  final Configuration serverConf=new Configuration(conf);
  serverConf.set(HADOOP_SECURITY_AUTHENTICATION,serverAuth.toString());
  UserGroupInformation.setConfiguration(serverConf);
  final UserGroupInformation serverUgi=(serverAuth == KERBEROS) ? UserGroupInformation.createRemoteUser("server/localhost@NONE") : UserGroupInformation.createRemoteUser("server");
  serverUgi.setAuthenticationMethod(serverAuth);
  final TestTokenSecretManager sm=new TestTokenSecretManager();
  boolean useSecretManager=(serverAuth != SIMPLE);
  if (enableSecretManager != null) {
    useSecretManager&=enableSecretManager.booleanValue();
  }
  if (forceSecretManager != null) {
    useSecretManager|=forceSecretManager.booleanValue();
  }
  final SecretManager<?> serverSm=useSecretManager ? sm : null;
  Server server=serverUgi.doAs(new PrivilegedExceptionAction<Server>(){
    @Override public Server run() throws IOException {
      return setupTestServer(serverConf,5,serverSm);
    }
  }
);
  final Configuration clientConf=new Configuration(conf);
  clientConf.set(HADOOP_SECURITY_AUTHENTICATION,clientAuth.toString());
  clientConf.setBoolean(CommonConfigurationKeys.IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY,clientFallBackToSimpleAllowed);
  UserGroupInformation.setConfiguration(clientConf);
  final UserGroupInformation clientUgi=UserGroupInformation.createRemoteUser("client");
  clientUgi.setAuthenticationMethod(clientAuth);
  final InetSocketAddress addr=NetUtils.getConnectAddress(server);
  if (tokenType != UseToken.NONE) {
    TestTokenIdentifier tokenId=new TestTokenIdentifier(new Text(clientUgi.getUserName()));
    Token<TestTokenIdentifier> token=null;
switch (tokenType) {
case VALID:
      token=new Token<>(tokenId,sm);
    SecurityUtil.setTokenService(token,addr);
  break;
case INVALID:
token=new Token<>(tokenId.getBytes(),"bad-password!".getBytes(),tokenId.getKind(),null);
SecurityUtil.setTokenService(token,addr);
break;
case OTHER:
token=new Token<>();
break;
case NONE:
}
clientUgi.addToken(token);
}
try {
LOG.info("trying ugi:" + clientUgi + " tokens:"+ clientUgi.getTokens());
return clientUgi.doAs(new PrivilegedExceptionAction<String>(){
@Override public String run() throws IOException {
TestRpcService proxy=null;
try {
proxy=getClient(addr,clientConf);
proxy.ping(null,newEmptyRequest());
assertEquals(clientUgi.getUserName(),convert(proxy.getAuthUser(null,newEmptyRequest())));
AuthMethod authMethod=convert(proxy.getAuthMethod(null,newEmptyRequest()));
assertEquals((authMethod != SIMPLE) ? expectedQop.saslQop : null,RPC.getConnectionIdForProxy(proxy).getSaslQop());
return authMethod.toString();
}
 catch (ServiceException se) {
if (se.getCause() instanceof RemoteException) {
throw (RemoteException)se.getCause();
}
 else if (se.getCause() instanceof IOException) {
throw (IOException)se.getCause();
}
 else {
throw new RuntimeException(se.getCause());
}
}
 finally {
if (proxy != null) {
RPC.stopProxy(proxy);
}
}
}
}
);
}
  finally {
server.stop();
}
}
