{
  final ArrayList<Throwable> failures=new ArrayList<Throwable>(1);
  Configuration conf=new Configuration();
  conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY,0);
  ShuffleHandler shuffleHandler=new ShuffleHandler(){
    @Override protected Shuffle getShuffle(    Configuration conf){
      return new Shuffle(conf){
        @Override protected MapOutputInfo getMapOutputInfo(        String mapId,        int reduce,        String jobId,        String user) throws IOException {
          return null;
        }
        @Override protected void populateHeaders(        List<String> mapIds,        String jobId,        String user,        int reduce,        HttpRequest request,        HttpResponse response,        boolean keepAliveParam,        Map<String,MapOutputInfo> infoMap) throws IOException {
          super.setResponseHeaders(response,keepAliveParam,100);
        }
        @Override protected void verifyRequest(        String appid,        ChannelHandlerContext ctx,        HttpRequest request,        HttpResponse response,        URL requestUri) throws IOException {
        }
        @Override protected ChannelFuture sendMapOutput(        ChannelHandlerContext ctx,        Channel ch,        String user,        String mapId,        int reduce,        MapOutputInfo info) throws IOException {
          ShuffleHeader header=new ShuffleHeader("attempt_12345_1_m_1_0",5678,5678,1);
          DataOutputBuffer dob=new DataOutputBuffer();
          header.write(dob);
          ch.write(wrappedBuffer(dob.getData(),0,dob.getLength()));
          dob=new DataOutputBuffer();
          for (int i=0; i < 100000; ++i) {
            header.write(dob);
          }
          return ch.write(wrappedBuffer(dob.getData(),0,dob.getLength()));
        }
        @Override protected void sendError(        ChannelHandlerContext ctx,        HttpResponseStatus status){
          if (failures.size() == 0) {
            failures.add(new Error());
            ctx.getChannel().close();
          }
        }
        @Override protected void sendError(        ChannelHandlerContext ctx,        String message,        HttpResponseStatus status){
          if (failures.size() == 0) {
            failures.add(new Error());
            ctx.getChannel().close();
          }
        }
      }
;
    }
  }
;
  shuffleHandler.init(conf);
  shuffleHandler.start();
  URL url=new URL("http://127.0.0.1:" + shuffleHandler.getConfig().get(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY) + "/mapOutput?job=job_12345_1&reduce=1&map=attempt_12345_1_m_1_0");
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_NAME,ShuffleHeader.DEFAULT_HTTP_HEADER_NAME);
  conn.setRequestProperty(ShuffleHeader.HTTP_HEADER_VERSION,ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION);
  conn.connect();
  DataInputStream input=new DataInputStream(conn.getInputStream());
  Assert.assertEquals(HttpURLConnection.HTTP_OK,conn.getResponseCode());
  Assert.assertEquals("close",conn.getHeaderField(HttpHeaders.CONNECTION));
  ShuffleHeader header=new ShuffleHeader();
  header.readFields(input);
  input.close();
  shuffleHandler.stop();
  Assert.assertTrue("sendError called when client closed connection",failures.size() == 0);
}
