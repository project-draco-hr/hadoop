{
  final String user="someuser";
  final ApplicationId appId=ApplicationId.newInstance(12345,1);
  final JobID jobId=JobID.downgrade(TypeConverter.fromYarn(appId));
  final File tmpDir=new File(System.getProperty("test.build.data",System.getProperty("java.io.tmpdir")),TestShuffleHandler.class.getName());
  Configuration conf=new Configuration();
  conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY,0);
  conf.setInt(ShuffleHandler.MAX_SHUFFLE_CONNECTIONS,3);
  ShuffleHandler shuffle=new ShuffleHandler();
  shuffle.setRecoveryPath(new Path(tmpDir.toString()));
  tmpDir.mkdirs();
  try {
    shuffle.init(conf);
    shuffle.start();
    DataOutputBuffer outputBuffer=new DataOutputBuffer();
    outputBuffer.reset();
    Token<JobTokenIdentifier> jt=new Token<JobTokenIdentifier>("identifier".getBytes(),"password".getBytes(),new Text(user),new Text("shuffleService"));
    jt.write(outputBuffer);
    shuffle.initializeApplication(new ApplicationInitializationContext(user,appId,ByteBuffer.wrap(outputBuffer.getData(),0,outputBuffer.getLength())));
    int rc=getShuffleResponseCode(shuffle,jt);
    Assert.assertEquals(HttpURLConnection.HTTP_OK,rc);
    shuffle.close();
    shuffle=new ShuffleHandler();
    shuffle.setRecoveryPath(new Path(tmpDir.toString()));
    shuffle.init(conf);
    shuffle.start();
    rc=getShuffleResponseCode(shuffle,jt);
    Assert.assertEquals(HttpURLConnection.HTTP_OK,rc);
    shuffle.stopApplication(new ApplicationTerminationContext(appId));
    rc=getShuffleResponseCode(shuffle,jt);
    Assert.assertEquals(HttpURLConnection.HTTP_UNAUTHORIZED,rc);
    shuffle.close();
    shuffle=new ShuffleHandler();
    shuffle.setRecoveryPath(new Path(tmpDir.toString()));
    shuffle.init(conf);
    shuffle.start();
    rc=getShuffleResponseCode(shuffle,jt);
    Assert.assertEquals(HttpURLConnection.HTTP_UNAUTHORIZED,rc);
  }
  finally {
    if (shuffle != null) {
      shuffle.close();
    }
    FileUtil.fullyDelete(tmpDir);
  }
}
