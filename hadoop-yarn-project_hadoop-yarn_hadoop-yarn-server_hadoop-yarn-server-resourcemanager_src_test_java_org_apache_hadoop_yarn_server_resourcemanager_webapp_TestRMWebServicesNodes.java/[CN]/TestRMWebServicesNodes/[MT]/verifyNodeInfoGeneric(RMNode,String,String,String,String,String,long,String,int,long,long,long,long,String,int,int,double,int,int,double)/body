{
  ResourceScheduler sched=rm.getResourceScheduler();
  SchedulerNodeReport report=sched.getNodeReport(node.getNodeID());
  WebServicesTestUtils.checkStringMatch("state",node.getState().toString(),state);
  WebServicesTestUtils.checkStringMatch("rack",node.getRackName(),rack);
  WebServicesTestUtils.checkStringMatch("id",node.getNodeID().toString(),id);
  WebServicesTestUtils.checkStringMatch("nodeHostName",node.getNodeID().getHost(),nodeHostName);
  WebServicesTestUtils.checkStringMatch("healthReport",String.valueOf(node.getHealthReport()),healthReport);
  String expectedHttpAddress=node.getNodeID().getHost() + ":" + node.getHttpPort();
  WebServicesTestUtils.checkStringMatch("nodeHTTPAddress",expectedHttpAddress,nodeHTTPAddress);
  WebServicesTestUtils.checkStringMatch("version",node.getNodeManagerVersion(),version);
  if (node.getNodeUtilization() != null) {
    ResourceUtilization nodeResource=ResourceUtilization.newInstance(nodePhysicalMemoryMB,nodeVirtualMemoryMB,(float)nodeCPUUsage);
    assertEquals("nodeResourceUtilization doesn't match",node.getNodeUtilization(),nodeResource);
  }
  if (node.getAggregatedContainersUtilization() != null) {
    ResourceUtilization containerResource=ResourceUtilization.newInstance(containersPhysicalMemoryMB,containersVirtualMemoryMB,(float)containersCPUUsage);
    assertEquals("containerResourceUtilization doesn't match",node.getAggregatedContainersUtilization(),containerResource);
  }
  long expectedHealthUpdate=node.getLastHealthReportTime();
  assertEquals("lastHealthUpdate doesn't match, got: " + lastHealthUpdate + " expected: "+ expectedHealthUpdate,expectedHealthUpdate,lastHealthUpdate);
  if (report != null) {
    assertEquals("numContainers doesn't match: " + numContainers,report.getNumContainers(),numContainers);
    assertEquals("usedMemoryMB doesn't match: " + usedMemoryMB,report.getUsedResource().getMemorySize(),usedMemoryMB);
    assertEquals("availMemoryMB doesn't match: " + availMemoryMB,report.getAvailableResource().getMemorySize(),availMemoryMB);
    assertEquals("usedVirtualCores doesn't match: " + usedVirtualCores,report.getUsedResource().getVirtualCores(),usedVirtualCores);
    assertEquals("availVirtualCores doesn't match: " + availVirtualCores,report.getAvailableResource().getVirtualCores(),availVirtualCores);
  }
}
