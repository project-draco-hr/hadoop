{
  WebResource r=resource();
  MockNM nm1=rm.registerNode("h1:1234",5120);
  MockNM nm2=rm.registerNode("h2:1234",5120);
  rm.sendNodeStarted(nm1);
  rm.sendNodeStarted(nm2);
  rm.NMwaitForState(nm1.getNodeId(),NodeState.RUNNING);
  rm.NMwaitForState(nm2.getNodeId(),NodeState.RUNNING);
  rm.sendNodeLost(nm1);
  rm.sendNodeLost(nm2);
  ClientResponse response=r.path("ws").path("v1").path("cluster").path("nodes").queryParam("states",NodeState.LOST.toString()).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
  assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
  JSONObject json=response.getEntity(JSONObject.class);
  JSONObject nodes=json.getJSONObject("nodes");
  assertEquals("incorrect number of elements",1,nodes.length());
  JSONArray nodeArray=nodes.getJSONArray("node");
  assertEquals("incorrect number of elements",2,nodeArray.length());
  for (int i=0; i < nodeArray.length(); ++i) {
    JSONObject info=nodeArray.getJSONObject(i);
    String[] node=info.get("id").toString().split(":");
    NodeId nodeId=NodeId.newInstance(node[0],Integer.parseInt(node[1]));
    RMNode rmNode=rm.getRMContext().getInactiveRMNodes().get(nodeId);
    WebServicesTestUtils.checkStringMatch("nodeHTTPAddress","",info.getString("nodeHTTPAddress"));
    if (rmNode != null) {
      WebServicesTestUtils.checkStringMatch("state",rmNode.getState().toString(),info.getString("state"));
    }
  }
}
