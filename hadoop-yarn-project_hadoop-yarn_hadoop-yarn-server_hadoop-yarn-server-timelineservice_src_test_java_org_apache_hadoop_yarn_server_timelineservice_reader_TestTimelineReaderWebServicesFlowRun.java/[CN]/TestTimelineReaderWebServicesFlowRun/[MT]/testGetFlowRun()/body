{
  Client client=createClient();
  try {
    URI uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flowrun/cluster1/flow_name/1002345678919?userid=user1");
    ClientResponse resp=getResponse(client,uri);
    FlowRunEntity entity=resp.getEntity(FlowRunEntity.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,resp.getType());
    assertNotNull(entity);
    assertEquals("user1@flow_name/1002345678919",entity.getId());
    assertEquals(2,entity.getMetrics().size());
    TimelineMetric m1=newMetric("HDFS_BYTES_READ",ts - 80000,57L);
    TimelineMetric m2=newMetric("MAP_SLOT_MILLIS",ts - 80000,141L);
    for (    TimelineMetric metric : entity.getMetrics()) {
      assertTrue(verifyMetrics(metric,m1,m2));
    }
    uri=URI.create("http://localhost:" + serverPort + "/ws/v2/"+ "timeline/flowrun/flow_name/1002345678919?userid=user1");
    resp=getResponse(client,uri);
    entity=resp.getEntity(FlowRunEntity.class);
    assertNotNull(entity);
    assertEquals("user1@flow_name/1002345678919",entity.getId());
    assertEquals(2,entity.getMetrics().size());
    m1=newMetric("HDFS_BYTES_READ",ts - 80000,57L);
    m2=newMetric("MAP_SLOT_MILLIS",ts - 80000,141L);
    for (    TimelineMetric metric : entity.getMetrics()) {
      assertTrue(verifyMetrics(metric,m1,m2));
    }
  }
  finally {
    client.destroy();
  }
}
