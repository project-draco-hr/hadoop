{
  long numProcessors=8;
  long cpuFrequencyKHz=2392781;
  String fileContent="";
  for (int i=0; i < numProcessors; i++) {
    fileContent+=String.format(CPUINFO_FORMAT,i,cpuFrequencyKHz / 1000D) + "\n";
  }
  File tempFile=new File(FAKE_CPUFILE);
  tempFile.deleteOnExit();
  FileWriter fWriter=new FileWriter(FAKE_CPUFILE);
  fWriter.write(fileContent);
  fWriter.close();
  assertEquals(plugin.getNumProcessors(),numProcessors);
  assertEquals(plugin.getCpuFrequency(),cpuFrequencyKHz);
  long uTime=54972994;
  long nTime=188860;
  long sTime=19803373;
  tempFile=new File(FAKE_STATFILE);
  tempFile.deleteOnExit();
  updateStatFile(uTime,nTime,sTime);
  assertEquals(plugin.getCumulativeCpuTime(),FAKE_JIFFY_LENGTH * (uTime + nTime + sTime));
  assertEquals(plugin.getCpuUsage(),(float)(TaskTrackerStatus.UNAVAILABLE));
  uTime+=100L;
  plugin.advanceTime(200L);
  updateStatFile(uTime,nTime,sTime);
  assertEquals(plugin.getCumulativeCpuTime(),FAKE_JIFFY_LENGTH * (uTime + nTime + sTime));
  assertEquals(plugin.getCpuUsage(),6.25F);
  uTime+=600L;
  plugin.advanceTime(300L);
  updateStatFile(uTime,nTime,sTime);
  assertEquals(plugin.getCpuUsage(),25F);
  uTime+=1L;
  plugin.advanceTime(1L);
  updateStatFile(uTime,nTime,sTime);
  assertEquals(plugin.getCumulativeCpuTime(),FAKE_JIFFY_LENGTH * (uTime + nTime + sTime));
  assertEquals(plugin.getCpuUsage(),25F);
}
