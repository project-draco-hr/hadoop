{
  if (ops.size() == 0) {
    return null;
  }
  StringBuffer finalOpArg=new StringBuffer(PrivilegedOperation.CGROUP_ARG_PREFIX);
  boolean noneArgsOnly=true;
  for (  PrivilegedOperation op : ops) {
    if (!op.getOperationType().equals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP)) {
      LOG.warn("Unsupported operation type: " + op.getOperationType());
      throw new PrivilegedOperationException("Unsupported operation type:" + op.getOperationType());
    }
    List<String> args=op.getArguments();
    if (args.size() != 1) {
      LOG.warn("Invalid number of args: " + args.size());
      throw new PrivilegedOperationException("Invalid number of args: " + args.size());
    }
    String arg=args.get(0);
    String tasksFile=StringUtils.substringAfter(arg,PrivilegedOperation.CGROUP_ARG_PREFIX);
    if (tasksFile == null || tasksFile.isEmpty()) {
      LOG.warn("Invalid argument: " + arg);
      throw new PrivilegedOperationException("Invalid argument: " + arg);
    }
    if (tasksFile.equals("none")) {
      continue;
    }
    if (noneArgsOnly == false) {
      finalOpArg.append(PrivilegedOperation.LINUX_FILE_PATH_SEPARATOR);
      finalOpArg.append(tasksFile);
    }
 else {
      finalOpArg.append(tasksFile);
      noneArgsOnly=false;
    }
  }
  if (noneArgsOnly) {
    finalOpArg.append("none");
  }
  PrivilegedOperation finalOp=new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,finalOpArg.toString());
  return finalOp;
}
