{
  assumeTrue(!Shell.WINDOWS);
  File tempStaticMapFile=File.createTempFile("nfs-",".map");
  tempStaticMapFile.delete();
  Configuration conf=new Configuration();
  conf.setLong(IdMappingConstant.USERGROUPID_UPDATE_MILLIS_KEY,1000);
  conf.set(IdMappingConstant.STATIC_ID_MAPPING_FILE_KEY,tempStaticMapFile.getPath());
  ShellBasedIdMapping refIdMapping=new ShellBasedIdMapping(conf,true);
  ShellBasedIdMapping incrIdMapping=new ShellBasedIdMapping(conf);
  BiMap<Integer,String> uidNameMap=refIdMapping.getUidNameMap();
  BiMap<Integer,String> gidNameMap=refIdMapping.getGidNameMap();
  incrIdMapping.clearNameMaps();
  uidNameMap=refIdMapping.getUidNameMap();
{
    BiMap.Entry<Integer,String> me=uidNameMap.entrySet().iterator().next();
    Integer id=me.getKey();
    String name=me.getValue();
    Integer nid=incrIdMapping.getUid(name);
    assertEquals(id,nid);
    incrIdMapping.clearNameMaps();
    Integer rid=id + 10000;
    String smapStr="uid " + rid + " "+ id;
    createStaticMapFile(tempStaticMapFile,smapStr);
    nid=incrIdMapping.getUid(name);
    assertEquals(rid,nid);
  }
  incrIdMapping.clearNameMaps();
  gidNameMap=refIdMapping.getGidNameMap();
{
    BiMap.Entry<Integer,String> me=gidNameMap.entrySet().iterator().next();
    Integer id=me.getKey();
    String name=me.getValue();
    Integer nid=incrIdMapping.getGid(name);
    assertEquals(id,nid);
    incrIdMapping.clearNameMaps();
    Integer rid=id + 10000;
    String smapStr="gid " + rid + " "+ id;
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
    }
    createStaticMapFile(tempStaticMapFile,smapStr);
    nid=incrIdMapping.getGid(name);
    assertEquals(rid,nid);
  }
}
