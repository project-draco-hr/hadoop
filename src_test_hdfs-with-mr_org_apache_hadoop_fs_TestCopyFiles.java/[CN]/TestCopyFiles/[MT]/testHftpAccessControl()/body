{
  MiniDFSCluster cluster=null;
  try {
    final UnixUserGroupInformation DFS_UGI=createUGI("dfs",true);
    final UnixUserGroupInformation USER_UGI=createUGI("user",false);
    final Configuration dfsConf=new Configuration();
    UnixUserGroupInformation.saveToConf(dfsConf,UnixUserGroupInformation.UGI_PROPERTY_NAME,DFS_UGI);
    cluster=new MiniDFSCluster(dfsConf,2,true,null);
    cluster.waitActive();
    final String httpAdd=dfsConf.get("dfs.http.address");
    final URI nnURI=FileSystem.getDefaultUri(dfsConf);
    final String nnUri=nnURI.toString();
    final Path home=createHomeDirectory(FileSystem.get(nnURI,dfsConf),USER_UGI);
    final Configuration userConf=new Configuration();
    UnixUserGroupInformation.saveToConf(userConf,UnixUserGroupInformation.UGI_PROPERTY_NAME,USER_UGI);
    final FileSystem fs=FileSystem.get(nnURI,userConf);
    final Path srcrootpath=new Path(home,"src_root");
    final String srcrootdir=srcrootpath.toString();
    final Path dstrootpath=new Path(home,"dst_root");
    final String dstrootdir=dstrootpath.toString();
    final DistCp distcp=new DistCp(userConf);
    FileSystem.mkdirs(fs,srcrootpath,new FsPermission((short)0700));
    final String[] args={"hftp://" + httpAdd + srcrootdir,nnUri + dstrootdir};
{
      fs.setPermission(srcrootpath,new FsPermission((short)0));
      assertEquals(-3,ToolRunner.run(distcp,args));
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
