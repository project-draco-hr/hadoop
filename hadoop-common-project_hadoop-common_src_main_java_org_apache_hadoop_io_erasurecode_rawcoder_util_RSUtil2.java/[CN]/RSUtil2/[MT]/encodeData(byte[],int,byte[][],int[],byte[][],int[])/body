{
  int numInputs=inputs.length;
  int numOutputs=outputs.length;
  int l, i, j, iPos, oPos;
  byte[] input, output;
  byte s;
  final int times=dataLen / 8;
  final int extra=dataLen - dataLen % 8;
  byte[] tableLine;
  for (l=0; l < numOutputs; l++) {
    output=outputs[l];
    for (j=0; j < numInputs; j++) {
      input=inputs[j];
      iPos=inputOffsets[j];
      oPos=outputOffsets[l];
      s=gfTables[j * 32 + l * numInputs * 32 + 1];
      tableLine=GF256.gfMulTab()[s & 0xff];
      for (i=0; i < times; i++, iPos+=8, oPos+=8) {
        output[oPos + 0]^=tableLine[0xff & input[iPos + 0]];
        output[oPos + 1]^=tableLine[0xff & input[iPos + 1]];
        output[oPos + 2]^=tableLine[0xff & input[iPos + 2]];
        output[oPos + 3]^=tableLine[0xff & input[iPos + 3]];
        output[oPos + 4]^=tableLine[0xff & input[iPos + 4]];
        output[oPos + 5]^=tableLine[0xff & input[iPos + 5]];
        output[oPos + 6]^=tableLine[0xff & input[iPos + 6]];
        output[oPos + 7]^=tableLine[0xff & input[iPos + 7]];
      }
      for (i=extra; i < dataLen; i++, iPos++, oPos++) {
        output[oPos]^=tableLine[0xff & input[iPos]];
      }
    }
  }
}
