{
  startDFSCluster(1,1);
  final String dataDir=cluster.getDataDirectory();
  DataNode dn=cluster.getDataNodes().get(0);
  List<String> newDirs=Lists.newArrayList();
  final int NUM_NEW_DIRS=4;
  for (int i=0; i < NUM_NEW_DIRS; i++) {
    File newVolume=new File(dataDir,"new_vol" + i);
    newDirs.add(newVolume.toString());
    if (i % 2 == 0) {
      newVolume.createNewFile();
    }
  }
  String newValue=dn.getConf().get(DFS_DATANODE_DATA_DIR_KEY) + "," + Joiner.on(",").join(newDirs);
  try {
    dn.reconfigurePropertyImpl(DFS_DATANODE_DATA_DIR_KEY,newValue);
    fail("Expect to throw IOException.");
  }
 catch (  ReconfigurationException e) {
    String errorMessage=e.getCause().getMessage();
    String messages[]=errorMessage.split("\\r?\\n");
    assertEquals(2,messages.length);
    assertThat(messages[0],containsString("new_vol0"));
    assertThat(messages[1],containsString("new_vol2"));
  }
  FsDatasetSpi<?> dataset=dn.getFSDataset();
  try (FsDatasetSpi.FsVolumeReferences volumes=dataset.getFsVolumeReferences()){
    for (    FsVolumeSpi volume : volumes) {
      assertThat(volume.getBasePath(),is(not(anyOf(is(newDirs.get(0)),is(newDirs.get(2))))));
    }
  }
   DataStorage storage=dn.getStorage();
  for (int i=0; i < storage.getNumStorageDirs(); i++) {
    Storage.StorageDirectory sd=storage.getStorageDir(i);
    assertThat(sd.getRoot().toString(),is(not(anyOf(is(newDirs.get(0)),is(newDirs.get(2))))));
  }
  String[] effectiveVolumes=dn.getConf().get(DFS_DATANODE_DATA_DIR_KEY).split(",");
  assertEquals(4,effectiveVolumes.length);
  for (  String ev : effectiveVolumes) {
    assertThat(StorageLocation.parse(ev).getFile().getCanonicalPath(),is(not(anyOf(is(newDirs.get(0)),is(newDirs.get(2))))));
  }
}
