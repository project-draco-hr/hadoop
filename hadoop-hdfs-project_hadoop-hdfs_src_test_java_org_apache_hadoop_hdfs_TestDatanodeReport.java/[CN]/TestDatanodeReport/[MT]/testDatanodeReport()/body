{
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,500);
  conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1L);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_OF_DATANODES).build();
  try {
    cluster.waitActive();
    final String bpid=cluster.getNamesystem().getBlockPoolId();
    final List<DataNode> datanodes=cluster.getDataNodes();
    final DFSClient client=cluster.getFileSystem().dfs;
    assertReports(NUM_OF_DATANODES,DatanodeReportType.ALL,client,datanodes,bpid);
    assertReports(NUM_OF_DATANODES,DatanodeReportType.LIVE,client,datanodes,bpid);
    assertReports(0,DatanodeReportType.DEAD,client,datanodes,bpid);
    final DataNode last=datanodes.get(datanodes.size() - 1);
    LOG.info("XXX shutdown datanode " + last.getDatanodeUuid());
    last.shutdown();
    DatanodeInfo[] nodeInfo=client.datanodeReport(DatanodeReportType.DEAD);
    while (nodeInfo.length != 1) {
      try {
        Thread.sleep(500);
      }
 catch (      Exception e) {
      }
      nodeInfo=client.datanodeReport(DatanodeReportType.DEAD);
    }
    assertReports(NUM_OF_DATANODES,DatanodeReportType.ALL,client,datanodes,null);
    assertReports(NUM_OF_DATANODES - 1,DatanodeReportType.LIVE,client,datanodes,null);
    assertReports(1,DatanodeReportType.DEAD,client,datanodes,null);
    Thread.sleep(5000);
    assertGauge("ExpiredHeartbeats",1,getMetrics("FSNamesystem"));
  }
  finally {
    cluster.shutdown();
  }
}
