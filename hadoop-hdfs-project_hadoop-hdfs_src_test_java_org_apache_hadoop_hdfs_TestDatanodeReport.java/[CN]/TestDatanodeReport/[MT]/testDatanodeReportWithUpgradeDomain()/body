{
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,500);
  conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1L);
  conf.setClass(DFSConfigKeys.DFS_NAMENODE_HOSTS_PROVIDER_CLASSNAME_KEY,CombinedHostFileManager.class,HostConfigManager.class);
  HostsFileWriter hostsFileWriter=new HostsFileWriter();
  hostsFileWriter.initialize(conf,"temp/datanodeReport");
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  final DFSClient client=cluster.getFileSystem().dfs;
  final String ud1="ud1";
  final String ud2="ud2";
  try {
    cluster.waitActive();
    DatanodeAdminProperties datanode=new DatanodeAdminProperties();
    datanode.setHostName(cluster.getDataNodes().get(0).getDatanodeId().getHostName());
    datanode.setUpgradeDomain(ud1);
    hostsFileWriter.initIncludeHosts(new DatanodeAdminProperties[]{datanode});
    client.refreshNodes();
    DatanodeInfo[] all=client.datanodeReport(DatanodeReportType.ALL);
    assertEquals(all[0].getUpgradeDomain(),ud1);
    datanode.setUpgradeDomain(null);
    hostsFileWriter.initIncludeHosts(new DatanodeAdminProperties[]{datanode});
    client.refreshNodes();
    all=client.datanodeReport(DatanodeReportType.ALL);
    assertEquals(all[0].getUpgradeDomain(),null);
    datanode.setUpgradeDomain(ud2);
    hostsFileWriter.initIncludeHosts(new DatanodeAdminProperties[]{datanode});
    client.refreshNodes();
    all=client.datanodeReport(DatanodeReportType.ALL);
    assertEquals(all[0].getUpgradeDomain(),ud2);
  }
  finally {
    cluster.shutdown();
  }
}
