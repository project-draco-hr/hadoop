{
  final String mediaType=mType;
  final String contentType=cType;
  final String body=reqBody;
  final String renewer=renUser;
  KerberosTestUtils.doAsClient(new Callable<Void>(){
    @Override public Void call() throws Exception {
      ClientResponse response=resource().path("ws").path("v1").path("cluster").path("delegation-token").accept(contentType).entity(body,mediaType).post(ClientResponse.class);
      assertEquals(Status.OK,response.getClientResponseStatus());
      DelegationToken tok=getDelegationTokenFromResponse(response);
      assertFalse(tok.getToken().isEmpty());
      Token<RMDelegationTokenIdentifier> token=new Token<RMDelegationTokenIdentifier>();
      token.decodeFromUrlString(tok.getToken());
      assertEquals(renewer,token.decodeIdentifier().getRenewer().toString());
      assertValidRMToken(tok.getToken());
      DelegationToken dtoken=new DelegationToken();
      response=resource().path("ws").path("v1").path("cluster").path("delegation-token").accept(contentType).entity(dtoken,mediaType).post(ClientResponse.class);
      assertEquals(Status.OK,response.getClientResponseStatus());
      tok=getDelegationTokenFromResponse(response);
      assertFalse(tok.getToken().isEmpty());
      token=new Token<RMDelegationTokenIdentifier>();
      token.decodeFromUrlString(tok.getToken());
      assertEquals("",token.decodeIdentifier().getRenewer().toString());
      assertValidRMToken(tok.getToken());
      return null;
    }
  }
);
}
