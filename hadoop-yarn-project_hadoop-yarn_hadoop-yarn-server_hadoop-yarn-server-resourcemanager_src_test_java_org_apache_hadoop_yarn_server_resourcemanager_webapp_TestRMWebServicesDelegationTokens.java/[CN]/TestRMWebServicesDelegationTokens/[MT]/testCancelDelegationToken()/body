{
  rm.start();
  this.client().addFilter(new LoggingFilter(System.out));
  if (isKerberosAuth == false) {
    verifySimpleAuthCancel();
    return;
  }
  final DelegationToken dtoken=new DelegationToken();
  String renewer="client2";
  dtoken.setRenewer(renewer);
  String[] mediaTypes={MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML};
  for (  final String mediaType : mediaTypes) {
    for (    final String contentType : mediaTypes) {
      KerberosTestUtils.doAsClient(new Callable<Void>(){
        @Override public Void call() throws Exception {
          ClientResponse response=resource().path("ws").path("v1").path("cluster").path("delegation-token").accept(contentType).entity(dtoken,mediaType).post(ClientResponse.class);
          assertEquals(Status.OK,response.getClientResponseStatus());
          DelegationToken tok=getDelegationTokenFromResponse(response);
          response=resource().path("ws").path("v1").path("cluster").path("delegation-token").header(yarnTokenHeader,tok.getToken()).accept(contentType).delete(ClientResponse.class);
          assertEquals(Status.OK,response.getClientResponseStatus());
          assertTokenCancelled(tok.getToken());
          return null;
        }
      }
);
      final DelegationToken tmpToken=KerberosTestUtils.doAsClient(new Callable<DelegationToken>(){
        @Override public DelegationToken call() throws Exception {
          ClientResponse response=resource().path("ws").path("v1").path("cluster").path("delegation-token").accept(contentType).entity(dtoken,mediaType).post(ClientResponse.class);
          assertEquals(Status.OK,response.getClientResponseStatus());
          DelegationToken tok=getDelegationTokenFromResponse(response);
          return tok;
        }
      }
);
      KerberosTestUtils.doAs(renewer,new Callable<Void>(){
        @Override public Void call() throws Exception {
          ClientResponse response=resource().path("ws").path("v1").path("cluster").path("delegation-token").header(yarnTokenHeader,tmpToken.getToken()).accept(contentType).delete(ClientResponse.class);
          assertEquals(Status.OK,response.getClientResponseStatus());
          assertTokenCancelled(tmpToken.getToken());
          return null;
        }
      }
);
      final DelegationToken tmpToken2=KerberosTestUtils.doAsClient(new Callable<DelegationToken>(){
        @Override public DelegationToken call() throws Exception {
          ClientResponse response=resource().path("ws").path("v1").path("cluster").path("delegation-token").accept(contentType).entity(dtoken,mediaType).post(ClientResponse.class);
          assertEquals(Status.OK,response.getClientResponseStatus());
          DelegationToken tok=getDelegationTokenFromResponse(response);
          return tok;
        }
      }
);
      KerberosTestUtils.doAs("client3",new Callable<Void>(){
        @Override public Void call() throws Exception {
          ClientResponse response=resource().path("ws").path("v1").path("cluster").path("delegation-token").header(yarnTokenHeader,tmpToken2.getToken()).accept(contentType).delete(ClientResponse.class);
          assertEquals(Status.FORBIDDEN,response.getClientResponseStatus());
          assertValidRMToken(tmpToken2.getToken());
          return null;
        }
      }
);
      testCancelTokenBadRequests(mediaType,contentType);
    }
  }
  rm.stop();
  return;
}
