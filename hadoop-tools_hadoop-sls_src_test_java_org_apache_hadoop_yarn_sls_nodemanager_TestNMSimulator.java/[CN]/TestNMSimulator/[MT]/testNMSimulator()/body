{
  NMSimulator node1=new NMSimulator();
  node1.init("/rack1/node1",GB * 10,10,0,1000,rm);
  node1.middleStep();
  int numClusterNodes=rm.getResourceScheduler().getNumClusterNodes();
  int cumulativeSleepTime=0;
  int sleepInterval=100;
  while (numClusterNodes != 1 && cumulativeSleepTime < 5000) {
    Thread.sleep(sleepInterval);
    cumulativeSleepTime=cumulativeSleepTime + sleepInterval;
    numClusterNodes=rm.getResourceScheduler().getNumClusterNodes();
  }
  Assert.assertEquals(1,rm.getResourceScheduler().getNumClusterNodes());
  Assert.assertEquals(GB * 10,rm.getResourceScheduler().getRootQueueMetrics().getAvailableMB());
  Assert.assertEquals(10,rm.getResourceScheduler().getRootQueueMetrics().getAvailableVirtualCores());
  ContainerId cId1=newContainerId(1,1,1);
  Container container1=Container.newInstance(cId1,null,null,Resources.createResource(GB,1),null,null);
  node1.addNewContainer(container1,100000l);
  Assert.assertTrue("Node1 should have one running container.",node1.getRunningContainers().containsKey(cId1));
  ContainerId cId2=newContainerId(2,1,1);
  Container container2=Container.newInstance(cId2,null,null,Resources.createResource(GB,1),null,null);
  node1.addNewContainer(container2,-1l);
  Assert.assertTrue("Node1 should have one running AM container",node1.getAMContainers().contains(cId2));
  node1.cleanupContainer(cId1);
  Assert.assertTrue("Container1 should be removed from Node1.",node1.getCompletedContainers().contains(cId1));
  node1.cleanupContainer(cId2);
  Assert.assertFalse("Container2 should be removed from Node1.",node1.getAMContainers().contains(cId2));
}
