{
  final Options options=KeyProvider.options(getConf());
  final Map<String,String> attributes=new HashMap<String,String>();
  for (int i=0; i < args.length; i++) {
    boolean moreTokens=(i < args.length - 1);
    if (args[i].equals("create")) {
      String keyName="-help";
      if (moreTokens) {
        keyName=args[++i];
      }
      command=new CreateCommand(keyName,options);
      if ("-help".equals(keyName)) {
        printKeyShellUsage();
        return 1;
      }
    }
 else     if (args[i].equals("delete")) {
      String keyName="-help";
      if (moreTokens) {
        keyName=args[++i];
      }
      command=new DeleteCommand(keyName);
      if ("-help".equals(keyName)) {
        printKeyShellUsage();
        return 1;
      }
    }
 else     if (args[i].equals("roll")) {
      String keyName="-help";
      if (moreTokens) {
        keyName=args[++i];
      }
      command=new RollCommand(keyName);
      if ("-help".equals(keyName)) {
        printKeyShellUsage();
        return 1;
      }
    }
 else     if ("list".equals(args[i])) {
      command=new ListCommand();
    }
 else     if ("-size".equals(args[i]) && moreTokens) {
      options.setBitLength(Integer.parseInt(args[++i]));
    }
 else     if ("-cipher".equals(args[i]) && moreTokens) {
      options.setCipher(args[++i]);
    }
 else     if ("-description".equals(args[i]) && moreTokens) {
      options.setDescription(args[++i]);
    }
 else     if ("-attr".equals(args[i]) && moreTokens) {
      final String attrval[]=args[++i].split("=",2);
      final String attr=attrval[0].trim();
      final String val=attrval[1].trim();
      if (attr.isEmpty() || val.isEmpty()) {
        out.println("\nAttributes must be in attribute=value form, " + "or quoted\nlike \"attribute = value\"\n");
        printKeyShellUsage();
        return 1;
      }
      if (attributes.containsKey(attr)) {
        out.println("\nEach attribute must correspond to only one value:\n" + "atttribute \"" + attr + "\" was repeated\n");
        printKeyShellUsage();
        return 1;
      }
      attributes.put(attr,val);
    }
 else     if ("-provider".equals(args[i]) && moreTokens) {
      userSuppliedProvider=true;
      getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH,args[++i]);
    }
 else     if ("-metadata".equals(args[i])) {
      getConf().setBoolean(LIST_METADATA,true);
    }
 else     if ("-f".equals(args[i]) || ("-force".equals(args[i]))) {
      interactive=false;
    }
 else     if ("-help".equals(args[i])) {
      printKeyShellUsage();
      return 1;
    }
 else {
      printKeyShellUsage();
      ToolRunner.printGenericCommandUsage(System.err);
      return 1;
    }
  }
  if (command == null) {
    printKeyShellUsage();
    return 1;
  }
  if (!attributes.isEmpty()) {
    options.setAttributes(attributes);
  }
  return 0;
}
