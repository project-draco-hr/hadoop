{
  LinkedList<String> args=new LinkedList<String>();
  for (  String arg : argv) {
    args.add(arg);
  }
  if (StringUtils.popOption("-h",args) || StringUtils.popOption("-help",args)) {
    usage();
    return 0;
  }
 else   if (args.size() == 0) {
    usage();
    return 0;
  }
  String hostPort=StringUtils.popOptionWithArgument("-host",args);
  if (hostPort == null) {
    System.err.println("You must specify a host with -host.");
    return 1;
  }
  if (args.size() < 0) {
    System.err.println("You must specify an operation.");
    return 1;
  }
  RPC.setProtocolEngine(getConf(),TraceAdminProtocolPB.class,ProtobufRpcEngine.class);
  InetSocketAddress address=NetUtils.createSocketAddr(hostPort);
  UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
  Class<?> xface=TraceAdminProtocolPB.class;
  proxy=(TraceAdminProtocolPB)RPC.getProxy(xface,RPC.getProtocolVersion(xface),address,ugi,getConf(),NetUtils.getDefaultSocketFactory(getConf()),0);
  remote=new TraceAdminProtocolTranslatorPB(proxy);
  try {
    if (args.get(0).equals("-list")) {
      return listSpanReceivers(args.subList(1,args.size()));
    }
 else     if (args.get(0).equals("-add")) {
      return addSpanReceiver(args.subList(1,args.size()));
    }
 else     if (args.get(0).equals("-remove")) {
      return removeSpanReceiver(args.subList(1,args.size()));
    }
 else {
      System.err.println("Unrecognized tracing command: " + args.get(0));
      System.err.println("Use -help for help.");
      return 1;
    }
  }
  finally {
    remote.close();
  }
}
