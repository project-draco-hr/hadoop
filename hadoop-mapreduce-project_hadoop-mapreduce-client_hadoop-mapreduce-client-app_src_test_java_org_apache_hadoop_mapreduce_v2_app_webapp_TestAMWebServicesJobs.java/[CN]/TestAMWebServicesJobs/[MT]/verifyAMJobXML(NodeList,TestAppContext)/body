{
  assertEquals("incorrect number of elements",1,nodes.getLength());
  for (int i=0; i < nodes.getLength(); i++) {
    Element element=(Element)nodes.item(i);
    Job job=appContext.getJob(MRApps.toJobID(WebServicesTestUtils.getXmlString(element,"id")));
    assertNotNull("Job not found - output incorrect",job);
    verifyAMJobGeneric(job,WebServicesTestUtils.getXmlString(element,"id"),WebServicesTestUtils.getXmlString(element,"user"),WebServicesTestUtils.getXmlString(element,"name"),WebServicesTestUtils.getXmlString(element,"state"),WebServicesTestUtils.getXmlLong(element,"startTime"),WebServicesTestUtils.getXmlLong(element,"finishTime"),WebServicesTestUtils.getXmlLong(element,"elapsedTime"),WebServicesTestUtils.getXmlInt(element,"mapsTotal"),WebServicesTestUtils.getXmlInt(element,"mapsCompleted"),WebServicesTestUtils.getXmlInt(element,"reducesTotal"),WebServicesTestUtils.getXmlInt(element,"reducesCompleted"),WebServicesTestUtils.getXmlFloat(element,"reduceProgress"),WebServicesTestUtils.getXmlFloat(element,"mapProgress"));
    verifyAMJobGenericSecure(job,WebServicesTestUtils.getXmlInt(element,"mapsPending"),WebServicesTestUtils.getXmlInt(element,"mapsRunning"),WebServicesTestUtils.getXmlInt(element,"reducesPending"),WebServicesTestUtils.getXmlInt(element,"reducesRunning"),WebServicesTestUtils.getXmlBoolean(element,"uberized"),WebServicesTestUtils.getXmlString(element,"diagnostics"),WebServicesTestUtils.getXmlInt(element,"newReduceAttempts"),WebServicesTestUtils.getXmlInt(element,"runningReduceAttempts"),WebServicesTestUtils.getXmlInt(element,"failedReduceAttempts"),WebServicesTestUtils.getXmlInt(element,"killedReduceAttempts"),WebServicesTestUtils.getXmlInt(element,"successfulReduceAttempts"),WebServicesTestUtils.getXmlInt(element,"newMapAttempts"),WebServicesTestUtils.getXmlInt(element,"runningMapAttempts"),WebServicesTestUtils.getXmlInt(element,"failedMapAttempts"),WebServicesTestUtils.getXmlInt(element,"killedMapAttempts"),WebServicesTestUtils.getXmlInt(element,"successfulMapAttempts"));
    Map<JobACL,AccessControlList> allacls=job.getJobACLs();
    if (allacls != null) {
      for (      Map.Entry<JobACL,AccessControlList> entry : allacls.entrySet()) {
        String expectName=entry.getKey().getAclName();
        String expectValue=entry.getValue().getAclString();
        Boolean found=false;
        NodeList id=element.getElementsByTagName("acls");
        if (id != null) {
          for (int j=0; j < id.getLength(); j++) {
            Element aclElem=(Element)id.item(j);
            if (aclElem == null) {
              fail("should have acls in the web service info");
            }
            if (expectName.matches(WebServicesTestUtils.getXmlString(aclElem,"name"))) {
              found=true;
              WebServicesTestUtils.checkStringMatch("value",expectValue,WebServicesTestUtils.getXmlString(aclElem,"value"));
            }
          }
        }
 else {
          fail("should have acls in the web service info");
        }
        assertTrue("acl: " + expectName + " not found in webservice output",found);
      }
    }
  }
}
