{
  OutputCommitter stubbedCommitter=new OutputCommitter(){
    @Override public void setupJob(    JobContext jobContext) throws IOException {
      committer.setupJob(jobContext);
    }
    @SuppressWarnings("deprecation") @Override public void cleanupJob(    JobContext jobContext) throws IOException {
      committer.cleanupJob(jobContext);
    }
    @Override public void commitJob(    JobContext jobContext) throws IOException {
      committer.commitJob(jobContext);
    }
    @Override public void abortJob(    JobContext jobContext,    State state) throws IOException {
      committer.abortJob(jobContext,state);
    }
    @Override public boolean isRecoverySupported(    JobContext jobContext) throws IOException {
      return committer.isRecoverySupported(jobContext);
    }
    @SuppressWarnings("deprecation") @Override public boolean isRecoverySupported(){
      return committer.isRecoverySupported();
    }
    @Override public void setupTask(    TaskAttemptContext taskContext) throws IOException {
    }
    @Override public boolean needsTaskCommit(    TaskAttemptContext taskContext) throws IOException {
      return false;
    }
    @Override public void commitTask(    TaskAttemptContext taskContext) throws IOException {
    }
    @Override public void abortTask(    TaskAttemptContext taskContext) throws IOException {
    }
    @Override public void recoverTask(    TaskAttemptContext taskContext) throws IOException {
    }
  }
;
  return new CommitterEventHandler(context,stubbedCommitter,getRMHeartbeatHandler());
}
