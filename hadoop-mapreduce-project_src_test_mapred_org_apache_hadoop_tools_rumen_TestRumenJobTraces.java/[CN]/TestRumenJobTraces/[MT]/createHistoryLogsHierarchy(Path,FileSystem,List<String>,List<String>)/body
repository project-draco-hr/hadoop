{
  List<Path> dirs=new ArrayList<Path>();
  Path inputPath1=new Path(nestedInputDir,"historyFile.txt");
  Path emptyDir=new Path(nestedInputDir,"emptyDir");
  Path historyDir=new Path(nestedInputDir,"historyDir");
  fs.mkdirs(nestedInputDir);
  fs.createNewFile(inputPath1);
  fs.mkdirs(emptyDir);
  fs.mkdirs(historyDir);
  dirs.add(historyDir);
  Path subDir1=new Path(historyDir,"subDir1");
  fs.mkdirs(subDir1);
  dirs.add(subDir1);
  Path subDir2=new Path(historyDir,"subDir2");
  fs.mkdirs(subDir2);
  dirs.add(subDir2);
  Path subDir11=new Path(subDir1,"subDir11");
  fs.mkdirs(subDir11);
  dirs.add(subDir11);
  Path subDir21=new Path(subDir2,"subDir21");
  fs.mkdirs(subDir21);
  int i=0;
  for (  Path dir : dirs) {
    i++;
    Path gzPath=new Path(dir,"historyFile" + i + ".gz");
    Path txtPath=new Path(dir,"historyFile" + i + ".txt");
    fs.createNewFile(txtPath);
    fs.createNewFile(gzPath);
    recursiveInputPaths.add(gzPath.toUri().getPath());
    recursiveInputPaths.add(txtPath.toUri().getPath());
    if (i == 1) {
      nonRecursiveInputPaths.add(gzPath.toUri().getPath());
      nonRecursiveInputPaths.add(txtPath.toUri().getPath());
    }
  }
  recursiveInputPaths.add(inputPath1.toUri().getPath());
  nonRecursiveInputPaths.add(inputPath1.toUri().getPath());
}
