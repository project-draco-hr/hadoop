{
  final TopologyBuilder subject=new TopologyBuilder();
  int[][] splits=new int[4][];
  splits[0]=new int[12];
  splits[1]=new int[12];
  splits[2]=new int[12];
  splits[3]=new int[12];
  for (int j=0; j < 4; ++j) {
    for (int i=0; i < 12; ++i) {
      splits[j][i]=-1;
    }
  }
  for (int i=0; i < 6; ++i) {
    splits[0][i]=500000 * i;
    splits[1][i]=300000 * i;
    splits[2][i]=500000;
    splits[3][i]=700000;
  }
  subject.process(new Properties());
  subject.process(new TaskAttemptFinishedEvent(TaskAttemptID.forName("attempt_200904211745_0003_m_000004_0"),TaskType.valueOf("MAP"),"STATUS",1234567890L,"/194\\.6\\.134\\.64/cluster50261\\.secondleveldomain\\.com","SUCCESS",null));
  subject.process(new TaskAttemptUnsuccessfulCompletionEvent(TaskAttemptID.forName("attempt_200904211745_0003_m_000004_1"),TaskType.valueOf("MAP"),"STATUS",1234567890L,"/194\\.6\\.134\\.80/cluster50262\\.secondleveldomain\\.com",-1,"MACHINE_EXPLODED",splits));
  subject.process(new TaskAttemptUnsuccessfulCompletionEvent(TaskAttemptID.forName("attempt_200904211745_0003_m_000004_2"),TaskType.valueOf("MAP"),"STATUS",1234567890L,"/194\\.6\\.134\\.80/cluster50263\\.secondleveldomain\\.com",-1,"MACHINE_EXPLODED",splits));
  subject.process(new TaskStartedEvent(TaskID.forName("task_200904211745_0003_m_000004"),1234567890L,TaskType.valueOf("MAP"),"/194\\.6\\.134\\.80/cluster50263\\.secondleveldomain\\.com"));
  final LoggedNetworkTopology topology=subject.build();
  List<LoggedNetworkTopology> racks=topology.getChildren();
  assertEquals("Wrong number of racks",2,racks.size());
  boolean sawSingleton=false;
  boolean sawDoubleton=false;
  for (  LoggedNetworkTopology rack : racks) {
    List<LoggedNetworkTopology> nodes=rack.getChildren();
    if (rack.getName().endsWith(".64")) {
      assertEquals("The singleton rack has the wrong number of elements",1,nodes.size());
      sawSingleton=true;
    }
 else     if (rack.getName().endsWith(".80")) {
      assertEquals("The doubleton rack has the wrong number of elements",2,nodes.size());
      sawDoubleton=true;
    }
 else {
      assertTrue("Unrecognized rack name",false);
    }
  }
  assertTrue("Did not see singleton rack",sawSingleton);
  assertTrue("Did not see doubleton rack",sawDoubleton);
}
