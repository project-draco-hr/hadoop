{
  Configuration conf=new Configuration();
  AbstractFileSystem spylfs=spy(FileContext.getLocalFSFileContext().getDefaultFileSystem());
  final FileContext lfs=FileContext.getFileContext(spylfs,conf);
  doNothing().when(spylfs).mkdir(isA(Path.class),isA(FsPermission.class),anyBoolean());
  List<Path> localDirs=new ArrayList<Path>();
  String[] sDirs=new String[4];
  for (int i=0; i < 4; ++i) {
    localDirs.add(lfs.makeQualified(new Path(basedir,i + "")));
    sDirs[i]=localDirs.get(i).toString();
  }
  conf.setStrings(YarnConfiguration.NM_LOCAL_DIRS,sDirs);
  Server ignore=mock(Server.class);
  DrainDispatcher dispatcher=new DrainDispatcher();
  dispatcher.init(conf);
  dispatcher.start();
  EventHandler<ApplicationEvent> applicationBus=mock(EventHandler.class);
  dispatcher.register(ApplicationEventType.class,applicationBus);
  EventHandler<ContainerEvent> containerBus=mock(EventHandler.class);
  dispatcher.register(ContainerEventType.class,containerBus);
  ContainerExecutor exec=mock(ContainerExecutor.class);
  DeletionService delService=new DeletionService(exec);
  delService.init(null);
  delService.start();
  ResourceLocalizationService rawService=new ResourceLocalizationService(dispatcher,exec,delService);
  ResourceLocalizationService spyService=spy(rawService);
  doReturn(ignore).when(spyService).createServer();
  doReturn(lfs).when(spyService).getLocalFileContext(isA(Configuration.class));
  try {
    spyService.init(conf);
    spyService.start();
    final Application app=mock(Application.class);
    final ApplicationId appId=mock(ApplicationId.class);
    when(appId.getClusterTimestamp()).thenReturn(314159265358979L);
    when(appId.getId()).thenReturn(3);
    when(app.getUser()).thenReturn("user0");
    when(app.getAppId()).thenReturn(appId);
    spyService.handle(new ApplicationLocalizationEvent(LocalizationEventType.INIT_APPLICATION_RESOURCES,app));
    ArgumentMatcher<ApplicationEvent> matchesAppInit=new ArgumentMatcher<ApplicationEvent>(){
      @Override public boolean matches(      Object o){
        ApplicationEvent evt=(ApplicationEvent)o;
        return evt.getType() == ApplicationEventType.APPLICATION_INITED && appId == evt.getApplicationID();
      }
    }
;
    dispatcher.await();
    verify(applicationBus).handle(argThat(matchesAppInit));
    Random r=new Random();
    long seed=r.nextLong();
    System.out.println("SEED: " + seed);
    r.setSeed(seed);
    final Container c=getMockContainer(appId,42);
    FSDataOutputStream out=new FSDataOutputStream(new DataOutputBuffer(),null);
    doReturn(out).when(spylfs).createInternal(isA(Path.class),isA(EnumSet.class),isA(FsPermission.class),anyInt(),anyShort(),anyLong(),isA(Progressable.class),anyInt(),anyBoolean());
    final LocalResource resource=getMockResource(r);
    final LocalResourceRequest req=new LocalResourceRequest(resource);
    spyService.handle(new ContainerLocalizationRequestEvent(c,Collections.singletonList(req),LocalResourceVisibility.PRIVATE));
    Thread.sleep(500);
    dispatcher.await();
    String appStr=ConverterUtils.toString(appId);
    String ctnrStr=c.getContainerID().toString();
    verify(exec).startLocalizer(isA(Path.class),isA(InetSocketAddress.class),eq("user0"),eq(appStr),eq(ctnrStr),isA(List.class));
    LocalResourceStatus rsrcStat=mock(LocalResourceStatus.class);
    LocalizerStatus stat=mock(LocalizerStatus.class);
    when(stat.getLocalizerId()).thenReturn(ctnrStr);
    when(rsrcStat.getResource()).thenReturn(resource);
    when(rsrcStat.getLocalSize()).thenReturn(4344L);
    URL locPath=getPath("/cache/private/blah");
    when(rsrcStat.getLocalPath()).thenReturn(locPath);
    when(rsrcStat.getStatus()).thenReturn(ResourceStatusType.FETCH_SUCCESS);
    when(stat.getResources()).thenReturn(Collections.<LocalResourceStatus>emptyList()).thenReturn(Collections.singletonList(rsrcStat)).thenReturn(Collections.<LocalResourceStatus>emptyList());
    LocalizerHeartbeatResponse response=spyService.heartbeat(stat);
    assertEquals(LocalizerAction.LIVE,response.getLocalizerAction());
    assertEquals(req,new LocalResourceRequest(response.getLocalResource(0)));
    response=spyService.heartbeat(stat);
    assertEquals(LocalizerAction.LIVE,response.getLocalizerAction());
    assertEquals(0,response.getAllResources().size());
    response=spyService.heartbeat(stat);
    assertEquals(LocalizerAction.DIE,response.getLocalizerAction());
    ArgumentMatcher<ContainerEvent> matchesContainerLoc=new ArgumentMatcher<ContainerEvent>(){
      @Override public boolean matches(      Object o){
        ContainerEvent evt=(ContainerEvent)o;
        return evt.getType() == ContainerEventType.RESOURCE_LOCALIZED && c.getContainerID() == evt.getContainerID();
      }
    }
;
    dispatcher.await();
    verify(containerBus).handle(argThat(matchesContainerLoc));
  }
  finally {
    delService.stop();
    dispatcher.stop();
    spyService.stop();
  }
}
