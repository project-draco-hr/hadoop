{
  List<TaskAttemptID> tasksToKill=new ArrayList<TaskAttemptID>();
  List<TaskAttemptID> allTasks=new ArrayList<TaskAttemptID>();
  allTasks.addAll(processTreeInfoMap.keySet());
  Collections.sort(allTasks,new Comparator<TaskAttemptID>(){
    public int compare(    TaskAttemptID tid1,    TaskAttemptID tid2){
      return getTaskCumulativeRssmem(tid1) < getTaskCumulativeRssmem(tid2) ? -1 : 1;
    }
  }
);
  while (rssMemoryInUsage > maxRssMemoryAllowedForAllTasks && !allTasks.isEmpty()) {
    TaskAttemptID tid=allTasks.remove(allTasks.size() - 1);
    if (!isKillable(tid)) {
      continue;
    }
    long rssmem=getTaskCumulativeRssmem(tid);
    if (rssmem == 0) {
      break;
    }
    tasksToKill.add(tid);
    rssMemoryInUsage-=rssmem;
  }
  if (!tasksToKill.isEmpty()) {
    for (    TaskAttemptID tid : tasksToKill) {
      String msg="Killing one of the memory-consuming tasks - " + tid + ", as the cumulative RSS memory usage of all the tasks on "+ "the TaskTracker exceeds physical memory limit "+ maxRssMemoryAllowedForAllTasks+ ".";
      LOG.warn(msg);
      killTask(tid,msg);
    }
  }
 else {
    LOG.info("The total physical memory usage is overflowing TTs limits. " + "But found no alive task to kill for freeing memory.");
  }
}
