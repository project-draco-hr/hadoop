{
  List<TaskAttemptID> tasksToKill=new ArrayList<TaskAttemptID>();
  List<TaskAttemptID> tasksToExclude=new ArrayList<TaskAttemptID>();
  while (memoryStillInUsage > maxMemoryAllowedForAllTasks) {
    TaskInProgress task=taskTracker.findTaskToKill(tasksToExclude);
    if (task == null) {
      break;
    }
    TaskAttemptID tid=task.getTask().getTaskID();
    if (processTreeInfoMap.containsKey(tid)) {
      ProcessTreeInfo ptInfo=processTreeInfoMap.get(tid);
      ProcfsBasedProcessTree pTree=ptInfo.getProcessTree();
      memoryStillInUsage-=pTree.getCumulativeVmem();
      tasksToKill.add(tid);
    }
    tasksToExclude.add(tid);
  }
  if (!tasksToKill.isEmpty()) {
    for (    TaskAttemptID tid : tasksToKill) {
      String msg="Killing one of the least progress tasks - " + tid + ", as the cumulative memory usage of all the tasks on "+ "the TaskTracker exceeds virtual memory limit "+ maxMemoryAllowedForAllTasks+ ".";
      LOG.warn(msg);
      killTask(tid,msg);
    }
  }
 else {
    LOG.info("The total memory usage is overflowing TTs limits. " + "But found no alive task to kill for freeing memory.");
  }
}
