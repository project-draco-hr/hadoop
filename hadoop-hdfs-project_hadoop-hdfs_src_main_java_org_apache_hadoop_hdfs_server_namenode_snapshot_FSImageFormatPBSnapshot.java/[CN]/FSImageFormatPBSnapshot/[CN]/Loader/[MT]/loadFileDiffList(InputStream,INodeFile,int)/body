{
  final FileDiffList diffs=new FileDiffList();
  final LoaderContext state=parent.getLoaderContext();
  final BlockManager bm=fsn.getBlockManager();
  for (int i=0; i < size; i++) {
    SnapshotDiffSection.FileDiff pbf=SnapshotDiffSection.FileDiff.parseDelimitedFrom(in);
    INodeFileAttributes copy=null;
    if (pbf.hasSnapshotCopy()) {
      INodeSection.INodeFile fileInPb=pbf.getSnapshotCopy();
      PermissionStatus permission=loadPermission(fileInPb.getPermission(),state.getStringTable());
      AclFeature acl=null;
      if (fileInPb.hasAcl()) {
        int[] entries=AclEntryStatusFormat.toInt(FSImageFormatPBINode.Loader.loadAclEntries(fileInPb.getAcl(),state.getStringTable()));
        acl=new AclFeature(entries);
      }
      XAttrFeature xAttrs=null;
      if (fileInPb.hasXAttrs()) {
        xAttrs=new XAttrFeature(FSImageFormatPBINode.Loader.loadXAttrs(fileInPb.getXAttrs(),state.getStringTable()));
      }
      copy=new INodeFileAttributes.SnapshotCopy(pbf.getName().toByteArray(),permission,acl,fileInPb.getModificationTime(),fileInPb.getAccessTime(),(short)fileInPb.getReplication(),fileInPb.getPreferredBlockSize(),(byte)fileInPb.getStoragePolicyID(),xAttrs);
    }
    FileDiff diff=new FileDiff(pbf.getSnapshotId(),copy,null,pbf.getFileSize());
    List<BlockProto> bpl=pbf.getBlocksList();
    BlockInfo[] blocks=new BlockInfo[bpl.size()];
    for (int j=0, e=bpl.size(); j < e; ++j) {
      Block blk=PBHelper.convert(bpl.get(j));
      BlockInfo storedBlock=bm.getStoredBlock(blk);
      if (storedBlock == null) {
        storedBlock=bm.addBlockCollection(new BlockInfoContiguous(blk,copy.getFileReplication()),file);
      }
      blocks[j]=storedBlock;
    }
    if (blocks.length > 0) {
      diff.setBlocks(blocks);
    }
    diffs.addFirst(diff);
  }
  file.addSnapshotFeature(diffs);
  short repl=file.getPreferredBlockReplication();
  for (  BlockInfo b : file.getBlocks()) {
    if (b.getReplication() < repl) {
      bm.setReplication(b.getReplication(),repl,b);
    }
  }
}
