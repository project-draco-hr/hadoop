{
  return new ReadOnlyList<INode>(){
    private List<INode> children=null;
    private List<INode> initChildren(){
      if (children == null) {
        final ChildrenDiff combined=new ChildrenDiff();
        for (DirectoryDiff d=DirectoryDiff.this; d != null; d=d.getPosterior()) {
          combined.combinePosterior(d.diff,null);
        }
        children=combined.apply2Current(ReadOnlyList.Util.asList(currentDir.getChildrenList(Snapshot.CURRENT_STATE_ID)));
      }
      return children;
    }
    @Override public Iterator<INode> iterator(){
      return initChildren().iterator();
    }
    @Override public boolean isEmpty(){
      return childrenSize == 0;
    }
    @Override public int size(){
      return childrenSize;
    }
    @Override public INode get(    int i){
      return initChildren().get(i);
    }
  }
;
}
