{
  QuotaCounts counts=new QuotaCounts.Builder().build();
  Map<INode,INode> priorCreated=null;
  Map<INode,INode> priorDeleted=null;
  if (snapshot == Snapshot.CURRENT_STATE_ID) {
    currentINode.recordModification(prior);
    DirectoryDiff lastDiff=diffs.getLast();
    if (lastDiff != null) {
      counts.add(lastDiff.diff.destroyCreatedList(reclaimContext,currentINode));
    }
    counts.add(currentINode.cleanSubtreeRecursively(reclaimContext,snapshot,prior,priorDeleted));
  }
 else {
    prior=getDiffs().updatePrior(snapshot,prior);
    if (prior != Snapshot.NO_SNAPSHOT_ID) {
      DirectoryDiff priorDiff=this.getDiffs().getDiffById(prior);
      if (priorDiff != null && priorDiff.getSnapshotId() == prior) {
        List<INode> cList=priorDiff.diff.getList(ListType.CREATED);
        List<INode> dList=priorDiff.diff.getList(ListType.DELETED);
        priorCreated=cloneDiffList(cList);
        priorDeleted=cloneDiffList(dList);
      }
    }
    counts.add(getDiffs().deleteSnapshotDiff(reclaimContext,snapshot,prior,currentINode));
    counts.add(currentINode.cleanSubtreeRecursively(reclaimContext,snapshot,prior,priorDeleted));
    if (prior != Snapshot.NO_SNAPSHOT_ID) {
      DirectoryDiff priorDiff=this.getDiffs().getDiffById(prior);
      if (priorDiff != null && priorDiff.getSnapshotId() == prior) {
        if (priorCreated != null) {
          for (          INode cNode : priorDiff.getChildrenDiff().getList(ListType.CREATED)) {
            if (priorCreated.containsKey(cNode)) {
              counts.add(cNode.cleanSubtree(reclaimContext,snapshot,Snapshot.NO_SNAPSHOT_ID));
            }
          }
        }
        for (        INode dNode : priorDiff.getChildrenDiff().getList(ListType.DELETED)) {
          if (priorDeleted == null || !priorDeleted.containsKey(dNode)) {
            counts.add(cleanDeletedINode(reclaimContext,dNode,snapshot,prior));
          }
        }
      }
    }
  }
  if (currentINode.isQuotaSet()) {
    currentINode.getDirectoryWithQuotaFeature().addSpaceConsumed2Cache(counts.negation());
  }
  return counts;
}
