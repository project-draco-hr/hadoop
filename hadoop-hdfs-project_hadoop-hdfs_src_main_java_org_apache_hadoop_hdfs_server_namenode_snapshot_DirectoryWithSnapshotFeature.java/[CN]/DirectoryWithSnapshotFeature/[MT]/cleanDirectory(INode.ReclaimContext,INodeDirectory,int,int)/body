{
  Map<INode,INode> priorCreated=null;
  Map<INode,INode> priorDeleted=null;
  QuotaCounts old=reclaimContext.quotaDelta().getCountsCopy();
  if (snapshot == Snapshot.CURRENT_STATE_ID) {
    currentINode.recordModification(prior);
    DirectoryDiff lastDiff=diffs.getLast();
    if (lastDiff != null) {
      lastDiff.diff.destroyCreatedList(reclaimContext,currentINode);
    }
    currentINode.cleanSubtreeRecursively(reclaimContext,snapshot,prior,null);
  }
 else {
    prior=getDiffs().updatePrior(snapshot,prior);
    if (prior != NO_SNAPSHOT_ID) {
      DirectoryDiff priorDiff=this.getDiffs().getDiffById(prior);
      if (priorDiff != null && priorDiff.getSnapshotId() == prior) {
        List<INode> cList=priorDiff.diff.getList(ListType.CREATED);
        List<INode> dList=priorDiff.diff.getList(ListType.DELETED);
        priorCreated=cloneDiffList(cList);
        priorDeleted=cloneDiffList(dList);
      }
    }
    getDiffs().deleteSnapshotDiff(reclaimContext,snapshot,prior,currentINode);
    currentINode.cleanSubtreeRecursively(reclaimContext,snapshot,prior,priorDeleted);
    if (prior != NO_SNAPSHOT_ID) {
      DirectoryDiff priorDiff=this.getDiffs().getDiffById(prior);
      if (priorDiff != null && priorDiff.getSnapshotId() == prior) {
        if (priorCreated != null) {
          for (          INode cNode : priorDiff.getChildrenDiff().getList(ListType.CREATED)) {
            if (priorCreated.containsKey(cNode)) {
              cNode.cleanSubtree(reclaimContext,snapshot,NO_SNAPSHOT_ID);
            }
          }
        }
        for (        INode dNode : priorDiff.getChildrenDiff().getList(ListType.DELETED)) {
          if (priorDeleted == null || !priorDeleted.containsKey(dNode)) {
            cleanDeletedINode(reclaimContext,dNode,snapshot,prior);
          }
        }
      }
    }
  }
  QuotaCounts current=reclaimContext.quotaDelta().getCountsCopy();
  current.subtract(old);
  if (currentINode.isQuotaSet()) {
    reclaimContext.quotaDelta().addQuotaDirUpdate(currentINode,current);
  }
}
