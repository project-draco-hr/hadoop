{
  QuotaCounts counts=new QuotaCounts.Builder().build();
  Deque<INode> queue=new ArrayDeque<INode>();
  queue.addLast(inode);
  while (!queue.isEmpty()) {
    INode topNode=queue.pollFirst();
    if (topNode instanceof INodeReference.WithName) {
      INodeReference.WithName wn=(INodeReference.WithName)topNode;
      if (wn.getLastSnapshotId() >= post) {
        wn.cleanSubtree(bsps,post,prior,collectedBlocks,removedINodes,removedUCFiles);
      }
    }
 else     if (topNode.isFile() && topNode.asFile().isWithSnapshot()) {
      INodeFile file=topNode.asFile();
      counts.add(file.getDiffs().deleteSnapshotDiff(bsps,post,prior,file,collectedBlocks,removedINodes));
    }
 else     if (topNode.isDirectory()) {
      INodeDirectory dir=topNode.asDirectory();
      ChildrenDiff priorChildrenDiff=null;
      DirectoryWithSnapshotFeature sf=dir.getDirectoryWithSnapshotFeature();
      if (sf != null) {
        DirectoryDiff priorDiff=sf.getDiffs().getDiffById(prior);
        if (priorDiff != null && priorDiff.getSnapshotId() == prior) {
          priorChildrenDiff=priorDiff.getChildrenDiff();
          counts.add(priorChildrenDiff.destroyCreatedList(bsps,dir,collectedBlocks,removedINodes,removedUCFiles));
        }
      }
      for (      INode child : dir.getChildrenList(prior)) {
        if (priorChildrenDiff != null && priorChildrenDiff.search(ListType.DELETED,child.getLocalNameBytes()) != null) {
          continue;
        }
        queue.addLast(child);
      }
    }
  }
  return counts;
}
