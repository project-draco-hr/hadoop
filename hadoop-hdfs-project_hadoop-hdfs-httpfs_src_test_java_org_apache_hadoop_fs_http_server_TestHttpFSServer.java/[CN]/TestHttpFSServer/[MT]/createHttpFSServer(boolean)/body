{
  File homeDir=TestDirHelper.getTestDir();
  Assert.assertTrue(new File(homeDir,"conf").mkdir());
  Assert.assertTrue(new File(homeDir,"log").mkdir());
  Assert.assertTrue(new File(homeDir,"temp").mkdir());
  HttpFSServerWebApp.setHomeDirForCurrentThread(homeDir.getAbsolutePath());
  File secretFile=new File(new File(homeDir,"conf"),"secret");
  Writer w=new FileWriter(secretFile);
  w.write("secret");
  w.close();
  File hadoopConfDir=new File(new File(homeDir,"conf"),"hadoop-conf");
  hadoopConfDir.mkdirs();
  String fsDefaultName=TestHdfsHelper.getHdfsConf().get(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY);
  Configuration conf=new Configuration(false);
  conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,fsDefaultName);
  conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY,true);
  File hdfsSite=new File(hadoopConfDir,"hdfs-site.xml");
  OutputStream os=new FileOutputStream(hdfsSite);
  conf.writeXml(os);
  os.close();
  conf=new Configuration(false);
  if (addDelegationTokenAuthHandler) {
    conf.set("httpfs.authentication.type",HttpFSKerberosAuthenticationHandlerForTesting.class.getName());
  }
  conf.set("httpfs.services.ext",MockGroups.class.getName());
  conf.set("httpfs.admin.group",HadoopUsersConfTestHelper.getHadoopUserGroups(HadoopUsersConfTestHelper.getHadoopUsers()[0])[0]);
  conf.set("httpfs.proxyuser." + HadoopUsersConfTestHelper.getHadoopProxyUser() + ".groups",HadoopUsersConfTestHelper.getHadoopProxyUserGroups());
  conf.set("httpfs.proxyuser." + HadoopUsersConfTestHelper.getHadoopProxyUser() + ".hosts",HadoopUsersConfTestHelper.getHadoopProxyUserHosts());
  conf.set("httpfs.authentication.signature.secret.file",secretFile.getAbsolutePath());
  conf.set("httpfs.hadoop.config.dir",hadoopConfDir.toString());
  File httpfsSite=new File(new File(homeDir,"conf"),"httpfs-site.xml");
  os=new FileOutputStream(httpfsSite);
  conf.writeXml(os);
  os.close();
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  URL url=cl.getResource("webapp");
  WebAppContext context=new WebAppContext(url.getPath(),"/webhdfs");
  Server server=TestJettyHelper.getJettyServer();
  server.addHandler(context);
  server.start();
  if (addDelegationTokenAuthHandler) {
    HttpFSServerWebApp.get().setAuthority(TestJettyHelper.getAuthority());
  }
}
