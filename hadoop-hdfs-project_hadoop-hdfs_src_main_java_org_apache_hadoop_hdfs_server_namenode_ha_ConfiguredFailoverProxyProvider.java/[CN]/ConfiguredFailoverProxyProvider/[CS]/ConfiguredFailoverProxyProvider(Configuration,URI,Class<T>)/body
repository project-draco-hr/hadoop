{
  Preconditions.checkArgument(xface.isAssignableFrom(NamenodeProtocols.class),"Interface class %s is not a valid NameNode protocol!");
  this.xface=xface;
  this.conf=new Configuration(conf);
  int maxRetries=this.conf.getInt(DFSConfigKeys.DFS_CLIENT_FAILOVER_CONNECTION_RETRIES_KEY,DFSConfigKeys.DFS_CLIENT_FAILOVER_CONNECTION_RETRIES_DEFAULT);
  this.conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,maxRetries);
  int maxRetriesOnSocketTimeouts=this.conf.getInt(DFSConfigKeys.DFS_CLIENT_FAILOVER_CONNECTION_RETRIES_ON_SOCKET_TIMEOUTS_KEY,DFSConfigKeys.DFS_CLIENT_FAILOVER_CONNECTION_RETRIES_ON_SOCKET_TIMEOUTS_DEFAULT);
  this.conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY,maxRetriesOnSocketTimeouts);
  try {
    ugi=UserGroupInformation.getCurrentUser();
    Map<String,Map<String,InetSocketAddress>> map=DFSUtil.getHaNnRpcAddresses(conf);
    Map<String,InetSocketAddress> addressesInNN=map.get(uri.getHost());
    if (addressesInNN == null || addressesInNN.size() == 0) {
      throw new RuntimeException("Could not find any configured addresses " + "for URI " + uri);
    }
    Collection<InetSocketAddress> addressesOfNns=addressesInNN.values();
    for (    InetSocketAddress address : addressesOfNns) {
      proxies.add(new AddressRpcProxyPair<T>(address));
    }
    HAUtil.cloneDelegationTokenForLogicalUri(ugi,uri,addressesOfNns);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}
