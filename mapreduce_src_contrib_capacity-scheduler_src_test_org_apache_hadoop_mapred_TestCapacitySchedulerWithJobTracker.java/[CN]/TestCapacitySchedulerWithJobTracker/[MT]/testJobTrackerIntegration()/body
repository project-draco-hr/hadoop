{
  Properties schedulerProps=new Properties();
  String[] queues=new String[]{"Q1","Q2"};
  Job jobs[]=new Job[2];
  Properties clusterProps=new Properties();
  clusterProps.put(TTConfig.TT_MAP_SLOTS,String.valueOf(2));
  clusterProps.put(TTConfig.TT_REDUCE_SLOTS,String.valueOf(2));
  clusterProps.put("mapred.queue.names",queues[0] + "," + queues[1]);
  clusterProps.put(JTConfig.JT_PERSIST_JOBSTATUS,"false");
  startCluster(2,clusterProps,schedulerProps);
  CapacityTaskScheduler scheduler=(CapacityTaskScheduler)getJobTracker().getTaskScheduler();
  AbstractQueue root=scheduler.getRoot();
  for (  AbstractQueue q : root.getChildren()) {
    q.getQueueSchedulingContext().setCapacityPercent(50);
    q.getQueueSchedulingContext().setUlMin(100);
  }
  LOG.info("WE CREATED THE QUEUES TEST 2");
  JobConf conf=getJobConf();
  conf.setSpeculativeExecution(false);
  conf.set(MRJobConfig.SETUP_CLEANUP_NEEDED,"false");
  conf.setNumTasksToExecutePerJvm(-1);
  conf.setQueueName(queues[0]);
  SleepJob sleepJob1=new SleepJob();
  sleepJob1.setConf(conf);
  jobs[0]=sleepJob1.createJob(1,1,1,1,1,1);
  jobs[0].submit();
  JobConf conf2=getJobConf();
  conf2.setSpeculativeExecution(false);
  conf2.setNumTasksToExecutePerJvm(-1);
  conf2.setQueueName(queues[1]);
  SleepJob sleepJob2=new SleepJob();
  sleepJob2.setConf(conf2);
  jobs[1]=sleepJob2.createJob(3,3,5,3,5,3);
  jobs[0].waitForCompletion(false);
  jobs[1].waitForCompletion(false);
  assertTrue("Sleep job submitted to queue 1 is not successful",jobs[0].isSuccessful());
  assertTrue("Sleep job submitted to queue 2 is not successful",jobs[1].isSuccessful());
}
