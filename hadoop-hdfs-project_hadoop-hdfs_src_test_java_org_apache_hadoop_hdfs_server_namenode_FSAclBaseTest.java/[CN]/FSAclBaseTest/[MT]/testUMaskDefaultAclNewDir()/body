{
  FileSystem.mkdirs(fs,path,FsPermission.createImmutable((short)0750));
  List<AclEntry> aclSpec=Lists.newArrayList(aclEntry(DEFAULT,GROUP,ALL),aclEntry(DEFAULT,USER,"foo",ALL));
  fs.setAcl(path,aclSpec);
  String oldUMask=fs.getConf().get(FS_PERMISSIONS_UMASK_KEY);
  fs.getConf().set(FS_PERMISSIONS_UMASK_KEY,"027");
  FSDirectory fsDirectory=cluster.getNamesystem().getFSDirectory();
  boolean oldEnabled=fsDirectory.isPosixAclInheritanceEnabled();
  try {
    fsDirectory.setPosixAclInheritanceEnabled(false);
    Path dirPath=new Path(path,"dir1");
    fs.mkdirs(dirPath);
    AclStatus s=fs.getAclStatus(dirPath);
    AclEntry[] returned=s.getEntries().toArray(new AclEntry[0]);
    assertArrayEquals(new AclEntry[]{aclEntry(ACCESS,USER,"foo",ALL),aclEntry(ACCESS,GROUP,ALL),aclEntry(DEFAULT,USER,ALL),aclEntry(DEFAULT,USER,"foo",ALL),aclEntry(DEFAULT,GROUP,ALL),aclEntry(DEFAULT,MASK,ALL),aclEntry(DEFAULT,OTHER,NONE)},returned);
    assertPermission(dirPath,(short)010750);
    fsDirectory.setPosixAclInheritanceEnabled(true);
    Path dir2Path=new Path(path,"dir2");
    fs.mkdirs(dir2Path);
    AclStatus s2=fs.getAclStatus(dir2Path);
    AclEntry[] returned2=s2.getEntries().toArray(new AclEntry[0]);
    assertArrayEquals(new AclEntry[]{aclEntry(ACCESS,USER,"foo",ALL),aclEntry(ACCESS,GROUP,ALL),aclEntry(DEFAULT,USER,ALL),aclEntry(DEFAULT,USER,"foo",ALL),aclEntry(DEFAULT,GROUP,ALL),aclEntry(DEFAULT,MASK,ALL),aclEntry(DEFAULT,OTHER,NONE)},returned2);
    assertPermission(dir2Path,(short)010770);
  }
  finally {
    fsDirectory.setPosixAclInheritanceEnabled(oldEnabled);
    fs.getConf().set(FS_PERMISSIONS_UMASK_KEY,oldUMask);
  }
}
