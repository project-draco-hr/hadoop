{
  FileSystem.mkdirs(fs,path,FsPermission.createImmutable((short)0750));
  List<AclEntry> aclSpec=Lists.newArrayList(aclEntry(DEFAULT,GROUP,READ_WRITE),aclEntry(DEFAULT,USER,"foo",ALL));
  fs.setAcl(path,aclSpec);
  String oldUMask=fs.getConf().get(FS_PERMISSIONS_UMASK_KEY);
  fs.getConf().set(FS_PERMISSIONS_UMASK_KEY,"027");
  FSDirectory fsDirectory=cluster.getNamesystem().getFSDirectory();
  boolean oldEnabled=fsDirectory.isPosixAclInheritanceEnabled();
  try {
    fsDirectory.setPosixAclInheritanceEnabled(false);
    Path filePath=new Path(path,"file1");
    fs.create(filePath).close();
    AclStatus s=fs.getAclStatus(filePath);
    AclEntry[] returned=s.getEntries().toArray(new AclEntry[0]);
    assertArrayEquals(new AclEntry[]{aclEntry(ACCESS,USER,"foo",ALL),aclEntry(ACCESS,GROUP,READ_WRITE)},returned);
    assertPermission(filePath,(short)010640);
    fsDirectory.setPosixAclInheritanceEnabled(true);
    Path file2Path=new Path(path,"file2");
    fs.create(file2Path).close();
    AclStatus s2=fs.getAclStatus(file2Path);
    AclEntry[] returned2=s2.getEntries().toArray(new AclEntry[0]);
    assertArrayEquals(new AclEntry[]{aclEntry(ACCESS,USER,"foo",ALL),aclEntry(ACCESS,GROUP,READ_WRITE)},returned2);
    assertPermission(file2Path,(short)010660);
  }
  finally {
    fsDirectory.setPosixAclInheritanceEnabled(oldEnabled);
    fs.getConf().set(FS_PERMISSIONS_UMASK_KEY,oldUMask);
  }
}
