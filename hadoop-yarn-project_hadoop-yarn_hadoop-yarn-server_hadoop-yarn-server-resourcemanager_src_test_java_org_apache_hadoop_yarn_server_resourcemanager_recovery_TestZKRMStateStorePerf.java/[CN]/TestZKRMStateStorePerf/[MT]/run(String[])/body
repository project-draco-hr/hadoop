{
  LOG.info("Starting ZKRMStateStorePerf ver." + version);
  int numApp=ZK_PERF_NUM_APP_DEFAULT;
  int numAppAttemptPerApp=ZK_PERF_NUM_APPATTEMPT_PER_APP;
  String hostPort=null;
  boolean launchLocalZK=true;
  if (args.length == 0) {
    System.err.println("Missing arguments.");
    return -1;
  }
  for (int i=0; i < args.length; i++) {
    if (args[i].equalsIgnoreCase("-appsize")) {
      numApp=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equalsIgnoreCase("-appattemptsize")) {
      numAppAttemptPerApp=Integer.parseInt(args[++i]);
    }
 else     if (args[i].equalsIgnoreCase("-hostPort")) {
      hostPort=args[++i];
      launchLocalZK=false;
    }
 else     if (args[i].equalsIgnoreCase("-workingZnode")) {
      workingZnode=args[++i];
    }
 else {
      System.err.println("Illegal argument: " + args[i]);
      return -1;
    }
  }
  if (launchLocalZK) {
    try {
      setUp();
    }
 catch (    Exception e) {
      System.err.println("failed to setup. : " + e.getMessage());
      return -1;
    }
  }
  initStore(hostPort);
  long submitTime=System.currentTimeMillis();
  long startTime=System.currentTimeMillis() + 1234;
  ArrayList<ApplicationId> applicationIds=new ArrayList<>();
  ArrayList<RMApp> rmApps=new ArrayList<>();
  ArrayList<ApplicationAttemptId> attemptIds=new ArrayList<>();
  HashMap<ApplicationId,Set<ApplicationAttemptId>> appIdsToAttemptId=new HashMap<>();
  TestDispatcher dispatcher=new TestDispatcher();
  store.setRMDispatcher(dispatcher);
  for (int i=0; i < numApp; i++) {
    ApplicationId appId=ApplicationId.newInstance(clusterTimeStamp,i);
    applicationIds.add(appId);
    ArrayList<ApplicationAttemptId> attemptIdsForThisApp=new ArrayList<>();
    for (int j=0; j < numAppAttemptPerApp; j++) {
      ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,j);
      attemptIdsForThisApp.add(attemptId);
    }
    appIdsToAttemptId.put(appId,new LinkedHashSet(attemptIdsForThisApp));
    attemptIds.addAll(attemptIdsForThisApp);
  }
  for (  ApplicationId appId : applicationIds) {
    RMApp app=null;
    try {
      app=storeApp(store,appId,submitTime,startTime);
    }
 catch (    Exception e) {
      System.err.println("failed to create Application Znode. : " + e.getMessage());
      return -1;
    }
    waitNotify(dispatcher);
    rmApps.add(app);
  }
  for (  ApplicationAttemptId attemptId : attemptIds) {
    Token<AMRMTokenIdentifier> tokenId=generateAMRMToken(attemptId,appTokenMgr);
    SecretKey clientTokenKey=clientToAMTokenMgr.createMasterKey(attemptId);
    try {
      storeAttempt(store,attemptId,ContainerId.newContainerId(attemptId,0L).toString(),tokenId,clientTokenKey,dispatcher);
    }
 catch (    Exception e) {
      System.err.println("failed to create AppAttempt Znode. : " + e.getMessage());
      return -1;
    }
  }
  long storeStart=System.currentTimeMillis();
  try {
    store.loadState();
  }
 catch (  Exception e) {
    System.err.println("failed to locaState from ZKRMStateStore. : " + e.getMessage());
    return -1;
  }
  long storeEnd=System.currentTimeMillis();
  long loadTime=storeEnd - storeStart;
  String resultMsg="ZKRMStateStore takes " + loadTime + " msec to loadState.";
  LOG.info(resultMsg);
  System.out.println(resultMsg);
  try {
    for (    RMApp app : rmApps) {
      ApplicationStateData appState=ApplicationStateData.newInstance(app.getSubmitTime(),app.getStartTime(),app.getApplicationSubmissionContext(),app.getUser());
      ApplicationId appId=app.getApplicationId();
      Map m=mock(Map.class);
      when(m.keySet()).thenReturn(appIdsToAttemptId.get(appId));
      appState.attempts=m;
      store.removeApplicationStateInternal(appState);
    }
  }
 catch (  Exception e) {
    System.err.println("failed to cleanup. : " + e.getMessage());
    return -1;
  }
  return 0;
}
