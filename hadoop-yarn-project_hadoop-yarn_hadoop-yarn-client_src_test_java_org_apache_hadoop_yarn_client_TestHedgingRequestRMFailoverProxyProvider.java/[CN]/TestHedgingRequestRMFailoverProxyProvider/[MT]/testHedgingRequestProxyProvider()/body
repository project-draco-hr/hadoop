{
  final MiniYARNCluster cluster=new MiniYARNCluster("testHedgingRequestProxyProvider",5,0,1,1);
  Configuration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
  conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  conf.set(YarnConfiguration.RM_CLUSTER_ID,"cluster1");
  conf.set(YarnConfiguration.RM_HA_IDS,"rm1,rm2,rm3,rm4,rm5");
  conf.set(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,RequestHedgingRMFailoverProxyProvider.class.getName());
  conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,2000);
  HATestUtil.setRpcAddressForRM("rm1",10000,conf);
  HATestUtil.setRpcAddressForRM("rm2",20000,conf);
  HATestUtil.setRpcAddressForRM("rm3",30000,conf);
  HATestUtil.setRpcAddressForRM("rm4",40000,conf);
  HATestUtil.setRpcAddressForRM("rm5",50000,conf);
  conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS,true);
  cluster.init(conf);
  cluster.start();
  final YarnClient client=YarnClient.createYarnClient();
  client.init(conf);
  client.start();
  long start=System.currentTimeMillis();
  makeRMActive(cluster,4);
  client.getAllQueues();
  long end=System.currentTimeMillis();
  System.out.println("Client call succeeded at " + end);
  Assert.assertTrue(end - start <= 10000);
  cluster.getResourceManager(4).getRMContext().getRMAdminService().transitionToStandby(new HAServiceProtocol.StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER));
  makeRMActive(cluster,2);
  client.getAllQueues();
  cluster.stop();
}
