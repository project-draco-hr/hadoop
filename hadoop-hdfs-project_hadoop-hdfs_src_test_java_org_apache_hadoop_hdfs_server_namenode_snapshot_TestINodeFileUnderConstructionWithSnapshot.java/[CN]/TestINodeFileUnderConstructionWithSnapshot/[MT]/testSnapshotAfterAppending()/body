{
  Path file=new Path(dir,"file");
  SnapshotTestHelper.createSnapshot(hdfs,dir,"s0");
  DFSTestUtil.createFile(hdfs,file,BLOCKSIZE,REPLICATION,seed);
  DFSTestUtil.appendFile(hdfs,file,BLOCKSIZE);
  INodeFile fileNode=(INodeFile)fsdir.getINode(file.toString());
  final byte[] filename=fileNode.getLocalNameBytes();
  INodeDirectorySnapshottable dirNode=(INodeDirectorySnapshottable)fsdir.getINode(dir.toString());
  ChildrenDiff diff=dirNode.getDiffs().getLast().getChildrenDiff();
  INodeFile nodeInCreated=(INodeFile)diff.searchCreated(filename);
  assertTrue(fileNode == nodeInCreated);
  INodeFile nodeInDeleted=(INodeFile)diff.searchDeleted(filename);
  assertNull(nodeInDeleted);
  hdfs.createSnapshot(dir,"s1");
  hdfs.setReplication(file,(short)(REPLICATION - 1));
  DFSTestUtil.appendFile(hdfs,file,BLOCKSIZE);
  DirectoryDiff last=dirNode.getDiffs().getLast();
  Snapshot snapshot=last.snapshot;
  diff=last.getChildrenDiff();
  fileNode=(INodeFile)fsdir.getINode(file.toString());
  nodeInCreated=(INodeFile)diff.searchCreated(filename);
  assertTrue(fileNode == nodeInCreated);
  assertEquals(REPLICATION - 1,fileNode.getFileReplication());
  assertEquals(BLOCKSIZE * 3,fileNode.computeFileSize(true));
  nodeInDeleted=(INodeFile)diff.searchDeleted(filename);
  assertEquals(REPLICATION,nodeInDeleted.getFileReplication(snapshot));
  assertEquals(BLOCKSIZE * 2,nodeInDeleted.computeFileSize(true,snapshot));
  SnapshotTestHelper.checkCircularList(fileNode,nodeInDeleted);
  hdfs.createSnapshot(dir,"s2");
  DFSTestUtil.appendFile(hdfs,file,BLOCKSIZE);
  last=dirNode.getDiffs().getLast();
  snapshot=last.snapshot;
  diff=last.getChildrenDiff();
  fileNode=(INodeFile)fsdir.getINode(file.toString());
  nodeInCreated=(INodeFile)diff.searchCreated(filename);
  assertTrue(fileNode == nodeInCreated);
  assertEquals(REPLICATION - 1,nodeInCreated.getFileReplication());
  assertEquals(BLOCKSIZE * 4,fileNode.computeFileSize(true));
  INodeFile nodeInDeleted2=(INodeFile)diff.searchDeleted(filename);
  assertEquals(REPLICATION - 1,nodeInDeleted2.getFileReplication());
  assertEquals(BLOCKSIZE * 3,nodeInDeleted2.computeFileSize(true,snapshot));
  SnapshotTestHelper.checkCircularList(fileNode,nodeInDeleted2,nodeInDeleted);
}
