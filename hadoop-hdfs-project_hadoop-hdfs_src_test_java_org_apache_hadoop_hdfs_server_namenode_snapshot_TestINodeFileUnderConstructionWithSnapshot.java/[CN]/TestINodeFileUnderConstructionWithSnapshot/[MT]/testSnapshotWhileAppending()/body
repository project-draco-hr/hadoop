{
  Path file=new Path(dir,"file");
  DFSTestUtil.createFile(hdfs,file,BLOCKSIZE,REPLICATION,seed);
  HdfsDataOutputStream out=appendFileWithoutClosing(file,BLOCKSIZE);
  out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
  SnapshotTestHelper.createSnapshot(hdfs,dir,"s0");
  out.close();
  INodeFile fileNode=(INodeFile)fsdir.getINode(file.toString());
  assertEquals(BLOCKSIZE * 2,((INodeFile)fileNode).computeFileSize(true));
  INodeDirectorySnapshottable dirNode=(INodeDirectorySnapshottable)fsdir.getINode(dir.toString());
  Diff diff=dirNode.getLastSnapshotDiff().getDiff();
  INode nodeInDeleted_S0=diff.searchDeleted(fileNode.getLocalNameBytes());
  assertTrue(nodeInDeleted_S0 instanceof INodeFileUnderConstructionSnapshot);
  assertEquals(BLOCKSIZE * 2,((INodeFile)nodeInDeleted_S0).computeFileSize(true));
  out=appendFileWithoutClosing(file,BLOCKSIZE);
  out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
  dirNode=(INodeDirectorySnapshottable)fsdir.getINode(dir.toString());
  diff=dirNode.getLastSnapshotDiff().getDiff();
  nodeInDeleted_S0=diff.searchDeleted(fileNode.getLocalNameBytes());
  assertTrue(nodeInDeleted_S0 instanceof INodeFileUnderConstructionSnapshot);
  assertEquals(BLOCKSIZE * 2,((INodeFile)nodeInDeleted_S0).computeFileSize(true));
  hdfs.createSnapshot(dir,"s1");
  out.close();
  fileNode=(INodeFile)fsdir.getINode(file.toString());
  dirNode=(INodeDirectorySnapshottable)fsdir.getINode(dir.toString());
  diff=dirNode.getLastSnapshotDiff().getDiff();
  INode nodeInCreated_S1=diff.searchCreated(fileNode.getLocalNameBytes());
  assertTrue(fileNode == nodeInCreated_S1);
  assertTrue(fileNode instanceof INodeFileWithSnapshot);
  INode nodeInDeleted_S1=diff.searchDeleted(fileNode.getLocalNameBytes());
  assertTrue(nodeInDeleted_S1 instanceof INodeFileUnderConstructionSnapshot);
  assertEquals(BLOCKSIZE * 3,((INodeFile)nodeInDeleted_S1).computeFileSize(true));
  checkCircularList((INodeFileWithSnapshot)fileNode,(INodeFileUnderConstructionSnapshot)nodeInDeleted_S1,(INodeFileUnderConstructionSnapshot)nodeInDeleted_S0);
  hdfs.setReplication(file,(short)(REPLICATION - 1));
  out=appendFileWithoutClosing(file,BLOCKSIZE);
  hdfs.createSnapshot(dir,"s2");
  out.close();
  assertEquals(BLOCKSIZE * 3,((INodeFile)nodeInDeleted_S1).computeFileSize(true));
}
