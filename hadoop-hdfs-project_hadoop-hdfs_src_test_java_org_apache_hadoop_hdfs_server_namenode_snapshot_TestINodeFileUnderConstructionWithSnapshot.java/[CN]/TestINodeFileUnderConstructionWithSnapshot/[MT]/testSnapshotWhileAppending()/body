{
  Path file=new Path(dir,"file");
  DFSTestUtil.createFile(hdfs,file,BLOCKSIZE,REPLICATION,seed);
  HdfsDataOutputStream out=appendFileWithoutClosing(file,BLOCKSIZE);
  out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
  SnapshotTestHelper.createSnapshot(hdfs,dir,"s0");
  out.close();
  INodeFile fileNode=(INodeFile)fsdir.getINode(file.toString());
  final byte[] filename=fileNode.getLocalNameBytes();
  assertEquals(BLOCKSIZE * 2,((INodeFile)fileNode).computeFileSize(true));
  INodeDirectorySnapshottable dirNode=(INodeDirectorySnapshottable)fsdir.getINode(dir.toString());
  DirectoryDiff last=dirNode.getDiffs().getLast();
  Snapshot s0=last.snapshot;
  ChildrenDiff diff=last.getChildrenDiff();
  INodeFileUnderConstructionWithSnapshot nodeInDeleted_S0=(INodeFileUnderConstructionWithSnapshot)diff.searchDeleted(filename);
  assertEquals(BLOCKSIZE * 2,nodeInDeleted_S0.computeFileSize(true,s0));
  out=appendFileWithoutClosing(file,BLOCKSIZE);
  out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
  dirNode=(INodeDirectorySnapshottable)fsdir.getINode(dir.toString());
  diff=dirNode.getDiffs().getLast().getChildrenDiff();
  nodeInDeleted_S0=(INodeFileUnderConstructionWithSnapshot)diff.searchDeleted(filename);
  assertEquals(BLOCKSIZE * 2,nodeInDeleted_S0.computeFileSize(true,s0));
  hdfs.createSnapshot(dir,"s1");
  out.close();
  fileNode=(INodeFile)fsdir.getINode(file.toString());
  dirNode=(INodeDirectorySnapshottable)fsdir.getINode(dir.toString());
  last=dirNode.getDiffs().getLast();
  Snapshot s1=last.snapshot;
  diff=last.getChildrenDiff();
  INodeFile nodeInCreated_S1=(INodeFile)diff.searchCreated(filename);
  assertTrue(fileNode == nodeInCreated_S1);
  assertTrue(fileNode instanceof INodeFileWithSnapshot);
  INodeFile nodeInDeleted_S1=(INodeFile)diff.searchDeleted(filename);
  assertTrue(nodeInDeleted_S1 instanceof INodeFileUnderConstructionWithSnapshot);
  assertEquals(BLOCKSIZE * 3,nodeInDeleted_S1.computeFileSize(true,s1));
  SnapshotTestHelper.checkCircularList(fileNode,nodeInDeleted_S1,nodeInDeleted_S0);
  hdfs.setReplication(file,(short)(REPLICATION - 1));
  out=appendFileWithoutClosing(file,BLOCKSIZE);
  hdfs.createSnapshot(dir,"s2");
  out.close();
  assertEquals(BLOCKSIZE * 3,nodeInDeleted_S1.computeFileSize(true,s1));
}
