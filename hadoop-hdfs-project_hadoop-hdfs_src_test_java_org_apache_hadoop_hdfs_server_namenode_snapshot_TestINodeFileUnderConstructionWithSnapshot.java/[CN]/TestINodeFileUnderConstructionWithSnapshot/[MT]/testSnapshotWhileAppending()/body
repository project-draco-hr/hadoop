{
  Path file=new Path(dir,"file");
  DFSTestUtil.createFile(hdfs,file,BLOCKSIZE,REPLICATION,seed);
  HdfsDataOutputStream out=appendFileWithoutClosing(file,BLOCKSIZE);
  out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
  SnapshotTestHelper.createSnapshot(hdfs,dir,"s0");
  out.close();
  INodeFile fileNode=(INodeFile)fsdir.getINode(file.toString());
  assertEquals(BLOCKSIZE * 2,fileNode.computeFileSize());
  INodeDirectorySnapshottable dirNode=(INodeDirectorySnapshottable)fsdir.getINode(dir.toString());
  DirectoryDiff last=dirNode.getDiffs().getLast();
  Snapshot s0=last.snapshot;
  out=appendFileWithoutClosing(file,BLOCKSIZE);
  out.hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH));
  dirNode=(INodeDirectorySnapshottable)fsdir.getINode(dir.toString());
  assertEquals(BLOCKSIZE * 2,fileNode.computeFileSize(s0));
  hdfs.createSnapshot(dir,"s1");
  out.close();
  fileNode=(INodeFile)fsdir.getINode(file.toString());
  dirNode=(INodeDirectorySnapshottable)fsdir.getINode(dir.toString());
  last=dirNode.getDiffs().getLast();
  Snapshot s1=last.snapshot;
  assertTrue(fileNode.isWithSnapshot());
  assertEquals(BLOCKSIZE * 3,fileNode.computeFileSize(s1));
  hdfs.setReplication(file,(short)(REPLICATION - 1));
  out=appendFileWithoutClosing(file,BLOCKSIZE);
  hdfs.createSnapshot(dir,"s2");
  out.close();
  assertEquals(BLOCKSIZE * 3,fileNode.computeFileSize(s1));
}
