{
  while (!job.isComplete()) {
    try {
      Thread.sleep(500);
    }
 catch (    InterruptedException e) {
      break;
    }
  }
  assertTrue(!ProcessTree.isAlive(pid));
  LOG.info("The map task is not alive after Job is completed, as expected.");
  if (ProcessTree.isSetsidAvailable) {
    for (int i=0; i <= numLevelsOfSubProcesses; i++) {
      String childPid=TestProcfsBasedProcessTree.getPidFromPidFile(scriptDirName + "/childPidFile" + i);
      LOG.info("pid of the descendant process at level " + i + "in the subtree of processes(with the map task as the root)"+ " is "+ childPid);
      assertTrue("Unexpected: The subprocess at level " + i + " in the subtree is alive after Job completion",!isAlive(childPid));
    }
  }
  FileSystem fs=FileSystem.getLocal(mr.createJobConf());
  if (fs.exists(scriptDir)) {
    fs.delete(scriptDir,true);
  }
}
