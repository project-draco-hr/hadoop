{
  JobConf job=new JobConf(conf);
  FileSystem fs=FileSystem.getLocal(conf);
  Path dir=new Path(System.getProperty("test.build.data",".") + "/mapred");
  Path file=new Path(dir,"test.seq");
  Reporter reporter=Reporter.NULL;
  int seed=new Random().nextInt();
  Random random=new Random(seed);
  fs.delete(dir,true);
  FileInputFormat.setInputPaths(job,dir);
  for (int length=0; length < MAX_LENGTH; length+=random.nextInt(MAX_LENGTH / 10) + 1) {
    SequenceFile.Writer writer=SequenceFile.createWriter(fs,conf,file,IntWritable.class,BytesWritable.class);
    try {
      for (int i=0; i < length; i++) {
        IntWritable key=new IntWritable(i);
        byte[] data=new byte[random.nextInt(10)];
        random.nextBytes(data);
        BytesWritable value=new BytesWritable(data);
        writer.append(key,value);
      }
    }
  finally {
      writer.close();
    }
    InputFormat<IntWritable,BytesWritable> format=new SequenceFileInputFormat<IntWritable,BytesWritable>();
    IntWritable key=new IntWritable();
    BytesWritable value=new BytesWritable();
    for (int i=0; i < 3; i++) {
      int numSplits=random.nextInt(MAX_LENGTH / (SequenceFile.SYNC_INTERVAL / 20)) + 1;
      InputSplit[] splits=format.getSplits(job,numSplits);
      BitSet bits=new BitSet(length);
      for (int j=0; j < splits.length; j++) {
        RecordReader<IntWritable,BytesWritable> reader=format.getRecordReader(splits[j],job,reporter);
        try {
          int count=0;
          while (reader.next(key,value)) {
            assertFalse("Key in multiple partitions.",bits.get(key.get()));
            bits.set(key.get());
            count++;
          }
        }
  finally {
          reader.close();
        }
      }
      assertEquals("Some keys in no partition.",length,bits.cardinality());
    }
  }
}
