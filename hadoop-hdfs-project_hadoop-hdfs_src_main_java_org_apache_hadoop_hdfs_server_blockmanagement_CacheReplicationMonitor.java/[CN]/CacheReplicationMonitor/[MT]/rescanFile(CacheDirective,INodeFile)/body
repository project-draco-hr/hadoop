{
  BlockInfoContiguous[] blockInfos=file.getBlocks();
  directive.addFilesNeeded(1);
  long neededTotal=file.computeFileSizeNotIncludingLastUcBlock() * directive.getReplication();
  directive.addBytesNeeded(neededTotal);
  CachePool pool=directive.getPool();
  if (pool.getBytesNeeded() > pool.getLimit()) {
    LOG.debug("Directive {}: not scanning file {} because " + "bytesNeeded for pool {} is {}, but the pool's limit is {}",directive.getId(),file.getFullPathName(),pool.getPoolName(),pool.getBytesNeeded(),pool.getLimit());
    return;
  }
  long cachedTotal=0;
  for (  BlockInfoContiguous blockInfo : blockInfos) {
    if (!blockInfo.getBlockUCState().equals(BlockUCState.COMPLETE)) {
      LOG.trace("Directive {}: can't cache block {} because it is in state " + "{}, not COMPLETE.",directive.getId(),blockInfo,blockInfo.getBlockUCState());
      continue;
    }
    Block block=new Block(blockInfo.getBlockId());
    CachedBlock ncblock=new CachedBlock(block.getBlockId(),directive.getReplication(),mark);
    CachedBlock ocblock=cachedBlocks.get(ncblock);
    if (ocblock == null) {
      cachedBlocks.put(ncblock);
      ocblock=ncblock;
    }
 else {
      List<DatanodeDescriptor> cachedOn=ocblock.getDatanodes(Type.CACHED);
      long cachedByBlock=Math.min(cachedOn.size(),directive.getReplication()) * blockInfo.getNumBytes();
      cachedTotal+=cachedByBlock;
      if ((mark != ocblock.getMark()) || (ocblock.getReplication() < directive.getReplication())) {
        ocblock.setReplicationAndMark(directive.getReplication(),mark);
      }
    }
    LOG.trace("Directive {}: setting replication for block {} to {}",directive.getId(),blockInfo,ocblock.getReplication());
  }
  directive.addBytesCached(cachedTotal);
  if (cachedTotal == neededTotal) {
    directive.addFilesCached(1);
  }
  LOG.debug("Directive {}: caching {}: {}/{} bytes",directive.getId(),file.getFullPathName(),cachedTotal,neededTotal);
}
