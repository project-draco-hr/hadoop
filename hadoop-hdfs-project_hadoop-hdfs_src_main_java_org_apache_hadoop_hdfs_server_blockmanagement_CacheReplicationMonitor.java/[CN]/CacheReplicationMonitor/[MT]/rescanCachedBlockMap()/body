{
  Set<DatanodeDescriptor> datanodes=blockManager.getDatanodeManager().getDatanodes();
  for (  DatanodeDescriptor dn : datanodes) {
    long remaining=dn.getCacheRemaining();
    for (Iterator<CachedBlock> it=dn.getPendingCached().iterator(); it.hasNext(); ) {
      CachedBlock cblock=it.next();
      BlockInfo blockInfo=blockManager.getStoredBlock(new Block(cblock.getBlockId()));
      if (blockInfo.getNumBytes() > remaining) {
        LOG.debug("Block {}: removing from PENDING_CACHED for node {} " + "because it cannot fit in remaining cache size {}.",cblock.getBlockId(),dn.getDatanodeUuid(),remaining);
        it.remove();
      }
 else {
        remaining-=blockInfo.getNumBytes();
      }
    }
  }
  for (Iterator<CachedBlock> cbIter=cachedBlocks.iterator(); cbIter.hasNext(); ) {
    scannedBlocks++;
    CachedBlock cblock=cbIter.next();
    List<DatanodeDescriptor> pendingCached=cblock.getDatanodes(Type.PENDING_CACHED);
    List<DatanodeDescriptor> cached=cblock.getDatanodes(Type.CACHED);
    List<DatanodeDescriptor> pendingUncached=cblock.getDatanodes(Type.PENDING_UNCACHED);
    for (Iterator<DatanodeDescriptor> iter=pendingUncached.iterator(); iter.hasNext(); ) {
      DatanodeDescriptor datanode=iter.next();
      if (!cblock.isInList(datanode.getCached())) {
        LOG.trace("Block {}: removing from PENDING_UNCACHED for node {} " + "because the DataNode uncached it.",cblock.getBlockId(),datanode.getDatanodeUuid());
        datanode.getPendingUncached().remove(cblock);
        iter.remove();
      }
    }
    BlockInfo blockInfo=blockManager.getStoredBlock(new Block(cblock.getBlockId()));
    String reason=findReasonForNotCaching(cblock,blockInfo);
    int neededCached=0;
    if (reason != null) {
      LOG.trace("Block {}: can't cache block because it is {}",cblock.getBlockId(),reason);
    }
 else {
      neededCached=cblock.getReplication();
    }
    int numCached=cached.size();
    if (numCached >= neededCached) {
      for (Iterator<DatanodeDescriptor> iter=pendingCached.iterator(); iter.hasNext(); ) {
        DatanodeDescriptor datanode=iter.next();
        datanode.getPendingCached().remove(cblock);
        iter.remove();
        LOG.trace("Block {}: removing from PENDING_CACHED for node {} " + "because we already have {} cached replicas and we only" + " need {}",cblock.getBlockId(),datanode.getDatanodeUuid(),numCached,neededCached);
      }
    }
    if (numCached < neededCached) {
      for (Iterator<DatanodeDescriptor> iter=pendingUncached.iterator(); iter.hasNext(); ) {
        DatanodeDescriptor datanode=iter.next();
        datanode.getPendingUncached().remove(cblock);
        iter.remove();
        LOG.trace("Block {}: removing from PENDING_UNCACHED for node {} " + "because we only have {} cached replicas and we need " + "{}",cblock.getBlockId(),datanode.getDatanodeUuid(),numCached,neededCached);
      }
    }
    int neededUncached=numCached - (pendingUncached.size() + neededCached);
    if (neededUncached > 0) {
      addNewPendingUncached(neededUncached,cblock,cached,pendingUncached);
    }
 else {
      int additionalCachedNeeded=neededCached - (numCached + pendingCached.size());
      if (additionalCachedNeeded > 0) {
        addNewPendingCached(additionalCachedNeeded,cblock,cached,pendingCached);
      }
    }
    if ((neededCached == 0) && pendingUncached.isEmpty() && pendingCached.isEmpty()) {
      LOG.trace("Block {}: removing from cachedBlocks, since neededCached " + "== 0, and pendingUncached and pendingCached are empty.",cblock.getBlockId());
      cbIter.remove();
    }
  }
}
