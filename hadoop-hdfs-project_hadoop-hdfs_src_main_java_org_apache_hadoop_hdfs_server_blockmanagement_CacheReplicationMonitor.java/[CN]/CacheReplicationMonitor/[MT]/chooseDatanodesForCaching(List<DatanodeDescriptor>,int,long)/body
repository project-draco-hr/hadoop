{
  List<DatanodeDescriptor> targets=new ArrayList<DatanodeDescriptor>(possibilities);
  List<DatanodeDescriptor> chosen=new LinkedList<DatanodeDescriptor>();
  List<DatanodeDescriptor> stale=new LinkedList<DatanodeDescriptor>();
  Iterator<DatanodeDescriptor> it=targets.iterator();
  while (it.hasNext()) {
    DatanodeDescriptor d=it.next();
    if (d.isStale(staleInterval)) {
      it.remove();
      stale.add(d);
    }
  }
  while (chosen.size() < neededCached) {
    if (targets.isEmpty()) {
      if (!stale.isEmpty()) {
        targets=stale;
      }
 else {
        break;
      }
    }
    DatanodeDescriptor target=chooseRandomDatanodeByRemainingCapacity(targets);
    chosen.add(target);
    targets.remove(target);
  }
  return chosen;
}
