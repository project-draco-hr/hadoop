{
  Configuration conf=new Configuration();
  conf.set(DFSConfigKeys.DFS_CLIENT_CONTEXT,"testUnbufferClosesSocketsContext");
  conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY,false);
  conf.setLong(DFSConfigKeys.DFS_CLIENT_SOCKET_TIMEOUT_KEY,100000000L);
  conf.setLong(DFSConfigKeys.DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY,100000000L);
  MiniDFSCluster cluster=null;
  FSDataInputStream stream=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).build();
    DistributedFileSystem dfs=(DistributedFileSystem)FileSystem.newInstance(conf);
    final Path TEST_PATH=new Path("/test1");
    DFSTestUtil.createFile(dfs,TEST_PATH,128,(short)1,1);
    stream=dfs.open(TEST_PATH);
    stream.seek(2);
    int b=stream.read();
    Assert.assertTrue(-1 != b);
    PeerCache cache=dfs.getClient().getClientContext().getPeerCache();
    Assert.assertEquals(0,cache.size());
    stream.unbuffer();
    stream.seek(2);
    Assert.assertEquals(1,cache.size());
    int b2=stream.read();
    Assert.assertEquals(b,b2);
  }
  finally {
    if (stream != null) {
      IOUtils.cleanup(null,stream);
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
