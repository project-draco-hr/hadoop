{
  FileContext localFS=FileContext.getLocalFSFileContext();
  localFS.delete(new Path(localDir.getAbsolutePath()),true);
  localFS.delete(new Path(localLogDir.getAbsolutePath()),true);
  localFS.delete(new Path(remoteLogDir.getAbsolutePath()),true);
  localDir.mkdir();
  localLogDir.mkdir();
  remoteLogDir.mkdir();
  Context context=new NMContext();
  YarnConfiguration conf=new YarnConfiguration();
  conf.set(YarnConfiguration.NM_LOCAL_DIRS,localDir.getAbsolutePath());
  conf.set(YarnConfiguration.NM_LOG_DIRS,localLogDir.getAbsolutePath());
  conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,remoteLogDir.getAbsolutePath());
  ContainerExecutor exec=new DefaultContainerExecutor();
  exec.setConf(conf);
  DeletionService del=new DeletionService(exec);
  Dispatcher dispatcher=new AsyncDispatcher();
  NodeHealthCheckerService healthChecker=new NodeHealthCheckerService();
  healthChecker.init(conf);
  LocalDirsHandlerService dirsHandler=healthChecker.getDiskHandler();
  NodeManagerMetrics metrics=NodeManagerMetrics.create();
  ContainerTokenSecretManager containerTokenSecretManager=new ContainerTokenSecretManager();
  NodeStatusUpdater nodeStatusUpdater=new NodeStatusUpdaterImpl(context,dispatcher,healthChecker,metrics,containerTokenSecretManager){
    @Override protected ResourceTracker getRMClient(){
      return new LocalRMInterface();
    }
    @Override protected void startStatusUpdater(){
      return;
    }
  }
;
  DummyContainerManager containerManager=new DummyContainerManager(context,exec,del,nodeStatusUpdater,metrics,containerTokenSecretManager,new ApplicationACLsManager(conf),dirsHandler);
  containerManager.init(conf);
  containerManager.start();
  ContainerLaunchContext launchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  ContainerId cID=recordFactory.newRecordInstance(ContainerId.class);
  ApplicationId applicationId=recordFactory.newRecordInstance(ApplicationId.class);
  applicationId.setClusterTimestamp(0);
  applicationId.setId(0);
  ApplicationAttemptId applicationAttemptId=recordFactory.newRecordInstance(ApplicationAttemptId.class);
  applicationAttemptId.setApplicationId(applicationId);
  applicationAttemptId.setAttemptId(0);
  cID.setApplicationAttemptId(applicationAttemptId);
  launchContext.setContainerId(cID);
  launchContext.setUser("testing");
  launchContext.setResource(recordFactory.newRecordInstance(Resource.class));
  StartContainerRequest request=recordFactory.newRecordInstance(StartContainerRequest.class);
  request.setContainerLaunchContext(launchContext);
  containerManager.startContainer(request);
  BaseContainerManagerTest.waitForContainerState(containerManager,cID,ContainerState.RUNNING);
  StopContainerRequest stopRequest=recordFactory.newRecordInstance(StopContainerRequest.class);
  stopRequest.setContainerId(cID);
  containerManager.stopContainer(stopRequest);
  BaseContainerManagerTest.waitForContainerState(containerManager,cID,ContainerState.COMPLETE);
  containerManager.stop();
}
