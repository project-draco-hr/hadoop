{
  deleteQueuesConfigFile();
  Document doc=createDocument();
  createSimpleDocument(doc);
  writeToFile(doc,QUEUES_CONFIG_FILE_PATH);
  StringWriter out=new StringWriter();
  Configuration conf=new Configuration(false);
  conf.setBoolean(MRConfig.MR_ACLS_ENABLED,true);
  QueueManager.dumpConfiguration(out,QUEUES_CONFIG_FILE_PATH,conf);
  ObjectMapper mapper=new ObjectMapper();
  JsonQueueTree queueTree=mapper.readValue(out.toString(),JsonQueueTree.class);
  assertEquals(2,queueTree.getQueues().length);
  HashMap<String,JsonQueue> topQueues=new HashMap<String,JsonQueue>();
  for (  JsonQueue topQueue : queueTree.getQueues()) {
    topQueues.put(topQueue.getName(),topQueue);
  }
  assertEquals(2,topQueues.get("p1").getChildren().length);
  HashMap<String,JsonQueue> childQueues=new HashMap<String,JsonQueue>();
  for (  JsonQueue child : topQueues.get("p1").getChildren()) {
    childQueues.put(child.getName(),child);
  }
  assertEquals("stopped",childQueues.get("p1:p12").getState());
  HashMap<String,JsonProperty> q1_properties=new HashMap<String,JsonProperty>();
  for (  JsonProperty prop : topQueues.get("q1").getProperties()) {
    q1_properties.put(prop.getKey(),prop);
  }
  assertEquals("10",q1_properties.get("capacity").getValue());
  assertEquals("35",q1_properties.get("maxCapacity").getValue());
  assertEquals("u1 ",childQueues.get("p1:p12").getAcl_submit_job());
  assertEquals("u2 ",childQueues.get("p1:p12").getAcl_administer_jobs());
}
