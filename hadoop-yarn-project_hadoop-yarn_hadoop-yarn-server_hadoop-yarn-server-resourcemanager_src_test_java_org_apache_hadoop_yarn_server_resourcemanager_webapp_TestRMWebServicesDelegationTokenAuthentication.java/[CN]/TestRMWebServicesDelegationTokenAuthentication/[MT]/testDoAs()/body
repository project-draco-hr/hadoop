{
  KerberosTestUtils.doAsClient(new Callable<Void>(){
    @Override public Void call() throws Exception {
      String token="";
      String owner="";
      String renewer="renewer";
      String body="{\"renewer\":\"" + renewer + "\"}";
      URL url=new URL("http://localhost:8088/ws/v1/cluster/delegation-token?doAs=client2");
      HttpURLConnection conn=(HttpURLConnection)url.openConnection();
      setupConn(conn,"POST",MediaType.APPLICATION_JSON,body);
      InputStream response=conn.getInputStream();
      assertEquals(Status.OK.getStatusCode(),conn.getResponseCode());
      BufferedReader reader=null;
      try {
        reader=new BufferedReader(new InputStreamReader(response,"UTF8"));
        for (String line; (line=reader.readLine()) != null; ) {
          JSONObject obj=new JSONObject(line);
          if (obj.has("token")) {
            token=obj.getString("token");
          }
          if (obj.has("owner")) {
            owner=obj.getString("owner");
          }
        }
      }
  finally {
        IOUtils.closeQuietly(reader);
        IOUtils.closeQuietly(response);
      }
      Assert.assertEquals("client2",owner);
      Token<RMDelegationTokenIdentifier> realToken=new Token<RMDelegationTokenIdentifier>();
      realToken.decodeFromUrlString(token);
      Assert.assertEquals("client2",realToken.decodeIdentifier().getOwner().toString());
      return null;
    }
  }
);
  final String token=getDelegationToken("client");
  String renewer="renewer";
  String body="{\"renewer\":\"" + renewer + "\"}";
  URL url=new URL("http://localhost:8088/ws/v1/cluster/delegation-token?doAs=client2");
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  conn.setRequestProperty(delegationTokenHeader,token);
  setupConn(conn,"POST",MediaType.APPLICATION_JSON,body);
  try {
    conn.getInputStream();
    fail("Client should not be allowed to impersonate using delegation tokens");
  }
 catch (  IOException ie) {
    assertEquals(Status.FORBIDDEN.getStatusCode(),conn.getResponseCode());
  }
  KerberosTestUtils.doAs("client2@EXAMPLE.COM",new Callable<Void>(){
    @Override public Void call() throws Exception {
      String renewer="renewer";
      String body="{\"renewer\":\"" + renewer + "\"}";
      URL url=new URL("http://localhost:8088/ws/v1/cluster/delegation-token?doAs=client");
      HttpURLConnection conn=(HttpURLConnection)url.openConnection();
      setupConn(conn,"POST",MediaType.APPLICATION_JSON,body);
      try {
        conn.getInputStream();
        fail("Non superuser client should not be allowed to carry out doAs");
      }
 catch (      IOException ie) {
        assertEquals(Status.FORBIDDEN.getStatusCode(),conn.getResponseCode());
      }
      return null;
    }
  }
);
}
