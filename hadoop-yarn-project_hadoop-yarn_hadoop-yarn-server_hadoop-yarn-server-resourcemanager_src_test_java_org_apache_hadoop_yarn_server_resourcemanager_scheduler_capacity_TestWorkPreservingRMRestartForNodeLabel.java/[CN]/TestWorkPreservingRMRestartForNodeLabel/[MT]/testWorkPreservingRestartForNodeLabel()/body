{
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x"),NodeId.newInstance("h2",0),toSet("y")));
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  conf=TestUtils.getConfigurationWithDefaultQueueLabels(conf);
  MockRM rm1=new MockRM(conf,memStore){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",8000);
  MockNM nm2=rm1.registerNode("h2:1234",8000);
  MockNM nm3=rm1.registerNode("h3:1234",8000);
  ContainerId containerId;
  RMApp app1=rm1.submitApp(200,"app","user",null,"a1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  am1.allocate("*",1024,1,new ArrayList<ContainerId>());
  containerId=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  Assert.assertTrue(rm1.waitForState(nm1,containerId,RMContainerState.ALLOCATED,10 * 1000));
  checkRMContainerLabelExpression(ContainerId.newContainerId(am1.getApplicationAttemptId(),1),rm1,"x");
  checkRMContainerLabelExpression(ContainerId.newContainerId(am1.getApplicationAttemptId(),2),rm1,"x");
  RMApp app2=rm1.submitApp(200,"app","user",null,"b1");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm2);
  am2.allocate("*",1024,1,new ArrayList<ContainerId>());
  containerId=ContainerId.newContainerId(am2.getApplicationAttemptId(),2);
  Assert.assertTrue(rm1.waitForState(nm2,containerId,RMContainerState.ALLOCATED,10 * 1000));
  checkRMContainerLabelExpression(ContainerId.newContainerId(am2.getApplicationAttemptId(),1),rm1,"y");
  checkRMContainerLabelExpression(ContainerId.newContainerId(am2.getApplicationAttemptId(),2),rm1,"y");
  RMApp app3=rm1.submitApp(200,"app","user",null,"c1");
  MockAM am3=MockRM.launchAndRegisterAM(app3,rm1,nm3);
  am3.allocate("*",1024,1,new ArrayList<ContainerId>());
  containerId=ContainerId.newContainerId(am3.getApplicationAttemptId(),2);
  Assert.assertTrue(rm1.waitForState(nm3,containerId,RMContainerState.ALLOCATED,10 * 1000));
  checkRMContainerLabelExpression(ContainerId.newContainerId(am3.getApplicationAttemptId(),1),rm1,"");
  checkRMContainerLabelExpression(ContainerId.newContainerId(am3.getApplicationAttemptId(),2),rm1,"");
  mgr=new NullRMNodeLabelsManager();
  mgr.init(conf);
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x"),NodeId.newInstance("h2",0),toSet("y")));
  MockRM rm2=new MockRM(conf,memStore){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm2.start();
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  nm2.setResourceTrackerService(rm2.getResourceTrackerService());
  nm3.setResourceTrackerService(rm2.getResourceTrackerService());
  NMContainerStatus app1c1=TestRMRestart.createNMContainerStatus(am1.getApplicationAttemptId(),1,ContainerState.RUNNING,"x");
  NMContainerStatus app1c2=TestRMRestart.createNMContainerStatus(am1.getApplicationAttemptId(),2,ContainerState.RUNNING,"x");
  nm1.registerNode(Arrays.asList(app1c1,app1c2),null);
  waitForNumContainersToRecover(2,rm2,am1.getApplicationAttemptId());
  checkRMContainerLabelExpression(ContainerId.newContainerId(am1.getApplicationAttemptId(),1),rm1,"x");
  checkRMContainerLabelExpression(ContainerId.newContainerId(am1.getApplicationAttemptId(),2),rm1,"x");
  NMContainerStatus app2c1=TestRMRestart.createNMContainerStatus(am2.getApplicationAttemptId(),1,ContainerState.RUNNING,"y");
  NMContainerStatus app2c2=TestRMRestart.createNMContainerStatus(am2.getApplicationAttemptId(),2,ContainerState.RUNNING,"y");
  nm2.registerNode(Arrays.asList(app2c1,app2c2),null);
  waitForNumContainersToRecover(2,rm2,am2.getApplicationAttemptId());
  checkRMContainerLabelExpression(ContainerId.newContainerId(am2.getApplicationAttemptId(),1),rm1,"y");
  checkRMContainerLabelExpression(ContainerId.newContainerId(am2.getApplicationAttemptId(),2),rm1,"y");
  NMContainerStatus app3c1=TestRMRestart.createNMContainerStatus(am3.getApplicationAttemptId(),1,ContainerState.RUNNING,"");
  NMContainerStatus app3c2=TestRMRestart.createNMContainerStatus(am3.getApplicationAttemptId(),2,ContainerState.RUNNING,"");
  nm3.registerNode(Arrays.asList(app3c1,app3c2),null);
  waitForNumContainersToRecover(2,rm2,am3.getApplicationAttemptId());
  checkRMContainerLabelExpression(ContainerId.newContainerId(am3.getApplicationAttemptId(),1),rm1,"");
  checkRMContainerLabelExpression(ContainerId.newContainerId(am3.getApplicationAttemptId(),2),rm1,"");
  checkAppResourceUsage("x",app1.getApplicationId(),rm1,2 * GB);
  checkAppResourceUsage("y",app2.getApplicationId(),rm1,2 * GB);
  checkAppResourceUsage("",app3.getApplicationId(),rm1,2 * GB);
  checkQueueResourceUsage("x","a1",rm1,2 * GB);
  checkQueueResourceUsage("y","b1",rm1,2 * GB);
  checkQueueResourceUsage("","c1",rm1,2 * GB);
  checkQueueResourceUsage("x","a",rm1,2 * GB);
  checkQueueResourceUsage("y","b",rm1,2 * GB);
  checkQueueResourceUsage("","c",rm1,2 * GB);
  checkQueueResourceUsage("x","root",rm1,2 * GB);
  checkQueueResourceUsage("y","root",rm1,2 * GB);
  checkQueueResourceUsage("","root",rm1,2 * GB);
  rm1.close();
  rm2.close();
}
