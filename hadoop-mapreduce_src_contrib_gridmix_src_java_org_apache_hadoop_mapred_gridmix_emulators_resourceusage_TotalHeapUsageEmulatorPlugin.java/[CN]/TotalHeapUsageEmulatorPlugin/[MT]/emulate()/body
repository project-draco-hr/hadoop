{
  if (enabled) {
    float currentProgress=progress.getProgress();
    if (prevEmulationProgress < currentProgress && ((currentProgress - prevEmulationProgress) >= emulationInterval || currentProgress == 1)) {
      long maxHeapSizeInMB=getMaxHeapUsageInMB();
      long committedHeapSizeInMB=getTotalHeapUsageInMB();
      long expectedHeapUsageInMB=Math.min(maxHeapSizeInMB,(long)(targetHeapUsageInMB * currentProgress));
      if (expectedHeapUsageInMB < maxHeapSizeInMB && committedHeapSizeInMB < expectedHeapUsageInMB) {
        long bufferInMB=(long)(minFreeHeapRatio * expectedHeapUsageInMB);
        long currentDifferenceInMB=expectedHeapUsageInMB - committedHeapSizeInMB;
        long currentIncrementLoadSizeInMB=(long)(currentDifferenceInMB * heapLoadRatio);
        currentIncrementLoadSizeInMB=Math.max(1,currentIncrementLoadSizeInMB);
        while (committedHeapSizeInMB + bufferInMB < expectedHeapUsageInMB) {
          emulatorCore.load(currentIncrementLoadSizeInMB);
          committedHeapSizeInMB=getTotalHeapUsageInMB();
        }
      }
      prevEmulationProgress=currentProgress;
    }
    emulatorCore.reset();
  }
}
