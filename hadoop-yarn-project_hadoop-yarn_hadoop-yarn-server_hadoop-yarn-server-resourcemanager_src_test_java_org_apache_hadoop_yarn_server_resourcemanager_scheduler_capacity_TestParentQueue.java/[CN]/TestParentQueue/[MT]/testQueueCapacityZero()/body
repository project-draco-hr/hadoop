{
  setupMultiLevelQueues(csConf);
  final String Q_B=CapacitySchedulerConfiguration.ROOT + "." + B;
  csConf.setCapacity(Q_B,0);
  csConf.setCapacity(Q_B + "." + B1,0);
  csConf.setCapacity(Q_B + "." + B2,0);
  csConf.setCapacity(Q_B + "." + B3,0);
  final String Q_A=CapacitySchedulerConfiguration.ROOT + "." + A;
  csConf.setCapacity(Q_A,60);
  Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
  try {
    CapacityScheduler.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,queues,queues,TestUtils.spyHook);
  }
 catch (  IllegalArgumentException e) {
    fail("Failed to create queues with 0 capacity: " + e);
  }
  assertTrue("Failed to create queues with 0 capacity",true);
}
