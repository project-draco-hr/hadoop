{
  final LeaseManager leaseManager=fsn.getLeaseManager();
  final FSDirectory dir=fsn.getFSDirectory();
synchronized (leaseManager) {
    Collection<Long> filesWithUC=leaseManager.getINodeIdWithLeases();
    for (    Long id : filesWithUC) {
      snapshotUCMap.remove(id);
    }
    out.writeInt(filesWithUC.size() + snapshotUCMap.size());
    for (    Long id : filesWithUC) {
      INodeFile file=dir.getInode(id).asFile();
      String path=file.getFullPathName();
      FSImageSerialization.writeINodeUnderConstruction(out,file,path);
    }
    for (    Map.Entry<Long,INodeFile> entry : snapshotUCMap.entrySet()) {
      StringBuilder b=new StringBuilder();
      b.append(FSDirectory.DOT_RESERVED_PATH_PREFIX).append(Path.SEPARATOR).append(FSDirectory.DOT_INODES_STRING).append(Path.SEPARATOR).append(entry.getValue().getId());
      FSImageSerialization.writeINodeUnderConstruction(out,entry.getValue(),b.toString());
    }
  }
}
