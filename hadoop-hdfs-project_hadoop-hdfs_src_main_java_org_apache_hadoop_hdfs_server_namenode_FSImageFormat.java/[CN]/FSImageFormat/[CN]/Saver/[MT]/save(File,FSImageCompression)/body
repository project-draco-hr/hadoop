{
  checkNotSaved();
  final FSNamesystem sourceNamesystem=context.getSourceNamesystem();
  final INodeDirectory rootDir=sourceNamesystem.dir.rootDir;
  final long numINodes=rootDir.getDirectoryWithQuotaFeature().getSpaceConsumed().get(Quota.NAMESPACE);
  String sdPath=newFile.getParentFile().getParentFile().getAbsolutePath();
  Step step=new Step(StepType.INODES,sdPath);
  StartupProgress prog=NameNode.getStartupProgress();
  prog.beginStep(Phase.SAVING_CHECKPOINT,step);
  prog.setTotal(Phase.SAVING_CHECKPOINT,step,numINodes);
  Counter counter=prog.getCounter(Phase.SAVING_CHECKPOINT,step);
  long startTime=now();
  MessageDigest digester=MD5Hash.getDigester();
  FileOutputStream fout=new FileOutputStream(newFile);
  DigestOutputStream fos=new DigestOutputStream(fout,digester);
  DataOutputStream out=new DataOutputStream(fos);
  try {
    out.writeInt(LAYOUT_VERSION);
    LayoutFlags.write(out);
    out.writeInt(sourceNamesystem.unprotectedGetNamespaceInfo().getNamespaceID());
    out.writeLong(numINodes);
    out.writeLong(sourceNamesystem.getGenerationStampV1());
    out.writeLong(sourceNamesystem.getGenerationStampV2());
    out.writeLong(sourceNamesystem.getGenerationStampAtblockIdSwitch());
    out.writeLong(sourceNamesystem.getLastAllocatedBlockId());
    out.writeLong(context.getTxId());
    out.writeLong(sourceNamesystem.getLastInodeId());
    sourceNamesystem.getSnapshotManager().write(out);
    out=compression.writeHeaderAndWrapStream(fos);
    LOG.info("Saving image file " + newFile + " using "+ compression);
    saveINode2Image(rootDir,out,false,referenceMap,counter);
    saveImage(rootDir,out,true,false,counter);
    prog.endStep(Phase.SAVING_CHECKPOINT,step);
    prog.setCount(Phase.SAVING_CHECKPOINT,step,numINodes);
    sourceNamesystem.saveFilesUnderConstruction(out,snapshotUCMap);
    context.checkCancelled();
    sourceNamesystem.saveSecretManagerStateCompat(out,sdPath);
    context.checkCancelled();
    sourceNamesystem.getCacheManager().saveStateCompat(out,sdPath);
    context.checkCancelled();
    out.flush();
    context.checkCancelled();
    fout.getChannel().force(true);
  }
  finally {
    out.close();
  }
  saved=true;
  savedDigest=new MD5Hash(digester.digest());
  LOG.info("Image file " + newFile + " of size "+ newFile.length()+ " bytes saved in "+ (now() - startTime) / 1000 + " seconds.");
}
