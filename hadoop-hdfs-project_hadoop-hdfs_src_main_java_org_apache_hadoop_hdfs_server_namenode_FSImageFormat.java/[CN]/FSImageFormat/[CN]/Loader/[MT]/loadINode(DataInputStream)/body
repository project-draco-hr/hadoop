{
  long modificationTime=0;
  long atime=0;
  long blockSize=0;
  int imgVersion=getLayoutVersion();
  short replication=in.readShort();
  replication=namesystem.getBlockManager().adjustReplication(replication);
  modificationTime=in.readLong();
  if (LayoutVersion.supports(Feature.FILE_ACCESS_TIME,imgVersion)) {
    atime=in.readLong();
  }
  blockSize=in.readLong();
  int numBlocks=in.readInt();
  BlockInfo blocks[]=null;
  if (numBlocks >= 0) {
    blocks=new BlockInfo[numBlocks];
    for (int j=0; j < numBlocks; j++) {
      blocks[j]=new BlockInfo(replication);
      blocks[j].readFields(in);
    }
  }
  long nsQuota=-1L;
  if (blocks == null && numBlocks == -1) {
    nsQuota=in.readLong();
  }
  long dsQuota=-1L;
  if (LayoutVersion.supports(Feature.DISKSPACE_QUOTA,imgVersion) && blocks == null && numBlocks == -1) {
    dsQuota=in.readLong();
  }
  String symlink="";
  if (numBlocks == -2) {
    symlink=Text.readString(in);
  }
  PermissionStatus permissions=PermissionStatus.read(in);
  return INode.newINode(permissions,blocks,symlink,replication,modificationTime,atime,nsQuota,dsQuota,blockSize);
}
