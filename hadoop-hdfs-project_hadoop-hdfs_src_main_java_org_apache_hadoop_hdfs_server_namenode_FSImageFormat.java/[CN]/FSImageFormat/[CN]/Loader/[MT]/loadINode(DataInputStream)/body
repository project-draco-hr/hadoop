{
  long modificationTime=0;
  long atime=0;
  long blockSize=0;
  long computeFileSize=-1;
  boolean snapshottable=false;
  boolean withSnapshot=false;
  boolean withLink=false;
  int imgVersion=getLayoutVersion();
  long inodeId=namesystem.allocateNewInodeId();
  short replication=in.readShort();
  replication=namesystem.getBlockManager().adjustReplication(replication);
  modificationTime=in.readLong();
  if (LayoutVersion.supports(Feature.FILE_ACCESS_TIME,imgVersion)) {
    atime=in.readLong();
  }
  blockSize=in.readLong();
  int numBlocks=in.readInt();
  BlockInfo blocks[]=null;
  String clientName="";
  String clientMachine="";
  boolean underConstruction=false;
  if (numBlocks >= 0) {
    blocks=LayoutVersion.supports(Feature.SNAPSHOT,imgVersion) ? (in.readBoolean() ? new BlockInfo[numBlocks] : null) : new BlockInfo[numBlocks];
    for (int j=0; j < numBlocks; j++) {
      blocks[j]=new BlockInfo(replication);
      blocks[j].readFields(in);
    }
    if (LayoutVersion.supports(Feature.SNAPSHOT,imgVersion)) {
      computeFileSize=in.readLong();
      if (computeFileSize < 0) {
        withLink=in.readBoolean();
      }
 else {
        underConstruction=in.readBoolean();
        if (underConstruction) {
          clientName=FSImageSerialization.readString(in);
          clientMachine=FSImageSerialization.readString(in);
        }
      }
    }
  }
  long nsQuota=-1L;
  if (blocks == null && numBlocks == -1) {
    nsQuota=in.readLong();
  }
  long dsQuota=-1L;
  if (LayoutVersion.supports(Feature.DISKSPACE_QUOTA,imgVersion) && blocks == null && numBlocks == -1) {
    dsQuota=in.readLong();
  }
  if (LayoutVersion.supports(Feature.SNAPSHOT,imgVersion) && blocks == null && numBlocks == -1) {
    snapshottable=in.readBoolean();
    if (!snapshottable) {
      withSnapshot=in.readBoolean();
    }
  }
  String symlink="";
  if (numBlocks == -2) {
    symlink=Text.readString(in);
  }
  PermissionStatus permissions=PermissionStatus.read(in);
  return INode.newINode(inodeId,permissions,blocks,symlink,replication,modificationTime,atime,nsQuota,dsQuota,blockSize,numBlocks,withLink,computeFileSize,snapshottable,withSnapshot,underConstruction,clientName,clientMachine);
}
