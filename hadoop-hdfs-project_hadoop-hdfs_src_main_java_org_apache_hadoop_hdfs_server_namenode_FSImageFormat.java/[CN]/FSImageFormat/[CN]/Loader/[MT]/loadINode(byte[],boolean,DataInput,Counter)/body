{
  final int imgVersion=getLayoutVersion();
  if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT,imgVersion)) {
    namesystem.getFSDirectory().verifyINodeName(localName);
  }
  long inodeId=NameNodeLayoutVersion.supports(LayoutVersion.Feature.ADD_INODE_ID,imgVersion) ? in.readLong() : namesystem.dir.allocateNewInodeId();
  final short replication=namesystem.getBlockManager().adjustReplication(in.readShort());
  final long modificationTime=in.readLong();
  long atime=0;
  if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.FILE_ACCESS_TIME,imgVersion)) {
    atime=in.readLong();
  }
  final long blockSize=in.readLong();
  final int numBlocks=in.readInt();
  if (numBlocks >= 0) {
    BlockInfo[] blocks=new BlockInfo[numBlocks];
    for (int j=0; j < numBlocks; j++) {
      blocks[j]=new BlockInfoContiguous(replication);
      blocks[j].readFields(in);
    }
    String clientName="";
    String clientMachine="";
    boolean underConstruction=false;
    FileDiffList fileDiffs=null;
    if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT,imgVersion)) {
      fileDiffs=SnapshotFSImageFormat.loadFileDiffList(in,this);
      if (isSnapshotINode) {
        underConstruction=in.readBoolean();
        if (underConstruction) {
          clientName=FSImageSerialization.readString(in);
          clientMachine=FSImageSerialization.readString(in);
          if (blocks.length > 0) {
            BlockInfo lastBlk=blocks[blocks.length - 1];
            blocks[blocks.length - 1]=new BlockInfoUnderConstructionContiguous(lastBlk,replication);
          }
        }
      }
    }
    final PermissionStatus permissions=PermissionStatus.read(in);
    if (counter != null) {
      counter.increment();
    }
    final INodeFile file=new INodeFile(inodeId,localName,permissions,modificationTime,atime,blocks,replication,blockSize);
    if (underConstruction) {
      file.toUnderConstruction(clientName,clientMachine);
    }
    return fileDiffs == null ? file : new INodeFile(file,fileDiffs);
  }
 else   if (numBlocks == -1) {
    final long nsQuota=in.readLong();
    long dsQuota=-1L;
    if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.DISKSPACE_QUOTA,imgVersion)) {
      dsQuota=in.readLong();
    }
    boolean snapshottable=false;
    boolean withSnapshot=false;
    if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT,imgVersion)) {
      snapshottable=in.readBoolean();
      if (!snapshottable) {
        withSnapshot=in.readBoolean();
      }
    }
    final PermissionStatus permissions=PermissionStatus.read(in);
    if (counter != null) {
      counter.increment();
    }
    final INodeDirectory dir=new INodeDirectory(inodeId,localName,permissions,modificationTime);
    if (nsQuota >= 0 || dsQuota >= 0) {
      dir.addDirectoryWithQuotaFeature(new DirectoryWithQuotaFeature.Builder().nameSpaceQuota(nsQuota).storageSpaceQuota(dsQuota).build());
    }
    if (withSnapshot) {
      dir.addSnapshotFeature(null);
    }
    if (snapshottable) {
      dir.addSnapshottableFeature();
    }
    return dir;
  }
 else   if (numBlocks == -2) {
    if (!FileSystem.areSymlinksEnabled()) {
      throw new IOException("Symlinks not supported - please remove symlink before upgrading to this version of HDFS");
    }
    final String symlink=Text.readString(in);
    final PermissionStatus permissions=PermissionStatus.read(in);
    if (counter != null) {
      counter.increment();
    }
    return new INodeSymlink(inodeId,localName,permissions,modificationTime,atime,symlink);
  }
 else   if (numBlocks == -3) {
    final boolean isWithName=in.readBoolean();
    int snapshotId=in.readInt();
    final INodeReference.WithCount withCount=referenceMap.loadINodeReferenceWithCount(isSnapshotINode,in,this);
    if (isWithName) {
      return new INodeReference.WithName(null,withCount,localName,snapshotId);
    }
 else {
      final INodeReference ref=new INodeReference.DstReference(null,withCount,snapshotId);
      return ref;
    }
  }
  throw new IOException("Unknown inode type: numBlocks=" + numBlocks);
}
