{
  boolean forceFence=false;
  boolean forceActive=false;
  Options failoverOpts=new Options();
  failoverOpts.addOption("failover",false,"failover");
  failoverOpts.addOption(FORCEFENCE,false,"force fencing");
  failoverOpts.addOption(FORCEACTIVE,false,"force failover");
  CommandLineParser parser=new GnuParser();
  CommandLine cmd;
  try {
    cmd=parser.parse(failoverOpts,argv);
    forceFence=cmd.hasOption(FORCEFENCE);
    forceActive=cmd.hasOption(FORCEACTIVE);
  }
 catch (  ParseException pe) {
    errOut.println("failover: incorrect arguments");
    printUsage(errOut,"-failover");
    return -1;
  }
  int numOpts=cmd.getOptions() == null ? 0 : cmd.getOptions().length;
  final String[] args=cmd.getArgs();
  if (numOpts > 2 || args.length != 2) {
    errOut.println("failover: incorrect arguments");
    printUsage(errOut,"-failover");
    return -1;
  }
  HAServiceTarget fromNode=resolveTarget(args[0]);
  HAServiceTarget toNode=resolveTarget(args[1]);
  try {
    FailoverController.failover(fromNode,toNode,forceFence,forceActive);
    out.println("Failover from " + args[0] + " to "+ args[1]+ " successful");
  }
 catch (  FailoverFailedException ffe) {
    errOut.println("Failover failed: " + ffe.getLocalizedMessage());
    return -1;
  }
  return 0;
}
