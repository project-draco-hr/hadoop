{
  if (argv.length < 1) {
    printUsage(errOut);
    return -1;
  }
  String cmd=argv[0];
  if (!cmd.startsWith("-")) {
    errOut.println("Bad command '" + cmd + "': expected command starting with '-'");
    printUsage(errOut);
    return -1;
  }
  if (!USAGE.containsKey(cmd)) {
    errOut.println(cmd.substring(1) + ": Unknown command");
    printUsage(errOut);
    return -1;
  }
  Options opts=new Options();
  if ("-failover".equals(cmd)) {
    addFailoverCliOpts(opts);
  }
  if ("-transitionToActive".equals(cmd) || "-transitionToStandby".equals(cmd) || "-failover".equals(cmd)) {
    opts.addOption(FORCEMANUAL,false,"force manual control even if auto-failover is enabled");
  }
  CommandLine cmdLine=parseOpts(cmd,opts,argv);
  if (cmdLine == null) {
    return -1;
  }
  if (cmdLine.hasOption(FORCEMANUAL)) {
    if (!confirmForceManual()) {
      LOG.fatal("Aborted");
      return -1;
    }
    requestSource=RequestSource.REQUEST_BY_USER_FORCED;
  }
  if ("-transitionToActive".equals(cmd)) {
    return transitionToActive(cmdLine);
  }
 else   if ("-transitionToStandby".equals(cmd)) {
    return transitionToStandby(cmdLine);
  }
 else   if ("-failover".equals(cmd)) {
    return failover(cmdLine);
  }
 else   if ("-getServiceState".equals(cmd)) {
    return getServiceState(cmdLine);
  }
 else   if ("-checkHealth".equals(cmd)) {
    return checkHealth(cmdLine);
  }
 else   if ("-help".equals(cmd)) {
    return help(argv);
  }
 else {
    throw new AssertionError("Should not get here, command: " + cmd);
  }
}
