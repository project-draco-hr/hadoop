def _fetchLink(self, link, parentDir):
    parser = miniHTMLParser()
    self.log.debug(('Checking link %s' % link))
    while link:
        input = urllib.urlopen(link)
        out = None
        contentType = input.info().gettype()
        isHtml = (contentType == 'text/html')
        if isHtml:
            parser.setBaseUrl(input.geturl())
        else:
            parsed = urlparse.urlparse(link)
            hp = parsed[1]
            h = hp
            p = None
            if (hp.find(':') != (-1)):
                (h, p) = hp.split(':', 1)
            path = parsed[2]
            path = path.split('/')
            file = os.path.join(parentDir, h, p)
            for c in path:
                if (c == ''):
                    continue
                file = os.path.join(file, c)
            try:
                self.log.debug(('Creating %s' % file))
                (dir, tail) = os.path.split(file)
                if (not os.path.exists(dir)):
                    os.makedirs(dir)
            except:
                self.log.debug(get_exception_string())
            out = open(file, 'w')
        bufSz = 8192
        buf = input.read(bufSz)
        while (len(buf) > 0):
            if isHtml:
                parser.feed(buf)
            if out:
                out.write(buf)
            buf = input.read(bufSz)
        input.close()
        if out:
            out.close()
        link = parser.getNextLink()
    parser.close()
