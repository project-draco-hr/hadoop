{
  File fsimageFile=null;
  Configuration conf=new Configuration();
  HashMap<String,FileStatus> files=Maps.newHashMap();
  try (MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build()){
    cluster.waitActive();
    DistributedFileSystem hdfs=cluster.getFileSystem();
    Path dir=new Path("/dir");
    hdfs.mkdirs(dir);
    files.put(dir.toString(),pathToFileEntry(hdfs,dir.toString()));
    for (int i=0; i < FILES_PER_DIR; i++) {
      Path file=new Path(dir,"file" + i);
      DFSTestUtil.createFile(hdfs,file,6 * i + 3,(short)1,0);
      files.put(file.toString(),pathToFileEntry(hdfs,file.toString()));
    }
    hdfs.setSafeMode(SafeModeAction.SAFEMODE_ENTER,false);
    hdfs.saveNamespace();
    fsimageFile=FSImageTestUtil.findLatestImageFile(FSImageTestUtil.getFSImage(cluster.getNameNode()).getStorage().getStorageDir(0));
    if (fsimageFile == null) {
      throw new RuntimeException("Didn't generate or can't find fsimage");
    }
  }
   int status=OfflineImageViewerPB.run(new String[]{"-i",fsimageFile.getAbsolutePath(),"-o","-","-p","FileDistribution","-maxSize","23","-step","4"});
  assertEquals(0,status);
}
