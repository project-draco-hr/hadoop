{
  ByteArrayOutputStream output=new ByteArrayOutputStream();
  PrintStream o=new PrintStream(output);
  new FileDistributionCalculator(new Configuration(),0,0,o).visit(new RandomAccessFile(originalFsimage,"r"));
  o.close();
  String outputString=output.toString();
  Pattern p=Pattern.compile("totalFiles = (\\d+)\n");
  Matcher matcher=p.matcher(outputString);
  assertTrue(matcher.find() && matcher.groupCount() == 1);
  int totalFiles=Integer.parseInt(matcher.group(1));
  assertEquals(NUM_DIRS * FILES_PER_DIR,totalFiles);
  p=Pattern.compile("totalDirectories = (\\d+)\n");
  matcher=p.matcher(outputString);
  assertTrue(matcher.find() && matcher.groupCount() == 1);
  int totalDirs=Integer.parseInt(matcher.group(1));
  assertEquals(dirCount + 1,totalDirs);
  FileStatus maxFile=Collections.max(writtenFiles.values(),new Comparator<FileStatus>(){
    @Override public int compare(    FileStatus first,    FileStatus second){
      return first.getLen() < second.getLen() ? -1 : ((first.getLen() == second.getLen()) ? 0 : 1);
    }
  }
);
  p=Pattern.compile("maxFileSize = (\\d+)\n");
  matcher=p.matcher(output.toString("UTF-8"));
  assertTrue(matcher.find() && matcher.groupCount() == 1);
  assertEquals(maxFile.getLen(),Long.parseLong(matcher.group(1)));
}
