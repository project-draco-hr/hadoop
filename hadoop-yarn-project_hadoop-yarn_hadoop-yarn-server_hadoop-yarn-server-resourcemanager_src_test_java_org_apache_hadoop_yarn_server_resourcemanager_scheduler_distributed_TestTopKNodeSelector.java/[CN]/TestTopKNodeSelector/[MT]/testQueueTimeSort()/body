{
  TopKNodeSelector selector=new TopKNodeSelector(5,TopKNodeSelector.TopKComparator.WAIT_TIME);
  selector.nodeUpdate(createRMNode("h1",1,15,10));
  selector.nodeUpdate(createRMNode("h2",2,5,10));
  selector.nodeUpdate(createRMNode("h3",3,10,10));
  selector.computeTask.run();
  List<NodeId> nodeIds=selector.selectNodes();
  System.out.println("1-> " + nodeIds);
  Assert.assertEquals("h2:2",nodeIds.get(0).toString());
  Assert.assertEquals("h3:3",nodeIds.get(1).toString());
  Assert.assertEquals("h1:1",nodeIds.get(2).toString());
  selector.nodeUpdate(createRMNode("h3",3,2,10));
  selector.computeTask.run();
  nodeIds=selector.selectNodes();
  System.out.println("2-> " + nodeIds);
  Assert.assertEquals("h3:3",nodeIds.get(0).toString());
  Assert.assertEquals("h2:2",nodeIds.get(1).toString());
  Assert.assertEquals("h1:1",nodeIds.get(2).toString());
  selector.nodeUpdate(createRMNode("h4",4,-1,10));
  selector.computeTask.run();
  nodeIds=selector.selectNodes();
  System.out.println("3-> " + nodeIds);
  Assert.assertEquals("h3:3",nodeIds.get(0).toString());
  Assert.assertEquals("h2:2",nodeIds.get(1).toString());
  Assert.assertEquals("h1:1",nodeIds.get(2).toString());
}
