{
  final short repl=3;
  final int srcNum=10;
  final Path foo=new Path("/foo");
  final Path bar=new Path(foo,"bar");
  final Path[] srcs=new Path[srcNum];
  final Path target=new Path(bar,"target");
  DFSTestUtil.createFile(dfs,target,blockSize,repl,0L);
  final long dsQuota=blockSize * repl + blockSize * srcNum * REPL_FACTOR;
  dfs.setQuota(foo,Long.MAX_VALUE - 1,dsQuota);
  for (int i=0; i < srcNum; i++) {
    srcs[i]=new Path(bar,"src" + i);
    DFSTestUtil.createFile(dfs,srcs[i],blockSize,REPL_FACTOR,0L);
  }
  ContentSummary summary=dfs.getContentSummary(bar);
  Assert.assertEquals(11,summary.getFileCount());
  Assert.assertEquals(dsQuota,summary.getSpaceConsumed());
  try {
    dfs.concat(target,srcs);
    fail("QuotaExceededException expected");
  }
 catch (  RemoteException e) {
    Assert.assertTrue(e.unwrapRemoteException() instanceof QuotaExceededException);
  }
  dfs.setQuota(foo,Long.MAX_VALUE - 1,Long.MAX_VALUE - 1);
  dfs.concat(target,srcs);
  summary=dfs.getContentSummary(bar);
  Assert.assertEquals(1,summary.getFileCount());
  Assert.assertEquals(blockSize * repl * (srcNum + 1),summary.getSpaceConsumed());
}
