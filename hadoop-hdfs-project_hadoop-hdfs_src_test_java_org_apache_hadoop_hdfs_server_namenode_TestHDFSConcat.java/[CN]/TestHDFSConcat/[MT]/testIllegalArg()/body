{
  long fileLen=blockSize * 3;
  Path parentDir=new Path("/parentTrg");
  assertTrue(dfs.mkdirs(parentDir));
  Path trg=new Path(parentDir,"trg");
  DFSTestUtil.createFile(dfs,trg,fileLen,REPL_FACTOR,1);
{
    Path dir1=new Path("/dir1");
    assertTrue(dfs.mkdirs(dir1));
    Path src=new Path(dir1,"src");
    DFSTestUtil.createFile(dfs,src,fileLen,REPL_FACTOR,1);
    try {
      dfs.concat(trg,new Path[]{src});
      fail("didn't fail for src and trg in different directories");
    }
 catch (    Exception e) {
    }
  }
  try {
    dfs.concat(trg,new Path[]{new Path("test1/a")});
    fail("didn't fail with invalid arguments");
  }
 catch (  Exception e) {
  }
  try {
    dfs.concat(trg,new Path[]{});
    fail("didn't fail with invalid arguments");
  }
 catch (  Exception e) {
  }
{
    final Path src1=new Path(parentDir,"src1");
    DFSTestUtil.createFile(dfs,src1,fileLen,REPL_FACTOR,0L);
    final Path src2=new Path(parentDir,"src2");
    DFSTestUtil.createFile(dfs,src2,1024,fileLen,dfs.getDefaultBlockSize(trg) * 2,REPL_FACTOR,0L);
    try {
      dfs.concat(trg,new Path[]{src1,src2});
      fail("didn't fail for src with greater preferred block size");
    }
 catch (    Exception e) {
      GenericTestUtils.assertExceptionContains("preferred block size",e);
    }
  }
}
