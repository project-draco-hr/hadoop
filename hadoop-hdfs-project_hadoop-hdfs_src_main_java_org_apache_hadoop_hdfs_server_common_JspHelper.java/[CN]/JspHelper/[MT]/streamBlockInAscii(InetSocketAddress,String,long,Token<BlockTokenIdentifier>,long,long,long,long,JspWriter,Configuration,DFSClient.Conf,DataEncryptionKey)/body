{
  if (chunkSizeToView == 0)   return;
  int amtToRead=(int)Math.min(chunkSizeToView,blockSize - offsetIntoBlock);
  BlockReader blockReader=new BlockReaderFactory(dfsConf).setInetSocketAddress(addr).setBlock(new ExtendedBlock(poolId,blockId,0,genStamp)).setFileName(BlockReaderFactory.getFileName(addr,poolId,blockId)).setBlockToken(blockToken).setStartOffset(offsetIntoBlock).setLength(amtToRead).setVerifyChecksum(true).setClientName("JspHelper").setClientCacheContext(ClientContext.getFromConf(conf)).setDatanodeInfo(new DatanodeInfo(new DatanodeID(addr.getAddress().getHostAddress(),addr.getHostName(),poolId,addr.getPort(),0,0,0))).setCachingStrategy(CachingStrategy.newDefaultStrategy()).setConfiguration(conf).setRemotePeerFactory(new RemotePeerFactory(){
    @Override public Peer newConnectedPeer(    InetSocketAddress addr) throws IOException {
      Peer peer=null;
      Socket sock=NetUtils.getDefaultSocketFactory(conf).createSocket();
      try {
        sock.connect(addr,HdfsServerConstants.READ_TIMEOUT);
        sock.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);
        peer=TcpPeerServer.peerFromSocketAndKey(sock,encryptionKey);
      }
  finally {
        if (peer == null) {
          IOUtils.closeSocket(sock);
        }
      }
      return peer;
    }
  }
).build();
  final byte[] buf=new byte[amtToRead];
  try {
    int readOffset=0;
    int retries=2;
    while (amtToRead > 0) {
      int numRead=amtToRead;
      try {
        blockReader.readFully(buf,readOffset,amtToRead);
      }
 catch (      IOException e) {
        retries--;
        if (retries == 0)         throw new IOException("Could not read data from datanode");
        continue;
      }
      amtToRead-=numRead;
      readOffset+=numRead;
    }
  }
  finally {
    blockReader.close();
  }
  out.print(HtmlQuoting.quoteHtmlChars(new String(buf,Charsets.UTF_8)));
}
