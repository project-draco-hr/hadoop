{
  final String TEST_PATH="/test/path/dir";
  final int NUM_TEST_MKDIRS=10;
  final boolean needRecovery=corruptor.needRecovery(finalize);
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=null;
  FileSystem fileSys=null;
  StorageDirectory sd=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
    cluster.waitActive();
    if (!finalize) {
      FSEditLog spyLog=spy(cluster.getNameNode().getFSImage().getEditLog());
      doNothing().when(spyLog).endCurrentLogSegment(true);
      cluster.getNameNode().getFSImage().setEditLogForTesting(spyLog);
    }
    fileSys=cluster.getFileSystem();
    final FSNamesystem namesystem=cluster.getNamesystem();
    FSImage fsimage=namesystem.getFSImage();
    for (int i=0; i < NUM_TEST_MKDIRS; i++) {
      fileSys.mkdirs(new Path(TEST_PATH));
    }
    sd=fsimage.getStorage().dirIterator(NameNodeDirType.EDITS).next();
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  File editFile=FSImageTestUtil.findLatestEditsLog(sd).getFile();
  assertTrue("Should exist: " + editFile,editFile.exists());
  corruptor.corrupt(editFile);
  cluster=null;
  try {
    LOG.debug("trying to start normally (this should fail)...");
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).build();
    cluster.waitActive();
    cluster.shutdown();
    if (needRecovery) {
      fail("expected the corrupted edit log to prevent normal startup");
    }
  }
 catch (  IOException e) {
    if (!needRecovery) {
      LOG.error("Got unexpected failure with " + corruptor.getName() + corruptor,e);
      fail("got unexpected exception " + e.getMessage());
    }
  }
 finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  cluster=null;
  try {
    LOG.debug("running recovery...");
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).startupOption(recoverStartOpt).build();
  }
 catch (  IOException e) {
    fail("caught IOException while trying to recover. " + "message was " + e.getMessage() + "\nstack trace\n"+ StringUtils.stringifyException(e));
  }
 finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
  cluster=null;
  try {
    LOG.debug("starting cluster normally after recovery...");
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).build();
    LOG.debug("successfully recovered the " + corruptor.getName() + " corrupted edit log");
    assertTrue(cluster.getFileSystem().exists(new Path(TEST_PATH)));
  }
 catch (  IOException e) {
    fail("failed to recover.  Error message: " + e.getMessage());
  }
 finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
