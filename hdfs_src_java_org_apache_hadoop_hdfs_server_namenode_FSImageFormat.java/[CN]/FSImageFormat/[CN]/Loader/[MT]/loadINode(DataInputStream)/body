{
  long modificationTime=0;
  long atime=0;
  long blockSize=0;
  short replication=in.readShort();
  replication=namesystem.adjustReplication(replication);
  modificationTime=in.readLong();
  if (LayoutVersion.supports(Feature.FILE_ACCESS_TIME,imgVersion)) {
    atime=in.readLong();
  }
  if (imgVersion <= -8) {
    blockSize=in.readLong();
  }
  int numBlocks=in.readInt();
  BlockInfo blocks[]=null;
  if ((-9 <= imgVersion && numBlocks > 0) || (imgVersion < -9 && numBlocks >= 0)) {
    blocks=new BlockInfo[numBlocks];
    for (int j=0; j < numBlocks; j++) {
      blocks[j]=new BlockInfo(replication);
      if (-14 < imgVersion) {
        blocks[j].set(in.readLong(),in.readLong(),GenerationStamp.GRANDFATHER_GENERATION_STAMP);
      }
 else {
        blocks[j].readFields(in);
      }
    }
  }
  if (-8 <= imgVersion && blockSize == 0) {
    if (numBlocks > 1) {
      blockSize=blocks[0].getNumBytes();
    }
 else {
      long first=((numBlocks == 1) ? blocks[0].getNumBytes() : 0);
      blockSize=Math.max(namesystem.getDefaultBlockSize(),first);
    }
  }
  long nsQuota=-1L;
  if (LayoutVersion.supports(Feature.NAMESPACE_QUOTA,imgVersion) && blocks == null && numBlocks == -1) {
    nsQuota=in.readLong();
  }
  long dsQuota=-1L;
  if (LayoutVersion.supports(Feature.DISKSPACE_QUOTA,imgVersion) && blocks == null && numBlocks == -1) {
    dsQuota=in.readLong();
  }
  String symlink="";
  if (numBlocks == -2) {
    symlink=Text.readString(in);
  }
  PermissionStatus permissions=namesystem.getUpgradePermission();
  if (imgVersion <= -11) {
    permissions=PermissionStatus.read(in);
  }
  return INode.newINode(permissions,blocks,symlink,replication,modificationTime,atime,nsQuota,dsQuota,blockSize);
}
