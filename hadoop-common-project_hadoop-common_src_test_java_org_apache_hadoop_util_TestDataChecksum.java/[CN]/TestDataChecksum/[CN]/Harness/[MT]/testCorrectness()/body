{
  checksum.calculateChunkedSums(dataBuf,checksumBuf);
  checksum.verifyChunkedSums(dataBuf,checksumBuf,"fake file",0);
  corruptBufferOffset(checksumBuf,0);
  checksum.verifyChunkedSums(dataBuf,checksumBuf,"fake file",0);
  corruptBufferOffset(dataBuf,0);
  dataBuf.limit(dataBuf.limit() + 1);
  corruptBufferOffset(dataBuf,dataLength + DATA_OFFSET_IN_BUFFER);
  dataBuf.limit(dataBuf.limit() - 1);
  checksum.verifyChunkedSums(dataBuf,checksumBuf,"fake file",0);
  corruptBufferOffset(checksumBuf,SUMS_OFFSET_IN_BUFFER);
  try {
    checksum.verifyChunkedSums(dataBuf,checksumBuf,"fake file",0);
    fail("Did not throw on bad checksums");
  }
 catch (  ChecksumException ce) {
    assertEquals(0,ce.getPos());
  }
  uncorruptBufferOffset(checksumBuf,SUMS_OFFSET_IN_BUFFER);
  corruptBufferOffset(checksumBuf,SUMS_OFFSET_IN_BUFFER + sumsLength - 1);
  try {
    checksum.verifyChunkedSums(dataBuf,checksumBuf,"fake file",0);
    fail("Did not throw on bad checksums");
  }
 catch (  ChecksumException ce) {
    int expectedPos=checksum.getBytesPerChecksum() * (numSums - 1);
    assertEquals(expectedPos,ce.getPos());
    assertTrue(ce.getMessage().contains("fake file"));
  }
}
