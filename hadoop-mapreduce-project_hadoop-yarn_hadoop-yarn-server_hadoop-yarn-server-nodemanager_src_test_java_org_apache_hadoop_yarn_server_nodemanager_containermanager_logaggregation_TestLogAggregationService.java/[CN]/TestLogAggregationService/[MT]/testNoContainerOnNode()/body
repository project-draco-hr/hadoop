{
  this.conf.set(YarnConfiguration.NM_LOG_DIRS,localLogDir.getAbsolutePath());
  this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,this.remoteRootLogDir.getAbsolutePath());
  DrainDispatcher dispatcher=createDispatcher();
  EventHandler<ApplicationEvent> appEventHandler=mock(EventHandler.class);
  dispatcher.register(ApplicationEventType.class,appEventHandler);
  LogAggregationService logAggregationService=new LogAggregationService(dispatcher,this.context,this.delSrvc,super.dirsHandler);
  logAggregationService.init(this.conf);
  logAggregationService.start();
  ApplicationId application1=BuilderUtils.newApplicationId(1234,1);
  File app1LogDir=new File(localLogDir,ConverterUtils.toString(application1));
  app1LogDir.mkdir();
  logAggregationService.handle(new LogHandlerAppStartedEvent(application1,this.user,null,ContainerLogsRetentionPolicy.ALL_CONTAINERS,this.acls));
  logAggregationService.handle(new LogHandlerAppFinishedEvent(application1));
  logAggregationService.stop();
  Assert.assertFalse(new File(logAggregationService.getRemoteNodeLogFileForApp(application1,this.user).toUri().getPath()).exists());
  dispatcher.await();
  ArgumentCaptor<ApplicationEvent> eventCaptor=ArgumentCaptor.forClass(ApplicationEvent.class);
  verify(appEventHandler).handle(eventCaptor.capture());
  assertEquals(ApplicationEventType.APPLICATION_LOG_HANDLING_FINISHED,eventCaptor.getValue().getType());
  verify(appEventHandler).handle(eventCaptor.capture());
  assertEquals(application1,eventCaptor.getValue().getApplicationID());
}
