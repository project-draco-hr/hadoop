{
  this.conf.set(YarnConfiguration.NM_LOG_DIRS,localLogDir.getAbsolutePath());
  this.conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,this.remoteRootLogDir.getAbsolutePath());
  LogAggregationService logAggregationService=new LogAggregationService(this.delSrvc);
  logAggregationService.init(this.conf);
  logAggregationService.start();
  ApplicationId application1=BuilderUtils.newApplicationId(1234,1);
  File app1LogDir=new File(localLogDir,ConverterUtils.toString(application1));
  app1LogDir.mkdir();
  logAggregationService.handle(new LogAggregatorAppStartedEvent(application1,this.user,null,ContainerLogsRetentionPolicy.ALL_CONTAINERS));
  ApplicationAttemptId appAttemptId1=recordFactory.newRecordInstance(ApplicationAttemptId.class);
  appAttemptId1.setApplicationId(application1);
  ContainerId container11=BuilderUtils.newContainerId(recordFactory,application1,appAttemptId1,1);
  writeContainerLogs(app1LogDir,container11);
  logAggregationService.handle(new LogAggregatorContainerFinishedEvent(container11,0));
  ApplicationId application2=BuilderUtils.newApplicationId(1234,2);
  ApplicationAttemptId appAttemptId2=recordFactory.newRecordInstance(ApplicationAttemptId.class);
  appAttemptId1.setApplicationId(application2);
  File app2LogDir=new File(localLogDir,ConverterUtils.toString(application2));
  app2LogDir.mkdir();
  logAggregationService.handle(new LogAggregatorAppStartedEvent(application2,this.user,null,ContainerLogsRetentionPolicy.APPLICATION_MASTER_ONLY));
  ContainerId container21=BuilderUtils.newContainerId(recordFactory,application2,appAttemptId2,1);
  writeContainerLogs(app2LogDir,container21);
  logAggregationService.handle(new LogAggregatorContainerFinishedEvent(container21,0));
  ContainerId container12=BuilderUtils.newContainerId(recordFactory,application1,appAttemptId1,2);
  writeContainerLogs(app1LogDir,container12);
  logAggregationService.handle(new LogAggregatorContainerFinishedEvent(container12,0));
  ApplicationId application3=BuilderUtils.newApplicationId(1234,3);
  ApplicationAttemptId appAttemptId3=recordFactory.newRecordInstance(ApplicationAttemptId.class);
  appAttemptId1.setApplicationId(application3);
  File app3LogDir=new File(localLogDir,ConverterUtils.toString(application3));
  app3LogDir.mkdir();
  logAggregationService.handle(new LogAggregatorAppStartedEvent(application3,this.user,null,ContainerLogsRetentionPolicy.AM_AND_FAILED_CONTAINERS_ONLY));
  ContainerId container31=BuilderUtils.newContainerId(recordFactory,application3,appAttemptId3,1);
  writeContainerLogs(app3LogDir,container31);
  logAggregationService.handle(new LogAggregatorContainerFinishedEvent(container31,0));
  ContainerId container32=BuilderUtils.newContainerId(recordFactory,application3,appAttemptId3,2);
  writeContainerLogs(app3LogDir,container32);
  logAggregationService.handle(new LogAggregatorContainerFinishedEvent(container32,1));
  ContainerId container22=BuilderUtils.newContainerId(recordFactory,application2,appAttemptId2,2);
  writeContainerLogs(app2LogDir,container22);
  logAggregationService.handle(new LogAggregatorContainerFinishedEvent(container22,0));
  ContainerId container33=BuilderUtils.newContainerId(recordFactory,application3,appAttemptId3,3);
  writeContainerLogs(app3LogDir,container33);
  logAggregationService.handle(new LogAggregatorContainerFinishedEvent(container33,0));
  logAggregationService.handle(new LogAggregatorAppFinishedEvent(application2));
  logAggregationService.handle(new LogAggregatorAppFinishedEvent(application3));
  logAggregationService.handle(new LogAggregatorAppFinishedEvent(application1));
  logAggregationService.stop();
  verifyContainerLogs(logAggregationService,application1,new ContainerId[]{container11,container12});
  verifyContainerLogs(logAggregationService,application2,new ContainerId[]{container21});
  verifyContainerLogs(logAggregationService,application3,new ContainerId[]{container31,container32});
}
