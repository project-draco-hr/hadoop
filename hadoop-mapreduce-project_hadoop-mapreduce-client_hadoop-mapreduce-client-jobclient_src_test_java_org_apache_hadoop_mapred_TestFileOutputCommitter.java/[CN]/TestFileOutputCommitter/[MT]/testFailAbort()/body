{
  JobConf job=new JobConf();
  job.set(FileSystem.FS_DEFAULT_NAME_KEY,"faildel:///");
  job.setClass("fs.faildel.impl",FakeFileSystem.class,FileSystem.class);
  setConfForFileOutputCommitter(job);
  JobContext jContext=new JobContextImpl(job,taskID.getJobID());
  TaskAttemptContext tContext=new TaskAttemptContextImpl(job,taskID);
  FileOutputCommitter committer=new FileOutputCommitter();
  FileOutputFormat.setWorkOutputPath(job,committer.getTempTaskOutputPath(tContext));
  committer.setupJob(jContext);
  committer.setupTask(tContext);
  String file="test.txt";
  String taskBaseDirName=committer.getTaskAttemptBaseDirName(tContext);
  File jobTmpDir=new File(outDir.toString(),committer.getJobAttemptBaseDirName(jContext));
  File taskTmpDir=new File(outDir.toString(),taskBaseDirName);
  File expectedFile=new File(taskTmpDir,file);
  Reporter reporter=Reporter.NULL;
  FileSystem localFs=new FakeFileSystem();
  TextOutputFormat theOutputFormat=new TextOutputFormat();
  RecordWriter theRecordWriter=theOutputFormat.getRecordWriter(localFs,job,expectedFile.getAbsolutePath(),reporter);
  writeOutput(theRecordWriter,reporter);
  Throwable th=null;
  try {
    committer.abortTask(tContext);
  }
 catch (  IOException ie) {
    th=ie;
  }
  assertNotNull(th);
  assertTrue(th instanceof IOException);
  assertTrue(th.getMessage().contains("fake delete failed"));
  assertTrue(expectedFile + " does not exists",expectedFile.exists());
  th=null;
  try {
    committer.abortJob(jContext,JobStatus.State.FAILED);
  }
 catch (  IOException ie) {
    th=ie;
  }
  assertNotNull(th);
  assertTrue(th instanceof IOException);
  assertTrue(th.getMessage().contains("fake delete failed"));
  assertTrue("job temp dir does not exists",jobTmpDir.exists());
}
