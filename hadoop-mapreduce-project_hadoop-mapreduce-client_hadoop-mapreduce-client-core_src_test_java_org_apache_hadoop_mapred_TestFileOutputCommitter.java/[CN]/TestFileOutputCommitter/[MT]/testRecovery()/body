{
  JobConf conf=new JobConf();
  FileOutputFormat.setOutputPath(conf,outDir);
  conf.set(JobContext.TASK_ATTEMPT_ID,attempt);
  conf.setInt(MRConstants.APPLICATION_ATTEMPT_ID,1);
  JobContext jContext=new JobContextImpl(conf,taskID.getJobID());
  TaskAttemptContext tContext=new TaskAttemptContextImpl(conf,taskID);
  FileOutputCommitter committer=new FileOutputCommitter();
  committer.setupJob(jContext);
  committer.setupTask(tContext);
  TextOutputFormat theOutputFormat=new TextOutputFormat();
  RecordWriter theRecordWriter=theOutputFormat.getRecordWriter(null,conf,partFile,null);
  writeOutput(theRecordWriter,tContext);
  committer.commitTask(tContext);
  Path jobTempDir1=committer.getCommittedTaskPath(tContext);
  File jtd1=new File(jobTempDir1.toUri().getPath());
  assertTrue(jtd1.exists());
  validateContent(jobTempDir1);
  JobConf conf2=new JobConf(conf);
  conf2.set(JobContext.TASK_ATTEMPT_ID,attempt);
  conf2.setInt(MRConstants.APPLICATION_ATTEMPT_ID,2);
  JobContext jContext2=new JobContextImpl(conf2,taskID.getJobID());
  TaskAttemptContext tContext2=new TaskAttemptContextImpl(conf2,taskID);
  FileOutputCommitter committer2=new FileOutputCommitter();
  committer2.setupJob(jContext2);
  Path jobTempDir2=committer2.getCommittedTaskPath(tContext2);
  committer2.recoverTask(tContext2);
  File jtd2=new File(jobTempDir2.toUri().getPath());
  assertTrue(jtd2.exists());
  validateContent(jobTempDir2);
  committer2.commitJob(jContext2);
  validateContent(outDir);
  FileUtil.fullyDelete(new File(outDir.toString()));
}
