{
  CacheDirectiveInfo.Builder builder=new CacheDirectiveInfo.Builder();
  boolean modified=false;
  String idString=StringUtils.popOptionWithArgument("-id",args);
  if (idString == null) {
    System.err.println("You must specify a directive ID with -id.");
    return 1;
  }
  builder.setId(Long.parseLong(idString));
  String path=StringUtils.popOptionWithArgument("-path",args);
  if (path != null) {
    builder.setPath(new Path(path));
    modified=true;
  }
  String replicationString=StringUtils.popOptionWithArgument("-replication",args);
  if (replicationString != null) {
    builder.setReplication(Short.parseShort(replicationString));
    modified=true;
  }
  String poolName=StringUtils.popOptionWithArgument("-pool",args);
  if (poolName != null) {
    builder.setPool(poolName);
    modified=true;
  }
  String ttlString=StringUtils.popOptionWithArgument("-ttl",args);
  if (ttlString != null) {
    long ttl;
    try {
      ttl=DFSUtil.parseRelativeTime(ttlString);
    }
 catch (    IOException e) {
      System.err.println("Error while parsing ttl value: " + e.getMessage());
      return 1;
    }
    builder.setExpiration(CacheDirectiveInfo.Expiration.newRelative(ttl));
    modified=true;
  }
  if (!args.isEmpty()) {
    System.err.println("Can't understand argument: " + args.get(0));
    System.err.println("Usage is " + getShortUsage());
    return 1;
  }
  if (!modified) {
    System.err.println("No modifications were specified.");
    return 1;
  }
  DistributedFileSystem dfs=getDFS(conf);
  try {
    dfs.modifyCacheDirective(builder.build());
    System.out.println("Modified cache directive " + idString);
  }
 catch (  IOException e) {
    System.err.println(prettifyException(e));
    return 2;
  }
  return 0;
}
