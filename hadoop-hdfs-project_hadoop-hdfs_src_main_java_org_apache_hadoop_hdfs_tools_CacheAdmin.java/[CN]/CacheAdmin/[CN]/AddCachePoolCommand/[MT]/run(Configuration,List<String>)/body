{
  String name=StringUtils.popFirstNonOption(args);
  if (name == null) {
    System.err.println("You must specify a name when creating a " + "cache pool.");
    return 1;
  }
  CachePoolInfo info=new CachePoolInfo(name);
  String owner=StringUtils.popOptionWithArgument("-owner",args);
  if (owner != null) {
    info.setOwnerName(owner);
  }
  String group=StringUtils.popOptionWithArgument("-group",args);
  if (group != null) {
    info.setGroupName(group);
  }
  String modeString=StringUtils.popOptionWithArgument("-mode",args);
  if (modeString != null) {
    short mode=Short.parseShort(modeString,8);
    info.setMode(new FsPermission(mode));
  }
  String limitString=StringUtils.popOptionWithArgument("-limit",args);
  Long limit=parseLimitString(limitString);
  if (limit != null) {
    info.setLimit(limit);
  }
  String maxTtlString=StringUtils.popOptionWithArgument("-maxTtl",args);
  try {
    Long maxTtl=parseTtlString(maxTtlString);
    if (maxTtl != null) {
      info.setMaxRelativeExpiryMs(maxTtl);
    }
  }
 catch (  IOException e) {
    System.err.println("Error while parsing maxTtl value: " + e.getMessage());
    return 1;
  }
  if (!args.isEmpty()) {
    System.err.print("Can't understand arguments: " + Joiner.on(" ").join(args) + "\n");
    System.err.println("Usage is " + getShortUsage());
    return 1;
  }
  DistributedFileSystem dfs=getDFS(conf);
  try {
    dfs.addCachePool(info);
  }
 catch (  IOException e) {
    System.err.println(prettifyException(e));
    return 2;
  }
  System.out.println("Successfully added cache pool " + name + ".");
  return 0;
}
