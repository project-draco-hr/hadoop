{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  YarnConfiguration conf=new YarnConfiguration();
  setupQueueConfiguration(csConf);
  rmContext=TestUtils.getMockRMContext();
  CapacitySchedulerContext csContext=mock(CapacitySchedulerContext.class);
  when(csContext.getConfiguration()).thenReturn(csConf);
  when(csContext.getConf()).thenReturn(conf);
  when(csContext.getMinimumResourceCapability()).thenReturn(Resources.createResource(GB,1));
  when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(16 * GB,32));
  when(csContext.getClusterResource()).thenReturn(Resources.createResource(10 * 16 * GB,10 * 32));
  when(csContext.getNonPartitionedQueueComparator()).thenReturn(CapacityScheduler.nonPartitionedQueueComparator);
  when(csContext.getResourceCalculator()).thenReturn(resourceCalculator);
  when(csContext.getRMContext()).thenReturn(rmContext);
  RMContainerTokenSecretManager containerTokenSecretManager=new RMContainerTokenSecretManager(conf);
  containerTokenSecretManager.rollMasterKey();
  when(csContext.getContainerTokenSecretManager()).thenReturn(containerTokenSecretManager);
  Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
  CSQueue root=CapacityScheduler.parseQueue(csContext,csConf,null,"root",queues,queues,TestUtils.spyHook);
  queue=spy(new LeafQueue(csContext,A,root,null));
  doReturn(true).when(queue).hasAccess(any(QueueACL.class),any(UserGroupInformation.class));
  doReturn(100).when(queue).getMaxApplications();
  doReturn(25).when(queue).getMaxApplicationsPerUser();
}
