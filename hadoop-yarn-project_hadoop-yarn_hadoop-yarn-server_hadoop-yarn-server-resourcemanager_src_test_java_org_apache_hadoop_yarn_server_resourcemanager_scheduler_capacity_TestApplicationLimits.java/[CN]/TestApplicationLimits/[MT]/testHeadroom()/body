{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  csConf.setUserLimit(CapacitySchedulerConfiguration.ROOT + "." + A,25);
  setupQueueConfiguration(csConf);
  YarnConfiguration conf=new YarnConfiguration();
  CapacitySchedulerContext csContext=mock(CapacitySchedulerContext.class);
  when(csContext.getConfiguration()).thenReturn(csConf);
  when(csContext.getConf()).thenReturn(conf);
  when(csContext.getMinimumResourceCapability()).thenReturn(Resources.createResource(GB));
  when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(16 * GB));
  Resource clusterResource=Resources.createResource(100 * 16 * GB);
  when(csContext.getClusterResources()).thenReturn(clusterResource);
  Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
  CapacityScheduler.parseQueue(csContext,csConf,null,"root",queues,queues,CapacityScheduler.queueComparator,CapacityScheduler.applicationComparator,TestUtils.spyHook);
  LeafQueue queue=TestLeafQueue.stubLeafQueue((LeafQueue)queues.get(A));
  String host_0="host_0";
  String rack_0="rack_0";
  FiCaSchedulerNode node_0=TestUtils.getMockNode(host_0,rack_0,0,16 * GB);
  final String user_0="user_0";
  final String user_1="user_1";
  RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
  RMContext rmContext=TestUtils.getMockRMContext();
  Priority priority_1=TestUtils.createMockPriority(1);
  final ApplicationAttemptId appAttemptId_0_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0_0=spy(new FiCaSchedulerApp(appAttemptId_0_0,user_0,queue,queue.getActiveUsersManager(),rmContext));
  queue.submitApplication(app_0_0,user_0,A);
  List<ResourceRequest> app_0_0_requests=new ArrayList<ResourceRequest>();
  app_0_0_requests.add(TestUtils.createResourceRequest(RMNodeImpl.ANY,1 * GB,2,priority_1,recordFactory));
  app_0_0.updateResourceRequests(app_0_0_requests);
  queue.assignContainers(clusterResource,node_0);
  Resource expectedHeadroom=Resources.createResource(10 * 16 * GB);
  verify(app_0_0).setHeadroom(eq(expectedHeadroom));
  final ApplicationAttemptId appAttemptId_0_1=TestUtils.getMockApplicationAttemptId(1,0);
  FiCaSchedulerApp app_0_1=spy(new FiCaSchedulerApp(appAttemptId_0_1,user_0,queue,queue.getActiveUsersManager(),rmContext));
  queue.submitApplication(app_0_1,user_0,A);
  List<ResourceRequest> app_0_1_requests=new ArrayList<ResourceRequest>();
  app_0_1_requests.add(TestUtils.createResourceRequest(RMNodeImpl.ANY,1 * GB,2,priority_1,recordFactory));
  app_0_1.updateResourceRequests(app_0_1_requests);
  queue.assignContainers(clusterResource,node_0);
  verify(app_0_0,times(2)).setHeadroom(eq(expectedHeadroom));
  verify(app_0_1).setHeadroom(eq(expectedHeadroom));
  final ApplicationAttemptId appAttemptId_1_0=TestUtils.getMockApplicationAttemptId(2,0);
  FiCaSchedulerApp app_1_0=spy(new FiCaSchedulerApp(appAttemptId_1_0,user_1,queue,queue.getActiveUsersManager(),rmContext));
  queue.submitApplication(app_1_0,user_1,A);
  List<ResourceRequest> app_1_0_requests=new ArrayList<ResourceRequest>();
  app_1_0_requests.add(TestUtils.createResourceRequest(RMNodeImpl.ANY,1 * GB,2,priority_1,recordFactory));
  app_1_0.updateResourceRequests(app_1_0_requests);
  queue.assignContainers(clusterResource,node_0);
  expectedHeadroom=Resources.createResource(10 * 16 * GB / 2);
  verify(app_0_0).setHeadroom(eq(expectedHeadroom));
  verify(app_0_1).setHeadroom(eq(expectedHeadroom));
  verify(app_1_0).setHeadroom(eq(expectedHeadroom));
  clusterResource=Resources.createResource(90 * 16 * GB);
  queue.assignContainers(clusterResource,node_0);
  expectedHeadroom=Resources.createResource(9 * 16 * GB / 2);
  verify(app_0_0).setHeadroom(eq(expectedHeadroom));
  verify(app_0_1).setHeadroom(eq(expectedHeadroom));
  verify(app_1_0).setHeadroom(eq(expectedHeadroom));
}
