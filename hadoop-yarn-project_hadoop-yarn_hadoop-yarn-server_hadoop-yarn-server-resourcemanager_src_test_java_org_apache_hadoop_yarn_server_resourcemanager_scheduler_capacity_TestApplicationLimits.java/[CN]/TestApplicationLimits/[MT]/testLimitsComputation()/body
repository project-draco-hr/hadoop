{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  setupQueueConfiguration(csConf);
  YarnConfiguration conf=new YarnConfiguration();
  CapacitySchedulerContext csContext=mock(CapacitySchedulerContext.class);
  when(csContext.getConfiguration()).thenReturn(csConf);
  when(csContext.getConf()).thenReturn(conf);
  when(csContext.getMinimumResourceCapability()).thenReturn(Resources.createResource(GB,1));
  when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(16 * GB,16));
  when(csContext.getNonPartitionedQueueComparator()).thenReturn(CapacityScheduler.nonPartitionedQueueComparator);
  when(csContext.getResourceCalculator()).thenReturn(resourceCalculator);
  when(csContext.getRMContext()).thenReturn(rmContext);
  when(csContext.getPreemptionManager()).thenReturn(new PreemptionManager());
  Resource clusterResource=Resources.createResource(100 * 16 * GB,100 * 16);
  when(csContext.getClusterResource()).thenReturn(clusterResource);
  Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
  CSQueue root=CapacityScheduler.parseQueue(csContext,csConf,null,"root",queues,queues,TestUtils.spyHook);
  LeafQueue queue=(LeafQueue)queues.get(A);
  LOG.info("Queue 'A' -" + " aMResourceLimit=" + queue.getAMResourceLimit() + " UserAMResourceLimit="+ queue.getUserAMResourceLimit());
  Resource amResourceLimit=Resource.newInstance(160 * GB,1);
  assertEquals(queue.calculateAndGetAMResourceLimit(),amResourceLimit);
  assertEquals(queue.getUserAMResourceLimit(),Resource.newInstance(80 * GB,1));
  assertEquals(queue.getMetrics().getAMResourceLimitMB(),amResourceLimit.getMemorySize());
  assertEquals(queue.getMetrics().getAMResourceLimitVCores(),amResourceLimit.getVirtualCores());
  assertEquals((int)(clusterResource.getMemorySize() * queue.getAbsoluteCapacity()),queue.getMetrics().getAvailableMB());
  clusterResource=Resources.createResource(120 * 16 * GB);
  root.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
  assertEquals(queue.calculateAndGetAMResourceLimit(),Resource.newInstance(192 * GB,1));
  assertEquals(queue.getUserAMResourceLimit(),Resource.newInstance(96 * GB,1));
  assertEquals((int)(clusterResource.getMemorySize() * queue.getAbsoluteCapacity()),queue.getMetrics().getAvailableMB());
  assertEquals((int)CapacitySchedulerConfiguration.UNDEFINED,csConf.getMaximumApplicationsPerQueue(queue.getQueuePath()));
  int expectedMaxApps=(int)(CapacitySchedulerConfiguration.DEFAULT_MAXIMUM_SYSTEM_APPLICATIIONS * queue.getAbsoluteCapacity());
  assertEquals(expectedMaxApps,queue.getMaxApplications());
  int expectedMaxAppsPerUser=Math.min(expectedMaxApps,(int)(expectedMaxApps * (queue.getUserLimit() / 100.0f) * queue.getUserLimitFactor()));
  assertEquals(expectedMaxAppsPerUser,queue.getMaxApplicationsPerUser());
  assertEquals((long)CapacitySchedulerConfiguration.DEFAULT_MAXIMUM_APPLICATIONMASTERS_RESOURCE_PERCENT,(long)csConf.getMaximumApplicationMasterResourcePerQueuePercent(queue.getQueuePath()));
  csConf.setFloat("yarn.scheduler.capacity." + queue.getQueuePath() + ".maximum-am-resource-percent",0.5f);
  queues=new HashMap<String,CSQueue>();
  root=CapacityScheduler.parseQueue(csContext,csConf,null,"root",queues,queues,TestUtils.spyHook);
  clusterResource=Resources.createResource(100 * 16 * GB);
  queue=(LeafQueue)queues.get(A);
  assertEquals((long)0.5,(long)csConf.getMaximumApplicationMasterResourcePerQueuePercent(queue.getQueuePath()));
  assertEquals(queue.calculateAndGetAMResourceLimit(),Resource.newInstance(800 * GB,1));
  assertEquals(queue.getUserAMResourceLimit(),Resource.newInstance(400 * GB,1));
  csConf.setInt("yarn.scheduler.capacity." + queue.getQueuePath() + ".maximum-applications",9999);
  queues=new HashMap<String,CSQueue>();
  root=CapacityScheduler.parseQueue(csContext,csConf,null,"root",queues,queues,TestUtils.spyHook);
  queue=(LeafQueue)queues.get(A);
  assertEquals(9999,(int)csConf.getMaximumApplicationsPerQueue(queue.getQueuePath()));
  assertEquals(9999,queue.getMaxApplications());
  expectedMaxAppsPerUser=Math.min(9999,(int)(9999 * (queue.getUserLimit() / 100.0f) * queue.getUserLimitFactor()));
  assertEquals(expectedMaxAppsPerUser,queue.getMaxApplicationsPerUser());
}
