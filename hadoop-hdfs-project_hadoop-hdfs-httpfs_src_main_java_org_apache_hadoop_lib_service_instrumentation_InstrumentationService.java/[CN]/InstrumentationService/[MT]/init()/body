{
  timersSize=getServiceConfig().getInt(CONF_TIMERS_SIZE,10);
  counterLock=new ReentrantLock();
  timerLock=new ReentrantLock();
  variableLock=new ReentrantLock();
  samplerLock=new ReentrantLock();
  Map<String,VariableHolder> jvmVariables=new ConcurrentHashMap<String,VariableHolder>();
  counters=new ConcurrentHashMap<String,Map<String,AtomicLong>>();
  timers=new ConcurrentHashMap<String,Map<String,Timer>>();
  variables=new ConcurrentHashMap<String,Map<String,VariableHolder>>();
  samplers=new ConcurrentHashMap<String,Map<String,Sampler>>();
  samplersList=new ArrayList<Sampler>();
  all=new LinkedHashMap<String,Map<String,?>>();
  all.put("os-env",System.getenv());
  all.put("sys-props",(Map<String,?>)(Map)System.getProperties());
  all.put("jvm",jvmVariables);
  all.put("counters",(Map)counters);
  all.put("timers",(Map)timers);
  all.put("variables",(Map)variables);
  all.put("samplers",(Map)samplers);
  jvmVariables.put("free.memory",new VariableHolder<Long>(new Instrumentation.Variable<Long>(){
    @Override public Long getValue(){
      return Runtime.getRuntime().freeMemory();
    }
  }
));
  jvmVariables.put("max.memory",new VariableHolder<Long>(new Instrumentation.Variable<Long>(){
    @Override public Long getValue(){
      return Runtime.getRuntime().maxMemory();
    }
  }
));
  jvmVariables.put("total.memory",new VariableHolder<Long>(new Instrumentation.Variable<Long>(){
    @Override public Long getValue(){
      return Runtime.getRuntime().totalMemory();
    }
  }
));
}
