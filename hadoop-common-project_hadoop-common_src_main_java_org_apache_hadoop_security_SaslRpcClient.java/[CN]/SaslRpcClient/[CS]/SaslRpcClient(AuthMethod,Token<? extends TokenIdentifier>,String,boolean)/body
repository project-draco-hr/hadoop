{
  this.authMethod=method;
  this.fallbackAllowed=fallbackAllowed;
  String saslUser=null;
  String saslProtocol=null;
  String saslServerName=null;
  Map<String,String> saslProperties=SaslRpcServer.SASL_PROPS;
  CallbackHandler saslCallback=null;
switch (method) {
case TOKEN:
{
      saslProtocol="";
      saslServerName=SaslRpcServer.SASL_DEFAULT_REALM;
      saslCallback=new SaslClientCallbackHandler(token);
      break;
    }
case KERBEROS:
{
    if (serverPrincipal == null || serverPrincipal.isEmpty()) {
      throw new IOException("Failed to specify server's Kerberos principal name");
    }
    KerberosName name=new KerberosName(serverPrincipal);
    saslProtocol=name.getServiceName();
    saslServerName=name.getHostName();
    if (saslServerName == null) {
      throw new IOException("Kerberos principal name does NOT have the expected hostname part: " + serverPrincipal);
    }
    break;
  }
default :
throw new IOException("Unknown authentication method " + method);
}
String mechanism=method.getMechanismName();
if (LOG.isDebugEnabled()) {
LOG.debug("Creating SASL " + mechanism + "("+ authMethod+ ") "+ " client to authenticate to service at "+ saslServerName);
}
saslClient=Sasl.createSaslClient(new String[]{mechanism},saslUser,saslProtocol,saslServerName,saslProperties,saslCallback);
if (saslClient == null) {
throw new IOException("Unable to find SASL client implementation");
}
}
