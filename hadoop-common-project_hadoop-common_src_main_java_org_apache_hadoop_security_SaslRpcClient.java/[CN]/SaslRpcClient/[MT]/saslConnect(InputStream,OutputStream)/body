{
  DataInputStream inStream=new DataInputStream(new BufferedInputStream(inS));
  DataOutputStream outStream=new DataOutputStream(new BufferedOutputStream(outS));
  try {
    byte[] saslToken=new byte[0];
    if (saslClient.hasInitialResponse())     saslToken=saslClient.evaluateChallenge(saslToken);
    while (saslToken != null) {
      outStream.writeInt(saslToken.length);
      outStream.write(saslToken,0,saslToken.length);
      outStream.flush();
      if (LOG.isDebugEnabled())       LOG.debug("Have sent token of size " + saslToken.length + " from initSASLContext.");
      readStatus(inStream);
      int len=inStream.readInt();
      if (len == SaslRpcServer.SWITCH_TO_SIMPLE_AUTH) {
        if (!fallbackAllowed) {
          throw new IOException("Server asks us to fall back to SIMPLE " + "auth, but this client is configured to only allow secure " + "connections.");
        }
        if (LOG.isDebugEnabled())         LOG.debug("Server asks us to fall back to simple auth.");
        saslClient.dispose();
        return false;
      }
 else       if ((len == 0) && saslClient.isComplete()) {
        break;
      }
      saslToken=new byte[len];
      if (LOG.isDebugEnabled())       LOG.debug("Will read input token of size " + saslToken.length + " for processing by initSASLContext");
      inStream.readFully(saslToken);
      saslToken=saslClient.evaluateChallenge(saslToken);
    }
    if (!saslClient.isComplete()) {
      throw new SaslException("Internal negotiation error");
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("SASL client context established. Negotiated QoP: " + saslClient.getNegotiatedProperty(Sasl.QOP));
    }
    return true;
  }
 catch (  IOException e) {
    try {
      saslClient.dispose();
    }
 catch (    SaslException ignored) {
    }
    throw e;
  }
}
