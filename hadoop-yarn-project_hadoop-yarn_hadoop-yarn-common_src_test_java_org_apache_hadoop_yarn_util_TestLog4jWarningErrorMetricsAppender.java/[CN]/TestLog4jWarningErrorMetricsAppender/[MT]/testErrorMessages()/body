{
  cutoff.clear();
  setupAppender(100,100,100);
  cutoff.add(0L);
  logMessages(Level.ERROR,"test message 1",2);
  logMessages(Level.ERROR,"test message 2",3);
  Assert.assertEquals(1,appender.getErrorMessagesAndCounts(cutoff).size());
  Assert.assertEquals(1,appender.getWarningMessagesAndCounts(cutoff).size());
  Map<String,Log4jWarningErrorMetricsAppender.Element> errorsMap=appender.getErrorMessagesAndCounts(cutoff).get(0);
  Map<String,Log4jWarningErrorMetricsAppender.Element> warningsMap=appender.getWarningMessagesAndCounts(cutoff).get(0);
  Assert.assertEquals(2,errorsMap.size());
  Assert.assertEquals(0,warningsMap.size());
  Assert.assertTrue(errorsMap.containsKey("test message 1"));
  Assert.assertTrue(errorsMap.containsKey("test message 2"));
  Log4jWarningErrorMetricsAppender.Element msg1Info=errorsMap.get("test message 1");
  Log4jWarningErrorMetricsAppender.Element msg2Info=errorsMap.get("test message 2");
  Assert.assertEquals(2,msg1Info.count.intValue());
  Assert.assertEquals(3,msg2Info.count.intValue());
  Thread.sleep(1000);
  cutoff.add(Time.now() / 1000);
  logMessages(Level.ERROR,"test message 3",2);
  Assert.assertEquals(2,appender.getErrorMessagesAndCounts(cutoff).size());
  Assert.assertEquals(2,appender.getWarningMessagesAndCounts(cutoff).size());
  errorsMap=appender.getErrorMessagesAndCounts(cutoff).get(0);
  warningsMap=appender.getWarningMessagesAndCounts(cutoff).get(0);
  Assert.assertEquals(3,errorsMap.size());
  Assert.assertEquals(0,warningsMap.size());
  Assert.assertTrue(errorsMap.containsKey("test message 3"));
  errorsMap=appender.getErrorMessagesAndCounts(cutoff).get(1);
  warningsMap=appender.getWarningMessagesAndCounts(cutoff).get(1);
  Assert.assertEquals(1,errorsMap.size());
  Assert.assertEquals(0,warningsMap.size());
  Assert.assertTrue(errorsMap.containsKey("test message 3"));
  Log4jWarningErrorMetricsAppender.Element msg3Info=errorsMap.get("test message 3");
  Assert.assertEquals(2,msg3Info.count.intValue());
}
