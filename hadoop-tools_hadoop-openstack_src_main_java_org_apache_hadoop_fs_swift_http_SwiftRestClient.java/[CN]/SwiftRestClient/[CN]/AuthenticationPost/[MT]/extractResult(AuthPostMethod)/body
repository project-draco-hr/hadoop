{
  if (method.getStatusCode() == SC_BAD_REQUEST) {
    throw new SwiftAuthenticationFailedException(authenticationRequest.toString(),"POST",authUri,method);
  }
  final AuthenticationResponse access=JSONUtil.toObject(method.getResponseBodyAsString(),AuthenticationWrapper.class).getAccess();
  final List<Catalog> serviceCatalog=access.getServiceCatalog();
  StringBuilder catList=new StringBuilder();
  StringBuilder regionList=new StringBuilder();
  URI endpointURI=null;
  URI objectLocation;
  Endpoint swiftEndpoint=null;
  AccessToken accessToken;
  for (  Catalog catalog : serviceCatalog) {
    String name=catalog.getName();
    String type=catalog.getType();
    String descr=String.format("[%s: %s]; ",name,type);
    catList.append(descr);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Catalog entry " + descr);
    }
    if (name.equals(SERVICE_CATALOG_SWIFT) || name.equals(SERVICE_CATALOG_CLOUD_FILES) || type.equals(SERVICE_CATALOG_OBJECT_STORE)) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Found swift catalog as " + name + " => "+ type);
      }
      for (      Endpoint endpoint : catalog.getEndpoints()) {
        String endpointRegion=endpoint.getRegion();
        URI publicURL=endpoint.getPublicURL();
        URI internalURL=endpoint.getInternalURL();
        descr=String.format("[%s => %s / %s]; ",endpointRegion,publicURL,internalURL);
        regionList.append(descr);
        if (LOG.isDebugEnabled()) {
          LOG.debug("Endpoint " + descr);
        }
        if (region == null || endpointRegion.equals(region)) {
          endpointURI=usePublicURL ? publicURL : internalURL;
          swiftEndpoint=endpoint;
          break;
        }
      }
    }
  }
  if (endpointURI == null) {
    String message="Could not find swift service from auth URL " + authUri + " and region '"+ region+ "'. "+ "Categories: "+ catList+ ((regionList.length() > 0) ? ("regions: " + regionList) : "No regions");
    throw new SwiftInvalidResponseException(message,SC_OK,"authenticating",authUri);
  }
  accessToken=access.getToken();
  String path=SWIFT_OBJECT_AUTH_ENDPOINT + swiftEndpoint.getTenantId();
  String host=endpointURI.getHost();
  try {
    objectLocation=new URI(endpointURI.getScheme(),null,host,endpointURI.getPort(),path,null,null);
  }
 catch (  URISyntaxException e) {
    throw new SwiftException("object endpoint URI is incorrect: " + endpointURI + " + "+ path,e);
  }
  setAuthDetails(endpointURI,objectLocation,accessToken);
  if (LOG.isDebugEnabled()) {
    LOG.debug("authenticated against " + endpointURI);
  }
  createDefaultContainer();
  return accessToken;
}
