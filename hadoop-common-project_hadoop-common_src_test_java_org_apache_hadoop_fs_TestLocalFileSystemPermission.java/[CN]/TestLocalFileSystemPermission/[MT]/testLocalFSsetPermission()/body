{
  assumeNotWindows();
  Configuration conf=new Configuration();
  conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,"044");
  LocalFileSystem localfs=FileSystem.getLocal(conf);
  String filename="foo";
  Path f=writeFile(localfs,filename);
  try {
    FsPermission initialPermission=getPermission(localfs,f);
    assertEquals(FsPermission.getFileDefault().applyUMask(FsPermission.getUMask(conf)),initialPermission);
  }
 catch (  Exception e) {
    LOGGER.error("Cannot run test",e);
    return;
  }
  String filename1="foo1";
  FsPermission perm=new FsPermission((short)0755);
  Path f1=writeFile(localfs,filename1,perm);
  try {
    FsPermission initialPermission=getPermission(localfs,f1);
    assertEquals(perm.applyUMask(FsPermission.getUMask(conf)),initialPermission);
  }
 catch (  Exception e) {
    LOGGER.error("Cannot run test",e);
    return;
  }
  String filename2="foo2";
  Path f2=writeFile(localfs,filename2);
  try {
    FsPermission initialPermission=getPermission(localfs,f2);
    Path copyPath=new Path(TEST_PATH_PREFIX + "/foo_copy");
    localfs.rename(f2,copyPath);
    FsPermission copyPermission=getPermission(localfs,copyPath);
    assertEquals(copyPermission,initialPermission);
    f2=copyPath;
  }
 catch (  Exception e) {
    LOGGER.error("Cannot run test",e);
    return;
  }
  try {
    FsPermission all=new FsPermission((short)0777);
    FsPermission none=new FsPermission((short)0);
    localfs.setPermission(f,none);
    assertEquals(none,getPermission(localfs,f));
    localfs.setPermission(f,all);
    assertEquals(all,getPermission(localfs,f));
  }
  finally {
    cleanup(localfs,f);
    cleanup(localfs,f1);
    if (localfs.exists(f2)) {
      localfs.delete(f2,true);
    }
  }
}
