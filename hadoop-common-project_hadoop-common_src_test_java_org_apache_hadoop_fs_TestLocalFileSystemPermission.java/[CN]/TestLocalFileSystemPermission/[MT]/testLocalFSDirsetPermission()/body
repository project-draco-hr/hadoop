{
  if (Path.WINDOWS) {
    System.out.println("Cannot run test for Windows");
    return;
  }
  Configuration conf=new Configuration();
  conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,"044");
  LocalFileSystem localfs=FileSystem.getLocal(conf);
  Path dir=new Path(TEST_PATH_PREFIX + "dir");
  localfs.mkdirs(dir);
  try {
    FsPermission initialPermission=getPermission(localfs,dir);
    assertEquals(FsPermission.getDirDefault().applyUMask(FsPermission.getUMask(conf)),initialPermission);
  }
 catch (  Exception e) {
    System.out.println(StringUtils.stringifyException(e));
    System.out.println("Cannot run test");
    return;
  }
  FsPermission perm=new FsPermission((short)0755);
  Path dir1=new Path(TEST_PATH_PREFIX + "dir1");
  localfs.mkdirs(dir1,perm);
  try {
    FsPermission initialPermission=getPermission(localfs,dir1);
    assertEquals(perm.applyUMask(FsPermission.getUMask(conf)),initialPermission);
  }
 catch (  Exception e) {
    System.out.println(StringUtils.stringifyException(e));
    System.out.println("Cannot run test");
    return;
  }
  Path dir2=new Path(TEST_PATH_PREFIX + "dir2");
  localfs.mkdirs(dir2);
  try {
    FsPermission initialPermission=getPermission(localfs,dir2);
    Path copyPath=new Path(TEST_PATH_PREFIX + "dir_copy");
    localfs.rename(dir2,copyPath);
    FsPermission copyPermission=getPermission(localfs,copyPath);
    assertEquals(copyPermission,initialPermission);
    dir2=copyPath;
  }
 catch (  Exception e) {
    System.out.println(StringUtils.stringifyException(e));
    System.out.println("Cannot run test");
    return;
  }
 finally {
    cleanup(localfs,dir);
    cleanup(localfs,dir1);
    if (localfs.exists(dir2)) {
      localfs.delete(dir2,true);
    }
  }
}
