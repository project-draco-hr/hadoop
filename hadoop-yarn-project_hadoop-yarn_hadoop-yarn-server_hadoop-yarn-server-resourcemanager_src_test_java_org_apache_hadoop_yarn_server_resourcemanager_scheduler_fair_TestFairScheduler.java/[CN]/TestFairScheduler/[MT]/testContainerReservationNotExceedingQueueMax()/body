{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"root\">");
  out.println("<queue name=\"queue1\">");
  out.println("<minResources>1024mb,5vcores</minResources>");
  out.println("<maxResources>2048mb,10vcores</maxResources>");
  out.println("</queue>");
  out.println("<queue name=\"queue2\">");
  out.println("<minResources>1024mb,5vcores</minResources>");
  out.println("<maxResources>2048mb,10vcores</maxResources>");
  out.println("</queue>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(3072,5),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  createSchedulingRequest(2048,"queue1","user1",1);
  scheduler.update();
  NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
  scheduler.handle(updateEvent);
  assertEquals(2048,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemory());
  ApplicationAttemptId attId=createSchedulingRequest(1024,"queue2","user2",1);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals(1024,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemory());
  ApplicationAttemptId attId1=createSchedulingRequest(1024,"queue1","user1",1);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals(1024,scheduler.getSchedulerApp(attId1).getCurrentReservation().getMemory());
  AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(attId,RMAppAttemptState.FINISHED,false);
  scheduler.update();
  scheduler.handle(appRemovedEvent1);
  assertEquals(0,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemory());
  createSchedulingRequest(1024,"queue2","user2",1);
  scheduler.handle(updateEvent);
  assertEquals(2048,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemory());
  assertEquals(0,scheduler.getSchedulerApp(attId1).getCurrentReservation().getMemory());
  assertEquals(1024,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemory());
}
