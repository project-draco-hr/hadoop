{
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024));
  RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024));
  RMNode node3=MockNodes.newNodeInfo(2,Resources.createResource(1024));
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
  scheduler.handle(nodeEvent2);
  ApplicationAttemptId appId=createAppAttemptId(this.APP_ID++,this.ATTEMPT_ID++);
  scheduler.addApplication(appId,"queue1","user1");
  List<ResourceRequest> asks=new ArrayList<ResourceRequest>();
  asks.add(createResourceRequest(1024,node1.getHostName(),1,1));
  asks.add(createResourceRequest(1024,node2.getHostName(),1,1));
  asks.add(createResourceRequest(1024,node3.getHostName(),1,1));
  asks.add(createResourceRequest(1024,node1.getRackName(),1,1));
  asks.add(createResourceRequest(1024,node3.getRackName(),1,1));
  asks.add(createResourceRequest(1024,RMNode.ANY,1,2));
  scheduler.allocate(appId,asks,new ArrayList<ContainerId>());
  scheduler.update();
  NodeUpdateSchedulerEvent updateEvent1=new NodeUpdateSchedulerEvent(node1,new ArrayList<ContainerStatus>(),new ArrayList<ContainerStatus>());
  scheduler.handle(updateEvent1);
  assertEquals(1,scheduler.applications.get(appId).getLiveContainers().size());
  scheduler.update();
  NodeUpdateSchedulerEvent updateEvent2=new NodeUpdateSchedulerEvent(node2,new ArrayList<ContainerStatus>(),new ArrayList<ContainerStatus>());
  scheduler.handle(updateEvent2);
  assertEquals(2,scheduler.applications.get(appId).getLiveContainers().size());
}
