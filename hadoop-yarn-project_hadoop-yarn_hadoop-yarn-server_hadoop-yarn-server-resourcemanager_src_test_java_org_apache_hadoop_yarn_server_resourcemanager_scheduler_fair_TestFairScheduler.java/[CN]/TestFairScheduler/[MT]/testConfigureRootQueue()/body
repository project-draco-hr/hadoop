{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>");
  out.println("<queue name=\"root\">");
  out.println("  <schedulingPolicy>drf</schedulingPolicy>");
  out.println("  <queue name=\"child1\">");
  out.println("    <minResources>1024mb,1vcores</minResources>");
  out.println("  </queue>");
  out.println("  <queue name=\"child2\">");
  out.println("    <minResources>1024mb,4vcores</minResources>");
  out.println("  </queue>");
  out.println("  <fairSharePreemptionTimeout>100</fairSharePreemptionTimeout>");
  out.println("  <minSharePreemptionTimeout>120</minSharePreemptionTimeout>");
  out.println("  <fairSharePreemptionThreshold>.5</fairSharePreemptionThreshold>");
  out.println("</queue>");
  out.println("<defaultFairSharePreemptionTimeout>300</defaultFairSharePreemptionTimeout>");
  out.println("<defaultMinSharePreemptionTimeout>200</defaultMinSharePreemptionTimeout>");
  out.println("<defaultFairSharePreemptionThreshold>.6</defaultFairSharePreemptionThreshold>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  QueueManager queueManager=scheduler.getQueueManager();
  FSQueue root=queueManager.getRootQueue();
  assertTrue(root.getPolicy() instanceof DominantResourceFairnessPolicy);
  assertNotNull(queueManager.getLeafQueue("child1",false));
  assertNotNull(queueManager.getLeafQueue("child2",false));
  assertEquals(100000,root.getFairSharePreemptionTimeout());
  assertEquals(120000,root.getMinSharePreemptionTimeout());
  assertEquals(0.5f,root.getFairSharePreemptionThreshold(),0.01);
}
