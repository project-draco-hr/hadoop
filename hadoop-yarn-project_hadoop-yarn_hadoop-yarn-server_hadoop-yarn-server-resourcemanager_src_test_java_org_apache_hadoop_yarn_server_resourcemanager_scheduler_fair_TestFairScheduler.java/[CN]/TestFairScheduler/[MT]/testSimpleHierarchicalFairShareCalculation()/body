{
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  int capacity=10 * 24;
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(capacity),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  createSchedulingRequest(10 * 1024,"parent.queue2","user1");
  createSchedulingRequest(10 * 1024,"parent.queue3","user1");
  createSchedulingRequest(10 * 1024,"root.default","user1");
  scheduler.update();
  scheduler.getQueueManager().getRootQueue().setSteadyFairShare(scheduler.getClusterResource());
  scheduler.getQueueManager().getRootQueue().recomputeSteadyShares();
  QueueManager queueManager=scheduler.getQueueManager();
  Collection<FSLeafQueue> queues=queueManager.getLeafQueues();
  assertEquals(3,queues.size());
  FSLeafQueue queue1=queueManager.getLeafQueue("default",true);
  FSLeafQueue queue2=queueManager.getLeafQueue("parent.queue2",true);
  FSLeafQueue queue3=queueManager.getLeafQueue("parent.queue3",true);
  assertEquals(capacity / 2,queue1.getFairShare().getMemory());
  assertEquals(capacity / 2,queue1.getMetrics().getFairShareMB());
  assertEquals(capacity / 2,queue1.getSteadyFairShare().getMemory());
  assertEquals(capacity / 2,queue1.getMetrics().getSteadyFairShareMB());
  assertEquals(capacity / 4,queue2.getFairShare().getMemory());
  assertEquals(capacity / 4,queue2.getMetrics().getFairShareMB());
  assertEquals(capacity / 4,queue2.getSteadyFairShare().getMemory());
  assertEquals(capacity / 4,queue2.getMetrics().getSteadyFairShareMB());
  assertEquals(capacity / 4,queue3.getFairShare().getMemory());
  assertEquals(capacity / 4,queue3.getMetrics().getFairShareMB());
  assertEquals(capacity / 4,queue3.getSteadyFairShare().getMemory());
  assertEquals(capacity / 4,queue3.getMetrics().getSteadyFairShareMB());
}
