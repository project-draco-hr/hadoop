{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"root\">");
  out.println("  <aclSubmitApps> </aclSubmitApps>");
  out.println("  <aclAdministerApps> </aclAdministerApps>");
  out.println("  <queue name=\"queue1\">");
  out.println("    <aclSubmitApps>userallow</aclSubmitApps>");
  out.println("    <aclAdministerApps>userallow</aclAdministerApps>");
  out.println("  </queue>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  int appId=this.APP_ID++;
  String user="usernotallow";
  String queue="queue1";
  ApplicationId applicationId=MockApps.newAppID(appId);
  String name=MockApps.newAppName();
  ApplicationMasterService masterService=new ApplicationMasterService(resourceManager.getRMContext(),scheduler);
  ApplicationSubmissionContext submissionContext=new ApplicationSubmissionContextPBImpl();
  ContainerLaunchContext clc=BuilderUtils.newContainerLaunchContext(null,null,null,null,null,null);
  submissionContext.setApplicationId(applicationId);
  submissionContext.setAMContainerSpec(clc);
  RMApp application=new RMAppImpl(applicationId,resourceManager.getRMContext(),conf,name,user,queue,submissionContext,scheduler,masterService,System.currentTimeMillis(),"YARN");
  resourceManager.getRMContext().getRMApps().putIfAbsent(applicationId,application);
  application.handle(new RMAppEvent(applicationId,RMAppEventType.START));
  final int MAX_TRIES=20;
  int numTries=0;
  while (!application.getState().equals(RMAppState.SUBMITTED) && numTries < MAX_TRIES) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException ex) {
      ex.printStackTrace();
    }
    numTries++;
  }
  assertEquals("The application doesn't reach SUBMITTED.",RMAppState.SUBMITTED,application.getState());
  ApplicationAttemptId attId=ApplicationAttemptId.newInstance(applicationId,this.ATTEMPT_ID++);
  scheduler.addApplication(attId,queue,user);
  numTries=0;
  while (application.getFinishTime() == 0 && numTries < MAX_TRIES) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException ex) {
      ex.printStackTrace();
    }
    numTries++;
  }
  assertEquals(FinalApplicationStatus.FAILED,application.getFinalApplicationStatus());
}
