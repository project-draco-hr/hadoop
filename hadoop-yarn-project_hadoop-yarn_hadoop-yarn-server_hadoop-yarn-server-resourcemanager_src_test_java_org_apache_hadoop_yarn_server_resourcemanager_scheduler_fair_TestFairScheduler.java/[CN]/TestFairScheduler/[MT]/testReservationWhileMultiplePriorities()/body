{
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(1024,4),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  ApplicationAttemptId attId=createSchedulingRequest(1024,4,"queue1","user1",1,2);
  scheduler.update();
  NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
  scheduler.handle(updateEvent);
  FSAppAttempt app=scheduler.getSchedulerApp(attId);
  assertEquals(1,app.getLiveContainers().size());
  ContainerId containerId=scheduler.getSchedulerApp(attId).getLiveContainers().iterator().next().getContainerId();
  createSchedulingRequestExistingApplication(1024,4,2,attId);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals(1,app.getLiveContainers().size());
  assertEquals(0,scheduler.getRootQueueMetrics().getAvailableMB());
  assertEquals(0,scheduler.getRootQueueMetrics().getAvailableVirtualCores());
  createSchedulingRequestExistingApplication(1024,4,1,attId);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals(1,app.getLiveContainers().size());
  for (  RMContainer container : app.getReservedContainers()) {
    assertEquals(1,container.getReservedPriority().getPriority());
  }
  scheduler.allocate(attId,new ArrayList<ResourceRequest>(),Arrays.asList(containerId),null,null);
  assertEquals(1024,scheduler.getRootQueueMetrics().getAvailableMB());
  assertEquals(4,scheduler.getRootQueueMetrics().getAvailableVirtualCores());
  scheduler.update();
  scheduler.handle(updateEvent);
  Collection<RMContainer> liveContainers=app.getLiveContainers();
  assertEquals(1,liveContainers.size());
  for (  RMContainer liveContainer : liveContainers) {
    Assert.assertEquals(1,liveContainer.getContainer().getPriority().getPriority());
  }
  assertEquals(0,scheduler.getRootQueueMetrics().getAvailableMB());
  assertEquals(0,scheduler.getRootQueueMetrics().getAvailableVirtualCores());
}
