{
  Configuration conf=createConfiguration();
  conf.setLong(FairSchedulerConfiguration.PREEMPTION_INTERVAL,5000);
  conf.setLong(FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL,10000);
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE + ".allocation.file",ALLOC_FILE);
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  MockClock clock=new MockClock();
  scheduler.setClock(clock);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"queueA\">");
  out.println("<weight>.25</weight>");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<weight>.25</weight>");
  out.println("</queue>");
  out.println("<queue name=\"queueC\">");
  out.println("<weight>.25</weight>");
  out.println("</queue>");
  out.println("<queue name=\"queueD\">");
  out.println("<weight>.25</weight>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  QueueManager queueManager=scheduler.getQueueManager();
  queueManager.initialize();
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(2 * 1024,2),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(2 * 1024,2),2,"127.0.0.2");
  NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
  scheduler.handle(nodeEvent2);
  RMNode node3=MockNodes.newNodeInfo(1,Resources.createResource(2 * 1024,2),3,"127.0.0.3");
  NodeAddedSchedulerEvent nodeEvent3=new NodeAddedSchedulerEvent(node3);
  scheduler.handle(nodeEvent3);
  ApplicationAttemptId app1=createSchedulingRequest(1 * 1024,"queueA","user1",1,1);
  ApplicationAttemptId app2=createSchedulingRequest(1 * 1024,"queueA","user1",1,2);
  ApplicationAttemptId app3=createSchedulingRequest(1 * 1024,"queueA","user1",1,3);
  ApplicationAttemptId app4=createSchedulingRequest(1 * 1024,"queueB","user1",1,1);
  ApplicationAttemptId app5=createSchedulingRequest(1 * 1024,"queueB","user1",1,2);
  ApplicationAttemptId app6=createSchedulingRequest(1 * 1024,"queueB","user1",1,3);
  scheduler.update();
  for (int i=0; i < 2; i++) {
    NodeUpdateSchedulerEvent nodeUpdate1=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(nodeUpdate1);
    NodeUpdateSchedulerEvent nodeUpdate2=new NodeUpdateSchedulerEvent(node2);
    scheduler.handle(nodeUpdate2);
    NodeUpdateSchedulerEvent nodeUpdate3=new NodeUpdateSchedulerEvent(node3);
    scheduler.handle(nodeUpdate3);
  }
  assertEquals(1,scheduler.applications.get(app1).getLiveContainers().size());
  assertEquals(1,scheduler.applications.get(app2).getLiveContainers().size());
  assertEquals(1,scheduler.applications.get(app3).getLiveContainers().size());
  assertEquals(1,scheduler.applications.get(app4).getLiveContainers().size());
  assertEquals(1,scheduler.applications.get(app5).getLiveContainers().size());
  assertEquals(1,scheduler.applications.get(app6).getLiveContainers().size());
  ApplicationAttemptId app7=createSchedulingRequest(1 * 1024,"queueC","user1",1,1);
  ApplicationAttemptId app8=createSchedulingRequest(1 * 1024,"queueC","user1",1,2);
  ApplicationAttemptId app9=createSchedulingRequest(1 * 1024,"queueC","user1",1,3);
  ApplicationAttemptId app10=createSchedulingRequest(1 * 1024,"queueD","user1",1,1);
  ApplicationAttemptId app11=createSchedulingRequest(1 * 1024,"queueD","user1",1,2);
  ApplicationAttemptId app12=createSchedulingRequest(1 * 1024,"queueD","user1",1,3);
  scheduler.update();
  scheduler.preemptResources(scheduler.getQueueManager().getLeafQueues(),Resources.createResource(2 * 1024));
  assertEquals(1,scheduler.applications.get(app1).getLiveContainers().size());
  assertEquals(1,scheduler.applications.get(app2).getLiveContainers().size());
  assertEquals(1,scheduler.applications.get(app4).getLiveContainers().size());
  assertEquals(1,scheduler.applications.get(app5).getLiveContainers().size());
  assertTrue(!Collections.disjoint(scheduler.applications.get(app3).getLiveContainers(),scheduler.applications.get(app3).getPreemptionContainers()));
  assertTrue(!Collections.disjoint(scheduler.applications.get(app6).getLiveContainers(),scheduler.applications.get(app6).getPreemptionContainers()));
  clock.tick(15);
  scheduler.preemptResources(scheduler.getQueueManager().getLeafQueues(),Resources.createResource(2 * 1024));
  assertEquals(0,scheduler.applications.get(app6).getLiveContainers().size());
  assertEquals(0,scheduler.applications.get(app3).getLiveContainers().size());
  scheduler.preemptResources(scheduler.getQueueManager().getLeafQueues(),Resources.createResource(2 * 1024));
  clock.tick(15);
  scheduler.preemptResources(scheduler.getQueueManager().getLeafQueues(),Resources.createResource(2 * 1024));
  assertEquals(1,scheduler.applications.get(app1).getLiveContainers().size());
  assertEquals(0,scheduler.applications.get(app2).getLiveContainers().size());
  assertEquals(0,scheduler.applications.get(app3).getLiveContainers().size());
  assertEquals(1,scheduler.applications.get(app4).getLiveContainers().size());
  assertEquals(0,scheduler.applications.get(app5).getLiveContainers().size());
  assertEquals(0,scheduler.applications.get(app6).getLiveContainers().size());
  scheduler.preemptResources(scheduler.getQueueManager().getLeafQueues(),Resources.createResource(2 * 1024));
  assertEquals(1,scheduler.applications.get(app1).getLiveContainers().size());
  assertEquals(0,scheduler.applications.get(app2).getLiveContainers().size());
  assertEquals(0,scheduler.applications.get(app3).getLiveContainers().size());
  assertEquals(1,scheduler.applications.get(app4).getLiveContainers().size());
  assertEquals(0,scheduler.applications.get(app5).getLiveContainers().size());
  assertEquals(0,scheduler.applications.get(app6).getLiveContainers().size());
}
