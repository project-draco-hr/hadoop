{
  conf.setLong(FairSchedulerConfiguration.PREEMPTION_INTERVAL,5000);
  conf.setLong(FairSchedulerConfiguration.WAIT_TIME_BEFORE_KILL,10000);
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE + ".allocation.file",ALLOC_FILE);
  conf.set(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,"false");
  MockClock clock=new MockClock();
  scheduler.setClock(clock);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"queueA\">");
  out.println("<weight>.25</weight>");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<weight>.25</weight>");
  out.println("</queue>");
  out.println("<queue name=\"queueC\">");
  out.println("<weight>.25</weight>");
  out.println("</queue>");
  out.println("<queue name=\"default\">");
  out.println("<weight>.25</weight>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(4 * 1024,4),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(4 * 1024,4),2,"127.0.0.2");
  NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
  scheduler.handle(nodeEvent2);
  ApplicationAttemptId app1=createSchedulingRequest(1 * 1024,1,"queueA","user1",1,1);
  createSchedulingRequestExistingApplication(1 * 1024,1,2,app1);
  ApplicationAttemptId app2=createSchedulingRequest(1 * 1024,1,"queueA","user1",1,3);
  createSchedulingRequestExistingApplication(1 * 1024,1,4,app2);
  ApplicationAttemptId app3=createSchedulingRequest(1 * 1024,1,"queueB","user1",1,1);
  createSchedulingRequestExistingApplication(1 * 1024,1,2,app3);
  ApplicationAttemptId app4=createSchedulingRequest(1 * 1024,1,"queueB","user1",1,3);
  createSchedulingRequestExistingApplication(1 * 1024,1,4,app4);
  scheduler.update();
  scheduler.getQueueManager().getLeafQueue("queueA",true).setPolicy(SchedulingPolicy.parse("fifo"));
  scheduler.getQueueManager().getLeafQueue("queueB",true).setPolicy(SchedulingPolicy.parse("fair"));
  NodeUpdateSchedulerEvent nodeUpdate1=new NodeUpdateSchedulerEvent(node1);
  NodeUpdateSchedulerEvent nodeUpdate2=new NodeUpdateSchedulerEvent(node2);
  for (int i=0; i < 4; i++) {
    scheduler.handle(nodeUpdate1);
    scheduler.handle(nodeUpdate2);
  }
  assertEquals(2,scheduler.getSchedulerApp(app1).getLiveContainers().size());
  assertEquals(2,scheduler.getSchedulerApp(app2).getLiveContainers().size());
  assertEquals(2,scheduler.getSchedulerApp(app3).getLiveContainers().size());
  assertEquals(2,scheduler.getSchedulerApp(app4).getLiveContainers().size());
  createSchedulingRequest(1 * 1024,1,"queueC","user1",1,1);
  createSchedulingRequest(1 * 1024,1,"queueC","user1",1,1);
  createSchedulingRequest(1 * 1024,1,"default","user1",1,1);
  createSchedulingRequest(1 * 1024,1,"default","user1",1,1);
  scheduler.update();
  scheduler.preemptResources(Resources.createResource(2 * 1024));
  assertEquals(2,scheduler.getSchedulerApp(app1).getLiveContainers().size());
  assertEquals(2,scheduler.getSchedulerApp(app3).getLiveContainers().size());
  assertTrue("App2 should have container to be preempted",!Collections.disjoint(scheduler.getSchedulerApp(app2).getLiveContainers(),scheduler.getSchedulerApp(app2).getPreemptionContainers()));
  assertTrue("App4 should have container to be preempted",!Collections.disjoint(scheduler.getSchedulerApp(app2).getLiveContainers(),scheduler.getSchedulerApp(app2).getPreemptionContainers()));
  clock.tick(15);
  scheduler.preemptResources(Resources.createResource(2 * 1024));
  assertEquals(1,scheduler.getSchedulerApp(app2).getLiveContainers().size());
  assertEquals(1,scheduler.getSchedulerApp(app4).getLiveContainers().size());
  Set<RMContainer> set=new HashSet<RMContainer>();
  for (  RMContainer container : scheduler.getSchedulerApp(app2).getLiveContainers()) {
    if (container.getAllocatedPriority().getPriority() == 4) {
      set.add(container);
    }
  }
  for (  RMContainer container : scheduler.getSchedulerApp(app4).getLiveContainers()) {
    if (container.getAllocatedPriority().getPriority() == 4) {
      set.add(container);
    }
  }
  assertTrue("Containers with priority=4 in app2 and app4 should be " + "preempted.",set.isEmpty());
  scheduler.preemptResources(Resources.createResource(2 * 1024));
  clock.tick(15);
  scheduler.preemptResources(Resources.createResource(2 * 1024));
  assertEquals(2,scheduler.getSchedulerApp(app1).getLiveContainers().size());
  assertEquals(0,scheduler.getSchedulerApp(app2).getLiveContainers().size());
  assertEquals(1,scheduler.getSchedulerApp(app3).getLiveContainers().size());
  assertEquals(1,scheduler.getSchedulerApp(app4).getLiveContainers().size());
  scheduler.preemptResources(Resources.createResource(2 * 1024));
  assertTrue("App1 should have no container to be preempted",scheduler.getSchedulerApp(app1).getPreemptionContainers().isEmpty());
  assertTrue("App2 should have no container to be preempted",scheduler.getSchedulerApp(app2).getPreemptionContainers().isEmpty());
  assertTrue("App3 should have no container to be preempted",scheduler.getSchedulerApp(app3).getPreemptionContainers().isEmpty());
  assertTrue("App4 should have no container to be preempted",scheduler.getSchedulerApp(app4).getPreemptionContainers().isEmpty());
}
