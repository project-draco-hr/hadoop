{
  Configuration conf=createConfiguration();
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"queueA\">");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<minResources>2048mb,0vcores</minResources>");
  out.println("<aclAdministerApps>alice,bob admins</aclAdministerApps>");
  out.println("<schedulingPolicy>fair</schedulingPolicy>");
  out.println("</queue>");
  out.println("<queue name=\"queueC\">");
  out.println("<aclSubmitApps>alice,bob admins</aclSubmitApps>");
  out.println("</queue>");
  out.println("<queue name=\"queueD\">");
  out.println("<maxRunningApps>3</maxRunningApps>");
  out.println("</queue>");
  out.println("<queue name=\"queueE\">");
  out.println("<minSharePreemptionTimeout>60</minSharePreemptionTimeout>");
  out.println("</queue>");
  out.println("<queueMaxAppsDefault>15</queueMaxAppsDefault>");
  out.println("<userMaxAppsDefault>5</userMaxAppsDefault>");
  out.println("<user name=\"user1\">");
  out.println("<maxRunningApps>10</maxRunningApps>");
  out.println("</user>");
  out.println("<defaultMinSharePreemptionTimeout>120" + "</defaultMinSharePreemptionTimeout>");
  out.println("<fairSharePreemptionTimeout>300</fairSharePreemptionTimeout>");
  out.println("<defaultQueueSchedulingPolicy>drf</defaultQueueSchedulingPolicy>");
  out.println("</allocations>");
  out.close();
  QueueManager queueManager=scheduler.getQueueManager();
  queueManager.initialize();
  assertEquals(6,queueManager.getLeafQueues().size());
  assertEquals(Resources.createResource(0),queueManager.getMinResources("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(Resources.createResource(0),queueManager.getMinResources("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(Resources.createResource(1024,0),queueManager.getMinResources("root.queueA"));
  assertEquals(Resources.createResource(2048,0),queueManager.getMinResources("root.queueB"));
  assertEquals(Resources.createResource(0),queueManager.getMinResources("root.queueC"));
  assertEquals(Resources.createResource(0),queueManager.getMinResources("root.queueD"));
  assertEquals(Resources.createResource(0),queueManager.getMinResources("root.queueE"));
  assertEquals(15,queueManager.getQueueMaxApps("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(15,queueManager.getQueueMaxApps("root.queueA"));
  assertEquals(15,queueManager.getQueueMaxApps("root.queueB"));
  assertEquals(15,queueManager.getQueueMaxApps("root.queueC"));
  assertEquals(3,queueManager.getQueueMaxApps("root.queueD"));
  assertEquals(15,queueManager.getQueueMaxApps("root.queueE"));
  assertEquals(10,queueManager.getUserMaxApps("user1"));
  assertEquals(5,queueManager.getUserMaxApps("user2"));
  assertEquals("*",queueManager.getQueueAcl("root",QueueACL.ADMINISTER_QUEUE).getAclString());
  assertEquals("*",queueManager.getQueueAcl("root",QueueACL.SUBMIT_APPLICATIONS).getAclString());
  assertEquals(" ",queueManager.getQueueAcl("root.queueA",QueueACL.ADMINISTER_QUEUE).getAclString());
  assertEquals(" ",queueManager.getQueueAcl("root.queueA",QueueACL.SUBMIT_APPLICATIONS).getAclString());
  assertEquals("alice,bob admins",queueManager.getQueueAcl("root.queueB",QueueACL.ADMINISTER_QUEUE).getAclString());
  assertEquals("alice,bob admins",queueManager.getQueueAcl("root.queueC",QueueACL.SUBMIT_APPLICATIONS).getAclString());
  assertEquals(120000,queueManager.getMinSharePreemptionTimeout("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(120000,queueManager.getMinSharePreemptionTimeout("root.queueA"));
  assertEquals(120000,queueManager.getMinSharePreemptionTimeout("root.queueB"));
  assertEquals(120000,queueManager.getMinSharePreemptionTimeout("root.queueC"));
  assertEquals(120000,queueManager.getMinSharePreemptionTimeout("root.queueD"));
  assertEquals(120000,queueManager.getMinSharePreemptionTimeout("root.queueA"));
  assertEquals(60000,queueManager.getMinSharePreemptionTimeout("root.queueE"));
  assertEquals(300000,queueManager.getFairSharePreemptionTimeout());
  assertEquals(DominantResourceFairnessPolicy.NAME,queueManager.getQueue("root").getPolicy().getName());
  assertEquals(DominantResourceFairnessPolicy.NAME,queueManager.getQueue("root.queueA").getPolicy().getName());
  assertEquals(FairSharePolicy.NAME,queueManager.getQueue("root.queueB").getPolicy().getName());
  assertEquals(DominantResourceFairnessPolicy.NAME,queueManager.getLeafQueue("root.newqueue",true).getPolicy().getName());
}
