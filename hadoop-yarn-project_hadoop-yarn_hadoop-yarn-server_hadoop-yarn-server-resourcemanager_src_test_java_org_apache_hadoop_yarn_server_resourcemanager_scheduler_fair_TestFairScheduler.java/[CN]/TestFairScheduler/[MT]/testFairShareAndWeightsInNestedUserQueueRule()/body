{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"parentq\" type=\"parent\">");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("</queue>");
  out.println("<queuePlacementPolicy>");
  out.println("<rule name=\"nestedUserQueue\">");
  out.println("     <rule name=\"specified\" create=\"false\" />");
  out.println("</rule>");
  out.println("<rule name=\"default\" />");
  out.println("</queuePlacementPolicy>");
  out.println("</allocations>");
  out.close();
  RMApp rmApp1=new MockRMApp(0,0,RMAppState.NEW);
  RMApp rmApp2=new MockRMApp(1,1,RMAppState.NEW);
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  int capacity=16 * 1024;
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(capacity),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  createSchedulingRequest(10 * 1024,"root.parentq","user1");
  createSchedulingRequest(10 * 1024,"root.parentq","user2");
  createSchedulingRequest(10 * 1024,"root.default","user3");
  scheduler.update();
  Collection<FSLeafQueue> leafQueues=scheduler.getQueueManager().getLeafQueues();
  for (  FSLeafQueue leaf : leafQueues) {
    if (leaf.getName().equals("root.parentq.user1") || leaf.getName().equals("root.parentq.user2")) {
      assertEquals(capacity / 4,leaf.getFairShare().getMemory());
      assertEquals(1.0,leaf.getWeights().getWeight(ResourceType.MEMORY),0);
    }
  }
}
