{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  MockClock clock=new MockClock();
  scheduler.setClock(clock);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"default\">");
  out.println("</queue>");
  out.println("<queue name=\"queueA\">");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<queue name=\"queueB1\">");
  out.println("<minSharePreemptionTimeout>5</minSharePreemptionTimeout>");
  out.println("</queue>");
  out.println("<queue name=\"queueB2\">");
  out.println("</queue>");
  out.println("</queue>");
  out.println("<queue name=\"queueC\">");
  out.println("</queue>");
  out.print("<defaultMinSharePreemptionTimeout>15</defaultMinSharePreemptionTimeout>");
  out.print("<defaultFairSharePreemptionTimeout>30</defaultFairSharePreemptionTimeout>");
  out.print("<fairSharePreemptionTimeout>40</fairSharePreemptionTimeout>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  QueueManager queueMgr=scheduler.getQueueManager();
  assertEquals(30000,queueMgr.getQueue("root").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("default").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueA").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueB").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueB.queueB1").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueB.queueB2").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueC").getFairSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("root").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("default").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("queueA").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("queueB").getMinSharePreemptionTimeout());
  assertEquals(5000,queueMgr.getQueue("queueB.queueB1").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("queueB.queueB2").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("queueC").getMinSharePreemptionTimeout());
  out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"default\">");
  out.println("</queue>");
  out.println("<queue name=\"queueA\">");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<queue name=\"queueB1\">");
  out.println("<minSharePreemptionTimeout>5</minSharePreemptionTimeout>");
  out.println("</queue>");
  out.println("<queue name=\"queueB2\">");
  out.println("</queue>");
  out.println("</queue>");
  out.println("<queue name=\"queueC\">");
  out.println("</queue>");
  out.print("<defaultMinSharePreemptionTimeout>15</defaultMinSharePreemptionTimeout>");
  out.print("<defaultFairSharePreemptionTimeout>25</defaultFairSharePreemptionTimeout>");
  out.print("<fairSharePreemptionTimeout>30</fairSharePreemptionTimeout>");
  out.println("</allocations>");
  out.close();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  assertEquals(25000,queueMgr.getQueue("root").getFairSharePreemptionTimeout());
}
