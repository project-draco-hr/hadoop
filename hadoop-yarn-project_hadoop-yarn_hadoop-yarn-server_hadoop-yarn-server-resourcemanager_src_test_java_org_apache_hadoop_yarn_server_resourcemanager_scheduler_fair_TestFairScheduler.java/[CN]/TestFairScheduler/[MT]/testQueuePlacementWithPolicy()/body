{
  conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,SimpleGroupsMapping.class,GroupMappingServiceProvider.class);
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  ApplicationAttemptId appId;
  List<QueuePlacementRule> rules=new ArrayList<QueuePlacementRule>();
  rules.add(new QueuePlacementRule.Specified().initialize(true,null));
  rules.add(new QueuePlacementRule.User().initialize(false,null));
  rules.add(new QueuePlacementRule.PrimaryGroup().initialize(false,null));
  rules.add(new QueuePlacementRule.SecondaryGroupExistingQueue().initialize(false,null));
  rules.add(new QueuePlacementRule.Default().initialize(true,null));
  Set<String> queues=Sets.newHashSet("root.user1","root.user3group","root.user4subgroup1","root.user4subgroup2","root.user5subgroup2");
  Map<FSQueueType,Set<String>> configuredQueues=new HashMap<FSQueueType,Set<String>>();
  configuredQueues.put(FSQueueType.LEAF,queues);
  configuredQueues.put(FSQueueType.PARENT,new HashSet<String>());
  scheduler.getAllocationConfiguration().placementPolicy=new QueuePlacementPolicy(rules,configuredQueues,conf);
  appId=createSchedulingRequest(1024,"somequeue","user1");
  assertEquals("root.somequeue",scheduler.getSchedulerApp(appId).getQueueName());
  appId=createSchedulingRequest(1024,"default","user1");
  assertEquals("root.user1",scheduler.getSchedulerApp(appId).getQueueName());
  appId=createSchedulingRequest(1024,"default","user3");
  assertEquals("root.user3group",scheduler.getSchedulerApp(appId).getQueueName());
  appId=createSchedulingRequest(1024,"default","user4");
  assertEquals("root.user4subgroup1",scheduler.getSchedulerApp(appId).getQueueName());
  appId=createSchedulingRequest(1024,"default","user5");
  assertEquals("root.user5subgroup2",scheduler.getSchedulerApp(appId).getQueueName());
  appId=createSchedulingRequest(1024,"default","otheruser");
  assertEquals("root.default",scheduler.getSchedulerApp(appId).getQueueName());
  rules=new ArrayList<QueuePlacementRule>();
  rules.add(new QueuePlacementRule.User().initialize(false,null));
  rules.add(new QueuePlacementRule.Specified().initialize(true,null));
  rules.add(new QueuePlacementRule.Default().initialize(true,null));
  scheduler.getAllocationConfiguration().placementPolicy=new QueuePlacementPolicy(rules,configuredQueues,conf);
  appId=createSchedulingRequest(1024,"somequeue","user1");
  assertEquals("root.user1",scheduler.getSchedulerApp(appId).getQueueName());
  appId=createSchedulingRequest(1024,"somequeue","otheruser");
  assertEquals("root.somequeue",scheduler.getSchedulerApp(appId).getQueueName());
  appId=createSchedulingRequest(1024,"default","otheruser");
  assertEquals("root.default",scheduler.getSchedulerApp(appId).getQueueName());
}
