{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  conf.setInt(YarnConfiguration.RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES,6);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"queue1\">");
  out.println("</queue>");
  out.println("<queue name=\"queue2\">");
  out.println("<maxAMShare>0.4</maxAMShare>");
  out.println("</queue>");
  out.println("<queue name=\"queue3\">");
  out.println("<maxResources>10240 mb 4 vcores</maxResources>");
  out.println("</queue>");
  out.println("<queue name=\"queue4\">");
  out.println("</queue>");
  out.println("<queue name=\"queue5\">");
  out.println("</queue>");
  out.println("<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(8192,10),0,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
  NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
  scheduler.handle(nodeEvent);
  scheduler.update();
  FSLeafQueue queue1=scheduler.getQueueManager().getLeafQueue("queue1",true);
  assertEquals("Queue queue1's fair share should be 0",0,queue1.getFairShare().getMemory());
  FSLeafQueue queue2=scheduler.getQueueManager().getLeafQueue("queue2",true);
  assertEquals("Queue queue2's fair share should be 0",0,queue2.getFairShare().getMemory());
  FSLeafQueue queue3=scheduler.getQueueManager().getLeafQueue("queue3",true);
  assertEquals("Queue queue3's fair share should be 0",0,queue3.getFairShare().getMemory());
  FSLeafQueue queue4=scheduler.getQueueManager().getLeafQueue("queue4",true);
  assertEquals("Queue queue4's fair share should be 0",0,queue4.getFairShare().getMemory());
  FSLeafQueue queue5=scheduler.getQueueManager().getLeafQueue("queue5",true);
  assertEquals("Queue queue5's fair share should be 0",0,queue5.getFairShare().getMemory());
  List<String> queues=Arrays.asList("root.queue3","root.queue4","root.queue5");
  for (  String queue : queues) {
    createSchedulingRequest(1 * 1024,queue,"user1");
    scheduler.update();
    scheduler.handle(updateEvent);
  }
  Resource amResource1=Resource.newInstance(1024,1);
  int amPriority=RMAppAttemptImpl.AM_CONTAINER_PRIORITY.getPriority();
  ApplicationAttemptId attId1=createAppAttemptId(1,1);
  createApplicationWithAMResource(attId1,"queue1","test1",amResource1);
  createSchedulingRequestExistingApplication(1024,1,amPriority,attId1);
  FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application1's AM requests 1024 MB memory",1024,app1.getAMResource().getMemory());
  assertEquals("Application1's AM should be running",1,app1.getLiveContainers().size());
  assertEquals("Queue1's AM resource usage should be 1024 MB memory",1024,queue1.getAmResourceUsage().getMemory());
  ApplicationAttemptId attId2=createAppAttemptId(2,1);
  createApplicationWithAMResource(attId2,"queue2","test1",amResource1);
  createSchedulingRequestExistingApplication(1024,1,amPriority,attId2);
  FSAppAttempt app2=scheduler.getSchedulerApp(attId2);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application2's AM resource shouldn't be updated",0,app2.getAMResource().getMemory());
  assertEquals("Application2's AM should not be running",0,app2.getLiveContainers().size());
  assertEquals("Queue2's AM resource usage should be 0 MB memory",0,queue2.getAmResourceUsage().getMemory());
  AppAttemptRemovedSchedulerEvent appRemovedEvent2=new AppAttemptRemovedSchedulerEvent(attId2,RMAppAttemptState.FINISHED,false);
  scheduler.handle(appRemovedEvent2);
  scheduler.update();
  ApplicationAttemptId attId3=createAppAttemptId(3,1);
  createApplicationWithAMResource(attId3,"queue3","test1",amResource1);
  createSchedulingRequestExistingApplication(1024,6,amPriority,attId3);
  FSAppAttempt app3=scheduler.getSchedulerApp(attId3);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application3's AM resource shouldn't be updated",0,app3.getAMResource().getMemory());
  assertEquals("Application3's AM should not be running",0,app3.getLiveContainers().size());
  assertEquals("Queue3's AM resource usage should be 0 MB memory",0,queue3.getAmResourceUsage().getMemory());
  ApplicationAttemptId attId4=createAppAttemptId(4,1);
  createApplicationWithAMResource(attId4,"queue3","test1",amResource1);
  createSchedulingRequestExistingApplication(1024,5,amPriority,attId4);
  FSAppAttempt app4=scheduler.getSchedulerApp(attId4);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application4's AM resource shouldn't be updated",0,app4.getAMResource().getMemory());
  assertEquals("Application4's AM should not be running",0,app4.getLiveContainers().size());
  assertEquals("Queue3's AM resource usage should be 0 MB memory",0,queue3.getAmResourceUsage().getMemory());
}
