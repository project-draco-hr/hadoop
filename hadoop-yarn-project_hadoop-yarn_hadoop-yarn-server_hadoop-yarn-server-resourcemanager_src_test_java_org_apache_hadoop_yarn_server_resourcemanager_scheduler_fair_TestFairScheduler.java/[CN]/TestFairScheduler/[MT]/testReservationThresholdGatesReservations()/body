{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<defaultQueueSchedulingPolicy>drf" + "</defaultQueueSchedulingPolicy>");
  out.println("</allocations>");
  out.close();
  conf.setFloat(FairSchedulerConfiguration.RM_SCHEDULER_RESERVATION_THRESHOLD_INCREMENT_MULTIPLE,2f);
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(4096,4),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  createSchedulingRequest(4096,4,"queue1","user1",1,1);
  scheduler.update();
  NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
  scheduler.handle(updateEvent);
  assertEquals(4096,scheduler.getQueueManager().getQueue("queue1").getResourceUsage().getMemorySize());
  ApplicationAttemptId attId=createSchedulingRequest(1024,"queue2","user1",1);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals(0,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemorySize());
  assertEquals(0,scheduler.getSchedulerApp(attId).getReservedContainers().size());
  createSchedulingRequestExistingApplication(1024,3,1,attId);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals(0,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getMemorySize());
  assertEquals(3,scheduler.getSchedulerApp(attId).getCurrentReservation().getVirtualCores());
  RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(1024,4),2,"127.0.0.2");
  NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
  NodeUpdateSchedulerEvent updateEvent2=new NodeUpdateSchedulerEvent(node2);
  scheduler.handle(nodeEvent2);
  scheduler.handle(updateEvent2);
  assertEquals(3,scheduler.getQueueManager().getQueue("queue2").getResourceUsage().getVirtualCores());
  assertEquals(3,scheduler.getSchedulerApp(attId).getCurrentReservation().getVirtualCores());
  scheduler.handle(updateEvent);
  assertEquals(0,scheduler.getSchedulerApp(attId).getCurrentReservation().getVirtualCores());
}
