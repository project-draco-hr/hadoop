{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>");
  out.println("<queue name=\"root\">");
  out.println("  <schedulingPolicy>drf</schedulingPolicy>");
  out.println("  <queue name=\"child1\">");
  out.println("    <weight>1</weight>");
  out.println("  </queue>");
  out.println("  <queue name=\"child2\">");
  out.println("    <weight>1</weight>");
  out.println("  </queue>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  QueueManager queueManager=scheduler.getQueueManager();
  assertEquals(0,queueManager.getLeafQueue("child1",false).getSteadyFairShare().getMemory());
  assertEquals(0,queueManager.getLeafQueue("child2",false).getSteadyFairShare().getMemory());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(6144),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  assertEquals(6144,scheduler.getClusterResource().getMemory());
  assertEquals(2048,queueManager.getLeafQueue("child1",false).getSteadyFairShare().getMemory());
  assertEquals(2048,queueManager.getLeafQueue("child2",false).getSteadyFairShare().getMemory());
  out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<defaultQueueSchedulingPolicy>fair</defaultQueueSchedulingPolicy>");
  out.println("<queue name=\"root\">");
  out.println("  <schedulingPolicy>drf</schedulingPolicy>");
  out.println("  <queue name=\"child1\">");
  out.println("    <weight>1</weight>");
  out.println("  </queue>");
  out.println("  <queue name=\"child2\">");
  out.println("    <weight>2</weight>");
  out.println("  </queue>");
  out.println("  <queue name=\"child3\">");
  out.println("    <weight>2</weight>");
  out.println("  </queue>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  assertEquals(1024,queueManager.getLeafQueue("child1",false).getSteadyFairShare().getMemory());
  assertEquals(2048,queueManager.getLeafQueue("child2",false).getSteadyFairShare().getMemory());
  assertEquals(2048,queueManager.getLeafQueue("child3",false).getSteadyFairShare().getMemory());
  NodeRemovedSchedulerEvent nodeEvent2=new NodeRemovedSchedulerEvent(node1);
  scheduler.handle(nodeEvent2);
  assertEquals(0,scheduler.getClusterResource().getMemory());
  assertEquals(0,queueManager.getLeafQueue("child1",false).getSteadyFairShare().getMemory());
  assertEquals(0,queueManager.getLeafQueue("child2",false).getSteadyFairShare().getMemory());
}
