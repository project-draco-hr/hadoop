{
  conf.setClass(CommonConfigurationKeys.HADOOP_SECURITY_GROUP_MAPPING,SimpleGroupsMapping.class,GroupMappingServiceProvider.class);
  conf.set(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,"true");
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(6144),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  assertEquals(6144,scheduler.getClusterResource().getMemory());
  assertEquals(6144,scheduler.getQueueManager().getRootQueue().getSteadyFairShare().getMemory());
  assertEquals(6144,scheduler.getQueueManager().getLeafQueue("default",false).getSteadyFairShare().getMemory());
  ApplicationAttemptId appAttemptId1=createAppAttemptId(1,1);
  createApplicationWithAMResource(appAttemptId1,"default","user1",null);
  assertEquals(3072,scheduler.getQueueManager().getLeafQueue("default",false).getSteadyFairShare().getMemory());
  assertEquals(3072,scheduler.getQueueManager().getLeafQueue("user1",false).getSteadyFairShare().getMemory());
}
