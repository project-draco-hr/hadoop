{
  FairScheduler fs=new FairScheduler();
  Configuration conf=createConfiguration();
  conf.setBoolean(FairSchedulerConfiguration.CONTINUOUS_SCHEDULING_ENABLED,true);
  fs.reinitialize(conf,resourceManager.getRMContext());
  Assert.assertTrue("Continuous scheduling should be enabled.",fs.isContinuousSchedulingEnabled());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  fs.handle(nodeEvent1);
  Assert.assertEquals(fs.getClusterCapacity().getMemory(),8 * 1024);
  Assert.assertEquals(fs.getClusterCapacity().getVirtualCores(),8);
  ApplicationAttemptId appAttemptId=createAppAttemptId(this.APP_ID++,this.ATTEMPT_ID++);
  fs.addApplication(appAttemptId,"queue11","user11");
  List<ResourceRequest> ask=new ArrayList<ResourceRequest>();
  ResourceRequest request=createResourceRequest(1024,1,ResourceRequest.ANY,1,1,true);
  ask.add(request);
  fs.allocate(appAttemptId,ask,new ArrayList<ContainerId>(),null,null);
  Thread.sleep(fs.getConf().getContinuousSchedulingSleepMs() + 500);
  FSSchedulerApp app=fs.applications.get(appAttemptId);
  while (app.getCurrentConsumption().equals(Resources.none())) {
  }
  Assert.assertEquals(1024,app.getCurrentConsumption().getMemory());
  Assert.assertEquals(1,app.getCurrentConsumption().getVirtualCores());
}
