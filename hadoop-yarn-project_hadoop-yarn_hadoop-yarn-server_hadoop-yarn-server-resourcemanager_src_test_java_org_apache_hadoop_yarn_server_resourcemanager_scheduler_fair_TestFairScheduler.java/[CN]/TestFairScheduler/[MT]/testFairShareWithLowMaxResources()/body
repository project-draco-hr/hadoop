{
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("  <queue name=\"queueA\">");
  out.println("    <maxResources>1024 mb 1 vcores</maxResources>");
  out.println("    <weight>0.75</weight>");
  out.println("  </queue>");
  out.println("  <queue name=\"queueB\">");
  out.println("    <maxResources>3072 mb 3 vcores</maxResources>");
  out.println("    <weight>0.25</weight>");
  out.println("  </queue>");
  out.println("</allocations>");
  out.close();
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  ApplicationAttemptId attId1=createSchedulingRequest(1024,1,"queueA","user1",2);
  ApplicationAttemptId attId2=createSchedulingRequest(1024,1,"queueB","user1",4);
  scheduler.update();
  FSLeafQueue queue=scheduler.getQueueManager().getLeafQueue("queueA",false);
  assertEquals("Queue A did not get its expected fair share",1 * 1024,queue.getFairShare().getMemorySize());
  queue=scheduler.getQueueManager().getLeafQueue("queueB",false);
  assertEquals("Queue B did not get its expected fair share",3 * 1024,queue.getFairShare().getMemorySize());
  NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node1);
  scheduler.handle(updateEvent);
  scheduler.handle(updateEvent);
  scheduler.handle(updateEvent);
  scheduler.handle(updateEvent);
  scheduler.handle(updateEvent);
  scheduler.handle(updateEvent);
  assertEquals("App 1 is not running with the correct number of containers",1,scheduler.getSchedulerApp(attId1).getLiveContainers().size());
  assertEquals("App 2 is not running with the correct number of containers",3,scheduler.getSchedulerApp(attId2).getLiveContainers().size());
}
