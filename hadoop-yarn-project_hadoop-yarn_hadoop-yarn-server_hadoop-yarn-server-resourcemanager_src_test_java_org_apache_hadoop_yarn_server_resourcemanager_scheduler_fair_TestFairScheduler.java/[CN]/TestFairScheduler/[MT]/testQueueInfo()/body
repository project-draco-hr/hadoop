{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"queueA\">");
  out.println("<weight>.25</weight>");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<weight>.75</weight>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  createSchedulingRequest(1 * 1024,"queueA","user1");
  createSchedulingRequest(6 * 1024,"queueB","user1");
  scheduler.update();
  QueueInfo queueInfo=scheduler.getQueueInfo("queueA",false,false);
  Assert.assertEquals(0.25f,queueInfo.getCapacity(),0.0f);
  Assert.assertEquals(0.0f,queueInfo.getCurrentCapacity(),0.0f);
  queueInfo=scheduler.getQueueInfo("queueB",false,false);
  Assert.assertEquals(0.75f,queueInfo.getCapacity(),0.0f);
  Assert.assertEquals(0.0f,queueInfo.getCurrentCapacity(),0.0f);
  NodeUpdateSchedulerEvent nodeEvent2=new NodeUpdateSchedulerEvent(node1);
  scheduler.handle(nodeEvent2);
  scheduler.handle(nodeEvent2);
  queueInfo=scheduler.getQueueInfo("queueA",false,false);
  Assert.assertEquals(0.25f,queueInfo.getCapacity(),0.0f);
  Assert.assertEquals(0.5f,queueInfo.getCurrentCapacity(),0.0f);
  queueInfo=scheduler.getQueueInfo("queueB",false,false);
  Assert.assertEquals(0.75f,queueInfo.getCapacity(),0.0f);
  Assert.assertEquals(1.0f,queueInfo.getCurrentCapacity(),0.0f);
}
