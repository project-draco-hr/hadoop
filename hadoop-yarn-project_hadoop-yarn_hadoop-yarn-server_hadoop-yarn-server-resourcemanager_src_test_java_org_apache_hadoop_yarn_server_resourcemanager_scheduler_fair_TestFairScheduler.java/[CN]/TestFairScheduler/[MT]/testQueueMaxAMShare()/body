{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"queue1\">");
  out.println("<maxAMShare>0.2</maxAMShare>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node=MockNodes.newNodeInfo(1,Resources.createResource(20480,20),0,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent=new NodeAddedSchedulerEvent(node);
  NodeUpdateSchedulerEvent updateEvent=new NodeUpdateSchedulerEvent(node);
  scheduler.handle(nodeEvent);
  scheduler.update();
  FSLeafQueue queue1=scheduler.getQueueManager().getLeafQueue("queue1",true);
  assertEquals("Queue queue1's fair share should be 0",0,queue1.getFairShare().getMemory());
  createSchedulingRequest(1 * 1024,"root.default","user1");
  scheduler.update();
  scheduler.handle(updateEvent);
  Resource amResource1=Resource.newInstance(1024,1);
  Resource amResource2=Resource.newInstance(2048,2);
  Resource amResource3=Resource.newInstance(1860,2);
  int amPriority=RMAppAttemptImpl.AM_CONTAINER_PRIORITY.getPriority();
  ApplicationAttemptId attId1=createAppAttemptId(1,1);
  createApplicationWithAMResource(attId1,"queue1","user1",amResource1);
  createSchedulingRequestExistingApplication(1024,1,amPriority,attId1);
  FSAppAttempt app1=scheduler.getSchedulerApp(attId1);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application1's AM requests 1024 MB memory",1024,app1.getAMResource().getMemory());
  assertEquals("Application1's AM should be running",1,app1.getLiveContainers().size());
  assertEquals("Queue1's AM resource usage should be 1024 MB memory",1024,queue1.getAmResourceUsage().getMemory());
  ApplicationAttemptId attId2=createAppAttemptId(2,1);
  createApplicationWithAMResource(attId2,"queue1","user1",amResource1);
  createSchedulingRequestExistingApplication(1024,1,amPriority,attId2);
  FSAppAttempt app2=scheduler.getSchedulerApp(attId2);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application2's AM requests 1024 MB memory",1024,app2.getAMResource().getMemory());
  assertEquals("Application2's AM should be running",1,app2.getLiveContainers().size());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  ApplicationAttemptId attId3=createAppAttemptId(3,1);
  createApplicationWithAMResource(attId3,"queue1","user1",amResource1);
  createSchedulingRequestExistingApplication(1024,1,amPriority,attId3);
  FSAppAttempt app3=scheduler.getSchedulerApp(attId3);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application3's AM resource shouldn't be updated",0,app3.getAMResource().getMemory());
  assertEquals("Application3's AM should not be running",0,app3.getLiveContainers().size());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  createSchedulingRequestExistingApplication(1024,1,attId1);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application1 should have two running containers",2,app1.getLiveContainers().size());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  AppAttemptRemovedSchedulerEvent appRemovedEvent1=new AppAttemptRemovedSchedulerEvent(attId1,RMAppAttemptState.FINISHED,false);
  scheduler.update();
  scheduler.handle(appRemovedEvent1);
  scheduler.handle(updateEvent);
  assertEquals("Application1's AM should be finished",0,app1.getLiveContainers().size());
  assertEquals("Application3's AM should be running",1,app3.getLiveContainers().size());
  assertEquals("Application3's AM requests 1024 MB memory",1024,app3.getAMResource().getMemory());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  ApplicationAttemptId attId4=createAppAttemptId(4,1);
  createApplicationWithAMResource(attId4,"queue1","user1",amResource2);
  createSchedulingRequestExistingApplication(2048,2,amPriority,attId4);
  FSAppAttempt app4=scheduler.getSchedulerApp(attId4);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application4's AM resource shouldn't be updated",0,app4.getAMResource().getMemory());
  assertEquals("Application4's AM should not be running",0,app4.getLiveContainers().size());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  ApplicationAttemptId attId5=createAppAttemptId(5,1);
  createApplicationWithAMResource(attId5,"queue1","user1",amResource2);
  createSchedulingRequestExistingApplication(2048,2,amPriority,attId5);
  FSAppAttempt app5=scheduler.getSchedulerApp(attId5);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application5's AM resource shouldn't be updated",0,app5.getAMResource().getMemory());
  assertEquals("Application5's AM should not be running",0,app5.getLiveContainers().size());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  AppAttemptRemovedSchedulerEvent appRemovedEvent4=new AppAttemptRemovedSchedulerEvent(attId4,RMAppAttemptState.KILLED,false);
  scheduler.handle(appRemovedEvent4);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application5's AM should not be running",0,app5.getLiveContainers().size());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  AppAttemptRemovedSchedulerEvent appRemovedEvent2=new AppAttemptRemovedSchedulerEvent(attId2,RMAppAttemptState.FINISHED,false);
  AppAttemptRemovedSchedulerEvent appRemovedEvent3=new AppAttemptRemovedSchedulerEvent(attId3,RMAppAttemptState.FINISHED,false);
  scheduler.handle(appRemovedEvent2);
  scheduler.handle(appRemovedEvent3);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application2's AM should be finished",0,app2.getLiveContainers().size());
  assertEquals("Application3's AM should be finished",0,app3.getLiveContainers().size());
  assertEquals("Application5's AM should be running",1,app5.getLiveContainers().size());
  assertEquals("Application5's AM requests 2048 MB memory",2048,app5.getAMResource().getMemory());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  createSchedulingRequestExistingApplication(1024,1,attId5);
  assertEquals("Application5's AM should have 1 container",1,app5.getLiveContainers().size());
  RMContainer amContainer5=(RMContainer)app5.getLiveContainers().toArray()[0];
  ContainerExpiredSchedulerEvent containerExpired=new ContainerExpiredSchedulerEvent(amContainer5.getContainerId());
  scheduler.handle(containerExpired);
  assertEquals("Application5's AM should have 0 container",0,app5.getLiveContainers().size());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application5 should have 1 container",1,app5.getLiveContainers().size());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  ApplicationAttemptId attId6=createAppAttemptId(6,1);
  createApplicationWithAMResource(attId6,"queue1","user1",amResource3);
  createSchedulingRequestExistingApplication(1860,2,amPriority,attId6);
  FSAppAttempt app6=scheduler.getSchedulerApp(attId6);
  scheduler.update();
  scheduler.handle(updateEvent);
  assertEquals("Application6's AM should not be running",0,app6.getLiveContainers().size());
  assertEquals("Application6's AM resource shouldn't be updated",0,app6.getAMResource().getMemory());
  assertEquals("Queue1's AM resource usage should be 2048 MB memory",2048,queue1.getAmResourceUsage().getMemory());
  AppAttemptRemovedSchedulerEvent appRemovedEvent5=new AppAttemptRemovedSchedulerEvent(attId5,RMAppAttemptState.FINISHED,false);
  AppAttemptRemovedSchedulerEvent appRemovedEvent6=new AppAttemptRemovedSchedulerEvent(attId6,RMAppAttemptState.FINISHED,false);
  scheduler.handle(appRemovedEvent5);
  scheduler.handle(appRemovedEvent6);
  scheduler.update();
  assertEquals("Queue1's AM resource usage should be 0",0,queue1.getAmResourceUsage().getMemory());
}
