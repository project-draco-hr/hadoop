{
  ApplicationAttemptId id11=createAppAttemptId(1,1);
  scheduler.addApplication(id11,"queue1","user1");
  ApplicationAttemptId id21=createAppAttemptId(2,1);
  scheduler.addApplication(id21,"queue2","user1");
  ApplicationAttemptId id22=createAppAttemptId(2,2);
  scheduler.addApplication(id22,"queue2","user1");
  int minReqSize=YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB;
  List<ResourceRequest> ask1=new ArrayList<ResourceRequest>();
  ResourceRequest request1=createResourceRequest(minReqSize * 2,"*",1,1);
  ask1.add(request1);
  scheduler.allocate(id11,ask1,new ArrayList<ContainerId>());
  List<ResourceRequest> ask2=new ArrayList<ResourceRequest>();
  ResourceRequest request2=createResourceRequest(2 * minReqSize,"foo",1,1);
  ResourceRequest request3=createResourceRequest(minReqSize,"bar",1,2);
  ask2.add(request2);
  ask2.add(request3);
  scheduler.allocate(id21,ask2,new ArrayList<ContainerId>());
  List<ResourceRequest> ask3=new ArrayList<ResourceRequest>();
  ResourceRequest request4=createResourceRequest(2 * minReqSize,"*",1,1);
  ask3.add(request4);
  scheduler.allocate(id22,ask3,new ArrayList<ContainerId>());
  scheduler.update();
  assertEquals(2 * minReqSize,scheduler.getQueueManager().getQueue("queue1").getQueueSchedulable().getDemand().getMemory());
  assertEquals(2 * minReqSize + 2 * minReqSize + (2 * minReqSize),scheduler.getQueueManager().getQueue("queue2").getQueueSchedulable().getDemand().getMemory());
}
