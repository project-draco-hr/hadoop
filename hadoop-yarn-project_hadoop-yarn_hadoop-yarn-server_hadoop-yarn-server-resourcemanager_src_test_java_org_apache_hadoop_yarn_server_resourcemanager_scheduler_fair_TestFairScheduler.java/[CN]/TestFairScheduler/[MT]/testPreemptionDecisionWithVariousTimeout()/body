{
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  ControlledClock clock=new ControlledClock();
  scheduler.setClock(clock);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"default\">");
  out.println("<maxResources>0mb,0vcores</maxResources>");
  out.println("</queue>");
  out.println("<queue name=\"queueA\">");
  out.println("<weight>1</weight>");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<weight>2</weight>");
  out.println("<minSharePreemptionTimeout>10</minSharePreemptionTimeout>");
  out.println("<fairSharePreemptionTimeout>25</fairSharePreemptionTimeout>");
  out.println("<queue name=\"queueB1\">");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("<minSharePreemptionTimeout>5</minSharePreemptionTimeout>");
  out.println("</queue>");
  out.println("<queue name=\"queueB2\">");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("<fairSharePreemptionTimeout>20</fairSharePreemptionTimeout>");
  out.println("</queue>");
  out.println("</queue>");
  out.println("<queue name=\"queueC\">");
  out.println("<weight>1</weight>");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("</queue>");
  out.print("<defaultMinSharePreemptionTimeout>15</defaultMinSharePreemptionTimeout>");
  out.print("<defaultFairSharePreemptionTimeout>30</defaultFairSharePreemptionTimeout>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  QueueManager queueMgr=scheduler.getQueueManager();
  assertEquals(30000,queueMgr.getQueue("root").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("default").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueA").getFairSharePreemptionTimeout());
  assertEquals(25000,queueMgr.getQueue("queueB").getFairSharePreemptionTimeout());
  assertEquals(25000,queueMgr.getQueue("queueB.queueB1").getFairSharePreemptionTimeout());
  assertEquals(20000,queueMgr.getQueue("queueB.queueB2").getFairSharePreemptionTimeout());
  assertEquals(30000,queueMgr.getQueue("queueC").getFairSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("root").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("default").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("queueA").getMinSharePreemptionTimeout());
  assertEquals(10000,queueMgr.getQueue("queueB").getMinSharePreemptionTimeout());
  assertEquals(5000,queueMgr.getQueue("queueB.queueB1").getMinSharePreemptionTimeout());
  assertEquals(10000,queueMgr.getQueue("queueB.queueB2").getMinSharePreemptionTimeout());
  assertEquals(15000,queueMgr.getQueue("queueC").getMinSharePreemptionTimeout());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(6 * 1024,6),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  for (int i=0; i < 6; i++) {
    createSchedulingRequest(1 * 1024,"queueA","user1",1,1);
  }
  scheduler.update();
  NodeUpdateSchedulerEvent nodeUpdate1=new NodeUpdateSchedulerEvent(node1);
  for (int i=0; i < 6; i++) {
    scheduler.handle(nodeUpdate1);
  }
  createSchedulingRequest(1 * 1024,"queueB.queueB1","user1",1,1);
  createSchedulingRequest(1 * 1024,"queueB.queueB1","user1",1,2);
  createSchedulingRequest(1 * 1024,"queueB.queueB1","user1",1,3);
  createSchedulingRequest(1 * 1024,"queueB.queueB2","user1",1,1);
  createSchedulingRequest(1 * 1024,"queueB.queueB2","user1",1,2);
  createSchedulingRequest(1 * 1024,"queueB.queueB2","user1",1,3);
  createSchedulingRequest(1 * 1024,"queueC","user1",1,1);
  createSchedulingRequest(1 * 1024,"queueC","user1",1,2);
  createSchedulingRequest(1 * 1024,"queueC","user1",1,3);
  scheduler.update();
  FSLeafQueue queueB1=queueMgr.getLeafQueue("queueB.queueB1",true);
  FSLeafQueue queueB2=queueMgr.getLeafQueue("queueB.queueB2",true);
  FSLeafQueue queueC=queueMgr.getLeafQueue("queueC",true);
  assertTrue(Resources.equals(Resources.none(),scheduler.resourceDeficit(queueB1,clock.getTime())));
  assertTrue(Resources.equals(Resources.none(),scheduler.resourceDeficit(queueB2,clock.getTime())));
  assertTrue(Resources.equals(Resources.none(),scheduler.resourceDeficit(queueC,clock.getTime())));
  scheduler.update();
  clock.tickSec(6);
  assertEquals(1024,scheduler.resourceDeficit(queueB1,clock.getTime()).getMemory());
  assertEquals(0,scheduler.resourceDeficit(queueB2,clock.getTime()).getMemory());
  assertEquals(0,scheduler.resourceDeficit(queueC,clock.getTime()).getMemory());
  scheduler.update();
  clock.tickSec(5);
  assertEquals(1024,scheduler.resourceDeficit(queueB1,clock.getTime()).getMemory());
  assertEquals(1024,scheduler.resourceDeficit(queueB2,clock.getTime()).getMemory());
  assertEquals(0,scheduler.resourceDeficit(queueC,clock.getTime()).getMemory());
  scheduler.update();
  clock.tickSec(5);
  assertEquals(1024,scheduler.resourceDeficit(queueB1,clock.getTime()).getMemory());
  assertEquals(1024,scheduler.resourceDeficit(queueB2,clock.getTime()).getMemory());
  assertEquals(1024,scheduler.resourceDeficit(queueC,clock.getTime()).getMemory());
  scheduler.update();
  clock.tickSec(5);
  assertEquals(1024,scheduler.resourceDeficit(queueB1,clock.getTime()).getMemory());
  assertEquals(1536,scheduler.resourceDeficit(queueB2,clock.getTime()).getMemory());
  assertEquals(1024,scheduler.resourceDeficit(queueC,clock.getTime()).getMemory());
  scheduler.update();
  clock.tickSec(5);
  assertEquals(1536,scheduler.resourceDeficit(queueB1,clock.getTime()).getMemory());
  assertEquals(1536,scheduler.resourceDeficit(queueB2,clock.getTime()).getMemory());
  assertEquals(1024,scheduler.resourceDeficit(queueC,clock.getTime()).getMemory());
  scheduler.update();
  clock.tickSec(5);
  assertEquals(1536,scheduler.resourceDeficit(queueB1,clock.getTime()).getMemory());
  assertEquals(1536,scheduler.resourceDeficit(queueB2,clock.getTime()).getMemory());
  assertEquals(1536,scheduler.resourceDeficit(queueC,clock.getTime()).getMemory());
}
