{
  Configuration conf=createConfiguration();
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"queueA\">");
  out.println("<minResources>1024</minResources>");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<minResources>2048</minResources>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  QueueManager queueManager=scheduler.getQueueManager();
  queueManager.initialize();
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(3 * 1024));
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  createSchedulingRequest(2 * 1024,"queueA","user1");
  createSchedulingRequest(2 * 1024,"queueB","user1");
  scheduler.update();
  Collection<FSLeafQueue> queues=scheduler.getQueueManager().getLeafQueues();
  assertEquals(3,queues.size());
  for (  FSLeafQueue p : queues) {
    if (p.getName().equals("root.queueA")) {
      assertEquals(1024,p.getFairShare().getMemory());
    }
 else     if (p.getName().equals("root.queueB")) {
      assertEquals(2048,p.getFairShare().getMemory());
    }
  }
}
