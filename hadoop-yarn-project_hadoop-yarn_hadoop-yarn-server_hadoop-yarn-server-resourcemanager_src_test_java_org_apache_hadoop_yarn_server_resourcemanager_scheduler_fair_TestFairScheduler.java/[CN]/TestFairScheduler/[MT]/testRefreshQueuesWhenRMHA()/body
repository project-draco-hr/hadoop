{
  conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED,true);
  conf.setBoolean(FairSchedulerConfiguration.ALLOW_UNDECLARED_POOLS,false);
  conf.setBoolean(FairSchedulerConfiguration.USER_AS_DEFAULT_QUEUE,false);
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  HAServiceProtocol.StateChangeRequestInfo requestInfo=new HAServiceProtocol.StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  MockRM rm1=new MockRM(conf,null);
  rm1.init(conf);
  rm1.start();
  rm1.getAdminService().transitionToStandby(requestInfo);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"test_queue\">");
  out.println("  <maxRunningApps>3</maxRunningApps>");
  out.println("</queue>");
  out.println("</allocations>");
  out.close();
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm2=new MockRM(conf,memStore);
  rm2.init(conf);
  rm2.start();
  MockNM nm=new MockNM("127.0.0.1:1234",15120,rm2.getResourceTrackerService());
  nm.registerNode();
  rm2.getAdminService().transitionToActive(requestInfo);
  RMApp app=rm2.submitApp(200,"test_app","user",null,"test_queue");
  RMAppAttempt attempt0=app.getCurrentAppAttempt();
  nm.nodeHeartbeat(true);
  MockAM am0=rm2.sendAMLaunched(attempt0.getAppAttemptId());
  am0.registerAppAttempt();
  assertEquals("root.test_queue",app.getQueue());
  ((RMContextImpl)rm1.getRMContext()).setStateStore(memStore);
  rm1.getAdminService().transitionToActive(requestInfo);
  rm1.drainEvents();
  assertEquals(1,rm1.getRMContext().getRMApps().size());
  RMApp recoveredApp=rm1.getRMContext().getRMApps().values().iterator().next();
  assertEquals("root.test_queue",recoveredApp.getQueue());
  rm1.stop();
  rm2.stop();
}
