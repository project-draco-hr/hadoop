{
  FiCaSchedulerApp application=getApplicationAttempt(applicationAttemptId);
  if (application == null) {
    LOG.info("Calling allocate on removed " + "or non existant application " + applicationAttemptId);
    return EMPTY_ALLOCATION;
  }
  SchedulerUtils.normalizeRequests(ask,getResourceCalculator(),getClusterResource(),getMinimumResourceCapability(),getMaximumResourceCapability());
  releaseContainers(release,application);
  Allocation allocation;
  LeafQueue updateDemandForQueue=null;
synchronized (application) {
    if (application.isStopped()) {
      LOG.info("Calling allocate on a stopped " + "application " + applicationAttemptId);
      return EMPTY_ALLOCATION;
    }
    if (!ask.isEmpty()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("allocate: pre-update" + " applicationAttemptId=" + applicationAttemptId + " application="+ application);
      }
      application.showRequests();
      if (application.updateResourceRequests(ask)) {
        updateDemandForQueue=(LeafQueue)application.getQueue();
      }
      LOG.debug("allocate: post-update");
      application.showRequests();
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("allocate:" + " applicationAttemptId=" + applicationAttemptId + " #ask="+ ask.size());
    }
    application.updateBlacklist(blacklistAdditions,blacklistRemovals);
    allocation=application.getAllocation(getResourceCalculator(),clusterResource,getMinimumResourceCapability());
  }
  if (updateDemandForQueue != null) {
    updateDemandForQueue.getOrderingPolicy().demandUpdated(application);
  }
  return allocation;
}
