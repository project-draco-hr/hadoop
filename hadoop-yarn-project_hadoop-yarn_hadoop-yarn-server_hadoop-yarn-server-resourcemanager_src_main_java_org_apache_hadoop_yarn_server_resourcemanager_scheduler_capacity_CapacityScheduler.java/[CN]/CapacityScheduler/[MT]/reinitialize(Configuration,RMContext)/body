{
  Configuration configuration=new Configuration(conf);
  if (!initialized) {
    this.rmContext=rmContext;
    this.conf=loadCapacitySchedulerConfiguration(configuration);
    validateConf(this.conf);
    this.minimumAllocation=this.conf.getMinimumAllocation();
    this.maximumAllocation=this.conf.getMaximumAllocation();
    this.calculator=this.conf.getResourceCalculator();
    this.usePortForNodeName=this.conf.getUsePortForNodeName();
    this.applications=new ConcurrentHashMap<ApplicationId,SchedulerApplication>();
    initializeQueues(this.conf);
    scheduleAsynchronously=this.conf.getScheduleAynschronously();
    asyncScheduleInterval=this.conf.getLong(ASYNC_SCHEDULER_INTERVAL,DEFAULT_ASYNC_SCHEDULER_INTERVAL);
    if (scheduleAsynchronously) {
      asyncSchedulerThread=new AsyncScheduleThread(this);
      asyncSchedulerThread.start();
    }
    initialized=true;
    LOG.info("Initialized CapacityScheduler with " + "calculator=" + getResourceCalculator().getClass() + ", "+ "minimumAllocation=<"+ getMinimumResourceCapability()+ ">, "+ "maximumAllocation=<"+ getMaximumResourceCapability()+ ">, "+ "asynchronousScheduling="+ scheduleAsynchronously+ ", "+ "asyncScheduleInterval="+ asyncScheduleInterval+ "ms");
  }
 else {
    CapacitySchedulerConfiguration oldConf=this.conf;
    this.conf=loadCapacitySchedulerConfiguration(configuration);
    validateConf(this.conf);
    try {
      LOG.info("Re-initializing queues...");
      reinitializeQueues(this.conf);
    }
 catch (    Throwable t) {
      this.conf=oldConf;
      throw new IOException("Failed to re-init queues",t);
    }
  }
}
