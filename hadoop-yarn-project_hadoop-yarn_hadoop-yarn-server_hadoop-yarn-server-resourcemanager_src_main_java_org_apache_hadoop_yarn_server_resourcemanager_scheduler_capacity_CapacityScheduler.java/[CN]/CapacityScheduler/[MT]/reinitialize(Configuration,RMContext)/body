{
  if (!initialized) {
    this.useLocalConfigurationProvider=conf.get(YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,YarnConfiguration.DEFAULT_RM_CONFIGURATION_PROVIDER_CLASS).equals("org.apache.hadoop.yarn.LocalConfigurationProvider");
    this.conf=new CapacitySchedulerConfiguration(conf,this.useLocalConfigurationProvider);
    validateConf(this.conf);
    this.minimumAllocation=this.conf.getMinimumAllocation();
    this.maximumAllocation=this.conf.getMaximumAllocation();
    this.calculator=this.conf.getResourceCalculator();
    this.usePortForNodeName=this.conf.getUsePortForNodeName();
    this.applications=new ConcurrentHashMap<ApplicationId,SchedulerApplication>();
    this.rmContext=rmContext;
    initializeQueues(this.conf);
    initialized=true;
    LOG.info("Initialized CapacityScheduler with " + "calculator=" + getResourceCalculator().getClass() + ", "+ "minimumAllocation=<"+ getMinimumResourceCapability()+ ">, "+ "maximumAllocation=<"+ getMaximumResourceCapability()+ ">");
  }
 else {
    CapacitySchedulerConfiguration oldConf=this.conf;
    this.conf=new CapacitySchedulerConfiguration(conf,this.useLocalConfigurationProvider);
    validateConf(this.conf);
    try {
      LOG.info("Re-initializing queues...");
      reinitializeQueues(this.conf);
    }
 catch (    Throwable t) {
      this.conf=oldConf;
      throw new IOException("Failed to re-init queues",t);
    }
  }
}
