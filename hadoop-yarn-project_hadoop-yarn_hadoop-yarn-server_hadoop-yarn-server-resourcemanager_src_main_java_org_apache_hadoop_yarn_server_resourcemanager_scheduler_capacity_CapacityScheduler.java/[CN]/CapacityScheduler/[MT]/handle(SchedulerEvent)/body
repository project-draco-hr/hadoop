{
switch (event.getType()) {
case NODE_ADDED:
{
      NodeAddedSchedulerEvent nodeAddedEvent=(NodeAddedSchedulerEvent)event;
      addNode(nodeAddedEvent.getAddedRMNode());
    }
  break;
case NODE_REMOVED:
{
  NodeRemovedSchedulerEvent nodeRemovedEvent=(NodeRemovedSchedulerEvent)event;
  removeNode(nodeRemovedEvent.getRemovedRMNode());
}
break;
case NODE_UPDATE:
{
NodeUpdateSchedulerEvent nodeUpdatedEvent=(NodeUpdateSchedulerEvent)event;
nodeUpdate(nodeUpdatedEvent.getRMNode());
}
break;
case APP_ATTEMPT_ADDED:
{
AppAttemptAddedSchedulerEvent appAttemptAddedEvent=(AppAttemptAddedSchedulerEvent)event;
addApplicationAttempt(appAttemptAddedEvent.getApplicationAttemptId(),appAttemptAddedEvent.getQueue(),appAttemptAddedEvent.getUser());
}
break;
case APP_ATTEMPT_REMOVED:
{
AppAttemptRemovedSchedulerEvent appAttemptRemovedEvent=(AppAttemptRemovedSchedulerEvent)event;
doneApplicationAttempt(appAttemptRemovedEvent.getApplicationAttemptID(),appAttemptRemovedEvent.getFinalAttemptState());
}
break;
case CONTAINER_EXPIRED:
{
ContainerExpiredSchedulerEvent containerExpiredEvent=(ContainerExpiredSchedulerEvent)event;
ContainerId containerId=containerExpiredEvent.getContainerId();
completedContainer(getRMContainer(containerId),SchedulerUtils.createAbnormalContainerStatus(containerId,SchedulerUtils.EXPIRED_CONTAINER),RMContainerEventType.EXPIRE);
}
break;
default :
LOG.error("Invalid eventtype " + event.getType() + ". Ignoring!");
}
}
