{
  if (rmContext.isWorkPreservingRecoveryEnabled() && !rmContext.isSchedulerReadyForAllocatingContainers()) {
    return;
  }
  updateSchedulerHealth(lastNodeUpdateTime,node,new CSAssignment(Resources.none(),NodeType.NODE_LOCAL));
  CSAssignment assignment;
  RMContainer reservedContainer=node.getReservedContainer();
  if (reservedContainer != null) {
    FiCaSchedulerApp reservedApplication=getCurrentAttemptForContainer(reservedContainer.getContainerId());
    LOG.info("Trying to fulfill reservation for application " + reservedApplication.getApplicationId() + " on node: "+ node.getNodeID());
    LeafQueue queue=((LeafQueue)reservedApplication.getQueue());
    assignment=queue.assignContainers(clusterResource,node,new ResourceLimits(labelManager.getResourceByLabel(RMNodeLabelsManager.NO_LABEL,clusterResource)),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
    if (assignment.isFulfilledReservation()) {
      CSAssignment tmp=new CSAssignment(reservedContainer.getReservedResource(),assignment.getType());
      Resources.addTo(assignment.getAssignmentInformation().getAllocated(),reservedContainer.getReservedResource());
      tmp.getAssignmentInformation().addAllocationDetails(reservedContainer.getContainerId(),queue.getQueuePath());
      tmp.getAssignmentInformation().incrAllocations();
      updateSchedulerHealth(lastNodeUpdateTime,node,tmp);
      schedulerHealth.updateSchedulerFulfilledReservationCounts(1);
    }
  }
  if (node.getReservedContainer() == null) {
    if (calculator.computeAvailableContainers(node.getUnallocatedResource(),minimumAllocation) > 0) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Trying to schedule on node: " + node.getNodeName() + ", available: "+ node.getUnallocatedResource());
      }
      assignment=root.assignContainers(clusterResource,node,new ResourceLimits(labelManager.getResourceByLabel(RMNodeLabelsManager.NO_LABEL,clusterResource)),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
      if (Resources.greaterThan(calculator,clusterResource,assignment.getResource(),Resources.none())) {
        updateSchedulerHealth(lastNodeUpdateTime,node,assignment);
        return;
      }
      if (StringUtils.equals(node.getPartition(),RMNodeLabelsManager.NO_LABEL)) {
        return;
      }
      try {
        if (rmContext.getNodeLabelManager().isExclusiveNodeLabel(node.getPartition())) {
          return;
        }
      }
 catch (      IOException e) {
        LOG.warn("Exception when trying to get exclusivity of node label=" + node.getPartition(),e);
        return;
      }
      assignment=root.assignContainers(clusterResource,node,new ResourceLimits(labelManager.getResourceByLabel(RMNodeLabelsManager.NO_LABEL,clusterResource)),SchedulingMode.IGNORE_PARTITION_EXCLUSIVITY);
      updateSchedulerHealth(lastNodeUpdateTime,node,assignment);
    }
  }
 else {
    LOG.info("Skipping scheduling since node " + node.getNodeID() + " is reserved by application "+ node.getReservedContainer().getContainerId().getApplicationAttemptId());
  }
}
