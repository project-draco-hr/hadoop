{
  if (LOG.isDebugEnabled()) {
    LOG.debug("nodeUpdate: " + nm + " clusterResources: "+ clusterResource);
  }
  Resource releaseResources=Resource.newInstance(0,0);
  FiCaSchedulerNode node=getNode(nm.getNodeID());
  List<UpdatedContainerInfo> containerInfoList=nm.pullContainerUpdates();
  List<ContainerStatus> newlyLaunchedContainers=new ArrayList<ContainerStatus>();
  List<ContainerStatus> completedContainers=new ArrayList<ContainerStatus>();
  for (  UpdatedContainerInfo containerInfo : containerInfoList) {
    newlyLaunchedContainers.addAll(containerInfo.getNewlyLaunchedContainers());
    completedContainers.addAll(containerInfo.getCompletedContainers());
  }
  for (  ContainerStatus launchedContainer : newlyLaunchedContainers) {
    containerLaunchedOnNode(launchedContainer.getContainerId(),node);
  }
  List<Container> newlyIncreasedContainers=nm.pullNewlyIncreasedContainers();
  for (  Container container : newlyIncreasedContainers) {
    containerIncreasedOnNode(container.getId(),node,container);
  }
  int releasedContainers=0;
  for (  ContainerStatus completedContainer : completedContainers) {
    ContainerId containerId=completedContainer.getContainerId();
    RMContainer container=getRMContainer(containerId);
    super.completedContainer(container,completedContainer,RMContainerEventType.FINISHED);
    if (container != null) {
      releasedContainers++;
      Resource rs=container.getAllocatedResource();
      if (rs != null) {
        Resources.addTo(releaseResources,rs);
      }
      rs=container.getReservedResource();
      if (rs != null) {
        Resources.addTo(releaseResources,rs);
      }
    }
  }
  if (nm.getState() == NodeState.DECOMMISSIONING) {
    this.rmContext.getDispatcher().getEventHandler().handle(new RMNodeResourceUpdateEvent(nm.getNodeID(),ResourceOption.newInstance(getSchedulerNode(nm.getNodeID()).getAllocatedResource(),0)));
  }
  schedulerHealth.updateSchedulerReleaseDetails(lastNodeUpdateTime,releaseResources);
  schedulerHealth.updateSchedulerReleaseCounts(releasedContainers);
  node.setAggregatedContainersUtilization(nm.getAggregatedContainersUtilization());
  node.setNodeUtilization(nm.getNodeUtilization());
  if (LOG.isDebugEnabled()) {
    LOG.debug("Node being looked for scheduling " + nm + " availableResource: "+ node.getUnallocatedResource());
  }
}
