{
  FiCaSchedulerApp application=getApplication(applicationAttemptId);
  if (application == null) {
    LOG.info("Calling allocate on removed " + "or non existant application " + applicationAttemptId);
    return EMPTY_ALLOCATION;
  }
  SchedulerUtils.normalizeRequests(ask,calculator,getClusterResources(),minimumAllocation);
  for (  ContainerId releasedContainerId : release) {
    RMContainer rmContainer=getRMContainer(releasedContainerId);
    if (rmContainer == null) {
      RMAuditLogger.logFailure(application.getUser(),AuditConstants.RELEASE_CONTAINER,"Unauthorized access or invalid container","CapacityScheduler","Trying to release container not owned by app or with invalid id",application.getApplicationId(),releasedContainerId);
    }
    completedContainer(rmContainer,SchedulerUtils.createAbnormalContainerStatus(releasedContainerId,SchedulerUtils.RELEASED_CONTAINER),RMContainerEventType.RELEASED);
  }
synchronized (application) {
    if (!ask.isEmpty()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("allocate: pre-update" + " applicationAttemptId=" + applicationAttemptId + " application="+ application);
      }
      application.showRequests();
      application.updateResourceRequests(ask);
      LOG.debug("allocate: post-update");
      application.showRequests();
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("allocate:" + " applicationAttemptId=" + applicationAttemptId + " #ask="+ ask.size());
    }
    return new Allocation(application.pullNewlyAllocatedContainers(),application.getHeadroom());
  }
}
