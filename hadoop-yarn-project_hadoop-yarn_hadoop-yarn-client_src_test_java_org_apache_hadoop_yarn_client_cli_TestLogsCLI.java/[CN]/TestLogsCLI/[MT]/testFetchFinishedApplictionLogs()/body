{
  String remoteLogRootDir="target/logs/";
  Configuration configuration=new Configuration();
  configuration.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,true);
  configuration.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,remoteLogRootDir);
  configuration.setBoolean(YarnConfiguration.YARN_ACL_ENABLE,true);
  configuration.set(YarnConfiguration.YARN_ADMIN_ACL,"admin");
  FileSystem fs=FileSystem.get(configuration);
  UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
  ApplicationId appId=ApplicationId.newInstance(0,1);
  ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId containerId0=ContainerId.newContainerId(appAttemptId,0);
  ContainerId containerId1=ContainerId.newContainerId(appAttemptId,1);
  ContainerId containerId2=ContainerId.newContainerId(appAttemptId,2);
  ContainerId containerId3=ContainerId.newContainerId(appAttemptId,3);
  final NodeId nodeId=NodeId.newInstance("localhost",1234);
  String rootLogDir="target/LocalLogs";
  Path rootLogDirPath=new Path(rootLogDir);
  if (fs.exists(rootLogDirPath)) {
    fs.delete(rootLogDirPath,true);
  }
  assertTrue(fs.mkdirs(rootLogDirPath));
  Path appLogsDir=new Path(rootLogDirPath,appId.toString());
  if (fs.exists(appLogsDir)) {
    fs.delete(appLogsDir,true);
  }
  assertTrue(fs.mkdirs(appLogsDir));
  List<String> rootLogDirs=Arrays.asList(rootLogDir);
  List<String> logTypes=new ArrayList<String>();
  logTypes.add("syslog");
  createContainerLogInLocalDir(appLogsDir,containerId1,fs,logTypes);
  createContainerLogInLocalDir(appLogsDir,containerId2,fs,logTypes);
  logTypes.add("stdout");
  logTypes.add("stdout1234");
  createContainerLogInLocalDir(appLogsDir,containerId3,fs,logTypes);
  Path path=new Path(remoteLogRootDir + ugi.getShortUserName() + "/logs/application_0_0001");
  if (fs.exists(path)) {
    fs.delete(path,true);
  }
  assertTrue(fs.mkdirs(path));
  uploadEmptyContainerLogIntoRemoteDir(ugi,configuration,rootLogDirs,nodeId,containerId0,path,fs);
  uploadEmptyContainerLogIntoRemoteDir(ugi,configuration,rootLogDirs,nodeId,containerId1,path,fs);
  uploadContainerLogIntoRemoteDir(ugi,configuration,rootLogDirs,nodeId,containerId1,path,fs);
  uploadContainerLogIntoRemoteDir(ugi,configuration,rootLogDirs,nodeId,containerId2,path,fs);
  uploadContainerLogIntoRemoteDir(ugi,configuration,rootLogDirs,nodeId,containerId3,path,fs);
  YarnClient mockYarnClient=createMockYarnClient(YarnApplicationState.FINISHED,ugi.getShortUserName());
  LogsCLI cli=new LogsCLIForTest(mockYarnClient){
    @Override public ContainerReport getContainerReport(    String containerIdStr) throws YarnException, IOException {
      ContainerReport mockReport=mock(ContainerReport.class);
      doReturn(nodeId).when(mockReport).getAssignedNode();
      doReturn("http://localhost:2345").when(mockReport).getNodeHttpAddress();
      return mockReport;
    }
  }
;
  cli.setConf(configuration);
  int exitCode=cli.run(new String[]{"-applicationId",appId.toString()});
  assertTrue(exitCode == 0);
  assertTrue(sysOutStream.toString().contains(logMessage(containerId1,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId2,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout1234")));
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-log_files",".*","-regex"});
  assertTrue(exitCode == 0);
  assertTrue(sysOutStream.toString().contains(logMessage(containerId1,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId2,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout1234")));
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-log_files","*"});
  assertTrue(exitCode == 0);
  assertTrue(sysOutStream.toString().contains(logMessage(containerId1,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId2,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout1234")));
  int fullSize=sysOutStream.toByteArray().length;
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-log_files","stdout"});
  assertTrue(exitCode == 0);
  assertFalse(sysOutStream.toString().contains(logMessage(containerId1,"syslog")));
  assertFalse(sysOutStream.toString().contains(logMessage(containerId2,"syslog")));
  assertFalse(sysOutStream.toString().contains(logMessage(containerId3,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout")));
  assertFalse(sysOutStream.toString().contains(logMessage(containerId3,"stdout1234")));
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-log_files","std*","-regex"});
  assertTrue(exitCode == 0);
  assertFalse(sysOutStream.toString().contains(logMessage(containerId1,"syslog")));
  assertFalse(sysOutStream.toString().contains(logMessage(containerId2,"syslog")));
  assertFalse(sysOutStream.toString().contains(logMessage(containerId3,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout1234")));
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-log_files","123"});
  assertTrue(exitCode == -1);
  assertTrue(sysErrStream.toString().contains("Can not find any log file matching the pattern: [123] " + "for the application: " + appId.toString()));
  sysErrStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-log_files","*","-size","10000"});
  assertTrue(exitCode == 0);
  assertTrue(sysOutStream.toByteArray().length == fullSize);
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-nodeAddress",nodeId.toString(),"-containerId",containerId1.toString()});
  assertTrue(exitCode == 0);
  assertTrue(sysOutStream.toString().contains(logMessage(containerId1,"syslog")));
  assertTrue(sysOutStream.toString().contains("Log Upload Time"));
  assertTrue(!sysOutStream.toString().contains("Logs for container " + containerId1.toString() + " are not present in this log-file."));
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-containerId",containerId3.toString(),"-log_files","123"});
  assertTrue(exitCode == -1);
  assertTrue(sysErrStream.toString().contains("Can not find any log file matching the pattern: [123] " + "for the container: " + containerId3 + " within the application: "+ appId.toString()));
  sysErrStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-containerId",containerId3.toString(),"-log_files","stdout"});
  assertTrue(exitCode == 0);
  int fullContextSize=sysOutStream.toByteArray().length;
  String fullContext=sysOutStream.toString();
  sysOutStream.reset();
  String logMessage=logMessage(containerId3,"stdout");
  int fileContentSize=logMessage.getBytes().length;
  int tailContentSize="\nEnd of LogType:stdout\n\n".getBytes().length;
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-containerId",containerId3.toString(),"-log_files","stdout","-size","5"});
  assertTrue(exitCode == 0);
  Assert.assertEquals(new String(logMessage.getBytes(),0,5),new String(sysOutStream.toByteArray(),(fullContextSize - fileContentSize - tailContentSize),5));
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-containerId",containerId3.toString(),"-log_files","stdout","-size","-5"});
  assertTrue(exitCode == 0);
  Assert.assertEquals(new String(logMessage.getBytes(),logMessage.getBytes().length - 5,5),new String(sysOutStream.toByteArray(),(fullContextSize - fileContentSize - tailContentSize),5));
  sysOutStream.reset();
  long negative=(fullContextSize + 1000) * (-1);
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-containerId",containerId3.toString(),"-log_files","stdout","-size",Long.toString(negative)});
  assertTrue(exitCode == 0);
  Assert.assertEquals(fullContext,sysOutStream.toString());
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-nodeAddress",nodeId.toString(),"-containerId",containerId0.toString()});
  assertTrue(exitCode == -1);
  assertTrue(sysErrStream.toString().contains("Logs for container " + containerId0.toString() + " are not present in this log-file."));
  sysErrStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-nodeAddress",nodeId.toString(),"-containerId",containerId3.toString()});
  assertTrue(exitCode == 0);
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout")));
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-nodeAddress",nodeId.toString(),"-containerId",containerId3.toString(),"-log_files","stdout"});
  assertTrue(exitCode == 0);
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout")));
  assertTrue(!sysOutStream.toString().contains(logMessage(containerId3,"syslog")));
  sysOutStream.reset();
  YarnClient mockYarnClientWithException=createMockYarnClientWithException();
  cli=new LogsCLIForTest(mockYarnClientWithException);
  cli.setConf(configuration);
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-containerId",containerId3.toString()});
  assertTrue(exitCode == 0);
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout")));
  assertTrue(sysOutStream.toString().contains(containerId3 + " on " + LogAggregationUtils.getNodeString(nodeId)));
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-containerId",containerId3.toString()});
  assertTrue(exitCode == 0);
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"syslog")));
  assertTrue(sysOutStream.toString().contains(logMessage(containerId3,"stdout")));
  assertTrue(sysOutStream.toString().contains(containerId3 + " on " + LogAggregationUtils.getNodeString(nodeId)));
  sysOutStream.reset();
  exitCode=cli.run(new String[]{"-containerId","invalid_container"});
  assertTrue(exitCode == -1);
  assertTrue(sysErrStream.toString().contains("Invalid ContainerId specified"));
  sysErrStream.reset();
  fs.delete(new Path(remoteLogRootDir),true);
  fs.delete(new Path(rootLogDir),true);
}
