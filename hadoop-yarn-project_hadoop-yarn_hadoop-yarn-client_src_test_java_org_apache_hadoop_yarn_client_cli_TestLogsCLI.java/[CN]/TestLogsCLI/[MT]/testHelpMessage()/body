{
  Configuration conf=new YarnConfiguration();
  YarnClient mockYarnClient=createMockYarnClient(YarnApplicationState.FINISHED,UserGroupInformation.getCurrentUser().getShortUserName());
  LogsCLI dumper=new LogsCLIForTest(mockYarnClient);
  dumper.setConf(conf);
  int exitCode=dumper.run(new String[]{});
  assertTrue(exitCode == -1);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintWriter pw=new PrintWriter(baos);
  pw.println("Retrieve logs for YARN applications.");
  pw.println("usage: yarn logs -applicationId <application ID> [OPTIONS]");
  pw.println();
  pw.println("general options are:");
  pw.println(" -am <AM Containers>             Prints the AM Container logs for this");
  pw.println("                                 application. Specify comma-separated");
  pw.println("                                 value to get logs for related AM");
  pw.println("                                 Container. For example, If we specify -am");
  pw.println("                                 1,2, we will get the logs for the first");
  pw.println("                                 AM Container as well as the second AM");
  pw.println("                                 Container. To get logs for all AM");
  pw.println("                                 Containers, use -am ALL. To get logs for");
  pw.println("                                 the latest AM Container, use -am -1. By");
  pw.println("                                 default, it will print all available");
  pw.println("                                 logs. Work with -log_files to get only");
  pw.println("                                 specific logs.");
  pw.println(" -appOwner <Application Owner>   AppOwner (assumed to be current user if");
  pw.println("                                 not specified)");
  pw.println(" -containerId <Container ID>     ContainerId. By default, it will print");
  pw.println("                                 all available logs. Work with -log_files");
  pw.println("                                 to get only specific logs. If specified,");
  pw.println("                                 the applicationId can be omitted");
  pw.println(" -help                           Displays help for all commands.");
  pw.println(" -list_nodes                     Show the list of nodes that successfully");
  pw.println("                                 aggregated logs. This option can only be");
  pw.println("                                 used with finished applications.");
  pw.println(" -log_files <Log File Name>      Specify comma-separated value to get");
  pw.println("                                 exact matched log files. Use \"ALL\" or");
  pw.println("                                 \"*\"to fetch all the log files for the");
  pw.println("                                 container. Specific -regex for using java");
  pw.println("                                 regex to find matched log files.");
  pw.println(" -nodeAddress <Node Address>     NodeAddress in the format nodename:port");
  pw.println(" -out <Local Directory>          Local directory for storing individual");
  pw.println("                                 container logs. The container logs will");
  pw.println("                                 be stored based on the node the container");
  pw.println("                                 ran on.");
  pw.println(" -regex                          Work with -log_files to find matched");
  pw.println("                                 files by using java regex.");
  pw.println(" -show_application_log_info      Show the containerIds which belong to the");
  pw.println("                                 specific Application. You can combine");
  pw.println("                                 this with --nodeAddress to get");
  pw.println("                                 containerIds for all the containers on");
  pw.println("                                 the specific NodeManager.");
  pw.println(" -show_container_log_info        Show the container log metadata,");
  pw.println("                                 including log-file names, the size of the");
  pw.println("                                 log files. You can combine this with");
  pw.println("                                 --containerId to get log metadata for the");
  pw.println("                                 specific container, or with --nodeAddress");
  pw.println("                                 to get log metadata for all the");
  pw.println("                                 containers on the specific NodeManager.");
  pw.println(" -size <size>                    Prints the log file's first 'n' bytes or");
  pw.println("                                 the last 'n' bytes. Use negative values");
  pw.println("                                 as bytes to read from the end and");
  pw.println("                                 positive values as bytes to read from the");
  pw.println("                                 beginning.");
  pw.close();
  String appReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appReportStr,sysOutStream.toString());
}
