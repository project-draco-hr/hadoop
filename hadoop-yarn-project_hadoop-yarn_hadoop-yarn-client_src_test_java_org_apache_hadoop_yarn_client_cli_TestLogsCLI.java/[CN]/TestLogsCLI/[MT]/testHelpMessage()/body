{
  Configuration conf=new YarnConfiguration();
  YarnClient mockYarnClient=createMockYarnClient(YarnApplicationState.FINISHED,UserGroupInformation.getCurrentUser().getShortUserName());
  LogsCLI dumper=new LogsCLIForTest(mockYarnClient);
  dumper.setConf(conf);
  int exitCode=dumper.run(new String[]{});
  assertTrue(exitCode == -1);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintWriter pw=new PrintWriter(baos);
  pw.println("Retrieve logs for YARN applications.");
  pw.println("usage: yarn logs -applicationId <application ID> [OPTIONS]");
  pw.println();
  pw.println("general options are:");
  pw.println(" -am <AM Containers>                     Prints the AM Container logs for");
  pw.println("                                         this application. Specify");
  pw.println("                                         comma-separated value to get logs");
  pw.println("                                         for related AM Container. For");
  pw.println("                                         example, If we specify -am 1,2,");
  pw.println("                                         we will get the logs for the");
  pw.println("                                         first AM Container as well as the");
  pw.println("                                         second AM Container. To get logs");
  pw.println("                                         for all AM Containers, use -am");
  pw.println("                                         ALL. To get logs for the latest");
  pw.println("                                         AM Container, use -am -1. By");
  pw.println("                                         default, it will print all");
  pw.println("                                         available logs. Work with");
  pw.println("                                         -log_files to get only specific");
  pw.println("                                         logs.");
  pw.println(" -appOwner <Application Owner>           AppOwner (assumed to be current");
  pw.println("                                         user if not specified)");
  pw.println(" -containerId <Container ID>             ContainerId. By default, it will");
  pw.println("                                         print all available logs. Work");
  pw.println("                                         with -log_files to get only");
  pw.println("                                         specific logs. If specified, the");
  pw.println("                                         applicationId can be omitted");
  pw.println(" -help                                   Displays help for all commands.");
  pw.println(" -list_nodes                             Show the list of nodes that");
  pw.println("                                         successfully aggregated logs.");
  pw.println("                                         This option can only be used with");
  pw.println("                                         finished applications.");
  pw.println(" -log_files <Log File Name>              Specify comma-separated value to");
  pw.println("                                         get exact matched log files. Use");
  pw.println("                                         \"ALL\" or \"*\" to fetch all the log");
  pw.println("                                         files for the container.");
  pw.println(" -log_files_pattern <Log File Pattern>   Specify comma-separated value to");
  pw.println("                                         get matched log files by using");
  pw.println("                                         java regex. Use \".*\" to fetch all");
  pw.println("                                         the log files for the container.");
  pw.println(" -nodeAddress <Node Address>             NodeAddress in the format");
  pw.println("                                         nodename:port");
  pw.println(" -out <Local Directory>                  Local directory for storing");
  pw.println("                                         individual container logs. The");
  pw.println("                                         container logs will be stored");
  pw.println("                                         based on the node the container");
  pw.println("                                         ran on.");
  pw.println(" -show_application_log_info              Show the containerIds which");
  pw.println("                                         belong to the specific");
  pw.println("                                         Application. You can combine this");
  pw.println("                                         with --nodeAddress to get");
  pw.println("                                         containerIds for all the");
  pw.println("                                         containers on the specific");
  pw.println("                                         NodeManager.");
  pw.println(" -show_container_log_info                Show the container log metadata,");
  pw.println("                                         including log-file names, the");
  pw.println("                                         size of the log files. You can");
  pw.println("                                         combine this with --containerId");
  pw.println("                                         to get log metadata for the");
  pw.println("                                         specific container, or with");
  pw.println("                                         --nodeAddress to get log metadata");
  pw.println("                                         for all the containers on the");
  pw.println("                                         specific NodeManager.");
  pw.println(" -size <size>                            Prints the log file's first 'n'");
  pw.println("                                         bytes or the last 'n' bytes. Use");
  pw.println("                                         negative values as bytes to read");
  pw.println("                                         from the end and positive values");
  pw.println("                                         as bytes to read from the");
  pw.println("                                         beginning.");
  pw.close();
  String appReportStr=baos.toString("UTF-8");
  Assert.assertEquals(appReportStr,sysOutStream.toString());
}
