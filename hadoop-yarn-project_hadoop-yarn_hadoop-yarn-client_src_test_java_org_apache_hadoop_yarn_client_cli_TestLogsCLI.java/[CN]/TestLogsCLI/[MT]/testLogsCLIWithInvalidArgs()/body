{
  String localDir="target/SaveLogs";
  Path localPath=new Path(localDir);
  Configuration configuration=new Configuration();
  FileSystem fs=FileSystem.get(configuration);
  ApplicationId appId=ApplicationId.newInstance(0,1);
  YarnClient mockYarnClient=createMockYarnClient(YarnApplicationState.FINISHED,UserGroupInformation.getCurrentUser().getShortUserName());
  LogsCLI cli=new LogsCLIForTest(mockYarnClient);
  cli.setConf(configuration);
  int exitCode=cli.run(new String[]{"-applicationId","123"});
  assertTrue(exitCode == -1);
  assertTrue(sysErrStream.toString().contains("Invalid ApplicationId specified"));
  sysErrStream.reset();
  exitCode=cli.run(new String[]{"-containerId","123"});
  assertTrue(exitCode == -1);
  assertTrue(sysErrStream.toString().contains("Invalid ContainerId specified"));
  sysErrStream.reset();
  exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-show_container_log_info","-show_application_log_info"});
  assertTrue(exitCode == -1);
  assertTrue(sysErrStream.toString().contains("Invalid options. " + "Can only accept one of show_application_log_info/" + "show_container_log_info."));
  sysErrStream.reset();
  try {
    fs.mkdirs(localPath);
    Path tmpFilePath=new Path(localPath,"tmpFile");
    if (!fs.exists(tmpFilePath)) {
      fs.createNewFile(tmpFilePath);
    }
    exitCode=cli.run(new String[]{"-applicationId",appId.toString(),"-out",tmpFilePath.toString()});
    assertTrue(exitCode == -1);
    assertTrue(sysErrStream.toString().contains("Invalid value for -out option. Please provide a directory."));
  }
  finally {
    fs.delete(localPath,true);
  }
}
