{
  loadAllTasks();
  completionEvents=new LinkedList<TaskAttemptCompletionEvent>();
  List<TaskAttempt> allTaskAttempts=new LinkedList<TaskAttempt>();
  int numMapAttempts=0;
  for (  TaskId taskId : tasks.keySet()) {
    Task task=tasks.get(taskId);
    for (    TaskAttemptId taskAttemptId : task.getAttempts().keySet()) {
      TaskAttempt taskAttempt=task.getAttempts().get(taskAttemptId);
      allTaskAttempts.add(taskAttempt);
      if (task.getType() == TaskType.MAP) {
        ++numMapAttempts;
      }
    }
  }
  Collections.sort(allTaskAttempts,new Comparator<TaskAttempt>(){
    @Override public int compare(    TaskAttempt o1,    TaskAttempt o2){
      if (o1.getFinishTime() == 0 || o2.getFinishTime() == 0) {
        if (o1.getFinishTime() == 0 && o2.getFinishTime() == 0) {
          if (o1.getLaunchTime() == 0 || o2.getLaunchTime() == 0) {
            if (o1.getLaunchTime() == 0 && o2.getLaunchTime() == 0) {
              return 0;
            }
 else {
              long res=o1.getLaunchTime() - o2.getLaunchTime();
              return res > 0 ? -1 : 1;
            }
          }
 else {
            return (int)(o1.getLaunchTime() - o2.getLaunchTime());
          }
        }
 else {
          long res=o1.getFinishTime() - o2.getFinishTime();
          return res > 0 ? -1 : 1;
        }
      }
 else {
        return (int)(o1.getFinishTime() - o2.getFinishTime());
      }
    }
  }
);
  mapCompletionEvents=new ArrayList<TaskAttemptCompletionEvent>(numMapAttempts);
  int eventId=0;
  for (  TaskAttempt taskAttempt : allTaskAttempts) {
    TaskAttemptCompletionEvent tace=Records.newRecord(TaskAttemptCompletionEvent.class);
    int attemptRunTime=-1;
    if (taskAttempt.getLaunchTime() != 0 && taskAttempt.getFinishTime() != 0) {
      attemptRunTime=(int)(taskAttempt.getFinishTime() - taskAttempt.getLaunchTime());
    }
    TaskAttemptCompletionEventStatus taceStatus=TaskAttemptCompletionEventStatus.KILLED;
    String taStateString=taskAttempt.getState().toString();
    try {
      taceStatus=TaskAttemptCompletionEventStatus.valueOf(taStateString);
    }
 catch (    Exception e) {
      LOG.warn("Cannot constuct TACEStatus from TaskAtemptState: [" + taStateString + "] for taskAttemptId: ["+ taskAttempt.getID()+ "]. Defaulting to KILLED");
    }
    tace.setAttemptId(taskAttempt.getID());
    tace.setAttemptRunTime(attemptRunTime);
    tace.setEventId(eventId++);
    tace.setMapOutputServerAddress(taskAttempt.getAssignedContainerMgrAddress());
    tace.setStatus(taceStatus);
    completionEvents.add(tace);
    if (taskAttempt.getID().getTaskId().getTaskType() == TaskType.MAP) {
      mapCompletionEvents.add(tace);
    }
  }
}
