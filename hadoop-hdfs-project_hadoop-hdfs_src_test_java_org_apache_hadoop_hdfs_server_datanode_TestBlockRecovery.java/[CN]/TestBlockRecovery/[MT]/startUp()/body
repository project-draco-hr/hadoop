{
  tearDownDone=false;
  conf=new HdfsConfiguration();
  conf.set(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY,DATA_DIR);
  conf.set(DFSConfigKeys.DFS_DATANODE_ADDRESS_KEY,"0.0.0.0:0");
  conf.set(DFSConfigKeys.DFS_DATANODE_HTTP_ADDRESS_KEY,"0.0.0.0:0");
  conf.set(DFSConfigKeys.DFS_DATANODE_IPC_ADDRESS_KEY,"0.0.0.0:0");
  if (currentTestName.getMethodName().equals("testInitReplicaRecoveryDoesNotHogLock")) {
    conf.setLong(DFSConfigKeys.DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS_KEY,TEST_LOCK_HOG_DFS_DATANODE_XCEIVER_STOP_TIMEOUT_MILLIS);
  }
  conf.setInt(CommonConfigurationKeys.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,0);
  FileSystem.setDefaultUri(conf,"hdfs://" + NN_ADDR.getHostName() + ":"+ NN_ADDR.getPort());
  ArrayList<StorageLocation> locations=new ArrayList<StorageLocation>();
  File dataDir=new File(DATA_DIR);
  FileUtil.fullyDelete(dataDir);
  dataDir.mkdirs();
  StorageLocation location=StorageLocation.parse(dataDir.getPath());
  locations.add(location);
  final DatanodeProtocolClientSideTranslatorPB namenode=mock(DatanodeProtocolClientSideTranslatorPB.class);
  Mockito.doAnswer(new Answer<DatanodeRegistration>(){
    @Override public DatanodeRegistration answer(    InvocationOnMock invocation) throws Throwable {
      return (DatanodeRegistration)invocation.getArguments()[0];
    }
  }
).when(namenode).registerDatanode(Mockito.any(DatanodeRegistration.class));
  when(namenode.versionRequest()).thenReturn(new NamespaceInfo(1,CLUSTER_ID,POOL_ID,1L));
  when(namenode.sendHeartbeat(Mockito.any(DatanodeRegistration.class),Mockito.any(StorageReport[].class),Mockito.anyLong(),Mockito.anyLong(),Mockito.anyInt(),Mockito.anyInt(),Mockito.anyInt(),Mockito.any(VolumeFailureSummary.class),Mockito.anyBoolean())).thenReturn(new HeartbeatResponse(new DatanodeCommand[0],new NNHAStatusHeartbeat(HAServiceState.ACTIVE,1),null,ThreadLocalRandom.current().nextLong() | 1L));
  dn=new DataNode(conf,locations,null){
    @Override DatanodeProtocolClientSideTranslatorPB connectToNN(    InetSocketAddress nnAddr) throws IOException {
      Assert.assertEquals(NN_ADDR,nnAddr);
      return namenode;
    }
  }
;
  dn.getAllBpOs().get(0).triggerHeartbeatForTests();
  waitForActiveNN();
  spyDN=spy(dn);
  recoveryWorker=new BlockRecoveryWorker(spyDN);
}
