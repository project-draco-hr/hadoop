{
  this.conf=conf;
  this.confForCreate=new Configuration(conf);
  confForCreate.set(FsPermission.UMASK_LABEL,"000");
  this.bossGroup=new NioEventLoopGroup();
  this.workerGroup=new NioEventLoopGroup();
  this.externalHttpChannel=externalHttpChannel;
  HttpConfig.Policy policy=DFSUtil.getHttpPolicy(conf);
  if (policy.isHttpEnabled()) {
    this.httpServer=new ServerBootstrap().group(bossGroup,workerGroup).childHandler(new ChannelInitializer<SocketChannel>(){
      @Override protected void initChannel(      SocketChannel ch) throws Exception {
        ChannelPipeline p=ch.pipeline();
        p.addLast(new HttpRequestDecoder(),new HttpResponseEncoder(),new ChunkedWriteHandler(),new URLDispatcher(jettyAddr,conf,confForCreate));
      }
    }
);
    if (externalHttpChannel == null) {
      httpServer.channel(NioServerSocketChannel.class);
    }
 else {
      httpServer.channelFactory(new ChannelFactory<NioServerSocketChannel>(){
        @Override public NioServerSocketChannel newChannel(){
          return new NioServerSocketChannel(externalHttpChannel){
            @Override protected void doBind(            SocketAddress localAddress) throws Exception {
            }
          }
;
        }
      }
);
    }
  }
 else {
    this.httpServer=null;
  }
  if (policy.isHttpsEnabled()) {
    this.sslFactory=new SSLFactory(SSLFactory.Mode.SERVER,conf);
    try {
      sslFactory.init();
    }
 catch (    GeneralSecurityException e) {
      throw new IOException(e);
    }
    this.httpsServer=new ServerBootstrap().group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>(){
      @Override protected void initChannel(      SocketChannel ch) throws Exception {
        ChannelPipeline p=ch.pipeline();
        p.addLast(new SslHandler(sslFactory.createSSLEngine()),new HttpRequestDecoder(),new HttpResponseEncoder(),new ChunkedWriteHandler(),new URLDispatcher(jettyAddr,conf,confForCreate));
      }
    }
);
  }
 else {
    this.httpsServer=null;
    this.sslFactory=null;
  }
}
