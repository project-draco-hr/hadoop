{
  this.restCsrfPreventionFilter=createRestCsrfPreventionFilter(conf);
  this.conf=conf;
  Configuration confForInfoServer=new Configuration(conf);
  confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS,10);
  HttpServer2.Builder builder=new HttpServer2.Builder().setName("datanode").setConf(confForInfoServer).setACL(new AccessControlList(conf.get(DFS_ADMIN," "))).hostName(getHostnameForSpnegoPrincipal(confForInfoServer)).addEndpoint(URI.create("http://localhost:0")).setFindPort(true);
  final boolean xFrameEnabled=conf.getBoolean(DFSConfigKeys.DFS_XFRAME_OPTION_ENABLED,DFSConfigKeys.DFS_XFRAME_OPTION_ENABLED_DEFAULT);
  final String xFrameOptionValue=conf.getTrimmed(DFSConfigKeys.DFS_XFRAME_OPTION_VALUE,DFSConfigKeys.DFS_XFRAME_OPTION_VALUE_DEFAULT);
  builder.configureXFrame(xFrameEnabled).setXFrameOption(xFrameOptionValue);
  this.infoServer=builder.build();
  this.infoServer.setAttribute("datanode",datanode);
  this.infoServer.setAttribute(JspHelper.CURRENT_CONF,conf);
  this.infoServer.addServlet(null,"/blockScannerReport",BlockScanner.Servlet.class);
  DataNodeUGIProvider.init(conf);
  this.infoServer.start();
  final InetSocketAddress jettyAddr=infoServer.getConnectorAddress(0);
  this.confForCreate=new Configuration(conf);
  confForCreate.set(FsPermission.UMASK_LABEL,"000");
  this.bossGroup=new NioEventLoopGroup();
  this.workerGroup=new NioEventLoopGroup();
  this.externalHttpChannel=externalHttpChannel;
  HttpConfig.Policy policy=DFSUtil.getHttpPolicy(conf);
  if (policy.isHttpEnabled()) {
    this.httpServer=new ServerBootstrap().group(bossGroup,workerGroup).childHandler(new ChannelInitializer<SocketChannel>(){
      @Override protected void initChannel(      SocketChannel ch) throws Exception {
        ch.pipeline().addLast(new PortUnificationServerHandler(jettyAddr,conf,confForCreate,restCsrfPreventionFilter));
      }
    }
);
    this.httpServer.childOption(ChannelOption.WRITE_BUFFER_HIGH_WATER_MARK,conf.getInt(DFSConfigKeys.DFS_WEBHDFS_NETTY_HIGH_WATERMARK,DFSConfigKeys.DFS_WEBHDFS_NETTY_HIGH_WATERMARK_DEFAULT));
    this.httpServer.childOption(ChannelOption.WRITE_BUFFER_LOW_WATER_MARK,conf.getInt(DFSConfigKeys.DFS_WEBHDFS_NETTY_LOW_WATERMARK,DFSConfigKeys.DFS_WEBHDFS_NETTY_LOW_WATERMARK_DEFAULT));
    if (externalHttpChannel == null) {
      httpServer.channel(NioServerSocketChannel.class);
    }
 else {
      httpServer.channelFactory(new ChannelFactory<NioServerSocketChannel>(){
        @Override public NioServerSocketChannel newChannel(){
          return new NioServerSocketChannel(externalHttpChannel){
            @Override protected void doBind(            SocketAddress localAddress) throws Exception {
            }
          }
;
        }
      }
);
    }
  }
 else {
    this.httpServer=null;
  }
  if (policy.isHttpsEnabled()) {
    this.sslFactory=new SSLFactory(SSLFactory.Mode.SERVER,conf);
    try {
      sslFactory.init();
    }
 catch (    GeneralSecurityException e) {
      throw new IOException(e);
    }
    this.httpsServer=new ServerBootstrap().group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>(){
      @Override protected void initChannel(      SocketChannel ch) throws Exception {
        ChannelPipeline p=ch.pipeline();
        p.addLast(new SslHandler(sslFactory.createSSLEngine()),new HttpRequestDecoder(),new HttpResponseEncoder());
        if (restCsrfPreventionFilter != null) {
          p.addLast(new RestCsrfPreventionFilterHandler(restCsrfPreventionFilter));
        }
        p.addLast(new ChunkedWriteHandler(),new URLDispatcher(jettyAddr,conf,confForCreate));
      }
    }
);
  }
 else {
    this.httpsServer=null;
    this.sslFactory=null;
  }
}
