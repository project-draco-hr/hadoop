{
  this.addressFactory=addressFactory;
  if (hostEntries != null) {
    if ((hostEntries.size() == 1) && (hostEntries.contains("*"))) {
      all=true;
      ipAddresses=null;
      hostNames=null;
      cidrAddresses=null;
    }
 else {
      all=false;
      Set<String> ips=new HashSet<String>();
      List<SubnetUtils.SubnetInfo> cidrs=new LinkedList<SubnetUtils.SubnetInfo>();
      Set<String> hosts=new HashSet<String>();
      for (      String hostEntry : hostEntries) {
        if (hostEntry.indexOf("/") > -1) {
          try {
            SubnetUtils subnet=new SubnetUtils(hostEntry);
            subnet.setInclusiveHostCount(true);
            cidrs.add(subnet.getInfo());
          }
 catch (          IllegalArgumentException e) {
            LOG.warn("Invalid CIDR syntax : " + hostEntry);
            throw e;
          }
        }
 else         if (InetAddresses.isInetAddress(hostEntry)) {
          ips.add(hostEntry);
        }
 else {
          hosts.add(hostEntry);
        }
      }
      ipAddresses=(ips.size() > 0) ? ips : null;
      cidrAddresses=(cidrs.size() > 0) ? cidrs : null;
      hostNames=(hosts.size() > 0) ? hosts : null;
    }
  }
 else {
    all=false;
    ipAddresses=null;
    hostNames=null;
    cidrAddresses=null;
  }
}
