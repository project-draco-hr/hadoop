{
  out.print("<SnapshotDiffSection>");
  while (true) {
    SnapshotDiffSection.DiffEntry e=SnapshotDiffSection.DiffEntry.parseDelimitedFrom(in);
    if (e == null) {
      break;
    }
switch (e.getType()) {
case FILEDIFF:
      out.print("<fileDiffEntry>");
    break;
case DIRECTORYDIFF:
  out.print("<dirDiffEntry>");
break;
default :
throw new IOException("unknown DiffEntry type " + e.getType());
}
o("inodeId",e.getInodeId());
o("count",e.getNumOfDiff());
switch (e.getType()) {
case FILEDIFF:
{
for (int i=0; i < e.getNumOfDiff(); ++i) {
out.print("<fileDiff>");
SnapshotDiffSection.FileDiff f=SnapshotDiffSection.FileDiff.parseDelimitedFrom(in);
o("snapshotId",f.getSnapshotId()).o("size",f.getFileSize()).o("name",f.getName().toStringUtf8());
out.print("</fileDiff>\n");
}
}
break;
case DIRECTORYDIFF:
{
for (int i=0; i < e.getNumOfDiff(); ++i) {
out.print("<dirDiff>");
SnapshotDiffSection.DirectoryDiff d=SnapshotDiffSection.DirectoryDiff.parseDelimitedFrom(in);
o("snapshotId",d.getSnapshotId()).o("childrenSize",d.getChildrenSize()).o("isSnapshotRoot",d.getIsSnapshotRoot()).o("name",d.getName().toStringUtf8()).o("createdListSize",d.getCreatedListSize());
for (long did : d.getDeletedINodeList()) {
o("deletedInode",did);
}
for (int dRefid : d.getDeletedINodeRefList()) {
o("deletedInoderef",dRefid);
}
for (int j=0; j < d.getCreatedListSize(); ++j) {
SnapshotDiffSection.CreatedListEntry ce=SnapshotDiffSection.CreatedListEntry.parseDelimitedFrom(in);
out.print("<created>");
o("name",ce.getName().toStringUtf8());
out.print("</created>\n");
}
out.print("</dirDiff>\n");
}
break;
}
default :
break;
}
switch (e.getType()) {
case FILEDIFF:
out.print("</fileDiffEntry>");
break;
case DIRECTORYDIFF:
out.print("</dirDiffEntry>");
break;
default :
throw new IOException("unknown DiffEntry type " + e.getType());
}
}
out.print("</SnapshotDiffSection>\n");
}
