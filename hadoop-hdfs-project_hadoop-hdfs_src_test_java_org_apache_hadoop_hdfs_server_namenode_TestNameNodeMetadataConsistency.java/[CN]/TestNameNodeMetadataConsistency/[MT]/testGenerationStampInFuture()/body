{
  cluster.waitActive();
  FileSystem fs=cluster.getFileSystem();
  OutputStream ostream=fs.create(filePath1);
  ostream.write(TEST_DATA_IN_FUTURE.getBytes());
  ostream.close();
  ExtendedBlock block=DFSTestUtil.getFirstBlock(fs,filePath1);
  final long genStamp=block.getGenerationStamp();
  final int datanodeIndex=0;
  cluster.changeGenStampOfBlock(datanodeIndex,block,genStamp + 1);
  final DataNodeProperties dnProps=cluster.stopDataNode(datanodeIndex);
  cluster.restartNameNode(true);
  cluster.getNameNode().getNamesystem().writeLock();
  BlockInfo bInfo=cluster.getNameNode().getNamesystem().getBlockManager().getStoredBlock(block.getLocalBlock());
  bInfo.delete();
  cluster.getNameNode().getNamesystem().getBlockManager().removeBlock(bInfo);
  cluster.getNameNode().getNamesystem().writeUnlock();
  BlockManagerTestUtil.setStartupSafeModeForTest(cluster.getNameNode().getNamesystem().getBlockManager());
  cluster.restartDataNode(dnProps);
  waitTil(TimeUnit.SECONDS.toMillis(SCAN_WAIT));
  cluster.triggerBlockReports();
  waitTil(TimeUnit.SECONDS.toMillis(SCAN_WAIT));
  assertEquals(TEST_DATA_IN_FUTURE.length(),cluster.getNameNode().getBytesWithFutureGenerationStamps());
  assertTrue(cluster.getNameNode().getNamesystem().getSafeModeTip().contains("Name node detected blocks with generation stamps in future"));
}
