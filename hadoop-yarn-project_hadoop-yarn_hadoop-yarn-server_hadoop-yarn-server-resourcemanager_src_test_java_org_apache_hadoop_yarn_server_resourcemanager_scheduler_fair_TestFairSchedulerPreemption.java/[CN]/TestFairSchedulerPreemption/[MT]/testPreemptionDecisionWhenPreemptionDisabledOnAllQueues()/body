{
  startResourceManagerWithRealFairScheduler();
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  ControlledClock clock=new ControlledClock();
  scheduler.setClock(clock);
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"default\">");
  out.println("<maxResources>0mb,0vcores</maxResources>");
  out.println("</queue>");
  out.println("<queue name=\"queueA\">");
  out.println("<weight>.25</weight>");
  out.println("<minResources>2048mb,0vcores</minResources>");
  out.println("<allowPreemptionFrom>false</allowPreemptionFrom>");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<weight>.25</weight>");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("<allowPreemptionFrom>false</allowPreemptionFrom>");
  out.println("</queue>");
  out.println("<queue name=\"parentQueue1\">");
  out.println("<allowPreemptionFrom>false</allowPreemptionFrom>");
  out.println("<queue name=\"queueC\">");
  out.println("<weight>.25</weight>");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("</queue>");
  out.println("</queue>");
  out.println("<queue name=\"parentQueue2\">");
  out.println("<queue name=\"queueD\">");
  out.println("<weight>.25</weight>");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("<allowPreemptionFrom>false</allowPreemptionFrom>");
  out.println("</queue>");
  out.println("</queue>");
  out.println("<defaultMinSharePreemptionTimeout>5</defaultMinSharePreemptionTimeout>");
  out.println("<defaultFairSharePreemptionTimeout>10</defaultFairSharePreemptionTimeout>");
  out.println("<defaultFairSharePreemptionThreshold>.5</defaultFairSharePreemptionThreshold>");
  out.println("</allocations>");
  out.close();
  scheduler.init(conf);
  scheduler.start();
  scheduler.reinitialize(conf,resourceManager.getRMContext());
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(3 * 1024,3),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(3 * 1024,3),2,"127.0.0.2");
  NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
  scheduler.handle(nodeEvent2);
  RMNode node3=MockNodes.newNodeInfo(1,Resources.createResource(3 * 1024,3),3,"127.0.0.3");
  NodeAddedSchedulerEvent nodeEvent3=new NodeAddedSchedulerEvent(node3);
  scheduler.handle(nodeEvent3);
  RMNode node4=MockNodes.newNodeInfo(1,Resources.createResource(3 * 1024,3),4,"127.0.0.4");
  NodeAddedSchedulerEvent nodeEvent4=new NodeAddedSchedulerEvent(node4);
  scheduler.handle(nodeEvent4);
  ApplicationAttemptId app1=createSchedulingRequest(1 * 1024,"queueB","user1",4,1);
  ApplicationAttemptId app2=createSchedulingRequest(1 * 1024,"parentQueue1.queueC","user1",4,2);
  ApplicationAttemptId app3=createSchedulingRequest(1 * 1024,"parentQueue2.queueD","user1",4,3);
  scheduler.update();
  for (int i=0; i < 3; i++) {
    NodeUpdateSchedulerEvent nodeUpdate1=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(nodeUpdate1);
    NodeUpdateSchedulerEvent nodeUpdate2=new NodeUpdateSchedulerEvent(node2);
    scheduler.handle(nodeUpdate2);
    NodeUpdateSchedulerEvent nodeUpdate3=new NodeUpdateSchedulerEvent(node3);
    scheduler.handle(nodeUpdate3);
    NodeUpdateSchedulerEvent nodeUpdate4=new NodeUpdateSchedulerEvent(node4);
    scheduler.handle(nodeUpdate4);
  }
  assertEquals(4,scheduler.getSchedulerApp(app1).getLiveContainers().size());
  assertEquals(4,scheduler.getSchedulerApp(app2).getLiveContainers().size());
  assertEquals(4,scheduler.getSchedulerApp(app3).getLiveContainers().size());
  ApplicationAttemptId app4=createSchedulingRequest(1 * 1024,"queueA","user1",4,1);
  scheduler.update();
  FSLeafQueue schedA=scheduler.getQueueManager().getLeafQueue("queueA",true);
  clock.tickSec(6);
  assertEquals(2048,scheduler.resourceDeficit(schedA,clock.getTime()).getMemory());
  scheduler.preemptResources(Resources.createResource(2 * 1024));
  assertTrue("App1 should have container to be preempted",Collections.disjoint(scheduler.getSchedulerApp(app1).getLiveContainers(),scheduler.getSchedulerApp(app1).getPreemptionContainers()));
  assertTrue("App2 should not have container to be preempted",Collections.disjoint(scheduler.getSchedulerApp(app2).getLiveContainers(),scheduler.getSchedulerApp(app2).getPreemptionContainers()));
  assertTrue("App3 should not have container to be preempted",Collections.disjoint(scheduler.getSchedulerApp(app3).getLiveContainers(),scheduler.getSchedulerApp(app3).getPreemptionContainers()));
  clock.tickSec(20);
  scheduler.preemptResources(Resources.createResource(2 * 1024));
  for (int i=0; i < 3; i++) {
    NodeUpdateSchedulerEvent nodeUpdate1=new NodeUpdateSchedulerEvent(node1);
    scheduler.handle(nodeUpdate1);
    NodeUpdateSchedulerEvent nodeUpdate2=new NodeUpdateSchedulerEvent(node2);
    scheduler.handle(nodeUpdate2);
    NodeUpdateSchedulerEvent nodeUpdate3=new NodeUpdateSchedulerEvent(node3);
    scheduler.handle(nodeUpdate3);
    NodeUpdateSchedulerEvent nodeUpdate4=new NodeUpdateSchedulerEvent(node4);
    scheduler.handle(nodeUpdate4);
  }
  assertEquals(4,scheduler.getSchedulerApp(app1).getLiveContainers().size());
  assertEquals(4,scheduler.getSchedulerApp(app2).getLiveContainers().size());
  assertEquals(4,scheduler.getSchedulerApp(app3).getLiveContainers().size());
  assertEquals(0,scheduler.getSchedulerApp(app4).getLiveContainers().size());
  stopResourceManager();
}
