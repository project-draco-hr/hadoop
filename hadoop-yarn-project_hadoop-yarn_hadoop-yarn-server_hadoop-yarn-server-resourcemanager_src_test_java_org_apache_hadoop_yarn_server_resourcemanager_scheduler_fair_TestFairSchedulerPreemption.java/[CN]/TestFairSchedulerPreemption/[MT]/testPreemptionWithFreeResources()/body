{
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"default\">");
  out.println("<maxResources>0mb,0vcores</maxResources>");
  out.println("</queue>");
  out.println("<queue name=\"queueA\">");
  out.println("<weight>1</weight>");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<weight>1</weight>");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("</queue>");
  out.print("<defaultMinSharePreemptionTimeout>5</defaultMinSharePreemptionTimeout>");
  out.print("<fairSharePreemptionTimeout>10</fairSharePreemptionTimeout>");
  out.println("</allocations>");
  out.close();
  startResourceManager(0f);
  registerNodeAndSubmitApp(4 * 1024,4,2,1024);
  createSchedulingRequest(1024,"queueB","user1",1,1);
  scheduler.update();
  clock.tick(6);
  ((StubbedFairScheduler)scheduler).resetLastPreemptResources();
  scheduler.preemptTasksIfNecessary();
  assertEquals("preemptResources() should have been called",1024,((StubbedFairScheduler)scheduler).lastPreemptMemory);
  resourceManager.stop();
  startResourceManager(0.8f);
  registerNodeAndSubmitApp(4 * 1024,4,3,1024);
  createSchedulingRequest(1024,"queueB","user1",1,1);
  scheduler.update();
  clock.tick(6);
  ((StubbedFairScheduler)scheduler).resetLastPreemptResources();
  scheduler.preemptTasksIfNecessary();
  assertEquals("preemptResources() should not have been called",-1,((StubbedFairScheduler)scheduler).lastPreemptMemory);
  resourceManager.stop();
  startResourceManager(0.7f);
  registerNodeAndSubmitApp(4 * 1024,4,3,1024);
  createSchedulingRequest(1024,"queueB","user1",1,1);
  scheduler.update();
  clock.tick(6);
  ((StubbedFairScheduler)scheduler).resetLastPreemptResources();
  scheduler.preemptTasksIfNecessary();
  assertEquals("preemptResources() should have been called",1024,((StubbedFairScheduler)scheduler).lastPreemptMemory);
}
