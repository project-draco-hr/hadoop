{
  if (LOG.isDebugEnabled()) {
    LOG.debug("Moving " + srcKey + " to "+ dstKey);
  }
  if (acquireLease && existingLease != null) {
    throw new IOException("Cannot acquire new lease if one already exists.");
  }
  try {
    if (null == storageInteractionLayer) {
      final String errMsg=String.format("Storage session expected for URI '%s' but does not exist.",sessionUri);
      throw new AssertionError(errMsg);
    }
    checkContainer(ContainerAccessType.ReadThenWrite);
    CloudBlobWrapper srcBlob=getBlobReference(srcKey);
    if (!srcBlob.exists(getInstrumentedContext())) {
      throw new AzureException("Source blob " + srcKey + " does not exist.");
    }
    SelfRenewingLease lease=null;
    if (acquireLease) {
      lease=srcBlob.acquireLease();
    }
 else     if (existingLease != null) {
      lease=existingLease;
    }
    CloudBlobWrapper dstBlob=getBlobReference(dstKey);
    URI srcUri=new URI(srcBlob.getUri().toASCIIString());
    try {
      dstBlob.startCopyFromBlob(srcUri,null,getInstrumentedContext());
    }
 catch (    StorageException se) {
      if (se.getErrorCode().equals(StorageErrorCode.SERVER_BUSY.toString())) {
        int copyBlobMinBackoff=sessionConfiguration.getInt(KEY_COPYBLOB_MIN_BACKOFF_INTERVAL,DEFAULT_COPYBLOB_MIN_BACKOFF_INTERVAL);
        int copyBlobMaxBackoff=sessionConfiguration.getInt(KEY_COPYBLOB_MAX_BACKOFF_INTERVAL,DEFAULT_COPYBLOB_MAX_BACKOFF_INTERVAL);
        int copyBlobDeltaBackoff=sessionConfiguration.getInt(KEY_COPYBLOB_BACKOFF_INTERVAL,DEFAULT_COPYBLOB_BACKOFF_INTERVAL);
        int copyBlobMaxRetries=sessionConfiguration.getInt(KEY_COPYBLOB_MAX_IO_RETRIES,DEFAULT_COPYBLOB_MAX_RETRY_ATTEMPTS);
        BlobRequestOptions options=new BlobRequestOptions();
        options.setRetryPolicyFactory(new RetryExponentialRetry(copyBlobMinBackoff,copyBlobDeltaBackoff,copyBlobMaxBackoff,copyBlobMaxRetries));
        dstBlob.startCopyFromBlob(srcUri,options,getInstrumentedContext());
      }
 else {
        throw se;
      }
    }
    waitForCopyToComplete(dstBlob,getInstrumentedContext());
    safeDelete(srcBlob,lease);
  }
 catch (  StorageException e) {
    throw new AzureException(e);
  }
catch (  URISyntaxException e) {
    throw new AzureException(e);
  }
}
