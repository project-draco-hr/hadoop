{
  LOG.debug("Moving {} to {}",srcKey,dstKey);
  if (acquireLease && existingLease != null) {
    throw new IOException("Cannot acquire new lease if one already exists.");
  }
  CloudBlobWrapper srcBlob=null;
  CloudBlobWrapper dstBlob=null;
  SelfRenewingLease lease=null;
  try {
    if (null == storageInteractionLayer) {
      final String errMsg=String.format("Storage session expected for URI '%s' but does not exist.",sessionUri);
      throw new AssertionError(errMsg);
    }
    checkContainer(ContainerAccessType.ReadThenWrite);
    srcBlob=getBlobReference(srcKey);
    if (!srcBlob.exists(getInstrumentedContext())) {
      throw new AzureException("Source blob " + srcKey + " does not exist.");
    }
    if (acquireLease) {
      lease=srcBlob.acquireLease();
    }
 else     if (existingLease != null) {
      lease=existingLease;
    }
    dstBlob=getBlobReference(dstKey);
    try {
      dstBlob.startCopyFromBlob(srcBlob,null,getInstrumentedContext());
    }
 catch (    StorageException se) {
      if (se.getErrorCode().equals(StorageErrorCode.SERVER_BUSY.toString())) {
        int copyBlobMinBackoff=sessionConfiguration.getInt(KEY_COPYBLOB_MIN_BACKOFF_INTERVAL,DEFAULT_COPYBLOB_MIN_BACKOFF_INTERVAL);
        int copyBlobMaxBackoff=sessionConfiguration.getInt(KEY_COPYBLOB_MAX_BACKOFF_INTERVAL,DEFAULT_COPYBLOB_MAX_BACKOFF_INTERVAL);
        int copyBlobDeltaBackoff=sessionConfiguration.getInt(KEY_COPYBLOB_BACKOFF_INTERVAL,DEFAULT_COPYBLOB_BACKOFF_INTERVAL);
        int copyBlobMaxRetries=sessionConfiguration.getInt(KEY_COPYBLOB_MAX_IO_RETRIES,DEFAULT_COPYBLOB_MAX_RETRY_ATTEMPTS);
        BlobRequestOptions options=new BlobRequestOptions();
        options.setRetryPolicyFactory(new RetryExponentialRetry(copyBlobMinBackoff,copyBlobDeltaBackoff,copyBlobMaxBackoff,copyBlobMaxRetries));
        dstBlob.startCopyFromBlob(srcBlob,options,getInstrumentedContext());
      }
 else {
        throw se;
      }
    }
    waitForCopyToComplete(dstBlob,getInstrumentedContext());
    safeDelete(srcBlob,lease);
  }
 catch (  StorageException e) {
    if (e.getErrorCode().equals(StorageErrorCode.SERVER_BUSY.toString())) {
      LOG.warn("Rename: CopyBlob: StorageException: ServerBusy: Retry complete, will attempt client side copy for page blob");
      InputStream ipStream=null;
      OutputStream opStream=null;
      try {
        if (srcBlob.getProperties().getBlobType() == BlobType.PAGE_BLOB) {
          ipStream=openInputStream(srcBlob);
          opStream=openOutputStream(dstBlob);
          byte[] buffer=new byte[PageBlobFormatHelpers.PAGE_SIZE];
          int len;
          while ((len=ipStream.read(buffer)) != -1) {
            opStream.write(buffer,0,len);
          }
          opStream.flush();
          opStream.close();
          ipStream.close();
        }
 else {
          throw new AzureException(e);
        }
        safeDelete(srcBlob,lease);
      }
 catch (      StorageException se) {
        LOG.warn("Rename: CopyBlob: StorageException: Failed");
        throw new AzureException(se);
      }
 finally {
        IOUtils.closeStream(ipStream);
        IOUtils.closeStream(opStream);
      }
    }
 else {
      throw new AzureException(e);
    }
  }
catch (  URISyntaxException e) {
    throw new AzureException(e);
  }
}
