{
  if (sessionUri == null) {
    throw new AssertionError("Expected a non-null session URI when configuring storage session");
  }
  if (storageInteractionLayer == null) {
    throw new AssertionError(String.format("Cannot configure storage session for URI '%s' " + "if storage session has not been established.",sessionUri.toString()));
  }
  tolerateOobAppends=sessionConfiguration.getBoolean(KEY_READ_TOLERATE_CONCURRENT_APPEND,DEFAULT_READ_TOLERATE_CONCURRENT_APPEND);
  this.downloadBlockSizeBytes=sessionConfiguration.getInt(KEY_STREAM_MIN_READ_SIZE,DEFAULT_DOWNLOAD_BLOCK_SIZE);
  this.uploadBlockSizeBytes=sessionConfiguration.getInt(KEY_WRITE_BLOCK_SIZE,DEFAULT_UPLOAD_BLOCK_SIZE);
  int storageConnectionTimeout=sessionConfiguration.getInt(KEY_STORAGE_CONNECTION_TIMEOUT,0);
  if (0 < storageConnectionTimeout) {
    storageInteractionLayer.setTimeoutInMs(storageConnectionTimeout * 1000);
  }
  int cpuCores=2 * Runtime.getRuntime().availableProcessors();
  concurrentWrites=sessionConfiguration.getInt(KEY_CONCURRENT_CONNECTION_VALUE_OUT,Math.min(cpuCores,DEFAULT_CONCURRENT_WRITES));
  minBackoff=sessionConfiguration.getInt(KEY_MIN_BACKOFF_INTERVAL,DEFAULT_MIN_BACKOFF_INTERVAL);
  maxBackoff=sessionConfiguration.getInt(KEY_MAX_BACKOFF_INTERVAL,DEFAULT_MAX_BACKOFF_INTERVAL);
  deltaBackoff=sessionConfiguration.getInt(KEY_BACKOFF_INTERVAL,DEFAULT_BACKOFF_INTERVAL);
  maxRetries=sessionConfiguration.getInt(KEY_MAX_IO_RETRIES,DEFAULT_MAX_RETRY_ATTEMPTS);
  storageInteractionLayer.setRetryPolicyFactory(new RetryExponentialRetry(minBackoff,deltaBackoff,maxBackoff,maxRetries));
  selfThrottlingEnabled=sessionConfiguration.getBoolean(KEY_SELF_THROTTLE_ENABLE,DEFAULT_SELF_THROTTLE_ENABLE);
  selfThrottlingReadFactor=sessionConfiguration.getFloat(KEY_SELF_THROTTLE_READ_FACTOR,DEFAULT_SELF_THROTTLE_READ_FACTOR);
  selfThrottlingWriteFactor=sessionConfiguration.getFloat(KEY_SELF_THROTTLE_WRITE_FACTOR,DEFAULT_SELF_THROTTLE_WRITE_FACTOR);
  OperationContext.setLoggingEnabledByDefault(sessionConfiguration.getBoolean(KEY_ENABLE_STORAGE_CLIENT_LOGGING,false));
  if (LOG.isDebugEnabled()) {
    LOG.debug(String.format("AzureNativeFileSystemStore init. Settings=%d,%b,%d,{%d,%d,%d,%d},{%b,%f,%f}",concurrentWrites,tolerateOobAppends,((storageConnectionTimeout > 0) ? storageConnectionTimeout : STORAGE_CONNECTION_TIMEOUT_DEFAULT),minBackoff,deltaBackoff,maxBackoff,maxRetries,selfThrottlingEnabled,selfThrottlingReadFactor,selfThrottlingWriteFactor));
  }
}
