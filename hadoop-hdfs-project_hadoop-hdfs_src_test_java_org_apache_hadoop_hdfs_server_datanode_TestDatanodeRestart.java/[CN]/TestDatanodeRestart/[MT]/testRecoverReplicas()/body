{
  Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,1024L);
  conf.setInt(DFSConfigKeys.DFS_CLIENT_WRITE_PACKET_SIZE_KEY,512);
  conf.setBoolean(DFSConfigKeys.DFS_SUPPORT_APPEND_KEY,true);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  cluster.waitActive();
  try {
    FileSystem fs=cluster.getFileSystem();
    for (int i=0; i < 4; i++) {
      Path fileName=new Path("/test" + i);
      DFSTestUtil.createFile(fs,fileName,1,(short)1,0L);
      DFSTestUtil.waitReplication(fs,fileName,(short)1);
    }
    String bpid=cluster.getNamesystem().getBlockPoolId();
    DataNode dn=cluster.getDataNodes().get(0);
    Iterator<ReplicaInfo> replicasItor=((FSDataset)dn.data).volumeMap.replicas(bpid).iterator();
    ReplicaInfo replica=replicasItor.next();
    createUnlinkTmpFile(replica,true,true);
    createUnlinkTmpFile(replica,false,true);
    replica=replicasItor.next();
    createUnlinkTmpFile(replica,true,false);
    createUnlinkTmpFile(replica,false,false);
    replica=replicasItor.next();
    createUnlinkTmpFile(replica,true,true);
    createUnlinkTmpFile(replica,false,false);
    cluster.restartDataNodes();
    cluster.waitActive();
    dn=cluster.getDataNodes().get(0);
    Collection<ReplicaInfo> replicas=((FSDataset)(dn.data)).volumeMap.replicas(bpid);
    Assert.assertEquals(4,replicas.size());
    replicasItor=replicas.iterator();
    while (replicasItor.hasNext()) {
      Assert.assertEquals(ReplicaState.FINALIZED,replicasItor.next().getState());
    }
  }
  finally {
    cluster.shutdown();
  }
}
