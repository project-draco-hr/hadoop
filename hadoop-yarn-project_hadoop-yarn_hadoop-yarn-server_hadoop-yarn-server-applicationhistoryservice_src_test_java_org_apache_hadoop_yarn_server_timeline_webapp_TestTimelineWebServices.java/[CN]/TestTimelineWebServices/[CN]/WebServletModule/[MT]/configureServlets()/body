{
  bind(YarnJacksonJaxbJsonProvider.class);
  bind(TimelineWebServices.class);
  bind(GenericExceptionHandler.class);
  try {
    store=mockTimelineStore();
  }
 catch (  Exception e) {
    Assert.fail();
  }
  Configuration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE,false);
  timelineACLsManager=new TimelineACLsManager(conf);
  timelineACLsManager.setTimelineStore(store);
  conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE,true);
  conf.set(YarnConfiguration.YARN_ADMIN_ACL,"admin");
  adminACLsManager=new AdminACLsManager(conf);
  TimelineDataManager timelineDataManager=new TimelineDataManager(store,timelineACLsManager);
  timelineDataManager.init(conf);
  timelineDataManager.start();
  bind(TimelineDataManager.class).toInstance(timelineDataManager);
  serve("/*").with(GuiceContainer.class);
  TimelineAuthenticationFilter taFilter=new TimelineAuthenticationFilter();
  FilterConfig filterConfig=mock(FilterConfig.class);
  when(filterConfig.getInitParameter(AuthenticationFilter.CONFIG_PREFIX)).thenReturn(null);
  when(filterConfig.getInitParameter(AuthenticationFilter.AUTH_TYPE)).thenReturn("simple");
  when(filterConfig.getInitParameter(PseudoAuthenticationHandler.ANONYMOUS_ALLOWED)).thenReturn("true");
  ServletContext context=mock(ServletContext.class);
  when(filterConfig.getServletContext()).thenReturn(context);
  Enumeration<Object> names=mock(Enumeration.class);
  when(names.hasMoreElements()).thenReturn(true,true,true,false);
  when(names.nextElement()).thenReturn(AuthenticationFilter.AUTH_TYPE,PseudoAuthenticationHandler.ANONYMOUS_ALLOWED,DelegationTokenAuthenticationHandler.TOKEN_KIND);
  when(filterConfig.getInitParameterNames()).thenReturn(names);
  when(filterConfig.getInitParameter(DelegationTokenAuthenticationHandler.TOKEN_KIND)).thenReturn(TimelineDelegationTokenIdentifier.KIND_NAME.toString());
  try {
    taFilter.init(filterConfig);
  }
 catch (  ServletException e) {
    Assert.fail("Unable to initialize TimelineAuthenticationFilter: " + e.getMessage());
  }
  taFilter=spy(taFilter);
  try {
    doNothing().when(taFilter).init(any(FilterConfig.class));
  }
 catch (  ServletException e) {
    Assert.fail("Unable to initialize TimelineAuthenticationFilter: " + e.getMessage());
  }
  filter("/*").through(taFilter);
}
