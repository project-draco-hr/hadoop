{
  Path tmpDir=new Path("localpath");
  Class<Text> keyClass=(Class<Text>)jobConf.getMapOutputKeyClass();
  Class<Text> valueClass=(Class<Text>)jobConf.getMapOutputValueClass();
  RawComparator<Text> comparator=jobConf.getOutputKeyComparator();
  Counter readsCounter=new Counter();
  Counter writesCounter=new Counter();
  Progress mergePhase=new Progress();
  RawKeyValueIterator mergeQueue=Merger.merge(conf,fs,keyClass,valueClass,segments,2,tmpDir,comparator,getReporter(),readsCounter,writesCounter,mergePhase);
  final float epsilon=0.00001f;
  Assert.assertEquals(2 / 6.0f,mergeQueue.getProgress().get(),epsilon);
  Assert.assertTrue(mergeQueue.next());
  Assert.assertEquals(2 / 6.0f,mergeQueue.getProgress().get(),epsilon);
  Assert.assertTrue(mergeQueue.next());
  Assert.assertEquals(3 / 6.0f,mergeQueue.getProgress().get(),epsilon);
  Assert.assertTrue(mergeQueue.next());
  Assert.assertEquals(4 / 6.0f,mergeQueue.getProgress().get(),epsilon);
  Assert.assertTrue(mergeQueue.next());
  Assert.assertEquals(4 / 6.0f,mergeQueue.getProgress().get(),epsilon);
  Assert.assertTrue(mergeQueue.next());
  Assert.assertEquals(5 / 6.0f,mergeQueue.getProgress().get(),epsilon);
  Assert.assertTrue(mergeQueue.next());
  Assert.assertEquals(1.0f,mergeQueue.getProgress().get(),epsilon);
  Assert.assertFalse(mergeQueue.next());
  Assert.assertEquals(1.0f,mergeQueue.getProgress().get(),epsilon);
}
