{
  OutputStream[] tmpOuts=new OutputStream[paritySize];
  tmpOuts[0]=out;
  File[] tmpFiles=new File[paritySize - 1];
  for (int i=0; i < paritySize - 1; i++) {
    tmpFiles[i]=File.createTempFile("parity","_" + i);
    LOG.info("Created tmp file " + tmpFiles[i]);
    tmpFiles[i].deleteOnExit();
  }
  try {
    for (long stripeStart=0; stripeStart < srcSize; stripeStart+=blockSize * stripeSize) {
      reporter.progress();
      LOG.info("Starting encoding of stripe " + srcFile + ":"+ stripeStart);
      InputStream[] blocks=stripeInputs(fs,srcFile,stripeStart,srcSize,blockSize);
      for (int i=0; i < paritySize - 1; i++) {
        tmpOuts[i + 1]=new FileOutputStream(tmpFiles[i]);
      }
      encodeStripe(blocks,stripeStart,blockSize,tmpOuts,reporter);
      for (int i=0; i < paritySize - 1; i++) {
        tmpOuts[i + 1].close();
        tmpOuts[i + 1]=null;
        InputStream in=new FileInputStream(tmpFiles[i]);
        RaidUtils.copyBytes(in,out,writeBufs[i],blockSize);
        reporter.progress();
      }
    }
  }
  finally {
    for (int i=0; i < paritySize - 1; i++) {
      if (tmpOuts[i + 1] != null) {
        tmpOuts[i + 1].close();
      }
      tmpFiles[i].delete();
      LOG.info("Deleted tmp file " + tmpFiles[i]);
    }
  }
}
