{
  if (!isAMReachableFromClient) {
    return;
  }
  MRClientProtocol historyServerProxy=mock(MRClientProtocol.class);
  ResourceMgrDelegate rmDelegate=mock(ResourceMgrDelegate.class);
  when(rmDelegate.getApplicationReport(jobId.getAppId())).thenReturn(getRunningApplicationReport("am1",78)).thenReturn(getRunningApplicationReport(null,0)).thenReturn(getRunningApplicationReport(null,0)).thenReturn(getRunningApplicationReport("am2",90));
  GetJobReportResponse jobReportResponse1=mock(GetJobReportResponse.class);
  when(jobReportResponse1.getJobReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"jobName-firstGen","user",JobState.RUNNING,0,0,0,0,0,0,0,"anything",null,false));
  MRClientProtocol firstGenAMProxy=mock(MRClientProtocol.class);
  when(firstGenAMProxy.getJobReport(any(GetJobReportRequest.class))).thenReturn(jobReportResponse1).thenThrow(new RuntimeException("AM is down!"));
  GetJobReportResponse jobReportResponse2=mock(GetJobReportResponse.class);
  when(jobReportResponse2.getJobReport()).thenReturn(MRBuilderUtils.newJobReport(jobId,"jobName-secondGen","user",JobState.RUNNING,0,0,0,0,0,0,0,"anything",null,false));
  MRClientProtocol secondGenAMProxy=mock(MRClientProtocol.class);
  when(secondGenAMProxy.getJobReport(any(GetJobReportRequest.class))).thenReturn(jobReportResponse2);
  ClientServiceDelegate clientServiceDelegate=spy(getClientServiceDelegate(historyServerProxy,rmDelegate));
  doReturn(firstGenAMProxy).doReturn(secondGenAMProxy).when(clientServiceDelegate).instantiateAMProxy(any(InetSocketAddress.class));
  JobStatus jobStatus=clientServiceDelegate.getJobStatus(oldJobId);
  Assert.assertNotNull(jobStatus);
  Assert.assertEquals("jobName-firstGen",jobStatus.getJobName());
  jobStatus=clientServiceDelegate.getJobStatus(oldJobId);
  Assert.assertNotNull(jobStatus);
  Assert.assertEquals("jobName-secondGen",jobStatus.getJobName());
  jobStatus=clientServiceDelegate.getJobStatus(oldJobId);
  Assert.assertNotNull(jobStatus);
  Assert.assertEquals("jobName-secondGen",jobStatus.getJobName());
  verify(clientServiceDelegate,times(2)).instantiateAMProxy(any(InetSocketAddress.class));
}
