{
  if (!isAMReachableFromClient) {
    return;
  }
  ResourceMgrDelegate rm=mock(ResourceMgrDelegate.class);
  when(rm.getApplicationReport(TypeConverter.toYarn(oldJobId).getAppId())).thenReturn(getRunningApplicationReport("am1",78));
  final MRClientProtocol amProxy=mock(MRClientProtocol.class);
  when(amProxy.getJobReport(any(GetJobReportRequest.class))).thenThrow(new AuthorizationException("Denied"));
  Configuration conf=new YarnConfiguration();
  conf.set(MRConfig.FRAMEWORK_NAME,MRConfig.YARN_FRAMEWORK_NAME);
  conf.setBoolean(MRJobConfig.JOB_AM_ACCESS_DISABLED,!isAMReachableFromClient);
  ClientServiceDelegate clientServiceDelegate=new ClientServiceDelegate(conf,rm,oldJobId,null){
    @Override MRClientProtocol instantiateAMProxy(    final InetSocketAddress serviceAddr) throws IOException {
      super.instantiateAMProxy(serviceAddr);
      return amProxy;
    }
  }
;
  try {
    clientServiceDelegate.getJobStatus(oldJobId);
    Assert.fail("Exception should be thrown upon AuthorizationException");
  }
 catch (  IOException e) {
    Assert.assertEquals(AuthorizationException.class.getName() + ": Denied",e.getMessage());
  }
  Assert.assertEquals(conf.getInt(MRJobConfig.MR_CLIENT_MAX_RETRIES,MRJobConfig.DEFAULT_MR_CLIENT_MAX_RETRIES),clientServiceDelegate.getMaxClientRetry());
  verify(amProxy,times(1)).getJobReport(any(GetJobReportRequest.class));
}
