{
  conf.set(MRConfig.FRAMEWORK_NAME,MRConfig.YARN_FRAMEWORK_NAME);
  conf.setBoolean(MRJobConfig.JOB_AM_ACCESS_DISABLED,!isAMReachableFromClient);
  MRClientProtocol historyServerProxy=mock(MRClientProtocol.class);
  ResourceMgrDelegate rmDelegate=mock(ResourceMgrDelegate.class);
  when(rmDelegate.getApplicationReport(jobId.getAppId())).thenThrow(new java.lang.reflect.UndeclaredThrowableException(new IOException("Connection refuced1"))).thenThrow(new java.lang.reflect.UndeclaredThrowableException(new IOException("Connection refuced2"))).thenThrow(new java.lang.reflect.UndeclaredThrowableException(new IOException("Connection refuced3")));
  ClientServiceDelegate clientServiceDelegate=new ClientServiceDelegate(conf,rmDelegate,oldJobId,historyServerProxy);
  try {
    clientServiceDelegate.getJobStatus(oldJobId);
    Assert.fail("It should throw exception after retries");
  }
 catch (  IOException e) {
    System.out.println("fail to get job status,and e=" + e.toString());
  }
  verify(rmDelegate,times(noOfRetries)).getApplicationReport(any(ApplicationId.class));
}
