{
  if (isAMReachableFromClient) {
    return;
  }
  MRClientProtocol historyServerProxy=mock(MRClientProtocol.class);
  when(historyServerProxy.getJobReport(getJobReportRequest())).thenReturn(getJobReportResponseFromHistoryServer());
  ResourceMgrDelegate rmDelegate=mock(ResourceMgrDelegate.class);
  try {
    when(rmDelegate.getApplicationReport(jobId.getAppId())).thenReturn(getRunningApplicationReport("am1",78)).thenReturn(getRunningApplicationReport("am1",78)).thenReturn(getRunningApplicationReport("am1",78)).thenReturn(getFinishedApplicationReport());
  }
 catch (  YarnRemoteException e) {
    throw new IOException(e);
  }
  ClientServiceDelegate clientServiceDelegate=spy(getClientServiceDelegate(historyServerProxy,rmDelegate));
  JobStatus jobStatus=clientServiceDelegate.getJobStatus(oldJobId);
  Assert.assertNotNull(jobStatus);
  Assert.assertEquals("N/A",jobStatus.getJobName());
  verify(clientServiceDelegate,times(0)).instantiateAMProxy(any(InetSocketAddress.class));
  jobStatus=clientServiceDelegate.getJobStatus(oldJobId);
  Assert.assertNotNull(jobStatus);
  Assert.assertEquals("N/A",jobStatus.getJobName());
  verify(clientServiceDelegate,times(0)).instantiateAMProxy(any(InetSocketAddress.class));
  jobStatus=clientServiceDelegate.getJobStatus(oldJobId);
  Assert.assertNotNull(jobStatus);
  Assert.assertEquals("N/A",jobStatus.getJobName());
  verify(clientServiceDelegate,times(0)).instantiateAMProxy(any(InetSocketAddress.class));
  JobStatus jobStatus1=clientServiceDelegate.getJobStatus(oldJobId);
  Assert.assertNotNull(jobStatus1);
  Assert.assertEquals("TestJobFilePath",jobStatus1.getJobFile());
  Assert.assertEquals("http://TestTrackingUrl",jobStatus1.getTrackingUrl());
  Assert.assertEquals(1.0f,jobStatus1.getMapProgress());
  Assert.assertEquals(1.0f,jobStatus1.getReduceProgress());
  verify(clientServiceDelegate,times(0)).instantiateAMProxy(any(InetSocketAddress.class));
}
