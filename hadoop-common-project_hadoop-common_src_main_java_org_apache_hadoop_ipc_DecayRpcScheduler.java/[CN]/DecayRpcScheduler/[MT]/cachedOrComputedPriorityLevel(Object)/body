{
  try {
    long occurrences=this.getAndIncrementCallCounts(identity);
    Map<Object,Integer> scheduleCache=scheduleCacheRef.get();
    if (scheduleCache != null) {
      Integer priority=scheduleCache.get(identity);
      if (priority != null) {
        LOG.debug("Cache priority for: {} with priority: {}",identity,priority);
        return priority;
      }
    }
    int priority=computePriorityLevel(occurrences);
    LOG.debug("compute priority for " + identity + " priority "+ priority);
    return priority;
  }
 catch (  InterruptedException ie) {
    LOG.warn("Caught InterruptedException, returning low priority level");
    LOG.debug("Fallback priority for: {} with priority: {}",identity,numLevels - 1);
    return numLevels - 1;
  }
}
