{
  final short REPL_FACTOR=1;
  final HdfsConfiguration conf=getConfiguration(null);
  conf.setBoolean(HdfsClientConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL,true);
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  cluster.waitActive();
  final DistributedFileSystem dfs=cluster.getFileSystem();
  final Path path=new Path("/testBlockReaderLocalLegacy");
  DFSTestUtil.createFile(dfs,path,10,REPL_FACTOR,0);
  DFSTestUtil.waitReplication(dfs,path,REPL_FACTOR);
  final ClientDatanodeProtocol proxy;
  final Token<BlockTokenIdentifier> token;
  final ExtendedBlock originalBlock;
  final long originalGS;
{
    final LocatedBlock lb=cluster.getNameNode().getRpcServer().getBlockLocations(path.toString(),0,1).get(0);
    proxy=DFSUtilClient.createClientDatanodeProtocolProxy(lb.getLocations()[0],conf,60000,false);
    token=lb.getBlockToken();
    final ExtendedBlock blk=new ExtendedBlock(lb.getBlock());
    originalBlock=new ExtendedBlock(blk);
    originalGS=originalBlock.getGenerationStamp();
    final BlockLocalPathInfo info=proxy.getBlockLocalPathInfo(blk,token);
    Assert.assertEquals(originalGS,info.getBlock().getGenerationStamp());
  }
{
    FSDataOutputStream out=dfs.append(path);
    out.write(1);
    out.close();
  }
{
    final LocatedBlock lb=cluster.getNameNode().getRpcServer().getBlockLocations(path.toString(),0,1).get(0);
    final long newGS=lb.getBlock().getGenerationStamp();
    Assert.assertTrue(newGS > originalGS);
    Assert.assertEquals(originalGS,originalBlock.getGenerationStamp());
    final BlockLocalPathInfo info=proxy.getBlockLocalPathInfo(originalBlock,token);
    Assert.assertEquals(newGS,info.getBlock().getGenerationStamp());
  }
  cluster.shutdown();
}
