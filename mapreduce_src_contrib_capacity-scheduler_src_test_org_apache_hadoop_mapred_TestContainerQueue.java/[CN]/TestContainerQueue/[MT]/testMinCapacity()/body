{
  AbstractQueue rt=QueueHierarchyBuilder.createRootAbstractQueue();
  QueueSchedulingContext a1=new QueueSchedulingContext("a",25,-1,-1);
  QueueSchedulingContext a2=new QueueSchedulingContext("b",25,-1,-1);
  AbstractQueue q=new ContainerQueue(rt,a1);
  AbstractQueue ql=new ContainerQueue(rt,a2);
  QueueSchedulingContext a=new QueueSchedulingContext("aa",50,-1,-1);
  QueueSchedulingContext b=new QueueSchedulingContext("ab",50,-1,-1);
  QueueSchedulingContext c=new QueueSchedulingContext("ac",50,-1,-1);
  QueueSchedulingContext d=new QueueSchedulingContext("ad",50,-1,-1);
  AbstractQueue q1=new JobQueue(q,a);
  AbstractQueue q2=new JobQueue(q,b);
  AbstractQueue q3=new JobQueue(ql,c);
  AbstractQueue q4=new JobQueue(ql,d);
  rt.update(1000,1000);
  assertEquals(q.getQueueSchedulingContext().getMapTSC().getCapacity(),250);
  assertEquals(ql.getQueueSchedulingContext().getMapTSC().getCapacity(),250);
  assertEquals(q1.getQueueSchedulingContext().getMapTSC().getCapacity(),125);
  assertEquals(q2.getQueueSchedulingContext().getMapTSC().getCapacity(),125);
  assertEquals(q3.getQueueSchedulingContext().getMapTSC().getCapacity(),125);
  assertEquals(q4.getQueueSchedulingContext().getMapTSC().getCapacity(),125);
  rt.update(1,1);
  assertEquals(q.getQueueSchedulingContext().getMapTSC().getCapacity(),0);
  assertEquals(ql.getQueueSchedulingContext().getMapTSC().getCapacity(),0);
  assertEquals(q1.getQueueSchedulingContext().getMapTSC().getCapacity(),0);
  assertEquals(q2.getQueueSchedulingContext().getMapTSC().getCapacity(),0);
  assertEquals(q3.getQueueSchedulingContext().getMapTSC().getCapacity(),0);
  assertEquals(q4.getQueueSchedulingContext().getMapTSC().getCapacity(),0);
}
