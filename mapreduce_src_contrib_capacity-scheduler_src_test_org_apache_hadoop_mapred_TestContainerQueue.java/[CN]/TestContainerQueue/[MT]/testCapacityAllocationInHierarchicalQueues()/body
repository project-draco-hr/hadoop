{
  this.setUp(9,1,1);
  taskTrackerManager.addJobInProgressListener(scheduler.jobQueuesManager);
  Map<String,AbstractQueue> map=setUpHierarchy();
  scheduler.updateContextInfoForTests();
  TaskSchedulingContext mapTsc=map.get("rt.gta").getQueueSchedulingContext().getMapTSC();
  assertEquals(mapTsc.getCapacity(),3);
  mapTsc=map.get("rt.sch").getQueueSchedulingContext().getMapTSC();
  assertEquals(mapTsc.getCapacity(),5);
  mapTsc=map.get("rt.sch.prod").getQueueSchedulingContext().getMapTSC();
  assertEquals(mapTsc.getCapacity(),4);
  mapTsc=map.get("rt.sch.misc").getQueueSchedulingContext().getMapTSC();
  assertEquals(mapTsc.getCapacity(),1);
  assertUsedCapacity(map,new String[]{"rt.gta","rt.sch","rt.sch.prod","rt.sch.misc"},new int[]{0,0,0,0});
  taskTrackerManager.submitJobAndInit(JobStatus.PREP,4,4,"rt.sch.prod","u1");
  taskTrackerManager.submitJobAndInit(JobStatus.PREP,4,4,"rt.sch.misc","u1");
  taskTrackerManager.submitJobAndInit(JobStatus.PREP,4,4,"rt.gta","u1");
  int counter=0;
  Map<String,String> expectedStrings=new HashMap<String,String>();
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000001_0 on tt1");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000001_0 on tt1");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt1",expectedStrings);
  assertUsedCapacity(map,new String[]{"rt.gta","rt.sch","rt.sch.prod","rt.sch.misc"},new int[]{0,1,1,0});
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0003_m_000001_0 on tt2");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0003_r_000001_0 on tt2");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt2",expectedStrings);
  assertUsedCapacity(map,new String[]{"rt.gta","rt.sch","rt.sch.prod","rt.sch.misc"},new int[]{1,1,1,0});
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0002_m_000001_0 on tt3");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_000001_0 on tt3");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt3",expectedStrings);
  assertUsedCapacity(map,new String[]{"rt.gta","rt.sch","rt.sch.prod","rt.sch.misc"},new int[]{1,2,1,1});
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0003_m_000002_0 on tt4");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0003_r_000002_0 on tt4");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt4",expectedStrings);
  assertUsedCapacity(map,new String[]{"rt.gta","rt.sch","rt.sch.prod","rt.sch.misc"},new int[]{2,2,1,1});
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000002_0 on tt5");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000002_0 on tt5");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt5",expectedStrings);
  assertUsedCapacity(map,new String[]{"rt.gta","rt.sch","rt.sch.prod","rt.sch.misc"},new int[]{2,3,2,1});
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000003_0 on tt6");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000003_0 on tt6");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt6",expectedStrings);
  assertUsedCapacity(map,new String[]{"rt.gta","rt.sch","rt.sch.prod","rt.sch.misc"},new int[]{2,4,3,1});
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0003_m_000003_0 on tt7");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0003_r_000003_0 on tt7");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt7",expectedStrings);
  assertUsedCapacity(map,new String[]{"rt.gta","rt.sch","rt.sch.prod","rt.sch.misc"},new int[]{3,4,3,1});
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0001_m_000004_0 on tt8");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0001_r_000004_0 on tt8");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt8",expectedStrings);
  assertUsedCapacity(map,new String[]{"rt.gta","rt.sch","rt.sch.prod","rt.sch.misc"},new int[]{3,5,4,1});
  expectedStrings.clear();
  expectedStrings.put(CapacityTestUtils.MAP,"attempt_test_0002_m_000002_0 on tt9");
  expectedStrings.put(CapacityTestUtils.REDUCE,"attempt_test_0002_r_000002_0 on tt9");
  checkMultipleTaskAssignment(taskTrackerManager,scheduler,"tt9",expectedStrings);
}
