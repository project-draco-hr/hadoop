{
  startCluster(false);
  Job job=submitSleepJob(0,0,0,0,true,"u2,g1","p1" + NAME_SEPARATOR + "p11",conf);
  assertTrue("Job submitted for u2 in queue p1:p11 is not successful.",job.isSuccessful());
  job=submitSleepJob(0,0,0,0,true,"u1,g1","p1" + NAME_SEPARATOR + "p11",conf);
  assertTrue("Job submitted for u2 in queue p1:p11 is not successful.",job.isSuccessful());
  job=submitSleepJob(1,1,0,0,false,"u1,g1","p1" + NAME_SEPARATOR + "p11",conf);
  final JobConf jobConf=miniMRCluster.createJobConf();
  UserGroupInformation ugi=UserGroupInformation.createUserForTesting("u3",new String[]{"g3"});
  Cluster cluster=ugi.doAs(new PrivilegedExceptionAction<Cluster>(){
    public Cluster run() throws IOException {
      return new Cluster(jobConf);
    }
  }
);
  JobID jobID=job.getStatus().getJobID();
  JobInProgress jip=miniMRCluster.getJobTrackerRunner().getJobTracker().getJob(org.apache.hadoop.mapred.JobID.downgrade(jobID));
  miniMRCluster.getJobTrackerRunner().getJobTracker().initJob(jip);
  cluster.getJob(jobID).killJob();
  assertEquals("job submitted for u1 and queue p1:p11 is not killed.",cluster.getJob(jobID).getStatus().getState(),(State.KILLED));
}
