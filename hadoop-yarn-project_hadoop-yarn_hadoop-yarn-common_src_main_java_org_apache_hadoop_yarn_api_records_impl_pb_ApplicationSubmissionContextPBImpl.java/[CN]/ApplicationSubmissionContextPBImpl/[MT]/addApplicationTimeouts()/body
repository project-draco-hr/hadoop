{
  maybeInitBuilder();
  builder.clearApplicationTimeouts();
  if (applicationTimeouts == null) {
    return;
  }
  Iterable<? extends ApplicationTimeoutMapProto> values=new Iterable<ApplicationTimeoutMapProto>(){
    @Override public Iterator<ApplicationTimeoutMapProto> iterator(){
      return new Iterator<ApplicationTimeoutMapProto>(){
        private Iterator<ApplicationTimeoutType> iterator=applicationTimeouts.keySet().iterator();
        @Override public boolean hasNext(){
          return iterator.hasNext();
        }
        @Override public ApplicationTimeoutMapProto next(){
          ApplicationTimeoutType key=iterator.next();
          return ApplicationTimeoutMapProto.newBuilder().setTimeout(applicationTimeouts.get(key)).setApplicationTimeoutType(ProtoUtils.convertToProtoFormat(key)).build();
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
;
  this.builder.addAllApplicationTimeouts(values);
}
