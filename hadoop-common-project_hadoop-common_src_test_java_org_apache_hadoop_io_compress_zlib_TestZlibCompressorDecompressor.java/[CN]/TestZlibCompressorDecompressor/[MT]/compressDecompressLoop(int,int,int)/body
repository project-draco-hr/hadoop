{
  byte[] rawData=null;
  rawData=generate(rawDataSize);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ByteBuffer inBuf=ByteBuffer.allocateDirect(inSize);
  ByteBuffer outBuf=ByteBuffer.allocateDirect(outSize);
  ZlibCompressor compressor=new ZlibCompressor();
  ZlibDecompressor decompressor=new ZlibDecompressor();
  outBuf.clear();
  int off=0;
  int len=rawDataSize;
  int min=Math.min(inBuf.remaining(),len);
  if (min > 0) {
    inBuf.put(rawData,off,min);
  }
  inBuf.flip();
  len-=min;
  off+=min;
  while (!compressor.finished()) {
    compressor.compress(outBuf,inBuf);
    if (outBuf.remaining() == 0) {
      outBuf.flip();
      while (outBuf.remaining() > 0) {
        baos.write(outBuf.get());
      }
      outBuf.clear();
    }
    if (inBuf != null && inBuf.remaining() == 0) {
      inBuf.clear();
      if (len > 0) {
        min=Math.min(inBuf.remaining(),len);
        inBuf.put(rawData,off,min);
        inBuf.flip();
        len-=min;
        off+=min;
      }
 else {
        inBuf=null;
        compressor.finish();
      }
    }
  }
  outBuf.flip();
  if (outBuf.remaining() > 0) {
    while (outBuf.remaining() > 0) {
      baos.write(outBuf.get());
    }
    outBuf.clear();
  }
  compressor.end();
  byte[] compressed=baos.toByteArray();
  ByteBuffer expected=ByteBuffer.wrap(rawData);
  outBuf.clear();
  inBuf=ByteBuffer.allocateDirect(inSize);
  inBuf.clear();
  if (compressed.length != 0) {
    off=0;
    len=compressed.length;
    min=Math.min(inBuf.remaining(),len);
    inBuf.put(compressed,off,min);
    inBuf.flip();
    len-=min;
    off+=min;
    while (!decompressor.finished()) {
      decompressor.decompress(outBuf,inBuf);
      if (outBuf.remaining() == 0) {
        outBuf.flip();
        while (outBuf.remaining() > 0) {
          assertEquals(expected.get(),outBuf.get());
        }
        outBuf.clear();
      }
      if (inBuf != null && inBuf.remaining() == 0) {
        inBuf.clear();
        if (len > 0) {
          min=Math.min(inBuf.remaining(),len);
          inBuf.put(compressed,off,min);
          inBuf.flip();
          len-=min;
          off+=min;
        }
      }
    }
  }
  outBuf.flip();
  if (outBuf.remaining() > 0) {
    while (outBuf.remaining() > 0) {
      assertEquals(expected.get(),outBuf.get());
    }
    outBuf.clear();
  }
  assertEquals(0,expected.remaining());
}
