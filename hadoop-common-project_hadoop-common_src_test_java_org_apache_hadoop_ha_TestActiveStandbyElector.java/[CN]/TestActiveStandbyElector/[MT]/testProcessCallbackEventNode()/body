{
  mockNoPriorActive();
  elector.joinElection(data);
  elector.processResult(Code.NODEEXISTS.intValue(),ZK_LOCK_NAME,mockZK,ZK_LOCK_NAME);
  Mockito.verify(mockApp,Mockito.times(1)).becomeStandby();
  verifyExistCall(1);
  Assert.assertTrue(elector.isMonitorLockNodePending());
  Stat stat=new Stat();
  stat.setEphemeralOwner(0L);
  Mockito.when(mockZK.getSessionId()).thenReturn(1L);
  elector.processResult(Code.OK.intValue(),ZK_LOCK_NAME,mockZK,stat);
  Assert.assertFalse(elector.isMonitorLockNodePending());
  WatchedEvent mockEvent=Mockito.mock(WatchedEvent.class);
  Mockito.when(mockEvent.getPath()).thenReturn(ZK_LOCK_NAME);
  Mockito.when(mockEvent.getType()).thenReturn(Event.EventType.NodeDataChanged);
  elector.processWatchEvent(mockZK,mockEvent);
  verifyExistCall(2);
  Assert.assertTrue(elector.isMonitorLockNodePending());
  elector.processResult(Code.OK.intValue(),ZK_LOCK_NAME,mockZK,stat);
  Assert.assertFalse(elector.isMonitorLockNodePending());
  Mockito.when(mockEvent.getType()).thenReturn(Event.EventType.NodeChildrenChanged);
  elector.processWatchEvent(mockZK,mockEvent);
  verifyExistCall(3);
  Assert.assertTrue(elector.isMonitorLockNodePending());
  elector.processResult(Code.OK.intValue(),ZK_LOCK_NAME,mockZK,stat);
  Assert.assertFalse(elector.isMonitorLockNodePending());
  Mockito.when(mockEvent.getType()).thenReturn(Event.EventType.NodeDeleted);
  elector.processWatchEvent(mockZK,mockEvent);
  Mockito.verify(mockApp,Mockito.times(0)).enterNeutralMode();
  Mockito.verify(mockZK,Mockito.times(2)).create(ZK_LOCK_NAME,data,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL,elector,mockZK);
  elector.processResult(Code.OK.intValue(),ZK_LOCK_NAME,mockZK,ZK_LOCK_NAME);
  Mockito.verify(mockApp,Mockito.times(1)).becomeActive();
  verifyExistCall(4);
  Assert.assertTrue(elector.isMonitorLockNodePending());
  stat.setEphemeralOwner(1L);
  elector.processResult(Code.OK.intValue(),ZK_LOCK_NAME,mockZK,stat);
  Assert.assertFalse(elector.isMonitorLockNodePending());
  Mockito.when(mockEvent.getType()).thenReturn(Event.EventType.NodeDeleted);
  elector.processWatchEvent(mockZK,mockEvent);
  Mockito.verify(mockApp,Mockito.times(1)).enterNeutralMode();
  Mockito.verify(mockZK,Mockito.times(3)).create(ZK_LOCK_NAME,data,Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL,elector,mockZK);
  elector.processResult(Code.OK.intValue(),ZK_LOCK_NAME,mockZK,ZK_LOCK_NAME);
  Mockito.verify(mockApp,Mockito.times(2)).becomeActive();
  verifyExistCall(5);
  Assert.assertTrue(elector.isMonitorLockNodePending());
  elector.processResult(Code.OK.intValue(),ZK_LOCK_NAME,mockZK,stat);
  Assert.assertFalse(elector.isMonitorLockNodePending());
  Mockito.when(mockEvent.getPath()).thenReturn(null);
  elector.processWatchEvent(mockZK,mockEvent);
  Mockito.verify(mockApp,Mockito.times(1)).notifyFatalError("Unexpected watch error from Zookeeper");
  Assert.assertEquals(1,count);
  verifyExistCall(5);
}
