{
  JobConf job=new JobConf();
  FileSystem fs=FileSystem.getLocal(job);
  Path dir=new Path(System.getProperty("test.build.data",".") + "/mapred");
  Path outputdir=new Path(System.getProperty("test.build.data",".") + "/output");
  fs.delete(dir,true);
  fs.delete(outputdir,true);
  if (!fs.mkdirs(dir)) {
    fail("Failed to create output directory");
  }
  FileOutputFormat.setWorkOutputPath(job,dir);
  FileOutputFormat.setOutputPath(job,outputdir);
  SequenceFileAsBinaryOutputFormat.setCompressOutput(job,true);
  SequenceFileAsBinaryOutputFormat.setOutputCompressionType(job,CompressionType.BLOCK);
  try {
    new SequenceFileAsBinaryOutputFormat().checkOutputSpecs(fs,job);
  }
 catch (  Exception e) {
    fail("Block compression should be allowed for " + "SequenceFileAsBinaryOutputFormat:" + "Caught "+ e.getClass().getName());
  }
  SequenceFileAsBinaryOutputFormat.setOutputCompressionType(job,CompressionType.RECORD);
  try {
    new SequenceFileAsBinaryOutputFormat().checkOutputSpecs(fs,job);
    fail("Record compression should not be allowed for " + "SequenceFileAsBinaryOutputFormat");
  }
 catch (  InvalidJobConfException ie) {
  }
catch (  Exception e) {
    fail("Expected " + InvalidJobConfException.class.getName() + "but caught "+ e.getClass().getName());
  }
}
