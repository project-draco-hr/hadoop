{
switch (event.getType()) {
case NODE_ADDED:
    if (!(event instanceof NodeAddedSchedulerEvent)) {
      throw new RuntimeException("Unexpected event type: " + event);
    }
  NodeAddedSchedulerEvent nodeAddedEvent=(NodeAddedSchedulerEvent)event;
nodeMonitor.addNode(nodeAddedEvent.getContainerReports(),nodeAddedEvent.getAddedRMNode());
addToMapping(rackToNode,nodeAddedEvent.getAddedRMNode().getRackName(),nodeAddedEvent.getAddedRMNode().getNodeID());
addToMapping(hostToNode,nodeAddedEvent.getAddedRMNode().getHostName(),nodeAddedEvent.getAddedRMNode().getNodeID());
break;
case NODE_REMOVED:
if (!(event instanceof NodeRemovedSchedulerEvent)) {
throw new RuntimeException("Unexpected event type: " + event);
}
NodeRemovedSchedulerEvent nodeRemovedEvent=(NodeRemovedSchedulerEvent)event;
nodeMonitor.removeNode(nodeRemovedEvent.getRemovedRMNode());
removeFromMapping(rackToNode,nodeRemovedEvent.getRemovedRMNode().getRackName(),nodeRemovedEvent.getRemovedRMNode().getNodeID());
removeFromMapping(hostToNode,nodeRemovedEvent.getRemovedRMNode().getHostName(),nodeRemovedEvent.getRemovedRMNode().getNodeID());
break;
case NODE_UPDATE:
if (!(event instanceof NodeUpdateSchedulerEvent)) {
throw new RuntimeException("Unexpected event type: " + event);
}
NodeUpdateSchedulerEvent nodeUpdatedEvent=(NodeUpdateSchedulerEvent)event;
nodeMonitor.updateNode(nodeUpdatedEvent.getRMNode());
break;
case NODE_RESOURCE_UPDATE:
if (!(event instanceof NodeResourceUpdateSchedulerEvent)) {
throw new RuntimeException("Unexpected event type: " + event);
}
NodeResourceUpdateSchedulerEvent nodeResourceUpdatedEvent=(NodeResourceUpdateSchedulerEvent)event;
nodeMonitor.updateNodeResource(nodeResourceUpdatedEvent.getRMNode(),nodeResourceUpdatedEvent.getResourceOption());
break;
case APP_ADDED:
break;
case APP_REMOVED:
break;
case APP_ATTEMPT_ADDED:
break;
case APP_ATTEMPT_REMOVED:
break;
case CONTAINER_EXPIRED:
break;
case NODE_LABELS_UPDATE:
break;
default :
LOG.error("Unknown event arrived at DistributedSchedulingService: " + event.toString());
}
}
