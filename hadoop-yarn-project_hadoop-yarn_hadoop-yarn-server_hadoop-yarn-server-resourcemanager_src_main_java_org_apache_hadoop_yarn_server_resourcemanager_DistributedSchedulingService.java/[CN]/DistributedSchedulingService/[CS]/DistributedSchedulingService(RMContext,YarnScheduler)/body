{
  super(DistributedSchedulingService.class.getName(),rmContext,scheduler);
  this.k=rmContext.getYarnConfiguration().getInt(YarnConfiguration.DIST_SCHEDULING_TOP_K,YarnConfiguration.DIST_SCHEDULING_TOP_K_DEFAULT);
  long nodeSortInterval=rmContext.getYarnConfiguration().getLong(YarnConfiguration.NM_CONTAINER_QUEUING_SORTING_NODES_INTERVAL_MS,YarnConfiguration.NM_CONTAINER_QUEUING_SORTING_NODES_INTERVAL_MS_DEFAULT);
  NodeQueueLoadMonitor.LoadComparator comparator=NodeQueueLoadMonitor.LoadComparator.valueOf(rmContext.getYarnConfiguration().get(YarnConfiguration.NM_CONTAINER_QUEUING_LOAD_COMPARATOR,YarnConfiguration.NM_CONTAINER_QUEUING_LOAD_COMPARATOR_DEFAULT));
  NodeQueueLoadMonitor topKSelector=new NodeQueueLoadMonitor(nodeSortInterval,comparator);
  float sigma=rmContext.getYarnConfiguration().getFloat(YarnConfiguration.NM_CONTAINER_QUEUING_LIMIT_STDEV,YarnConfiguration.NM_CONTAINER_QUEUING_LIMIT_STDEV_DEFAULT);
  int limitMin, limitMax;
  if (comparator == NodeQueueLoadMonitor.LoadComparator.QUEUE_LENGTH) {
    limitMin=rmContext.getYarnConfiguration().getInt(YarnConfiguration.NM_CONTAINER_QUEUING_MIN_QUEUE_LENGTH,YarnConfiguration.NM_CONTAINER_QUEUING_MIN_QUEUE_LENGTH_DEFAULT);
    limitMax=rmContext.getYarnConfiguration().getInt(YarnConfiguration.NM_CONTAINER_QUEUING_MAX_QUEUE_LENGTH,YarnConfiguration.NM_CONTAINER_QUEUING_MAX_QUEUE_LENGTH_DEFAULT);
  }
 else {
    limitMin=rmContext.getYarnConfiguration().getInt(YarnConfiguration.NM_CONTAINER_QUEUING_MIN_QUEUE_WAIT_TIME_MS,YarnConfiguration.NM_CONTAINER_QUEUING_MIN_QUEUE_WAIT_TIME_MS_DEFAULT);
    limitMax=rmContext.getYarnConfiguration().getInt(YarnConfiguration.NM_CONTAINER_QUEUING_MAX_QUEUE_WAIT_TIME_MS,YarnConfiguration.NM_CONTAINER_QUEUING_MAX_QUEUE_WAIT_TIME_MS_DEFAULT);
  }
  topKSelector.initThresholdCalculator(sigma,limitMin,limitMax);
  this.nodeMonitor=topKSelector;
}
