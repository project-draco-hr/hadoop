{
  QuorumCall<AsyncLogger,Boolean> call=loggers.canRollBack(storage,prevStorage,targetLayoutVersion);
  try {
    call.waitFor(loggers.size(),loggers.size(),0,CAN_ROLL_BACK_TIMEOUT_MS,"lockSharedStorage");
    if (call.countExceptions() > 0) {
      call.rethrowException("Could not check if roll back possible for" + " one or more JournalNodes");
    }
    try {
      DFSUtil.assertAllResultsEqual(call.getResults().values());
    }
 catch (    AssertionError ae) {
      throw new IOException("Results differed for canRollBack",ae);
    }
    for (    Boolean result : call.getResults().values()) {
      return result;
    }
  }
 catch (  InterruptedException e) {
    throw new IOException("Interrupted waiting for lockSharedStorage() " + "response");
  }
catch (  TimeoutException e) {
    throw new IOException("Timed out waiting for lockSharedStorage() " + "response");
  }
  throw new AssertionError("Unreachable code.");
}
