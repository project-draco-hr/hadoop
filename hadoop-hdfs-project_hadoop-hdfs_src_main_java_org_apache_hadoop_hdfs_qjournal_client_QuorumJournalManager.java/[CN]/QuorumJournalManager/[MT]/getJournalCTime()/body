{
  QuorumCall<AsyncLogger,Long> call=loggers.getJournalCTime();
  try {
    call.waitFor(loggers.size(),loggers.size(),0,GET_JOURNAL_CTIME_TIMEOUT_MS,"getJournalCTime");
    if (call.countExceptions() > 0) {
      call.rethrowException("Could not journal CTime for one " + "more JournalNodes");
    }
    try {
      DFSUtil.assertAllResultsEqual(call.getResults().values());
    }
 catch (    AssertionError ae) {
      throw new IOException("Results differed for getJournalCTime",ae);
    }
    for (    Long result : call.getResults().values()) {
      return result;
    }
  }
 catch (  InterruptedException e) {
    throw new IOException("Interrupted waiting for getJournalCTime() " + "response");
  }
catch (  TimeoutException e) {
    throw new IOException("Timed out waiting for getJournalCTime() " + "response");
  }
  throw new AssertionError("Unreachable code.");
}
