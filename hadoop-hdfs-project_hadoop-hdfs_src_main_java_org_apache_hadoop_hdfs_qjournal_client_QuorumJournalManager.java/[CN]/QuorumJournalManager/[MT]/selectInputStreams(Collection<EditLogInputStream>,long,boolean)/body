{
  QuorumCall<AsyncLogger,RemoteEditLogManifest> q=loggers.getEditLogManifest(fromTxnId);
  Map<AsyncLogger,RemoteEditLogManifest> resps=loggers.waitForWriteQuorum(q,selectInputStreamsTimeoutMs);
  LOG.debug("selectInputStream manifests:\n" + Joiner.on("\n").withKeyValueSeparator(": ").join(resps));
  final PriorityQueue<EditLogInputStream> allStreams=new PriorityQueue<EditLogInputStream>(64,JournalSet.EDIT_LOG_INPUT_STREAM_COMPARATOR);
  for (  Map.Entry<AsyncLogger,RemoteEditLogManifest> e : resps.entrySet()) {
    AsyncLogger logger=e.getKey();
    RemoteEditLogManifest manifest=e.getValue();
    for (    RemoteEditLog remoteLog : manifest.getLogs()) {
      URL url=logger.buildURLToFetchLogs(remoteLog.getStartTxId());
      EditLogInputStream elis=EditLogFileInputStream.fromUrl(url,remoteLog.getStartTxId(),remoteLog.getEndTxId(),remoteLog.isInProgress());
      allStreams.add(elis);
    }
  }
  JournalSet.chainAndMakeRedundantStreams(streams,allStreams,fromTxnId,inProgressOk);
}
