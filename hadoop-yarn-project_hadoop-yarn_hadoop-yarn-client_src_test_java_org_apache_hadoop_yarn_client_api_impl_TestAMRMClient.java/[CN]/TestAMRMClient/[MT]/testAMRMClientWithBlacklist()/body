{
  AMRMClientImpl<ContainerRequest> amClient=null;
  try {
    amClient=(AMRMClientImpl<ContainerRequest>)AMRMClient.<ContainerRequest>createAMRMClient();
    amClient.init(conf);
    amClient.start();
    amClient.registerApplicationMaster("Host",10000,"");
    String[] nodes={"node1","node2","node3"};
    List<String> nodeList01=new ArrayList<String>();
    nodeList01.add(nodes[0]);
    nodeList01.add(nodes[1]);
    amClient.updateBlacklist(nodeList01,null);
    assertEquals(2,amClient.blacklistAdditions.size());
    assertEquals(0,amClient.blacklistRemovals.size());
    List<String> nodeList02=new ArrayList<String>();
    nodeList02.add(nodes[0]);
    nodeList02.add(nodes[2]);
    amClient.updateBlacklist(nodeList02,null);
    assertEquals(3,amClient.blacklistAdditions.size());
    assertEquals(0,amClient.blacklistRemovals.size());
    List<String> nodeList12=new ArrayList<String>();
    nodeList12.add(nodes[1]);
    nodeList12.add(nodes[2]);
    amClient.updateBlacklist(null,nodeList12);
    assertEquals(1,amClient.blacklistAdditions.size());
    assertEquals(2,amClient.blacklistRemovals.size());
    List<String> nodeList1=new ArrayList<String>();
    nodeList1.add(nodes[1]);
    amClient.updateBlacklist(nodeList1,null);
    assertEquals(2,amClient.blacklistAdditions.size());
    assertEquals(1,amClient.blacklistRemovals.size());
  }
  finally {
    if (amClient != null && amClient.getServiceState() == STATE.STARTED) {
      amClient.stop();
    }
  }
}
