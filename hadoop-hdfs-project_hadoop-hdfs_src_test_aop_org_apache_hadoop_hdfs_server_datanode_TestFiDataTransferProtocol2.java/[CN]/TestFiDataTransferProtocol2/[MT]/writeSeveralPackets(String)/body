{
  final Random r=FiTestUtil.RANDOM.get();
  final int nPackets=FiTestUtil.nextRandomInt(MIN_N_PACKET,MAX_N_PACKET + 1);
  final int lastPacketSize=FiTestUtil.nextRandomInt(1,PACKET_SIZE + 1);
  final int size=(nPackets - 1) * PACKET_SIZE + lastPacketSize;
  FiTestUtil.LOG.info("size=" + size + ", nPackets="+ nPackets+ ", lastPacketSize="+ lastPacketSize);
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION + 2).build();
  final FileSystem dfs=cluster.getFileSystem();
  try {
    final Path p=new Path("/" + methodName + "/foo");
    final FSDataOutputStream out=createFile(dfs,p);
    final long seed=r.nextLong();
    final Random ran=new Random(seed);
    ran.nextBytes(bytes);
    out.write(bytes,0,size);
    out.close();
    final FSDataInputStream in=dfs.open(p);
    int totalRead=0;
    int nRead=0;
    while ((nRead=in.read(toRead,totalRead,size - totalRead)) > 0) {
      totalRead+=nRead;
    }
    Assert.assertEquals("Cannot read file.",size,totalRead);
    for (int i=0; i < size; i++) {
      Assert.assertTrue("File content differ.",bytes[i] == toRead[i]);
    }
  }
  finally {
    dfs.close();
    cluster.shutdown();
  }
}
