{
  unpackStorage(HADOOP023_RESERVED_IMAGE,HADOOP_DFS_DIR_TXT);
  MiniDFSCluster cluster=null;
  final Configuration conf=new Configuration();
  try {
    FSImageFormat.setRenameReservedPairs(".snapshot=.user-snapshot," + ".reserved=.my-reserved");
    cluster=new MiniDFSCluster.Builder(conf).format(false).startupOption(StartupOption.UPGRADE).numDataNodes(0).build();
    DistributedFileSystem dfs=cluster.getFileSystem();
    final String[] expected=new String[]{"/.user-snapshot","/dir1","/dir1/.user-snapshot","/dir2","/dir2/.user-snapshot"};
    for (int i=0; i < 2; i++) {
      if (i == 1) {
        cluster.finalizeCluster(conf);
        cluster.restartNameNode(true);
      }
      ArrayList<Path> toList=new ArrayList<Path>();
      toList.add(new Path("/"));
      ArrayList<String> found=new ArrayList<String>();
      while (!toList.isEmpty()) {
        Path p=toList.remove(0);
        FileStatus[] statuses=dfs.listStatus(p);
        for (        FileStatus status : statuses) {
          final String path=status.getPath().toUri().getPath();
          System.out.println("Found path " + path);
          found.add(path);
          if (status.isDirectory()) {
            toList.add(status.getPath());
          }
        }
      }
      for (      String s : expected) {
        assertTrue("Did not find expected path " + s,found.contains(s));
      }
      assertEquals("Found an unexpected path while listing filesystem",found.size(),expected.length);
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
