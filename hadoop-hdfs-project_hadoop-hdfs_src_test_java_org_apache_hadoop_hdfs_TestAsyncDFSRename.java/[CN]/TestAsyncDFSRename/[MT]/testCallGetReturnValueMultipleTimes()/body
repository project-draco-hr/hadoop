{
  final short replFactor=2;
  final long blockSize=512;
  final Path renameDir=new Path("/test/testCallGetReturnValueMultipleTimes/");
  final Configuration conf=new HdfsConfiguration();
  conf.setInt(CommonConfigurationKeys.IPC_CLIENT_ASYNC_CALLS_MAX_KEY,200);
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
  cluster.waitActive();
  final DistributedFileSystem dfs=cluster.getFileSystem();
  final AsyncDistributedFileSystem adfs=dfs.getAsyncDistributedFileSystem();
  final int count=100;
  long fileLen=blockSize * 3;
  final Map<Integer,Future<Void>> returnFutures=new HashMap<Integer,Future<Void>>();
  assertTrue(dfs.mkdirs(renameDir));
  try {
    for (int i=0; i < count; i++) {
      Path src=new Path(renameDir,"src" + i);
      Path dst=new Path(renameDir,"dst" + i);
      DFSTestUtil.createFile(dfs,src,fileLen,replFactor,1);
      DFSTestUtil.createFile(dfs,dst,fileLen,replFactor,1);
      Future<Void> returnFuture=adfs.rename(src,dst,Rename.OVERWRITE);
      returnFutures.put(i,returnFuture);
    }
    for (int i=0; i < 5; i++) {
      verifyCallGetReturnValueMultipleTimes(returnFutures,count,cluster,renameDir,dfs);
    }
  }
  finally {
    if (dfs != null) {
      dfs.close();
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
