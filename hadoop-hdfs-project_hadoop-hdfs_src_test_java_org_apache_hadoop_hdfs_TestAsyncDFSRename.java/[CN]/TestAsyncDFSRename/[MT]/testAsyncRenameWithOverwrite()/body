{
  final short replFactor=2;
  final long blockSize=512;
  Configuration conf=new Configuration();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(replFactor).build();
  cluster.waitActive();
  DistributedFileSystem dfs=cluster.getFileSystem();
  AsyncDistributedFileSystem adfs=dfs.getAsyncDistributedFileSystem();
  try {
    long fileLen=blockSize * 3;
    String src="/foo/src";
    String dst="/foo/dst";
    String src2="/foo/src2";
    String dst2="/foo/dst2";
    Path srcPath=new Path(src);
    Path dstPath=new Path(dst);
    Path srcPath2=new Path(src2);
    Path dstPath2=new Path(dst2);
    DFSTestUtil.createFile(dfs,srcPath,fileLen,replFactor,1);
    DFSTestUtil.createFile(dfs,dstPath,fileLen,replFactor,1);
    DFSTestUtil.createFile(dfs,srcPath2,fileLen,replFactor,1);
    DFSTestUtil.createFile(dfs,dstPath2,fileLen,replFactor,1);
    LocatedBlocks lbs=NameNodeAdapter.getBlockLocations(cluster.getNameNode(),dst,0,fileLen);
    LocatedBlocks lbs2=NameNodeAdapter.getBlockLocations(cluster.getNameNode(),dst2,0,fileLen);
    BlockManager bm=NameNodeAdapter.getNamesystem(cluster.getNameNode()).getBlockManager();
    assertTrue(bm.getStoredBlock(lbs.getLocatedBlocks().get(0).getBlock().getLocalBlock()) != null);
    assertTrue(bm.getStoredBlock(lbs2.getLocatedBlocks().get(0).getBlock().getLocalBlock()) != null);
    Future<Void> retVal1=adfs.rename(srcPath,dstPath,Rename.OVERWRITE);
    Future<Void> retVal2=adfs.rename(srcPath2,dstPath2,Rename.OVERWRITE);
    retVal1.get();
    retVal2.get();
    assertTrue(bm.getStoredBlock(lbs.getLocatedBlocks().get(0).getBlock().getLocalBlock()) == null);
    assertTrue(bm.getStoredBlock(lbs2.getLocatedBlocks().get(0).getBlock().getLocalBlock()) == null);
    cluster.restartNameNodes();
    assertFalse(dfs.exists(srcPath));
    assertTrue(dfs.exists(dstPath));
    assertFalse(dfs.exists(srcPath2));
    assertTrue(dfs.exists(dstPath2));
  }
  finally {
    if (dfs != null) {
      dfs.close();
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
