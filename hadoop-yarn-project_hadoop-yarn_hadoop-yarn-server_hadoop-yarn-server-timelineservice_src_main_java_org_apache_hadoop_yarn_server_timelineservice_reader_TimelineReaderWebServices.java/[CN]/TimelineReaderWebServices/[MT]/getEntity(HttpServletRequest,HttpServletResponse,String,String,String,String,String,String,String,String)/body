{
  String url=req.getRequestURI() + (req.getQueryString() == null ? "" : QUERY_STRING_SEP + req.getQueryString());
  UserGroupInformation callerUGI=TimelineReaderWebServicesUtils.getUser(req);
  LOG.info("Received URL " + url + " from user "+ TimelineReaderWebServicesUtils.getUserName(callerUGI));
  long startTime=Time.monotonicNow();
  init(res);
  TimelineReaderManager timelineReaderManager=getTimelineReaderManager();
  TimelineEntity entity=null;
  String type=TimelineReaderWebServicesUtils.parseStr(entityType);
  String id=TimelineReaderWebServicesUtils.parseStr(entityId);
  try {
    entity=timelineReaderManager.getEntity(TimelineReaderWebServicesUtils.parseStr(userId),TimelineReaderWebServicesUtils.parseStr(clusterId),TimelineReaderWebServicesUtils.parseStr(flowName),TimelineReaderWebServicesUtils.parseLongStr(flowRunId),TimelineReaderWebServicesUtils.parseStr(appId),type,id,TimelineReaderWebServicesUtils.parseFieldsStr(fields,COMMA_DELIMITER));
  }
 catch (  Exception e) {
    handleException(e,url,startTime,"flowrunid");
  }
  long endTime=Time.monotonicNow();
  if (entity == null) {
    LOG.info("Processed URL " + url + " but entity not found"+ " (Took "+ (endTime - startTime)+ " ms.)");
    throw new NotFoundException("Timeline entity {id: " + id + ", type: "+ type+ " } is not found");
  }
  LOG.info("Processed URL " + url + " (Took "+ (endTime - startTime)+ " ms.)");
  return entity;
}
