{
  init(res);
  TimelineReaderManager timelineReaderManager=getTimelineReaderManager();
  UserGroupInformation callerUGI=getUser(req);
  Set<TimelineEntity> entities=null;
  try {
    entities=timelineReaderManager.getEntities(parseUser(callerUGI,userId),parseStr(clusterId),parseStr(flowId),parseLongStr(flowRunId),parseStr(appId),parseStr(entityType),parseLongStr(limit),parseLongStr(createdTimeStart),parseLongStr(createdTimeEnd),parseLongStr(modifiedTimeStart),parseLongStr(modifiedTimeEnd),parseKeyStrValuesStr(relatesTo,COMMA_DELIMITER,COLON_DELIMITER),parseKeyStrValuesStr(isRelatedTo,COMMA_DELIMITER,COLON_DELIMITER),parseKeyStrValueObj(infofilters,COMMA_DELIMITER,COLON_DELIMITER),parseKeyStrValueStr(conffilters,COMMA_DELIMITER,COLON_DELIMITER),parseValuesStr(metricfilters,COMMA_DELIMITER),parseValuesStr(eventfilters,COMMA_DELIMITER),parseFieldsStr(fields,COMMA_DELIMITER));
  }
 catch (  NumberFormatException e) {
    throw new BadRequestException("createdTime or modifiedTime start/end or limit or flowId is not" + " a numeric value.");
  }
catch (  Exception e) {
    handleException(e);
  }
  if (entities == null) {
    entities=Collections.emptySet();
  }
  return entities;
}
