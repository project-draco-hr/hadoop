{
  super.dumpTreeRecursively(out,prefix,snapshot);
  out.print(", childrenSize=" + getChildrenList(snapshot).size());
  final DirectoryWithQuotaFeature q=getDirectoryWithQuotaFeature();
  if (q != null) {
    out.print(", " + q);
  }
  if (this instanceof Snapshot.Root) {
    out.print(", snapshotId=" + snapshot);
  }
  out.println();
  if (prefix.length() >= 2) {
    prefix.setLength(prefix.length() - 2);
    prefix.append("  ");
  }
  dumpTreeRecursively(out,prefix,new Iterable<SnapshotAndINode>(){
    final Iterator<INode> i=getChildrenList(snapshot).iterator();
    @Override public Iterator<SnapshotAndINode> iterator(){
      return new Iterator<SnapshotAndINode>(){
        @Override public boolean hasNext(){
          return i.hasNext();
        }
        @Override public SnapshotAndINode next(){
          return new SnapshotAndINode(snapshot,i.next());
        }
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
      }
;
    }
  }
);
  final DirectorySnapshottableFeature s=getDirectorySnapshottableFeature();
  if (s != null) {
    s.dumpTreeRecursively(this,out,prefix,snapshot);
  }
}
