{
  Options opts=new Options();
  opts.addOption(STATUS_CMD,true,"Prints the status of the application.");
  if (args.length > 0 && args[0].compareToIgnoreCase(APPLICATION_ATTEMPT) == 0) {
    opts.addOption(LIST_CMD,true,"List application attempts for aplication from AHS. ");
  }
 else   if (args.length > 0 && args[0].compareToIgnoreCase("container") == 0) {
    opts.addOption(LIST_CMD,true,"List containers for application attempts from AHS. ");
  }
 else {
    opts.addOption(LIST_CMD,false,"List applications from the RM. " + "Supports optional use of -appTypes to filter applications " + "based on application type, "+ "and -appStates to filter applications based on application state");
  }
  opts.addOption(KILL_CMD,true,"Kills the application.");
  opts.addOption(MOVE_TO_QUEUE_CMD,true,"Moves the application to a " + "different queue.");
  opts.addOption(QUEUE_CMD,true,"Works with the movetoqueue command to" + " specify which queue to move an application to.");
  opts.addOption(HELP_CMD,false,"Displays help for all commands.");
  Option appTypeOpt=new Option(APP_TYPE_CMD,true,"Works with -list to " + "filter applications based on " + "input comma-separated list of application types.");
  appTypeOpt.setValueSeparator(',');
  appTypeOpt.setArgs(Option.UNLIMITED_VALUES);
  appTypeOpt.setArgName("Types");
  opts.addOption(appTypeOpt);
  Option appStateOpt=new Option(APP_STATE_CMD,true,"Works with -list " + "to filter applications based on input comma-separated list of " + "application states. "+ getAllValidApplicationStates());
  appStateOpt.setValueSeparator(',');
  appStateOpt.setArgs(Option.UNLIMITED_VALUES);
  appStateOpt.setArgName("States");
  opts.addOption(appStateOpt);
  opts.getOption(KILL_CMD).setArgName("Application ID");
  opts.getOption(MOVE_TO_QUEUE_CMD).setArgName("Application ID");
  opts.getOption(QUEUE_CMD).setArgName("Queue Name");
  opts.getOption(STATUS_CMD).setArgName("Application ID");
  int exitCode=-1;
  CommandLine cliParser=null;
  try {
    cliParser=new GnuParser().parse(opts,args);
  }
 catch (  MissingArgumentException ex) {
    sysout.println("Missing argument for options");
    printUsage(opts);
    return exitCode;
  }
  if (cliParser.hasOption(STATUS_CMD)) {
    if ((args[0].compareToIgnoreCase(APPLICATION) == 0) || (args[0].compareToIgnoreCase(APPLICATION_ATTEMPT) == 0) || (args[0].compareToIgnoreCase(CONTAINER) == 0)) {
      if (args.length != 3) {
        printUsage(opts);
        return exitCode;
      }
    }
 else     if (args.length != 2) {
      printUsage(opts);
      return exitCode;
    }
    if (args[0].compareToIgnoreCase(APPLICATION_ATTEMPT) == 0) {
      printApplicationAttemptReport(cliParser.getOptionValue(STATUS_CMD));
    }
 else     if (args[0].compareToIgnoreCase(CONTAINER) == 0) {
      printContainerReport(cliParser.getOptionValue(STATUS_CMD));
    }
 else {
      printApplicationReport(cliParser.getOptionValue(STATUS_CMD));
    }
  }
 else   if (cliParser.hasOption(LIST_CMD)) {
    if (args[0].compareToIgnoreCase(APPLICATION_ATTEMPT) == 0) {
      if (args.length != 3) {
        printUsage(opts);
        return exitCode;
      }
      listApplicationAttempts(cliParser.getOptionValue(LIST_CMD));
    }
 else     if (args[0].compareToIgnoreCase(CONTAINER) == 0) {
      if (args.length != 3) {
        printUsage(opts);
        return exitCode;
      }
      listContainers(cliParser.getOptionValue(LIST_CMD));
    }
 else {
      allAppStates=false;
      Set<String> appTypes=new HashSet<String>();
      if (cliParser.hasOption(APP_TYPE_CMD)) {
        String[] types=cliParser.getOptionValues(APP_TYPE_CMD);
        if (types != null) {
          for (          String type : types) {
            if (!type.trim().isEmpty()) {
              appTypes.add(type.toUpperCase().trim());
            }
          }
        }
      }
      EnumSet<YarnApplicationState> appStates=EnumSet.noneOf(YarnApplicationState.class);
      if (cliParser.hasOption(APP_STATE_CMD)) {
        String[] states=cliParser.getOptionValues(APP_STATE_CMD);
        if (states != null) {
          for (          String state : states) {
            if (!state.trim().isEmpty()) {
              if (state.trim().equalsIgnoreCase(ALLSTATES_OPTION)) {
                allAppStates=true;
                break;
              }
              try {
                appStates.add(YarnApplicationState.valueOf(state.toUpperCase().trim()));
              }
 catch (              IllegalArgumentException ex) {
                sysout.println("The application state " + state + " is invalid.");
                sysout.println(getAllValidApplicationStates());
                return exitCode;
              }
            }
          }
        }
      }
      listApplications(appTypes,appStates);
    }
  }
 else   if (cliParser.hasOption(KILL_CMD)) {
    if (args.length != 3) {
      printUsage(opts);
      return exitCode;
    }
    try {
      killApplication(cliParser.getOptionValue(KILL_CMD));
    }
 catch (    ApplicationNotFoundException e) {
      return exitCode;
    }
  }
 else   if (cliParser.hasOption(MOVE_TO_QUEUE_CMD)) {
    if (!cliParser.hasOption(QUEUE_CMD)) {
      printUsage(opts);
      return exitCode;
    }
    moveApplicationAcrossQueues(cliParser.getOptionValue(MOVE_TO_QUEUE_CMD),cliParser.getOptionValue(QUEUE_CMD));
  }
 else   if (cliParser.hasOption(HELP_CMD)) {
    printUsage(opts);
    return 0;
  }
 else {
    syserr.println("Invalid Command Usage : ");
    printUsage(opts);
  }
  return 0;
}
