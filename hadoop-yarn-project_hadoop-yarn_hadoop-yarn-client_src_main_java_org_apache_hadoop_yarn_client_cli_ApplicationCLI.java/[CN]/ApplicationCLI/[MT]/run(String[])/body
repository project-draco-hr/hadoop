{
  Options opts=new Options();
  String title=null;
  if (args.length > 0 && args[0].equalsIgnoreCase(APPLICATION)) {
    title=APPLICATION;
    opts.addOption(STATUS_CMD,true,"Prints the status of the application.");
    opts.addOption(LIST_CMD,false,"List applications. " + "Supports optional use of -appTypes to filter applications " + "based on application type, "+ "and -appStates to filter applications based on application state.");
    opts.addOption(KILL_CMD,true,"Kills the application.");
    opts.addOption(MOVE_TO_QUEUE_CMD,true,"Moves the application to a " + "different queue.");
    opts.addOption(QUEUE_CMD,true,"Works with the movetoqueue command to" + " specify which queue to move an application to.");
    opts.addOption(HELP_CMD,false,"Displays help for all commands.");
    Option appTypeOpt=new Option(APP_TYPE_CMD,true,"Works with -list to " + "filter applications based on " + "input comma-separated list of application types.");
    appTypeOpt.setValueSeparator(',');
    appTypeOpt.setArgs(Option.UNLIMITED_VALUES);
    appTypeOpt.setArgName("Types");
    opts.addOption(appTypeOpt);
    Option appStateOpt=new Option(APP_STATE_CMD,true,"Works with -list " + "to filter applications based on input comma-separated list of " + "application states. "+ getAllValidApplicationStates());
    appStateOpt.setValueSeparator(',');
    appStateOpt.setArgs(Option.UNLIMITED_VALUES);
    appStateOpt.setArgName("States");
    opts.addOption(appStateOpt);
    opts.addOption(APP_ID,true,"Specify Application Id to be operated");
    opts.addOption(UPDATE_PRIORITY,true,"update priority of an application. ApplicationId can be" + " passed using 'appId' option.");
    opts.getOption(KILL_CMD).setArgName("Application ID");
    opts.getOption(MOVE_TO_QUEUE_CMD).setArgName("Application ID");
    opts.getOption(QUEUE_CMD).setArgName("Queue Name");
    opts.getOption(STATUS_CMD).setArgName("Application ID");
    opts.getOption(APP_ID).setArgName("Application ID");
    opts.getOption(UPDATE_PRIORITY).setArgName("Priority");
  }
 else   if (args.length > 0 && args[0].equalsIgnoreCase(APPLICATION_ATTEMPT)) {
    title=APPLICATION_ATTEMPT;
    opts.addOption(STATUS_CMD,true,"Prints the status of the application attempt.");
    opts.addOption(LIST_CMD,true,"List application attempts for aplication.");
    opts.addOption(HELP_CMD,false,"Displays help for all commands.");
    opts.getOption(STATUS_CMD).setArgName("Application Attempt ID");
    opts.getOption(LIST_CMD).setArgName("Application ID");
  }
 else   if (args.length > 0 && args[0].equalsIgnoreCase(CONTAINER)) {
    title=CONTAINER;
    opts.addOption(STATUS_CMD,true,"Prints the status of the container.");
    opts.addOption(LIST_CMD,true,"List containers for application attempt.");
    opts.addOption(HELP_CMD,false,"Displays help for all commands.");
    opts.getOption(STATUS_CMD).setArgName("Container ID");
    opts.getOption(LIST_CMD).setArgName("Application Attempt ID");
    opts.addOption(SIGNAL_CMD,true,"Signal the container. The available signal commands are " + java.util.Arrays.asList(SignalContainerCommand.values()) + " Default command is OUTPUT_THREAD_DUMP.");
    opts.getOption(SIGNAL_CMD).setArgName("container ID [signal command]");
    opts.getOption(SIGNAL_CMD).setArgs(3);
  }
  int exitCode=-1;
  CommandLine cliParser=null;
  try {
    cliParser=new GnuParser().parse(opts,args);
  }
 catch (  MissingArgumentException ex) {
    sysout.println("Missing argument for options");
    printUsage(title,opts);
    return exitCode;
  }
  if (cliParser.hasOption(STATUS_CMD)) {
    if (args.length != 3) {
      printUsage(title,opts);
      return exitCode;
    }
    if (args[0].equalsIgnoreCase(APPLICATION)) {
      exitCode=printApplicationReport(cliParser.getOptionValue(STATUS_CMD));
    }
 else     if (args[0].equalsIgnoreCase(APPLICATION_ATTEMPT)) {
      exitCode=printApplicationAttemptReport(cliParser.getOptionValue(STATUS_CMD));
    }
 else     if (args[0].equalsIgnoreCase(CONTAINER)) {
      exitCode=printContainerReport(cliParser.getOptionValue(STATUS_CMD));
    }
    return exitCode;
  }
 else   if (cliParser.hasOption(LIST_CMD)) {
    if (args[0].equalsIgnoreCase(APPLICATION)) {
      allAppStates=false;
      Set<String> appTypes=new HashSet<String>();
      if (cliParser.hasOption(APP_TYPE_CMD)) {
        String[] types=cliParser.getOptionValues(APP_TYPE_CMD);
        if (types != null) {
          for (          String type : types) {
            if (!type.trim().isEmpty()) {
              appTypes.add(StringUtils.toUpperCase(type).trim());
            }
          }
        }
      }
      EnumSet<YarnApplicationState> appStates=EnumSet.noneOf(YarnApplicationState.class);
      if (cliParser.hasOption(APP_STATE_CMD)) {
        String[] states=cliParser.getOptionValues(APP_STATE_CMD);
        if (states != null) {
          for (          String state : states) {
            if (!state.trim().isEmpty()) {
              if (state.trim().equalsIgnoreCase(ALLSTATES_OPTION)) {
                allAppStates=true;
                break;
              }
              try {
                appStates.add(YarnApplicationState.valueOf(StringUtils.toUpperCase(state).trim()));
              }
 catch (              IllegalArgumentException ex) {
                sysout.println("The application state " + state + " is invalid.");
                sysout.println(getAllValidApplicationStates());
                return exitCode;
              }
            }
          }
        }
      }
      listApplications(appTypes,appStates);
    }
 else     if (args[0].equalsIgnoreCase(APPLICATION_ATTEMPT)) {
      if (args.length != 3) {
        printUsage(title,opts);
        return exitCode;
      }
      listApplicationAttempts(cliParser.getOptionValue(LIST_CMD));
    }
 else     if (args[0].equalsIgnoreCase(CONTAINER)) {
      if (args.length != 3) {
        printUsage(title,opts);
        return exitCode;
      }
      listContainers(cliParser.getOptionValue(LIST_CMD));
    }
  }
 else   if (cliParser.hasOption(KILL_CMD)) {
    if (args.length != 3) {
      printUsage(title,opts);
      return exitCode;
    }
    try {
      killApplication(cliParser.getOptionValue(KILL_CMD));
    }
 catch (    ApplicationNotFoundException e) {
      return exitCode;
    }
  }
 else   if (cliParser.hasOption(MOVE_TO_QUEUE_CMD)) {
    if (!cliParser.hasOption(QUEUE_CMD)) {
      printUsage(title,opts);
      return exitCode;
    }
    moveApplicationAcrossQueues(cliParser.getOptionValue(MOVE_TO_QUEUE_CMD),cliParser.getOptionValue(QUEUE_CMD));
  }
 else   if (cliParser.hasOption(HELP_CMD)) {
    printUsage(title,opts);
    return 0;
  }
 else   if (cliParser.hasOption(UPDATE_PRIORITY)) {
    if (!cliParser.hasOption(APP_ID)) {
      printUsage(title,opts);
      return exitCode;
    }
    updateApplicationPriority(cliParser.getOptionValue(APP_ID),cliParser.getOptionValue(UPDATE_PRIORITY));
  }
 else   if (cliParser.hasOption(SIGNAL_CMD)) {
    if (args.length < 3 || args.length > 4) {
      printUsage(title,opts);
      return exitCode;
    }
    final String[] signalArgs=cliParser.getOptionValues(SIGNAL_CMD);
    final String containerId=signalArgs[0];
    SignalContainerCommand command=SignalContainerCommand.OUTPUT_THREAD_DUMP;
    if (signalArgs.length == 2) {
      command=SignalContainerCommand.valueOf(signalArgs[1]);
    }
    signalContainer(containerId,command);
  }
 else {
    syserr.println("Invalid Command Usage : ");
    printUsage(title,opts);
  }
  return 0;
}
