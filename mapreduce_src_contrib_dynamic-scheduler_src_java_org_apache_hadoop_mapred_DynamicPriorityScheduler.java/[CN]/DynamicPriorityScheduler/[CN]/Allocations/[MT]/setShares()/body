{
  Map<String,QueueAllocation> shares=new HashMap<String,QueueAllocation>();
  for (  BudgetQueue queue : store.getQueues()) {
    float spending=queue.spending;
    if (queue.budget < (queue.spending * queue.used) || (queue.used == 0 && queue.pending == 0)) {
      spending=0.0f;
    }
 else {
      queue.addBudget(-(queue.spending * queue.used));
    }
    float queueShare=0.0f;
    if (totalSpending > 0.0f) {
      queueShare=(spending / totalSpending);
    }
    queueInfo.put(queue.name,"<budget>" + Float.toString(queue.budget) + "</budget>\n<spending>"+ Float.toString(spending)+ "</spending>\n<share>"+ Float.toString(queueShare)+ "</share>\n<used>"+ Integer.toString(queue.used)+ "</used>\n<pending>"+ Integer.toString(queue.pending)+ "</pending>\n");
    shares.put(queue.name,new QueueAllocation(queue.name,queueShare));
  }
  setAllocation(shares);
}
