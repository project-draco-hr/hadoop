{
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build();
  cluster.waitActive();
  final DistributedFileSystem fs=cluster.getFileSystem();
  try {
    final Path dir=new Path("/testSetStoragePolicy");
    final Path fooFile=new Path(dir,"foo");
    final Path barDir=new Path(dir,"bar");
    final Path barFile1=new Path(barDir,"f1");
    final Path barFile2=new Path(barDir,"f2");
    DFSTestUtil.createFile(fs,fooFile,FILE_LEN,REPLICATION,0L);
    DFSTestUtil.createFile(fs,barFile1,FILE_LEN,REPLICATION,0L);
    DFSTestUtil.createFile(fs,barFile2,FILE_LEN,REPLICATION,0L);
    final String invalidPolicyName="INVALID-POLICY";
    try {
      fs.setStoragePolicy(fooFile,invalidPolicyName);
      Assert.fail("Should throw a HadoopIllegalArgumentException");
    }
 catch (    RemoteException e) {
      GenericTestUtils.assertExceptionContains(invalidPolicyName,e);
    }
    HdfsFileStatus[] dirList=fs.getClient().listPaths(dir.toString(),HdfsFileStatus.EMPTY_NAME,true).getPartialListing();
    HdfsFileStatus[] barList=fs.getClient().listPaths(barDir.toString(),HdfsFileStatus.EMPTY_NAME,true).getPartialListing();
    checkDirectoryListing(dirList,ID_UNSPECIFIED,ID_UNSPECIFIED);
    checkDirectoryListing(barList,ID_UNSPECIFIED,ID_UNSPECIFIED);
    final Path invalidPath=new Path("/invalidPath");
    try {
      fs.setStoragePolicy(invalidPath,HdfsConstants.WARM_STORAGE_POLICY_NAME);
      Assert.fail("Should throw a FileNotFoundException");
    }
 catch (    FileNotFoundException e) {
      GenericTestUtils.assertExceptionContains(invalidPath.toString(),e);
    }
    fs.setStoragePolicy(fooFile,HdfsConstants.COLD_STORAGE_POLICY_NAME);
    fs.setStoragePolicy(barDir,HdfsConstants.WARM_STORAGE_POLICY_NAME);
    fs.setStoragePolicy(barFile2,HdfsConstants.HOT_STORAGE_POLICY_NAME);
    dirList=fs.getClient().listPaths(dir.toString(),HdfsFileStatus.EMPTY_NAME).getPartialListing();
    barList=fs.getClient().listPaths(barDir.toString(),HdfsFileStatus.EMPTY_NAME).getPartialListing();
    checkDirectoryListing(dirList,WARM,COLD);
    checkDirectoryListing(barList,WARM,HOT);
    cluster.restartNameNode(true);
    dirList=fs.getClient().listPaths(dir.toString(),HdfsFileStatus.EMPTY_NAME,true).getPartialListing();
    barList=fs.getClient().listPaths(barDir.toString(),HdfsFileStatus.EMPTY_NAME,true).getPartialListing();
    checkDirectoryListing(dirList,WARM,COLD);
    checkDirectoryListing(barList,WARM,HOT);
    fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
    fs.saveNamespace();
    fs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
    cluster.restartNameNode(true);
    dirList=fs.getClient().listPaths(dir.toString(),HdfsFileStatus.EMPTY_NAME).getPartialListing();
    barList=fs.getClient().listPaths(barDir.toString(),HdfsFileStatus.EMPTY_NAME).getPartialListing();
    checkDirectoryListing(dirList,WARM,COLD);
    checkDirectoryListing(barList,WARM,HOT);
  }
  finally {
    cluster.shutdown();
  }
}
