{
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build();
  cluster.waitActive();
  FSDirectory fsdir=cluster.getNamesystem().getFSDirectory();
  final DistributedFileSystem fs=cluster.getFileSystem();
  try {
    final Path dir=new Path("/testSetStoragePolicy");
    final Path fooFile=new Path(dir,"foo");
    final Path barDir=new Path(dir,"bar");
    final Path barFile1=new Path(barDir,"f1");
    final Path barFile2=new Path(barDir,"f2");
    DFSTestUtil.createFile(fs,fooFile,FILE_LEN,REPLICATION,0L);
    DFSTestUtil.createFile(fs,barFile1,FILE_LEN,REPLICATION,0L);
    DFSTestUtil.createFile(fs,barFile2,FILE_LEN,REPLICATION,0L);
    final String invalidPolicyName="INVALID-POLICY";
    try {
      fs.setStoragePolicy(fooFile,invalidPolicyName);
      Assert.fail("Should throw a HadoopIllegalArgumentException");
    }
 catch (    RemoteException e) {
      GenericTestUtils.assertExceptionContains(invalidPolicyName,e);
    }
    INodeFile fooFileNode=fsdir.getINode4Write(fooFile.toString()).asFile();
    INodeFile barFile1Node=fsdir.getINode4Write(barFile1.toString()).asFile();
    INodeFile barFile2Node=fsdir.getINode4Write(barFile2.toString()).asFile();
    final Path invalidPath=new Path("/invalidPath");
    try {
      fs.setStoragePolicy(invalidPath,"WARM");
      Assert.fail("Should throw a FileNotFoundException");
    }
 catch (    FileNotFoundException e) {
      GenericTestUtils.assertExceptionContains(invalidPath.toString(),e);
    }
    fs.setStoragePolicy(fooFile,"COLD");
    fs.setStoragePolicy(barFile1,"WARM");
    fs.setStoragePolicy(barFile2,"WARM");
    Assert.assertEquals(COLD,fooFileNode.getStoragePolicyID());
    Assert.assertEquals(WARM,barFile1Node.getStoragePolicyID());
    Assert.assertEquals(WARM,barFile2Node.getStoragePolicyID());
    cluster.restartNameNode(true);
    fsdir=cluster.getNamesystem().getFSDirectory();
    fooFileNode=fsdir.getINode4Write(fooFile.toString()).asFile();
    Assert.assertEquals(COLD,fooFileNode.getStoragePolicyID());
    barFile1Node=fsdir.getINode4Write(barFile1.toString()).asFile();
    Assert.assertEquals(WARM,barFile1Node.getStoragePolicyID());
    barFile2Node=fsdir.getINode4Write(barFile2.toString()).asFile();
    Assert.assertEquals(WARM,barFile2Node.getStoragePolicyID());
    fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER);
    fs.saveNamespace();
    fs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE);
    cluster.restartNameNode(true);
    fsdir=cluster.getNamesystem().getFSDirectory();
    fooFileNode=fsdir.getINode4Write(fooFile.toString()).asFile();
    Assert.assertEquals(COLD,fooFileNode.getStoragePolicyID());
    barFile1Node=fsdir.getINode4Write(barFile1.toString()).asFile();
    Assert.assertEquals(WARM,barFile1Node.getStoragePolicyID());
    barFile2Node=fsdir.getINode4Write(barFile2.toString()).asFile();
    Assert.assertEquals(WARM,barFile2Node.getStoragePolicyID());
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
