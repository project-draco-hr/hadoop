{
  BlockStoragePolicy policy1=new BlockStoragePolicy((byte)9,"TEST1",new StorageType[]{StorageType.SSD,StorageType.DISK,StorageType.ARCHIVE},new StorageType[]{},new StorageType[]{});
  BlockStoragePolicy policy2=new BlockStoragePolicy((byte)11,"TEST2",new StorageType[]{StorageType.DISK,StorageType.SSD,StorageType.ARCHIVE},new StorageType[]{},new StorageType[]{});
  final String[] racks={"/d1/r1","/d1/r2","/d1/r2"};
  final String[] hosts={"host1","host2","host3"};
  final StorageType[] types={StorageType.DISK,StorageType.SSD,StorageType.ARCHIVE};
  final DatanodeStorageInfo[] storages=DFSTestUtil.createDatanodeStorageInfos(3,racks,hosts,types);
  final DatanodeDescriptor[] dataNodes=DFSTestUtil.toDatanodeDescriptor(storages);
  FileSystem.setDefaultUri(conf,"hdfs://localhost:0");
  conf.set(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY,"0.0.0.0:0");
  File baseDir=PathUtils.getTestDir(TestReplicationPolicy.class);
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,new File(baseDir,"name").getPath());
  DFSTestUtil.formatNameNode(conf);
  NameNode namenode=new NameNode(conf);
  final BlockManager bm=namenode.getNamesystem().getBlockManager();
  BlockPlacementPolicy replicator=bm.getBlockPlacementPolicy();
  NetworkTopology cluster=bm.getDatanodeManager().getNetworkTopology();
  for (  DatanodeDescriptor datanode : dataNodes) {
    cluster.add(datanode);
  }
  DatanodeStorageInfo[] targets=replicator.chooseTarget("/foo",3,dataNodes[0],Collections.<DatanodeStorageInfo>emptyList(),false,new HashSet<Node>(),0,policy1,null);
  System.out.println(Arrays.asList(targets));
  Assert.assertEquals(3,targets.length);
  targets=replicator.chooseTarget("/foo",3,dataNodes[0],Collections.<DatanodeStorageInfo>emptyList(),false,new HashSet<Node>(),0,policy2,null);
  System.out.println(Arrays.asList(targets));
  Assert.assertEquals(3,targets.length);
}
