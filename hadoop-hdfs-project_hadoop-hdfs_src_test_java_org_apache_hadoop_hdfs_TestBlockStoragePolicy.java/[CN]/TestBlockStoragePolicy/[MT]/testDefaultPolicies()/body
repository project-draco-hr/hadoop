{
  final Map<Byte,String> expectedPolicyStrings=new HashMap<Byte,String>();
  expectedPolicyStrings.put(COLD,"BlockStoragePolicy{COLD:" + COLD + ", storageTypes=[ARCHIVE], "+ "creationFallbacks=[], replicationFallbacks=[]}");
  expectedPolicyStrings.put(WARM,"BlockStoragePolicy{WARM:" + WARM + ", storageTypes=[DISK, ARCHIVE], "+ "creationFallbacks=[DISK, ARCHIVE], "+ "replicationFallbacks=[DISK, ARCHIVE]}");
  expectedPolicyStrings.put(HOT,"BlockStoragePolicy{HOT:" + HOT + ", storageTypes=[DISK], "+ "creationFallbacks=[], replicationFallbacks=[ARCHIVE]}");
  expectedPolicyStrings.put(LAZY_PERSIST,"BlockStoragePolicy{LAZY_PERSIST:" + LAZY_PERSIST + ", storageTypes=[RAM_DISK, DISK], "+ "creationFallbacks=[DISK], replicationFallbacks=[DISK]}");
  expectedPolicyStrings.put(ONESSD,"BlockStoragePolicy{ONE_SSD:" + ONESSD + ", storageTypes=[SSD, DISK], creationFallbacks=[SSD, DISK], "+ "replicationFallbacks=[SSD, DISK]}");
  expectedPolicyStrings.put(ALLSSD,"BlockStoragePolicy{ALL_SSD:" + ALLSSD + ", storageTypes=[SSD], creationFallbacks=[DISK], "+ "replicationFallbacks=[DISK]}");
  for (byte i=1; i < 16; i++) {
    final BlockStoragePolicy policy=POLICY_SUITE.getPolicy(i);
    if (policy != null) {
      final String s=policy.toString();
      Assert.assertEquals(expectedPolicyStrings.get(i),s);
    }
  }
  Assert.assertEquals(POLICY_SUITE.getPolicy(HOT),POLICY_SUITE.getDefaultPolicy());
{
    final BlockStoragePolicy cold=POLICY_SUITE.getPolicy(COLD);
    for (short replication=1; replication < 6; replication++) {
      final List<StorageType> computed=cold.chooseStorageTypes(replication);
      assertStorageType(computed,replication,StorageType.ARCHIVE);
    }
    assertCreationFallback(cold,null,null,null,null,null);
    assertReplicationFallback(cold,null,null,null,null);
  }
{
    final BlockStoragePolicy warm=POLICY_SUITE.getPolicy(WARM);
    for (short replication=1; replication < 6; replication++) {
      final List<StorageType> computed=warm.chooseStorageTypes(replication);
      assertStorageType(computed,replication,StorageType.DISK,StorageType.ARCHIVE);
    }
    assertCreationFallback(warm,StorageType.DISK,StorageType.DISK,StorageType.ARCHIVE,StorageType.DISK,null);
    assertReplicationFallback(warm,StorageType.DISK,StorageType.DISK,StorageType.ARCHIVE,StorageType.DISK);
  }
{
    final BlockStoragePolicy hot=POLICY_SUITE.getPolicy(HOT);
    for (short replication=1; replication < 6; replication++) {
      final List<StorageType> computed=hot.chooseStorageTypes(replication);
      assertStorageType(computed,replication,StorageType.DISK);
    }
    assertCreationFallback(hot,null,null,null,null,null);
    assertReplicationFallback(hot,StorageType.ARCHIVE,null,StorageType.ARCHIVE,StorageType.ARCHIVE);
  }
{
    final BlockStoragePolicy onessd=POLICY_SUITE.getPolicy(ONESSD);
    for (short replication=1; replication < 6; replication++) {
      final List<StorageType> computed=onessd.chooseStorageTypes(replication);
      assertStorageType(computed,replication,StorageType.SSD,StorageType.DISK);
    }
    assertCreationFallback(onessd,StorageType.SSD,StorageType.SSD,StorageType.SSD,StorageType.DISK,StorageType.SSD);
    assertReplicationFallback(onessd,StorageType.SSD,StorageType.SSD,StorageType.SSD,StorageType.DISK);
  }
{
    final BlockStoragePolicy allssd=POLICY_SUITE.getPolicy(ALLSSD);
    for (short replication=1; replication < 6; replication++) {
      final List<StorageType> computed=allssd.chooseStorageTypes(replication);
      assertStorageType(computed,replication,StorageType.SSD);
    }
    assertCreationFallback(allssd,StorageType.DISK,StorageType.DISK,null,StorageType.DISK,null);
    assertReplicationFallback(allssd,StorageType.DISK,StorageType.DISK,null,StorageType.DISK);
  }
{
    final BlockStoragePolicy lazyPersist=POLICY_SUITE.getPolicy(LAZY_PERSIST);
    for (short replication=1; replication < 6; replication++) {
      final List<StorageType> computed=lazyPersist.chooseStorageTypes(replication);
      assertStorageType(computed,replication,StorageType.DISK);
    }
    assertCreationFallback(lazyPersist,StorageType.DISK,StorageType.DISK,null,StorageType.DISK,null);
    assertReplicationFallback(lazyPersist,StorageType.DISK,StorageType.DISK,null,StorageType.DISK);
  }
}
