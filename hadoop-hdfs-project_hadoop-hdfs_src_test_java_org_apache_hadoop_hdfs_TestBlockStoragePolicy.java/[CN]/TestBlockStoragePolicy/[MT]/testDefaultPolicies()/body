{
  final Map<Byte,String> expectedPolicyStrings=new HashMap<Byte,String>();
  expectedPolicyStrings.put(COLD,"BlockStoragePolicy{COLD:4, storageTypes=[ARCHIVE], " + "creationFallbacks=[], replicationFallbacks=[]}");
  expectedPolicyStrings.put(WARM,"BlockStoragePolicy{WARM:8, storageTypes=[DISK, ARCHIVE], " + "creationFallbacks=[DISK, ARCHIVE], replicationFallbacks=[DISK, ARCHIVE]}");
  expectedPolicyStrings.put(HOT,"BlockStoragePolicy{HOT:12, storageTypes=[DISK], " + "creationFallbacks=[], replicationFallbacks=[ARCHIVE]}");
  for (byte i=1; i < 16; i++) {
    final BlockStoragePolicy policy=POLICY_SUITE.getPolicy(i);
    if (policy != null) {
      final String s=policy.toString();
      Assert.assertEquals(expectedPolicyStrings.get(i),s);
    }
  }
  Assert.assertEquals(POLICY_SUITE.getPolicy(HOT),POLICY_SUITE.getDefaultPolicy());
{
    final BlockStoragePolicy cold=POLICY_SUITE.getPolicy(COLD);
    for (short replication=1; replication < 6; replication++) {
      final List<StorageType> computed=cold.chooseStorageTypes(replication);
      assertStorageType(computed,replication,StorageType.ARCHIVE);
    }
    assertCreationFallback(cold,null,null,null);
    assertReplicationFallback(cold,null,null,null);
  }
{
    final BlockStoragePolicy warm=POLICY_SUITE.getPolicy(WARM);
    for (short replication=1; replication < 6; replication++) {
      final List<StorageType> computed=warm.chooseStorageTypes(replication);
      assertStorageType(computed,replication,StorageType.DISK,StorageType.ARCHIVE);
    }
    assertCreationFallback(warm,StorageType.DISK,StorageType.DISK,StorageType.ARCHIVE);
    assertReplicationFallback(warm,StorageType.DISK,StorageType.DISK,StorageType.ARCHIVE);
  }
{
    final BlockStoragePolicy hot=POLICY_SUITE.getPolicy(HOT);
    for (short replication=1; replication < 6; replication++) {
      final List<StorageType> computed=hot.chooseStorageTypes(replication);
      assertStorageType(computed,replication,StorageType.DISK);
    }
    assertCreationFallback(hot,null,null,null);
    assertReplicationFallback(hot,StorageType.ARCHIVE,null,StorageType.ARCHIVE);
  }
}
