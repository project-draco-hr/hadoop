{
  final int numDataNodes=5;
  final StorageType[][] types=genStorageTypes(numDataNodes);
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).storageTypes(types).build();
  cluster.waitActive();
  final DistributedFileSystem fs=cluster.getFileSystem();
  try {
    final Path dir=new Path("/test");
    fs.mkdirs(dir);
    fs.setStoragePolicy(dir,policyName);
    final Path foo=new Path(dir,"foo");
    DFSTestUtil.createFile(fs,foo,FILE_LEN,REPLICATION,0L);
    HdfsFileStatus[] status=fs.getClient().listPaths(foo.toString(),HdfsFileStatus.EMPTY_NAME,true).getPartialListing();
    checkDirectoryListing(status,policyId);
    HdfsLocatedFileStatus fooStatus=(HdfsLocatedFileStatus)status[0];
    checkLocatedBlocks(fooStatus,1,3,before);
    fs.setReplication(foo,(short)numDataNodes);
    Thread.sleep(1000);
    for (    DataNode dn : cluster.getDataNodes()) {
      DataNodeTestUtils.triggerHeartbeat(dn);
    }
    Thread.sleep(1000);
    status=fs.getClient().listPaths(foo.toString(),HdfsFileStatus.EMPTY_NAME,true).getPartialListing();
    checkDirectoryListing(status,policyId);
    fooStatus=(HdfsLocatedFileStatus)status[0];
    checkLocatedBlocks(fooStatus,1,5,after);
  }
  finally {
    cluster.shutdown();
  }
}
