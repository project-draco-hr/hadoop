{
  final BlockStoragePolicy hot=POLICY_SUITE.getPolicy(HOT);
  final BlockStoragePolicy warm=POLICY_SUITE.getPolicy(WARM);
  final BlockStoragePolicy cold=POLICY_SUITE.getPolicy(COLD);
  final short replication=3;
  for (int n=0; n <= 6; n++) {
    for (int d=0; d <= n; d++) {
      final int a=n - d;
      final List<StorageType> chosen=asList(d,a);
{
        final int nDisk=Math.max(0,d - replication);
        final int nArchive=a;
        final StorageType[] expected=newStorageTypes(nDisk,nArchive);
        checkChooseExcess(hot,replication,chosen,expected);
      }
{
        final int nDisk=Math.max(0,d - 1);
        final int nArchive=Math.max(0,a - replication + 1);
        final StorageType[] expected=newStorageTypes(nDisk,nArchive);
        checkChooseExcess(warm,replication,chosen,expected);
      }
{
        final int nDisk=d;
        final int nArchive=Math.max(0,a - replication);
        final StorageType[] expected=newStorageTypes(nDisk,nArchive);
        checkChooseExcess(cold,replication,chosen,expected);
      }
    }
  }
}
