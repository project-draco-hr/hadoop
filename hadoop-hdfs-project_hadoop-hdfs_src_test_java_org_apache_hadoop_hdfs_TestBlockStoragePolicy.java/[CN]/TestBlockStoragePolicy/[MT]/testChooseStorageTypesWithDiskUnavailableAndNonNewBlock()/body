{
  final BlockStoragePolicy hot=POLICY_SUITE.getPolicy(HOT);
  final BlockStoragePolicy warm=POLICY_SUITE.getPolicy(WARM);
  final BlockStoragePolicy cold=POLICY_SUITE.getPolicy(COLD);
  final short replication=3;
  final EnumSet<StorageType> unavailables=disk;
  final boolean isNewBlock=false;
{
    final List<StorageType> chosen=Arrays.asList();
    checkChooseStorageTypes(hot,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(warm,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(cold,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE);
  }
{
    final List<StorageType> chosen=Arrays.asList(StorageType.DISK);
    checkChooseStorageTypes(hot,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(warm,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(cold,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE);
  }
{
    final List<StorageType> chosen=Arrays.asList(StorageType.ARCHIVE);
    checkChooseStorageTypes(hot,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(warm,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(cold,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE);
  }
{
    final List<StorageType> chosen=Arrays.asList(StorageType.DISK,StorageType.DISK);
    checkChooseStorageTypes(hot,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE);
    checkChooseStorageTypes(warm,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(cold,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE);
  }
{
    final List<StorageType> chosen=Arrays.asList(StorageType.DISK,StorageType.ARCHIVE);
    checkChooseStorageTypes(hot,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE);
    checkChooseStorageTypes(warm,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE);
    checkChooseStorageTypes(cold,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE);
  }
{
    final List<StorageType> chosen=Arrays.asList(StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(hot,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE);
    checkChooseStorageTypes(warm,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE);
    checkChooseStorageTypes(cold,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE);
  }
{
    final List<StorageType> chosen=Arrays.asList(StorageType.DISK,StorageType.DISK,StorageType.DISK);
    checkChooseStorageTypes(hot,replication,chosen,unavailables,isNewBlock);
    checkChooseStorageTypes(warm,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(cold,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE);
  }
{
    final List<StorageType> chosen=Arrays.asList(StorageType.DISK,StorageType.DISK,StorageType.ARCHIVE);
    checkChooseStorageTypes(hot,replication,chosen,unavailables,isNewBlock);
    checkChooseStorageTypes(warm,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE);
    checkChooseStorageTypes(cold,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE,StorageType.ARCHIVE);
  }
{
    final List<StorageType> chosen=Arrays.asList(StorageType.DISK,StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(hot,replication,chosen,unavailables,isNewBlock);
    checkChooseStorageTypes(warm,replication,chosen,unavailables,isNewBlock);
    checkChooseStorageTypes(cold,replication,chosen,unavailables,isNewBlock,StorageType.ARCHIVE);
  }
{
    final List<StorageType> chosen=Arrays.asList(StorageType.ARCHIVE,StorageType.ARCHIVE,StorageType.ARCHIVE);
    checkChooseStorageTypes(hot,replication,chosen,unavailables,isNewBlock);
    checkChooseStorageTypes(warm,replication,chosen,unavailables,isNewBlock);
    checkChooseStorageTypes(cold,replication,chosen,unavailables,isNewBlock);
  }
}
