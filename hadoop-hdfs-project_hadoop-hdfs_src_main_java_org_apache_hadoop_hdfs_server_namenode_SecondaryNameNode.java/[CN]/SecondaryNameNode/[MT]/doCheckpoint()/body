{
  checkpointImage.ensureCurrentDirExists();
  NNStorage dstStorage=checkpointImage.getStorage();
  CheckpointSignature sig=namenode.rollEditLog();
  boolean loadImage=false;
  boolean isFreshCheckpointer=(checkpointImage.getNamespaceID() == 0);
  boolean isSameCluster=(dstStorage.versionSupportsFederation(NameNodeLayoutVersion.FEATURES) && sig.isSameCluster(checkpointImage)) || (!dstStorage.versionSupportsFederation(NameNodeLayoutVersion.FEATURES) && sig.namespaceIdMatches(checkpointImage));
  if (isFreshCheckpointer || (isSameCluster && !sig.storageVersionMatches(checkpointImage.getStorage()))) {
    dstStorage.setStorageInfo(sig);
    dstStorage.setClusterID(sig.getClusterID());
    dstStorage.setBlockPoolID(sig.getBlockpoolID());
    loadImage=true;
  }
  sig.validateStorageInfo(checkpointImage);
  CheckpointFaultInjector.getInstance().afterSecondaryCallsRollEditLog();
  RemoteEditLogManifest manifest=namenode.getEditLogManifest(sig.mostRecentCheckpointTxId + 1);
  loadImage|=downloadCheckpointFiles(fsName,checkpointImage,sig,manifest) | checkpointImage.hasMergeError();
  try {
    doMerge(sig,manifest,loadImage,checkpointImage,namesystem);
  }
 catch (  IOException ioe) {
    checkpointImage.setMergeError();
    throw ioe;
  }
  checkpointImage.clearMergeError();
  long txid=checkpointImage.getLastAppliedTxId();
  TransferFsImage.uploadImageFromStorage(fsName,conf,dstStorage,NameNodeFile.IMAGE,txid);
  CheckpointFaultInjector.getInstance().afterSecondaryUploadsNewImage();
  LOG.warn("Checkpoint done. New Image Size: " + dstStorage.getFsImageName(txid).length());
  return loadImage;
}
