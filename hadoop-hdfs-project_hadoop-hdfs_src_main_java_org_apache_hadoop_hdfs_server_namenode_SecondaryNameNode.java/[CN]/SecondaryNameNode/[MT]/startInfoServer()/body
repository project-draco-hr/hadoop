{
  final InetSocketAddress httpAddr=getHttpAddress(conf);
  final String httpsAddrString=conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_DEFAULT);
  InetSocketAddress httpsAddr=NetUtils.createSocketAddr(httpsAddrString);
  HttpServer2.Builder builder=DFSUtil.httpServerTemplateForNNAndJN(conf,httpAddr,httpsAddr,"secondary",DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY,DFSConfigKeys.DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY);
  infoServer=builder.build();
  infoServer.setAttribute("secondary.name.node",this);
  infoServer.setAttribute("name.system.image",checkpointImage);
  infoServer.setAttribute(JspHelper.CURRENT_CONF,conf);
  infoServer.addInternalServlet("imagetransfer",ImageServlet.PATH_SPEC,ImageServlet.class,true);
  infoServer.start();
  LOG.info("Web server init done");
  HttpConfig.Policy policy=DFSUtil.getHttpPolicy(conf);
  int connIdx=0;
  if (policy.isHttpEnabled()) {
    InetSocketAddress httpAddress=infoServer.getConnectorAddress(connIdx++);
    conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,NetUtils.getHostPortString(httpAddress));
  }
  if (policy.isHttpsEnabled()) {
    InetSocketAddress httpsAddress=infoServer.getConnectorAddress(connIdx);
    conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,NetUtils.getHostPortString(httpsAddress));
  }
}
