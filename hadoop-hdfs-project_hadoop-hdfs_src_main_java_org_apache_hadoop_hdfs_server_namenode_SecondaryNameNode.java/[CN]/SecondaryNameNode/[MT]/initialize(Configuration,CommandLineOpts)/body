{
  final InetSocketAddress infoSocAddr=getHttpAddress(conf);
  infoBindAddress=infoSocAddr.getHostName();
  UserGroupInformation.setConfiguration(conf);
  if (UserGroupInformation.isSecurityEnabled()) {
    SecurityUtil.login(conf,DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY,DFS_SECONDARY_NAMENODE_USER_NAME_KEY,infoBindAddress);
  }
  DefaultMetricsSystem.initialize("SecondaryNameNode");
  JvmMetrics.create("SecondaryNameNode",conf.get(DFS_METRICS_SESSION_ID_KEY),DefaultMetricsSystem.instance());
  shouldRun=true;
  nameNodeAddr=NameNode.getServiceAddress(conf,true);
  this.conf=conf;
  this.namenode=NameNodeProxies.createNonHAProxy(conf,nameNodeAddr,NamenodeProtocol.class,UserGroupInformation.getCurrentUser(),true).getProxy();
  fsName=getInfoServer();
  checkpointDirs=FSImage.getCheckpointDirs(conf,"/tmp/hadoop/dfs/namesecondary");
  checkpointEditsDirs=FSImage.getCheckpointEditsDirs(conf,"/tmp/hadoop/dfs/namesecondary");
  checkpointImage=new CheckpointStorage(conf,checkpointDirs,checkpointEditsDirs);
  checkpointImage.recoverCreate(commandLineOpts.shouldFormat());
  namesystem=new FSNamesystem(conf,checkpointImage);
  checkpointConf=new CheckpointConf(conf);
  int tmpInfoPort=infoSocAddr.getPort();
  infoServer=new HttpServer("secondary",infoBindAddress,tmpInfoPort,tmpInfoPort == 0,conf,new AccessControlList(conf.get(DFS_ADMIN," "))){
{
      if (UserGroupInformation.isSecurityEnabled()) {
        Map<String,String> params=new HashMap<String,String>();
        String principalInConf=conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_INTERNAL_SPENGO_USER_NAME_KEY);
        if (principalInConf != null && !principalInConf.isEmpty()) {
          params.put("kerberos.principal",SecurityUtil.getServerPrincipal(principalInConf,infoSocAddr.getHostName()));
        }
        String httpKeytab=conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY);
        if (httpKeytab != null && !httpKeytab.isEmpty()) {
          params.put("kerberos.keytab",httpKeytab);
        }
        params.put(AuthenticationFilter.AUTH_TYPE,"kerberos");
        defineFilter(webAppContext,SPNEGO_FILTER,AuthenticationFilter.class.getName(),params,null);
      }
    }
  }
;
  infoServer.setAttribute("secondary.name.node",this);
  infoServer.setAttribute("name.system.image",checkpointImage);
  infoServer.setAttribute(JspHelper.CURRENT_CONF,conf);
  infoServer.addInternalServlet("getimage","/getimage",GetImageServlet.class,true);
  infoServer.start();
  LOG.info("Web server init done");
  infoPort=infoServer.getPort();
  conf.set(DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,infoBindAddress + ":" + infoPort);
  LOG.info("Secondary Web-server up at: " + infoBindAddress + ":"+ infoPort);
  LOG.info("Checkpoint Period   :" + checkpointConf.getPeriod() + " secs "+ "("+ checkpointConf.getPeriod() / 60 + " min)");
  LOG.info("Log Size Trigger    :" + checkpointConf.getTxnCount() + " txns");
}
