{
  final InetSocketAddress infoSocAddr=getHttpAddress(conf);
  final String infoBindAddress=infoSocAddr.getHostName();
  UserGroupInformation.setConfiguration(conf);
  if (UserGroupInformation.isSecurityEnabled()) {
    SecurityUtil.login(conf,DFSConfigKeys.DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY,DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,infoBindAddress);
  }
  DefaultMetricsSystem.initialize("SecondaryNameNode");
  JvmMetrics.create("SecondaryNameNode",conf.get(DFSConfigKeys.DFS_METRICS_SESSION_ID_KEY),DefaultMetricsSystem.instance());
  shouldRun=true;
  nameNodeAddr=NameNode.getServiceAddress(conf,true);
  this.conf=conf;
  this.namenode=NameNodeProxies.createNonHAProxy(conf,nameNodeAddr,NamenodeProtocol.class,UserGroupInformation.getCurrentUser(),true).getProxy();
  fsName=getInfoServer();
  checkpointDirs=FSImage.getCheckpointDirs(conf,"/tmp/hadoop/dfs/namesecondary");
  checkpointEditsDirs=FSImage.getCheckpointEditsDirs(conf,"/tmp/hadoop/dfs/namesecondary");
  checkpointImage=new CheckpointStorage(conf,checkpointDirs,checkpointEditsDirs);
  checkpointImage.recoverCreate(commandLineOpts.shouldFormat());
  checkpointImage.deleteTempEdits();
  namesystem=new FSNamesystem(conf,checkpointImage,true);
  namesystem.dir.disableQuotaChecks();
  checkpointConf=new CheckpointConf(conf);
  nameNodeStatusBeanName=MBeans.register("SecondaryNameNode","SecondaryNameNodeInfo",this);
  legacyOivImageDir=conf.get(DFSConfigKeys.DFS_NAMENODE_LEGACY_OIV_IMAGE_DIR_KEY);
  LOG.info("Checkpoint Period   :" + checkpointConf.getPeriod() + " secs "+ "("+ checkpointConf.getPeriod() / 60 + " min)");
  LOG.info("Log Size Trigger    :" + checkpointConf.getTxnCount() + " txns");
}
