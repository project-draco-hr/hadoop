{
  final InetSocketAddress infoSocAddr=getHttpAddress(conf);
  final String infoBindAddress=infoSocAddr.getHostName();
  UserGroupInformation.setConfiguration(conf);
  if (UserGroupInformation.isSecurityEnabled()) {
    SecurityUtil.login(conf,DFSConfigKeys.DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY,DFSConfigKeys.DFS_SECONDARY_NAMENODE_USER_NAME_KEY,infoBindAddress);
  }
  DefaultMetricsSystem.initialize("SecondaryNameNode");
  JvmMetrics.create("SecondaryNameNode",conf.get(DFSConfigKeys.DFS_METRICS_SESSION_ID_KEY),DefaultMetricsSystem.instance());
  shouldRun=true;
  nameNodeAddr=NameNode.getServiceAddress(conf,true);
  this.conf=conf;
  this.namenode=NameNodeProxies.createNonHAProxy(conf,nameNodeAddr,NamenodeProtocol.class,UserGroupInformation.getCurrentUser(),true).getProxy();
  fsName=getInfoServer();
  checkpointDirs=FSImage.getCheckpointDirs(conf,"/tmp/hadoop/dfs/namesecondary");
  checkpointEditsDirs=FSImage.getCheckpointEditsDirs(conf,"/tmp/hadoop/dfs/namesecondary");
  checkpointImage=new CheckpointStorage(conf,checkpointDirs,checkpointEditsDirs);
  checkpointImage.recoverCreate(commandLineOpts.shouldFormat());
  checkpointImage.deleteTempEdits();
  namesystem=new FSNamesystem(conf,checkpointImage,true);
  checkpointConf=new CheckpointConf(conf);
  final InetSocketAddress httpAddr=infoSocAddr;
  final String httpsAddrString=conf.get(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_DEFAULT);
  InetSocketAddress httpsAddr=NetUtils.createSocketAddr(httpsAddrString);
  HttpServer.Builder builder=DFSUtil.httpServerTemplateForNNAndJN(conf,httpAddr,httpsAddr,"secondary",DFSConfigKeys.DFS_SECONDARY_NAMENODE_INTERNAL_SPNEGO_USER_NAME_KEY,DFSConfigKeys.DFS_SECONDARY_NAMENODE_KEYTAB_FILE_KEY);
  infoServer=builder.build();
  infoServer.setAttribute("secondary.name.node",this);
  infoServer.setAttribute("name.system.image",checkpointImage);
  infoServer.setAttribute(JspHelper.CURRENT_CONF,conf);
  infoServer.addInternalServlet("getimage","/getimage",GetImageServlet.class,true);
  infoServer.start();
  LOG.info("Web server init done");
  imageListenURL=new URL(DFSUtil.getHttpClientScheme(conf) + "://" + NetUtils.getHostPortString(infoServer.getConnectorAddress(0)));
  HttpConfig.Policy policy=DFSUtil.getHttpPolicy(conf);
  int connIdx=0;
  if (policy.isHttpEnabled()) {
    InetSocketAddress httpAddress=infoServer.getConnectorAddress(connIdx++);
    conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,NetUtils.getHostPortString(httpAddress));
  }
  if (policy.isHttpsEnabled()) {
    InetSocketAddress httpsAddress=infoServer.getConnectorAddress(connIdx);
    conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTPS_ADDRESS_KEY,NetUtils.getHostPortString(httpsAddress));
  }
  LOG.info("Checkpoint Period   :" + checkpointConf.getPeriod() + " secs "+ "("+ checkpointConf.getPeriod() / 60 + " min)");
  LOG.info("Log Size Trigger    :" + checkpointConf.getTxnCount() + " txns");
}
