{
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y","z"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h2",0),toSet("y")));
  MockRM rm=new MockRM(getConfigurationWithQueueLabels(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.getRMContext().setNodeLabelManager(mgr);
  rm.start();
  MockNM nm1=rm.registerNode("h1:1234",8000);
  rm.registerNode("h2:1234",8000);
  rm.registerNode("h3:1234",8000);
  ContainerId containerId2;
  RMApp app1=rm.submitApp(GB,"app","user",null,"a","x");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm1);
  am1.allocate("*",GB,1,new ArrayList<ContainerId>(),"x");
  ContainerId.newContainerId(am1.getApplicationAttemptId(),1);
  containerId2=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  Assert.assertTrue(rm.waitForState(nm1,containerId2,RMContainerState.ALLOCATED));
  checkUsedResource(rm,"a",2048,"x");
  checkAMUsedResource(rm,"a",1024,"x");
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  FiCaSchedulerApp app=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  cs.handle(new NodeLabelsUpdateSchedulerEvent(ImmutableMap.of(nm1.getNodeId(),toSet("z"))));
  checkUsedResource(rm,"a",0,"x");
  checkUsedResource(rm,"a",2048,"z");
  checkAMUsedResource(rm,"a",0,"x");
  checkAMUsedResource(rm,"a",1024,"z");
  checkUserUsedResource(rm,"a","user","x",0);
  checkUserUsedResource(rm,"a","user","z",2048);
  Assert.assertEquals(0,app.getAppAttemptResourceUsage().getAMUsed("x").getMemory());
  Assert.assertEquals(1024,app.getAppAttemptResourceUsage().getAMUsed("z").getMemory());
  Set<String> emptyLabels=new HashSet<>();
  Map<NodeId,Set<String>> map=ImmutableMap.of(nm1.getNodeId(),emptyLabels);
  cs.handle(new NodeLabelsUpdateSchedulerEvent(map));
  checkUsedResource(rm,"a",0,"x");
  checkUsedResource(rm,"a",0,"z");
  checkUsedResource(rm,"a",2048);
  checkAMUsedResource(rm,"a",0,"x");
  checkAMUsedResource(rm,"a",0,"z");
  checkAMUsedResource(rm,"a",1024);
  checkUserUsedResource(rm,"a","user","x",0);
  checkUserUsedResource(rm,"a","user","z",0);
  checkUserUsedResource(rm,"a","user","",2048);
  Assert.assertEquals(0,app.getAppAttemptResourceUsage().getAMUsed("x").getMemory());
  Assert.assertEquals(0,app.getAppAttemptResourceUsage().getAMUsed("z").getMemory());
  Assert.assertEquals(1024,app.getAppAttemptResourceUsage().getAMUsed("").getMemory());
  rm.close();
}
