{
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y","z"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  MockRM rm=new MockRM(getConfigurationWithQueueLabels(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.getRMContext().setNodeLabelManager(mgr);
  rm.start();
  MockNM nm1=rm.registerNode("h1:1234",80000);
  MockNM nm2=rm.registerNode("h2:1234",80000);
  RMApp app1=rm.submitApp(GB,"app","u1",null,"a");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm2);
  am1.allocate("*",GB,1,new ArrayList<ContainerId>(),"x");
  ContainerId containerId=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  Assert.assertTrue(rm.waitForState(nm1,containerId,RMContainerState.ALLOCATED));
  am1.allocate("*",GB,1,new ArrayList<ContainerId>());
  containerId=ContainerId.newContainerId(am1.getApplicationAttemptId(),3);
  Assert.assertTrue(rm.waitForState(nm2,containerId,RMContainerState.ALLOCATED));
  RMApp app2=rm.submitApp(GB,"app","u2",null,"a");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm,nm2);
  am2.allocate("*",GB,2,new ArrayList<ContainerId>(),"x");
  containerId=ContainerId.newContainerId(am2.getApplicationAttemptId(),3);
  Assert.assertTrue(rm.waitForState(nm1,containerId,RMContainerState.ALLOCATED));
  checkUsedResource(rm,"a",3 * GB,"x");
  checkUsedResource(rm,"a",3 * GB);
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  FiCaSchedulerApp application1=cs.getApplicationAttempt(am1.getApplicationAttemptId());
  FiCaSchedulerApp application2=cs.getApplicationAttempt(am2.getApplicationAttemptId());
  cs.handle(new NodeLabelsUpdateSchedulerEvent(ImmutableMap.of(nm1.getNodeId(),toSet("z"))));
  checkUsedResource(rm,"a",0,"x");
  checkUsedResource(rm,"a",3 * GB,"z");
  checkUsedResource(rm,"a",3 * GB);
  checkUsedResource(rm,"root",0,"x");
  checkUsedResource(rm,"root",3 * GB,"z");
  checkUsedResource(rm,"root",3 * GB);
  checkUserUsedResource(rm,"a","u1","x",0 * GB);
  checkUserUsedResource(rm,"a","u1","z",1 * GB);
  checkUserUsedResource(rm,"a","u1","",2 * GB);
  checkUserUsedResource(rm,"a","u2","x",0 * GB);
  checkUserUsedResource(rm,"a","u2","z",2 * GB);
  checkUserUsedResource(rm,"a","u2","",1 * GB);
  Assert.assertEquals(0,application1.getAppAttemptResourceUsage().getUsed("x").getMemory());
  Assert.assertEquals(1 * GB,application1.getAppAttemptResourceUsage().getUsed("z").getMemory());
  Assert.assertEquals(2 * GB,application1.getAppAttemptResourceUsage().getUsed("").getMemory());
  Assert.assertEquals(0,application2.getAppAttemptResourceUsage().getUsed("x").getMemory());
  Assert.assertEquals(2 * GB,application2.getAppAttemptResourceUsage().getUsed("z").getMemory());
  Assert.assertEquals(1 * GB,application2.getAppAttemptResourceUsage().getUsed("").getMemory());
  rm.close();
}
