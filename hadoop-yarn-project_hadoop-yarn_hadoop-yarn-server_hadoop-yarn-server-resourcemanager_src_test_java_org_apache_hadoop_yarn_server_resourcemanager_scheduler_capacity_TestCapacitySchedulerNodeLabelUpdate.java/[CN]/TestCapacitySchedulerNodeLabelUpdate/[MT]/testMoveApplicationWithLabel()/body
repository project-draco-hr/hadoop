{
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y","z"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h2",0),toSet("y")));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h4",0),toSet("z")));
  MockRM rm=new MockRM(getConfigurationWithSubQueueLabels(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.getRMContext().getContainerTokenSecretManager().rollMasterKey();
  rm.getRMContext().getNMTokenSecretManager().rollMasterKey();
  rm.getRMContext().setNodeLabelManager(mgr);
  rm.start();
  MockNM nm1=rm.registerNode("h1:1234",4096 * 2);
  MockNM nm2=rm.registerNode("h2:1234",4096 * 2);
  MockNM nm3=rm.registerNode("h3:1234",4096 * 2);
  MockNM nm4=rm.registerNode("h4:1234",4096 * 2);
  RMApp app1=rm.submitApp(GB,"app","user",null,"a1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm3);
  am1.allocate("*",GB,1,new ArrayList<ContainerId>(),"x");
  ContainerId container1=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  rm.waitForState(nm1,container1,RMContainerState.ALLOCATED,10 * 1000);
  am1.allocate("*",GB,1,new ArrayList<ContainerId>(),"y");
  ContainerId container2=ContainerId.newContainerId(am1.getApplicationAttemptId(),3);
  rm.waitForState(nm2,container2,RMContainerState.ALLOCATED,10 * 1000);
  CapacityScheduler scheduler=((CapacityScheduler)rm.getResourceScheduler());
  try {
    scheduler.moveApplication(app1.getApplicationId(),"a2");
    fail("Should throw exception since target queue doesnt have " + "required labels");
  }
 catch (  Exception e) {
    Assert.assertTrue("Yarn Exception should be thrown",e instanceof YarnException);
    Assert.assertEquals("Specified queue=a2 can't satisfy " + "following apps label expressions =[x] accessible " + "node labels =[y]",e.getMessage());
  }
  try {
    scheduler.moveApplication(app1.getApplicationId(),"a3");
    scheduler.moveApplication(app1.getApplicationId(),"a4");
    scheduler.moveApplication(app1.getApplicationId(),"b");
  }
 catch (  Exception e) {
    fail("Should not throw exception since target queue has " + "required labels");
  }
  rm.stop();
}
