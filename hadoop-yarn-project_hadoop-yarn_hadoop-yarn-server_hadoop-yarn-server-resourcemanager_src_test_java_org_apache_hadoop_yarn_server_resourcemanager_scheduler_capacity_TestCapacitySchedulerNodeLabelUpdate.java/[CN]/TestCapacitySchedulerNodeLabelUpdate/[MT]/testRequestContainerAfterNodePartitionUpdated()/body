{
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y","z"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h2",0),toSet("y")));
  MockRM rm=new MockRM(getConfigurationWithQueueLabels(conf)){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.getRMContext().setNodeLabelManager(mgr);
  rm.start();
  MockNM nm1=rm.registerNode("h1:1234",2048);
  MockNM nm2=rm.registerNode("h2:1234",2048);
  MockNM nm3=rm.registerNode("h3:1234",2048);
  ContainerId containerId;
  RMApp app1=rm.submitApp(GB,"app","user",null,"a");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm3);
  ApplicationResourceUsageReport appResourceUsageReport=rm.getResourceScheduler().getAppResourceUsageReport(am1.getApplicationAttemptId());
  Assert.assertEquals(1024,appResourceUsageReport.getUsedResources().getMemory());
  Assert.assertEquals(1,appResourceUsageReport.getUsedResources().getVirtualCores());
  am1.allocate("*",GB,1,new ArrayList<ContainerId>(),"x");
  containerId=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  rm.waitForState(nm1,containerId,RMContainerState.ALLOCATED);
  appResourceUsageReport=rm.getResourceScheduler().getAppResourceUsageReport(am1.getApplicationAttemptId());
  Assert.assertEquals(2048,appResourceUsageReport.getUsedResources().getMemory());
  Assert.assertEquals(2,appResourceUsageReport.getUsedResources().getVirtualCores());
  LeafQueue queue=(LeafQueue)((CapacityScheduler)rm.getResourceScheduler()).getQueue("a");
  ArrayList<UserInfo> users=queue.getUsers();
  for (  UserInfo userInfo : users) {
    if (userInfo.getUsername().equals("user")) {
      ResourceInfo resourcesUsed=userInfo.getResourcesUsed();
      Assert.assertEquals(2048,resourcesUsed.getMemory());
      Assert.assertEquals(2,resourcesUsed.getvCores());
    }
  }
  rm.stop();
}
