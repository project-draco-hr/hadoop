{
  String filePattern=filePatternWithOffset.string;
  int leftmost=leftmostOuterCurlyContainingSlash(filePattern,filePatternWithOffset.offset);
  if (leftmost == -1) {
    return null;
  }
  int curlyOpen=0;
  StringBuilder prefix=new StringBuilder(filePattern.substring(0,leftmost));
  StringBuilder suffix=new StringBuilder();
  List<String> alts=new ArrayList<String>();
  StringBuilder alt=new StringBuilder();
  StringBuilder cur=prefix;
  for (int i=leftmost; i < filePattern.length(); i++) {
    char c=filePattern.charAt(i);
    if (cur == suffix) {
      cur.append(c);
    }
 else     if (c == '\\') {
      i++;
      if (i >= filePattern.length()) {
        throw new IOException("Illegal file pattern: " + "An escaped character does not present for glob " + filePattern + " at "+ i);
      }
      c=filePattern.charAt(i);
      cur.append(c);
    }
 else     if (c == '{') {
      if (curlyOpen++ == 0) {
        alt.setLength(0);
        cur=alt;
      }
 else {
        cur.append(c);
      }
    }
 else     if (c == '}' && curlyOpen > 0) {
      if (--curlyOpen == 0) {
        alts.add(alt.toString());
        alt.setLength(0);
        cur=suffix;
      }
 else {
        cur.append(c);
      }
    }
 else     if (c == ',') {
      if (curlyOpen == 1) {
        alts.add(alt.toString());
        alt.setLength(0);
      }
 else {
        cur.append(c);
      }
    }
 else {
      cur.append(c);
    }
  }
  List<StringWithOffset> exp=new ArrayList<StringWithOffset>();
  for (  String string : alts) {
    exp.add(new StringWithOffset(prefix + string + suffix,prefix.length()));
  }
  return exp;
}
