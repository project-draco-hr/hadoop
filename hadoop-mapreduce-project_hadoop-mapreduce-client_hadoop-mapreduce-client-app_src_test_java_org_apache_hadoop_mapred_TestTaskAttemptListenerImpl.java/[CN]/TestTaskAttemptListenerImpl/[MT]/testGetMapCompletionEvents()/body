{
  TaskAttemptCompletionEvent[] empty={};
  TaskAttemptCompletionEvent[] taskEvents={createTce(0,true,TaskAttemptCompletionEventStatus.OBSOLETE),createTce(1,false,TaskAttemptCompletionEventStatus.FAILED),createTce(2,true,TaskAttemptCompletionEventStatus.SUCCEEDED),createTce(3,false,TaskAttemptCompletionEventStatus.FAILED)};
  TaskAttemptCompletionEvent[] mapEvents={taskEvents[0],taskEvents[2]};
  Job mockJob=mock(Job.class);
  when(mockJob.getTaskAttemptCompletionEvents(0,100)).thenReturn(taskEvents);
  when(mockJob.getTaskAttemptCompletionEvents(0,2)).thenReturn(Arrays.copyOfRange(taskEvents,0,2));
  when(mockJob.getTaskAttemptCompletionEvents(2,100)).thenReturn(Arrays.copyOfRange(taskEvents,2,4));
  when(mockJob.getMapAttemptCompletionEvents(0,100)).thenReturn(mapEvents);
  when(mockJob.getMapAttemptCompletionEvents(0,2)).thenReturn(mapEvents);
  when(mockJob.getMapAttemptCompletionEvents(2,100)).thenReturn(empty);
  AppContext appCtx=mock(AppContext.class);
  when(appCtx.getJob(any(JobId.class))).thenReturn(mockJob);
  JobTokenSecretManager secret=mock(JobTokenSecretManager.class);
  final TaskHeartbeatHandler hbHandler=mock(TaskHeartbeatHandler.class);
  TaskAttemptListenerImpl listener=new TaskAttemptListenerImpl(appCtx,secret){
    @Override protected void registerHeartbeatHandler(    Configuration conf){
      taskHeartbeatHandler=hbHandler;
    }
  }
;
  Configuration conf=new Configuration();
  listener.init(conf);
  listener.start();
  JobID jid=new JobID("12345",1);
  TaskAttemptID tid=new TaskAttemptID("12345",1,TaskType.REDUCE,1,0);
  MapTaskCompletionEventsUpdate update=listener.getMapCompletionEvents(jid,0,100,tid);
  assertEquals(2,update.events.length);
  update=listener.getMapCompletionEvents(jid,0,2,tid);
  assertEquals(2,update.events.length);
  update=listener.getMapCompletionEvents(jid,2,100,tid);
  assertEquals(0,update.events.length);
}
