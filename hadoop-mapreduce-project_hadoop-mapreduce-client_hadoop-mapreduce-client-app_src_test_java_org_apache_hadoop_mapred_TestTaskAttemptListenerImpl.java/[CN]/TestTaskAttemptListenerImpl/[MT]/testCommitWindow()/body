{
  SystemClock clock=new SystemClock();
  org.apache.hadoop.mapreduce.v2.app.job.Task mockTask=mock(org.apache.hadoop.mapreduce.v2.app.job.Task.class);
  when(mockTask.canCommit(any(TaskAttemptId.class))).thenReturn(true);
  Job mockJob=mock(Job.class);
  when(mockJob.getTask(any(TaskId.class))).thenReturn(mockTask);
  AppContext appCtx=mock(AppContext.class);
  when(appCtx.getJob(any(JobId.class))).thenReturn(mockJob);
  when(appCtx.getClock()).thenReturn(clock);
  JobTokenSecretManager secret=mock(JobTokenSecretManager.class);
  RMHeartbeatHandler rmHeartbeatHandler=mock(RMHeartbeatHandler.class);
  final TaskHeartbeatHandler hbHandler=mock(TaskHeartbeatHandler.class);
  TaskAttemptListenerImpl listener=new TaskAttemptListenerImpl(appCtx,secret,rmHeartbeatHandler,null){
    @Override protected void registerHeartbeatHandler(    Configuration conf){
      taskHeartbeatHandler=hbHandler;
    }
  }
;
  Configuration conf=new Configuration();
  listener.init(conf);
  listener.start();
  TaskAttemptID tid=new TaskAttemptID("12345",1,TaskType.REDUCE,1,0);
  boolean canCommit=listener.canCommit(tid);
  assertFalse(canCommit);
  verify(mockTask,never()).canCommit(any(TaskAttemptId.class));
  when(rmHeartbeatHandler.getLastHeartbeatTime()).thenReturn(clock.getTime());
  canCommit=listener.canCommit(tid);
  assertTrue(canCommit);
  verify(mockTask,times(1)).canCommit(any(TaskAttemptId.class));
  listener.stop();
}
