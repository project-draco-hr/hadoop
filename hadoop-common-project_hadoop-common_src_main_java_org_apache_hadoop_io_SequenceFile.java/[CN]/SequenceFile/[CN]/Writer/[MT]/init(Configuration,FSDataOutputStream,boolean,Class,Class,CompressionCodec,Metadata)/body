{
  this.conf=conf;
  this.out=out;
  this.ownOutputStream=ownStream;
  this.keyClass=keyClass;
  this.valClass=valClass;
  this.codec=codec;
  this.metadata=metadata;
  SerializationFactory serializationFactory=new SerializationFactory(conf);
  this.keySerializer=serializationFactory.getSerializer(keyClass);
  if (this.keySerializer == null) {
    throw new IOException("Could not find a serializer for the Key class: '" + keyClass.getCanonicalName() + "'. "+ "Please ensure that the configuration '"+ CommonConfigurationKeys.IO_SERIALIZATIONS_KEY+ "' is "+ "properly configured, if you're using"+ "custom serialization.");
  }
  this.keySerializer.open(buffer);
  this.uncompressedValSerializer=serializationFactory.getSerializer(valClass);
  if (this.uncompressedValSerializer == null) {
    throw new IOException("Could not find a serializer for the Value class: '" + valClass.getCanonicalName() + "'. "+ "Please ensure that the configuration '"+ CommonConfigurationKeys.IO_SERIALIZATIONS_KEY+ "' is "+ "properly configured, if you're using"+ "custom serialization.");
  }
  this.uncompressedValSerializer.open(buffer);
  if (this.codec != null) {
    ReflectionUtils.setConf(this.codec,this.conf);
    this.compressor=CodecPool.getCompressor(this.codec);
    this.deflateFilter=this.codec.createOutputStream(buffer,compressor);
    this.deflateOut=new DataOutputStream(new BufferedOutputStream(deflateFilter));
    this.compressedValSerializer=serializationFactory.getSerializer(valClass);
    if (this.compressedValSerializer == null) {
      throw new IOException("Could not find a serializer for the Value class: '" + valClass.getCanonicalName() + "'. "+ "Please ensure that the configuration '"+ CommonConfigurationKeys.IO_SERIALIZATIONS_KEY+ "' is "+ "properly configured, if you're using"+ "custom serialization.");
    }
    this.compressedValSerializer.open(deflateOut);
  }
  if (appendMode) {
    sync();
  }
 else {
    writeFileHeader();
  }
}
