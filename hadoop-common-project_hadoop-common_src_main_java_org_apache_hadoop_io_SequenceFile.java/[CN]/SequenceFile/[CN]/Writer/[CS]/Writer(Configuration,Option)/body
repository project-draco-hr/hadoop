{
  BlockSizeOption blockSizeOption=Options.getOption(BlockSizeOption.class,opts);
  BufferSizeOption bufferSizeOption=Options.getOption(BufferSizeOption.class,opts);
  ReplicationOption replicationOption=Options.getOption(ReplicationOption.class,opts);
  ProgressableOption progressOption=Options.getOption(ProgressableOption.class,opts);
  FileOption fileOption=Options.getOption(FileOption.class,opts);
  AppendIfExistsOption appendIfExistsOption=Options.getOption(AppendIfExistsOption.class,opts);
  FileSystemOption fsOption=Options.getOption(FileSystemOption.class,opts);
  StreamOption streamOption=Options.getOption(StreamOption.class,opts);
  KeyClassOption keyClassOption=Options.getOption(KeyClassOption.class,opts);
  ValueClassOption valueClassOption=Options.getOption(ValueClassOption.class,opts);
  MetadataOption metadataOption=Options.getOption(MetadataOption.class,opts);
  CompressionOption compressionTypeOption=Options.getOption(CompressionOption.class,opts);
  if ((fileOption == null) == (streamOption == null)) {
    throw new IllegalArgumentException("file or stream must be specified");
  }
  if (fileOption == null && (blockSizeOption != null || bufferSizeOption != null || replicationOption != null || progressOption != null)) {
    throw new IllegalArgumentException("file modifier options not " + "compatible with stream");
  }
  FSDataOutputStream out;
  boolean ownStream=fileOption != null;
  if (ownStream) {
    Path p=fileOption.getValue();
    FileSystem fs;
    if (fsOption != null) {
      fs=fsOption.getValue();
    }
 else {
      fs=p.getFileSystem(conf);
    }
    int bufferSize=bufferSizeOption == null ? getBufferSize(conf) : bufferSizeOption.getValue();
    short replication=replicationOption == null ? fs.getDefaultReplication(p) : (short)replicationOption.getValue();
    long blockSize=blockSizeOption == null ? fs.getDefaultBlockSize(p) : blockSizeOption.getValue();
    Progressable progress=progressOption == null ? null : progressOption.getValue();
    if (appendIfExistsOption != null && appendIfExistsOption.getValue() && fs.exists(p)) {
      SequenceFile.Reader reader=new SequenceFile.Reader(conf,SequenceFile.Reader.file(p),new Reader.OnlyHeaderOption());
      try {
        if (keyClassOption.getValue() != reader.getKeyClass() || valueClassOption.getValue() != reader.getValueClass()) {
          throw new IllegalArgumentException("Key/value class provided does not match the file");
        }
        if (reader.getVersion() != VERSION[3]) {
          throw new VersionMismatchException(VERSION[3],reader.getVersion());
        }
        if (metadataOption != null) {
          LOG.info("MetaData Option is ignored during append");
        }
        metadataOption=(MetadataOption)SequenceFile.Writer.metadata(reader.getMetadata());
        CompressionOption readerCompressionOption=new CompressionOption(reader.getCompressionType(),reader.getCompressionCodec());
        if (readerCompressionOption.value != compressionTypeOption.value || !readerCompressionOption.codec.getClass().getName().equals(compressionTypeOption.codec.getClass().getName())) {
          throw new IllegalArgumentException("Compression option provided does not match the file");
        }
        sync=reader.getSync();
      }
  finally {
        reader.close();
      }
      out=fs.append(p,bufferSize,progress);
      this.appendMode=true;
    }
 else {
      out=fs.create(p,true,bufferSize,replication,blockSize,progress);
    }
  }
 else {
    out=streamOption.getValue();
  }
  Class<?> keyClass=keyClassOption == null ? Object.class : keyClassOption.getValue();
  Class<?> valueClass=valueClassOption == null ? Object.class : valueClassOption.getValue();
  Metadata metadata=metadataOption == null ? new Metadata() : metadataOption.getValue();
  this.compress=compressionTypeOption.getValue();
  final CompressionCodec codec=compressionTypeOption.getCodec();
  if (codec != null && (codec instanceof GzipCodec) && !NativeCodeLoader.isNativeCodeLoaded() && !ZlibFactory.isNativeZlibLoaded(conf)) {
    throw new IllegalArgumentException("SequenceFile doesn't work with " + "GzipCodec without native-hadoop " + "code!");
  }
  init(conf,out,ownStream,keyClass,valueClass,codec,metadata);
}
