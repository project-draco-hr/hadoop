{
  MockNM nm1=rm.registerNode("127.0.0.1:1234",10000);
  MockNM nm2=rm.registerNode("127.0.0.2:1234",10000);
  MockNM nm3=rm.registerNode("127.0.0.3:1234",10000);
  MockNM nm4=rm.registerNode("127.0.0.4:1234",10000);
  RMApp app1=rm.submitApp(2000);
  nm1.nodeHeartbeat(true);
  RMAppAttempt attempt1=app1.getCurrentAppAttempt();
  MockAM am1=rm.sendAMLaunched(attempt1.getAppAttemptId());
  am1.registerAppAttempt();
  AllocateRequest allocateRequest1=AllocateRequest.newInstance(attempt1.getAppAttemptId(),0,0F,null,null);
  AllocateResponse response1=amService.allocate(allocateRequest1);
  List<NodeReport> updatedNodes=response1.getUpdatedNodes();
  Assert.assertEquals(0,updatedNodes.size());
  syncNodeHeartbeat(nm4,false);
  allocateRequest1=AllocateRequest.newInstance(attempt1.getAppAttemptId(),response1.getResponseId(),0F,null,null);
  response1=amService.allocate(allocateRequest1);
  updatedNodes=response1.getUpdatedNodes();
  Assert.assertEquals(1,updatedNodes.size());
  NodeReport nr=updatedNodes.iterator().next();
  Assert.assertEquals(nm4.getNodeId(),nr.getNodeId());
  Assert.assertEquals(NodeState.UNHEALTHY,nr.getNodeState());
  response1=amService.allocate(allocateRequest1);
  updatedNodes=response1.getUpdatedNodes();
  Assert.assertEquals(1,updatedNodes.size());
  nr=updatedNodes.iterator().next();
  Assert.assertEquals(nm4.getNodeId(),nr.getNodeId());
  Assert.assertEquals(NodeState.UNHEALTHY,nr.getNodeState());
  syncNodeLost(nm3);
  allocateRequest1=AllocateRequest.newInstance(attempt1.getAppAttemptId(),response1.getResponseId(),0F,null,null);
  response1=amService.allocate(allocateRequest1);
  updatedNodes=response1.getUpdatedNodes();
  Assert.assertEquals(1,updatedNodes.size());
  nr=updatedNodes.iterator().next();
  Assert.assertEquals(nm3.getNodeId(),nr.getNodeId());
  Assert.assertEquals(NodeState.LOST,nr.getNodeState());
  RMApp app2=rm.submitApp(2000);
  nm2.nodeHeartbeat(true);
  RMAppAttempt attempt2=app2.getCurrentAppAttempt();
  MockAM am2=rm.sendAMLaunched(attempt2.getAppAttemptId());
  am2.registerAppAttempt();
  AllocateRequest allocateRequest2=AllocateRequest.newInstance(attempt2.getAppAttemptId(),0,0F,null,null);
  AllocateResponse response2=amService.allocate(allocateRequest2);
  updatedNodes=response2.getUpdatedNodes();
  Assert.assertEquals(0,updatedNodes.size());
  syncNodeHeartbeat(nm4,true);
  allocateRequest1=AllocateRequest.newInstance(attempt1.getAppAttemptId(),response1.getResponseId(),0F,null,null);
  response1=amService.allocate(allocateRequest1);
  updatedNodes=response1.getUpdatedNodes();
  Assert.assertEquals(1,updatedNodes.size());
  nr=updatedNodes.iterator().next();
  Assert.assertEquals(nm4.getNodeId(),nr.getNodeId());
  Assert.assertEquals(NodeState.RUNNING,nr.getNodeState());
  allocateRequest2=AllocateRequest.newInstance(attempt2.getAppAttemptId(),response2.getResponseId(),0F,null,null);
  response2=amService.allocate(allocateRequest2);
  updatedNodes=response2.getUpdatedNodes();
  Assert.assertEquals(1,updatedNodes.size());
  nr=updatedNodes.iterator().next();
  Assert.assertEquals(nm4.getNodeId(),nr.getNodeId());
  Assert.assertEquals(NodeState.RUNNING,nr.getNodeState());
  allocateRequest2=AllocateRequest.newInstance(attempt2.getAppAttemptId(),response2.getResponseId(),0F,null,null);
  response2=amService.allocate(allocateRequest2);
  updatedNodes=response2.getUpdatedNodes();
  Assert.assertEquals(0,updatedNodes.size());
}
