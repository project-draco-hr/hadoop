{
  final List<String> errors=new ArrayList<String>();
  for (int i=0; i < invalidBlks.length; i++) {
    final ReplicaInfo removing;
    final FsVolumeImpl v;
    try (AutoCloseableLock lock=datasetLock.acquire()){
      final ReplicaInfo info=volumeMap.get(bpid,invalidBlks[i]);
      if (info == null) {
        LOG.info("Failed to delete replica " + invalidBlks[i] + ": ReplicaInfo not found.");
        continue;
      }
      if (info.getGenerationStamp() != invalidBlks[i].getGenerationStamp()) {
        errors.add("Failed to delete replica " + invalidBlks[i] + ": GenerationStamp not matched, info="+ info);
        continue;
      }
      v=(FsVolumeImpl)info.getVolume();
      if (v == null) {
        errors.add("Failed to delete replica " + invalidBlks[i] + ". No volume for replica "+ info);
        continue;
      }
      try {
        File blockFile=new File(info.getBlockURI());
        if (blockFile != null && blockFile.getParentFile() == null) {
          errors.add("Failed to delete replica " + invalidBlks[i] + ". Parent not found for block file: "+ blockFile);
          continue;
        }
      }
 catch (      IllegalArgumentException e) {
        LOG.warn("Parent directory check failed; replica " + info + " is not backed by a local file");
      }
      removing=volumeMap.remove(bpid,invalidBlks[i]);
      addDeletingBlock(bpid,removing.getBlockId());
      if (LOG.isDebugEnabled()) {
        LOG.debug("Block file " + removing.getBlockURI() + " is to be deleted");
      }
      if (removing instanceof ReplicaInPipeline) {
        ((ReplicaInPipeline)removing).releaseAllBytesReserved();
      }
    }
     if (v.isTransientStorage()) {
      RamDiskReplica replicaInfo=ramDiskReplicaTracker.getReplica(bpid,invalidBlks[i].getBlockId());
      if (replicaInfo != null) {
        if (!replicaInfo.getIsPersisted()) {
          datanode.getMetrics().incrRamDiskBlocksDeletedBeforeLazyPersisted();
        }
        ramDiskReplicaTracker.discardReplica(replicaInfo.getBlockPoolId(),replicaInfo.getBlockId(),true);
      }
    }
    datanode.getShortCircuitRegistry().processBlockInvalidation(new ExtendedBlockId(invalidBlks[i].getBlockId(),bpid));
    cacheManager.uncacheBlock(bpid,invalidBlks[i].getBlockId());
    try {
      asyncDiskService.deleteAsync(v.obtainReference(),removing,new ExtendedBlock(bpid,invalidBlks[i]),dataStorage.getTrashDirectoryForReplica(bpid,removing));
    }
 catch (    ClosedChannelException e) {
      LOG.warn("Volume " + v + " is closed, ignore the deletion task for "+ "block "+ invalidBlks[i]);
    }
  }
  if (!errors.isEmpty()) {
    StringBuilder b=new StringBuilder("Failed to delete ").append(errors.size()).append(" (out of ").append(invalidBlks.length).append(") replica(s):");
    for (int i=0; i < errors.size(); i++) {
      b.append("\n").append(i).append(") ").append(errors.get(i));
    }
    throw new IOException(b.toString());
  }
}
