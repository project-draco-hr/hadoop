{
  FsVolumeImpl volume;
  String blockFileName;
  long length, genstamp;
  Executor volumeExecutor;
synchronized (this) {
    ReplicaInfo info=volumeMap.get(bpid,blockId);
    boolean success=false;
    try {
      if (info == null) {
        LOG.warn("Failed to cache block with id " + blockId + ", pool "+ bpid+ ": ReplicaInfo not found.");
        return;
      }
      if (info.getState() != ReplicaState.FINALIZED) {
        LOG.warn("Failed to cache block with id " + blockId + ", pool "+ bpid+ ": replica is not finalized; it is in state "+ info.getState());
        return;
      }
      try {
        volume=(FsVolumeImpl)info.getVolume();
        if (volume == null) {
          LOG.warn("Failed to cache block with id " + blockId + ", pool "+ bpid+ ": volume not found.");
          return;
        }
      }
 catch (      ClassCastException e) {
        LOG.warn("Failed to cache block with id " + blockId + ": volume was not an instance of FsVolumeImpl.");
        return;
      }
      if (volume.isTransientStorage()) {
        LOG.warn("Caching not supported on block with id " + blockId + " since the volume is backed by RAM.");
        return;
      }
      success=true;
    }
  finally {
      if (!success) {
        cacheManager.numBlocksFailedToCache.incrementAndGet();
      }
    }
    blockFileName=info.getBlockFile().getAbsolutePath();
    length=info.getVisibleLength();
    genstamp=info.getGenerationStamp();
    volumeExecutor=volume.getCacheExecutor();
  }
  cacheManager.cacheBlock(blockId,bpid,blockFileName,length,genstamp,volumeExecutor);
}
