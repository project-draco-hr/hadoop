{
  final Collection<StorageLocation> dataLocations=DataNode.getStorageLocations(this.conf);
  final Map<String,Storage.StorageDirectory> allStorageDirs=new HashMap<String,Storage.StorageDirectory>();
  List<StorageLocation> succeedVolumes=Lists.newArrayList();
  try {
    for (int idx=0; idx < dataStorage.getNumStorageDirs(); idx++) {
      Storage.StorageDirectory sd=dataStorage.getStorageDir(idx);
      allStorageDirs.put(sd.getRoot().getCanonicalPath(),sd);
    }
  }
 catch (  IOException ioe) {
    LOG.warn("Caught exception when parsing storage URL.",ioe);
    return succeedVolumes;
  }
  final boolean[] successFlags=new boolean[volumes.size()];
  Arrays.fill(successFlags,false);
  List<Thread> volumeAddingThreads=Lists.newArrayList();
  for (int i=0; i < volumes.size(); i++) {
    final int idx=i;
    Thread t=new Thread(){
      public void run(){
        StorageLocation vol=volumes.get(idx);
        try {
          String key=vol.getFile().getCanonicalPath();
          if (!allStorageDirs.containsKey(key)) {
            LOG.warn("Attempt to add an invalid volume: " + vol.getFile());
          }
 else {
            addVolumeAndBlockPool(dataLocations,allStorageDirs.get(key),bpids);
            successFlags[idx]=true;
          }
        }
 catch (        IOException e) {
          LOG.warn("Caught exception when adding volume " + vol,e);
        }
      }
    }
;
    volumeAddingThreads.add(t);
    t.start();
  }
  for (  Thread t : volumeAddingThreads) {
    try {
      t.join();
    }
 catch (    InterruptedException e) {
      LOG.warn("Caught InterruptedException when adding volume.",e);
    }
  }
  setupAsyncLazyPersistThreads();
  for (int i=0; i < volumes.size(); i++) {
    if (successFlags[i]) {
      succeedVolumes.add(volumes.get(i));
    }
  }
  return succeedVolumes;
}
