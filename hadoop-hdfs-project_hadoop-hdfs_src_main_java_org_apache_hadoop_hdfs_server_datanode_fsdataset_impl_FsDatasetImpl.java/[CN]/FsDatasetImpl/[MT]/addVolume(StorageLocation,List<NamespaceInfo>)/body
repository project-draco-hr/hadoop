{
  final File dir=location.getFile();
  final DataStorage.VolumeBuilder builder;
  try {
    builder=dataStorage.prepareVolume(datanode,location.getFile(),nsInfos);
  }
 catch (  IOException e) {
    volumes.addVolumeFailureInfo(new VolumeFailureInfo(location.getFile().getAbsolutePath(),Time.now()));
    throw e;
  }
  final Storage.StorageDirectory sd=builder.getStorageDirectory();
  StorageType storageType=location.getStorageType();
  final FsVolumeImpl fsVolume=createFsVolume(sd.getStorageUuid(),sd.getCurrentDir(),storageType);
  final ReplicaMap tempVolumeMap=new ReplicaMap(fsVolume);
  ArrayList<IOException> exceptions=Lists.newArrayList();
  for (  final NamespaceInfo nsInfo : nsInfos) {
    String bpid=nsInfo.getBlockPoolID();
    try {
      fsVolume.addBlockPool(bpid,this.conf);
      fsVolume.getVolumeMap(bpid,tempVolumeMap,ramDiskReplicaTracker);
    }
 catch (    IOException e) {
      LOG.warn("Caught exception when adding " + fsVolume + ". Will throw later.",e);
      exceptions.add(e);
    }
  }
  if (!exceptions.isEmpty()) {
    try {
      sd.unlock();
    }
 catch (    IOException e) {
      exceptions.add(e);
    }
    throw MultipleIOException.createIOException(exceptions);
  }
  final FsVolumeReference ref=fsVolume.obtainReference();
  setupAsyncLazyPersistThread(fsVolume);
  builder.build();
synchronized (this) {
    volumeMap.addAll(tempVolumeMap);
    storageMap.put(sd.getStorageUuid(),new DatanodeStorage(sd.getStorageUuid(),DatanodeStorage.State.NORMAL,storageType));
    asyncDiskService.addVolume(sd.getCurrentDir());
    volumes.addVolume(ref);
  }
  LOG.info("Added volume - " + dir + ", StorageType: "+ storageType);
}
