{
  this.fsRunning=true;
  this.datanode=datanode;
  this.dataStorage=storage;
  this.conf=conf;
  this.smallBufferSize=DFSUtil.getSmallBufferSize(conf);
  volFailuresTolerated=conf.getInt(DFSConfigKeys.DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY,DFSConfigKeys.DFS_DATANODE_FAILED_VOLUMES_TOLERATED_DEFAULT);
  String[] dataDirs=conf.getTrimmedStrings(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY);
  Collection<StorageLocation> dataLocations=DataNode.getStorageLocations(conf);
  List<VolumeFailureInfo> volumeFailureInfos=getInitialVolumeFailureInfos(dataLocations,storage);
  int volsConfigured=(dataDirs == null) ? 0 : dataDirs.length;
  int volsFailed=volumeFailureInfos.size();
  if (volFailuresTolerated < 0 || volFailuresTolerated >= volsConfigured) {
    throw new DiskErrorException("Invalid value configured for " + "dfs.datanode.failed.volumes.tolerated - " + volFailuresTolerated + ". Value configured is either less than 0 or >= "+ "to the number of configured volumes ("+ volsConfigured+ ").");
  }
  if (volsFailed > volFailuresTolerated) {
    throw new DiskErrorException("Too many failed volumes - " + "current valid volumes: " + storage.getNumStorageDirs() + ", volumes configured: "+ volsConfigured+ ", volumes failed: "+ volsFailed+ ", volume failures tolerated: "+ volFailuresTolerated);
  }
  storageMap=new ConcurrentHashMap<String,DatanodeStorage>();
  volumeMap=new ReplicaMap(this);
  ramDiskReplicaTracker=RamDiskReplicaTracker.getInstance(conf,this);
  @SuppressWarnings("unchecked") final VolumeChoosingPolicy<FsVolumeImpl> blockChooserImpl=ReflectionUtils.newInstance(conf.getClass(DFSConfigKeys.DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_POLICY_KEY,RoundRobinVolumeChoosingPolicy.class,VolumeChoosingPolicy.class),conf);
  volumes=new FsVolumeList(volumeFailureInfos,datanode.getBlockScanner(),blockChooserImpl);
  asyncDiskService=new FsDatasetAsyncDiskService(datanode,this);
  asyncLazyPersistService=new RamDiskAsyncLazyPersistService(datanode);
  deletingBlock=new HashMap<String,Set<Long>>();
  for (int idx=0; idx < storage.getNumStorageDirs(); idx++) {
    addVolume(dataLocations,storage.getStorageDir(idx));
  }
  setupAsyncLazyPersistThreads();
  cacheManager=new FsDatasetCache(this);
  if (ramDiskReplicaTracker.numReplicasNotPersisted() > 0 || datanode.getDnConf().getMaxLockedMemory() > 0) {
    lazyWriter=new Daemon(new LazyWriter(conf));
    lazyWriter.start();
  }
 else {
    lazyWriter=null;
  }
  registerMBean(datanode.getDatanodeUuid());
  MetricsSystem ms=DefaultMetricsSystem.instance();
  ms.register("FSDatasetState","FSDatasetState",this);
  localFS=FileSystem.getLocal(conf);
  blockPinningEnabled=conf.getBoolean(DFSConfigKeys.DFS_DATANODE_BLOCK_PINNING_ENABLED,DFSConfigKeys.DFS_DATANODE_BLOCK_PINNING_ENABLED_DEFAULT);
}
