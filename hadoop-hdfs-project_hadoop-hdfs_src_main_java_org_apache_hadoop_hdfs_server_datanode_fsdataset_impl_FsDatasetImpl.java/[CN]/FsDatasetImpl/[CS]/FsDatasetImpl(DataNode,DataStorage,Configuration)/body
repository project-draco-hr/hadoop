{
  this.datanode=datanode;
  final int volFailuresTolerated=conf.getInt(DFSConfigKeys.DFS_DATANODE_FAILED_VOLUMES_TOLERATED_KEY,DFSConfigKeys.DFS_DATANODE_FAILED_VOLUMES_TOLERATED_DEFAULT);
  String[] dataDirs=conf.getTrimmedStrings(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY);
  Collection<StorageLocation> dataLocations=DataNode.getStorageLocations(conf);
  int volsConfigured=(dataDirs == null) ? 0 : dataDirs.length;
  int volsFailed=volsConfigured - storage.getNumStorageDirs();
  this.validVolsRequired=volsConfigured - volFailuresTolerated;
  if (volFailuresTolerated < 0 || volFailuresTolerated >= volsConfigured) {
    throw new DiskErrorException("Invalid volume failure " + " config value: " + volFailuresTolerated);
  }
  if (volsFailed > volFailuresTolerated) {
    throw new DiskErrorException("Too many failed volumes - " + "current valid volumes: " + storage.getNumStorageDirs() + ", volumes configured: "+ volsConfigured+ ", volumes failed: "+ volsFailed+ ", volume failures tolerated: "+ volFailuresTolerated);
  }
  final List<FsVolumeImpl> volArray=new ArrayList<FsVolumeImpl>(storage.getNumStorageDirs());
  for (int idx=0; idx < storage.getNumStorageDirs(); idx++) {
    Storage.StorageDirectory sd=storage.getStorageDir(idx);
    final File dir=sd.getCurrentDir();
    final StorageType storageType=getStorageTypeFromLocations(dataLocations,dir);
    volArray.add(new FsVolumeImpl(this,sd.getStorageUuid(),dir,conf,storageType));
    LOG.info("Added volume - " + dir + ", StorageType: "+ storageType);
  }
  volumeMap=new ReplicaMap(this);
  @SuppressWarnings("unchecked") final VolumeChoosingPolicy<FsVolumeImpl> blockChooserImpl=ReflectionUtils.newInstance(conf.getClass(DFSConfigKeys.DFS_DATANODE_FSDATASET_VOLUME_CHOOSING_POLICY_KEY,RoundRobinVolumeChoosingPolicy.class,VolumeChoosingPolicy.class),conf);
  volumes=new FsVolumeList(volArray,volsFailed,blockChooserImpl);
  volumes.initializeReplicaMaps(volumeMap);
  File[] roots=new File[storage.getNumStorageDirs()];
  for (int idx=0; idx < storage.getNumStorageDirs(); idx++) {
    roots[idx]=storage.getStorageDir(idx).getCurrentDir();
  }
  asyncDiskService=new FsDatasetAsyncDiskService(datanode,roots);
  cacheManager=new FsDatasetCache(this);
  registerMBean(datanode.getDatanodeUuid());
}
