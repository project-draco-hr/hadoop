{
  AppContext ctx=mock(AppContext.class);
  AppForTest app=new AppForTest(ctx);
  JobId jobId=new JobIdPBImpl();
  jobId.setId(0);
  jobId.setAppId(ApplicationIdPBImpl.newInstance(0,1));
  TaskId taskId=new TaskIdPBImpl();
  taskId.setId(0);
  taskId.setTaskType(TaskType.REDUCE);
  taskId.setJobId(jobId);
  Task task=mock(Task.class);
  when(task.getID()).thenReturn(taskId);
  TaskReport report=mock(TaskReport.class);
  when(task.getReport()).thenReturn(report);
  when(task.getType()).thenReturn(TaskType.REDUCE);
  Map<TaskId,Task> tasks=new HashMap<TaskId,Task>();
  Map<TaskAttemptId,TaskAttempt> attempts=new HashMap<TaskAttemptId,TaskAttempt>();
  TaskAttempt attempt=mock(TaskAttempt.class);
  TaskAttemptId taId=new TaskAttemptIdPBImpl();
  taId.setId(0);
  taId.setTaskId(task.getID());
  when(attempt.getID()).thenReturn(taId);
  final TaskAttemptState taState=TaskAttemptState.SUCCEEDED;
  when(attempt.getState()).thenReturn(taState);
  TaskAttemptReport taReport=mock(TaskAttemptReport.class);
  when(taReport.getTaskAttemptState()).thenReturn(taState);
  when(attempt.getReport()).thenReturn(taReport);
  attempts.put(taId,attempt);
  tasks.put(taskId,task);
  when(task.getAttempts()).thenReturn(attempts);
  app.setTask(task);
  Job job=mock(Job.class);
  when(job.getTasks(TaskType.REDUCE)).thenReturn(tasks);
  app.setJob(job);
  AttemptsBlockForTest block=new AttemptsBlockForTest(app,new Configuration());
  block.addParameter(AMParams.TASK_TYPE,"r");
  block.addParameter(AMParams.ATTEMPT_STATE,"SUCCESSFUL");
  PrintWriter pWriter=new PrintWriter(data);
  Block html=new BlockForTest(new HtmlBlockForTest(),pWriter,0,false);
  block.render(html);
  pWriter.flush();
  assertTrue(data.toString().contains("<a href='" + block.url("task",task.getID().toString()) + "'>"+ "attempt_0_0001_r_000000_0</a>"));
}
