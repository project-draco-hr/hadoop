{
  ApplicationId appId=ApplicationIdPBImpl.newInstance(0,1);
  JobId jobId=new JobIdPBImpl();
  jobId.setId(0);
  jobId.setAppId(appId);
  TaskId taskId=new TaskIdPBImpl();
  taskId.setId(0);
  taskId.setTaskType(TaskType.MAP);
  taskId.setJobId(jobId);
  Task task=mock(Task.class);
  when(task.getID()).thenReturn(taskId);
  TaskReport report=mock(TaskReport.class);
  when(report.getProgress()).thenReturn(0.7f);
  when(report.getTaskState()).thenReturn(TaskState.SUCCEEDED);
  when(report.getStartTime()).thenReturn(100001L);
  when(report.getFinishTime()).thenReturn(100011L);
  when(report.getStatus()).thenReturn("Dummy Status \n*");
  when(task.getReport()).thenReturn(report);
  when(task.getType()).thenReturn(TaskType.MAP);
  Map<TaskId,Task> tasks=new HashMap<TaskId,Task>();
  tasks.put(taskId,task);
  AppContext ctx=mock(AppContext.class);
  Job job=mock(Job.class);
  when(job.getTasks()).thenReturn(tasks);
  App app=new App(ctx);
  app.setJob(job);
  TasksBlockForTest taskBlock=new TasksBlockForTest(app);
  taskBlock.addParameter(AMParams.TASK_TYPE,"m");
  PrintWriter pWriter=new PrintWriter(data);
  Block html=new BlockForTest(new HtmlBlockForTest(),pWriter,0,false);
  taskBlock.render(html);
  pWriter.flush();
  assertTrue(data.toString().contains("task_0_0001_m_000000"));
  assertTrue(data.toString().contains("70.00"));
  assertTrue(data.toString().contains("SUCCEEDED"));
  assertTrue(data.toString().contains("100001"));
  assertTrue(data.toString().contains("100011"));
  assertFalse(data.toString().contains("Dummy Status \n*"));
  assertTrue(data.toString().contains("Dummy Status \\n*"));
}
