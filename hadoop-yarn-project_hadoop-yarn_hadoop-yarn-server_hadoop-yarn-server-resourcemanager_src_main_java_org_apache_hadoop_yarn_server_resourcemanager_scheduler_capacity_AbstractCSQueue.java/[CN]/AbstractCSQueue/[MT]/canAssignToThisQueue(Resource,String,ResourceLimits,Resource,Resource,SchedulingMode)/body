{
  Resource newTotalResource=Resources.add(queueUsage.getUsed(nodePartition),nowRequired);
  Resource currentLimitResource=getCurrentLimitResource(nodePartition,clusterResource,currentResourceLimits,schedulingMode);
  if (Resources.greaterThan(resourceCalculator,clusterResource,newTotalResource,currentLimitResource)) {
    if (this.reservationsContinueLooking && nodePartition.equals(RMNodeLabelsManager.NO_LABEL) && Resources.greaterThan(resourceCalculator,clusterResource,resourceCouldBeUnreserved,Resources.none())) {
      Resource newTotalWithoutReservedResource=Resources.subtract(newTotalResource,resourceCouldBeUnreserved);
      if (Resources.lessThan(resourceCalculator,clusterResource,newTotalWithoutReservedResource,currentLimitResource)) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("try to use reserved: " + getQueueName() + " usedResources: "+ queueUsage.getUsed()+ ", clusterResources: "+ clusterResource+ ", reservedResources: "+ resourceCouldBeUnreserved+ ", capacity-without-reserved: "+ newTotalWithoutReservedResource+ ", maxLimitCapacity: "+ currentLimitResource);
        }
        currentResourceLimits.setAmountNeededUnreserve(Resources.subtract(newTotalResource,currentLimitResource));
        return true;
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(getQueueName() + "Check assign to queue, nodePartition=" + nodePartition+ " usedResources: "+ queueUsage.getUsed(nodePartition)+ " clusterResources: "+ clusterResource+ " currentUsedCapacity "+ Resources.divide(resourceCalculator,clusterResource,queueUsage.getUsed(nodePartition),labelManager.getResourceByLabel(nodePartition,clusterResource))+ " max-capacity: "+ queueCapacities.getAbsoluteMaximumCapacity(nodePartition)+ ")");
    }
    return false;
  }
  return true;
}
