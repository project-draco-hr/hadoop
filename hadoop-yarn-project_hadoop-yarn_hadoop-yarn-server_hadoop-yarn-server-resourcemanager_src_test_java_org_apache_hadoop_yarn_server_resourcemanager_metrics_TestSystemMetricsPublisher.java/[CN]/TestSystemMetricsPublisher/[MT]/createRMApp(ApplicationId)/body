{
  RMApp app=mock(RMAppImpl.class);
  when(app.getApplicationId()).thenReturn(appId);
  when(app.getName()).thenReturn("test app");
  when(app.getApplicationType()).thenReturn("test app type");
  when(app.getUser()).thenReturn("test user");
  when(app.getQueue()).thenReturn("test queue");
  when(app.getSubmitTime()).thenReturn(Integer.MAX_VALUE + 1L);
  when(app.getStartTime()).thenReturn(Integer.MAX_VALUE + 2L);
  when(app.getFinishTime()).thenReturn(Integer.MAX_VALUE + 3L);
  when(app.getDiagnostics()).thenReturn(new StringBuilder("test diagnostics info"));
  RMAppAttempt appAttempt=mock(RMAppAttempt.class);
  when(appAttempt.getAppAttemptId()).thenReturn(ApplicationAttemptId.newInstance(appId,1));
  when(app.getCurrentAppAttempt()).thenReturn(appAttempt);
  when(app.getFinalApplicationStatus()).thenReturn(FinalApplicationStatus.UNDEFINED);
  when(app.getRMAppMetrics()).thenReturn(new RMAppMetrics(null,0,0,Integer.MAX_VALUE,Long.MAX_VALUE));
  Set<String> appTags=new HashSet<String>();
  appTags.add("test");
  appTags.add("tags");
  when(app.getApplicationTags()).thenReturn(appTags);
  ApplicationSubmissionContext asc=mock(ApplicationSubmissionContext.class);
  when(asc.getUnmanagedAM()).thenReturn(false);
  when(asc.getPriority()).thenReturn(Priority.newInstance(10));
  when(asc.getNodeLabelExpression()).thenReturn("high-cpu");
  when(app.getApplicationSubmissionContext()).thenReturn(asc);
  when(app.getAppNodeLabelExpression()).thenCallRealMethod();
  ResourceRequest amReq=mock(ResourceRequest.class);
  when(amReq.getNodeLabelExpression()).thenReturn("high-mem");
  when(app.getAMResourceRequest()).thenReturn(amReq);
  when(app.getAmNodeLabelExpression()).thenCallRealMethod();
  when(app.getCallerContext()).thenReturn(new CallerContext.Builder("context").build());
  return app;
}
