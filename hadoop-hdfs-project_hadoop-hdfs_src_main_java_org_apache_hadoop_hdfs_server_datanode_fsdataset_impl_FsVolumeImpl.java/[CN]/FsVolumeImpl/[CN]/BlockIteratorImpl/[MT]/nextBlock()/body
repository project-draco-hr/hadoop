{
  if (state.atEnd) {
    return null;
  }
  try {
    while (true) {
      List<String> entries=getSubdirEntries();
      if (entries != null) {
        state.curEntry=nextSorted(entries,state.curEntry);
        if (state.curEntry == null) {
          LOG.trace("nextBlock({}, {}): advancing from {} to next " + "subdirectory.",storageID,bpid,state.curFinalizedSubDir);
        }
 else {
          ExtendedBlock block=new ExtendedBlock(bpid,Block.filename2id(state.curEntry));
          File expectedBlockDir=DatanodeUtil.idToBlockDir(new File("."),block.getBlockId());
          File actualBlockDir=Paths.get(".",state.curFinalizedDir,state.curFinalizedSubDir).toFile();
          if (!expectedBlockDir.equals(actualBlockDir)) {
            LOG.error("nextBlock({}, {}): block id {} found in invalid " + "directory.  Expected directory: {}.  " + "Actual directory: {}",storageID,bpid,block.getBlockId(),expectedBlockDir.getPath(),actualBlockDir.getPath());
            continue;
          }
          LOG.trace("nextBlock({}, {}): advancing to {}",storageID,bpid,block);
          return block;
        }
      }
      state.curFinalizedSubDir=getNextFinalizedSubDir();
      if (state.curFinalizedSubDir == null) {
        state.curFinalizedDir=getNextFinalizedDir();
        if (state.curFinalizedDir == null) {
          state.atEnd=true;
          return null;
        }
      }
    }
  }
 catch (  IOException e) {
    state.atEnd=true;
    LOG.error("nextBlock({}, {}): I/O error",storageID,bpid,e);
    throw e;
  }
}
