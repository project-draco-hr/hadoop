{
  if (percentage > 100.0 || percentage < 0.0) {
    throw new HadoopIllegalArgumentException("Percentage " + percentage + " must be greater than or equal to 0 "+ " and less than or equal to 100");
  }
  if (maxMemory < 0) {
    throw new HadoopIllegalArgumentException("Memory " + maxMemory + " must be greater than or equal to 0");
  }
  if (percentage == 0.0 || maxMemory == 0) {
    return 0;
  }
  final String vmBit=System.getProperty("sun.arch.data.model");
  final double percentDivisor=100.0 / percentage;
  final double percentMemory=maxMemory / percentDivisor;
  final int e1=(int)(Math.log(percentMemory) / Math.log(2.0) + 0.5);
  final int e2=e1 - ("32".equals(vmBit) ? 2 : 3);
  final int exponent=e2 < 0 ? 0 : e2 > 30 ? 30 : e2;
  final int c=1 << exponent;
  LOG.info("Computing capacity for map " + mapName);
  LOG.info("VM type       = " + vmBit + "-bit");
  LOG.info(percentage + "% max memory " + StringUtils.TraditionalBinaryPrefix.long2String(maxMemory,"B",1)+ " = "+ StringUtils.TraditionalBinaryPrefix.long2String((long)percentMemory,"B",1));
  LOG.info("capacity      = 2^" + exponent + " = "+ c+ " entries");
  return c;
}
