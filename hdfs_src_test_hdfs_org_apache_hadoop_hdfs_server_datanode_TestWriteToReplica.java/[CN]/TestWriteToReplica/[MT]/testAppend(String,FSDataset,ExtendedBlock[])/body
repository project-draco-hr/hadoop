{
  long newGS=blocks[FINALIZED].getGenerationStamp() + 1;
  FSVolume v=dataSet.volumeMap.get(bpid,blocks[FINALIZED].getLocalBlock()).getVolume();
  long available=v.getCapacity() - v.getDfsUsed();
  long expectedLen=blocks[FINALIZED].getNumBytes();
  try {
    v.decDfsUsed(bpid,-available);
    blocks[FINALIZED].setNumBytes(expectedLen + 100);
    dataSet.append(blocks[FINALIZED],newGS,expectedLen);
    Assert.fail("Should not have space to append to an RWR replica" + blocks[RWR]);
  }
 catch (  DiskOutOfSpaceException e) {
    Assert.assertTrue(e.getMessage().startsWith("Insufficient space for appending to "));
  }
  v.decDfsUsed(bpid,available);
  blocks[FINALIZED].setNumBytes(expectedLen);
  newGS=blocks[RBW].getGenerationStamp() + 1;
  dataSet.append(blocks[FINALIZED],newGS,blocks[FINALIZED].getNumBytes());
  blocks[FINALIZED].setGenerationStamp(newGS);
  try {
    dataSet.append(blocks[TEMPORARY],blocks[TEMPORARY].getGenerationStamp() + 1,blocks[TEMPORARY].getNumBytes());
    Assert.fail("Should not have appended to a temporary replica " + blocks[TEMPORARY]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertEquals(ReplicaNotFoundException.UNFINALIZED_REPLICA + blocks[TEMPORARY],e.getMessage());
  }
  try {
    dataSet.append(blocks[RBW],blocks[RBW].getGenerationStamp() + 1,blocks[RBW].getNumBytes());
    Assert.fail("Should not have appended to an RBW replica" + blocks[RBW]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertEquals(ReplicaNotFoundException.UNFINALIZED_REPLICA + blocks[RBW],e.getMessage());
  }
  try {
    dataSet.append(blocks[RWR],blocks[RWR].getGenerationStamp() + 1,blocks[RBW].getNumBytes());
    Assert.fail("Should not have appended to an RWR replica" + blocks[RWR]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertEquals(ReplicaNotFoundException.UNFINALIZED_REPLICA + blocks[RWR],e.getMessage());
  }
  try {
    dataSet.append(blocks[RUR],blocks[RUR].getGenerationStamp() + 1,blocks[RUR].getNumBytes());
    Assert.fail("Should not have appended to an RUR replica" + blocks[RUR]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertEquals(ReplicaNotFoundException.UNFINALIZED_REPLICA + blocks[RUR],e.getMessage());
  }
  try {
    dataSet.append(blocks[NON_EXISTENT],blocks[NON_EXISTENT].getGenerationStamp(),blocks[NON_EXISTENT].getNumBytes());
    Assert.fail("Should not have appended to a non-existent replica " + blocks[NON_EXISTENT]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertEquals(ReplicaNotFoundException.NON_EXISTENT_REPLICA + blocks[NON_EXISTENT],e.getMessage());
  }
  newGS=blocks[FINALIZED].getGenerationStamp() + 1;
  dataSet.recoverAppend(blocks[FINALIZED],newGS,blocks[FINALIZED].getNumBytes());
  blocks[FINALIZED].setGenerationStamp(newGS);
  try {
    dataSet.recoverAppend(blocks[TEMPORARY],blocks[TEMPORARY].getGenerationStamp() + 1,blocks[TEMPORARY].getNumBytes());
    Assert.fail("Should not have appended to a temporary replica " + blocks[TEMPORARY]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertTrue(e.getMessage().startsWith(ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA));
  }
  newGS=blocks[RBW].getGenerationStamp() + 1;
  dataSet.recoverAppend(blocks[RBW],newGS,blocks[RBW].getNumBytes());
  blocks[RBW].setGenerationStamp(newGS);
  try {
    dataSet.recoverAppend(blocks[RWR],blocks[RWR].getGenerationStamp() + 1,blocks[RBW].getNumBytes());
    Assert.fail("Should not have appended to an RWR replica" + blocks[RWR]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertTrue(e.getMessage().startsWith(ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA));
  }
  try {
    dataSet.recoverAppend(blocks[RUR],blocks[RUR].getGenerationStamp() + 1,blocks[RUR].getNumBytes());
    Assert.fail("Should not have appended to an RUR replica" + blocks[RUR]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertTrue(e.getMessage().startsWith(ReplicaNotFoundException.UNFINALIZED_AND_NONRBW_REPLICA));
  }
  try {
    dataSet.recoverAppend(blocks[NON_EXISTENT],blocks[NON_EXISTENT].getGenerationStamp(),blocks[NON_EXISTENT].getNumBytes());
    Assert.fail("Should not have appended to a non-existent replica " + blocks[NON_EXISTENT]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertTrue(e.getMessage().startsWith(ReplicaNotFoundException.NON_EXISTENT_REPLICA));
  }
}
