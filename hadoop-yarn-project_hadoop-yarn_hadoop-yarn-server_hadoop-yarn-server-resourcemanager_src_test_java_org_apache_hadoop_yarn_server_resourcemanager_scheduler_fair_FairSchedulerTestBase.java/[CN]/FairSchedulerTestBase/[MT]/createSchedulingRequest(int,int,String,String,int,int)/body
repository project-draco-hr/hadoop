{
  ApplicationAttemptId id=createAppAttemptId(this.APP_ID++,this.ATTEMPT_ID++);
  scheduler.addApplication(id.getApplicationId(),queueId,userId,false);
  if (scheduler.getSchedulerApplications().containsKey(id.getApplicationId())) {
    scheduler.addApplicationAttempt(id,false,false);
  }
  List<ResourceRequest> ask=new ArrayList<ResourceRequest>();
  ResourceRequest request=createResourceRequest(memory,vcores,ResourceRequest.ANY,priority,numContainers,true);
  ask.add(request);
  RMApp rmApp=mock(RMApp.class);
  RMAppAttempt rmAppAttempt=mock(RMAppAttempt.class);
  when(rmApp.getCurrentAppAttempt()).thenReturn(rmAppAttempt);
  when(rmAppAttempt.getRMAppAttemptMetrics()).thenReturn(new RMAppAttemptMetrics(id,resourceManager.getRMContext()));
  ApplicationSubmissionContext submissionContext=mock(ApplicationSubmissionContext.class);
  when(submissionContext.getUnmanagedAM()).thenReturn(false);
  when(rmAppAttempt.getSubmissionContext()).thenReturn(submissionContext);
  Container container=mock(Container.class);
  when(rmAppAttempt.getMasterContainer()).thenReturn(container);
  resourceManager.getRMContext().getRMApps().put(id.getApplicationId(),rmApp);
  scheduler.allocate(id,ask,new ArrayList<ContainerId>(),null,null);
  return id;
}
