{
  if (!shouldRun()) {
    return;
  }
  startCluster();
  final JobConf myConf=getClusterConf();
  jobOwner.doAs(new PrivilegedExceptionAction<Void>(){
    public Void run() throws IOException {
      FileSystem inFs=inputPath.getFileSystem(myConf);
      FileSystem outFs=outputPath.getFileSystem(myConf);
      outFs.delete(outputPath,true);
      if (!inFs.mkdirs(inputPath)) {
        throw new IOException("Mkdirs failed to create " + inFs.toString());
      }
      DataOutputStream file=inFs.create(new Path(inputPath,"part-0"));
      file.writeBytes(input);
      file.close();
      final String[] args=new String[]{"-input",inputPath.makeQualified(inFs).toString(),"-output",outputPath.makeQualified(outFs).toString(),"-mapper",map,"-reducer",reduce,"-jobconf","mapreduce.task.files.preserve.failedtasks=true","-jobconf","stream.tmpdir=" + System.getProperty("test.build.data","/tmp")};
      StreamJob streamJob=new StreamJob(args,true);
      streamJob.setConf(myConf);
      assertTrue("Job has not succeeded",streamJob.go() == 0);
      assertOwnerShip(outputPath);
      return null;
    }
  }
);
}
