{
  int nThr=conf.getInt("test.rumen.concurrent-read.threads",4);
  int repeat=conf.getInt("test.rumen.concurrent-read.repeat",10);
  CountDownLatch startSignal=new CountDownLatch(1);
  CountDownLatch doneSignal=new CountDownLatch(nThr);
  Map<String,Throwable> errors=Collections.synchronizedMap(new TreeMap<String,Throwable>());
  for (int i=0; i < nThr; ++i) {
    new TestThread(i,repeat,startSignal,doneSignal,errors).start();
  }
  startSignal.countDown();
  doneSignal.await();
  if (!errors.isEmpty()) {
    StringBuilder sb=new StringBuilder();
    for (    Map.Entry<String,Throwable> e : errors.entrySet()) {
      sb.append(String.format("%s:\n%s\n",e.getKey(),e.getValue().toString()));
    }
    fail(sb.toString());
  }
}
