{
  LOG.info("nNameNodes=" + nNameNodes + ", nDataNodes="+ nDataNodes);
  LOG.info("RUN_TEST -1");
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleFederatedTopology(nNameNodes)).numDataNodes(nDataNodes).build();
  LOG.info("RUN_TEST 0");
  DFSTestUtil.setFederatedConfiguration(cluster,conf);
  try {
    cluster.waitActive();
    LOG.info("RUN_TEST 1");
    final Suite s=new Suite(cluster,nNameNodes,nDataNodes);
    for (int i=0; i < nNameNodes; i++) {
      s.createFile(i,1024);
    }
    LOG.info("RUN_TEST 2");
    final String[] urls=new String[nNameNodes];
    for (int i=0; i < urls.length; i++) {
      urls[i]=cluster.getFileSystem(i).getUri() + FILE_NAME;
      LOG.info("urls[" + i + "]="+ urls[i]);
      final String result=TestFsck.runFsck(conf,0,false,urls[i]);
      LOG.info("result=" + result);
      Assert.assertTrue(result.contains("Status: HEALTHY"));
    }
  }
  finally {
    cluster.shutdown();
  }
  LOG.info("RUN_TEST 6");
}
