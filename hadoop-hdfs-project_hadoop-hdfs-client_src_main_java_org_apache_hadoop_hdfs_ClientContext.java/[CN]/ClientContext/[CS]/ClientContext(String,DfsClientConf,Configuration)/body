{
  final ShortCircuitConf scConf=conf.getShortCircuitConf();
  this.name=name;
  this.confString=scConf.confAsString();
  this.shortCircuitCache=ShortCircuitCache.fromConf(scConf);
  this.peerCache=new PeerCache(scConf.getSocketCacheCapacity(),scConf.getSocketCacheExpiry());
  this.keyProviderCache=new KeyProviderCache(scConf.getKeyProviderCacheExpiryMs());
  this.useLegacyBlockReaderLocal=scConf.isUseLegacyBlockReaderLocal();
  this.domainSocketFactory=new DomainSocketFactory(scConf);
  this.byteArrayManager=ByteArrayManager.newInstance(conf.getWriteByteArrayManagerConf());
  DNSToSwitchMapping dnsToSwitchMapping=ReflectionUtils.newInstance(config.getClass(CommonConfigurationKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,ScriptBasedMapping.class,DNSToSwitchMapping.class),config);
  List<String> nodes=new ArrayList<>();
  String clientHostName=NetUtils.getLocalHostname();
  nodes.add(clientHostName);
  clientNode=new NodeBase(clientHostName,dnsToSwitchMapping.resolve(nodes).get(0));
  this.topology=NetworkTopology.getInstance(config);
  this.topology.add(clientNode);
  this.nodeToDistance=new ConcurrentHashMap<>();
}
