{
  HdfsConfiguration conf=createSecureConfig("authentication,integrity,privacy");
  AtomicBoolean fallbackToSimpleAuth=new AtomicBoolean(false);
  SaslDataTransferClient saslClient=new SaslDataTransferClient(conf,DataTransferSaslUtil.getSaslPropertiesResolver(conf),TrustedChannelResolver.getInstance(conf),fallbackToSimpleAuth);
  DatanodeID fakeDatanodeId=new DatanodeID("127.0.0.1","localhost","beefbeef-beef-beef-beef-beefbeefbeef",1,2,3,4);
  DataEncryptionKeyFactory dataEncKeyFactory=new DataEncryptionKeyFactory(){
    @Override public DataEncryptionKey newDataEncryptionKey(){
      return new DataEncryptionKey(123,"456",new byte[8],new byte[8],1234567,"fakeAlgorithm");
    }
  }
;
  ServerSocket serverSocket=null;
  Socket socket=null;
  try {
    serverSocket=new ServerSocket(0,-1);
    socket=new Socket(serverSocket.getInetAddress(),serverSocket.getLocalPort());
    Peer peer=DFSUtilClient.peerFromSocketAndKey(saslClient,socket,dataEncKeyFactory,new Token(),fakeDatanodeId,1);
    peer.close();
    Assert.fail("Expected DFSClient#peerFromSocketAndKey to time out.");
  }
 catch (  SocketTimeoutException e) {
    GenericTestUtils.assertExceptionContains("Read timed out",e);
  }
 finally {
    IOUtils.cleanup(null,socket,serverSocket);
  }
}
