{
  BlockInfo b=mock(BlockInfo.class);
  BlockInfoUnderConstruction b1=mock(BlockInfoUnderConstruction.class);
  when(b.getBlockUCState()).thenReturn(penUltState);
  when(b1.getBlockUCState()).thenReturn(lastState);
  BlockInfo[] blocks;
  FSDirectory fsDir=mock(FSDirectory.class);
  INodeFileUnderConstruction iNFmock=mock(INodeFileUnderConstruction.class);
  fsn.dir.close();
  fsn.dir=fsDir;
  FSImage fsImage=mock(FSImage.class);
  FSEditLog editLog=mock(FSEditLog.class);
  when(fsn.getFSImage()).thenReturn(fsImage);
  when(fsn.getFSImage().getEditLog()).thenReturn(editLog);
  fsn.getFSImage().setFSNamesystem(fsn);
switch (fileBlocksNumber) {
case 0:
    blocks=new BlockInfo[0];
  break;
case 1:
blocks=new BlockInfo[]{b1};
when(iNFmock.getLastBlock()).thenReturn(b1);
break;
default :
when(iNFmock.getPenultimateBlock()).thenReturn(b);
when(iNFmock.getLastBlock()).thenReturn(b1);
blocks=new BlockInfo[]{b,b1};
}
when(iNFmock.getBlocks()).thenReturn(blocks);
when(iNFmock.numBlocks()).thenReturn(blocks.length);
when(iNFmock.isUnderConstruction()).thenReturn(true);
when(iNFmock.convertToInodeFile()).thenReturn(iNFmock);
fsDir.addFile(file.toString(),ps,(short)3,1l,"test","test-machine",dnd,1001l);
fsn.leaseManager=mock(LeaseManager.class);
fsn.leaseManager.addLease("mock-lease",file.toString());
if (setStoredBlock) {
when(b1.getINode()).thenReturn(iNFmock);
fsn.getBlockManager().addINode(b1,iNFmock);
}
when(fsDir.getFileINode(anyString())).thenReturn(iNFmock);
}
