{
  byte[] byteRowKey=new ApplicationRowKey(CLUSTER,USER,FLOW_NAME,FLOW_RUN_ID,APPLICATION_ID).getRowKey();
  ApplicationRowKey rowKey=ApplicationRowKey.parseRowKey(byteRowKey);
  assertEquals(CLUSTER,rowKey.getClusterId());
  assertEquals(USER,rowKey.getUserId());
  assertEquals(FLOW_NAME,rowKey.getFlowName());
  assertEquals(FLOW_RUN_ID,rowKey.getFlowRunId());
  assertEquals(APPLICATION_ID,rowKey.getAppId());
  byte[] byteRowKeyPrefix=new ApplicationRowKeyPrefix(CLUSTER,USER,FLOW_NAME,FLOW_RUN_ID).getRowKeyPrefix();
  byte[][] splits=Separator.QUALIFIERS.split(byteRowKeyPrefix,new int[]{Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Bytes.SIZEOF_LONG,Separator.VARIABLE_SIZE});
  assertEquals(5,splits.length);
  assertEquals(0,splits[4].length);
  assertEquals(FLOW_NAME,Separator.QUALIFIERS.decode(Bytes.toString(splits[2])));
  assertEquals(FLOW_RUN_ID,(Long)LongConverter.invertLong(Bytes.toLong(splits[3])));
  verifyRowPrefixBytes(byteRowKeyPrefix);
  byteRowKeyPrefix=new ApplicationRowKeyPrefix(CLUSTER,USER,FLOW_NAME).getRowKeyPrefix();
  splits=Separator.QUALIFIERS.split(byteRowKeyPrefix,new int[]{Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE});
  assertEquals(4,splits.length);
  assertEquals(0,splits[3].length);
  assertEquals(FLOW_NAME,Separator.QUALIFIERS.decode(Bytes.toString(splits[2])));
  verifyRowPrefixBytes(byteRowKeyPrefix);
}
