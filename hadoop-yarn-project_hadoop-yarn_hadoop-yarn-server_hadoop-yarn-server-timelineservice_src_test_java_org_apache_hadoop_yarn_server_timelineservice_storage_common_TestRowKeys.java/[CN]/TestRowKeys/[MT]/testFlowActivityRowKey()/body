{
  Long ts=1459900830000L;
  Long dayTimestamp=TimelineStorageUtils.getTopOfTheDayTimestamp(ts);
  byte[] byteRowKey=new FlowActivityRowKey(CLUSTER,ts,USER,FLOW_NAME).getRowKey();
  FlowActivityRowKey rowKey=FlowActivityRowKey.parseRowKey(byteRowKey);
  assertEquals(CLUSTER,rowKey.getClusterId());
  assertEquals(dayTimestamp,rowKey.getDayTimestamp());
  assertEquals(USER,rowKey.getUserId());
  assertEquals(FLOW_NAME,rowKey.getFlowName());
  byte[] byteRowKeyPrefix=new FlowActivityRowKeyPrefix(CLUSTER).getRowKeyPrefix();
  byte[][] splits=Separator.QUALIFIERS.split(byteRowKeyPrefix,new int[]{Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE});
  assertEquals(2,splits.length);
  assertEquals(0,splits[1].length);
  assertEquals(CLUSTER,Separator.QUALIFIERS.decode(Bytes.toString(splits[0])));
  verifyRowPrefixBytes(byteRowKeyPrefix);
  byteRowKeyPrefix=new FlowActivityRowKeyPrefix(CLUSTER,ts).getRowKeyPrefix();
  splits=Separator.QUALIFIERS.split(byteRowKeyPrefix,new int[]{Separator.VARIABLE_SIZE,Bytes.SIZEOF_LONG,Separator.VARIABLE_SIZE});
  assertEquals(3,splits.length);
  assertEquals(0,splits[2].length);
  assertEquals(CLUSTER,Separator.QUALIFIERS.decode(Bytes.toString(splits[0])));
  assertEquals(ts,(Long)LongConverter.invertLong(Bytes.toLong(splits[1])));
  verifyRowPrefixBytes(byteRowKeyPrefix);
}
