{
  nmMemoryMB=conf.getInt(SLSConfiguration.NM_MEMORY_MB,SLSConfiguration.NM_MEMORY_MB_DEFAULT);
  nmVCores=conf.getInt(SLSConfiguration.NM_VCORES,SLSConfiguration.NM_VCORES_DEFAULT);
  int heartbeatInterval=conf.getInt(SLSConfiguration.NM_HEARTBEAT_INTERVAL_MS,SLSConfiguration.NM_HEARTBEAT_INTERVAL_MS_DEFAULT);
  Set<String> nodeSet=new HashSet<String>();
  if (nodeFile.isEmpty()) {
    if (isSLS) {
      for (      String inputTrace : inputTraces) {
        nodeSet.addAll(SLSUtils.parseNodesFromSLSTrace(inputTrace));
      }
    }
 else {
      for (      String inputTrace : inputTraces) {
        nodeSet.addAll(SLSUtils.parseNodesFromRumenTrace(inputTrace));
      }
    }
  }
 else {
    nodeSet.addAll(SLSUtils.parseNodesFromNodeFile(nodeFile));
  }
  Random random=new Random();
  Set<String> rackSet=new HashSet<String>();
  for (  String hostName : nodeSet) {
    NMSimulator nm=new NMSimulator();
    nm.init(hostName,nmMemoryMB,nmVCores,random.nextInt(heartbeatInterval),heartbeatInterval,rm);
    nmMap.put(nm.getNode().getNodeID(),nm);
    runner.schedule(nm);
    rackSet.add(nm.getNode().getRackName());
  }
  numRacks=rackSet.size();
  numNMs=nmMap.size();
}
