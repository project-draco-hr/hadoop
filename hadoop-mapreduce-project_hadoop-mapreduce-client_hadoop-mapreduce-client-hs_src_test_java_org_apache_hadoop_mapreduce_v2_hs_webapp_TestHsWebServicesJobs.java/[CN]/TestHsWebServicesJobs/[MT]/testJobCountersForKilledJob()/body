{
  WebResource r=resource();
  appContext=new MockHistoryContext(0,1,1,1,true);
  GuiceServletConfig.setInjector(Guice.createInjector(new ServletModule(){
    @Override protected void configureServlets(){
      webApp=mock(HsWebApp.class);
      when(webApp.name()).thenReturn("hsmockwebapp");
      bind(JAXBContextResolver.class);
      bind(HsWebServices.class);
      bind(GenericExceptionHandler.class);
      bind(WebApp.class).toInstance(webApp);
      bind(AppContext.class).toInstance(appContext);
      bind(HistoryContext.class).toInstance(appContext);
      bind(Configuration.class).toInstance(conf);
      serve("/*").with(GuiceContainer.class);
    }
  }
));
  Map<JobId,Job> jobsMap=appContext.getAllJobs();
  for (  JobId id : jobsMap.keySet()) {
    String jobId=MRApps.toString(id);
    ClientResponse response=r.path("ws").path("v1").path("history").path("mapreduce").path("jobs").path(jobId).path("counters/").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    JSONObject json=response.getEntity(JSONObject.class);
    assertEquals("incorrect number of elements",1,json.length());
    JSONObject info=json.getJSONObject("jobCounters");
    WebServicesTestUtils.checkStringMatch("id",MRApps.toString(id),info.getString("id"));
    assertTrue("Job shouldn't contain any counters",info.length() == 1);
  }
}
