{
  QuotaCounts myCounts=new QuotaCounts.Builder().build();
  dir.computeQuotaUsage4CurrentDirectory(bsps,blockStoragePolicyId,myCounts);
  ReadOnlyList<INode> children=dir.getChildrenList(Snapshot.CURRENT_STATE_ID);
  if (children.size() > 0) {
    List<InitQuotaTask> subtasks=new ArrayList<InitQuotaTask>();
    for (    INode child : children) {
      final byte childPolicyId=child.getStoragePolicyIDForQuota(blockStoragePolicyId);
      if (child.isDirectory()) {
        subtasks.add(new InitQuotaTask(bsps,childPolicyId,child.asDirectory(),myCounts));
      }
 else {
        myCounts.add(child.computeQuotaUsage(bsps,childPolicyId,false,Snapshot.CURRENT_STATE_ID));
      }
    }
    invokeAll(subtasks);
  }
  if (dir.isQuotaSet()) {
    final QuotaCounts q=dir.getQuotaCounts();
    final long nsConsumed=myCounts.getNameSpace();
    final long nsQuota=q.getNameSpace();
    if (Quota.isViolated(nsQuota,nsConsumed)) {
      LOG.warn("Namespace quota violation in image for " + dir.getFullPathName() + " quota = "+ nsQuota+ " < consumed = "+ nsConsumed);
    }
    final long ssConsumed=myCounts.getStorageSpace();
    final long ssQuota=q.getStorageSpace();
    if (Quota.isViolated(ssQuota,ssConsumed)) {
      LOG.warn("Storagespace quota violation in image for " + dir.getFullPathName() + " quota = "+ ssQuota+ " < consumed = "+ ssConsumed);
    }
    final EnumCounters<StorageType> tsConsumed=myCounts.getTypeSpaces();
    for (    StorageType t : StorageType.getTypesSupportingQuota()) {
      final long typeSpace=tsConsumed.get(t);
      final long typeQuota=q.getTypeSpaces().get(t);
      if (Quota.isViolated(typeQuota,typeSpace)) {
        LOG.warn("Storage type quota violation in image for " + dir.getFullPathName() + " type = "+ t.toString()+ " quota = "+ typeQuota+ " < consumed "+ typeSpace);
      }
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("Setting quota for " + dir + "\n"+ myCounts);
    }
    dir.getDirectoryWithQuotaFeature().setSpaceConsumed(nsConsumed,ssConsumed,tsConsumed);
  }
synchronized (counts) {
    counts.add(myCounts);
  }
}
