{
  LOG.info("Start checkpoint at txid " + getEditLog().getLastWrittenTxId());
  String msg=null;
  if (bnReg.getNamespaceID() != storage.getNamespaceID())   msg="Name node " + bnReg.getAddress() + " has incompatible namespace id: "+ bnReg.getNamespaceID()+ " expected: "+ storage.getNamespaceID();
 else   if (bnReg.isRole(NamenodeRole.NAMENODE))   msg="Name node " + bnReg.getAddress() + " role "+ bnReg.getRole()+ ": checkpoint is not allowed.";
 else   if (bnReg.getLayoutVersion() < storage.getLayoutVersion() || (bnReg.getLayoutVersion() == storage.getLayoutVersion() && bnReg.getCTime() > storage.getCTime()))   msg="Name node " + bnReg.getAddress() + " has newer image layout version: LV = "+ bnReg.getLayoutVersion()+ " cTime = "+ bnReg.getCTime()+ ". Current version: LV = "+ storage.getLayoutVersion()+ " cTime = "+ storage.getCTime();
  if (msg != null) {
    LOG.error(msg);
    return new NamenodeCommand(NamenodeProtocol.ACT_SHUTDOWN);
  }
  boolean needToReturnImg=true;
  if (storage.getNumStorageDirs(NameNodeDirType.IMAGE) == 0)   needToReturnImg=false;
  CheckpointSignature sig=rollEditLog();
  return new CheckpointCommand(sig,needToReturnImg);
}
