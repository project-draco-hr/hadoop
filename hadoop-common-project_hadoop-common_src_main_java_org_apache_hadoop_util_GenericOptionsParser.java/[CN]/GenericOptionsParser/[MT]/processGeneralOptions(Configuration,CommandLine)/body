{
  if (line.hasOption("fs")) {
    FileSystem.setDefaultUri(conf,line.getOptionValue("fs"));
  }
  if (line.hasOption("jt")) {
    conf.set("mapred.job.tracker",line.getOptionValue("jt"),"from -jt command line option");
  }
  if (line.hasOption("conf")) {
    String[] values=line.getOptionValues("conf");
    for (    String value : values) {
      conf.addResource(new Path(value));
    }
  }
  if (line.hasOption("libjars")) {
    conf.set("tmpjars",validateFiles(line.getOptionValue("libjars"),conf),"from -libjars command line option");
    URL[] libjars=getLibJars(conf);
    if (libjars != null && libjars.length > 0) {
      conf.setClassLoader(new URLClassLoader(libjars,conf.getClassLoader()));
      Thread.currentThread().setContextClassLoader(new URLClassLoader(libjars,Thread.currentThread().getContextClassLoader()));
    }
  }
  if (line.hasOption("files")) {
    conf.set("tmpfiles",validateFiles(line.getOptionValue("files"),conf),"from -files command line option");
  }
  if (line.hasOption("archives")) {
    conf.set("tmparchives",validateFiles(line.getOptionValue("archives"),conf),"from -archives command line option");
  }
  if (line.hasOption('D')) {
    String[] property=line.getOptionValues('D');
    for (    String prop : property) {
      String[] keyval=prop.split("=",2);
      if (keyval.length == 2) {
        conf.set(keyval[0],keyval[1],"from command line");
      }
    }
  }
  conf.setBoolean("mapreduce.client.genericoptionsparser.used",true);
  if (line.hasOption("tokenCacheFile")) {
    String fileName=line.getOptionValue("tokenCacheFile");
    FileSystem localFs=FileSystem.getLocal(conf);
    Path p=new Path(fileName);
    if (!localFs.exists(p)) {
      throw new FileNotFoundException("File " + fileName + " does not exist.");
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug("setting conf tokensFile: " + fileName);
    }
    conf.set("mapreduce.job.credentials.json",localFs.makeQualified(p).toString(),"from -tokenCacheFile command line option");
  }
}
