{
  bpm=new BlockPoolManager(mockDN){
    @Override protected BPOfferService createBPOS(    List<InetSocketAddress> nnAddrs,    List<InetSocketAddress> lifelineNnAddrs){
      final int idx=mockIdx++;
      doLog("create #" + idx);
      final BPOfferService bpos=Mockito.mock(BPOfferService.class);
      Mockito.doReturn("Mock BPOS #" + idx).when(bpos).toString();
      try {
        Mockito.doAnswer(new Answer<Void>(){
          @Override public Void answer(          InvocationOnMock invocation) throws Throwable {
            doLog("refresh #" + idx);
            return null;
          }
        }
).when(bpos).refreshNNList(Mockito.<ArrayList<InetSocketAddress>>any(),Mockito.<ArrayList<InetSocketAddress>>any());
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      Mockito.doAnswer(new Answer<Void>(){
        @Override public Void answer(        InvocationOnMock invocation) throws Throwable {
          doLog("stop #" + idx);
          bpm.remove(bpos);
          return null;
        }
      }
).when(bpos).stop();
      return bpos;
    }
  }
;
}
