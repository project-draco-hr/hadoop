{
  String srcKey="folderToRename";
  Path originalFolder=new Path(srcKey);
  assertTrue(fs.mkdirs(originalFolder));
  Path innerFile=new Path(originalFolder,"innerFile");
  assertTrue(fs.createNewFile(innerFile));
  Path innerFile2=new Path(originalFolder,"innerFile2");
  assertTrue(fs.createNewFile(innerFile2));
  String dstKey="renamedFolder";
  Path home=fs.getHomeDirectory();
  String relativeHomeDir=getRelativePath(home.toString());
  NativeAzureFileSystem.FolderRenamePending pending=new NativeAzureFileSystem.FolderRenamePending(relativeHomeDir + "/" + srcKey,relativeHomeDir + "/" + dstKey,null,(NativeAzureFileSystem)fs);
  String renameDescription=pending.makeRenamePendingFileContents();
  assertTrue(fs.delete(innerFile,false));
  Path destination=new Path(dstKey);
  Path innerDest=new Path(destination,"innerFile");
  assertTrue(fs.createNewFile(innerDest));
  final String renamePendingStr="folderToRename-RenamePending.json";
  Path renamePendingFile=new Path(renamePendingStr);
  FSDataOutputStream out=fs.create(renamePendingFile,true);
  assertTrue(out != null);
  writeString(out,renameDescription);
  assertFalse(fs.exists(originalFolder));
  assertTrue(fs.exists(destination));
  assertTrue(fs.exists(new Path(destination,innerFile.getName())));
  assertTrue(fs.exists(new Path(destination,innerFile2.getName())));
  assertFalse(fs.exists(originalFolder));
  assertFalse(fs.exists(innerFile));
  assertFalse(fs.exists(innerFile2));
  assertFalse(fs.exists(renamePendingFile));
  FileStatus[] listed=fs.listStatus(destination);
  assertEquals(2,listed.length);
  Path root=fs.getHomeDirectory();
  listed=fs.listStatus(root);
  assertEquals(1,listed.length);
  assertTrue(listed[0].isDirectory());
}
