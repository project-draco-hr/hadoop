{
  LOG.info("starting thread " + name);
  SelfRenewingLease lease=null;
  NativeAzureFileSystem nfs=(NativeAzureFileSystem)fs;
  if (name.equals("first-thread")) {
    try {
      lease=nfs.getStore().acquireLease(key);
      LOG.info(name + " acquired lease " + lease.getLeaseID());
    }
 catch (    AzureException e) {
      assertTrue("Unanticipated exception",false);
    }
    assertTrue(lease != null);
    try {
      Thread.sleep(SelfRenewingLease.LEASE_RENEWAL_PERIOD + 2000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    try {
      firstEndTime=System.currentTimeMillis();
      lease.free();
      LOG.info(name + " freed lease " + lease.getLeaseID());
    }
 catch (    StorageException e) {
      fail("Unanticipated exception");
    }
  }
 else   if (name.equals("second-thread")) {
    try {
      Thread.sleep(2000);
    }
 catch (    InterruptedException e) {
      Thread.currentThread().interrupt();
    }
    try {
      LOG.info(name + " before getting lease");
      lease=nfs.getStore().acquireLease(key);
      secondStartTime=System.currentTimeMillis();
      LOG.info(name + " acquired lease " + lease.getLeaseID());
    }
 catch (    AzureException e) {
      assertTrue("Unanticipated exception",false);
    }
    assertTrue(lease != null);
    try {
      lease.free();
      LOG.info(name + " freed lease " + lease.getLeaseID());
    }
 catch (    StorageException e) {
      assertTrue("Unanticipated exception",false);
    }
  }
 else {
    assertTrue("Unknown thread name",false);
  }
  LOG.info(name + " is exiting.");
}
