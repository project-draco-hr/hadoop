{
  int n1=WritableUtils.decodeVIntSize(b1[s1]);
  int n2=WritableUtils.decodeVIntSize(b2[s2]);
  List<KeyDescription> allKeySpecs=keyFieldHelper.keySpecs();
  if (allKeySpecs.size() == 0) {
    return compareBytes(b1,s1 + n1,l1 - n1,b2,s2 + n2,l2 - n2);
  }
  int[] lengthIndicesFirst=keyFieldHelper.getWordLengths(b1,s1 + n1,s1 + l1);
  int[] lengthIndicesSecond=keyFieldHelper.getWordLengths(b2,s2 + n2,s2 + l2);
  for (  KeyDescription keySpec : allKeySpecs) {
    int startCharFirst=keyFieldHelper.getStartOffset(b1,s1 + n1,s1 + l1,lengthIndicesFirst,keySpec);
    int endCharFirst=keyFieldHelper.getEndOffset(b1,s1 + n1,s1 + l1,lengthIndicesFirst,keySpec);
    int startCharSecond=keyFieldHelper.getStartOffset(b2,s2 + n2,s2 + l2,lengthIndicesSecond,keySpec);
    int endCharSecond=keyFieldHelper.getEndOffset(b2,s2 + n2,s2 + l2,lengthIndicesSecond,keySpec);
    int result;
    if ((result=compareByteSequence(b1,startCharFirst,endCharFirst,b2,startCharSecond,endCharSecond,keySpec)) != 0) {
      return result;
    }
  }
  return 0;
}
