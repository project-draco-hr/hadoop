{
  if (options.getNumListstatusThreads() > 0) {
    numListstatusThreads=options.getNumListstatusThreads();
  }
  try {
    for (    Path path : options.getSourcePaths()) {
      FileSystem sourceFS=path.getFileSystem(getConf());
      final boolean preserveAcls=options.shouldPreserve(FileAttribute.ACL);
      final boolean preserveXAttrs=options.shouldPreserve(FileAttribute.XATTR);
      final boolean preserveRawXAttrs=options.shouldPreserveRawXattrs();
      path=makeQualified(path);
      FileStatus rootStatus=sourceFS.getFileStatus(path);
      Path sourcePathRoot=computeSourceRootPath(rootStatus,options);
      FileStatus[] sourceFiles=sourceFS.listStatus(path);
      boolean explore=(sourceFiles != null && sourceFiles.length > 0);
      if (!explore || rootStatus.isDirectory()) {
        CopyListingFileStatus rootCopyListingStatus=DistCpUtils.toCopyListingFileStatus(sourceFS,rootStatus,preserveAcls,preserveXAttrs,preserveRawXAttrs);
        writeToFileListingRoot(fileListWriter,rootCopyListingStatus,sourcePathRoot,options);
      }
      if (explore) {
        ArrayList<FileStatus> sourceDirs=new ArrayList<FileStatus>();
        for (        FileStatus sourceStatus : sourceFiles) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("Recording source-path: " + sourceStatus.getPath() + " for copy.");
          }
          CopyListingFileStatus sourceCopyListingStatus=DistCpUtils.toCopyListingFileStatus(sourceFS,sourceStatus,preserveAcls && sourceStatus.isDirectory(),preserveXAttrs && sourceStatus.isDirectory(),preserveRawXAttrs && sourceStatus.isDirectory());
          writeToFileListing(fileListWriter,sourceCopyListingStatus,sourcePathRoot);
          if (sourceStatus.isDirectory()) {
            if (LOG.isDebugEnabled()) {
              LOG.debug("Adding source dir for traverse: " + sourceStatus.getPath());
            }
            sourceDirs.add(sourceStatus);
          }
        }
        traverseDirectory(fileListWriter,sourceFS,sourceDirs,sourcePathRoot,options);
      }
    }
    fileListWriter.close();
    printStats();
    LOG.info("Build file listing completed.");
    fileListWriter=null;
  }
  finally {
    IOUtils.cleanup(LOG,fileListWriter);
  }
}
