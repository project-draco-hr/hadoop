{
  List<AbstractQueue> unConfiguredQueues=new ArrayList<AbstractQueue>();
  float totalCapacity=0;
  for (  AbstractQueue q : children) {
    if (q.qsc.getCapacityPercent() == -1) {
      unConfiguredQueues.add(q);
    }
 else {
      LOG.info(" the capacity percent of the queue " + q.getName() + "  is "+ ""+ q.qsc.getCapacityPercent());
      totalCapacity+=q.qsc.getCapacityPercent();
      q.distributeUnConfiguredCapacity();
    }
  }
  if (!unConfiguredQueues.isEmpty()) {
    LOG.info("Total capacity to be distributed among the others are  " + "" + (100 - totalCapacity));
    float capacityShare=(100 - totalCapacity) / unConfiguredQueues.size();
    for (    AbstractQueue q : unConfiguredQueues) {
      if (q.qsc.getMaxCapacityPercent() > 0) {
        if (q.qsc.getMaxCapacityPercent() < capacityShare) {
          throw new IllegalStateException(" Capacity share (" + capacityShare + ")for unconfigured queue "+ q.getName()+ " is greater than its maximum-capacity percentage "+ q.qsc.getMaxCapacityPercent());
        }
      }
      q.qsc.setCapacityPercent(capacityShare);
      LOG.info("Capacity share for un configured queue " + q.getName() + ""+ " is "+ capacityShare);
      q.distributeUnConfiguredCapacity();
    }
  }
}
