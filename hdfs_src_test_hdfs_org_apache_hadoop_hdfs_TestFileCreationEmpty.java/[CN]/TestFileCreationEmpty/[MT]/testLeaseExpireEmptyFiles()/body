{
  final Thread.UncaughtExceptionHandler oldUEH=Thread.getDefaultUncaughtExceptionHandler();
  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler(){
    public void uncaughtException(    Thread t,    Throwable e){
      if (e instanceof ConcurrentModificationException) {
        FSNamesystem.LOG.error("t=" + t,e);
        isConcurrentModificationException=true;
      }
    }
  }
);
  System.out.println("testLeaseExpireEmptyFiles start");
  final long leasePeriod=1000;
  final int DATANODE_NUM=3;
  final Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,1000);
  conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_NUM).build();
  try {
    cluster.waitActive();
    DistributedFileSystem dfs=(DistributedFileSystem)cluster.getFileSystem();
    TestFileCreation.createFile(dfs,new Path("/foo"),DATANODE_NUM);
    TestFileCreation.createFile(dfs,new Path("/foo2"),DATANODE_NUM);
    TestFileCreation.createFile(dfs,new Path("/foo3"),DATANODE_NUM);
    cluster.setLeasePeriod(leasePeriod,leasePeriod);
    try {
      Thread.sleep(5 * leasePeriod);
    }
 catch (    InterruptedException e) {
    }
    assertFalse(isConcurrentModificationException);
  }
  finally {
    Thread.setDefaultUncaughtExceptionHandler(oldUEH);
    cluster.shutdown();
  }
}
