{
  Configuration conf=new Configuration();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  try {
    List<DataNode> datanodes=cluster.getDataNodes();
    Assert.assertEquals(datanodes.size(),1);
    DataNode datanode=datanodes.get(0);
    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
    ObjectName mxbeanName=new ObjectName("Hadoop:service=DataNode,name=DataNodeInfo");
    String clusterId=(String)mbs.getAttribute(mxbeanName,"ClusterId");
    Assert.assertEquals(datanode.getClusterId(),clusterId);
    String version=(String)mbs.getAttribute(mxbeanName,"Version");
    Assert.assertEquals(datanode.getVersion(),version);
    String softwareVersion=(String)mbs.getAttribute(mxbeanName,"SoftwareVersion");
    Assert.assertEquals(datanode.getSoftwareVersion(),softwareVersion);
    Assert.assertEquals(version,softwareVersion + ", r" + datanode.getRevision());
    String rpcPort=(String)mbs.getAttribute(mxbeanName,"RpcPort");
    Assert.assertEquals(datanode.getRpcPort(),rpcPort);
    String httpPort=(String)mbs.getAttribute(mxbeanName,"HttpPort");
    Assert.assertEquals(datanode.getHttpPort(),httpPort);
    String namenodeAddresses=(String)mbs.getAttribute(mxbeanName,"NamenodeAddresses");
    Assert.assertEquals(datanode.getNamenodeAddresses(),namenodeAddresses);
    String volumeInfo=(String)mbs.getAttribute(mxbeanName,"VolumeInfo");
    Assert.assertEquals(replaceDigits(datanode.getVolumeInfo()),replaceDigits(volumeInfo));
    int xceiverCount=(Integer)mbs.getAttribute(mxbeanName,"XceiverCount");
    Assert.assertEquals(datanode.getXceiverCount(),xceiverCount);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
