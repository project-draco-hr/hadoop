{
  boolean lastPacketInBlock=false;
  final long startTime=ClientTraceLog.isInfoEnabled() ? System.nanoTime() : 0;
  while (isRunning() && !lastPacketInBlock) {
    long totalAckTimeNanos=0;
    boolean isInterrupted=false;
    try {
      Packet pkt=null;
      long expected=-2;
      PipelineAck ack=new PipelineAck();
      long seqno=PipelineAck.UNKOWN_SEQNO;
      long ackRecvNanoTime=0;
      try {
        if (type != PacketResponderType.LAST_IN_PIPELINE && !mirrorError) {
          ack.readFields(downstreamIn);
          ackRecvNanoTime=System.nanoTime();
          if (LOG.isDebugEnabled()) {
            LOG.debug(myString + " got " + ack);
          }
          seqno=ack.getSeqno();
        }
        if (seqno != PipelineAck.UNKOWN_SEQNO || type == PacketResponderType.LAST_IN_PIPELINE) {
          pkt=waitForAckHead(seqno);
          if (!isRunning()) {
            break;
          }
          expected=pkt.seqno;
          if (type == PacketResponderType.HAS_DOWNSTREAM_IN_PIPELINE && seqno != expected) {
            throw new IOException(myString + "seqno: expected=" + expected+ ", received="+ seqno);
          }
          if (type == PacketResponderType.HAS_DOWNSTREAM_IN_PIPELINE) {
            totalAckTimeNanos=ackRecvNanoTime - pkt.ackEnqueueNanoTime;
            long ackTimeNanos=totalAckTimeNanos - ack.getDownstreamAckTimeNanos();
            if (ackTimeNanos < 0) {
              if (LOG.isDebugEnabled()) {
                LOG.debug("Calculated invalid ack time: " + ackTimeNanos + "ns.");
              }
            }
 else {
              datanode.metrics.addPacketAckRoundTripTimeNanos(ackTimeNanos);
            }
          }
          lastPacketInBlock=pkt.lastPacketInBlock;
        }
      }
 catch (      InterruptedException ine) {
        isInterrupted=true;
      }
catch (      IOException ioe) {
        if (Thread.interrupted()) {
          isInterrupted=true;
        }
 else {
          mirrorError=true;
          LOG.info(myString,ioe);
        }
      }
      if (Thread.interrupted() || isInterrupted) {
        LOG.info(myString + ": Thread is interrupted.");
        running=false;
        continue;
      }
      if (lastPacketInBlock) {
        finalizeBlock(startTime);
      }
      sendAckUpstream(ack,expected,totalAckTimeNanos,(pkt != null ? pkt.offsetInBlock : 0));
      if (pkt != null) {
        removeAckHead();
      }
    }
 catch (    IOException e) {
      LOG.warn("IOException in BlockReceiver.run(): ",e);
      if (running) {
        try {
          datanode.checkDiskError(e);
        }
 catch (        IOException ioe) {
          LOG.warn("DataNode.checkDiskError failed in run() with: ",ioe);
        }
        LOG.info(myString,e);
        running=false;
        if (!Thread.interrupted()) {
          receiverThread.interrupt();
        }
      }
    }
catch (    Throwable e) {
      if (running) {
        LOG.info(myString,e);
        running=false;
        receiverThread.interrupt();
      }
    }
  }
  LOG.info(myString + " terminating");
}
