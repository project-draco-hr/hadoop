{
  SwiftTestUtils.skip("Skipping unreliable test");
  final String message="message";
  final Path fileToRead=new Path(TEST_RACE_CONDITION_ON_DELETE_DIR + "/files/many-files/file");
  final ExecutorService executorService=Executors.newFixedThreadPool(2);
  fs.create(new Path(TEST_RACE_CONDITION_ON_DELETE_DIR + "/file/test/file1"));
  fs.create(new Path(TEST_RACE_CONDITION_ON_DELETE_DIR + "/documents/doc1"));
  fs.create(new Path(TEST_RACE_CONDITION_ON_DELETE_DIR + "/pictures/picture"));
  executorService.execute(new Runnable(){
    @Override public void run(){
      try {
        assertDeleted(new Path(TEST_RACE_CONDITION_ON_DELETE_DIR),true);
      }
 catch (      IOException e) {
        LOG.warn("deletion thread:" + e,e);
        thread1Ex=e;
        throw new RuntimeException(e);
      }
    }
  }
);
  executorService.execute(new Runnable(){
    @Override public void run(){
      try {
        final FSDataOutputStream outputStream=fs.create(fileToRead);
        outputStream.write(message.getBytes());
        outputStream.close();
      }
 catch (      IOException e) {
        LOG.warn("writer thread:" + e,e);
        thread2Ex=e;
        throw new RuntimeException(e);
      }
    }
  }
);
  executorService.awaitTermination(1,TimeUnit.MINUTES);
  if (thread1Ex != null) {
    throw thread1Ex;
  }
  if (thread2Ex != null) {
    throw thread2Ex;
  }
  try {
    fs.open(fileToRead);
    LOG.info("concurrency test failed to trigger a failure");
  }
 catch (  FileNotFoundException expected) {
  }
}
