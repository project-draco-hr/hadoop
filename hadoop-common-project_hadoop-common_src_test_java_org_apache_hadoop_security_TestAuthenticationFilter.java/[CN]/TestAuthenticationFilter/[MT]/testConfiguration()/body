{
  Configuration conf=new Configuration();
  conf.set("hadoop.http.authentication.foo","bar");
  File testDir=new File(System.getProperty("test.build.data","target/test-dir"));
  testDir.mkdirs();
  File secretFile=new File(testDir,"http-secret.txt");
  Writer writer=new FileWriter(new File(testDir,"http-secret.txt"));
  writer.write("hadoop");
  writer.close();
  conf.set(AuthenticationFilterInitializer.PREFIX + AuthenticationFilterInitializer.SIGNATURE_SECRET_FILE,secretFile.getAbsolutePath());
  conf.set(HttpServer.BIND_ADDRESS,"barhost");
  FilterContainer container=Mockito.mock(FilterContainer.class);
  Mockito.doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      Object[] args=invocationOnMock.getArguments();
      assertEquals("authentication",args[0]);
      assertEquals(AuthenticationFilter.class.getName(),args[1]);
      Map<String,String> conf=(Map<String,String>)args[2];
      assertEquals("/",conf.get("cookie.path"));
      assertEquals("simple",conf.get("type"));
      assertEquals("36000",conf.get("token.validity"));
      assertEquals("hadoop",conf.get("signature.secret"));
      assertNull(conf.get("cookie.domain"));
      assertEquals("true",conf.get("simple.anonymous.allowed"));
      assertEquals("HTTP/barhost@LOCALHOST",conf.get("kerberos.principal"));
      assertEquals(System.getProperty("user.home") + "/hadoop.keytab",conf.get("kerberos.keytab"));
      assertEquals("bar",conf.get("foo"));
      return null;
    }
  }
).when(container).addFilter(Mockito.<String>anyObject(),Mockito.<String>anyObject(),Mockito.<Map<String,String>>anyObject());
  new AuthenticationFilterInitializer().initFilter(container,conf);
}
