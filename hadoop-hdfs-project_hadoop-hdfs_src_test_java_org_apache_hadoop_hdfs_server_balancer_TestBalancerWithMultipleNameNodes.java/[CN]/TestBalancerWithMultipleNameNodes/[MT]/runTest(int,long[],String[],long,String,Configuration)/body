{
  final int nDataNodes=capacities.length;
  LOG.info("nNameNodes=" + nNameNodes + ", nDataNodes="+ nDataNodes);
  Assert.assertEquals(nDataNodes,racks.length);
  LOG.info("RUN_TEST -1");
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleFederatedTopology(nNameNodes)).numDataNodes(nDataNodes).racks(racks).simulatedCapacities(capacities).build();
  LOG.info("RUN_TEST 0");
  try {
    cluster.waitActive();
    LOG.info("RUN_TEST 1");
    final Suite s=new Suite(cluster,nNameNodes,nDataNodes,conf);
    long totalCapacity=TestBalancer.sum(capacities);
    LOG.info("RUN_TEST 2");
    final long totalUsed=totalCapacity * 3 / 10;
    final long size=(totalUsed / nNameNodes) / s.replication;
    for (int n=0; n < nNameNodes; n++) {
      createFile(s,n,size);
    }
    LOG.info("RUN_TEST 3");
    cluster.startDataNodes(conf,1,true,null,new String[]{newRack},new long[]{newCapacity});
    totalCapacity+=newCapacity;
    LOG.info("RUN_TEST 4");
    runBalancer(s,totalUsed,totalCapacity);
    LOG.info("RUN_TEST 5");
  }
  finally {
    cluster.shutdown();
  }
  LOG.info("RUN_TEST 6");
}
