{
  final Path foo=new Path("/foo");
  DFSTestUtil.createFile(dfs,foo,BLOCKSIZE,REPLICATION,0);
  cluster.restartNameNode(true);
  InvalidateBlocks invalidateBlocks=(InvalidateBlocks)Whitebox.getInternalState(cluster.getNamesystem().getBlockManager(),"invalidateBlocks");
  InvalidateBlocks mockIb=Mockito.spy(invalidateBlocks);
  Mockito.doReturn(1L).when(mockIb).getInvalidationDelay();
  Whitebox.setInternalState(cluster.getNamesystem().getBlockManager(),"invalidateBlocks",mockIb);
  dfs.delete(foo,true);
  Assert.assertEquals(0,cluster.getNamesystem().getBlocksTotal());
  Assert.assertEquals(REPLICATION,cluster.getNamesystem().getPendingDeletionBlocks());
  Assert.assertEquals(REPLICATION,dfs.getPendingDeletionBlocksCount());
  Mockito.doReturn(0L).when(mockIb).getInvalidationDelay();
  waitForBlocksToDelete();
  Assert.assertEquals(0,cluster.getNamesystem().getBlocksTotal());
  Assert.assertEquals(0,cluster.getNamesystem().getPendingDeletionBlocks());
  Assert.assertEquals(0,dfs.getPendingDeletionBlocksCount());
  long nnStarted=cluster.getNamesystem().getNNStartedTimeInMillis();
  long blockDeletionStartTime=cluster.getNamesystem().getBlockDeletionStartTime();
  Assert.assertTrue(String.format("Expect blockDeletionStartTime = %d > nnStarted = %d.",blockDeletionStartTime,nnStarted),blockDeletionStartTime > nnStarted);
  Method method=DFSClient.class.getDeclaredMethod("getStateByIndex",int.class);
  method.setAccessible(true);
  long validState=(Long)method.invoke(dfs.getClient(),ClientProtocol.GET_STATS_PENDING_DELETION_BLOCKS_IDX);
  long invalidState=(Long)method.invoke(dfs.getClient(),ClientProtocol.STATS_ARRAY_LENGTH);
  Assert.assertEquals(0,validState);
  Assert.assertEquals(-1,invalidState);
}
