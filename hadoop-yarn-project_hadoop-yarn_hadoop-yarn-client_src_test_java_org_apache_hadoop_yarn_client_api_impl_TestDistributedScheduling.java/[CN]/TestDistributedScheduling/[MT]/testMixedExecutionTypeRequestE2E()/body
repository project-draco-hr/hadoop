{
  LOG.info("testDistributedSchedulingE2E - Register");
  RegisterApplicationMasterResponse responseRegister=client.registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(NetUtils.getHostname(),1024,""));
  Assert.assertNotNull(responseRegister);
  Assert.assertNotNull(responseRegister.getQueue());
  Assert.assertNotNull(responseRegister.getApplicationACLs());
  Assert.assertNotNull(responseRegister.getClientToAMTokenMasterKey());
  Assert.assertNotNull(responseRegister.getContainersFromPreviousAttempts());
  Assert.assertNotNull(responseRegister.getSchedulerResourceTypes());
  Assert.assertNotNull(responseRegister.getMaximumResourceCapability());
  RMApp rmApp=cluster.getResourceManager().getRMContext().getRMApps().get(appId);
  Assert.assertEquals(RMAppState.RUNNING,rmApp.getState());
  LOG.info("testDistributedSchedulingE2E - Allocate");
  AllocateRequest request=createAllocateRequest(rmClient.getNodeReports(NodeState.RUNNING));
  List<ResourceRequest> askList=request.getAskList();
  List<ResourceRequest> newAskList=new ArrayList<>(askList);
  for (  ResourceRequest rr : askList) {
    if (ResourceRequest.ANY.equals(rr.getResourceName())) {
      ResourceRequest newRR=ResourceRequest.newInstance(rr.getPriority(),rr.getResourceName(),rr.getCapability(),rr.getNumContainers(),rr.getRelaxLocality(),rr.getNodeLabelExpression(),ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC,true));
      newAskList.add(newRR);
    }
  }
  request.setAskList(newAskList);
  AllocateResponse allocResponse=client.allocate(request);
  Assert.assertNotNull(allocResponse);
  Assert.assertEquals(2,allocResponse.getAllocatedContainers().size());
  for (  Container allocatedContainer : allocResponse.getAllocatedContainers()) {
    ContainerTokenIdentifier containerTokenIdentifier=BuilderUtils.newContainerTokenIdentifier(allocatedContainer.getContainerToken());
    Assert.assertEquals(ExecutionType.OPPORTUNISTIC,containerTokenIdentifier.getExecutionType());
  }
  request.setAskList(new ArrayList<ResourceRequest>());
  request.setResponseId(request.getResponseId() + 1);
  Thread.sleep(1000);
  allocResponse=client.allocate(request);
  Assert.assertNotNull(allocResponse);
  Assert.assertEquals(2,allocResponse.getAllocatedContainers().size());
  for (  Container allocatedContainer : allocResponse.getAllocatedContainers()) {
    ContainerTokenIdentifier containerTokenIdentifier=BuilderUtils.newContainerTokenIdentifier(allocatedContainer.getContainerToken());
    Assert.assertEquals(ExecutionType.GUARANTEED,containerTokenIdentifier.getExecutionType());
  }
  LOG.info("testDistributedSchedulingE2E - Finish");
}
