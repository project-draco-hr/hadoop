{
  Resource capability=Resource.newInstance(1024,1);
  Priority priority=Priority.newInstance(1);
  List<NodeReport> nodeReports=rmClient.getNodeReports(NodeState.RUNNING);
  String node=nodeReports.get(0).getNodeId().getHost();
  String rack=nodeReports.get(0).getRackName();
  String[] nodes=new String[]{node};
  String[] racks=new String[]{rack};
  AMRMClient<AMRMClient.ContainerRequest> amClient=null;
  try {
    amClient=new AMRMClientImpl<AMRMClient.ContainerRequest>(client);
    amClient.init(yarnConf);
    amClient.start();
    amClient.registerApplicationMaster(NetUtils.getHostname(),1024,"");
    ExecutionTypeRequest execTypeRequest=ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC,true);
    ContainerRequest containerRequest=new AMRMClient.ContainerRequest(capability,nodes,racks,priority,true,null,execTypeRequest);
    amClient.addContainerRequest(containerRequest);
    ContainerId opportunisticContainerId=null;
    for (int i=0; i < 10 && opportunisticContainerId == null; i++) {
      AllocateResponse allocResponse=amClient.allocate(0.1f);
      List<Container> allocatedContainers=allocResponse.getAllocatedContainers();
      for (      Container allocatedContainer : allocatedContainers) {
        assertEquals(ExecutionType.OPPORTUNISTIC,allocatedContainer.getExecutionType());
        opportunisticContainerId=allocatedContainer.getId();
      }
      sleep(100);
    }
    assertNotNull(opportunisticContainerId);
    ResourceScheduler scheduler=cluster.getResourceManager().getResourceScheduler();
    RMContainer rmContainer=scheduler.getRMContainer(opportunisticContainerId);
    assertEquals(ExecutionType.OPPORTUNISTIC,rmContainer.getExecutionType());
    amClient.releaseAssignedContainer(opportunisticContainerId);
    boolean released=false;
    for (int i=0; i < 10 && !released; i++) {
      AllocateResponse allocResponse=amClient.allocate(0.1f);
      List<ContainerStatus> completedContainers=allocResponse.getCompletedContainersStatuses();
      for (      ContainerStatus completedContainer : completedContainers) {
        ContainerId completedContainerId=completedContainer.getContainerId();
        assertEquals(completedContainerId,opportunisticContainerId);
        released=true;
      }
      if (!released) {
        sleep(100);
      }
    }
    assertTrue(released);
    rmContainer=scheduler.getRMContainer(opportunisticContainerId);
    assertNull(rmContainer);
    amClient.unregisterApplicationMaster(FinalApplicationStatus.SUCCEEDED,null,null);
  }
  finally {
    if (amClient != null && amClient.getServiceState() == Service.STATE.STARTED) {
      amClient.close();
    }
  }
}
