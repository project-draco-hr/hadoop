{
  TaskTrackerStatus status=taskTracker.getStatus();
  long totalVirtualMemoryOnTT=getConf().getLong("totalVmemOnTT",JobConf.DISABLED_MEMORY_LIMIT);
  long totalPhysicalMemoryOnTT=getConf().getLong("totalPmemOnTT",JobConf.DISABLED_MEMORY_LIMIT);
  long mapSlotMemorySize=getConf().getLong("mapSlotMemorySize",JobConf.DISABLED_MEMORY_LIMIT);
  long reduceSlotMemorySize=getConf().getLong("reduceSlotMemorySize",JobConf.DISABLED_MEMORY_LIMIT);
  long availableVirtualMemoryOnTT=getConf().getLong("availableVmemOnTT",JobConf.DISABLED_MEMORY_LIMIT);
  long availablePhysicalMemoryOnTT=getConf().getLong("availablePmemOnTT",JobConf.DISABLED_MEMORY_LIMIT);
  long cumulativeCpuTime=getConf().getLong("cumulativeCpuTime",TaskTrackerStatus.UNAVAILABLE);
  long cpuFrequency=getConf().getLong("cpuFrequency",TaskTrackerStatus.UNAVAILABLE);
  int numProcessors=getConf().getInt("numProcessors",TaskTrackerStatus.UNAVAILABLE);
  float cpuUsage=getConf().getFloat("cpuUsage",TaskTrackerStatus.UNAVAILABLE);
  long reportedTotalVirtualMemoryOnTT=status.getResourceStatus().getTotalVirtualMemory();
  long reportedTotalPhysicalMemoryOnTT=status.getResourceStatus().getTotalPhysicalMemory();
  long reportedMapSlotMemorySize=status.getResourceStatus().getMapSlotMemorySizeOnTT();
  long reportedReduceSlotMemorySize=status.getResourceStatus().getReduceSlotMemorySizeOnTT();
  long reportedAvailableVirtualMemoryOnTT=status.getResourceStatus().getAvailabelVirtualMemory();
  long reportedAvailablePhysicalMemoryOnTT=status.getResourceStatus().getAvailablePhysicalMemory();
  long reportedCumulativeCpuTime=status.getResourceStatus().getCumulativeCpuTime();
  long reportedCpuFrequency=status.getResourceStatus().getCpuFrequency();
  int reportedNumProcessors=status.getResourceStatus().getNumProcessors();
  float reportedCpuUsage=status.getResourceStatus().getCpuUsage();
  message="expected values : " + "(totalVirtualMemoryOnTT, totalPhysicalMemoryOnTT, " + "availableVirtualMemoryOnTT, availablePhysicalMemoryOnTT, "+ "mapSlotMemSize, reduceSlotMemorySize, cumulativeCpuTime, "+ "cpuFrequency, numProcessors, cpuUsage) = (" + totalVirtualMemoryOnTT + ", "+ totalPhysicalMemoryOnTT+ ","+ availableVirtualMemoryOnTT+ ", "+ availablePhysicalMemoryOnTT+ ","+ mapSlotMemorySize+ ","+ reduceSlotMemorySize+ ","+ cumulativeCpuTime+ ","+ cpuFrequency+ ","+ numProcessors+ ","+ cpuUsage+ ")";
  message+="\nreported values : " + "(totalVirtualMemoryOnTT, totalPhysicalMemoryOnTT, " + "availableVirtualMemoryOnTT, availablePhysicalMemoryOnTT, "+ "reportedMapSlotMemorySize, reportedReduceSlotMemorySize, "+ "reportedCumulativeCpuTime, reportedCpuFrequency, "+ "reportedNumProcessors, cpuUsage) = (" + reportedTotalVirtualMemoryOnTT + ", "+ reportedTotalPhysicalMemoryOnTT+ ","+ reportedAvailableVirtualMemoryOnTT+ ", "+ reportedAvailablePhysicalMemoryOnTT+ ","+ reportedMapSlotMemorySize+ ","+ reportedReduceSlotMemorySize+ ","+ reportedCumulativeCpuTime+ ","+ reportedCpuFrequency+ ","+ reportedNumProcessors+ ","+ reportedCpuUsage+ ")";
  LOG.info(message);
  hasDynamicValuePassed=true;
  for (  TaskStatus taskStatus : status.getTaskReports()) {
    Counters counters=taskStatus.getCounters();
    long procCumulativeCpuTime=0;
    long procVirtualMemorySize=getConf().getLong("procVirtualMemorySize",-1);
    long procPhysicalMemorySize=getConf().getLong("procPhysicalMemorySize",-1);
    long reportedProcCumulativeCpuTime=counters.findCounter(TaskCounter.CPU_MILLISECONDS).getValue();
    long reportedProcVirtualMemorySize=counters.findCounter(TaskCounter.VIRTUAL_MEMORY_BYTES).getValue();
    long reportedProcPhysicalMemorySize=counters.findCounter(TaskCounter.PHYSICAL_MEMORY_BYTES).getValue();
    String procMessage="expected values : " + "(procCumulativeCpuTime, procVirtualMemorySize," + " procPhysicalMemorySize) = (" + procCumulativeCpuTime + ", "+ procVirtualMemorySize+ ", "+ procPhysicalMemorySize+ ")";
    procMessage+="\nreported values : " + "(procCumulativeCpuTime, procVirtualMemorySize," + " procPhysicalMemorySize) = (" + reportedProcCumulativeCpuTime + ", "+ reportedProcVirtualMemorySize+ ", "+ reportedProcPhysicalMemorySize+ ")";
    LOG.info(procMessage);
    message+="\n" + procMessage;
    if (procCumulativeCpuTime != reportedProcCumulativeCpuTime || procVirtualMemorySize != reportedProcVirtualMemorySize || procPhysicalMemorySize != reportedProcPhysicalMemorySize) {
      hasDynamicValuePassed=false;
    }
  }
  hasPassed=true;
  if (totalVirtualMemoryOnTT != reportedTotalVirtualMemoryOnTT || totalPhysicalMemoryOnTT != reportedTotalPhysicalMemoryOnTT || mapSlotMemorySize != reportedMapSlotMemorySize || reduceSlotMemorySize != reportedReduceSlotMemorySize || numProcessors != reportedNumProcessors) {
    hasPassed=false;
  }
  if (availableVirtualMemoryOnTT != reportedAvailableVirtualMemoryOnTT || availablePhysicalMemoryOnTT != reportedAvailablePhysicalMemoryOnTT || cumulativeCpuTime != reportedCumulativeCpuTime || cpuFrequency != reportedCpuFrequency || cpuUsage != reportedCpuUsage) {
    hasDynamicValuePassed=false;
  }
  return super.assignTasks(taskTracker);
}
