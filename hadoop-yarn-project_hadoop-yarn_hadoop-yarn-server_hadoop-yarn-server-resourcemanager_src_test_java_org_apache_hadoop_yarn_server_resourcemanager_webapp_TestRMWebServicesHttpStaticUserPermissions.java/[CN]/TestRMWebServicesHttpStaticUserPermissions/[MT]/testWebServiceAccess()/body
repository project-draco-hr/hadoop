{
  ApplicationSubmissionContextInfo app=new ApplicationSubmissionContextInfo();
  String appid="application_123_0";
  app.setApplicationId(appid);
  String submitAppRequestBody=TestRMWebServicesDelegationTokenAuthentication.getMarshalledAppInfo(app);
  URL url=new URL("http://localhost:8088/ws/v1/cluster/apps");
  HttpURLConnection conn=(HttpURLConnection)url.openConnection();
  TestRMWebServicesDelegationTokenAuthentication.setupConn(conn,"GET","","");
  try {
    conn.getInputStream();
    assertEquals(Status.OK.getStatusCode(),conn.getResponseCode());
  }
 catch (  IOException e) {
    fail("Got " + conn.getResponseCode() + " instead of 200 accessing "+ url.toString());
  }
  conn.disconnect();
  Map<String,Helper> urlRequestMap=new HashMap<String,Helper>();
  String killAppRequestBody="<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n" + "<appstate>\n" + "  <state>KILLED</state>\n"+ "</appstate>";
  urlRequestMap.put("http://localhost:8088/ws/v1/cluster/apps",new Helper("POST",submitAppRequestBody));
  urlRequestMap.put("http://localhost:8088/ws/v1/cluster/apps/new-application",new Helper("POST",""));
  urlRequestMap.put("http://localhost:8088/ws/v1/cluster/apps/app_123_1/state",new Helper("PUT",killAppRequestBody));
  for (  Map.Entry<String,Helper> entry : urlRequestMap.entrySet()) {
    URL reqURL=new URL(entry.getKey());
    conn=(HttpURLConnection)reqURL.openConnection();
    String method=entry.getValue().method;
    String body=entry.getValue().requestBody;
    TestRMWebServicesDelegationTokenAuthentication.setupConn(conn,method,"application/xml",body);
    try {
      conn.getInputStream();
      fail("Request " + entry.getKey() + "succeeded but should have failed");
    }
 catch (    IOException e) {
      assertEquals(Status.FORBIDDEN.getStatusCode(),conn.getResponseCode());
      InputStream errorStream=conn.getErrorStream();
      String error="";
      BufferedReader reader=new BufferedReader(new InputStreamReader(errorStream,"UTF8"));
      for (String line; (line=reader.readLine()) != null; ) {
        error+=line;
      }
      reader.close();
      errorStream.close();
      assertEquals("The default static user cannot carry out this operation.",error);
    }
    conn.disconnect();
  }
}
