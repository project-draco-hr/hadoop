{
  final Path file=new Path(ecDir,"file");
  FSDataOutputStream out=null;
  try {
    out=dfs.create(file,(short)1);
    INodeFile fileNode=dir.getINode4Write(file.toString()).asFile();
    ExtendedBlock previous=null;
    Block newBlock=DFSTestUtil.addBlockToFile(true,cluster.getDataNodes(),dfs,cluster.getNamesystem(),file.toString(),fileNode,dfs.getClient().getClientName(),previous,1,0);
    previous=new ExtendedBlock(cluster.getNamesystem().getBlockPoolId(),newBlock);
    final INodeDirectory dirNode=dir.getINode4Write(ecDir.toString()).asDirectory();
    final long spaceUsed=dirNode.getDirectoryWithQuotaFeature().getSpaceConsumed().getStorageSpace();
    final long diskUsed=dirNode.getDirectoryWithQuotaFeature().getSpaceConsumed().getTypeSpaces().get(StorageType.DISK);
    Assert.assertEquals(BLOCK_SIZE * GROUP_SIZE,spaceUsed);
    Assert.assertEquals(BLOCK_SIZE * GROUP_SIZE,diskUsed);
    dfs.getClient().getNamenode().complete(file.toString(),dfs.getClient().getClientName(),previous,fileNode.getId());
    final long actualSpaceUsed=dirNode.getDirectoryWithQuotaFeature().getSpaceConsumed().getStorageSpace();
    final long actualDiskUsed=dirNode.getDirectoryWithQuotaFeature().getSpaceConsumed().getTypeSpaces().get(StorageType.DISK);
    Assert.assertEquals(StripedFileTestUtil.BLOCK_STRIPED_CELL_SIZE * GROUP_SIZE,actualSpaceUsed);
    Assert.assertEquals(StripedFileTestUtil.BLOCK_STRIPED_CELL_SIZE * GROUP_SIZE,actualDiskUsed);
  }
  finally {
    IOUtils.cleanup(null,out);
  }
}
