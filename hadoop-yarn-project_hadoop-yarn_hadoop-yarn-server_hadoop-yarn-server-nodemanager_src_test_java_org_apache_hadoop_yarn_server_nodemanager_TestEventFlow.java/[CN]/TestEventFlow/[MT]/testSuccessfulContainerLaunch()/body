{
  FileContext localFS=FileContext.getLocalFSFileContext();
  localFS.delete(new Path(localDir.getAbsolutePath()),true);
  localFS.delete(new Path(localLogDir.getAbsolutePath()),true);
  localFS.delete(new Path(remoteLogDir.getAbsolutePath()),true);
  localDir.mkdir();
  localLogDir.mkdir();
  remoteLogDir.mkdir();
  YarnConfiguration conf=new YarnConfiguration();
  Context context=new NMContext(new NMContainerTokenSecretManager(conf),new NMTokenSecretManagerInNM(),null,null){
    @Override public int getHttpPort(){
      return 1234;
    }
  }
;
  conf.set(YarnConfiguration.NM_LOCAL_DIRS,localDir.getAbsolutePath());
  conf.set(YarnConfiguration.NM_LOG_DIRS,localLogDir.getAbsolutePath());
  conf.set(YarnConfiguration.NM_REMOTE_APP_LOG_DIR,remoteLogDir.getAbsolutePath());
  ContainerExecutor exec=new DefaultContainerExecutor();
  exec.setConf(conf);
  DeletionService del=new DeletionService(exec);
  Dispatcher dispatcher=new AsyncDispatcher();
  NodeHealthCheckerService healthChecker=new NodeHealthCheckerService();
  healthChecker.init(conf);
  LocalDirsHandlerService dirsHandler=healthChecker.getDiskHandler();
  NodeManagerMetrics metrics=NodeManagerMetrics.create();
  NodeStatusUpdater nodeStatusUpdater=new NodeStatusUpdaterImpl(context,dispatcher,healthChecker,metrics){
    @Override protected ResourceTracker getRMClient(){
      return new LocalRMInterface();
    }
    @Override protected void stopRMProxy(){
      return;
    }
    @Override protected void startStatusUpdater(){
      return;
    }
    @Override public long getRMIdentifier(){
      return SIMULATED_RM_IDENTIFIER;
    }
  }
;
  DummyContainerManager containerManager=new DummyContainerManager(context,exec,del,nodeStatusUpdater,metrics,new ApplicationACLsManager(conf),dirsHandler);
  nodeStatusUpdater.init(conf);
  ((NMContext)context).setContainerManager(containerManager);
  nodeStatusUpdater.start();
  containerManager.init(conf);
  containerManager.start();
  ContainerLaunchContext launchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  ApplicationId applicationId=ApplicationId.newInstance(0,0);
  ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.newInstance(applicationId,0);
  ContainerId cID=ContainerId.newInstance(applicationAttemptId,0);
  String user="testing";
  StartContainerRequest scRequest=StartContainerRequest.newInstance(launchContext,TestContainerManager.createContainerToken(cID,SIMULATED_RM_IDENTIFIER,context.getNodeId(),user,context.getContainerTokenSecretManager()));
  List<StartContainerRequest> list=new ArrayList<StartContainerRequest>();
  list.add(scRequest);
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  BaseContainerManagerTest.waitForContainerState(containerManager,cID,ContainerState.RUNNING);
  List<ContainerId> containerIds=new ArrayList<ContainerId>();
  containerIds.add(cID);
  StopContainersRequest stopRequest=StopContainersRequest.newInstance(containerIds);
  containerManager.stopContainers(stopRequest);
  BaseContainerManagerTest.waitForContainerState(containerManager,cID,ContainerState.COMPLETE);
  containerManager.stop();
}
