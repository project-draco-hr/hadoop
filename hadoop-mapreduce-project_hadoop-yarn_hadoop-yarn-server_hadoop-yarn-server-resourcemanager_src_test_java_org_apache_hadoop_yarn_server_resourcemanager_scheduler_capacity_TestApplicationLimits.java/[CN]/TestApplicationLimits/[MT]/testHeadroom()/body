{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  csConf.setUserLimit(CapacityScheduler.ROOT + "." + A,25);
  setupQueueConfiguration(csConf);
  CapacitySchedulerContext csContext=mock(CapacitySchedulerContext.class);
  when(csContext.getConfiguration()).thenReturn(csConf);
  when(csContext.getMinimumResourceCapability()).thenReturn(Resources.createResource(GB));
  when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(16 * GB));
  Resource clusterResource=Resources.createResource(100 * 16 * GB);
  when(csContext.getClusterResources()).thenReturn(clusterResource);
  Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
  CapacityScheduler.parseQueue(csContext,csConf,null,"root",queues,queues,CapacityScheduler.queueComparator,CapacityScheduler.applicationComparator,TestUtils.spyHook);
  LeafQueue queue=TestLeafQueue.stubLeafQueue((LeafQueue)queues.get(A));
  String host_0="host_0";
  String rack_0="rack_0";
  SchedulerNode node_0=TestUtils.getMockNode(host_0,rack_0,0,16 * GB);
  final String user_0="user_0";
  final String user_1="user_1";
  int APPLICATION_ID=0;
  SchedulerApp app_0_0=getMockApplication(APPLICATION_ID++,user_0);
  queue.submitApplication(app_0_0,user_0,A);
  queue.assignContainers(clusterResource,node_0);
  Resource expectedHeadroom=Resources.createResource(10 * 16 * GB);
  verify(app_0_0).setAvailableResourceLimit(eq(expectedHeadroom));
  SchedulerApp app_0_1=getMockApplication(APPLICATION_ID++,user_0);
  queue.submitApplication(app_0_1,user_0,A);
  queue.assignContainers(clusterResource,node_0);
  verify(app_0_0,times(2)).setAvailableResourceLimit(eq(expectedHeadroom));
  verify(app_0_1).setAvailableResourceLimit(eq(expectedHeadroom));
  SchedulerApp app_1_0=getMockApplication(APPLICATION_ID++,user_1);
  queue.submitApplication(app_1_0,user_1,A);
  queue.assignContainers(clusterResource,node_0);
  expectedHeadroom=Resources.createResource(10 * 16 * GB / 2);
  verify(app_0_0).setAvailableResourceLimit(eq(expectedHeadroom));
  verify(app_0_1).setAvailableResourceLimit(eq(expectedHeadroom));
  verify(app_1_0).setAvailableResourceLimit(eq(expectedHeadroom));
  clusterResource=Resources.createResource(90 * 16 * GB);
  queue.assignContainers(clusterResource,node_0);
  expectedHeadroom=Resources.createResource(9 * 16 * GB / 2);
  verify(app_0_0).setAvailableResourceLimit(eq(expectedHeadroom));
  verify(app_0_1).setAvailableResourceLimit(eq(expectedHeadroom));
  verify(app_1_0).setAvailableResourceLimit(eq(expectedHeadroom));
}
