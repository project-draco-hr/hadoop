{
  this.readLock.lock();
  try {
    int numUsedContainers=0;
    int numReservedContainers=0;
    int reservedResources=0;
    int currentConsumption=0;
    SchedulerAppReport schedApp=scheduler.getSchedulerAppInfo(this.getAppAttemptId());
    Collection<RMContainer> liveContainers;
    Collection<RMContainer> reservedContainers;
    if (schedApp != null) {
      liveContainers=schedApp.getLiveContainers();
      reservedContainers=schedApp.getReservedContainers();
      if (liveContainers != null) {
        numUsedContainers=liveContainers.size();
        for (        RMContainer lc : liveContainers) {
          currentConsumption+=lc.getContainer().getResource().getMemory();
        }
      }
      if (reservedContainers != null) {
        numReservedContainers=reservedContainers.size();
        for (        RMContainer rc : reservedContainers) {
          reservedResources+=rc.getContainer().getResource().getMemory();
        }
      }
    }
    ApplicationResourceUsageReport appResources=recordFactory.newRecordInstance(ApplicationResourceUsageReport.class);
    appResources.setNumUsedContainers(numUsedContainers);
    appResources.setNumReservedContainers(numReservedContainers);
    appResources.setUsedResources(Resources.createResource(currentConsumption));
    appResources.setReservedResources(Resources.createResource(reservedResources));
    appResources.setNeededResources(Resources.createResource(currentConsumption + reservedResources));
    return appResources;
  }
  finally {
    this.readLock.unlock();
  }
}
