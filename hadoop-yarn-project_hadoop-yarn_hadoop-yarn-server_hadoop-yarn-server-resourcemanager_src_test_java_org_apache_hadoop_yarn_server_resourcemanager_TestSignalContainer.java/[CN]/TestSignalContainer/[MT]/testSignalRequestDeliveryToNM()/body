{
  Logger rootLogger=LogManager.getRootLogger();
  rootLogger.setLevel(Level.DEBUG);
  MockRM rm=new MockRM();
  rm.start();
  MockNM nm1=rm.registerNode("h1:1234",5000);
  RMApp app=rm.submitApp(2000);
  nm1.nodeHeartbeat(true);
  RMAppAttempt attempt=app.getCurrentAppAttempt();
  MockAM am=rm.sendAMLaunched(attempt.getAppAttemptId());
  am.registerAppAttempt();
  final int request=2;
  am.allocate("h1",1000,request,new ArrayList<ContainerId>());
  nm1.nodeHeartbeat(true);
  List<Container> conts=null;
  int contReceived=0;
  int waitCount=0;
  while (contReceived < request && waitCount++ < 200) {
    LOG.info("Got " + contReceived + " containers. Waiting to get "+ request);
    Thread.sleep(100);
    conts=am.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
    contReceived+=conts.size();
  }
  Assert.assertEquals(request,contReceived);
  for (  Container container : conts) {
    rm.signalContainer(container.getId(),SignalContainerCommand.OUTPUT_THREAD_DUMP);
  }
  NodeHeartbeatResponse resp;
  List<SignalContainerRequest> contsToSignal;
  int signaledConts=0;
  waitCount=0;
  while (signaledConts < request && waitCount++ < 200) {
    LOG.info("Waiting to get signalcontainer events.. signaledConts: " + signaledConts);
    resp=nm1.nodeHeartbeat(true);
    contsToSignal=resp.getContainersToSignalList();
    signaledConts+=contsToSignal.size();
    Thread.sleep(100);
  }
  Assert.assertEquals(request,signaledConts);
  am.unregisterAppAttempt();
  nm1.nodeHeartbeat(attempt.getAppAttemptId(),1,ContainerState.COMPLETE);
  am.waitForState(RMAppAttemptState.FINISHED);
  rm.stop();
}
