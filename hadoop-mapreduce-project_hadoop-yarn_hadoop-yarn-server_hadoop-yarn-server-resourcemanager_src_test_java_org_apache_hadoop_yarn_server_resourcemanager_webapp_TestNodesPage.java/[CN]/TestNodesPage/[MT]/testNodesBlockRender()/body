{
  final int numberOfRacks=2;
  final int numberOfNodesPerRack=2;
  final int numberOfThInMetricsTable=9;
  final int numberOfActualTableHeaders=10;
  Injector injector=WebAppTests.createMockInjector(RMContext.class,TestRMWebApp.mockRMContext(3,numberOfRacks,numberOfNodesPerRack,8 * TestRMWebApp.GiB),new Module(){
    @Override public void configure(    Binder binder){
      try {
        binder.bind(ResourceManager.class).toInstance(TestRMWebApp.mockRm(3,numberOfRacks,numberOfNodesPerRack,8 * TestRMWebApp.GiB));
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  injector.getInstance(NodesBlock.class).render();
  PrintWriter writer=injector.getInstance(PrintWriter.class);
  WebAppTests.flushOutput(injector);
  Mockito.verify(writer,Mockito.times(numberOfActualTableHeaders + numberOfThInMetricsTable)).print("<th");
  Mockito.verify(writer,Mockito.times(numberOfRacks * numberOfNodesPerRack * numberOfActualTableHeaders + numberOfThInMetricsTable)).print("<td");
}
