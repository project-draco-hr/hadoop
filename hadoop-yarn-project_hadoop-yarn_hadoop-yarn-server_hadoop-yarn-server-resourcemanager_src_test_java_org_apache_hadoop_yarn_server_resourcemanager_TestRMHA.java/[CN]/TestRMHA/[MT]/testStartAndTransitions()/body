{
  StateChangeRequestInfo requestInfo=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  assertEquals(STATE_ERR,HAServiceState.INITIALIZING,rm.haService.getServiceStatus().getState());
  assertFalse("RM is ready to become active before being started",rm.haService.getServiceStatus().isReadyToBecomeActive());
  checkMonitorHealth();
  rm.start();
  checkMonitorHealth();
  checkStandbyRMFunctionality();
  rm.haService.transitionToStandby(requestInfo);
  checkMonitorHealth();
  checkStandbyRMFunctionality();
  rm.haService.transitionToActive(requestInfo);
  checkMonitorHealth();
  checkActiveRMFunctionality();
  rm.haService.transitionToActive(requestInfo);
  checkMonitorHealth();
  checkActiveRMFunctionality();
  rm.haService.transitionToStandby(requestInfo);
  checkMonitorHealth();
  checkStandbyRMFunctionality();
  rm.haService.transitionToActive(requestInfo);
  checkMonitorHealth();
  checkActiveRMFunctionality();
  rm.stop();
  assertEquals(STATE_ERR,HAServiceState.STOPPING,rm.haService.getServiceStatus().getState());
  assertFalse("RM is ready to become active even after it is stopped",rm.haService.getServiceStatus().isReadyToBecomeActive());
  assertFalse("Active RM services are started",rm.areActiveServicesRunning());
  checkMonitorHealth();
}
