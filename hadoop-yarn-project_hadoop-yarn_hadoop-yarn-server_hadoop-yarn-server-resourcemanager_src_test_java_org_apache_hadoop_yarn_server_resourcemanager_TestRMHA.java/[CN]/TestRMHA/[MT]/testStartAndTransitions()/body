{
  configuration.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  Configuration conf=new YarnConfiguration(configuration);
  rm=new MockRM(conf);
  rm.init(conf);
  StateChangeRequestInfo requestInfo=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  assertEquals(STATE_ERR,HAServiceState.INITIALIZING,rm.adminService.getServiceStatus().getState());
  assertFalse("RM is ready to become active before being started",rm.adminService.getServiceStatus().isReadyToBecomeActive());
  checkMonitorHealth();
  rm.start();
  checkMonitorHealth();
  checkStandbyRMFunctionality();
  verifyClusterMetrics(0,0,0,0,0,0);
  rm.adminService.transitionToStandby(requestInfo);
  checkMonitorHealth();
  checkStandbyRMFunctionality();
  verifyClusterMetrics(0,0,0,0,0,0);
  rm.adminService.transitionToActive(requestInfo);
  checkMonitorHealth();
  checkActiveRMFunctionality();
  verifyClusterMetrics(1,1,1,1,2048,1);
  rm.adminService.transitionToActive(requestInfo);
  checkMonitorHealth();
  checkActiveRMFunctionality();
  verifyClusterMetrics(1,2,2,2,2048,2);
  rm.adminService.transitionToStandby(requestInfo);
  checkMonitorHealth();
  checkStandbyRMFunctionality();
  verifyClusterMetrics(0,0,0,0,0,0);
  rm.adminService.transitionToActive(requestInfo);
  checkMonitorHealth();
  checkActiveRMFunctionality();
  verifyClusterMetrics(1,1,1,1,2048,1);
  rm.stop();
  assertEquals(STATE_ERR,HAServiceState.STOPPING,rm.adminService.getServiceStatus().getState());
  assertFalse("RM is ready to become active even after it is stopped",rm.adminService.getServiceStatus().isReadyToBecomeActive());
  assertFalse("Active RM services are started",rm.areActiveServicesRunning());
  checkMonitorHealth();
}
