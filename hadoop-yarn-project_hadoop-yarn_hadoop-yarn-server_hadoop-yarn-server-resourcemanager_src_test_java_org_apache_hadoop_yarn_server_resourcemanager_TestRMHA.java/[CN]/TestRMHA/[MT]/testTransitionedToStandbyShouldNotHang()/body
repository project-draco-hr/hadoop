{
  configuration.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  Configuration conf=new YarnConfiguration(configuration);
  MemoryRMStateStore memStore=new MemoryRMStateStore(){
    @Override public synchronized void updateApplicationState(    ApplicationStateData appState){
      notifyStoreOperationFailed(new StoreFencedException());
    }
  }
;
  memStore.init(conf);
  rm=new MockRM(conf,memStore){
    @Override void stopActiveServices(){
      try {
        Thread.sleep(10000);
      }
 catch (      Exception e) {
        throw new RuntimeException(e);
      }
      super.stopActiveServices();
    }
  }
;
  rm.init(conf);
  final StateChangeRequestInfo requestInfo=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  assertEquals(STATE_ERR,HAServiceState.INITIALIZING,rm.adminService.getServiceStatus().getState());
  assertFalse("RM is ready to become active before being started",rm.adminService.getServiceStatus().isReadyToBecomeActive());
  checkMonitorHealth();
  rm.start();
  checkMonitorHealth();
  checkStandbyRMFunctionality();
  rm.adminService.transitionToActive(requestInfo);
  Thread t=new Thread(new Runnable(){
    @Override public void run(){
      try {
        rm.transitionToStandby(true);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
);
  t.start();
  rm.getRMContext().getStateStore().updateApplicationState(null);
  t.join();
  rm.adminService.transitionToStandby(requestInfo);
  checkStandbyRMFunctionality();
  rm.stop();
}
