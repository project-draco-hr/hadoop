{
  String errorMessageForEventHandler="Expect to get the same number of handlers";
  String errorMessageForService="Expect to get the same number of services";
  configuration.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  Configuration conf=new YarnConfiguration(configuration);
  rm=new MockRM(conf){
    @Override protected Dispatcher createDispatcher(){
      return new MyCountingDispatcher();
    }
  }
;
  rm.init(conf);
  int expectedEventHandlerCount=((MyCountingDispatcher)rm.getRMContext().getDispatcher()).getEventHandlerCount();
  int expectedServiceCount=rm.getServices().size();
  assertTrue(expectedEventHandlerCount != 0);
  StateChangeRequestInfo requestInfo=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  assertEquals(STATE_ERR,HAServiceState.INITIALIZING,rm.adminService.getServiceStatus().getState());
  assertFalse("RM is ready to become active before being started",rm.adminService.getServiceStatus().isReadyToBecomeActive());
  rm.start();
  rm.adminService.transitionToStandby(requestInfo);
  rm.adminService.transitionToActive(requestInfo);
  rm.adminService.transitionToStandby(requestInfo);
  rm.adminService.transitionToActive(requestInfo);
  rm.adminService.transitionToStandby(requestInfo);
  MyCountingDispatcher dispatcher=(MyCountingDispatcher)rm.getRMContext().getDispatcher();
  assertTrue(!dispatcher.isStopped());
  rm.adminService.transitionToActive(requestInfo);
  assertEquals(errorMessageForEventHandler,expectedEventHandlerCount,((MyCountingDispatcher)rm.getRMContext().getDispatcher()).getEventHandlerCount());
  assertEquals(errorMessageForService,expectedServiceCount,rm.getServices().size());
  dispatcher=(MyCountingDispatcher)rm.getRMContext().getDispatcher();
  rm.adminService.transitionToStandby(requestInfo);
  assertEquals(errorMessageForEventHandler,expectedEventHandlerCount,((MyCountingDispatcher)rm.getRMContext().getDispatcher()).getEventHandlerCount());
  assertEquals(errorMessageForService,expectedServiceCount,rm.getServices().size());
  assertTrue(dispatcher.isStopped());
  rm.stop();
}
