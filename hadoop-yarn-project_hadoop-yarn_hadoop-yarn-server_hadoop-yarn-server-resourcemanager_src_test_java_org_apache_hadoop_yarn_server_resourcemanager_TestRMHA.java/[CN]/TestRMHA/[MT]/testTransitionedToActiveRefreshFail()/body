{
  configuration.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  YarnConfiguration conf=new YarnConfiguration(configuration);
  configuration=new CapacitySchedulerConfiguration(conf);
  rm=new MockRM(configuration){
    @Override protected AdminService createAdminService(){
      return new AdminService(this,getRMContext()){
        @Override protected void setConfig(        Configuration conf){
          super.setConfig(configuration);
        }
      }
;
    }
    @Override protected Dispatcher createDispatcher(){
      return new FailFastDispatcher();
    }
  }
;
  rm.init(configuration);
  rm.start();
  final StateChangeRequestInfo requestInfo=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  configuration.set("yarn.scheduler.capacity.root.default.capacity","100");
  rm.adminService.transitionToStandby(requestInfo);
  assertEquals(HAServiceState.STANDBY,rm.getRMContext().getHAServiceState());
  configuration.set("yarn.scheduler.capacity.root.default.capacity","200");
  try {
    rm.adminService.transitionToActive(requestInfo);
  }
 catch (  Exception e) {
    assertTrue("Error on refreshAll during transistion to Active".contains(e.getMessage()));
  }
  FailFastDispatcher dispatcher=((FailFastDispatcher)rm.rmContext.getDispatcher());
  dispatcher.await();
  assertEquals(1,dispatcher.getEventCount());
  configuration.set("yarn.scheduler.capacity.root.default.capacity","100");
  rm.adminService.transitionToActive(requestInfo);
  assertEquals(HAServiceState.ACTIVE,rm.getRMContext().getHAServiceState());
  rm.adminService.transitionToStandby(requestInfo);
  assertEquals(HAServiceState.STANDBY,rm.getRMContext().getHAServiceState());
}
