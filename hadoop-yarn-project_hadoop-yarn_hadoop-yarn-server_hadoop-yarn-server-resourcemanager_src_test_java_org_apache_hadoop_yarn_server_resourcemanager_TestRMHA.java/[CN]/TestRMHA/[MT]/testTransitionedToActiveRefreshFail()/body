{
  configuration.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  rm=new MockRM(configuration){
    @Override protected AdminService createAdminService(){
      return new AdminService(this,getRMContext()){
        int counter=0;
        @Override protected void setConfig(        Configuration conf){
          super.setConfig(configuration);
        }
        @Override protected void refreshAll() throws ServiceFailedException {
          if (counter == 0) {
            counter++;
            throw new ServiceFailedException("Simulate RefreshFail");
          }
 else {
            super.refreshAll();
          }
        }
      }
;
    }
    @Override protected Dispatcher createDispatcher(){
      return new FailFastDispatcher();
    }
  }
;
  rm.init(configuration);
  rm.start();
  final StateChangeRequestInfo requestInfo=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  FailFastDispatcher dispatcher=((FailFastDispatcher)rm.rmContext.getDispatcher());
  rm.adminService.transitionToStandby(requestInfo);
  assertEquals("Fatal Event should be 0",0,dispatcher.getEventCount());
  assertEquals("HA state should be in standBy State",HAServiceState.STANDBY,rm.getRMContext().getHAServiceState());
  try {
    rm.adminService.transitionToActive(requestInfo);
    Assert.fail("Transistion to Active should have failed for refreshAll()");
  }
 catch (  Exception e) {
    assertTrue("Service fail Exception expected",e instanceof ServiceFailedException);
  }
  dispatcher.await();
  assertEquals("Fatal Event to be received",1,dispatcher.getEventCount());
  rm.adminService.transitionToActive(requestInfo);
  assertEquals(HAServiceState.ACTIVE,rm.getRMContext().getHAServiceState());
  rm.adminService.transitionToStandby(requestInfo);
  assertEquals(HAServiceState.STANDBY,rm.getRMContext().getHAServiceState());
}
