{
  ServletContext context=filterConfig.getServletContext();
  Configuration conf=new HdfsConfiguration(false);
  conf.addResource("hdfsproxy-default.xml");
  conf.addResource("hdfsproxy-site.xml");
  String nn=ProxyUtil.getNamenode(conf);
  InetSocketAddress nAddr=NetUtils.createSocketAddr(nn);
  context.setAttribute("name.node.address",nAddr);
  context.setAttribute("name.conf",conf);
  context.setAttribute("org.apache.hadoop.hdfsproxy.conf",conf);
  if (lctx == null) {
    Hashtable<String,String> env=new Hashtable<String,String>();
    env.put(InitialLdapContext.INITIAL_CONTEXT_FACTORY,conf.get("hdfsproxy.ldap.initial.context.factory","com.sun.jndi.ldap.LdapCtxFactory"));
    env.put(InitialLdapContext.PROVIDER_URL,conf.get("hdfsproxy.ldap.provider.url"));
    try {
      lctx=new InitialLdapContext(env,null);
    }
 catch (    NamingException ne) {
      throw new ServletException("NamingException in initializing ldap" + ne.toString());
    }
    baseName=conf.get("hdfsproxy.ldap.role.base");
    hdfsIpSchemaStr=conf.get("hdfsproxy.ldap.ip.schema.string","uniqueMember");
    hdfsIpSchemaStrPrefix=conf.get("hdfsproxy.ldap.ip.schema.string.prefix","cn=");
    hdfsUidSchemaStr=conf.get("hdfsproxy.ldap.uid.schema.string","uid");
    hdfsPathSchemaStr=conf.get("hdfsproxy.ldap.hdfs.path.schema.string","documentLocation");
  }
  LOG.info("LdapIpDirFilter initialization successful");
}
