{
  String prevThreadName=Thread.currentThread().getName();
  try {
    HttpServletRequest rqst=(HttpServletRequest)request;
    HttpServletResponse rsp=(HttpServletResponse)response;
    String contextPath=rqst.getContextPath();
    Thread.currentThread().setName(contextPath);
    if (LOG.isDebugEnabled()) {
      StringBuilder b=new StringBuilder("Request from ").append(rqst.getRemoteHost()).append("/").append(rqst.getRemoteAddr()).append(":").append(rqst.getRemotePort());
      b.append("\n The Scheme is " + rqst.getScheme());
      b.append("\n The Path Info is " + rqst.getPathInfo());
      b.append("\n The Translated Path Info is " + rqst.getPathTranslated());
      b.append("\n The Context Path is " + rqst.getContextPath());
      b.append("\n The Query String is " + rqst.getQueryString());
      b.append("\n The Request URI is " + rqst.getRequestURI());
      b.append("\n The Request URL is " + rqst.getRequestURL());
      b.append("\n The Servlet Path is " + rqst.getServletPath());
      LOG.debug(b.toString());
    }
    LdapRoleEntry ldapent=new LdapRoleEntry();
    String userIp=rqst.getRemoteAddr();
    try {
      boolean isAuthorized=getLdapRoleEntryFromUserIp(userIp,ldapent);
      if (!isAuthorized) {
        rsp.sendError(HttpServletResponse.SC_FORBIDDEN,"IP " + userIp + " is not authorized to access");
        return;
      }
    }
 catch (    NamingException ne) {
      throw new IOException("NamingException while searching ldap" + ne.toString());
    }
    rqst.setAttribute("org.apache.hadoop.hdfsproxy.authorized.userID",ldapent.userId);
    rqst.setAttribute("org.apache.hadoop.hdfsproxy.authorized.paths",ldapent.paths);
    LOG.info("User: " + ldapent.userId + ", Request: "+ rqst.getPathInfo()+ " From: "+ rqst.getRemoteAddr());
    chain.doFilter(request,response);
  }
  finally {
    Thread.currentThread().setName(prevThreadName);
  }
}
