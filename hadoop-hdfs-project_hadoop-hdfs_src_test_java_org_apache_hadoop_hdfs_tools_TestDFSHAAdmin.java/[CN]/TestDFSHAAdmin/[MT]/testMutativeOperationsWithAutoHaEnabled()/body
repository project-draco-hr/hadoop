{
  Mockito.doReturn(STANDBY_READY_RESULT).when(mockProtocol).getServiceStatus();
  HdfsConfiguration conf=getHAConf();
  conf.setBoolean(DFSConfigKeys.DFS_HA_AUTO_FAILOVER_ENABLED_KEY,true);
  conf.set(DFSConfigKeys.DFS_HA_FENCE_METHODS_KEY,"shell(true)");
  tool.setConf(conf);
  assertEquals(-1,runTool("-transitionToActive","nn1"));
  assertTrue(errOutput.contains("Refusing to manually manage"));
  assertEquals(-1,runTool("-transitionToStandby","nn1"));
  assertTrue(errOutput.contains("Refusing to manually manage"));
  assertEquals(-1,runTool("-failover","nn1","nn2"));
  assertTrue(errOutput.contains("Refusing to manually manage"));
  Mockito.verify(mockProtocol,Mockito.never()).transitionToActive(anyReqInfo());
  Mockito.verify(mockProtocol,Mockito.never()).transitionToStandby(anyReqInfo());
  setupConfirmationOnSystemIn();
  assertEquals(0,runTool("-transitionToActive","-forcemanual","nn1"));
  setupConfirmationOnSystemIn();
  assertEquals(0,runTool("-transitionToStandby","-forcemanual","nn1"));
  setupConfirmationOnSystemIn();
  assertEquals(0,runTool("-failover","-forcemanual","nn1","nn2"));
  Mockito.verify(mockProtocol,Mockito.times(2)).transitionToActive(reqInfoCaptor.capture());
  Mockito.verify(mockProtocol,Mockito.times(2)).transitionToStandby(reqInfoCaptor.capture());
  for (  StateChangeRequestInfo ri : reqInfoCaptor.getAllValues()) {
    assertEquals(RequestSource.REQUEST_BY_USER_FORCED,ri.getSource());
  }
}
