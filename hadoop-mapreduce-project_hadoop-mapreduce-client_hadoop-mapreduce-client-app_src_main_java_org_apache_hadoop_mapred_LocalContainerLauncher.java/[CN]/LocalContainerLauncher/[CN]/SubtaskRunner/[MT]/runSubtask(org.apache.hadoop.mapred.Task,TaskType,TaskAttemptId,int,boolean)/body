{
  org.apache.hadoop.mapred.TaskAttemptID classicAttemptID=TypeConverter.fromYarn(attemptID);
  try {
    JobConf conf=new JobConf(getConfig());
    conf.setBoolean("mapreduce.task.uberized",true);
    if (taskType == TaskType.MAP) {
      if (doneWithMaps) {
        LOG.error("CONTAINER_REMOTE_LAUNCH contains a map task (" + attemptID + "), but should be finished with maps");
      }
      MapTask map=(MapTask)task;
      map.run(conf,umbilical);
      if (renameOutputs) {
        renameMapOutputForReduce(conf,attemptID,map.getMapOutputFile());
      }
      relocalize();
      if (++finishedSubMaps == numMapTasks) {
        doneWithMaps=true;
      }
    }
 else {
      if (!doneWithMaps) {
        LOG.error("CONTAINER_REMOTE_LAUNCH contains a reduce task (" + attemptID + "), but not yet finished with maps");
      }
      ReduceTask reduce=(ReduceTask)task;
      conf.set(MRConfig.FRAMEWORK_NAME,MRConfig.LOCAL_FRAMEWORK_NAME);
      conf.set(MRConfig.MASTER_ADDRESS,"local");
      reduce.run(conf,umbilical);
    }
  }
 catch (  FSError e) {
    LOG.fatal("FSError from child",e);
    umbilical.fsError(classicAttemptID,e.getMessage());
    throw new RuntimeException();
  }
catch (  Exception exception) {
    LOG.warn("Exception running local (uberized) 'child' : " + StringUtils.stringifyException(exception));
    try {
      if (task != null) {
        task.taskCleanup(umbilical);
      }
    }
 catch (    Exception e) {
      LOG.info("Exception cleaning up: " + StringUtils.stringifyException(e));
    }
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    exception.printStackTrace(new PrintStream(baos));
    umbilical.reportDiagnosticInfo(classicAttemptID,baos.toString());
    throw new RuntimeException();
  }
catch (  Throwable throwable) {
    LOG.fatal("Error running local (uberized) 'child' : " + StringUtils.stringifyException(throwable));
    Throwable tCause=throwable.getCause();
    String cause=(tCause == null) ? throwable.getMessage() : StringUtils.stringifyException(tCause);
    umbilical.fatalError(classicAttemptID,cause);
    throw new RuntimeException();
  }
 finally {
  }
}
