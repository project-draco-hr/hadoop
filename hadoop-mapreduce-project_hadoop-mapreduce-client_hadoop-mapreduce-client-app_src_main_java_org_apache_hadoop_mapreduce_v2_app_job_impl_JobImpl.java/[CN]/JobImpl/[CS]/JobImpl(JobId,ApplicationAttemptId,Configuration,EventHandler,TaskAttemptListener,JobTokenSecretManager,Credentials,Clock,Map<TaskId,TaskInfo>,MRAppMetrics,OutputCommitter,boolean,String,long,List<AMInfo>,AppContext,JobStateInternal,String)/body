{
  this.applicationAttemptId=applicationAttemptId;
  this.jobId=jobId;
  this.jobName=conf.get(JobContext.JOB_NAME,"<missing job name>");
  this.conf=new JobConf(conf);
  this.metrics=metrics;
  this.clock=clock;
  this.completedTasksFromPreviousRun=completedTasksFromPreviousRun;
  this.amInfos=amInfos;
  this.appContext=appContext;
  this.userName=userName;
  this.queueName=conf.get(MRJobConfig.QUEUE_NAME,"default");
  this.appSubmitTime=appSubmitTime;
  this.oldJobId=TypeConverter.fromYarn(jobId);
  this.committer=committer;
  this.newApiCommitter=newApiCommitter;
  this.taskAttemptListener=taskAttemptListener;
  this.eventHandler=eventHandler;
  ReadWriteLock readWriteLock=new ReentrantReadWriteLock();
  this.readLock=readWriteLock.readLock();
  this.writeLock=readWriteLock.writeLock();
  this.jobCredentials=jobCredentials;
  this.jobTokenSecretManager=jobTokenSecretManager;
  this.aclsManager=new JobACLsManager(conf);
  this.reporterUserName=System.getProperty("user.name");
  this.jobACLs=aclsManager.constructJobACLs(conf);
  ThreadFactory threadFactory=new ThreadFactoryBuilder().setNameFormat("Job Fail Wait Timeout Monitor #%d").setDaemon(true).build();
  this.executor=new ScheduledThreadPoolExecutor(1,threadFactory);
  stateMachine=stateMachineFactory.make(this);
  this.forcedState=forcedState;
  if (forcedDiagnostic != null) {
    this.diagnostics.add(forcedDiagnostic);
  }
  this.maxAllowedFetchFailuresFraction=conf.getFloat(MRJobConfig.MAX_ALLOWED_FETCH_FAILURES_FRACTION,MRJobConfig.DEFAULT_MAX_ALLOWED_FETCH_FAILURES_FRACTION);
  this.maxFetchFailuresNotifications=conf.getInt(MRJobConfig.MAX_FETCH_FAILURES_NOTIFICATIONS,MRJobConfig.DEFAULT_MAX_FETCH_FAILURES_NOTIFICATIONS);
}
