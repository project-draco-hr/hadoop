{
  int sysMaxMaps=conf.getInt(MRJobConfig.JOB_UBERTASK_MAXMAPS,9);
  int sysMaxReduces=conf.getInt(MRJobConfig.JOB_UBERTASK_MAXREDUCES,1);
  boolean isValidUberMaxReduces=(sysMaxReduces == 0) || (sysMaxReduces == 1);
  long sysMaxBytes=conf.getLong(MRJobConfig.JOB_UBERTASK_MAXBYTES,fs.getDefaultBlockSize(this.remoteJobSubmitDir));
  long sysMemSizeForUberSlot=conf.getInt(MRJobConfig.MR_AM_VMEM_MB,MRJobConfig.DEFAULT_MR_AM_VMEM_MB);
  long sysCPUSizeForUberSlot=conf.getInt(MRJobConfig.MR_AM_CPU_VCORES,MRJobConfig.DEFAULT_MR_AM_CPU_VCORES);
  boolean uberEnabled=conf.getBoolean(MRJobConfig.JOB_UBERTASK_ENABLE,false);
  boolean smallNumMapTasks=(numMapTasks <= sysMaxMaps);
  boolean smallNumReduceTasks=(numReduceTasks <= sysMaxReduces);
  boolean smallInput=(dataInputLength <= sysMaxBytes);
  boolean smallMemory=((Math.max(conf.getLong(MRJobConfig.MAP_MEMORY_MB,0),conf.getLong(MRJobConfig.REDUCE_MEMORY_MB,0)) <= sysMemSizeForUberSlot) || (sysMemSizeForUberSlot == JobConf.DISABLED_MEMORY_LIMIT));
  boolean smallCpu=(Math.max(conf.getInt(MRJobConfig.MAP_CPU_VCORES,1),conf.getInt(MRJobConfig.REDUCE_CPU_VCORES,1)) < sysCPUSizeForUberSlot);
  boolean notChainJob=!isChainJob(conf);
  isUber=uberEnabled && smallNumMapTasks && smallNumReduceTasks&& smallInput&& smallMemory&& smallCpu&& notChainJob&& isValidUberMaxReduces;
  if (isUber) {
    LOG.info("Uberizing job " + jobId + ": "+ numMapTasks+ "m+"+ numReduceTasks+ "r tasks ("+ dataInputLength+ " input bytes) will run sequentially on single node.");
    conf.setFloat(MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART,1.0f);
    conf.setInt(MRJobConfig.MAP_MAX_ATTEMPTS,1);
    conf.setInt(MRJobConfig.REDUCE_MAX_ATTEMPTS,1);
    conf.setBoolean(MRJobConfig.MAP_SPECULATIVE,false);
    conf.setBoolean(MRJobConfig.REDUCE_SPECULATIVE,false);
  }
 else {
    StringBuilder msg=new StringBuilder();
    msg.append("Not uberizing ").append(jobId).append(" because:");
    if (!uberEnabled)     msg.append(" not enabled;");
    if (!smallNumMapTasks)     msg.append(" too many maps;");
    if (!smallNumReduceTasks)     msg.append(" too many reduces;");
    if (!smallInput)     msg.append(" too much input;");
    if (!smallMemory)     msg.append(" too much RAM;");
    if (!notChainJob)     msg.append(" chainjob;");
    if (!isValidUberMaxReduces)     msg.append(" not supported uber max reduces");
    LOG.info(msg.toString());
  }
}
