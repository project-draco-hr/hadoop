{
  Configuration conf=getConfig();
  YarnRPC rpc=YarnRPC.create(conf);
  InetSocketAddress address=NetUtils.createSocketAddr("0.0.0.0:0");
  InetAddress hostNameResolved=null;
  try {
    hostNameResolved=InetAddress.getLocalHost();
  }
 catch (  UnknownHostException e) {
    throw new YarnException(e);
  }
  ClientToAMSecretManager secretManager=null;
  if (UserGroupInformation.isSecurityEnabled()) {
    secretManager=new ClientToAMSecretManager();
    String secretKeyStr=System.getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);
    byte[] bytes=Base64.decodeBase64(secretKeyStr);
    ClientTokenIdentifier identifier=new ClientTokenIdentifier(this.appContext.getApplicationID());
    secretManager.setMasterKey(identifier,bytes);
  }
  server=rpc.getServer(MRClientProtocol.class,protocolHandler,address,conf,secretManager,conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT,MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT));
  if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,false)) {
    refreshServiceAcls(conf,new MRAMPolicyProvider());
  }
  server.start();
  this.bindAddress=NetUtils.createSocketAddr(hostNameResolved.getHostAddress() + ":" + server.getPort());
  LOG.info("Instantiated MRClientService at " + this.bindAddress);
  try {
    webApp=WebApps.$for("mapreduce",AppContext.class,appContext).with(conf).start(new AMWebApp());
  }
 catch (  Exception e) {
    LOG.error("Webapps failed to start. Ignoring for now:",e);
  }
  super.start();
}
