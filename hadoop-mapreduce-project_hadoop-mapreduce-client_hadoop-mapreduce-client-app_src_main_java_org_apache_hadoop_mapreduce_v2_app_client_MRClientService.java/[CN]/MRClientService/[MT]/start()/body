{
  Configuration conf=getConfig();
  YarnRPC rpc=YarnRPC.create(conf);
  InetSocketAddress address=new InetSocketAddress(0);
  ClientToAMTokenSecretManager secretManager=null;
  if (UserGroupInformation.isSecurityEnabled()) {
    String secretKeyStr=System.getenv(ApplicationConstants.APPLICATION_CLIENT_SECRET_ENV_NAME);
    byte[] bytes=Base64.decodeBase64(secretKeyStr);
    secretManager=new ClientToAMTokenSecretManager(this.appContext.getApplicationAttemptId(),bytes);
  }
  server=rpc.getServer(MRClientProtocol.class,protocolHandler,address,conf,secretManager,conf.getInt(MRJobConfig.MR_AM_JOB_CLIENT_THREAD_COUNT,MRJobConfig.DEFAULT_MR_AM_JOB_CLIENT_THREAD_COUNT),MRJobConfig.MR_AM_JOB_CLIENT_PORT_RANGE);
  if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,false)) {
    refreshServiceAcls(conf,new MRAMPolicyProvider());
  }
  server.start();
  this.bindAddress=NetUtils.getConnectAddress(server);
  LOG.info("Instantiated MRClientService at " + this.bindAddress);
  try {
    webApp=WebApps.$for("mapreduce",AppContext.class,appContext,"ws").with(conf).start(new AMWebApp());
  }
 catch (  Exception e) {
    LOG.error("Webapps failed to start. Ignoring for now:",e);
  }
  super.start();
}
