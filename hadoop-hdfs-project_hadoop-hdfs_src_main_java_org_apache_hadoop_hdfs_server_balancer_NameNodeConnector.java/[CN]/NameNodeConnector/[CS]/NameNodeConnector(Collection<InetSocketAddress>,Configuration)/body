{
  InetSocketAddress nn=Lists.newArrayList(haNNs).get(0);
  this.namenodeAddress=nn;
  this.namenode=createNamenode(nn,conf);
  this.client=DFSUtil.createNamenode(conf);
  this.fs=FileSystem.get(NameNode.getUri(nn),conf);
  final NamespaceInfo namespaceinfo=namenode.versionRequest();
  this.blockpoolID=namespaceinfo.getBlockPoolID();
  final ExportedBlockKeys keys=namenode.getBlockKeys();
  this.isBlockTokenEnabled=keys.isBlockTokenEnabled();
  if (isBlockTokenEnabled) {
    long blockKeyUpdateInterval=keys.getKeyUpdateInterval();
    long blockTokenLifetime=keys.getTokenLifetime();
    LOG.info("Block token params received from NN: keyUpdateInterval=" + blockKeyUpdateInterval / (60 * 1000) + " min(s), tokenLifetime=" + blockTokenLifetime / (60 * 1000) + " min(s)");
    this.blockTokenSecretManager=new BlockTokenSecretManager(false,blockKeyUpdateInterval,blockTokenLifetime);
    this.blockTokenSecretManager.setKeys(keys);
    this.keyUpdaterInterval=blockKeyUpdateInterval / 4;
    LOG.info("Balancer will update its block keys every " + keyUpdaterInterval / (60 * 1000) + " minute(s)");
    this.keyupdaterthread=new Daemon(new BlockKeyUpdater());
    this.shouldRun=true;
    this.keyupdaterthread.start();
  }
  out=checkAndMarkRunningBalancer();
  if (out == null) {
    throw new IOException("Another balancer is running");
  }
}
