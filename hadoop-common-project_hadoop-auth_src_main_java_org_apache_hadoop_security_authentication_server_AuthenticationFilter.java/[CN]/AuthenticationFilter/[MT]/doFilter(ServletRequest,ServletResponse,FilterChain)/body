{
  boolean unauthorizedResponse=true;
  int errCode=HttpServletResponse.SC_UNAUTHORIZED;
  AuthenticationException authenticationEx=null;
  HttpServletRequest httpRequest=(HttpServletRequest)request;
  HttpServletResponse httpResponse=(HttpServletResponse)response;
  boolean isHttps="https".equals(httpRequest.getScheme());
  try {
    boolean newToken=false;
    AuthenticationToken token;
    try {
      token=getToken(httpRequest);
    }
 catch (    AuthenticationException ex) {
      LOG.warn("AuthenticationToken ignored: " + ex.getMessage());
      authenticationEx=ex;
      token=null;
    }
    if (authHandler.managementOperation(token,httpRequest,httpResponse)) {
      if (token == null) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Request [{}] triggering authentication",getRequestURL(httpRequest));
        }
        token=authHandler.authenticate(httpRequest,httpResponse);
        if (token != null && token.getExpires() != 0 && token != AuthenticationToken.ANONYMOUS) {
          token.setExpires(System.currentTimeMillis() + getValidity() * 1000);
        }
        newToken=true;
      }
      if (token != null) {
        unauthorizedResponse=false;
        if (LOG.isDebugEnabled()) {
          LOG.debug("Request [{}] user [{}] authenticated",getRequestURL(httpRequest),token.getUserName());
        }
        final AuthenticationToken authToken=token;
        httpRequest=new HttpServletRequestWrapper(httpRequest){
          @Override public String getAuthType(){
            return authToken.getType();
          }
          @Override public String getRemoteUser(){
            return authToken.getUserName();
          }
          @Override public Principal getUserPrincipal(){
            return (authToken != AuthenticationToken.ANONYMOUS) ? authToken : null;
          }
        }
;
        if (newToken && !token.isExpired() && token != AuthenticationToken.ANONYMOUS) {
          String signedToken=signer.sign(token.toString());
          createAuthCookie(httpResponse,signedToken,getCookieDomain(),getCookiePath(),token.getExpires(),isHttps);
        }
        doFilter(filterChain,httpRequest,httpResponse);
      }
    }
 else {
      unauthorizedResponse=false;
    }
  }
 catch (  AuthenticationException ex) {
    errCode=HttpServletResponse.SC_FORBIDDEN;
    authenticationEx=ex;
    if (LOG.isDebugEnabled()) {
      LOG.debug("Authentication exception: " + ex.getMessage(),ex);
    }
 else {
      LOG.warn("Authentication exception: " + ex.getMessage());
    }
  }
  if (unauthorizedResponse) {
    if (!httpResponse.isCommitted()) {
      createAuthCookie(httpResponse,"",getCookieDomain(),getCookiePath(),0,isHttps);
      if ((errCode == HttpServletResponse.SC_UNAUTHORIZED) && (!httpResponse.containsHeader(KerberosAuthenticator.WWW_AUTHENTICATE))) {
        errCode=HttpServletResponse.SC_FORBIDDEN;
      }
      if (authenticationEx == null) {
        httpResponse.sendError(errCode,"Authentication required");
      }
 else {
        httpResponse.sendError(errCode,authenticationEx.getMessage());
      }
    }
  }
}
