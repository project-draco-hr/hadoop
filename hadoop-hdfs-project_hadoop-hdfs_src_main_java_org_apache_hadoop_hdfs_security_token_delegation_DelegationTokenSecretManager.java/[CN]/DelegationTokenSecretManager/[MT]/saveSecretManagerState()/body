{
  SecretManagerSection s=SecretManagerSection.newBuilder().setCurrentId(currentId).setTokenSequenceNumber(delegationTokenSequenceNumber).setNumKeys(allKeys.size()).setNumTokens(currentTokens.size()).build();
  ArrayList<SecretManagerSection.DelegationKey> keys=Lists.newArrayListWithCapacity(allKeys.size());
  ArrayList<SecretManagerSection.PersistToken> tokens=Lists.newArrayListWithCapacity(currentTokens.size());
  for (  DelegationKey v : allKeys.values()) {
    SecretManagerSection.DelegationKey.Builder b=SecretManagerSection.DelegationKey.newBuilder().setId(v.getKeyId()).setExpiryDate(v.getExpiryDate());
    if (v.getEncodedKey() != null) {
      b.setKey(ByteString.copyFrom(v.getEncodedKey()));
    }
    keys.add(b.build());
  }
  for (  Entry<DelegationTokenIdentifier,DelegationTokenInformation> e : currentTokens.entrySet()) {
    DelegationTokenIdentifier id=e.getKey();
    SecretManagerSection.PersistToken.Builder b=SecretManagerSection.PersistToken.newBuilder().setOwner(id.getOwner().toString()).setRenewer(id.getRenewer().toString()).setRealUser(id.getRealUser().toString()).setIssueDate(id.getIssueDate()).setMaxDate(id.getMaxDate()).setSequenceNumber(id.getSequenceNumber()).setMasterKeyId(id.getMasterKeyId()).setExpiryDate(e.getValue().getRenewDate());
    tokens.add(b.build());
  }
  return new SecretManagerState(s,keys,tokens);
}
