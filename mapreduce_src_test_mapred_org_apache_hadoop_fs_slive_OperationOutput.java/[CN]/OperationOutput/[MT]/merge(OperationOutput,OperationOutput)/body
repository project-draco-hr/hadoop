{
  if (o1.getMeasurementType().equals(o2.getMeasurementType()) && o1.getOperationType().equals(o2.getOperationType())) {
    Object newvalue=null;
    OutputType newtype=null;
    String opType=o1.getOperationType();
    String mType=o1.getMeasurementType();
    if (o1.getOutputType() == OutputType.STRING || o2.getOutputType() == OutputType.STRING) {
      newtype=OutputType.STRING;
      StringBuilder str=new StringBuilder();
      str.append(o1.getValue());
      str.append(STRING_SEP);
      str.append(o2.getValue());
      newvalue=str.toString();
    }
 else     if (o1.getOutputType() == OutputType.DOUBLE || o2.getOutputType() == OutputType.DOUBLE) {
      newtype=OutputType.DOUBLE;
      try {
        newvalue=Double.parseDouble(o1.getValue().toString()) + Double.parseDouble(o2.getValue().toString());
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("Unable to combine a type with a double " + o1 + " & "+ o2,e);
      }
    }
 else     if (o1.getOutputType() == OutputType.FLOAT || o2.getOutputType() == OutputType.FLOAT) {
      newtype=OutputType.FLOAT;
      try {
        newvalue=Float.parseFloat(o1.getValue().toString()) + Float.parseFloat(o2.getValue().toString());
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("Unable to combine a type with a float " + o1 + " & "+ o2,e);
      }
    }
 else     if (o1.getOutputType() == OutputType.LONG || o2.getOutputType() == OutputType.LONG) {
      newtype=OutputType.LONG;
      try {
        newvalue=Long.parseLong(o1.getValue().toString()) + Long.parseLong(o2.getValue().toString());
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("Unable to combine a type with a long " + o1 + " & "+ o2,e);
      }
    }
 else     if (o1.getOutputType() == OutputType.INTEGER || o2.getOutputType() == OutputType.INTEGER) {
      newtype=OutputType.INTEGER;
      try {
        newvalue=Integer.parseInt(o1.getValue().toString()) + Integer.parseInt(o2.getValue().toString());
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException("Unable to combine a type with an int " + o1 + " & "+ o2,e);
      }
    }
    return new OperationOutput(newtype,opType,mType,newvalue);
  }
 else {
    throw new IllegalArgumentException("Unable to combine dissimilar types " + o1 + " & "+ o2);
  }
}
