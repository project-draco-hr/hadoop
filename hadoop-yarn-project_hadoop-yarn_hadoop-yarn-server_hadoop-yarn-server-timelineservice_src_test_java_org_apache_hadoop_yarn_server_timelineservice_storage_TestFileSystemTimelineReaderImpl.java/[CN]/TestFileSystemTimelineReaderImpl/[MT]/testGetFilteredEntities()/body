{
  Map<String,Object> infoFilters=new HashMap<String,Object>();
  infoFilters.put("info2",3.5);
  Set<TimelineEntity> result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters(null,null,null,null,null,infoFilters,null,null,null),new TimelineDataToRetrieve());
  Assert.assertEquals(1,result.size());
  for (  TimelineEntity entity : result) {
    if (!entity.getId().equals("id_3")) {
      Assert.fail("Incorrect filtering based on info filters");
    }
  }
  Map<String,String> configFilters=new HashMap<String,String>();
  configFilters.put("config_1","123");
  configFilters.put("config_3","abc");
  result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters(null,null,null,null,null,null,configFilters,null,null),new TimelineDataToRetrieve());
  Assert.assertEquals(2,result.size());
  for (  TimelineEntity entity : result) {
    if (!entity.getId().equals("id_1") && !entity.getId().equals("id_3")) {
      Assert.fail("Incorrect filtering based on config filters");
    }
  }
  Set<String> eventFilters=new HashSet<String>();
  eventFilters.add("event_2");
  eventFilters.add("event_4");
  result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters(null,null,null,null,null,null,null,null,eventFilters),new TimelineDataToRetrieve());
  Assert.assertEquals(1,result.size());
  for (  TimelineEntity entity : result) {
    if (!entity.getId().equals("id_3")) {
      Assert.fail("Incorrect filtering based on event filters");
    }
  }
  Set<String> metricFilters=new HashSet<String>();
  metricFilters.add("metric3");
  result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters(null,null,null,null,null,null,null,metricFilters,null),new TimelineDataToRetrieve());
  Assert.assertEquals(2,result.size());
  for (  TimelineEntity entity : result) {
    if (!entity.getId().equals("id_1") && !entity.getId().equals("id_2")) {
      Assert.fail("Incorrect filtering based on metric filters");
    }
  }
}
