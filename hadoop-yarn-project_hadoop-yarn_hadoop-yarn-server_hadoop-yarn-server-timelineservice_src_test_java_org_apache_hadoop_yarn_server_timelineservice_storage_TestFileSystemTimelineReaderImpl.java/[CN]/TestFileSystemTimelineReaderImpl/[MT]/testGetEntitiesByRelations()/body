{
  TimelineFilterList relatesTo=new TimelineFilterList(Operator.OR);
  Set<Object> relatesToIds=new HashSet<Object>(Arrays.asList((Object)"flow1"));
  relatesTo.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"flow",relatesToIds));
  Set<TimelineEntity> result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters(null,null,null,relatesTo,null,null,null,null,null),new TimelineDataToRetrieve());
  Assert.assertEquals(1,result.size());
  for (  TimelineEntity entity : result) {
    if (!entity.getId().equals("id_1")) {
      Assert.fail("Incorrect filtering based on relatesTo");
    }
  }
  TimelineFilterList isRelatedTo=new TimelineFilterList(Operator.OR);
  Set<Object> isRelatedToIds=new HashSet<Object>(Arrays.asList((Object)"tid1_2"));
  isRelatedTo.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL,"type1",isRelatedToIds));
  result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters(null,null,null,null,isRelatedTo,null,null,null,null),new TimelineDataToRetrieve());
  Assert.assertEquals(2,result.size());
  for (  TimelineEntity entity : result) {
    if (!entity.getId().equals("id_1") && !entity.getId().equals("id_3")) {
      Assert.fail("Incorrect filtering based on isRelatedTo");
    }
  }
}
