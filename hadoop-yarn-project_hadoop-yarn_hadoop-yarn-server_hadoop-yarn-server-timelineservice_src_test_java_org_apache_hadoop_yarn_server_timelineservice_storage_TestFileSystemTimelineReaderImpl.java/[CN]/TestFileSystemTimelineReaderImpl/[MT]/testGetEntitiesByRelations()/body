{
  Map<String,Set<String>> relatesTo=new HashMap<String,Set<String>>();
  Set<String> relatesToIds=new HashSet<String>();
  relatesToIds.add("flow1");
  relatesTo.put("flow",relatesToIds);
  Set<TimelineEntity> result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters(null,null,null,relatesTo,null,null,null,null,null),new TimelineDataToRetrieve());
  Assert.assertEquals(1,result.size());
  for (  TimelineEntity entity : result) {
    if (!entity.getId().equals("id_1")) {
      Assert.fail("Incorrect filtering based on relatesTo");
    }
  }
  Map<String,Set<String>> isRelatedTo=new HashMap<String,Set<String>>();
  Set<String> isRelatedToIds=new HashSet<String>();
  isRelatedToIds.add("tid1_2");
  isRelatedTo.put("type1",isRelatedToIds);
  result=reader.getEntities(new TimelineReaderContext("cluster1","user1","flow1",1L,"app1","app",null),new TimelineEntityFilters(null,null,null,null,isRelatedTo,null,null,null,null),new TimelineDataToRetrieve());
  Assert.assertEquals(2,result.size());
  for (  TimelineEntity entity : result) {
    if (!entity.getId().equals("id_1") && !entity.getId().equals("id_3")) {
      Assert.fail("Incorrect filtering based on isRelatedTo");
    }
  }
}
