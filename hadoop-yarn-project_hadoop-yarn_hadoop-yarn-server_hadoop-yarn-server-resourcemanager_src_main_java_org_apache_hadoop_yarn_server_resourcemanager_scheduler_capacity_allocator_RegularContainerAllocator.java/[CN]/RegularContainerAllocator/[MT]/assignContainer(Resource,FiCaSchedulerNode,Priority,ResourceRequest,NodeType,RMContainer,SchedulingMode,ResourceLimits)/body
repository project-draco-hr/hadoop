{
  lastResourceRequest=request;
  if (LOG.isDebugEnabled()) {
    LOG.debug("assignContainers: node=" + node.getNodeName() + " application="+ application.getApplicationId()+ " priority="+ priority.getPriority()+ " request="+ request+ " type="+ type);
  }
  if (!SchedulerUtils.checkResourceRequestMatchingNodePartition(request.getNodeLabelExpression(),node.getPartition(),schedulingMode)) {
    return new ContainerAllocation(rmContainer,null,AllocationState.LOCALITY_SKIPPED);
  }
  Resource capability=request.getCapability();
  Resource available=node.getUnallocatedResource();
  Resource totalResource=node.getTotalResource();
  if (!Resources.lessThanOrEqual(rc,clusterResource,capability,totalResource)) {
    LOG.warn("Node : " + node.getNodeID() + " does not have sufficient resource for request : "+ request+ " node total capability : "+ node.getTotalResource());
    return ContainerAllocation.LOCALITY_SKIPPED;
  }
  boolean shouldAllocOrReserveNewContainer=shouldAllocOrReserveNewContainer(priority,capability);
  int availableContainers=rc.computeAvailableContainers(available,capability);
  Resource resourceNeedToUnReserve=Resources.max(rc,clusterResource,Resources.subtract(capability,currentResoureLimits.getHeadroom()),currentResoureLimits.getAmountNeededUnreserve());
  boolean needToUnreserve=Resources.greaterThan(rc,clusterResource,resourceNeedToUnReserve,Resources.none());
  RMContainer unreservedContainer=null;
  boolean reservationsContinueLooking=application.getCSLeafQueue().getReservationContinueLooking();
  List<RMContainer> toKillContainers=null;
  if (availableContainers == 0 && currentResoureLimits.isAllowPreemption()) {
    Resource availableAndKillable=Resources.clone(available);
    for (    RMContainer killableContainer : node.getKillableContainers().values()) {
      if (null == toKillContainers) {
        toKillContainers=new ArrayList<>();
      }
      toKillContainers.add(killableContainer);
      Resources.addTo(availableAndKillable,killableContainer.getAllocatedResource());
      if (Resources.fitsIn(rc,clusterResource,capability,availableAndKillable)) {
        availableContainers=1;
        break;
      }
    }
  }
  if (availableContainers > 0) {
    if (rmContainer == null && reservationsContinueLooking && node.getLabels().isEmpty()) {
      if (!shouldAllocOrReserveNewContainer || needToUnreserve) {
        if (!needToUnreserve) {
          resourceNeedToUnReserve=capability;
        }
        unreservedContainer=application.findNodeToUnreserve(clusterResource,node,priority,resourceNeedToUnReserve);
        if (null == unreservedContainer) {
          return ContainerAllocation.LOCALITY_SKIPPED;
        }
      }
    }
    ContainerAllocation result=new ContainerAllocation(unreservedContainer,request.getCapability(),AllocationState.ALLOCATED);
    result.containerNodeType=type;
    result.setToKillContainers(toKillContainers);
    return result;
  }
 else {
    if (shouldAllocOrReserveNewContainer || rmContainer != null) {
      if (reservationsContinueLooking && rmContainer == null) {
        if (needToUnreserve) {
          if (LOG.isDebugEnabled()) {
            LOG.debug("we needed to unreserve to be able to allocate");
          }
          return ContainerAllocation.LOCALITY_SKIPPED;
        }
      }
      ContainerAllocation result=new ContainerAllocation(null,request.getCapability(),AllocationState.RESERVED);
      result.containerNodeType=type;
      result.setToKillContainers(null);
      return result;
    }
    return ContainerAllocation.LOCALITY_SKIPPED;
  }
}
