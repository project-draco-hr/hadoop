{
  Container container=getContainer(reservedContainer,node,allocationResult.getResourceToBeAllocated(),schedulerKey);
  if (container == null) {
    application.updateAppSkipNodeDiagnostics("Scheduling of container failed. ");
    LOG.warn("Couldn't get container for allocation!");
    ActivitiesLogger.APP.recordAppActivityWithoutAllocation(activitiesManager,node,application,schedulerKey.getPriority(),ActivityDiagnosticConstant.COULD_NOT_GET_CONTAINER,ActivityState.REJECTED);
    return ContainerAllocation.APP_SKIPPED;
  }
  if (allocationResult.getAllocationState() == AllocationState.ALLOCATED) {
    allocationResult=handleNewContainerAllocation(allocationResult,node,schedulerKey,reservedContainer,container);
  }
 else {
    application.reserve(schedulerKey,node,reservedContainer,container);
  }
  allocationResult.updatedContainer=container;
  if (reservedContainer == null) {
    if (allocationResult.containerNodeType != NodeType.OFF_SWITCH) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Resetting scheduling opportunities");
      }
      if (allocationResult.containerNodeType == NodeType.NODE_LOCAL || application.getCSLeafQueue().getRackLocalityFullReset()) {
        application.resetSchedulingOpportunities(schedulerKey);
      }
    }
    if (StringUtils.equals(node.getPartition(),RMNodeLabelsManager.NO_LABEL)) {
      application.resetMissedNonPartitionedRequestSchedulingOpportunity(schedulerKey);
    }
  }
  return allocationResult;
}
