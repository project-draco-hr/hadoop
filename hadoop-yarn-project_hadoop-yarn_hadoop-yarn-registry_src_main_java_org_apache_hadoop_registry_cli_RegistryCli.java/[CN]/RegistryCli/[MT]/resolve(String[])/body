{
  Options resolveOption=new Options();
  CommandLineParser parser=new GnuParser();
  try {
    CommandLine line=parser.parse(resolveOption,args);
    List<String> argsList=line.getArgList();
    if (argsList.size() != 2) {
      return usageError("resolve requires exactly one path argument",RESOLVE_USAGE);
    }
    if (!validatePath(argsList.get(1)))     return -1;
    try {
      ServiceRecord record=registry.resolve(argsList.get(1));
      for (      Endpoint endpoint : record.external) {
        if ((endpoint.protocolType.equals(ProtocolTypes.PROTOCOL_WEBUI)) || (endpoint.protocolType.equals(ProtocolTypes.PROTOCOL_REST))) {
          sysout.print(" Endpoint(ProtocolType=" + endpoint.protocolType + ", Api="+ endpoint.api+ "); Uris are: ");
        }
 else {
          sysout.print(" Endpoint(ProtocolType=" + endpoint.protocolType + ", Api="+ endpoint.api+ ");"+ " Addresses(AddressType="+ endpoint.addressType+ ") are: ");
        }
        for (        List<String> a : endpoint.addresses) {
          sysout.print(a + " ");
        }
        sysout.println();
      }
      return 0;
    }
 catch (    Exception e) {
      syserr.println(analyzeException("resolve",e,argsList));
    }
    return -1;
  }
 catch (  org.apache.commons.cli.ParseException exp) {
    return usageError("Invalid syntax " + exp,RESOLVE_USAGE);
  }
}
