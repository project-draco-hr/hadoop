{
  Quota.Counts counts=Quota.Counts.newInstance();
  Map<INode,INode> priorCreated=null;
  Map<INode,INode> priorDeleted=null;
  if (snapshot == null) {
    recordModification(prior,null);
    DirectoryDiff lastDiff=diffs.getLast();
    if (lastDiff != null) {
      counts.add(lastDiff.diff.destroyCreatedList(this,collectedBlocks,removedINodes));
    }
  }
 else {
    prior=getDiffs().updatePrior(snapshot,prior);
    if (prior != null) {
      DirectoryDiff priorDiff=this.getDiffs().getDiff(prior);
      if (priorDiff != null && priorDiff.getSnapshot().equals(prior)) {
        List<INode> cList=priorDiff.diff.getList(ListType.CREATED);
        List<INode> dList=priorDiff.diff.getList(ListType.DELETED);
        priorCreated=new HashMap<INode,INode>(cList.size());
        for (        INode cNode : cList) {
          priorCreated.put(cNode,cNode);
        }
        priorDeleted=new HashMap<INode,INode>(dList.size());
        for (        INode dNode : dList) {
          priorDeleted.put(dNode,dNode);
        }
      }
    }
    counts.add(getDiffs().deleteSnapshotDiff(snapshot,prior,this,collectedBlocks,removedINodes,countDiffChange));
    if (prior != null) {
      DirectoryDiff priorDiff=this.getDiffs().getDiff(prior);
      if (priorDiff != null && priorDiff.getSnapshot().equals(prior)) {
        if (priorCreated != null) {
          for (          INode cNode : priorDiff.getChildrenDiff().getList(ListType.CREATED)) {
            if (priorCreated.containsKey(cNode)) {
              counts.add(cNode.cleanSubtree(snapshot,null,collectedBlocks,removedINodes,countDiffChange));
            }
          }
        }
        for (        INode dNode : priorDiff.getChildrenDiff().getList(ListType.DELETED)) {
          if (priorDeleted == null || !priorDeleted.containsKey(dNode)) {
            counts.add(cleanDeletedINode(dNode,snapshot,prior,collectedBlocks,removedINodes,countDiffChange));
          }
        }
      }
    }
  }
  counts.add(cleanSubtreeRecursively(snapshot,prior,collectedBlocks,removedINodes,priorDeleted,countDiffChange));
  if (isQuotaSet()) {
    this.addSpaceConsumed2Cache(-counts.get(Quota.NAMESPACE),-counts.get(Quota.DISKSPACE));
  }
  return counts;
}
