{
  Quota.Counts counts=Quota.Counts.newInstance();
  if (snapshot == null) {
    recordModification(prior);
    DirectoryDiff lastDiff=diffs.getLast();
    if (lastDiff != null) {
      counts.add(lastDiff.diff.destroyCreatedList(this,collectedBlocks));
    }
  }
 else {
    prior=getDiffs().updatePrior(snapshot,prior);
    counts.add(getDiffs().deleteSnapshotDiff(snapshot,prior,this,collectedBlocks));
    if (prior != null) {
      DirectoryDiff priorDiff=this.getDiffs().getDiff(prior);
      if (priorDiff != null) {
        for (        INode cNode : priorDiff.getChildrenDiff().getList(ListType.CREATED)) {
          counts.add(cNode.cleanSubtree(snapshot,null,collectedBlocks));
        }
        for (        INode dNode : priorDiff.getChildrenDiff().getList(ListType.DELETED)) {
          counts.add(cleanDeletedINode(dNode,snapshot,prior,collectedBlocks));
        }
      }
    }
  }
  counts.add(cleanSubtreeRecursively(snapshot,prior,collectedBlocks));
  if (isQuotaSet()) {
    this.addSpaceConsumed2Cache(-counts.get(Quota.NAMESPACE),-counts.get(Quota.DISKSPACE));
  }
  return counts;
}
