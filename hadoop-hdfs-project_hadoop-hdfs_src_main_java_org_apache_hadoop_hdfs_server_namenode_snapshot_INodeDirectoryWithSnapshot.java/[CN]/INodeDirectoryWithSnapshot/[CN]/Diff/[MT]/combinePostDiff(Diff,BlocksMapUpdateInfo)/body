{
  while (postDiff.created != null && !postDiff.created.isEmpty()) {
    INode node=postDiff.created.remove(postDiff.created.size() - 1);
    int deletedIndex=search(postDiff.deleted,node);
    if (deletedIndex < 0) {
      create(node);
    }
 else {
      int createdIndex=search(created,node);
      if (createdIndex < 0) {
        create(node);
        insertDeleted(node,search(deleted,node));
      }
 else {
        created.set(createdIndex,node);
        INode dInPost=postDiff.deleted.get(deletedIndex);
        if (dInPost instanceof INodeFileWithLink) {
          ((INodeFileWithLink)dInPost).collectSubtreeBlocksAndClear(collectedBlocks);
        }
      }
      postDiff.deleted.remove(deletedIndex);
    }
  }
  while (postDiff.deleted != null && !postDiff.deleted.isEmpty()) {
    INode node=postDiff.deleted.remove(postDiff.deleted.size() - 1);
    Triple<Integer,INode,Integer> triple=delete(node);
    INode cInCurrent=triple.middle;
    if (cInCurrent instanceof INodeFileWithLink) {
      ((INodeFileWithLink)cInCurrent).collectSubtreeBlocksAndClear(collectedBlocks);
    }
  }
}
