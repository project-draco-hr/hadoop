{
  while (postDiff.created != null && !postDiff.created.isEmpty()) {
    final INode c=postDiff.created.remove(postDiff.created.size() - 1);
    final int deletedIndex=search(postDiff.deleted,c);
    if (deletedIndex < 0) {
      create(c);
    }
 else {
      final INode d=postDiff.deleted.remove(deletedIndex);
      final Triple<Integer,INode,Integer> triple=modify(d,c);
      if (deletedINodeProcesser != null) {
        deletedINodeProcesser.process(triple.middle);
      }
    }
  }
  while (postDiff.deleted != null && !postDiff.deleted.isEmpty()) {
    INode node=postDiff.deleted.remove(postDiff.deleted.size() - 1);
    Triple<Integer,INode,Integer> triple=delete(node);
    if (deletedINodeProcesser != null) {
      deletedINodeProcesser.process(triple.middle);
    }
  }
}
