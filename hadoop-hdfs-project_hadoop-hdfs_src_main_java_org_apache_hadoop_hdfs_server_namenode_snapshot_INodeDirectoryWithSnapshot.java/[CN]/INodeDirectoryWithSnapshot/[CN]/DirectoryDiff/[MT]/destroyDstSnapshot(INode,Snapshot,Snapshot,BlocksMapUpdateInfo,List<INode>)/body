{
  Quota.Counts counts=Quota.Counts.newInstance();
  try {
    if (inode.isReference()) {
      INodeReference referenceNode=inode.asReference();
      INodeReference.WithCount wc=(WithCount)referenceNode.getReferredINode();
      INode referred=wc.getReferredINode();
      Quota.Counts subCounts=destroyDstSnapshot(referred,snapshot,prior,collectedBlocks,removedINodes);
      if (inode instanceof INodeReference.WithName) {
        INodeReference ref=wc.getParentReference();
        if (ref != null) {
          ref.addSpaceConsumed(-subCounts.get(Quota.NAMESPACE),-subCounts.get(Quota.DISKSPACE),true,Snapshot.INVALID_ID);
        }
      }
 else       if (inode instanceof INodeReference.DstReference) {
        wc.addSpaceConsumedToRenameSrc(-counts.get(Quota.NAMESPACE),-counts.get(Quota.DISKSPACE),true,snapshot.getId());
      }
    }
 else     if (inode.isFile()) {
      counts.add(inode.cleanSubtree(snapshot,null,collectedBlocks,removedINodes));
    }
 else     if (inode.isDirectory()) {
      if (inode.asDirectory() instanceof INodeDirectoryWithSnapshot) {
        INodeDirectoryWithSnapshot dirNode=(INodeDirectoryWithSnapshot)inode.asDirectory();
        DirectoryDiffList diffList=dirNode.getDiffs();
        prior=diffList.updatePrior(snapshot,prior);
        counts.add(diffList.deleteSnapshotDiff(snapshot,prior,dirNode,collectedBlocks,removedINodes));
        if (prior != null) {
          DirectoryDiff priorDiff=diffList.getDiff(prior);
          if (priorDiff != null) {
            counts.add(priorDiff.diff.destroyCreatedList(dirNode,collectedBlocks,removedINodes));
            for (            INode dNode : priorDiff.getChildrenDiff().getList(ListType.DELETED)) {
              counts.add(cleanDeletedINode(dNode,snapshot,prior,collectedBlocks,removedINodes));
            }
          }
        }
      }
      Snapshot s=snapshot != null && prior != null ? prior : snapshot;
      for (      INode child : inode.asDirectory().getChildrenList(s)) {
        counts.add(destroyDstSnapshot(child,s,prior,collectedBlocks,removedINodes));
      }
    }
  }
 catch (  QuotaExceededException e) {
    String error="should not have QuotaExceededException while deleting snapshot";
    LOG.error(error,e);
  }
  return counts;
}
