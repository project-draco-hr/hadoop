{
  final Quota.Counts counts=Quota.Counts.newInstance();
  diff.combinePosterior(posterior.diff,new Diff.Processor<INode>(){
    /** 
 * Collect blocks for deleted files. 
 */
    @Override public void process(    INode inode){
      if (inode != null) {
        if (INodeReference.tryRemoveReference(inode) <= 0) {
          inode.computeQuotaUsage(counts,false);
          inode.destroyAndCollectBlocks(collectedBlocks,removedINodes);
        }
 else {
          try {
            counts.add(inode.cleanSubtree(posterior.snapshot,null,collectedBlocks,removedINodes));
          }
 catch (          QuotaExceededException e) {
            String error="should not have QuotaExceededException while deleting snapshot";
            LOG.error(error,e);
          }
        }
      }
    }
  }
);
  return counts;
}
