{
  final Quota.Counts counts=Quota.Counts.newInstance();
  diff.combinePosterior(posterior.diff,new Diff.Processor<INode>(){
    /** 
 * Collect blocks for deleted files. 
 */
    @Override public void process(    INode inode){
      if (inode != null) {
        inode.computeQuotaUsage(counts,false);
        inode.destroyAndCollectBlocks(collectedBlocks,removedINodes);
        boolean handleRef=false;
        if (inode.isReference()) {
          INodeReference.WithCount wc=(INodeReference.WithCount)inode.asReference().getReferredINode();
          if (wc.getReferenceCount() > 0) {
            handleRef=true;
          }
        }
        if (handleRef) {
          final Snapshot postSnapshot=posterior.snapshot;
          if (inode instanceof INodeReference.DstReference) {
            destroyDstSnapshot(inode,postSnapshot,null,collectedBlocks,removedINodes);
          }
 else           if (inode instanceof INodeReference.WithName) {
            try {
              inode.cleanSubtree(postSnapshot,null,collectedBlocks,removedINodes);
            }
 catch (            QuotaExceededException e) {
              LOG.error("Error: should not throw QuotaExceededException",e);
            }
          }
        }
      }
    }
  }
);
  return counts;
}
