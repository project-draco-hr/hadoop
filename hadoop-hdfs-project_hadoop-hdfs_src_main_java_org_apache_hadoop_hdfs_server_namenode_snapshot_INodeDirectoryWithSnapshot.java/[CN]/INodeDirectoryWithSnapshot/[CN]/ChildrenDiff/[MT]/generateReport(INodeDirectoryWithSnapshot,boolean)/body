{
  List<DiffReportEntry> mList=new ArrayList<DiffReportEntry>();
  List<DiffReportEntry> cList=new ArrayList<DiffReportEntry>();
  List<DiffReportEntry> dList=new ArrayList<DiffReportEntry>();
  int c=0, d=0;
  List<INode> created=getCreatedList();
  List<INode> deleted=getDeletedList();
  for (; c < created.size() && d < deleted.size(); ) {
    INode cnode=created.get(c);
    INode dnode=deleted.get(d);
    if (cnode.equals(dnode)) {
      mList.add(new DiffReportEntry(DiffType.MODIFY,parent.getFullPathName() + Path.SEPARATOR + cnode.getLocalName()));
      c++;
      d++;
    }
 else     if (cnode.compareTo(dnode.getLocalNameBytes()) < 0) {
      cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE : DiffType.DELETE,parent.getFullPathName() + Path.SEPARATOR + cnode.getLocalName()));
      c++;
    }
 else {
      dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE : DiffType.CREATE,parent.getFullPathName() + Path.SEPARATOR + dnode.getLocalName()));
      d++;
    }
  }
  for (; d < deleted.size(); d++) {
    dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE : DiffType.CREATE,parent.getFullPathName() + Path.SEPARATOR + deleted.get(d).getLocalName()));
  }
  for (; c < created.size(); c++) {
    cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE : DiffType.DELETE,parent.getFullPathName() + Path.SEPARATOR + created.get(c).getLocalName()));
  }
  cList.addAll(dList);
  cList.addAll(mList);
  return cList;
}
