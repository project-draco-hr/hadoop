{
  List<DiffReportEntry> cList=new ArrayList<DiffReportEntry>();
  List<DiffReportEntry> dList=new ArrayList<DiffReportEntry>();
  int c=0, d=0;
  List<INode> created=getList(ListType.CREATED);
  List<INode> deleted=getList(ListType.DELETED);
  byte[][] fullPath=new byte[parentPath.length + 1][];
  System.arraycopy(parentPath,0,fullPath,0,parentPath.length);
  for (; c < created.size() && d < deleted.size(); ) {
    INode cnode=created.get(c);
    INode dnode=deleted.get(d);
    if (cnode.equals(dnode)) {
      fullPath[fullPath.length - 1]=cnode.getLocalNameBytes();
      if (cnode.isSymlink() && dnode.isSymlink()) {
        dList.add(new DiffReportEntry(DiffType.MODIFY,fullPath));
      }
 else {
        cList.add(new DiffReportEntry(DiffType.CREATE,fullPath));
        dList.add(new DiffReportEntry(DiffType.DELETE,fullPath));
      }
      c++;
      d++;
    }
 else     if (cnode.compareTo(dnode.getLocalNameBytes()) < 0) {
      fullPath[fullPath.length - 1]=cnode.getLocalNameBytes();
      cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE : DiffType.DELETE,fullPath));
      c++;
    }
 else {
      fullPath[fullPath.length - 1]=dnode.getLocalNameBytes();
      dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE : DiffType.CREATE,fullPath));
      d++;
    }
  }
  for (; d < deleted.size(); d++) {
    fullPath[fullPath.length - 1]=deleted.get(d).getLocalNameBytes();
    dList.add(new DiffReportEntry(fromEarlier ? DiffType.DELETE : DiffType.CREATE,fullPath));
  }
  for (; c < created.size(); c++) {
    fullPath[fullPath.length - 1]=created.get(c).getLocalNameBytes();
    cList.add(new DiffReportEntry(fromEarlier ? DiffType.CREATE : DiffType.DELETE,fullPath));
  }
  dList.addAll(cList);
  return dList;
}
