{
  final String mStr="M\t";
  final String cStr=reverse ? "-\t" : "+\t";
  final String dStr=reverse ? "+\t" : "-\t";
  StringBuilder cBuffer=new StringBuilder();
  StringBuilder dBuffer=new StringBuilder();
  StringBuilder mBuffer=new StringBuilder();
  int c=0;
  int d=0;
  List<INode> created=getCreatedList();
  List<INode> deleted=getDeletedList();
  for (; c < created.size() && d < deleted.size(); ) {
    INode cnode=created.get(c);
    INode dnode=deleted.get(d);
    if (cnode.equals(dnode)) {
      mBuffer.append(mStr + parent.getFullPathName() + Path.SEPARATOR+ cnode.getLocalName()+ "\n");
      c++;
      d++;
    }
 else     if (cnode.compareTo(dnode.getLocalNameBytes()) < 0) {
      cBuffer.append(cStr + parent.getFullPathName() + Path.SEPARATOR+ cnode.getLocalName()+ "\n");
      c++;
    }
 else {
      dBuffer.append(dStr + parent.getFullPathName() + Path.SEPARATOR+ dnode.getLocalName()+ "\n");
      d++;
    }
  }
  for (; d < deleted.size(); d++) {
    dBuffer.append(dStr + parent.getFullPathName() + Path.SEPARATOR+ deleted.get(d).getLocalName()+ "\n");
  }
  for (; c < created.size(); c++) {
    cBuffer.append(cStr + parent.getFullPathName() + Path.SEPARATOR+ created.get(c).getLocalName()+ "\n");
  }
  str.append(cBuffer);
  str.append(dBuffer);
  str.append(mBuffer);
}
