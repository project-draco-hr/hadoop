{
  InetSocketAddress target=NetUtils.createSocketAddr(datanode.name);
  Socket sock=SocketChannel.open().socket();
  int readTimeout=getConf().getInt(BLOCKFIX_READ_TIMEOUT,HdfsConstants.READ_TIMEOUT);
  NetUtils.connect(sock,target,readTimeout);
  sock.setSoTimeout(readTimeout);
  int writeTimeout=getConf().getInt(BLOCKFIX_WRITE_TIMEOUT,HdfsConstants.WRITE_TIMEOUT);
  OutputStream baseStream=NetUtils.getOutputStream(sock,writeTimeout);
  DataOutputStream out=new DataOutputStream(new BufferedOutputStream(baseStream,FSConstants.SMALL_BUFFER_SIZE));
  boolean corruptChecksumOk=false;
  boolean chunkOffsetOK=false;
  boolean verifyChecksum=true;
  boolean transferToAllowed=false;
  try {
    LOG.info("Sending block " + block.getBlock() + " from "+ sock.getLocalSocketAddress().toString()+ " to "+ sock.getRemoteSocketAddress().toString()+ " "+ blockSize+ " bytes");
    RaidBlockSender blockSender=new RaidBlockSender(block.getBlock(),blockSize,0,blockSize,corruptChecksumOk,chunkOffsetOK,verifyChecksum,transferToAllowed,metadataIn,new RaidBlockSender.InputStreamFactory(){
      @Override public InputStream createStream(      long offset) throws IOException {
        return blockContents;
      }
    }
);
    DatanodeInfo[] nodes=new DatanodeInfo[]{datanode};
    Sender.opWriteBlock(out,block.getBlock(),1,BlockConstructionStage.PIPELINE_SETUP_CREATE,0,blockSize,0,"",null,nodes,block.getBlockToken());
    blockSender.sendBlock(out,baseStream);
    LOG.info("Sent block " + block.getBlock() + " to "+ datanode.name);
  }
  finally {
    out.close();
  }
}
