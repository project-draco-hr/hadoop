{
  AMFeedback feedback=new AMFeedback();
  feedback.setTaskFound(true);
  if (null == taskStatus) {
    return feedback;
  }
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  DataOutputStream dos=new DataOutputStream(baos);
  taskStatus.write(dos);
  dos.close();
  taskStatus=TaskStatus.createTaskStatus(taskStatus.getIsMap());
  taskStatus.readFields(new DataInputStream(new ByteArrayInputStream(baos.toByteArray())));
  LOG.info(taskStatus.getStateString());
  int mapTaskIndex=mapIds.indexOf(taskId);
  if (mapTaskIndex >= 0) {
    float numTasks=(float)this.numMapTasks;
    partialMapProgress[mapTaskIndex]=taskStatus.getProgress();
    mapCounters[mapTaskIndex]=taskStatus.getCounters();
    float partialProgress=0.0f;
    for (    float f : partialMapProgress) {
      partialProgress+=f;
    }
    status.setMapProgress(partialProgress / numTasks);
  }
 else {
    int reduceTaskIndex=taskId.getTaskID().getId();
    float numTasks=(float)this.numReduceTasks;
    partialReduceProgress[reduceTaskIndex]=taskStatus.getProgress();
    reduceCounters[reduceTaskIndex]=taskStatus.getCounters();
    float partialProgress=0.0f;
    for (    float f : partialReduceProgress) {
      partialProgress+=f;
    }
    status.setReduceProgress(partialProgress / numTasks);
  }
  return feedback;
}
