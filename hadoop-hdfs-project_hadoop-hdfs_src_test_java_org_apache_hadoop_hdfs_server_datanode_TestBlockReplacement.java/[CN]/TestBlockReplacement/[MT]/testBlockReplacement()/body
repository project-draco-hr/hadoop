{
  final Configuration CONF=new HdfsConfiguration();
  final String[] INITIAL_RACKS={"/RACK0","/RACK1","/RACK2"};
  final String[] NEW_RACKS={"/RACK2"};
  final short REPLICATION_FACTOR=(short)3;
  final int DEFAULT_BLOCK_SIZE=1024;
  final Random r=new Random();
  CONF.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DEFAULT_BLOCK_SIZE);
  CONF.setInt(HdfsClientConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,DEFAULT_BLOCK_SIZE / 2);
  CONF.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,500);
  cluster=new MiniDFSCluster.Builder(CONF).numDataNodes(REPLICATION_FACTOR).racks(INITIAL_RACKS).build();
  try {
    cluster.waitActive();
    FileSystem fs=cluster.getFileSystem();
    Path fileName=new Path("/tmp.txt");
    DFSTestUtil.createFile(fs,fileName,DEFAULT_BLOCK_SIZE,REPLICATION_FACTOR,r.nextLong());
    DFSTestUtil.waitReplication(fs,fileName,REPLICATION_FACTOR);
    InetSocketAddress addr=new InetSocketAddress("localhost",cluster.getNameNodePort());
    DFSClient client=new DFSClient(addr,CONF);
    List<LocatedBlock> locatedBlocks=client.getNamenode().getBlockLocations("/tmp.txt",0,DEFAULT_BLOCK_SIZE).getLocatedBlocks();
    assertEquals(1,locatedBlocks.size());
    LocatedBlock block=locatedBlocks.get(0);
    DatanodeInfo[] oldNodes=block.getLocations();
    assertEquals(oldNodes.length,3);
    ExtendedBlock b=block.getBlock();
    cluster.startDataNodes(CONF,1,true,null,NEW_RACKS);
    cluster.waitActive();
    DatanodeInfo[] datanodes=client.datanodeReport(DatanodeReportType.ALL);
    DatanodeInfo newNode=null;
    for (    DatanodeInfo node : datanodes) {
      Boolean isNewNode=true;
      for (      DatanodeInfo oldNode : oldNodes) {
        if (node.equals(oldNode)) {
          isNewNode=false;
          break;
        }
      }
      if (isNewNode) {
        newNode=node;
        break;
      }
    }
    assertTrue(newNode != null);
    DatanodeInfo source=null;
    ArrayList<DatanodeInfo> proxies=new ArrayList<DatanodeInfo>(2);
    for (    DatanodeInfo node : datanodes) {
      if (node != newNode) {
        if (node.getNetworkLocation().equals(newNode.getNetworkLocation())) {
          source=node;
        }
 else {
          proxies.add(node);
        }
      }
    }
    assertTrue(source != null && proxies.size() == 2);
    LOG.info("Testcase 1: Proxy " + newNode + " does not contain the block "+ b);
    assertFalse(replaceBlock(b,source,newNode,proxies.get(0)));
    LOG.info("Testcase 2: Destination " + proxies.get(1) + " contains the block "+ b);
    assertFalse(replaceBlock(b,source,proxies.get(0),proxies.get(1)));
    LOG.info("Testcase 3: Source=" + source + " Proxy="+ proxies.get(0)+ " Destination="+ newNode);
    assertTrue(replaceBlock(b,source,proxies.get(0),newNode));
    checkBlocks(new DatanodeInfo[]{newNode,proxies.get(0),proxies.get(1)},fileName.toString(),DEFAULT_BLOCK_SIZE,REPLICATION_FACTOR,client);
    LOG.info("Testcase 4: invalid del hint " + proxies.get(0));
    assertTrue(replaceBlock(b,proxies.get(0),proxies.get(1),source));
    checkBlocks(new DatanodeInfo[]{},fileName.toString(),DEFAULT_BLOCK_SIZE,REPLICATION_FACTOR,client);
  }
  finally {
    cluster.shutdown();
  }
}
