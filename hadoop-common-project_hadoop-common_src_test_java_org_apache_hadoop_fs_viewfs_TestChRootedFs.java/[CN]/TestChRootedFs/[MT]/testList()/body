{
  FileStatus fs=fc.getFileStatus(new Path("/"));
  Assert.assertTrue(fs.isDirectory());
  Assert.assertEquals(fs.getPath(),chrootedTo);
  FileStatus[] dirPaths=fc.util().listStatus(new Path("/"));
  Assert.assertEquals(0,dirPaths.length);
  fileContextTestHelper.createFileNonRecursive(fc,"/foo");
  fileContextTestHelper.createFileNonRecursive(fc,"/bar");
  fc.mkdir(new Path("/dirX"),FileContext.DEFAULT_PERM,false);
  fc.mkdir(fileContextTestHelper.getTestRootPath(fc,"/dirY"),FileContext.DEFAULT_PERM,false);
  fc.mkdir(new Path("/dirX/dirXX"),FileContext.DEFAULT_PERM,false);
  dirPaths=fc.util().listStatus(new Path("/"));
  Assert.assertEquals(4,dirPaths.length);
  fs=fileContextTestHelper.containsPath(fcTarget,"foo",dirPaths);
  Assert.assertNotNull(fs);
  Assert.assertTrue(fs.isFile());
  fs=fileContextTestHelper.containsPath(fcTarget,"bar",dirPaths);
  Assert.assertNotNull(fs);
  Assert.assertTrue(fs.isFile());
  fs=fileContextTestHelper.containsPath(fcTarget,"dirX",dirPaths);
  Assert.assertNotNull(fs);
  Assert.assertTrue(fs.isDirectory());
  fs=fileContextTestHelper.containsPath(fcTarget,"dirY",dirPaths);
  Assert.assertNotNull(fs);
  Assert.assertTrue(fs.isDirectory());
}
