{
  LOG.warn(diagnosticInfo);
  String errorFileNamePattern=conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);
  FSDataInputStream errorFileIS=null;
  try {
    FileSystem fileSystem=FileSystem.getLocal(conf).getRaw();
    FileStatus[] errorFileStatuses=fileSystem.globStatus(new Path(containerLogDir,errorFileNamePattern));
    if (errorFileStatuses != null && errorFileStatuses.length != 0) {
      long tailSizeInBytes=conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);
      Path errorFile=errorFileStatuses[0].getPath();
      long fileSize=errorFileStatuses[0].getLen();
      if (errorFileStatuses.length > 1) {
        String[] errorFileNames=new String[errorFileStatuses.length];
        long latestModifiedTime=errorFileStatuses[0].getModificationTime();
        errorFileNames[0]=errorFileStatuses[0].getPath().getName();
        for (int i=1; i < errorFileStatuses.length; i++) {
          errorFileNames[i]=errorFileStatuses[i].getPath().getName();
          if (errorFileStatuses[i].getModificationTime() > latestModifiedTime) {
            latestModifiedTime=errorFileStatuses[i].getModificationTime();
            errorFile=errorFileStatuses[i].getPath();
            fileSize=errorFileStatuses[i].getLen();
          }
        }
        diagnosticInfo.append("Error files: ").append(StringUtils.join(", ",errorFileNames)).append(".\n");
      }
      long startPosition=(fileSize < tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;
      int bufferSize=(int)((fileSize < tailSizeInBytes) ? fileSize : tailSizeInBytes);
      byte[] tailBuffer=new byte[bufferSize];
      errorFileIS=fileSystem.open(errorFile);
      errorFileIS.readFully(startPosition,tailBuffer);
      diagnosticInfo.append("Last ").append(tailSizeInBytes).append(" bytes of ").append(errorFile.getName()).append(" :\n").append(new String(tailBuffer,StandardCharsets.UTF_8));
    }
  }
 catch (  IOException e) {
    LOG.error("Failed to get tail of the container's error log file",e);
  }
 finally {
    IOUtils.cleanup(LOG,errorFileIS);
  }
  this.dispatcher.getEventHandler().handle(new ContainerExitEvent(containerID,ContainerEventType.CONTAINER_EXITED_WITH_FAILURE,ret,diagnosticInfo.toString()));
}
