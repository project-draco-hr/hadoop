{
  environment.put(Environment.CONTAINER_ID.name(),container.getContainerId().toString());
  environment.put(Environment.NM_PORT.name(),String.valueOf(this.context.getNodeId().getPort()));
  environment.put(Environment.NM_HOST.name(),this.context.getNodeId().getHost());
  environment.put(Environment.NM_HTTP_PORT.name(),String.valueOf(this.context.getHttpPort()));
  environment.put(Environment.LOCAL_DIRS.name(),StringUtils.join(",",appDirs));
  environment.put(Environment.LOG_DIRS.name(),StringUtils.join(",",containerLogDirs));
  putEnvIfNotNull(environment,Environment.USER.name(),container.getUser());
  putEnvIfNotNull(environment,Environment.LOGNAME.name(),container.getUser());
  putEnvIfNotNull(environment,Environment.HOME.name(),conf.get(YarnConfiguration.NM_USER_HOME_DIR,YarnConfiguration.DEFAULT_NM_USER_HOME_DIR));
  putEnvIfNotNull(environment,Environment.PWD.name(),pwd.toString());
  putEnvIfNotNull(environment,Environment.HADOOP_CONF_DIR.name(),System.getenv(Environment.HADOOP_CONF_DIR.name()));
  if (!Shell.WINDOWS) {
    environment.put("JVM_PID","$$");
  }
  String[] whitelist=conf.get(YarnConfiguration.NM_ENV_WHITELIST,YarnConfiguration.DEFAULT_NM_ENV_WHITELIST).split(",");
  for (  String whitelistEnvVariable : whitelist) {
    putEnvIfAbsent(environment,whitelistEnvVariable.trim());
  }
  Apps.setEnvFromInputString(environment,conf.get(YarnConfiguration.NM_ADMIN_USER_ENV,YarnConfiguration.DEFAULT_NM_ADMIN_USER_ENV));
  if (Shell.WINDOWS) {
    String inputClassPath=environment.get(Environment.CLASSPATH.name());
    if (inputClassPath != null && !inputClassPath.isEmpty()) {
      StringBuilder newClassPath=new StringBuilder(inputClassPath);
      for (      Map.Entry<Path,List<String>> entry : resources.entrySet()) {
        boolean targetIsDirectory=new File(entry.getKey().toUri().getPath()).isDirectory();
        for (        String linkName : entry.getValue()) {
          newClassPath.append(File.pathSeparator).append(pwd.toString()).append(Path.SEPARATOR).append(linkName);
          if (targetIsDirectory) {
            newClassPath.append(Path.SEPARATOR);
          }
        }
      }
      Map<String,String> mergedEnv=new HashMap<String,String>(System.getenv());
      mergedEnv.putAll(environment);
      String classPathJar=FileUtil.createJarWithClassPath(newClassPath.toString(),pwd,mergedEnv);
      environment.put(Environment.CLASSPATH.name(),classPathJar);
    }
  }
}
