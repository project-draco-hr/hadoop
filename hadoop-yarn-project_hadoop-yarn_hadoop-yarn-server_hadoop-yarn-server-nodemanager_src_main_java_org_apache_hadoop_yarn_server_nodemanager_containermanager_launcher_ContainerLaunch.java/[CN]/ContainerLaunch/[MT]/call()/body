{
  if (!validateContainerState()) {
    return 0;
  }
  final ContainerLaunchContext launchContext=container.getLaunchContext();
  ContainerId containerID=container.getContainerId();
  String containerIdStr=ConverterUtils.toString(containerID);
  final List<String> command=launchContext.getCommands();
  int ret=-1;
  Path containerLogDir;
  try {
    Map<Path,List<String>> localResources=getLocalizedResources();
    final String user=container.getUser();
    List<String> newCmds=new ArrayList<String>(command.size());
    String appIdStr=app.getAppId().toString();
    String relativeContainerLogDir=ContainerLaunch.getRelativeContainerLogDir(appIdStr,containerIdStr);
    containerLogDir=dirsHandler.getLogPathForWrite(relativeContainerLogDir,false);
    recordContainerLogDir(containerID,containerLogDir.toString());
    for (    String str : command) {
      newCmds.add(expandEnvironment(str,containerLogDir));
    }
    launchContext.setCommands(newCmds);
    Map<String,String> environment=launchContext.getEnvironment();
    for (    Entry<String,String> entry : environment.entrySet()) {
      String value=entry.getValue();
      value=expandEnvironment(value,containerLogDir);
      entry.setValue(value);
    }
    FileContext lfs=FileContext.getLocalFSFileContext();
    Path nmPrivateContainerScriptPath=dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr,containerIdStr) + Path.SEPARATOR + CONTAINER_SCRIPT);
    Path nmPrivateTokensPath=dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr,containerIdStr) + Path.SEPARATOR + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT,containerIdStr));
    Path nmPrivateClasspathJarDir=dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr,containerIdStr));
    DataOutputStream containerScriptOutStream=null;
    DataOutputStream tokensOutStream=null;
    Path containerWorkDir=dirsHandler.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user+ Path.SEPARATOR+ ContainerLocalizer.APPCACHE+ Path.SEPARATOR+ appIdStr+ Path.SEPARATOR+ containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,false);
    recordContainerWorkDir(containerID,containerWorkDir.toString());
    String pidFileSubpath=getPidFileSubpath(appIdStr,containerIdStr);
    pidFilePath=dirsHandler.getLocalPathForWrite(pidFileSubpath);
    List<String> localDirs=dirsHandler.getLocalDirs();
    List<String> logDirs=dirsHandler.getLogDirs();
    List<String> containerLocalDirs=getContainerLocalDirs(localDirs);
    List<String> containerLogDirs=getContainerLogDirs(logDirs);
    if (!dirsHandler.areDisksHealthy()) {
      ret=ContainerExitStatus.DISKS_FAILED;
      throw new IOException("Most of the disks failed. " + dirsHandler.getDisksHealthReport(false));
    }
    try {
      List<Path> appDirs=new ArrayList<Path>(localDirs.size());
      for (      String localDir : localDirs) {
        Path usersdir=new Path(localDir,ContainerLocalizer.USERCACHE);
        Path userdir=new Path(usersdir,user);
        Path appsdir=new Path(userdir,ContainerLocalizer.APPCACHE);
        appDirs.add(new Path(appsdir,appIdStr));
      }
      containerScriptOutStream=lfs.create(nmPrivateContainerScriptPath,EnumSet.of(CREATE,OVERWRITE));
      environment.put(ApplicationConstants.CONTAINER_TOKEN_FILE_ENV_NAME,new Path(containerWorkDir,FINAL_CONTAINER_TOKENS_FILE).toUri().getPath());
      sanitizeEnv(environment,containerWorkDir,appDirs,containerLogDirs,localResources,nmPrivateClasspathJarDir);
      exec.writeLaunchEnv(containerScriptOutStream,environment,localResources,launchContext.getCommands(),new Path(containerLogDirs.get(0)));
      tokensOutStream=lfs.create(nmPrivateTokensPath,EnumSet.of(CREATE,OVERWRITE));
      Credentials creds=container.getCredentials();
      creds.writeTokenStorageToStream(tokensOutStream);
    }
  finally {
      IOUtils.cleanup(LOG,containerScriptOutStream,tokensOutStream);
    }
    ret=launchContainer(new ContainerStartContext.Builder().setContainer(container).setLocalizedResources(localResources).setNmPrivateContainerScriptPath(nmPrivateContainerScriptPath).setNmPrivateTokensPath(nmPrivateTokensPath).setUser(user).setAppId(appIdStr).setContainerWorkDir(containerWorkDir).setLocalDirs(localDirs).setLogDirs(logDirs).setContainerLocalDirs(containerLocalDirs).setContainerLogDirs(containerLogDirs).build());
  }
 catch (  Throwable e) {
    LOG.warn("Failed to launch container.",e);
    dispatcher.getEventHandler().handle(new ContainerExitEvent(containerID,ContainerEventType.CONTAINER_EXITED_WITH_FAILURE,ret,e.getMessage()));
    return ret;
  }
 finally {
    setContainerCompletedStatus(ret);
  }
  handleContainerExitCode(ret,containerLogDir);
  return ret;
}
