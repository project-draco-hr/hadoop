{
  final ContainerLaunchContext launchContext=container.getLaunchContext();
  final Map<Path,List<String>> localResources=container.getLocalizedResources();
  ContainerId containerID=container.getContainerID();
  String containerIdStr=ConverterUtils.toString(containerID);
  final String user=launchContext.getUser();
  final List<String> command=launchContext.getCommands();
  int ret=-1;
  try {
    List<String> newCmds=new ArrayList<String>(command.size());
    String appIdStr=app.getAppId().toString();
    Path containerLogDir=dirsHandler.getLogPathForWrite(ContainerLaunch.getRelativeContainerLogDir(appIdStr,containerIdStr),false);
    for (    String str : command) {
      newCmds.add(str.replace(ApplicationConstants.LOG_DIR_EXPANSION_VAR,containerLogDir.toUri().getPath()));
    }
    launchContext.setCommands(newCmds);
    Map<String,String> environment=launchContext.getEnvironment();
    for (    Entry<String,String> entry : environment.entrySet()) {
      String value=entry.getValue();
      entry.setValue(value.replace(ApplicationConstants.LOG_DIR_EXPANSION_VAR,containerLogDir.toUri().getPath()));
    }
    FileContext lfs=FileContext.getLocalFSFileContext();
    Path nmPrivateContainerScriptPath=dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr,containerIdStr) + Path.SEPARATOR + CONTAINER_SCRIPT);
    Path nmPrivateTokensPath=dirsHandler.getLocalPathForWrite(getContainerPrivateDir(appIdStr,containerIdStr) + Path.SEPARATOR + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT,containerIdStr));
    DataOutputStream containerScriptOutStream=null;
    DataOutputStream tokensOutStream=null;
    Path containerWorkDir=dirsHandler.getLocalPathForWrite(ContainerLocalizer.USERCACHE + Path.SEPARATOR + user+ Path.SEPARATOR+ ContainerLocalizer.APPCACHE+ Path.SEPARATOR+ appIdStr+ Path.SEPARATOR+ containerIdStr,LocalDirAllocator.SIZE_UNKNOWN,false);
    String pidFileSuffix=String.format(ContainerLaunch.PID_FILE_NAME_FMT,containerIdStr);
    pidFilePath=dirsHandler.getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR + pidFileSuffix);
    List<String> localDirs=dirsHandler.getLocalDirs();
    List<String> logDirs=dirsHandler.getLogDirs();
    if (!dirsHandler.areDisksHealthy()) {
      ret=YarnConfiguration.DISKS_FAILED;
      throw new IOException("Most of the disks failed. " + dirsHandler.getDisksHealthReport());
    }
    try {
      List<Path> appDirs=new ArrayList<Path>(localDirs.size());
      for (      String localDir : localDirs) {
        Path usersdir=new Path(localDir,ContainerLocalizer.USERCACHE);
        Path userdir=new Path(usersdir,user);
        Path appsdir=new Path(userdir,ContainerLocalizer.APPCACHE);
        appDirs.add(new Path(appsdir,appIdStr));
      }
      containerScriptOutStream=lfs.create(nmPrivateContainerScriptPath,EnumSet.of(CREATE,OVERWRITE));
      environment.put(ApplicationConstants.CONTAINER_TOKEN_FILE_ENV_NAME,new Path(containerWorkDir,FINAL_CONTAINER_TOKENS_FILE).toUri().getPath());
      sanitizeEnv(environment,containerWorkDir,appDirs);
      writeLaunchEnv(containerScriptOutStream,environment,localResources,launchContext.getCommands());
      tokensOutStream=lfs.create(nmPrivateTokensPath,EnumSet.of(CREATE,OVERWRITE));
      Credentials creds=container.getCredentials();
      creds.writeTokenStorageToStream(tokensOutStream);
    }
  finally {
      IOUtils.cleanup(LOG,containerScriptOutStream,tokensOutStream);
    }
    dispatcher.getEventHandler().handle(new ContainerEvent(containerID,ContainerEventType.CONTAINER_LAUNCHED));
    if (!shouldLaunchContainer.compareAndSet(false,true)) {
      LOG.info("Container " + containerIdStr + " not launched as "+ "cleanup already called");
      ret=ExitCode.TERMINATED.getExitCode();
    }
 else {
      exec.activateContainer(containerID,pidFilePath);
      ret=exec.launchContainer(container,nmPrivateContainerScriptPath,nmPrivateTokensPath,user,appIdStr,containerWorkDir,localDirs,logDirs);
    }
  }
 catch (  Throwable e) {
    LOG.warn("Failed to launch container.",e);
    dispatcher.getEventHandler().handle(new ContainerExitEvent(launchContext.getContainerId(),ContainerEventType.CONTAINER_EXITED_WITH_FAILURE,ret,e.getMessage()));
    return ret;
  }
 finally {
    completed.set(true);
    exec.deactivateContainer(containerID);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Container " + containerIdStr + " completed with exit code "+ ret);
  }
  if (ret == ExitCode.FORCE_KILLED.getExitCode() || ret == ExitCode.TERMINATED.getExitCode()) {
    dispatcher.getEventHandler().handle(new ContainerExitEvent(launchContext.getContainerId(),ContainerEventType.CONTAINER_KILLED_ON_REQUEST,ret,"Container exited with a non-zero exit code " + ret));
    return ret;
  }
  if (ret != 0) {
    LOG.warn("Container exited with a non-zero exit code " + ret);
    this.dispatcher.getEventHandler().handle(new ContainerExitEvent(launchContext.getContainerId(),ContainerEventType.CONTAINER_EXITED_WITH_FAILURE,ret,"Container exited with a non-zero exit code " + ret));
    return ret;
  }
  LOG.info("Container " + containerIdStr + " succeeded ");
  dispatcher.getEventHandler().handle(new ContainerEvent(launchContext.getContainerId(),ContainerEventType.CONTAINER_EXITED_WITH_SUCCESS));
  return 0;
}
