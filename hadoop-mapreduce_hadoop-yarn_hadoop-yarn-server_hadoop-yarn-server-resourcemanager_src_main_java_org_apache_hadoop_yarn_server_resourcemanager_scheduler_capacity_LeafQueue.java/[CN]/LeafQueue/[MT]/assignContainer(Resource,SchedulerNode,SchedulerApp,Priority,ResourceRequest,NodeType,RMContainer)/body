{
  if (LOG.isDebugEnabled()) {
    LOG.info("DEBUG --- assignContainers:" + " node=" + node.getHostName() + " application="+ application.getApplicationId().getId()+ " priority="+ priority.getPriority()+ " request="+ request+ " type="+ type);
  }
  Resource capability=request.getCapability();
  Resource available=node.getAvailableResource();
  assert(available.getMemory() > 0);
  Container container=getContainer(rmContainer,application,node,capability);
  int availableContainers=available.getMemory() / capability.getMemory();
  if (availableContainers > 0) {
    if (rmContainer != null) {
      unreserve(application,priority,node,rmContainer);
    }
    RMContainer allocatedContainer=application.allocate(type,node,priority,request,container);
    if (allocatedContainer == null) {
      return Resources.none();
    }
    node.allocateContainer(application.getApplicationId(),allocatedContainer);
    LOG.info("assignedContainer" + " application=" + application.getApplicationId() + " container="+ container+ " containerId="+ container.getId()+ " queue="+ this+ " util="+ getUtilization()+ " used="+ usedResources+ " cluster="+ clusterResource);
    return container.getResource();
  }
 else {
    reserve(application,priority,node,rmContainer,container);
    LOG.info("Reserved container " + " application=" + application.getApplicationId() + " resource="+ request.getCapability()+ " queue="+ this.toString()+ " util="+ getUtilization()+ " used="+ usedResources+ " cluster="+ clusterResource);
    return request.getCapability();
  }
}
