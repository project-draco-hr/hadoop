{
  DataNodeFaultInjector dnFaultInjector=new DataNodeFaultInjector(){
    @Override public boolean dropHeartbeatPacket(){
      return true;
    }
  }
;
  DataNodeFaultInjector oldDnInjector=DataNodeFaultInjector.get();
  DataNodeFaultInjector.set(dnFaultInjector);
  Configuration conf=new HdfsConfiguration();
  conf.set(HdfsClientConfigKeys.DFS_CLIENT_SOCKET_TIMEOUT_KEY,"3000");
  MiniDFSCluster cluster=null;
  try {
    int numDataNodes=2;
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build();
    cluster.waitActive();
    FileSystem fs=cluster.getFileSystem();
    FSDataOutputStream out=fs.create(new Path("noheartbeat.dat"),(short)2);
    out.write(0x31);
    out.hflush();
    DFSOutputStream dfsOut=(DFSOutputStream)out.getWrappedStream();
    DatanodeInfo[] orgNodes=dfsOut.getPipeline();
    Thread.sleep(3500);
    out.write(0x32);
    out.hflush();
    DatanodeInfo[] newNodes=dfsOut.getPipeline();
    out.close();
    boolean contains=false;
    for (int i=0; i < newNodes.length; i++) {
      if (orgNodes[0].getXferAddr().equals(newNodes[i].getXferAddr())) {
        throw new IOException("The first datanode should have been replaced.");
      }
      if (orgNodes[1].getXferAddr().equals(newNodes[i].getXferAddr())) {
        contains=true;
      }
    }
    Assert.assertTrue(contains);
  }
  finally {
    DataNodeFaultInjector.set(oldDnInjector);
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
