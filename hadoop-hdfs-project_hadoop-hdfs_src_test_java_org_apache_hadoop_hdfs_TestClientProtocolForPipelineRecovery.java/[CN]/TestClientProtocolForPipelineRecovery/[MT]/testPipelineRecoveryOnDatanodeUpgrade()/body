{
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
    cluster.waitActive();
    FileSystem fileSys=cluster.getFileSystem();
    Path file=new Path("/testPipelineRecoveryOnDatanodeUpgrade");
    DFSTestUtil.createFile(fileSys,file,10240L,(short)2,0L);
    final DFSOutputStream out=(DFSOutputStream)(fileSys.append(file).getWrappedStream());
    out.write(1);
    out.hflush();
    final long oldGs=out.getBlock().getGenerationStamp();
    MiniDFSCluster.DataNodeProperties dnProps=cluster.stopDataNodeForUpgrade(0);
    GenericTestUtils.waitForThreadTermination("Async datanode shutdown thread",100,10000);
    cluster.restartDataNode(dnProps,true);
    cluster.waitActive();
    GenericTestUtils.waitFor(new Supplier<Boolean>(){
      @Override public Boolean get(){
        return out.getBlock().getGenerationStamp() > oldGs;
      }
    }
,100,10000);
    Assert.assertEquals("The pipeline recovery count shouldn't increase",0,out.getStreamer().getPipelineRecoveryCount());
    out.write(1);
    out.close();
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
