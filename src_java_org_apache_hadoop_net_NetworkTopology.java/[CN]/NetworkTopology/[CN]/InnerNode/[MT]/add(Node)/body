{
  if (!isAncestor(n))   throw new IllegalArgumentException(n.getName() + ", which is located at " + n.getNetworkLocation()+ ", is not a decendent of "+ getPath(this));
  if (isParent(n)) {
    n.setParent(this);
    n.setLevel(this.level + 1);
    for (int i=0; i < children.size(); i++) {
      if (children.get(i).getName().equals(n.getName())) {
        children.set(i,n);
        return false;
      }
    }
    children.add(n);
    numOfLeaves++;
    return true;
  }
 else {
    String parentName=getNextAncestorName(n);
    InnerNode parentNode=null;
    for (int i=0; i < children.size(); i++) {
      if (children.get(i).getName().equals(parentName)) {
        parentNode=(InnerNode)children.get(i);
        break;
      }
    }
    if (parentNode == null) {
      parentNode=new InnerNode(parentName,getPath(this),this,this.getLevel() + 1);
      children.add(parentNode);
    }
    if (parentNode.add(n)) {
      numOfLeaves++;
      return true;
    }
 else {
      return false;
    }
  }
}
