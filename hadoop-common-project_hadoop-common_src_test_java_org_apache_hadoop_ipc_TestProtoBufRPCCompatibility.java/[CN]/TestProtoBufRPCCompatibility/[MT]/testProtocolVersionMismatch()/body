{
  conf=new Configuration();
  conf.setInt(CommonConfigurationKeys.IPC_MAXIMUM_DATA_LENGTH,1024);
  RPC.setProtocolEngine(conf,NewRpcService.class,ProtobufRpcEngine.class);
  NewServerImpl serverImpl=new NewServerImpl();
  BlockingService service=NewProtobufRpcProto.newReflectiveBlockingService(serverImpl);
  server=new RPC.Builder(conf).setProtocol(NewRpcService.class).setInstance(service).setBindAddress(ADDRESS).setPort(PORT).build();
  addr=NetUtils.getConnectAddress(server);
  server.start();
  RPC.setProtocolEngine(conf,OldRpcService.class,ProtobufRpcEngine.class);
  OldRpcService proxy=RPC.getProxy(OldRpcService.class,0,addr,conf);
  EmptyRequestProto emptyRequest=EmptyRequestProto.newBuilder().build();
  try {
    proxy.ping(null,emptyRequest);
    fail("Expected an exception to occur as version mismatch.");
  }
 catch (  Exception e) {
    if (!(e.getMessage().contains("version mismatch"))) {
      throw new IOException(e);
    }
  }
  RPC.setProtocolEngine(conf,NewerRpcService.class,ProtobufRpcEngine.class);
  NewerRpcService newProxy=RPC.getProxy(NewerRpcService.class,0,addr,conf);
  newProxy.echo(null,emptyRequest);
}
