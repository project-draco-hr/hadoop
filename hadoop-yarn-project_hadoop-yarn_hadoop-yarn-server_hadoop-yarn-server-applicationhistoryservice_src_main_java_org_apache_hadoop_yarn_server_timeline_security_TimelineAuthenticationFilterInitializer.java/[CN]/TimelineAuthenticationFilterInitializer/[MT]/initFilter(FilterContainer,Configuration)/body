{
  filterConfig=new HashMap<String,String>();
  filterConfig.put(TimelineAuthenticationFilter.COOKIE_PATH,"/");
  for (  Map.Entry<String,String> entry : conf) {
    String name=entry.getKey();
    if (name.startsWith(ProxyUsers.CONF_HADOOP_PROXYUSER)) {
      String value=conf.get(name);
      name=name.substring("hadoop.".length());
      filterConfig.put(name,value);
    }
  }
  for (  Map.Entry<String,String> entry : conf) {
    String name=entry.getKey();
    if (name.startsWith(PREFIX)) {
      String value=conf.get(name);
      name=name.substring(PREFIX.length());
      filterConfig.put(name,value);
    }
  }
  String signatureSecretFile=filterConfig.get(SIGNATURE_SECRET_FILE);
  if (signatureSecretFile != null) {
    Reader reader=null;
    try {
      StringBuilder secret=new StringBuilder();
      reader=new InputStreamReader(new FileInputStream(new File(signatureSecretFile)),Charset.forName("UTF-8"));
      int c=reader.read();
      while (c > -1) {
        secret.append((char)c);
        c=reader.read();
      }
      filterConfig.put(TimelineAuthenticationFilter.SIGNATURE_SECRET,secret.toString());
    }
 catch (    IOException ex) {
      throw new RuntimeException("Could not read HTTP signature secret file: " + signatureSecretFile);
    }
 finally {
      IOUtils.closeStream(reader);
    }
  }
  String authType=filterConfig.get(AuthenticationFilter.AUTH_TYPE);
  if (authType.equals(PseudoAuthenticationHandler.TYPE)) {
    filterConfig.put(AuthenticationFilter.AUTH_TYPE,PseudoDelegationTokenAuthenticationHandler.class.getName());
  }
 else   if (authType.equals(KerberosAuthenticationHandler.TYPE)) {
    filterConfig.put(AuthenticationFilter.AUTH_TYPE,KerberosDelegationTokenAuthenticationHandler.class.getName());
    String bindAddress=conf.get(HttpServer2.BIND_ADDRESS);
    String principal=filterConfig.get(KerberosAuthenticationHandler.PRINCIPAL);
    if (principal != null) {
      try {
        principal=SecurityUtil.getServerPrincipal(principal,bindAddress);
      }
 catch (      IOException ex) {
        throw new RuntimeException("Could not resolve Kerberos principal name: " + ex.toString(),ex);
      }
      filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL,principal);
    }
  }
  filterConfig.put(DelegationTokenAuthenticationHandler.TOKEN_KIND,TimelineDelegationTokenIdentifier.KIND_NAME.toString());
  container.addGlobalFilter("Timeline Authentication Filter",TimelineAuthenticationFilter.class.getName(),filterConfig);
}
