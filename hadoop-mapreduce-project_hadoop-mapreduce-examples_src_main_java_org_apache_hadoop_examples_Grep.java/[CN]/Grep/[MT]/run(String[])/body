{
  if (args.length < 3) {
    System.out.println("Grep <inDir> <outDir> <regex> [<group>]");
    ToolRunner.printGenericCommandUsage(System.out);
    return 2;
  }
  Path tempDir=new Path("grep-temp-" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)));
  Configuration conf=getConf();
  conf.set(RegexMapper.PATTERN,args[2]);
  if (args.length == 4)   conf.set(RegexMapper.GROUP,args[3]);
  Job grepJob=new Job(conf);
  try {
    grepJob.setJobName("grep-search");
    grepJob.setJarByClass(Grep.class);
    FileInputFormat.setInputPaths(grepJob,args[0]);
    grepJob.setMapperClass(RegexMapper.class);
    grepJob.setCombinerClass(LongSumReducer.class);
    grepJob.setReducerClass(LongSumReducer.class);
    FileOutputFormat.setOutputPath(grepJob,tempDir);
    grepJob.setOutputFormatClass(SequenceFileOutputFormat.class);
    grepJob.setOutputKeyClass(Text.class);
    grepJob.setOutputValueClass(LongWritable.class);
    grepJob.waitForCompletion(true);
    Job sortJob=new Job(conf);
    sortJob.setJobName("grep-sort");
    sortJob.setJarByClass(Grep.class);
    FileInputFormat.setInputPaths(sortJob,tempDir);
    sortJob.setInputFormatClass(SequenceFileInputFormat.class);
    sortJob.setMapperClass(InverseMapper.class);
    sortJob.setNumReduceTasks(1);
    FileOutputFormat.setOutputPath(sortJob,new Path(args[1]));
    sortJob.setSortComparatorClass(LongWritable.DecreasingComparator.class);
    sortJob.waitForCompletion(true);
  }
  finally {
    FileSystem.get(conf).delete(tempDir,true);
  }
  return 0;
}
