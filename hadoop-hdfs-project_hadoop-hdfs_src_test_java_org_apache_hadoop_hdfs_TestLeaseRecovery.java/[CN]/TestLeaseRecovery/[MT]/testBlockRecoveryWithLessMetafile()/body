{
  Configuration conf=new Configuration();
  conf.set(DFSConfigKeys.DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY,UserGroupInformation.getCurrentUser().getShortUserName());
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  Path file=new Path("/testRecoveryFile");
  DistributedFileSystem dfs=cluster.getFileSystem();
  FSDataOutputStream out=dfs.create(file);
  final int FILE_SIZE=2 * 1024 * 1024;
  int count=0;
  while (count < FILE_SIZE) {
    out.writeBytes("Data");
    count+=4;
  }
  out.hsync();
  ((DFSOutputStream)out.getWrappedStream()).abort();
  LocatedBlocks locations=cluster.getNameNodeRpc().getBlockLocations(file.toString(),0,count);
  ExtendedBlock block=locations.get(0).getBlock();
  final int CHECKSUM_SIZE=4;
  final int bytesPerChecksum=conf.getInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_DEFAULT);
  final int metaFileSize=(FILE_SIZE + bytesPerChecksum - 1) / bytesPerChecksum * CHECKSUM_SIZE + 8;
  final int newMetaFileSize=metaFileSize - CHECKSUM_SIZE;
  cluster.truncateMeta(0,block,newMetaFileSize);
  DataNodeProperties dnProp=cluster.stopDataNode(0);
  cluster.restartDataNode(dnProp,true);
  DistributedFileSystem newdfs=(DistributedFileSystem)FileSystem.newInstance(cluster.getConfiguration(0));
  count=0;
  while (++count < 10 && !newdfs.recoverLease(file)) {
    Thread.sleep(1000);
  }
  assertTrue("File should be closed",newdfs.recoverLease(file));
  final long expectedNewFileLen=FILE_SIZE - bytesPerChecksum;
  final long newFileLen=newdfs.getFileStatus(file).getLen();
  assertEquals(newFileLen,expectedNewFileLen);
}
