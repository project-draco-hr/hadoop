{
  final String name=startDigit + "_" + nDigits;
  out.println("Working Directory = " + workingDir);
  out.println();
  final FileSystem fs=FileSystem.get(conf);
  final Path dir=fs.makeQualified(new Path(workingDir));
  if (fs.exists(dir)) {
    throw new IOException("Working directory " + dir + " already exists.  Please remove it first.");
  }
 else   if (!fs.mkdirs(dir)) {
    throw new IOException("Cannot create working directory " + dir);
  }
  out.println("Start Digit      = " + startDigit);
  out.println("Number of Digits = " + nDigits);
  out.println("Number of Maps   = " + nMaps);
  final Job job=createJob(name,conf);
  final Path hexfile=new Path(dir,"pi_" + name + ".hex");
  FileOutputFormat.setOutputPath(job,new Path(dir,"out"));
  job.getConfiguration().set(WORKING_DIR_PROPERTY,dir.toString());
  job.getConfiguration().set(HEX_FILE_PROPERTY,hexfile.toString());
  job.getConfiguration().setInt(DIGIT_START_PROPERTY,startDigit);
  job.getConfiguration().setInt(DIGIT_SIZE_PROPERTY,nDigits);
  job.getConfiguration().setInt(DIGIT_PARTS_PROPERTY,nMaps);
  out.println("\nStarting Job ...");
  final long startTime=System.currentTimeMillis();
  try {
    if (!job.waitForCompletion(true)) {
      out.println("Job failed.");
      System.exit(1);
    }
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
 finally {
    final double duration=(System.currentTimeMillis() - startTime) / 1000.0;
    out.println("Duration is " + duration + " seconds.");
  }
  out.println("Output file: " + hexfile);
}
