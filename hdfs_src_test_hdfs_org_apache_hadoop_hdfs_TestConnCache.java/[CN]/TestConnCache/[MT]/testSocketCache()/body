{
  final int CACHE_SIZE=4;
  SocketCache cache=new SocketCache(CACHE_SIZE);
  InetSocketAddress nnAddr=new InetSocketAddress("localhost",cluster.getNameNodePort());
  DFSClient client=new DFSClient(nnAddr,conf);
  LocatedBlock block=client.getNamenode().getBlockLocations(testFile.toString(),0,FILE_SIZE).getLocatedBlocks().get(0);
  DataNode dn=util.getDataNode(block);
  InetSocketAddress dnAddr=dn.getSelfAddr();
  Socket[] dnSockets=new Socket[CACHE_SIZE];
  for (int i=0; i < dnSockets.length; ++i) {
    dnSockets[i]=client.socketFactory.createSocket(dnAddr.getAddress(),dnAddr.getPort());
  }
  Socket nnSock=new Socket(nnAddr.getAddress(),nnAddr.getPort());
  cache.put(nnSock);
  assertSame("Read the write",nnSock,cache.get(nnAddr));
  cache.put(nnSock);
  for (  Socket dnSock : dnSockets) {
    cache.put(dnSock);
  }
  assertEquals("NN socket evicted",null,cache.get(nnAddr));
  assertTrue("Evicted socket closed",nnSock.isClosed());
  for (  Socket dnSock : dnSockets) {
    assertEquals("Retrieve cached sockets",dnSock,cache.get(dnAddr));
    dnSock.close();
  }
  assertEquals("Cache is empty",0,cache.size());
}
