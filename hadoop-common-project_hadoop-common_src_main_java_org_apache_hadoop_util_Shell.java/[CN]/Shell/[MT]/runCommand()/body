{
  ProcessBuilder builder=new ProcessBuilder(getExecString());
  Timer timeOutTimer=null;
  ShellTimeoutTimerTask timeoutTimerTask=null;
  timedOut.set(false);
  completed.set(false);
  if (environment != null) {
    builder.environment().putAll(this.environment);
  }
  if (dir != null) {
    builder.directory(this.dir);
  }
  builder.redirectErrorStream(redirectErrorStream);
  if (Shell.WINDOWS) {
synchronized (WindowsProcessLaunchLock) {
      process=builder.start();
    }
  }
 else {
    process=builder.start();
  }
  if (timeOutInterval > 0) {
    timeOutTimer=new Timer("Shell command timeout");
    timeoutTimerTask=new ShellTimeoutTimerTask(this);
    timeOutTimer.schedule(timeoutTimerTask,timeOutInterval);
  }
  final BufferedReader errReader=new BufferedReader(new InputStreamReader(process.getErrorStream(),Charset.defaultCharset()));
  BufferedReader inReader=new BufferedReader(new InputStreamReader(process.getInputStream(),Charset.defaultCharset()));
  final StringBuffer errMsg=new StringBuffer();
  Thread errThread=new Thread(){
    @Override public void run(){
      try {
        String line=errReader.readLine();
        while ((line != null) && !isInterrupted()) {
          errMsg.append(line);
          errMsg.append(System.getProperty("line.separator"));
          line=errReader.readLine();
        }
      }
 catch (      IOException ioe) {
        LOG.warn("Error reading the error stream",ioe);
      }
    }
  }
;
  try {
    errThread.start();
  }
 catch (  IllegalStateException ise) {
  }
catch (  OutOfMemoryError oe) {
    LOG.error("Caught " + oe + ". One possible reason is that ulimit"+ " setting of 'max user processes' is too low. If so, do"+ " 'ulimit -u <largerNum>' and try again.");
    throw oe;
  }
  try {
    parseExecResult(inReader);
    String line=inReader.readLine();
    while (line != null) {
      line=inReader.readLine();
    }
    exitCode=process.waitFor();
    joinThread(errThread);
    completed.set(true);
    if (exitCode != 0) {
      throw new ExitCodeException(exitCode,errMsg.toString());
    }
  }
 catch (  InterruptedException ie) {
    InterruptedIOException iie=new InterruptedIOException(ie.toString());
    iie.initCause(ie);
    throw iie;
  }
 finally {
    if (timeOutTimer != null) {
      timeOutTimer.cancel();
    }
    try {
      InputStream stdout=process.getInputStream();
synchronized (stdout) {
        inReader.close();
      }
    }
 catch (    IOException ioe) {
      LOG.warn("Error while closing the input stream",ioe);
    }
    if (!completed.get()) {
      errThread.interrupt();
      joinThread(errThread);
    }
    try {
      InputStream stderr=process.getErrorStream();
synchronized (stderr) {
        errReader.close();
      }
    }
 catch (    IOException ioe) {
      LOG.warn("Error while closing the error stream",ioe);
    }
    process.destroy();
    lastTime=Time.monotonicNow();
  }
}
