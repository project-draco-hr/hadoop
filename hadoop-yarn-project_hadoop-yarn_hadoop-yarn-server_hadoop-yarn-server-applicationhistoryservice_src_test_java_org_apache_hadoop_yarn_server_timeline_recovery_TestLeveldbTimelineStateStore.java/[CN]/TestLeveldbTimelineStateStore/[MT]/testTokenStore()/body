{
  initAndStartTimelineServiceStateStoreService();
  TimelineServiceState state=store.loadState();
  assertTrue("token state not empty",state.tokenState.isEmpty());
  assertTrue("key state not empty",state.tokenMasterKeyState.isEmpty());
  final DelegationKey key1=new DelegationKey(1,2,"keyData1".getBytes());
  final TimelineDelegationTokenIdentifier token1=new TimelineDelegationTokenIdentifier(new Text("tokenOwner1"),new Text("tokenRenewer1"),new Text("tokenUser1"));
  token1.setSequenceNumber(1);
  token1.getBytes();
  final Long tokenDate1=1L;
  final TimelineDelegationTokenIdentifier token2=new TimelineDelegationTokenIdentifier(new Text("tokenOwner2"),new Text("tokenRenewer2"),new Text("tokenUser2"));
  token2.setSequenceNumber(12345678);
  token2.getBytes();
  final Long tokenDate2=87654321L;
  store.storeTokenMasterKey(key1);
  try {
    store.storeTokenMasterKey(key1);
    fail("redundant store of key undetected");
  }
 catch (  IOException e) {
  }
  store.storeToken(token1,tokenDate1);
  store.storeToken(token2,tokenDate2);
  try {
    store.storeToken(token1,tokenDate1);
    fail("redundant store of token undetected");
  }
 catch (  IOException e) {
  }
  store.close();
  initAndStartTimelineServiceStateStoreService();
  state=store.loadState();
  assertEquals("incorrect loaded token count",2,state.tokenState.size());
  assertTrue("missing token 1",state.tokenState.containsKey(token1));
  assertEquals("incorrect token 1 date",tokenDate1,state.tokenState.get(token1));
  assertTrue("missing token 2",state.tokenState.containsKey(token2));
  assertEquals("incorrect token 2 date",tokenDate2,state.tokenState.get(token2));
  assertEquals("incorrect master key count",1,state.tokenMasterKeyState.size());
  assertTrue("missing master key 1",state.tokenMasterKeyState.contains(key1));
  assertEquals("incorrect latest sequence number",12345678,state.getLatestSequenceNumber());
  final DelegationKey key2=new DelegationKey(3,4,"keyData2".getBytes());
  final DelegationKey key3=new DelegationKey(5,6,"keyData3".getBytes());
  final TimelineDelegationTokenIdentifier token3=new TimelineDelegationTokenIdentifier(new Text("tokenOwner3"),new Text("tokenRenewer3"),new Text("tokenUser3"));
  token3.setSequenceNumber(12345679);
  token3.getBytes();
  final Long tokenDate3=87654321L;
  store.removeToken(token1);
  store.storeTokenMasterKey(key2);
  final Long newTokenDate2=975318642L;
  store.updateToken(token2,newTokenDate2);
  store.removeTokenMasterKey(key1);
  store.storeTokenMasterKey(key3);
  store.storeToken(token3,tokenDate3);
  store.close();
  initAndStartTimelineServiceStateStoreService();
  state=store.loadState();
  assertEquals("incorrect loaded token count",2,state.tokenState.size());
  assertFalse("token 1 not removed",state.tokenState.containsKey(token1));
  assertTrue("missing token 2",state.tokenState.containsKey(token2));
  assertEquals("incorrect token 2 date",newTokenDate2,state.tokenState.get(token2));
  assertTrue("missing token 3",state.tokenState.containsKey(token3));
  assertEquals("incorrect token 3 date",tokenDate3,state.tokenState.get(token3));
  assertEquals("incorrect master key count",2,state.tokenMasterKeyState.size());
  assertFalse("master key 1 not removed",state.tokenMasterKeyState.contains(key1));
  assertTrue("missing master key 2",state.tokenMasterKeyState.contains(key2));
  assertTrue("missing master key 3",state.tokenMasterKeyState.contains(key3));
  assertEquals("incorrect latest sequence number",12345679,state.getLatestSequenceNumber());
  store.close();
}
