{
  final Path snapshotsPath=new Path(dir,".snapshot");
  FileStatus[] stats=null;
  stats=hdfs.listStatus(new Path("/.snapshot"));
  assertEquals(0,stats.length);
  try {
    stats=hdfs.listStatus(snapshotsPath);
    fail("expect SnapshotException");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("Directory is not a snapshottable directory: " + dir.toString(),e);
  }
  hdfs.allowSnapshot(dir);
  stats=hdfs.listStatus(snapshotsPath);
  assertEquals(0,stats.length);
  final int snapshotNum=5;
  for (int sNum=0; sNum < snapshotNum; sNum++) {
    hdfs.createSnapshot(dir,"s_" + sNum);
    stats=hdfs.listStatus(snapshotsPath);
    assertEquals(sNum + 1,stats.length);
    for (int i=0; i <= sNum; i++) {
      assertEquals("s_" + i,stats[i].getPath().getName());
    }
  }
  for (int sNum=snapshotNum - 1; sNum > 0; sNum--) {
    hdfs.deleteSnapshot(dir,"s_" + sNum);
    stats=hdfs.listStatus(snapshotsPath);
    assertEquals(sNum,stats.length);
    for (int i=0; i < sNum; i++) {
      assertEquals("s_" + i,stats[i].getPath().getName());
    }
  }
  hdfs.deleteSnapshot(dir,"s_0");
  stats=hdfs.listStatus(snapshotsPath);
  assertEquals(0,stats.length);
}
