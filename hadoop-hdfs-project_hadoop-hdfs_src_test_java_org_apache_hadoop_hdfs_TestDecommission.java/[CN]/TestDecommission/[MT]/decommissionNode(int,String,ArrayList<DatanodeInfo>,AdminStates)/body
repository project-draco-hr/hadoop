{
  DFSClient client=getDfsClient(cluster.getNameNode(nnIndex),conf);
  DatanodeInfo[] info=client.datanodeReport(DatanodeReportType.LIVE);
  int index=0;
  if (datanodeUuid == null) {
    boolean found=false;
    while (!found) {
      index=myrand.nextInt(info.length);
      if (!info[index].isDecommissioned()) {
        found=true;
      }
    }
  }
 else {
    for (; index < info.length; index++) {
      if (info[index].getDatanodeUuid().equals(datanodeUuid)) {
        break;
      }
    }
    if (index == info.length) {
      throw new IOException("invalid datanodeUuid " + datanodeUuid);
    }
  }
  String nodename=info[index].getXferAddr();
  LOG.info("Decommissioning node: " + nodename);
  ArrayList<String> nodes=new ArrayList<String>();
  if (decommissionedNodes != null) {
    for (    DatanodeInfo dn : decommissionedNodes) {
      nodes.add(dn.getName());
    }
  }
  nodes.add(nodename);
  writeConfigFile(excludeFile,nodes);
  refreshNodes(cluster.getNamesystem(nnIndex),conf);
  DatanodeInfo ret=NameNodeAdapter.getDatanode(cluster.getNamesystem(nnIndex),info[index]);
  waitNodeState(ret,waitForState);
  return ret;
}
