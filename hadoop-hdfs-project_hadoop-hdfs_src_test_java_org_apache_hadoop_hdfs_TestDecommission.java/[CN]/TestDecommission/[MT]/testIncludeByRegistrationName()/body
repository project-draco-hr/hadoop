{
  Configuration hdfsConf=new Configuration(conf);
  final String registrationName="127.0.0.100";
  final String nonExistentDn="127.0.0.10";
  hdfsConf.set(DFSConfigKeys.DFS_DATANODE_HOST_NAME_KEY,registrationName);
  cluster=new MiniDFSCluster.Builder(hdfsConf).numDataNodes(1).checkDataNodeHostConfig(true).setupHostsFile(true).build();
  cluster.waitActive();
  ArrayList<String> nodes=new ArrayList<String>();
  nodes.add(nonExistentDn);
  writeConfigFile(hostsFile,nodes);
  refreshNodes(cluster.getNamesystem(0),hdfsConf);
  DFSClient client=getDfsClient(cluster.getNameNode(0),hdfsConf);
  while (true) {
    DatanodeInfo info[]=client.datanodeReport(DatanodeReportType.DEAD);
    if (info.length == 1) {
      break;
    }
    LOG.info("Waiting for datanode to be marked dead");
    Thread.sleep(HEARTBEAT_INTERVAL * 1000);
  }
  int dnPort=cluster.getDataNodes().get(0).getXferPort();
  nodes=new ArrayList<String>();
  nodes.add(registrationName + ":" + dnPort);
  writeConfigFile(hostsFile,nodes);
  refreshNodes(cluster.getNamesystem(0),hdfsConf);
  cluster.restartDataNode(0);
  while (true) {
    DatanodeInfo info[]=client.datanodeReport(DatanodeReportType.LIVE);
    if (info.length == 1) {
      Assert.assertFalse(info[0].isDecommissioned());
      Assert.assertFalse(info[0].isDecommissionInProgress());
      assertEquals(registrationName,info[0].getHostName());
      break;
    }
    LOG.info("Waiting for datanode to come back");
    Thread.sleep(HEARTBEAT_INTERVAL * 1000);
  }
}
