{
  Configuration hdfsConf=new Configuration(conf);
  cluster=new MiniDFSCluster.Builder(hdfsConf).numDataNodes(1).setupHostsFile(true).build();
  cluster.waitActive();
  int dnPort=cluster.getDataNodes().get(0).getXferPort();
  Random random=new Random(System.currentTimeMillis());
  int port1=dnPort;
  while (port1 == dnPort) {
    port1=random.nextInt(6000) + 1000;
  }
  int port2=dnPort;
  while ((port2 == dnPort) || (port2 == port1)) {
    port2=random.nextInt(6000) + 1000;
  }
  ArrayList<String> nodes=new ArrayList<String>();
  nodes.add("127.0.0.1:" + port1);
  nodes.add("localhost:" + port1);
  nodes.add("127.0.0.1:" + port1);
  nodes.add("127.0.0.1:" + port2);
  nodes.add("127.0.30.1:" + port1);
  writeConfigFile(hostsFile,nodes);
  refreshNodes(cluster.getNamesystem(0),hdfsConf);
  DFSClient client=getDfsClient(cluster.getNameNode(0),hdfsConf);
  DatanodeInfo[] info=client.datanodeReport(DatanodeReportType.LIVE);
  for (int i=0; i < 5 && info.length != 0; i++) {
    LOG.info("Waiting for datanode to be marked dead");
    Thread.sleep(HEARTBEAT_INTERVAL * 1000);
    info=client.datanodeReport(DatanodeReportType.LIVE);
  }
  assertEquals("Number of live nodes should be 0",0,info.length);
  DatanodeInfo deadDns[]=client.datanodeReport(DatanodeReportType.DEAD);
  HashMap<String,DatanodeInfo> deadByXferAddr=new HashMap<String,DatanodeInfo>();
  for (  DatanodeInfo dn : deadDns) {
    LOG.info("DEAD DatanodeInfo: xferAddr = " + dn.getXferAddr() + ", ipAddr = "+ dn.getIpAddr()+ ", hostname = "+ dn.getHostName());
    deadByXferAddr.put(dn.getXferAddr(),dn);
  }
  String realDnIpPort=cluster.getDataNodes().get(0).getXferAddress().getAddress().getHostAddress() + ":" + cluster.getDataNodes().get(0).getXferPort();
  Assert.assertNotNull("failed to find real datanode IP " + realDnIpPort,deadByXferAddr.remove(realDnIpPort));
  Assert.assertNotNull(deadByXferAddr.remove("127.0.30.1:" + port1));
  Iterator<Map.Entry<String,DatanodeInfo>> iter=deadByXferAddr.entrySet().iterator();
  boolean foundPort1=false, foundPort2=false;
  while (iter.hasNext()) {
    Map.Entry<String,DatanodeInfo> entry=iter.next();
    DatanodeInfo dn=entry.getValue();
    if (dn.getXferPort() == port1) {
      foundPort1=true;
      iter.remove();
    }
 else     if (dn.getXferPort() == port2) {
      foundPort2=true;
      iter.remove();
    }
  }
  Assert.assertTrue("did not find a dead entry with port " + port1,foundPort1);
  Assert.assertTrue("did not find a dead entry with port " + port2,foundPort2);
  Assert.assertTrue(deadByXferAddr.isEmpty());
}
