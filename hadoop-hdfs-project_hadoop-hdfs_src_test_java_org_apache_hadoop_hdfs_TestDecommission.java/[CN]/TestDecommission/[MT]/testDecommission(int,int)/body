{
  LOG.info("Starting test testDecommission");
  startCluster(numNamenodes,numDatanodes,conf);
  ArrayList<ArrayList<DatanodeInfo>> namenodeDecomList=new ArrayList<ArrayList<DatanodeInfo>>(numNamenodes);
  for (int i=0; i < numNamenodes; i++) {
    namenodeDecomList.add(i,new ArrayList<DatanodeInfo>(numDatanodes));
  }
  Path file1=new Path("testDecommission.dat");
  for (int iteration=0; iteration < numDatanodes - 1; iteration++) {
    int replicas=numDatanodes - iteration - 1;
    for (int i=0; i < numNamenodes; i++) {
      ArrayList<DatanodeInfo> decommissionedNodes=namenodeDecomList.get(i);
      FileSystem fileSys=cluster.getFileSystem(i);
      FSNamesystem ns=cluster.getNamesystem(i);
      writeFile(fileSys,file1,replicas);
      int deadDecomissioned=ns.getNumDecomDeadDataNodes();
      int liveDecomissioned=ns.getNumDecomLiveDataNodes();
      DatanodeInfo decomNode=decommissionNode(i,null,decommissionedNodes,AdminStates.DECOMMISSIONED);
      decommissionedNodes.add(decomNode);
      assertEquals(deadDecomissioned,ns.getNumDecomDeadDataNodes());
      assertEquals(liveDecomissioned + 1,ns.getNumDecomLiveDataNodes());
      DFSClient client=getDfsClient(cluster.getNameNode(i),conf);
      assertEquals("All datanodes must be alive",numDatanodes,client.datanodeReport(DatanodeReportType.LIVE).length);
      int tries=0;
      while (tries++ < 20) {
        try {
          Thread.sleep(1000);
          if (checkFile(fileSys,file1,replicas,decomNode.getXferAddr(),numDatanodes) == null) {
            break;
          }
        }
 catch (        InterruptedException ie) {
        }
      }
      assertTrue("Checked if block was replicated after decommission, tried " + tries + " times.",tries < 20);
      cleanupFile(fileSys,file1);
    }
  }
  cluster.shutdown();
  startCluster(numNamenodes,numDatanodes,conf);
  cluster.shutdown();
}
