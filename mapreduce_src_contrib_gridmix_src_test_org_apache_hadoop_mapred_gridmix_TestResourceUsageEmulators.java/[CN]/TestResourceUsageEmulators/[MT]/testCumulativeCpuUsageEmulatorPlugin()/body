{
  Configuration conf=new Configuration();
  long targetCpuUsage=1000L;
  int unitCpuUsage=50;
  FakeProgressive fakeProgress=new FakeProgressive();
  FakeCpuUsageEmulatorCore fakeCore=new FakeCpuUsageEmulatorCore();
  fakeCore.setUnitUsage(unitCpuUsage);
  CumulativeCpuUsageEmulatorPlugin cpuPlugin=new CumulativeCpuUsageEmulatorPlugin(fakeCore);
  ResourceUsageMetrics invalidUsage=createMetrics(0);
  cpuPlugin.initialize(conf,invalidUsage,null,null);
  int numCallsPre=fakeCore.getNumCalls();
  long cpuUsagePre=fakeCore.getCpuUsage();
  cpuPlugin.emulate();
  int numCallsPost=fakeCore.getNumCalls();
  long cpuUsagePost=fakeCore.getCpuUsage();
  assertEquals("Disabled cumulative CPU usage emulation plugin works!",numCallsPre,numCallsPost);
  assertEquals("Disabled cumulative CPU usage emulation plugin works!",cpuUsagePre,cpuUsagePost);
  ResourceUsageMetrics metrics=createMetrics(targetCpuUsage);
  ResourceCalculatorPlugin monitor=new FakeResourceUsageMonitor(fakeCore);
  testEmulationAccuracy(conf,fakeCore,monitor,metrics,cpuPlugin,targetCpuUsage,targetCpuUsage / unitCpuUsage);
  conf.setFloat(CumulativeCpuUsageEmulatorPlugin.CPU_EMULATION_FREQUENCY,0.2F);
  testEmulationAccuracy(conf,fakeCore,monitor,metrics,cpuPlugin,targetCpuUsage,targetCpuUsage / unitCpuUsage);
  fakeProgress=new FakeProgressive();
  fakeCore.reset();
  fakeCore.setUnitUsage(1);
  conf.setFloat(CumulativeCpuUsageEmulatorPlugin.CPU_EMULATION_FREQUENCY,0.25F);
  cpuPlugin.initialize(conf,metrics,monitor,fakeProgress);
  long initCpuUsage=monitor.getCumulativeCpuTime();
  long initNumCalls=fakeCore.getNumCalls();
  testEmulationBoundary(0F,fakeCore,fakeProgress,cpuPlugin,initCpuUsage,initNumCalls,"[no-op, 0 progress]");
  testEmulationBoundary(0.24F,fakeCore,fakeProgress,cpuPlugin,initCpuUsage,initNumCalls,"[no-op, 24% progress]");
  testEmulationBoundary(0.25F,fakeCore,fakeProgress,cpuPlugin,initCpuUsage,initNumCalls,"[op, 25% progress]");
  testEmulationBoundary(0.80F,fakeCore,fakeProgress,cpuPlugin,410,410,"[op, 80% progress]");
  testEmulationBoundary(1F,fakeCore,fakeProgress,cpuPlugin,targetCpuUsage,targetCpuUsage,"[op, 100% progress]");
  fakeProgress=new FakeProgressive();
  fakeCore.reset();
  fakeCore.setUnitUsage(unitCpuUsage);
  conf.setFloat(CumulativeCpuUsageEmulatorPlugin.CPU_EMULATION_FREQUENCY,0.40F);
  cpuPlugin.initialize(conf,metrics,monitor,fakeProgress);
  initCpuUsage=monitor.getCumulativeCpuTime();
  initNumCalls=fakeCore.getNumCalls();
  testEmulationBoundary(0F,fakeCore,fakeProgress,cpuPlugin,initCpuUsage,initNumCalls,"[no-op, 0 progress]");
  testEmulationBoundary(0.39F,fakeCore,fakeProgress,cpuPlugin,initCpuUsage,initNumCalls,"[no-op, 39% progress]");
  testEmulationBoundary(0.40F,fakeCore,fakeProgress,cpuPlugin,initCpuUsage,initNumCalls,"[op, 40% progress]");
  testEmulationBoundary(0.90F,fakeCore,fakeProgress,cpuPlugin,700,700 / unitCpuUsage,"[op, 90% progress]");
  testEmulationBoundary(1F,fakeCore,fakeProgress,cpuPlugin,targetCpuUsage,targetCpuUsage / unitCpuUsage,"[op, 100% progress]");
}
