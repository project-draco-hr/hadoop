{
  long parentNamespace=counts.nsCount;
  long parentDiskspace=counts.dsCount;
  counts.nsCount=1L;
  counts.dsCount=0L;
  nodesInPath.add(dir);
  for (  INode child : dir.getChildrenList()) {
    if (child.isDirectory()) {
      updateCountForINodeWithQuota((INodeDirectory)child,counts,nodesInPath);
    }
 else     if (child.isSymlink()) {
      counts.nsCount+=1;
    }
 else {
      counts.nsCount+=1;
      counts.dsCount+=((INodeFile)child).diskspaceConsumed();
    }
  }
  if (dir.isQuotaSet()) {
    ((INodeDirectoryWithQuota)dir).setSpaceConsumed(counts.nsCount,counts.dsCount);
    if ((dir.getNsQuota() >= 0 && counts.nsCount > dir.getNsQuota()) || (dir.getDsQuota() >= 0 && counts.dsCount > dir.getDsQuota())) {
      StringBuilder path=new StringBuilder(512);
      for (      INode n : nodesInPath) {
        path.append('/');
        path.append(n.getLocalName());
      }
      NameNode.LOG.warn("Quota violation in image for " + path + " (Namespace quota : "+ dir.getNsQuota()+ " consumed : "+ counts.nsCount+ ")"+ " (Diskspace quota : "+ dir.getDsQuota()+ " consumed : "+ counts.dsCount+ ").");
    }
  }
  nodesInPath.remove(nodesInPath.size() - 1);
  counts.nsCount+=parentNamespace;
  counts.dsCount+=parentDiskspace;
}
