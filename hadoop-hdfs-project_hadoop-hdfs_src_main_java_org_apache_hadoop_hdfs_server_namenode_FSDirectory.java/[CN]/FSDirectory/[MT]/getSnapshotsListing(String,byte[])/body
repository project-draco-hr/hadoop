{
  Preconditions.checkState(hasReadLock());
  Preconditions.checkArgument(src.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR),"%s does not end with %s",src,HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR);
  final String dirPath=normalizePath(src.substring(0,src.length() - HdfsConstants.DOT_SNAPSHOT_DIR.length()));
  final INode node=this.getINode(dirPath);
  final INodeDirectory dirNode=INodeDirectory.valueOf(node,dirPath);
  final DirectorySnapshottableFeature sf=dirNode.getDirectorySnapshottableFeature();
  if (sf == null) {
    throw new SnapshotException("Directory is not a snapshottable directory: " + dirPath);
  }
  final ReadOnlyList<Snapshot> snapshots=sf.getSnapshotList();
  int skipSize=ReadOnlyList.Util.binarySearch(snapshots,startAfter);
  skipSize=skipSize < 0 ? -skipSize - 1 : skipSize + 1;
  int numOfListing=Math.min(snapshots.size() - skipSize,this.lsLimit);
  final HdfsFileStatus listing[]=new HdfsFileStatus[numOfListing];
  for (int i=0; i < numOfListing; i++) {
    Root sRoot=snapshots.get(i + skipSize).getRoot();
    listing[i]=createFileStatus(sRoot.getLocalNameBytes(),sRoot,BlockStoragePolicy.ID_UNSPECIFIED,Snapshot.CURRENT_STATE_ID);
  }
  return new DirectoryListing(listing,snapshots.size() - skipSize - numOfListing);
}
