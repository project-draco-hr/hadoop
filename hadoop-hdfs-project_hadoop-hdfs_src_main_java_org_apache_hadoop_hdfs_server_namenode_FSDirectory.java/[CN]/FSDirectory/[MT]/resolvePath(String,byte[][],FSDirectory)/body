{
  if (pathComponents == null || pathComponents.length <= 3) {
    return src;
  }
  if (!Arrays.equals(DOT_RESERVED,pathComponents[1]) || !Arrays.equals(DOT_INODES,pathComponents[2])) {
    return src;
  }
  final String inodeId=DFSUtil.bytes2String(pathComponents[3]);
  long id=0;
  try {
    id=Long.valueOf(inodeId);
  }
 catch (  NumberFormatException e) {
    throw new FileNotFoundException("Invalid inode path: " + src);
  }
  if (id == INodeId.ROOT_INODE_ID && pathComponents.length == 4) {
    return Path.SEPARATOR;
  }
  INode inode=fsd.getInode(id);
  if (inode == null) {
    throw new FileNotFoundException("File for given inode path does not exist: " + src);
  }
  StringBuilder path=id == INodeId.ROOT_INODE_ID ? new StringBuilder() : new StringBuilder(inode.getFullPathName());
  for (int i=4; i < pathComponents.length; i++) {
    path.append(Path.SEPARATOR).append(DFSUtil.bytes2String(pathComponents[i]));
  }
  if (NameNode.LOG.isDebugEnabled()) {
    NameNode.LOG.debug("Resolved path is " + path);
  }
  return path.toString();
}
