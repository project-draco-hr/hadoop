{
  String srcs=normalizePath(src);
  readLock();
  try {
    final INodesInPath inodesInPath=rootDir.getLastINodeInPath(srcs,true);
    final Snapshot snapshot=inodesInPath.getPathSnapshot();
    final INode targetNode=inodesInPath.getINode(0);
    if (targetNode == null)     return null;
    if (!targetNode.isDirectory()) {
      return new DirectoryListing(new HdfsFileStatus[]{createFileStatus(HdfsFileStatus.EMPTY_NAME,targetNode,needLocation,snapshot)},0);
    }
    INodeDirectory dirInode=(INodeDirectory)targetNode;
    final ReadOnlyList<INode> contents=dirInode.getChildrenList(inodesInPath.getPathSnapshot());
    int startChild=INodeDirectory.nextChild(contents,startAfter);
    int totalNumChildren=contents.size();
    int numOfListing=Math.min(totalNumChildren - startChild,this.lsLimit);
    HdfsFileStatus listing[]=new HdfsFileStatus[numOfListing];
    for (int i=0; i < numOfListing; i++) {
      INode cur=contents.get(startChild + i);
      listing[i]=createFileStatus(cur.getLocalNameBytes(),cur,needLocation,snapshot);
    }
    return new DirectoryListing(listing,totalNumChildren - startChild - numOfListing);
  }
  finally {
    readUnlock();
  }
}
