{
  List<byte[]> components=new ArrayList<byte[]>();
  boolean inSnapshot=false;
  int snapshotId=Snapshot.CURRENT_STATE_ID;
  do {
    if (inode instanceof INodeReference.WithCount) {
      inode=((WithCount)inode).getParentRef(snapshotId);
    }
 else {
      if (inode instanceof INodeDirectory && inode.asDirectory().isSnapshottable() && inSnapshot&& snapshotId != Snapshot.CURRENT_STATE_ID) {
        INodeDirectorySnapshottable sdir=(INodeDirectorySnapshottable)inode.asDirectory();
        Snapshot snapshot=sdir.getSnapshotById(snapshotId);
        if (snapshot != null) {
          components.add(0,snapshot.getRoot().getLocalNameBytes());
          components.add(0,HdfsConstants.DOT_SNAPSHOT_DIR_BYTES);
          inSnapshot=false;
        }
      }
      INode parent=inode.getParentReference() != null ? inode.getParentReference() : inode.getParent();
      if (parent != null && parent instanceof INodeDirectory) {
        int sid=parent.asDirectory().searchChild(inode);
        Preconditions.checkState(sid != Snapshot.NO_SNAPSHOT_ID);
        if (sid != Snapshot.CURRENT_STATE_ID && snapshotId == Snapshot.CURRENT_STATE_ID) {
          snapshotId=sid;
          inSnapshot=true;
        }
        components.add(0,inode.getLocalNameBytes());
      }
 else       if (parent == null) {
        components.add(0,inode.getLocalNameBytes());
      }
      inode=parent;
    }
  }
 while (inode != null);
  return components.toArray(new byte[components.size()][]);
}
