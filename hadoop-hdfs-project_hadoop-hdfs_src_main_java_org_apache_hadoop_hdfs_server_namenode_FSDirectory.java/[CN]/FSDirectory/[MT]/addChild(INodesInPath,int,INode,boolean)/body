{
  final INode[] inodes=iip.getINodes();
  if (pos == 1 && inodes[0] == rootDir && isReservedName(child)) {
    throw new HadoopIllegalArgumentException("File name \"" + child.getLocalName() + "\" is reserved and cannot "+ "be created. If this is during upgrade change the name of the "+ "existing file or directory to another name before upgrading "+ "to the new release.");
  }
  if (checkQuota) {
    verifyMaxComponentLength(child.getLocalNameBytes(),inodes,pos);
    verifyMaxDirItems(inodes,pos);
  }
  verifyINodeName(child.getLocalNameBytes());
  final Quota.Counts counts=child.computeQuotaUsage();
  updateCount(iip,pos,counts.get(Quota.NAMESPACE),counts.get(Quota.DISKSPACE),checkQuota);
  final INodeDirectory parent=inodes[pos - 1].asDirectory();
  final boolean added=parent.addChild(child,true,iip.getLatestSnapshot());
  if (!added) {
    updateCountNoQuotaCheck(iip,pos,-counts.get(Quota.NAMESPACE),-counts.get(Quota.DISKSPACE));
  }
 else {
    iip.setINode(pos - 1,child.getParent());
    addToInodeMapUnprotected(child);
  }
  return added;
}
