{
  this.srcIIP=srcIIP;
  this.dstIIP=dstIIP;
  this.src=src;
  this.dst=dst;
  srcChild=srcIIP.getLastINode();
  srcChildName=srcChild.getLocalNameBytes();
  isSrcInSnapshot=srcChild.isInLatestSnapshot(srcIIP.getLatestSnapshotId());
  srcChildIsReference=srcChild.isReference();
  srcParent=srcIIP.getINode(-2).asDirectory();
  if (isSrcInSnapshot) {
    srcChild=srcChild.recordModification(srcIIP.getLatestSnapshotId());
  }
  srcRefDstSnapshot=srcChildIsReference ? srcChild.asReference().getDstSnapshotId() : Snapshot.CURRENT_STATE_ID;
  oldSrcCounts=Quota.Counts.newInstance();
  if (isSrcInSnapshot) {
    final INodeReference.WithName withName=srcIIP.getINode(-2).asDirectory().replaceChild4ReferenceWithName(srcChild,srcIIP.getLatestSnapshotId());
    withCount=(INodeReference.WithCount)withName.getReferredINode();
    srcChild=withName;
    srcIIP.setLastINode(srcChild);
    withCount.getReferredINode().computeQuotaUsage(oldSrcCounts,true);
  }
 else   if (srcChildIsReference) {
    withCount=(WithCount)srcChild.asReference().getReferredINode();
  }
 else {
    withCount=null;
  }
}
