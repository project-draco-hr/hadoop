{
  this.dirLock=new ReentrantReadWriteLock(true);
  rootDir=createRoot(ns);
  inodeMap=INodeMap.newInstance(rootDir);
  int configuredLimit=conf.getInt(DFSConfigKeys.DFS_LIST_LIMIT,DFSConfigKeys.DFS_LIST_LIMIT_DEFAULT);
  this.lsLimit=configuredLimit > 0 ? configuredLimit : DFSConfigKeys.DFS_LIST_LIMIT_DEFAULT;
  this.contentCountLimit=conf.getInt(DFSConfigKeys.DFS_CONTENT_SUMMARY_LIMIT_KEY,DFSConfigKeys.DFS_CONTENT_SUMMARY_LIMIT_DEFAULT);
  this.maxComponentLength=conf.getInt(DFSConfigKeys.DFS_NAMENODE_MAX_COMPONENT_LENGTH_KEY,DFSConfigKeys.DFS_NAMENODE_MAX_COMPONENT_LENGTH_DEFAULT);
  this.maxDirItems=conf.getInt(DFSConfigKeys.DFS_NAMENODE_MAX_DIRECTORY_ITEMS_KEY,DFSConfigKeys.DFS_NAMENODE_MAX_DIRECTORY_ITEMS_DEFAULT);
  this.inodeXAttrsLimit=conf.getInt(DFSConfigKeys.DFS_NAMENODE_MAX_XATTRS_PER_INODE_KEY,DFSConfigKeys.DFS_NAMENODE_MAX_XATTRS_PER_INODE_DEFAULT);
  Preconditions.checkArgument(this.inodeXAttrsLimit >= 0,"Cannot set a negative limit on the number of xattrs per inode (%s).",DFSConfigKeys.DFS_NAMENODE_MAX_XATTRS_PER_INODE_KEY);
  final int MAX_DIR_ITEMS=64 * 100 * 1000;
  Preconditions.checkArgument(maxDirItems > 0 && maxDirItems <= MAX_DIR_ITEMS,"Cannot set " + DFSConfigKeys.DFS_NAMENODE_MAX_DIRECTORY_ITEMS_KEY + " to a value less than 0 or greater than "+ MAX_DIR_ITEMS);
  int threshold=conf.getInt(DFSConfigKeys.DFS_NAMENODE_NAME_CACHE_THRESHOLD_KEY,DFSConfigKeys.DFS_NAMENODE_NAME_CACHE_THRESHOLD_DEFAULT);
  NameNode.LOG.info("Caching file names occuring more than " + threshold + " times");
  nameCache=new NameCache<ByteArray>(threshold);
  namesystem=ns;
  ezManager=new EncryptionZoneManager(this,conf,ns.getProvider());
}
