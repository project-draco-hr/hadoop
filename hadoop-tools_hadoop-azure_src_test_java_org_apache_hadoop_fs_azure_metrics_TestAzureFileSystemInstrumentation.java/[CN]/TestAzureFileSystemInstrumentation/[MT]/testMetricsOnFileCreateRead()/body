{
  long base=getBaseWebResponses();
  assertEquals(0,AzureMetricsTestUtil.getCurrentBytesWritten(getInstrumentation()));
  Path filePath=new Path("/metricsTest_webResponses");
  final int FILE_SIZE=1000;
  getBandwidthGaugeUpdater().suppressAutoUpdate();
  Date start=new Date();
  OutputStream outputStream=fs.create(filePath);
  outputStream.write(nonZeroByteArray(FILE_SIZE));
  outputStream.close();
  long uploadDurationMs=new Date().getTime() - start.getTime();
  logOpResponseCount("Creating a 1K file",base);
  base=assertWebResponsesInRange(base,2,15);
  getBandwidthGaugeUpdater().triggerUpdate(true);
  long bytesWritten=AzureMetricsTestUtil.getCurrentBytesWritten(getInstrumentation());
  assertTrue("The bytes written in the last second " + bytesWritten + " is pretty far from the expected range of around "+ FILE_SIZE+ " bytes plus a little overhead.",bytesWritten > (FILE_SIZE / 2) && bytesWritten < (FILE_SIZE * 2));
  long totalBytesWritten=AzureMetricsTestUtil.getCurrentTotalBytesWritten(getInstrumentation());
  assertTrue("The total bytes written  " + totalBytesWritten + " is pretty far from the expected range of around "+ FILE_SIZE+ " bytes plus a little overhead.",totalBytesWritten >= FILE_SIZE && totalBytesWritten < (FILE_SIZE * 2));
  long uploadRate=AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(),WASB_UPLOAD_RATE);
  System.out.println("Upload rate: " + uploadRate + " bytes/second.");
  long expectedRate=(FILE_SIZE * 1000L) / uploadDurationMs;
  assertTrue("The upload rate " + uploadRate + " is below the expected range of around "+ expectedRate+ " bytes/second that the unit test observed. This should never be"+ " the case since the test underestimates the rate by looking at "+ " end-to-end time instead of just block upload time.",uploadRate >= expectedRate);
  long uploadLatency=AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(),WASB_UPLOAD_LATENCY);
  System.out.println("Upload latency: " + uploadLatency);
  long expectedLatency=uploadDurationMs;
  assertTrue("The upload latency " + uploadLatency + " should be greater than zero now that I've just uploaded a file.",uploadLatency > 0);
  assertTrue("The upload latency " + uploadLatency + " is more than the expected range of around "+ expectedLatency+ " milliseconds that the unit test observed. This should never be"+ " the case since the test overestimates the latency by looking at "+ " end-to-end time instead of just block upload time.",uploadLatency <= expectedLatency);
  start=new Date();
  InputStream inputStream=fs.open(filePath);
  int count=0;
  while (inputStream.read() >= 0) {
    count++;
  }
  inputStream.close();
  long downloadDurationMs=new Date().getTime() - start.getTime();
  assertEquals(FILE_SIZE,count);
  logOpResponseCount("Reading a 1K file",base);
  base=assertWebResponsesInRange(base,1,10);
  getBandwidthGaugeUpdater().triggerUpdate(false);
  long totalBytesRead=AzureMetricsTestUtil.getCurrentTotalBytesRead(getInstrumentation());
  assertEquals(FILE_SIZE,totalBytesRead);
  long bytesRead=AzureMetricsTestUtil.getCurrentBytesRead(getInstrumentation());
  assertTrue("The bytes read in the last second " + bytesRead + " is pretty far from the expected range of around "+ FILE_SIZE+ " bytes plus a little overhead.",bytesRead > (FILE_SIZE / 2) && bytesRead < (FILE_SIZE * 2));
  long downloadRate=AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(),WASB_DOWNLOAD_RATE);
  System.out.println("Download rate: " + downloadRate + " bytes/second.");
  expectedRate=(FILE_SIZE * 1000L) / downloadDurationMs;
  assertTrue("The download rate " + downloadRate + " is below the expected range of around "+ expectedRate+ " bytes/second that the unit test observed. This should never be"+ " the case since the test underestimates the rate by looking at "+ " end-to-end time instead of just block download time.",downloadRate >= expectedRate);
  long downloadLatency=AzureMetricsTestUtil.getLongGaugeValue(getInstrumentation(),WASB_DOWNLOAD_LATENCY);
  System.out.println("Download latency: " + downloadLatency);
  expectedLatency=downloadDurationMs;
  assertTrue("The download latency " + downloadLatency + " should be greater than zero now that I've just downloaded a file.",downloadLatency > 0);
  assertTrue("The download latency " + downloadLatency + " is more than the expected range of around "+ expectedLatency+ " milliseconds that the unit test observed. This should never be"+ " the case since the test overestimates the latency by looking at "+ " end-to-end time instead of just block download time.",downloadLatency <= expectedLatency);
  assertNoErrors();
}
