{
  Queue queue=Mockito.mock(Queue.class);
  Priority prio=Mockito.mock(Priority.class);
  Mockito.when(prio.getPriority()).thenReturn(1);
  double nodeLocalityThreshold=.5;
  double rackLocalityThreshold=.6;
  ApplicationAttemptId applicationAttemptId=createAppAttemptId(1,1);
  FSSchedulerApp schedulerApp=new FSSchedulerApp(applicationAttemptId,"user1",queue,null,null,null);
  assertEquals(NodeType.NODE_LOCAL,schedulerApp.getAllowedLocalityLevel(prio,10,nodeLocalityThreshold,rackLocalityThreshold));
  for (int i=0; i < 5; i++) {
    schedulerApp.addSchedulingOpportunity(prio);
    assertEquals(NodeType.NODE_LOCAL,schedulerApp.getAllowedLocalityLevel(prio,10,nodeLocalityThreshold,rackLocalityThreshold));
  }
  schedulerApp.addSchedulingOpportunity(prio);
  assertEquals(NodeType.RACK_LOCAL,schedulerApp.getAllowedLocalityLevel(prio,10,nodeLocalityThreshold,rackLocalityThreshold));
  schedulerApp.resetAllowedLocalityLevel(prio,NodeType.NODE_LOCAL);
  schedulerApp.resetSchedulingOpportunities(prio);
  assertEquals(NodeType.NODE_LOCAL,schedulerApp.getAllowedLocalityLevel(prio,10,nodeLocalityThreshold,rackLocalityThreshold));
  for (int i=0; i < 5; i++) {
    schedulerApp.addSchedulingOpportunity(prio);
    assertEquals(NodeType.NODE_LOCAL,schedulerApp.getAllowedLocalityLevel(prio,10,nodeLocalityThreshold,rackLocalityThreshold));
  }
  schedulerApp.addSchedulingOpportunity(prio);
  assertEquals(NodeType.RACK_LOCAL,schedulerApp.getAllowedLocalityLevel(prio,10,nodeLocalityThreshold,rackLocalityThreshold));
  for (int i=0; i < 6; i++) {
    schedulerApp.addSchedulingOpportunity(prio);
    assertEquals(NodeType.RACK_LOCAL,schedulerApp.getAllowedLocalityLevel(prio,10,nodeLocalityThreshold,rackLocalityThreshold));
  }
  schedulerApp.addSchedulingOpportunity(prio);
  assertEquals(NodeType.OFF_SWITCH,schedulerApp.getAllowedLocalityLevel(prio,10,nodeLocalityThreshold,rackLocalityThreshold));
}
