{
  if (UserGroupInformation.isSecurityEnabled()) {
    Credentials systemCredentials=context.getSystemCredentialsForApps().get(appId);
    if (systemCredentials != null) {
      LOG.info("Adding new framework tokens from RM for " + appId);
      for (      Token<?> token : systemCredentials.getAllTokens()) {
        LOG.info("Adding new application-token for log-aggregation: " + token);
      }
      credentials=systemCredentials;
    }
  }
  final UserGroupInformation userUgi=UserGroupInformation.createRemoteUser(user);
  if (credentials != null) {
    userUgi.addCredentials(credentials);
  }
  final AppLogAggregator appLogAggregator=new AppLogAggregatorImpl(this.dispatcher,this.deletionService,getConfig(),appId,userUgi,this.nodeId,dirsHandler,getRemoteNodeLogFileForApp(appId,user),logRetentionPolicy,appAcls,logAggregationContext,this.context,getLocalFileContext(getConfig()));
  if (this.appLogAggregators.putIfAbsent(appId,appLogAggregator) != null) {
    throw new YarnRuntimeException("Duplicate initApp for " + appId);
  }
  try {
    createAppDir(user,appId,userUgi);
  }
 catch (  Exception e) {
    appLogAggregators.remove(appId);
    closeFileSystems(userUgi);
    if (!(e instanceof YarnRuntimeException)) {
      e=new YarnRuntimeException(e);
    }
    throw (YarnRuntimeException)e;
  }
  Runnable aggregatorWrapper=new Runnable(){
    public void run(){
      try {
        appLogAggregator.run();
      }
  finally {
        appLogAggregators.remove(appId);
        closeFileSystems(userUgi);
      }
    }
  }
;
  this.threadPool.execute(aggregatorWrapper);
}
