{
  try {
    userUgi.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        try {
          FileSystem remoteFS=getFileSystem(getConfig());
          Path appDir=LogAggregationUtils.getRemoteAppLogDir(LogAggregationService.this.remoteRootLogDir,appId,user,LogAggregationService.this.remoteRootLogDirSuffix);
          appDir=appDir.makeQualified(remoteFS.getUri(),remoteFS.getWorkingDirectory());
          if (!checkExists(remoteFS,appDir,APP_DIR_PERMISSIONS)) {
            Path suffixDir=LogAggregationUtils.getRemoteLogSuffixedDir(LogAggregationService.this.remoteRootLogDir,user,LogAggregationService.this.remoteRootLogDirSuffix);
            suffixDir=suffixDir.makeQualified(remoteFS.getUri(),remoteFS.getWorkingDirectory());
            if (!checkExists(remoteFS,suffixDir,APP_DIR_PERMISSIONS)) {
              Path userDir=LogAggregationUtils.getRemoteLogUserDir(LogAggregationService.this.remoteRootLogDir,user);
              userDir=userDir.makeQualified(remoteFS.getUri(),remoteFS.getWorkingDirectory());
              if (!checkExists(remoteFS,userDir,APP_DIR_PERMISSIONS)) {
                createDir(remoteFS,userDir,APP_DIR_PERMISSIONS);
              }
              createDir(remoteFS,suffixDir,APP_DIR_PERMISSIONS);
            }
            createDir(remoteFS,appDir,APP_DIR_PERMISSIONS);
          }
        }
 catch (        IOException e) {
          LOG.error("Failed to setup application log directory for " + appId,e);
          throw e;
        }
        return null;
      }
    }
);
  }
 catch (  Exception e) {
    throw new YarnRuntimeException(e);
  }
}
