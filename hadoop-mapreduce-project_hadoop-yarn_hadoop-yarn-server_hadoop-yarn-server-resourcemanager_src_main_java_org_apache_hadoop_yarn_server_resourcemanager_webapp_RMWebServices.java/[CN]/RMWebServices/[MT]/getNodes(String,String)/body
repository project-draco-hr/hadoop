{
  ResourceScheduler sched=this.rm.getResourceScheduler();
  if (sched == null) {
    throw new NotFoundException("Null ResourceScheduler instance");
  }
  Collection<RMNode> rmNodes=this.rm.getRMContext().getRMNodes().values();
  boolean isInactive=false;
  if (filterState != null && !filterState.isEmpty()) {
    RMNodeState nodeState=RMNodeState.valueOf(filterState.toUpperCase());
switch (nodeState) {
case DECOMMISSIONED:
case LOST:
case REBOOTED:
      rmNodes=this.rm.getRMContext().getInactiveRMNodes().values();
    isInactive=true;
  break;
}
}
NodesInfo allNodes=new NodesInfo();
for (RMNode ni : rmNodes) {
NodeInfo nodeInfo=new NodeInfo(ni,sched);
if (filterState != null) {
if (!(nodeInfo.getState().equalsIgnoreCase(filterState))) {
  continue;
}
}
 else {
if (ni.getState() == RMNodeState.UNHEALTHY) {
  continue;
}
}
if ((healthState != null) && (!healthState.isEmpty())) {
LOG.info("heatlh state is : " + healthState);
if (!healthState.equalsIgnoreCase("true") && !healthState.equalsIgnoreCase("false")) {
  String msg="Error: You must specify either true or false to query on health";
  throw new BadRequestException(msg);
}
if (nodeInfo.isHealthy() != Boolean.parseBoolean(healthState)) {
  continue;
}
}
if (isInactive) {
nodeInfo.setNodeHTTPAddress(EMPTY);
}
allNodes.add(nodeInfo);
}
return allNodes;
}
