{
  SimpleCopyListing listing=new SimpleCopyListing(getConf(),CREDENTIALS){
    @Override protected boolean shouldCopy(    Path path,    DistCpOptions options){
      return !path.getName().equals(FileOutputCommitter.SUCCEEDED_FILE_NAME);
    }
  }
;
  FileSystem fs=FileSystem.get(getConf());
  List<Path> srcPaths=new ArrayList<Path>();
  srcPaths.add(new Path("/tmp/in4/1"));
  srcPaths.add(new Path("/tmp/in4/2"));
  Path target=new Path("/tmp/out4/1");
  TestDistCpUtils.createFile(fs,"/tmp/in4/1/_SUCCESS");
  TestDistCpUtils.createFile(fs,"/tmp/in4/1/file");
  TestDistCpUtils.createFile(fs,"/tmp/in4/2");
  fs.mkdirs(target);
  DistCpOptions options=new DistCpOptions(srcPaths,target);
  Path listingFile=new Path("/tmp/list4");
  listing.buildListing(listingFile,options);
  Assert.assertEquals(listing.getNumberOfPaths(),3);
  SequenceFile.Reader reader=new SequenceFile.Reader(getConf(),SequenceFile.Reader.file(listingFile));
  CopyListingFileStatus fileStatus=new CopyListingFileStatus();
  Text relativePath=new Text();
  Assert.assertTrue(reader.next(relativePath,fileStatus));
  Assert.assertEquals(relativePath.toString(),"/1");
  Assert.assertTrue(reader.next(relativePath,fileStatus));
  Assert.assertEquals(relativePath.toString(),"/1/file");
  Assert.assertTrue(reader.next(relativePath,fileStatus));
  Assert.assertEquals(relativePath.toString(),"/2");
  Assert.assertFalse(reader.next(relativePath,fileStatus));
}
