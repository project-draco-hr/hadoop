{
  FileSystem fs=null;
  try {
    fs=FileSystem.get(getConf());
    List<Path> srcPaths=new ArrayList<>();
    List<Path> srcFiles=new ArrayList<>();
    Path target=new Path("/tmp/out/1");
    final int pathCount=25;
    for (int i=0; i < pathCount; i++) {
      Path p=new Path("/tmp",String.valueOf(i));
      srcPaths.add(p);
      fs.mkdirs(p);
      Path fileName=new Path(p,i + ".txt");
      srcFiles.add(fileName);
      try (OutputStream out=fs.create(fileName)){
        out.write(i);
      }
     }
    Path listingFile=new Path("/tmp/file");
    DistCpOptions options=new DistCpOptions(srcPaths,target);
    options.setSyncFolder(true);
    getConf().setBoolean(DistCpConstants.CONF_LABEL_SIMPLE_LISTING_RANDOMIZE_FILES,false);
    SimpleCopyListing listing=new SimpleCopyListing(getConf(),CREDENTIALS);
    listing.buildListing(listingFile,options);
    Assert.assertEquals(listing.getNumberOfPaths(),pathCount);
    validateFinalListing(listingFile,srcFiles);
    fs.delete(listingFile,true);
    getConf().setBoolean(DistCpConstants.CONF_LABEL_SIMPLE_LISTING_RANDOMIZE_FILES,true);
    listing=new SimpleCopyListing(getConf(),CREDENTIALS);
    long seed=System.nanoTime();
    listing.setSeedForRandomListing(seed);
    listing.buildListing(listingFile,options);
    Assert.assertEquals(listing.getNumberOfPaths(),pathCount);
    Collections.shuffle(srcFiles,new Random(seed));
    validateFinalListing(listingFile,srcFiles);
  }
  finally {
    TestDistCpUtils.delete(fs,"/tmp");
  }
}
