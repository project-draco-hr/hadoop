{
  ByteBuffer cmpBuf=ByteBuffer.wrap(new byte[BYTES_PER_LONG]);
  long hashOffset=startOffset;
  long chunksSame=0;
  long chunksDifferent=0;
  for (long i=0; i < size; ++i) {
    cmpBuf.put(buf.get());
    if (!cmpBuf.hasRemaining()) {
      cmpBuf.rewind();
      long receivedData=cmpBuf.getLong();
      cmpBuf.rewind();
      long expected=hasher.generate(hashOffset);
      hashOffset+=BYTES_PER_LONG;
      if (receivedData == expected) {
        ++chunksSame;
      }
 else {
        ++chunksDifferent;
      }
    }
  }
  if (cmpBuf.hasRemaining() && cmpBuf.position() != 0) {
    int curSize=cmpBuf.position();
    while (cmpBuf.hasRemaining()) {
      cmpBuf.put((byte)0);
    }
    long expected=hasher.generate(hashOffset);
    ByteBuffer tempBuf=ByteBuffer.wrap(new byte[BYTES_PER_LONG]);
    tempBuf.putLong(expected);
    tempBuf.position(curSize);
    while (tempBuf.hasRemaining()) {
      tempBuf.put((byte)0);
    }
    cmpBuf.rewind();
    tempBuf.rewind();
    if (cmpBuf.equals(tempBuf)) {
      ++chunksSame;
    }
 else {
      ++chunksDifferent;
    }
  }
  return new VerifyInfo(chunksSame,chunksDifferent);
}
