{
  return new RecordReader<NullWritable,LongWritable>(){
    long written=0L;
    long write=0L;
    long RINTERVAL;
    long toWrite;
    final NullWritable key=NullWritable.get();
    final LongWritable val=new LongWritable();
    @Override public void initialize(    InputSplit split,    TaskAttemptContext ctxt) throws IOException, InterruptedException {
      toWrite=split.getLength();
      RINTERVAL=ctxt.getConfiguration().getInt(GRIDMIX_GEN_INTERVAL,10) << 20;
    }
    @Override public boolean nextKeyValue() throws IOException {
      written+=write;
      write=Math.min(toWrite - written,RINTERVAL);
      val.set(write);
      return written < toWrite;
    }
    @Override public float getProgress() throws IOException {
      return written / ((float)toWrite);
    }
    @Override public NullWritable getCurrentKey(){
      return key;
    }
    @Override public LongWritable getCurrentValue(){
      return val;
    }
    @Override public void close() throws IOException {
      taskContext.setStatus("Wrote " + toWrite);
    }
  }
;
}
