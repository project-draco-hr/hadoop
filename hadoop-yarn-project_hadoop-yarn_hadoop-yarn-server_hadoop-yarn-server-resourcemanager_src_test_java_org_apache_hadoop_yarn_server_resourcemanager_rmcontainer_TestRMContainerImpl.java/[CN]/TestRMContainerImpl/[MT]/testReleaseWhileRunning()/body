{
  DrainDispatcher drainDispatcher=new DrainDispatcher();
  EventHandler<RMAppAttemptEvent> appAttemptEventHandler=mock(EventHandler.class);
  EventHandler generic=mock(EventHandler.class);
  drainDispatcher.register(RMAppAttemptEventType.class,appAttemptEventHandler);
  drainDispatcher.register(RMNodeEventType.class,generic);
  drainDispatcher.init(new YarnConfiguration());
  drainDispatcher.start();
  NodeId nodeId=BuilderUtils.newNodeId("host",3425);
  ApplicationId appId=BuilderUtils.newApplicationId(1,1);
  ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(appId,1);
  ContainerId containerId=BuilderUtils.newContainerId(appAttemptId,1);
  ContainerAllocationExpirer expirer=mock(ContainerAllocationExpirer.class);
  Resource resource=BuilderUtils.newResource(512,1);
  Priority priority=BuilderUtils.newPriority(5);
  Container container=BuilderUtils.newContainer(containerId,nodeId,"host:3465",resource,priority,null);
  RMApplicationHistoryWriter writer=mock(RMApplicationHistoryWriter.class);
  RMContext rmContext=mock(RMContext.class);
  when(rmContext.getDispatcher()).thenReturn(drainDispatcher);
  when(rmContext.getContainerAllocationExpirer()).thenReturn(expirer);
  when(rmContext.getRMApplicationHistoryWriter()).thenReturn(writer);
  RMContainer rmContainer=new RMContainerImpl(container,appAttemptId,nodeId,"user",rmContext);
  assertEquals(RMContainerState.NEW,rmContainer.getState());
  assertEquals(resource,rmContainer.getAllocatedResource());
  assertEquals(nodeId,rmContainer.getAllocatedNode());
  assertEquals(priority,rmContainer.getAllocatedPriority());
  verify(writer).containerStarted(any(RMContainer.class));
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.START));
  drainDispatcher.await();
  assertEquals(RMContainerState.ALLOCATED,rmContainer.getState());
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.ACQUIRED));
  drainDispatcher.await();
  assertEquals(RMContainerState.ACQUIRED,rmContainer.getState());
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.LAUNCHED));
  drainDispatcher.await();
  assertEquals(RMContainerState.RUNNING,rmContainer.getState());
  assertEquals("http://host:3465/logs/host:3425/container_1_0001_01_000001/container_1_0001_01_000001/user",rmContainer.getLogURL());
  reset(appAttemptEventHandler);
  ContainerStatus containerStatus=SchedulerUtils.createAbnormalContainerStatus(containerId,SchedulerUtils.RELEASED_CONTAINER);
  rmContainer.handle(new RMContainerFinishedEvent(containerId,containerStatus,RMContainerEventType.RELEASED));
  drainDispatcher.await();
  assertEquals(RMContainerState.RELEASED,rmContainer.getState());
  assertEquals(SchedulerUtils.RELEASED_CONTAINER,rmContainer.getDiagnosticsInfo());
  assertEquals(ContainerExitStatus.ABORTED,rmContainer.getContainerExitStatus());
  assertEquals(ContainerState.COMPLETE,rmContainer.getContainerState());
  verify(writer).containerFinished(any(RMContainer.class));
  ArgumentCaptor<RMAppAttemptContainerFinishedEvent> captor=ArgumentCaptor.forClass(RMAppAttemptContainerFinishedEvent.class);
  verify(appAttemptEventHandler).handle(captor.capture());
  RMAppAttemptContainerFinishedEvent cfEvent=captor.getValue();
  assertEquals(appAttemptId,cfEvent.getApplicationAttemptId());
  assertEquals(containerStatus,cfEvent.getContainerStatus());
  assertEquals(RMAppAttemptEventType.CONTAINER_FINISHED,cfEvent.getType());
  rmContainer.handle(new RMContainerFinishedEvent(containerId,SchedulerUtils.createAbnormalContainerStatus(containerId,"FinishedContainer"),RMContainerEventType.FINISHED));
  assertEquals(RMContainerState.RELEASED,rmContainer.getState());
}
