{
  DrainDispatcher drainDispatcher=new DrainDispatcher();
  EventHandler<RMAppAttemptEvent> appAttemptEventHandler=mock(EventHandler.class);
  EventHandler generic=mock(EventHandler.class);
  drainDispatcher.register(RMAppAttemptEventType.class,appAttemptEventHandler);
  drainDispatcher.register(RMNodeEventType.class,generic);
  drainDispatcher.init(new YarnConfiguration());
  drainDispatcher.start();
  NodeId nodeId=BuilderUtils.newNodeId("host",3425);
  ApplicationId appId=BuilderUtils.newApplicationId(1,1);
  ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(appId,1);
  ContainerId containerId=BuilderUtils.newContainerId(appAttemptId,1);
  ContainerAllocationExpirer expirer=mock(ContainerAllocationExpirer.class);
  Resource resource=BuilderUtils.newResource(512,1);
  Priority priority=BuilderUtils.newPriority(5);
  Container container=BuilderUtils.newContainer(containerId,nodeId,"host:3465",resource,priority,null);
  RMApplicationHistoryWriter writer=mock(RMApplicationHistoryWriter.class);
  SystemMetricsPublisher publisher=mock(SystemMetricsPublisher.class);
  RMContext rmContext=mock(RMContext.class);
  when(rmContext.getDispatcher()).thenReturn(drainDispatcher);
  when(rmContext.getContainerAllocationExpirer()).thenReturn(expirer);
  when(rmContext.getRMApplicationHistoryWriter()).thenReturn(writer);
  when(rmContext.getSystemMetricsPublisher()).thenReturn(publisher);
  when(rmContext.getYarnConfiguration()).thenReturn(new YarnConfiguration());
  RMContainer rmContainer=new RMContainerImpl(container,appAttemptId,nodeId,"user",rmContext);
  assertEquals(RMContainerState.NEW,rmContainer.getState());
  assertEquals(resource,rmContainer.getAllocatedResource());
  assertEquals(nodeId,rmContainer.getAllocatedNode());
  assertEquals(priority,rmContainer.getAllocatedPriority());
  verify(writer).containerStarted(any(RMContainer.class));
  verify(publisher).containerCreated(any(RMContainer.class),anyLong());
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.START));
  drainDispatcher.await();
  assertEquals(RMContainerState.ALLOCATED,rmContainer.getState());
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.ACQUIRED));
  drainDispatcher.await();
  assertEquals(RMContainerState.ACQUIRED,rmContainer.getState());
  rmContainer.handle(new RMContainerEvent(containerId,RMContainerEventType.LAUNCHED));
  drainDispatcher.await();
  assertEquals(RMContainerState.RUNNING,rmContainer.getState());
  assertEquals("http://host:3465/node/containerlogs/container_1_0001_01_000001/user",rmContainer.getLogURL());
  reset(appAttemptEventHandler);
  ContainerStatus containerStatus=SchedulerUtils.createAbnormalContainerStatus(containerId,SchedulerUtils.EXPIRED_CONTAINER);
  rmContainer.handle(new RMContainerFinishedEvent(containerId,containerStatus,RMContainerEventType.EXPIRE));
  drainDispatcher.await();
  assertEquals(RMContainerState.RUNNING,rmContainer.getState());
  verify(writer,never()).containerFinished(any(RMContainer.class));
  verify(publisher,never()).containerFinished(any(RMContainer.class),anyLong());
}
