{
  checkNotSchemeWithRelative(src);
  checkNotSchemeWithRelative(dst);
  Path qSrc=makeQualified(src);
  Path qDst=makeQualified(dst);
  checkDest(qSrc.getName(),qDst,overwrite);
  FileStatus fs=FileContext.this.getFileStatus(qSrc);
  if (fs.isDir()) {
    checkDependencies(qSrc,qDst);
    mkdir(qDst,FsPermission.getDefault(),true);
    FileStatus[] contents=listStatus(qSrc);
    for (    FileStatus content : contents) {
      copy(content.getPath(),new Path(qDst,content.getPath()),deleteSource,overwrite);
    }
  }
 else {
    InputStream in=null;
    OutputStream out=null;
    try {
      in=open(qSrc);
      out=create(qDst,EnumSet.of(CreateFlag.OVERWRITE));
      IOUtils.copyBytes(in,out,conf,true);
    }
 catch (    IOException e) {
      IOUtils.closeStream(out);
      IOUtils.closeStream(in);
      throw e;
    }
  }
  if (deleteSource) {
    return delete(qSrc,true);
  }
 else {
    return true;
  }
}
