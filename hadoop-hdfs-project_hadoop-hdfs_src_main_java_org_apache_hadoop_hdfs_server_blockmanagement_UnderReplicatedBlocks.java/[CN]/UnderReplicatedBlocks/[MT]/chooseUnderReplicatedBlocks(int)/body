{
  List<List<Block>> blocksToReplicate=new ArrayList<List<Block>>(LEVEL);
  for (int i=0; i < LEVEL; i++) {
    blocksToReplicate.add(new ArrayList<Block>());
  }
  if (size() == 0) {
    return blocksToReplicate;
  }
  int blockCount=0;
  for (int priority=0; priority < LEVEL; priority++) {
    BlockIterator neededReplicationsIterator=iterator(priority);
    Integer replIndex=priorityToReplIdx.get(priority);
    for (int i=0; i < replIndex && neededReplicationsIterator.hasNext(); i++) {
      neededReplicationsIterator.next();
    }
    blocksToProcess=Math.min(blocksToProcess,size());
    if (blockCount == blocksToProcess) {
      break;
    }
    while (blockCount < blocksToProcess && neededReplicationsIterator.hasNext()) {
      Block block=neededReplicationsIterator.next();
      blocksToReplicate.get(priority).add(block);
      replIndex++;
      blockCount++;
    }
    if (!neededReplicationsIterator.hasNext() && neededReplicationsIterator.getPriority() == LEVEL - 1) {
      for (int i=0; i < LEVEL; i++) {
        priorityToReplIdx.put(i,0);
      }
      break;
    }
    priorityToReplIdx.put(priority,replIndex);
  }
  return blocksToReplicate;
}
