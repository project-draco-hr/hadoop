{
  List<List<Block>> blocksToReplicate=new ArrayList<List<Block>>(LEVEL);
  for (int i=0; i < LEVEL; i++) {
    blocksToReplicate.add(new ArrayList<Block>());
  }
  if (size() == 0) {
    return blocksToReplicate;
  }
  int blockCount=0;
  for (int priority=0; priority < LEVEL; priority++) {
    BlockIterator neededReplicationsIterator=iterator(priority);
    neededReplicationsIterator.setToBookmark();
    blocksToProcess=Math.min(blocksToProcess,size());
    if (blockCount == blocksToProcess) {
      break;
    }
    while (blockCount < blocksToProcess && neededReplicationsIterator.hasNext()) {
      Block block=neededReplicationsIterator.next();
      blocksToReplicate.get(priority).add(block);
      blockCount++;
    }
    if (!neededReplicationsIterator.hasNext() && neededReplicationsIterator.getPriority() == LEVEL - 1) {
      for (int i=0; i < LEVEL; i++) {
        this.priorityQueues.get(i).resetBookmark();
      }
      break;
    }
  }
  return blocksToReplicate;
}
