{
  int maps=100;
  int reduces=0;
  System.out.println("Running benchmark with maps:" + maps + " reduces:"+ reduces);
  run(new MRApp(maps,reduces,true,this.getClass().getName(),true){
    @Override protected ContainerAllocator createContainerAllocator(    ClientService clientService,    AppContext context){
      return new RMContainerAllocator(clientService,context){
        @Override protected AMRMProtocol createSchedulerProxy(){
          return new AMRMProtocol(){
            @Override public RegisterApplicationMasterResponse registerApplicationMaster(            RegisterApplicationMasterRequest request) throws IOException {
              RegisterApplicationMasterResponse response=Records.newRecord(RegisterApplicationMasterResponse.class);
              response.setMinimumResourceCapability(Resource.newInstance(1024,1));
              response.setMaximumResourceCapability(Resource.newInstance(10240,1));
              return response;
            }
            @Override public FinishApplicationMasterResponse finishApplicationMaster(            FinishApplicationMasterRequest request) throws IOException {
              FinishApplicationMasterResponse response=Records.newRecord(FinishApplicationMasterResponse.class);
              return response;
            }
            @Override public AllocateResponse allocate(            AllocateRequest request) throws IOException {
              AllocateResponse response=Records.newRecord(AllocateResponse.class);
              List<ResourceRequest> askList=request.getAskList();
              List<Container> containers=new ArrayList<Container>();
              for (              ResourceRequest req : askList) {
                if (!ResourceRequest.isAnyLocation(req.getResourceName())) {
                  continue;
                }
                int numContainers=req.getNumContainers();
                for (int i=0; i < numContainers; i++) {
                  ContainerId containerId=ContainerId.newInstance(request.getApplicationAttemptId(),request.getResponseId() + i);
                  containers.add(Container.newInstance(containerId,NodeId.newInstance("host" + containerId.getId(),2345),"host" + containerId.getId() + ":5678",req.getCapability(),req.getPriority(),null));
                }
              }
              response.setAllocatedContainers(containers);
              response.setResponseId(request.getResponseId() + 1);
              response.setNumClusterNodes(350);
              return response;
            }
          }
;
        }
      }
;
    }
  }
);
}
