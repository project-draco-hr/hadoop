{
  hdfs.allowSnapshot(dir1.toString());
  hdfs.allowSnapshot(dir2.toString());
  hdfs.setPermission(root,FsPermission.valueOf("-rwxrwxrwx"));
  UserGroupInformation ugi1=UserGroupInformation.createUserForTesting("user1",new String[]{"group1"});
  DistributedFileSystem fs1=(DistributedFileSystem)DFSTestUtil.getFileSystemAs(ugi1,conf);
  Path dir1_user1=new Path("/dir1_user1");
  Path dir2_user1=new Path("/dir2_user1");
  fs1.mkdirs(dir1_user1);
  fs1.mkdirs(dir2_user1);
  fs1.allowSnapshot(dir1_user1.toString());
  fs1.allowSnapshot(dir2_user1.toString());
  UserGroupInformation ugi2=UserGroupInformation.createUserForTesting("user2",new String[]{"group2"});
  DistributedFileSystem fs2=(DistributedFileSystem)DFSTestUtil.getFileSystemAs(ugi2,conf);
  Path dir_user2=new Path("/dir_user2");
  Path subdir_user2=new Path(dir_user2,"subdir");
  fs2.mkdirs(dir_user2);
  fs2.mkdirs(subdir_user2);
  fs2.allowSnapshot(dir_user2.toString());
  fs2.allowSnapshot(subdir_user2.toString());
  String supergroup=conf.get(DFS_PERMISSIONS_SUPERUSERGROUP_KEY,DFS_PERMISSIONS_SUPERUSERGROUP_DEFAULT);
  UserGroupInformation superUgi=UserGroupInformation.createUserForTesting("superuser",new String[]{supergroup});
  DistributedFileSystem fs3=(DistributedFileSystem)DFSTestUtil.getFileSystemAs(superUgi,conf);
  SnapshottableDirectoryStatus[] dirs=fs3.getSnapshottableDirListing();
  assertEquals(6,dirs.length);
  dirs=fs1.getSnapshottableDirListing();
  assertEquals(2,dirs.length);
  assertEquals(dir1_user1,dirs[0].getFullPath());
  assertEquals(dir2_user1,dirs[1].getFullPath());
  dirs=fs2.getSnapshottableDirListing();
  assertEquals(2,dirs.length);
  assertEquals(dir_user2,dirs[0].getFullPath());
  assertEquals(subdir_user2,dirs[1].getFullPath());
}
