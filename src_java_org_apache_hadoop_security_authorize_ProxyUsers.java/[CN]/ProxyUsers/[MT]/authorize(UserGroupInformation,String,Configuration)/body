{
  if (conf == null) {
    refreshSuperUserGroupsConfiguration(newConf);
  }
  if (user.getRealUser() == null) {
    return;
  }
  boolean groupAuthorized=false;
  boolean ipAuthorized=false;
  UserGroupInformation superUser=user.getRealUser();
  Collection<String> allowedUserGroups=proxyGroups.get(getProxySuperuserGroupConfKey(superUser.getShortUserName()));
  if (!allowedUserGroups.isEmpty()) {
    for (    String group : user.getGroupNames()) {
      if (allowedUserGroups.contains(group)) {
        groupAuthorized=true;
        break;
      }
    }
  }
  if (!groupAuthorized) {
    throw new AuthorizationException("User: " + superUser.getUserName() + " is not allowed to impersonate "+ user.getUserName());
  }
  Collection<String> ipList=proxyHosts.get(getProxySuperuserIpConfKey(superUser.getShortUserName()));
  if (!ipList.isEmpty()) {
    for (    String allowedHost : ipList) {
      InetAddress hostAddr;
      try {
        hostAddr=InetAddress.getByName(allowedHost);
      }
 catch (      UnknownHostException e) {
        continue;
      }
      if (hostAddr.getHostAddress().equals(remoteAddress)) {
        ipAuthorized=true;
      }
    }
  }
  if (!ipAuthorized) {
    throw new AuthorizationException("Unauthorized connection for super-user: " + superUser.getUserName() + " from IP "+ remoteAddress);
  }
}
