{
  String parentQueueName="root";
  String leafQueueName="root.leaf";
  String user="alice";
  QueueMetrics parentMetrics=QueueMetrics.forQueue(ms,parentQueueName,null,true,conf);
  Queue parentQueue=make(stub(Queue.class).returning(parentMetrics).from.getMetrics());
  QueueMetrics metrics=QueueMetrics.forQueue(ms,leafQueueName,parentQueue,true,conf);
  MetricsSource parentQueueSource=queueSource(ms,parentQueueName);
  MetricsSource queueSource=queueSource(ms,leafQueueName);
  metrics.submitApp(user);
  MetricsSource userSource=userSource(ms,leafQueueName,user);
  MetricsSource parentUserSource=userSource(ms,parentQueueName,user);
  metrics.incrNodeTypeAggregations(user,NodeType.NODE_LOCAL);
  checkAggregatedNodeTypes(queueSource,1L,0L,0L);
  checkAggregatedNodeTypes(parentQueueSource,1L,0L,0L);
  checkAggregatedNodeTypes(userSource,1L,0L,0L);
  checkAggregatedNodeTypes(parentUserSource,1L,0L,0L);
  metrics.incrNodeTypeAggregations(user,NodeType.RACK_LOCAL);
  checkAggregatedNodeTypes(queueSource,1L,1L,0L);
  checkAggregatedNodeTypes(parentQueueSource,1L,1L,0L);
  checkAggregatedNodeTypes(userSource,1L,1L,0L);
  checkAggregatedNodeTypes(parentUserSource,1L,1L,0L);
  metrics.incrNodeTypeAggregations(user,NodeType.OFF_SWITCH);
  checkAggregatedNodeTypes(queueSource,1L,1L,1L);
  checkAggregatedNodeTypes(parentQueueSource,1L,1L,1L);
  checkAggregatedNodeTypes(userSource,1L,1L,1L);
  checkAggregatedNodeTypes(parentUserSource,1L,1L,1L);
  metrics.incrNodeTypeAggregations(user,NodeType.OFF_SWITCH);
  checkAggregatedNodeTypes(queueSource,1L,1L,2L);
  checkAggregatedNodeTypes(parentQueueSource,1L,1L,2L);
  checkAggregatedNodeTypes(userSource,1L,1L,2L);
  checkAggregatedNodeTypes(parentUserSource,1L,1L,2L);
}
