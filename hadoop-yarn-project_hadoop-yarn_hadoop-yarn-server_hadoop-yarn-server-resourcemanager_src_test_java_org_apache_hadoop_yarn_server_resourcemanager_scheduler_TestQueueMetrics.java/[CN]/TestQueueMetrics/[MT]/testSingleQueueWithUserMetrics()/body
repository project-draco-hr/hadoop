{
  String queueName="single2";
  String user="dodo";
  QueueMetrics metrics=QueueMetrics.forQueue(ms,queueName,null,true,conf);
  MetricsSource queueSource=queueSource(ms,queueName);
  AppSchedulingInfo app=mockApp(user);
  metrics.submitApp(user,1);
  MetricsSource userSource=userSource(ms,queueName,user);
  checkApps(queueSource,1,1,0,0,0,0,true);
  checkApps(userSource,1,1,0,0,0,0,true);
  metrics.setAvailableResourcesToQueue(Resources.createResource(100 * GB,100));
  metrics.setAvailableResourcesToUser(user,Resources.createResource(10 * GB,10));
  metrics.incrPendingResources(user,5,Resources.createResource(15 * GB,15));
  checkResources(queueSource,0,0,0,0,0,100 * GB,100,15 * GB,15,5,0,0,0);
  checkResources(userSource,0,0,0,0,0,10 * GB,10,15 * GB,15,5,0,0,0);
  metrics.incrAppsRunning(app,user);
  checkApps(queueSource,1,0,1,0,0,0,true);
  checkApps(userSource,1,0,1,0,0,0,true);
  metrics.allocateResources(user,3,Resources.createResource(2 * GB,2));
  checkResources(queueSource,6 * GB,6,3,3,0,100 * GB,100,9 * GB,9,2,0,0,0);
  checkResources(userSource,6 * GB,6,3,3,0,10 * GB,10,9 * GB,9,2,0,0,0);
  metrics.releaseResources(user,1,Resources.createResource(2 * GB,2));
  checkResources(queueSource,4 * GB,4,2,3,1,100 * GB,100,9 * GB,9,2,0,0,0);
  checkResources(userSource,4 * GB,4,2,3,1,10 * GB,10,9 * GB,9,2,0,0,0);
  metrics.finishApp(app,RMAppAttemptState.FINISHED);
  checkApps(queueSource,1,0,0,1,0,0,true);
  checkApps(userSource,1,0,0,1,0,0,true);
}
