{
  String parentQueueName="root";
  String leafQueueName="root.leaf";
  String user="alice";
  QueueMetrics parentMetrics=QueueMetrics.forQueue(ms,parentQueueName,null,true,conf);
  Queue parentQueue=make(stub(Queue.class).returning(parentMetrics).from.getMetrics());
  QueueMetrics metrics=QueueMetrics.forQueue(ms,leafQueueName,parentQueue,true,conf);
  MetricsSource parentQueueSource=queueSource(ms,parentQueueName);
  MetricsSource queueSource=queueSource(ms,leafQueueName);
  AppSchedulingInfo app=mockApp(user);
  metrics.submitApp(user);
  MetricsSource userSource=userSource(ms,leafQueueName,user);
  MetricsSource parentUserSource=userSource(ms,parentQueueName,user);
  checkApps(queueSource,1,0,0,0,0,0,true);
  checkApps(parentQueueSource,1,0,0,0,0,0,true);
  checkApps(userSource,1,0,0,0,0,0,true);
  checkApps(parentUserSource,1,0,0,0,0,0,true);
  metrics.submitAppAttempt(user);
  checkApps(queueSource,1,1,0,0,0,0,true);
  checkApps(parentQueueSource,1,1,0,0,0,0,true);
  checkApps(userSource,1,1,0,0,0,0,true);
  checkApps(parentUserSource,1,1,0,0,0,0,true);
  parentMetrics.setAvailableResourcesToQueue(Resources.createResource(100 * GB,100));
  metrics.setAvailableResourcesToQueue(Resources.createResource(100 * GB,100));
  parentMetrics.setAvailableResourcesToUser(user,Resources.createResource(10 * GB,10));
  metrics.setAvailableResourcesToUser(user,Resources.createResource(10 * GB,10));
  metrics.incrPendingResources(user,5,Resources.createResource(15 * GB,15));
  checkResources(queueSource,0,0,0,0,0,100 * GB,100,15 * GB,15,5,0,0,0);
  checkResources(parentQueueSource,0,0,0,0,0,100 * GB,100,15 * GB,15,5,0,0,0);
  checkResources(userSource,0,0,0,0,0,10 * GB,10,15 * GB,15,5,0,0,0);
  checkResources(parentUserSource,0,0,0,0,0,10 * GB,10,15 * GB,15,5,0,0,0);
  metrics.runAppAttempt(app.getApplicationId(),user);
  checkApps(queueSource,1,0,1,0,0,0,true);
  checkApps(userSource,1,0,1,0,0,0,true);
  metrics.allocateResources(user,3,Resources.createResource(2 * GB,2));
  metrics.reserveResource(user,Resources.createResource(3 * GB,3));
  checkResources(queueSource,6 * GB,6,3,3,0,100 * GB,100,9 * GB,9,2,3 * GB,3,1);
  checkResources(parentQueueSource,6 * GB,6,3,3,0,100 * GB,100,9 * GB,9,2,3 * GB,3,1);
  checkResources(userSource,6 * GB,6,3,3,0,10 * GB,10,9 * GB,9,2,3 * GB,3,1);
  checkResources(parentUserSource,6 * GB,6,3,3,0,10 * GB,10,9 * GB,9,2,3 * GB,3,1);
  metrics.releaseResources(user,1,Resources.createResource(2 * GB,2));
  metrics.unreserveResource(user,Resources.createResource(3 * GB,3));
  checkResources(queueSource,4 * GB,4,2,3,1,100 * GB,100,9 * GB,9,2,0,0,0);
  checkResources(parentQueueSource,4 * GB,4,2,3,1,100 * GB,100,9 * GB,9,2,0,0,0);
  checkResources(userSource,4 * GB,4,2,3,1,10 * GB,10,9 * GB,9,2,0,0,0);
  checkResources(parentUserSource,4 * GB,4,2,3,1,10 * GB,10,9 * GB,9,2,0,0,0);
  metrics.finishAppAttempt(app.getApplicationId(),app.isPending(),app.getUser());
  checkApps(queueSource,1,0,0,0,0,0,true);
  checkApps(parentQueueSource,1,0,0,0,0,0,true);
  checkApps(userSource,1,0,0,0,0,0,true);
  checkApps(parentUserSource,1,0,0,0,0,0,true);
  metrics.finishApp(user,RMAppState.FINISHED);
  checkApps(queueSource,1,0,0,1,0,0,true);
  checkApps(parentQueueSource,1,0,0,1,0,0,true);
  checkApps(userSource,1,0,0,1,0,0,true);
  checkApps(parentUserSource,1,0,0,1,0,0,true);
}
