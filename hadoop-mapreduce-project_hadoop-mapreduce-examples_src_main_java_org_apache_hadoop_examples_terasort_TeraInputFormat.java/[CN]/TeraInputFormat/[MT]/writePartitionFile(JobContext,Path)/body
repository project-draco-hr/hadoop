{
  long t1=System.currentTimeMillis();
  Configuration conf=job.getConfiguration();
  final TeraInputFormat inFormat=new TeraInputFormat();
  final TextSampler sampler=new TextSampler();
  int partitions=job.getNumReduceTasks();
  long sampleSize=conf.getLong(TeraSortConfigKeys.SAMPLE_SIZE.key(),TeraSortConfigKeys.DEFAULT_SAMPLE_SIZE);
  final List<InputSplit> splits=inFormat.getSplits(job);
  long t2=System.currentTimeMillis();
  System.out.println("Computing input splits took " + (t2 - t1) + "ms");
  int samples=Math.min(conf.getInt(TeraSortConfigKeys.NUM_PARTITIONS.key(),TeraSortConfigKeys.DEFAULT_NUM_PARTITIONS),splits.size());
  System.out.println("Sampling " + samples + " splits of "+ splits.size());
  final long recordsPerSample=sampleSize / samples;
  final int sampleStep=splits.size() / samples;
  Thread[] samplerReader=new Thread[samples];
  SamplerThreadGroup threadGroup=new SamplerThreadGroup("Sampler Reader Thread Group");
  for (int i=0; i < samples; ++i) {
    final int idx=i;
    samplerReader[i]=new Thread(threadGroup,"Sampler Reader " + idx){
{
        setDaemon(true);
      }
      public void run(){
        long records=0;
        try {
          TaskAttemptContext context=new TaskAttemptContextImpl(job.getConfiguration(),new TaskAttemptID());
          RecordReader<Text,Text> reader=inFormat.createRecordReader(splits.get(sampleStep * idx),context);
          reader.initialize(splits.get(sampleStep * idx),context);
          while (reader.nextKeyValue()) {
            sampler.addKey(new Text(reader.getCurrentKey()));
            records+=1;
            if (recordsPerSample <= records) {
              break;
            }
          }
        }
 catch (        IOException ie) {
          System.err.println("Got an exception while reading splits " + StringUtils.stringifyException(ie));
          throw new RuntimeException(ie);
        }
catch (        InterruptedException e) {
        }
      }
    }
;
    samplerReader[i].start();
  }
  FileSystem outFs=partFile.getFileSystem(conf);
  DataOutputStream writer=outFs.create(partFile,true,64 * 1024,(short)10,outFs.getDefaultBlockSize(partFile));
  for (int i=0; i < samples; i++) {
    try {
      samplerReader[i].join();
      if (threadGroup.getThrowable() != null) {
        throw threadGroup.getThrowable();
      }
    }
 catch (    InterruptedException e) {
    }
  }
  for (  Text split : sampler.createPartitions(partitions)) {
    split.write(writer);
  }
  writer.close();
  long t3=System.currentTimeMillis();
  System.out.println("Computing parititions took " + (t3 - t2) + "ms");
}
