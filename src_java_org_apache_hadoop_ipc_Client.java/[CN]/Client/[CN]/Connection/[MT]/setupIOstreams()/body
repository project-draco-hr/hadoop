{
  if (socket != null || shouldCloseConnection.get()) {
    return;
  }
  short ioFailures=0;
  short timeoutFailures=0;
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Connecting to " + server);
    }
    while (true) {
      try {
        this.socket=socketFactory.createSocket();
        this.socket.setTcpNoDelay(tcpNoDelay);
        NetUtils.connect(this.socket,remoteId.getAddress(),20000);
        this.socket.setSoTimeout(pingInterval);
        break;
      }
 catch (      SocketTimeoutException toe) {
        handleConnectionFailure(timeoutFailures++,45,toe);
      }
catch (      IOException ie) {
        handleConnectionFailure(ioFailures++,maxRetries,ie);
      }
    }
    InputStream inStream=NetUtils.getInputStream(socket);
    OutputStream outStream=NetUtils.getOutputStream(socket);
    writeRpcHeader(outStream);
    if (useSasl) {
      final InputStream in2=inStream;
      final OutputStream out2=outStream;
      remoteId.getTicket().doAs(new PrivilegedExceptionAction<Object>(){
        @Override public Object run() throws IOException {
          saslRpcClient=new SaslRpcClient(authMethod,token,serverPrincipal);
          saslRpcClient.saslConnect(in2,out2);
          return null;
        }
      }
);
      inStream=saslRpcClient.getInputStream(inStream);
      outStream=saslRpcClient.getOutputStream(outStream);
    }
    if (doPing) {
      this.in=new DataInputStream(new BufferedInputStream(new PingInputStream(inStream)));
    }
 else {
      this.in=new DataInputStream(new BufferedInputStream(inStream));
    }
    this.out=new DataOutputStream(new BufferedOutputStream(outStream));
    writeHeader();
    touch();
    start();
  }
 catch (  IOException e) {
    markClosed(e);
    close();
  }
}
