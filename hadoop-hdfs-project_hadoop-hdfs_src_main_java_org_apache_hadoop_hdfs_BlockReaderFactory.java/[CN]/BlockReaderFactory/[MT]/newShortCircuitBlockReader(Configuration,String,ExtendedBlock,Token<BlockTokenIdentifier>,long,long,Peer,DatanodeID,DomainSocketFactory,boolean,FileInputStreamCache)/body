{
  final DataOutputStream out=new DataOutputStream(new BufferedOutputStream(peer.getOutputStream()));
  new Sender(out).requestShortCircuitFds(block,blockToken,1);
  DataInputStream in=new DataInputStream(peer.getInputStream());
  BlockOpResponseProto resp=BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(in));
  DomainSocket sock=peer.getDomainSocket();
switch (resp.getStatus()) {
case SUCCESS:
    BlockReaderLocal reader=null;
  byte buf[]=new byte[1];
FileInputStream fis[]=new FileInputStream[2];
sock.recvFileInputStreams(fis,buf,0,buf.length);
try {
reader=new BlockReaderLocal(conf,file,block,startOffset,len,fis[0],fis[1],datanodeID,verifyChecksum,fisCache);
}
  finally {
if (reader == null) {
IOUtils.cleanup(DFSClient.LOG,fis[0],fis[1]);
}
}
return reader;
case ERROR_UNSUPPORTED:
if (!resp.hasShortCircuitAccessVersion()) {
DFSClient.LOG.warn("short-circuit read access is disabled for " + "DataNode " + datanodeID + ".  reason: "+ resp.getMessage());
domSockFactory.disableShortCircuitForPath(sock.getPath());
}
 else {
DFSClient.LOG.warn("short-circuit read access for the file " + file + " is disabled for DataNode "+ datanodeID+ ".  reason: "+ resp.getMessage());
}
return null;
case ERROR_ACCESS_TOKEN:
String msg="access control error while " + "attempting to set up short-circuit access to " + file + resp.getMessage();
DFSClient.LOG.debug(msg);
throw new InvalidBlockTokenException(msg);
default :
DFSClient.LOG.warn("error while attempting to set up short-circuit " + "access to " + file + ": "+ resp.getMessage());
domSockFactory.disableShortCircuitForPath(sock.getPath());
return null;
}
}
