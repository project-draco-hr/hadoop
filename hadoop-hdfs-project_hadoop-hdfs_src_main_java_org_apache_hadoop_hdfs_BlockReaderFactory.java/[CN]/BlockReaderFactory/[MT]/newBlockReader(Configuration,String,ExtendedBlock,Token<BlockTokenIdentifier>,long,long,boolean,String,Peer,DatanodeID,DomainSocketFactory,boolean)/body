{
  peer.setReadTimeout(conf.getInt(DFSConfigKeys.DFS_CLIENT_SOCKET_TIMEOUT_KEY,HdfsServerConstants.READ_TIMEOUT));
  peer.setWriteTimeout(HdfsServerConstants.WRITE_TIMEOUT);
  if (peer.getDomainSocket() != null) {
    if (allowShortCircuitLocalReads && (!conf.getBoolean(DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL,DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL_DEFAULT))) {
      BlockReader reader=newShortCircuitBlockReader(conf,file,block,blockToken,startOffset,len,peer,datanodeID,domSockFactory,verifyChecksum);
      if (reader != null) {
        PeerCache peerCache=PeerCache.getInstance(conf.getInt(DFSConfigKeys.DFS_CLIENT_SOCKET_CACHE_CAPACITY_KEY,DFSConfigKeys.DFS_CLIENT_SOCKET_CACHE_CAPACITY_DEFAULT),conf.getLong(DFSConfigKeys.DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_KEY,DFSConfigKeys.DFS_CLIENT_SOCKET_CACHE_EXPIRY_MSEC_DEFAULT));
        peerCache.put(datanodeID,peer);
        return reader;
      }
    }
    if (!conf.getBoolean(DFSConfigKeys.DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC,DFSConfigKeys.DFS_CLIENT_DOMAIN_SOCKET_DATA_TRAFFIC_DEFAULT)) {
      throw new IOException("Because we can't do short-circuit access, " + "and data traffic over domain sockets is disabled, " + "we cannot use this socket to talk to "+ datanodeID);
    }
  }
  if (conf.getBoolean(DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADER,DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADER_DEFAULT)) {
    return RemoteBlockReader.newBlockReader(file,block,blockToken,startOffset,len,conf.getInt(DFSConfigKeys.IO_FILE_BUFFER_SIZE_KEY,DFSConfigKeys.IO_FILE_BUFFER_SIZE_DEFAULT),verifyChecksum,clientName,peer,datanodeID);
  }
 else {
    return RemoteBlockReader2.newBlockReader(file,block,blockToken,startOffset,len,verifyChecksum,clientName,peer,datanodeID);
  }
}
