{
  peer.setReadTimeout(conf.socketTimeout);
  peer.setWriteTimeout(HdfsServerConstants.WRITE_TIMEOUT);
  if (peer.getDomainSocket() != null) {
    if (allowShortCircuitLocalReads && !conf.useLegacyBlockReaderLocal) {
      BlockReader reader=newShortCircuitBlockReader(conf,file,block,blockToken,startOffset,len,peer,datanodeID,domSockFactory,verifyChecksum,fisCache);
      if (reader != null) {
        if (peerCache != null) {
          peerCache.put(datanodeID,peer);
        }
 else {
          IOUtils.cleanup(null,peer);
        }
        return reader;
      }
    }
    if (!conf.domainSocketDataTraffic) {
      throw new IOException("Because we can't do short-circuit access, " + "and data traffic over domain sockets is disabled, " + "we cannot use this socket to talk to "+ datanodeID);
    }
  }
  if (conf.useLegacyBlockReader) {
    @SuppressWarnings("deprecation") RemoteBlockReader reader=RemoteBlockReader.newBlockReader(file,block,blockToken,startOffset,len,conf.ioBufferSize,verifyChecksum,clientName,peer,datanodeID,peerCache);
    return reader;
  }
 else {
    return RemoteBlockReader2.newBlockReader(file,block,blockToken,startOffset,len,verifyChecksum,clientName,peer,datanodeID,peerCache);
  }
}
