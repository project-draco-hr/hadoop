{
  Configuration conf=getConfig();
  String bindAddress=WebAppUtils.getWebAppBindURL(conf,YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,WebAppUtils.getAHSWebAppURLWithoutScheme(conf));
  LOG.info("Instantiating the per-node aggregator webapp at " + bindAddress);
  try {
    Configuration confForInfoServer=new Configuration(conf);
    confForInfoServer.setInt(HttpServer2.HTTP_MAX_THREADS,10);
    HttpServer2.Builder builder=new HttpServer2.Builder().setName("timeline").setConf(conf).addEndpoint(URI.create("http://" + bindAddress));
    timelineRestServer=builder.build();
    HashMap<String,String> options=new HashMap<>();
    String username=conf.get(HADOOP_HTTP_STATIC_USER,DEFAULT_HADOOP_HTTP_STATIC_USER);
    options.put(HADOOP_HTTP_STATIC_USER,username);
    HttpServer2.defineFilter(timelineRestServer.getWebAppContext(),"static_user_filter_timeline",StaticUserWebFilter.StaticUserFilter.class.getName(),options,new String[]{"/*"});
    timelineRestServer.addJerseyResourcePackage(TimelineAggregatorWebService.class.getPackage().getName() + ";" + GenericExceptionHandler.class.getPackage().getName()+ ";"+ YarnJacksonJaxbJsonProvider.class.getPackage().getName(),"/*");
    timelineRestServer.setAttribute(AGGREGATOR_COLLECTION_ATTR_KEY,TimelineAggregatorsCollection.getInstance());
    timelineRestServer.start();
  }
 catch (  Exception e) {
    String msg="The per-node aggregator webapp failed to start.";
    LOG.error(msg,e);
    throw new YarnRuntimeException(msg,e);
  }
}
