{
  fs.setPermission(linkParent,new FsPermission((short)0555));
  try {
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws IOException {
        FileContext myfc=FileContext.getFileContext(conf);
        myfc.delete(link,false);
        return null;
      }
    }
);
    fail("Deleted symlink without write permissions on parent!");
  }
 catch (  AccessControlException e) {
    GenericTestUtils.assertExceptionContains("Permission denied",e);
  }
  fs.setPermission(linkParent,new FsPermission((short)0777));
  fs.setPermission(targetParent,new FsPermission((short)0555));
  fs.setPermission(target,new FsPermission((short)0555));
  user.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws IOException {
      FileContext myfc=FileContext.getFileContext(conf);
      myfc.delete(link,false);
      return null;
    }
  }
);
  assertTrue("Target should not have been deleted!",wrapper.exists(target));
  assertFalse("Link should have been deleted!",wrapper.exists(link));
}
