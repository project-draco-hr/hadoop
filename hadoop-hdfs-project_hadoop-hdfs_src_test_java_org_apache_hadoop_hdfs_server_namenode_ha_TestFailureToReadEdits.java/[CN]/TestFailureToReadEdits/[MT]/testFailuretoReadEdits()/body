{
  Configuration conf=new Configuration();
  HAUtil.setAllowStandbyReads(conf,true);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(0).build();
  try {
    cluster.waitActive();
    cluster.transitionToActive(0);
    Runtime mockRuntime=mock(Runtime.class);
    NameNode nn1=cluster.getNameNode(0);
    NameNode nn2=cluster.getNameNode(1);
    nn2.getNamesystem().getEditLogTailer().setSleepTime(250);
    nn2.getNamesystem().getEditLogTailer().interrupt();
    nn2.getNamesystem().getEditLogTailer().setRuntime(mockRuntime);
    FileSystem fs=TestDFSClientFailover.configureFailoverFs(cluster,conf);
    fs.mkdirs(new Path(TEST_DIR1));
    TestEditLogTailer.waitForStandbyToCatchUp(nn1,nn2);
    fs.setOwner(new Path(TEST_DIR1),"foo","bar");
    fs.delete(new Path(TEST_DIR1),true);
    fs.mkdirs(new Path(TEST_DIR2));
    fs.mkdirs(new Path(TEST_DIR3));
    FSEditLog spyEditLog=spy(nn2.getNamesystem().getEditLogTailer().getEditLog());
    LimitedEditLogAnswer answer=new LimitedEditLogAnswer();
    doAnswer(answer).when(spyEditLog).selectInputStreams(anyLong(),anyLong(),anyBoolean());
    nn2.getNamesystem().getEditLogTailer().setEditLog(spyEditLog);
    try {
      TestEditLogTailer.waitForStandbyToCatchUp(nn1,nn2);
      fail("Standby fully caught up, but should not have been able to");
    }
 catch (    CouldNotCatchUpException e) {
      verify(mockRuntime,times(0)).exit(anyInt());
    }
    assertNull(NameNodeAdapter.getFileInfo(nn2,TEST_DIR1,false));
    assertTrue(NameNodeAdapter.getFileInfo(nn2,TEST_DIR2,false).isDir());
    assertNull(NameNodeAdapter.getFileInfo(nn2,TEST_DIR3,false));
    answer.setThrowExceptionOnRead(false);
    TestEditLogTailer.waitForStandbyToCatchUp(nn1,nn2);
    assertNull(NameNodeAdapter.getFileInfo(nn2,TEST_DIR1,false));
    assertTrue(NameNodeAdapter.getFileInfo(nn2,TEST_DIR2,false).isDir());
    assertTrue(NameNodeAdapter.getFileInfo(nn2,TEST_DIR3,false).isDir());
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
