{
  FSDataInputStream in=fs.open(masterIndexPath);
  FileStatus masterStat=fs.getFileStatus(masterIndexPath);
  masterIndexTimestamp=masterStat.getModificationTime();
  LineReader lin=new LineReader(in,getConf());
  Text line=new Text();
  long read=lin.readLine(line);
  String versionLine=line.toString();
  String[] arr=versionLine.split(" ");
  version=Integer.parseInt(arr[0]);
  if (this.version > HarFileSystem.VERSION) {
    throw new IOException("Invalid version " + this.version + " expected "+ HarFileSystem.VERSION);
  }
  String[] readStr=null;
  while (read < masterStat.getLen()) {
    int b=lin.readLine(line);
    read+=b;
    readStr=line.toString().split(" ");
    int startHash=Integer.parseInt(readStr[0]);
    int endHash=Integer.parseInt(readStr[1]);
    stores.add(new Store(Long.parseLong(readStr[2]),Long.parseLong(readStr[3]),startHash,endHash));
    line.clear();
  }
  try {
    lin.close();
  }
 catch (  IOException io) {
  }
  FSDataInputStream aIn=fs.open(archiveIndexPath);
  FileStatus archiveStat=fs.getFileStatus(archiveIndexPath);
  archiveIndexTimestamp=archiveStat.getModificationTime();
  LineReader aLin;
  for (  Store s : stores) {
    read=0;
    aIn.seek(s.begin);
    aLin=new LineReader(aIn,getConf());
    while (read + s.begin < s.end) {
      int tmp=aLin.readLine(line);
      read+=tmp;
      String lineFeed=line.toString();
      String[] parsed=lineFeed.split(" ");
      parsed[0]=decodeFileName(parsed[0]);
      archive.put(new Path(parsed[0]),new HarStatus(lineFeed));
      line.clear();
    }
  }
  try {
    aIn.close();
  }
 catch (  IOException io) {
  }
}
