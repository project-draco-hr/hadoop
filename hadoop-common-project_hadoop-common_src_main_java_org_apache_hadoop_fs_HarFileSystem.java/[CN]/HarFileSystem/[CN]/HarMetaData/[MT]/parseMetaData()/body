{
  Text line=new Text();
  long read;
  FSDataInputStream in=null;
  LineReader lin=null;
  try {
    in=fs.open(masterIndexPath);
    FileStatus masterStat=fs.getFileStatus(masterIndexPath);
    masterIndexTimestamp=masterStat.getModificationTime();
    lin=new LineReader(in,getConf());
    read=lin.readLine(line);
    String versionLine=line.toString();
    String[] arr=versionLine.split(" ");
    version=Integer.parseInt(arr[0]);
    if (this.version > HarFileSystem.VERSION) {
      throw new IOException("Invalid version " + this.version + " expected "+ HarFileSystem.VERSION);
    }
    String[] readStr;
    while (read < masterStat.getLen()) {
      int b=lin.readLine(line);
      read+=b;
      readStr=line.toString().split(" ");
      stores.add(new Store(Long.parseLong(readStr[2]),Long.parseLong(readStr[3])));
      line.clear();
    }
  }
 catch (  IOException ioe) {
    LOG.warn("Encountered exception ",ioe);
    throw ioe;
  }
 finally {
    IOUtils.cleanup(LOG,lin,in);
  }
  FSDataInputStream aIn=fs.open(archiveIndexPath);
  try {
    FileStatus archiveStat=fs.getFileStatus(archiveIndexPath);
    archiveIndexTimestamp=archiveStat.getModificationTime();
    LineReader aLin;
    for (    Store s : stores) {
      read=0;
      aIn.seek(s.begin);
      aLin=new LineReader(aIn,getConf());
      while (read + s.begin < s.end) {
        int tmp=aLin.readLine(line);
        read+=tmp;
        String lineFeed=line.toString();
        String[] parsed=lineFeed.split(" ");
        parsed[0]=decodeFileName(parsed[0]);
        archive.put(new Path(parsed[0]),new HarStatus(lineFeed));
        line.clear();
      }
    }
  }
  finally {
    IOUtils.cleanup(LOG,aIn);
  }
}
