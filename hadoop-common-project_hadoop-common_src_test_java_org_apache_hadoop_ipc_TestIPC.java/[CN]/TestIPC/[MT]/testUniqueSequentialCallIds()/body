{
  int serverThreads=10, callerCount=100, perCallerCallCount=100;
  TestServer server=new TestServer(serverThreads,false);
  final List<Integer> callIds=Collections.synchronizedList(new ArrayList<Integer>());
  server.callListener=new Runnable(){
    @Override public void run(){
      callIds.add(Server.getCallId());
    }
  }
;
  Client client=new Client(LongWritable.class,conf);
  try {
    InetSocketAddress addr=NetUtils.getConnectAddress(server);
    server.start();
    SerialCaller[] callers=new SerialCaller[callerCount];
    for (int i=0; i < callerCount; ++i) {
      callers[i]=new SerialCaller(client,addr,perCallerCallCount);
      callers[i].start();
    }
    for (int i=0; i < callerCount; ++i) {
      callers[i].join();
      assertFalse(callers[i].failed);
    }
  }
  finally {
    client.stop();
    server.stop();
  }
  int expectedCallCount=callerCount * perCallerCallCount;
  assertEquals(expectedCallCount,callIds.size());
  Collections.sort(callIds);
  final int startID=callIds.get(0).intValue();
  for (int i=0; i < expectedCallCount; ++i) {
    assertEquals(startID + i,callIds.get(i).intValue());
  }
}
