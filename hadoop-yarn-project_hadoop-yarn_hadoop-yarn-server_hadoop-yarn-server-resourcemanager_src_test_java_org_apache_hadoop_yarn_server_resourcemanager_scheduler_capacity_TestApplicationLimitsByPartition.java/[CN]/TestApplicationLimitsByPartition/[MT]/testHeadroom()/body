{
  simpleNodeLabelMappingToManager();
  CapacitySchedulerConfiguration csConf=(CapacitySchedulerConfiguration)TestUtils.getComplexConfigurationWithQueueLabels(conf);
  final String A1=CapacitySchedulerConfiguration.ROOT + ".a" + ".a1";
  final String B2=CapacitySchedulerConfiguration.ROOT + ".b" + ".b2";
  csConf.setUserLimit(A1,25);
  csConf.setUserLimit(B2,25);
  YarnConfiguration conf=new YarnConfiguration();
  CapacitySchedulerContext csContext=mock(CapacitySchedulerContext.class);
  when(csContext.getConfiguration()).thenReturn(csConf);
  when(csContext.getConf()).thenReturn(conf);
  when(csContext.getMinimumResourceCapability()).thenReturn(Resources.createResource(GB));
  when(csContext.getMaximumResourceCapability()).thenReturn(Resources.createResource(16 * GB));
  when(csContext.getNonPartitionedQueueComparator()).thenReturn(CapacityScheduler.nonPartitionedQueueComparator);
  when(csContext.getResourceCalculator()).thenReturn(resourceCalculator);
  RMContext rmContext=TestUtils.getMockRMContext();
  RMContext spyRMContext=spy(rmContext);
  when(spyRMContext.getNodeLabelManager()).thenReturn(mgr);
  when(csContext.getRMContext()).thenReturn(spyRMContext);
  mgr.activateNode(NodeId.newInstance("h0",0),Resource.newInstance(160 * GB,16));
  mgr.activateNode(NodeId.newInstance("h1",0),Resource.newInstance(160 * GB,16));
  mgr.activateNode(NodeId.newInstance("h2",0),Resource.newInstance(160 * GB,16));
  Resource clusterResource=Resources.createResource(160 * GB);
  when(csContext.getClusterResource()).thenReturn(clusterResource);
  Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
  CSQueue rootQueue=CapacityScheduler.parseQueue(csContext,csConf,null,"root",queues,queues,TestUtils.spyHook);
  ResourceUsage queueResUsage=rootQueue.getQueueResourceUsage();
  when(csContext.getClusterResourceUsage()).thenReturn(queueResUsage);
  LeafQueue queue=TestLeafQueue.stubLeafQueue((LeafQueue)queues.get("b2"));
  queue.updateClusterResource(clusterResource,new ResourceLimits(clusterResource));
  String rack_0="rack_0";
  FiCaSchedulerNode node_0=TestUtils.getMockNode("h0",rack_0,0,160 * GB);
  FiCaSchedulerNode node_1=TestUtils.getMockNode("h1",rack_0,0,160 * GB);
  final String user_0="user_0";
  final String user_1="user_1";
  RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
  ConcurrentMap<ApplicationId,RMApp> spyApps=spy(new ConcurrentHashMap<ApplicationId,RMApp>());
  RMApp rmApp=mock(RMApp.class);
  ResourceRequest amResourceRequest=mock(ResourceRequest.class);
  Resource amResource=Resources.createResource(0,0);
  when(amResourceRequest.getCapability()).thenReturn(amResource);
  when(rmApp.getAMResourceRequest()).thenReturn(amResourceRequest);
  Mockito.doReturn(rmApp).when(spyApps).get((ApplicationId)Matchers.any());
  when(spyRMContext.getRMApps()).thenReturn(spyApps);
  RMAppAttempt rmAppAttempt=mock(RMAppAttempt.class);
  when(rmApp.getRMAppAttempt((ApplicationAttemptId)Matchers.any())).thenReturn(rmAppAttempt);
  when(rmApp.getCurrentAppAttempt()).thenReturn(rmAppAttempt);
  Mockito.doReturn(rmApp).when(spyApps).get((ApplicationId)Matchers.any());
  Mockito.doReturn(true).when(spyApps).containsKey((ApplicationId)Matchers.any());
  Priority priority_1=TestUtils.createMockPriority(1);
  final ApplicationAttemptId appAttemptId_0_0=TestUtils.getMockApplicationAttemptId(0,0);
  FiCaSchedulerApp app_0_0=new FiCaSchedulerApp(appAttemptId_0_0,user_0,queue,queue.getActiveUsersManager(),spyRMContext);
  queue.submitApplicationAttempt(app_0_0,user_0);
  List<ResourceRequest> app_0_0_requests=new ArrayList<ResourceRequest>();
  app_0_0_requests.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory));
  app_0_0.updateResourceRequests(app_0_0_requests);
  queue.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  Resource expectedHeadroom=Resources.createResource((int)(0.5 * 0.9 * 160) * GB,1);
  assertEquals(expectedHeadroom,app_0_0.getHeadroom());
  final ApplicationAttemptId appAttemptId_0_1=TestUtils.getMockApplicationAttemptId(1,0);
  FiCaSchedulerApp app_0_1=new FiCaSchedulerApp(appAttemptId_0_1,user_0,queue,queue.getActiveUsersManager(),spyRMContext);
  queue.submitApplicationAttempt(app_0_1,user_0);
  List<ResourceRequest> app_0_1_requests=new ArrayList<ResourceRequest>();
  app_0_1_requests.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory));
  app_0_1_requests.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory,"y"));
  app_0_1.updateResourceRequests(app_0_1_requests);
  queue.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  queue.assignContainers(clusterResource,node_1,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  assertEquals(expectedHeadroom,app_0_0.getHeadroom());
  Resource expectedHeadroomWithReqInY=Resources.add(Resources.createResource((int)(0.5 * 160) * GB,1),expectedHeadroom);
  assertEquals(expectedHeadroomWithReqInY,app_0_1.getHeadroom());
  final ApplicationAttemptId appAttemptId_1_0=TestUtils.getMockApplicationAttemptId(2,0);
  FiCaSchedulerApp app_1_0=new FiCaSchedulerApp(appAttemptId_1_0,user_1,queue,queue.getActiveUsersManager(),spyRMContext);
  queue.submitApplicationAttempt(app_1_0,user_1);
  List<ResourceRequest> app_1_0_requests=new ArrayList<ResourceRequest>();
  app_1_0_requests.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory));
  app_1_0_requests.add(TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,2,true,priority_1,recordFactory,"y"));
  app_1_0.updateResourceRequests(app_1_0_requests);
  queue.assignContainers(clusterResource,node_0,new ResourceLimits(clusterResource),SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY);
  expectedHeadroom=Resources.createResource((int)(0.5 * 0.9 * 160* 0.5) * GB,1);
  expectedHeadroomWithReqInY=Resources.add(Resources.createResource((int)(0.5 * 0.5 * 160) * GB,1),expectedHeadroom);
  assertEquals(expectedHeadroom,app_0_0.getHeadroom());
  assertEquals(expectedHeadroomWithReqInY,app_0_1.getHeadroom());
  assertEquals(expectedHeadroomWithReqInY,app_1_0.getHeadroom());
}
