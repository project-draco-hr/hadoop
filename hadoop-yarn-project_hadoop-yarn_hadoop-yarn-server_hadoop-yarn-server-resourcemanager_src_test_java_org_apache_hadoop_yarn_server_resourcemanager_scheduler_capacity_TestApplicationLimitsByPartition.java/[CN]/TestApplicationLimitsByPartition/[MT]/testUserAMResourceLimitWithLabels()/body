{
  final String user_0="user_0";
  final String user_1="user_1";
  simpleNodeLabelMappingToManager();
  CapacitySchedulerConfiguration config=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithQueueLabels(conf);
  final String A1=CapacitySchedulerConfiguration.ROOT + ".a" + ".a1";
  config.setMaximumAMResourcePercentPerPartition(A1,"x",0.4f);
  config.setUserLimit(A1,50);
  MockRM rm1=new MockRM(config){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",10 * GB);
  rm1.registerNode("h2:1234",10 * GB);
  rm1.registerNode("h3:1234",10 * GB);
  RMApp app1=rm1.submitApp(GB,"app",user_0,null,"a1","x");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  am1.allocate("*",1 * GB,15,new ArrayList<ContainerId>(),"");
  RMApp app2=rm1.submitApp(GB,"app",user_1,null,"a1","x");
  MockRM.launchAndRegisterAM(app2,rm1,nm1);
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  LeafQueue leafQueue=(LeafQueue)cs.getQueue("a1");
  Assert.assertNotNull(leafQueue);
  Assert.assertEquals(2,leafQueue.getNumActiveApplications());
  Assert.assertEquals(1,leafQueue.getNumActiveApplications(user_0));
  Assert.assertEquals(0,leafQueue.getNumPendingApplications());
  RMApp app3=rm1.submitApp(GB,"app",user_1,null,"a1","x");
  MockAM am2=MockRM.launchAndRegisterAM(app3,rm1,nm1);
  am2.allocate("*",1 * GB,10,new ArrayList<ContainerId>(),"");
  RMApp pendingApp=rm1.submitApp(GB,"app",user_1,null,"a1","x");
  Assert.assertEquals(3,leafQueue.getNumActiveApplications());
  Assert.assertEquals(1,leafQueue.getNumActiveApplications(user_0));
  Assert.assertEquals(2,leafQueue.getNumActiveApplications(user_1));
  Assert.assertEquals(1,leafQueue.getNumPendingApplications(user_1));
  Assert.assertEquals(1,leafQueue.getNumPendingApplications());
  Assert.assertTrue("AM diagnostics not set properly",pendingApp.getDiagnostics().toString().contains(AMState.INACTIVATED.getDiagnosticMessage()));
  Assert.assertTrue("AM diagnostics not set properly",pendingApp.getDiagnostics().toString().contains(CSAMContainerLaunchDiagnosticsConstants.USER_AM_RESOURCE_LIMIT_EXCEED));
  rm1.close();
}
