{
  simpleNodeLabelMappingToManager();
  CapacitySchedulerConfiguration config=(CapacitySchedulerConfiguration)TestUtils.getConfigurationWithQueueLabels(conf);
  final String A1=CapacitySchedulerConfiguration.ROOT + ".a" + ".a1";
  config.setMaximumApplicationMasterResourcePerQueuePercent(A1,0.2f);
  MockRM rm1=new MockRM(config){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.getRMContext().setNodeLabelManager(mgr);
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",10 * GB);
  rm1.registerNode("h2:1234",10 * GB);
  rm1.registerNode("h3:1234",10 * GB);
  RMApp app1=rm1.submitApp(2 * GB,"app","user",null,"a1","x");
  MockRM.launchAndRegisterAM(app1,rm1,nm1);
  rm1.submitApp(GB,"app","user",null,"a1","x");
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  LeafQueue leafQueue=(LeafQueue)cs.getQueue("a1");
  Assert.assertNotNull(leafQueue);
  Assert.assertEquals(1,leafQueue.getNumActiveApplications());
  Assert.assertEquals(1,leafQueue.getNumPendingApplications());
  rm1.close();
}
