{
  Path TEST_ROOT_DIR=new Path(System.getProperty("test.build.data","test/build/data"));
  String binaryTokenFile=hasScheme ? FileSystem.getLocal(conf).makeQualified(new Path(TEST_ROOT_DIR,"tokenFile")).toString() : FileSystem.getLocal(conf).makeQualified(new Path(TEST_ROOT_DIR,"tokenFile")).toUri().getPath();
  MockFileSystem fs1=createFileSystemForServiceName("service1");
  MockFileSystem fs2=createFileSystemForServiceName("service2");
  MockFileSystem fs3=createFileSystemForServiceName("service3");
  Credentials creds=new Credentials();
  Token<?> token1=fs1.getDelegationToken(renewer);
  Token<?> token2=fs2.getDelegationToken(renewer);
  creds.addToken(token1.getService(),token1);
  creds.addToken(token2.getService(),token2);
  conf.set(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY,binaryTokenFile);
  creds.writeTokenStorageFile(new Path(binaryTokenFile),conf);
  creds=new Credentials();
  Token<?> newerToken1=fs1.getDelegationToken(renewer);
  assertNotSame(newerToken1,token1);
  creds.addToken(newerToken1.getService(),newerToken1);
  checkToken(creds,newerToken1);
  TokenCache.obtainTokensForNamenodesInternal(fs1,creds,conf);
  checkToken(creds,newerToken1,token2);
  TokenCache.obtainTokensForNamenodesInternal(fs2,creds,conf);
  checkToken(creds,newerToken1,token2);
  TokenCache.obtainTokensForNamenodesInternal(fs3,creds,conf);
  Token<?> token3=creds.getToken(new Text(fs3.getCanonicalServiceName()));
  assertTrue(token3 != null);
  checkToken(creds,newerToken1,token2,token3);
  TokenCache.obtainTokensForNamenodesInternal(fs1,creds,conf);
  TokenCache.obtainTokensForNamenodesInternal(fs2,creds,conf);
  TokenCache.obtainTokensForNamenodesInternal(fs3,creds,conf);
  checkToken(creds,newerToken1,token2,token3);
}
