{
  Configuration conf=new Configuration();
  conf.setClass("fs.mockfs.impl",MockFileSystem.class,FileSystem.class);
  URI mockUri=URI.create("mockfs://mock/");
  FileSystem mockFs=((FilterFileSystem)FileSystem.get(mockUri,conf)).getRawFileSystem();
  URI archive=new URI("mockfs://mock/tmp/something.zip#something");
  Path archivePath=new Path(archive);
  URI file=new URI("mockfs://mock/tmp/something.txt#something");
  Path filePath=new Path(file);
  when(mockFs.resolvePath(archivePath)).thenReturn(archivePath);
  when(mockFs.resolvePath(filePath)).thenReturn(filePath);
  DistributedCache.addCacheArchive(archive,conf);
  conf.set(MRJobConfig.CACHE_ARCHIVES_TIMESTAMPS,"10");
  conf.set(MRJobConfig.CACHE_ARCHIVES_SIZES,"10");
  conf.set(MRJobConfig.CACHE_ARCHIVES_VISIBILITIES,"true");
  DistributedCache.addCacheFile(file,conf);
  conf.set(MRJobConfig.CACHE_FILE_TIMESTAMPS,"11");
  conf.set(MRJobConfig.CACHE_FILES_SIZES,"11");
  conf.set(MRJobConfig.CACHE_FILE_VISIBILITIES,"true");
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  MRApps.setupDistributedCache(conf,localResources);
}
