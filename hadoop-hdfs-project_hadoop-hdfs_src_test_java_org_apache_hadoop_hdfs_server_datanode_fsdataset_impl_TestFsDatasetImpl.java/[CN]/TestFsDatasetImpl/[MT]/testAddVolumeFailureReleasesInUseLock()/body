{
  FsDatasetImpl spyDataset=spy(dataset);
  FsVolumeImpl mockVolume=mock(FsVolumeImpl.class);
  File badDir=new File(BASE_DIR,"bad");
  badDir.mkdirs();
  doReturn(mockVolume).when(spyDataset).createFsVolume(anyString(),any(File.class),any(StorageType.class));
  doThrow(new IOException("Failed to getVolumeMap()")).when(mockVolume).getVolumeMap(anyString(),any(ReplicaMap.class),any(RamDiskReplicaLruTracker.class));
  Storage.StorageDirectory sd=createStorageDirectory(badDir);
  sd.lock();
  DataStorage.VolumeBuilder builder=new DataStorage.VolumeBuilder(storage,sd);
  when(storage.prepareVolume(eq(datanode),eq(badDir),Matchers.<List<NamespaceInfo>>any())).thenReturn(builder);
  StorageLocation location=StorageLocation.parse(badDir.toString());
  List<NamespaceInfo> nsInfos=Lists.newArrayList();
  for (  String bpid : BLOCK_POOL_IDS) {
    nsInfos.add(new NamespaceInfo(0,CLUSTER_ID,bpid,1));
  }
  try {
    spyDataset.addVolume(location,nsInfos);
    fail("Expect to throw MultipleIOException");
  }
 catch (  MultipleIOException e) {
  }
  FsDatasetTestUtil.assertFileLockReleased(badDir.toString());
}
