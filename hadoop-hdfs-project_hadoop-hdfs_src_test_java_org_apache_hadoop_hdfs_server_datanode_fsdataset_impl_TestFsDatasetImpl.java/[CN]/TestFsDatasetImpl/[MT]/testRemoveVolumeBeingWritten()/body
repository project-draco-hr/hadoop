{
  final ExtendedBlock eb=new ExtendedBlock(BLOCK_POOL_IDS[0],0);
  final CountDownLatch startFinalizeLatch=new CountDownLatch(1);
  final CountDownLatch brReceivedLatch=new CountDownLatch(1);
class BlockReportThread extends Thread {
    public void run(){
      LOG.info("Getting block report");
      dataset.getBlockReports(eb.getBlockPoolId());
      LOG.info("Successfully received block report");
      brReceivedLatch.countDown();
    }
  }
  final BlockReportThread brt=new BlockReportThread();
class ResponderThread extends Thread {
    public void run(){
      try (ReplicaHandler replica=dataset.createRbw(StorageType.DEFAULT,eb,false)){
        LOG.info("createRbw finished");
        startFinalizeLatch.countDown();
        Thread.sleep(1000);
        dataset.finalizeBlock(eb);
        LOG.info("finalizeBlock finished");
      }
 catch (      Exception e) {
        LOG.warn("Exception caught. This should not affect the test",e);
      }
    }
  }
  ResponderThread res=new ResponderThread();
  res.start();
  startFinalizeLatch.await();
  Set<File> volumesToRemove=new HashSet<>();
  volumesToRemove.add(StorageLocation.parse(dataset.getVolume(eb).getBasePath()).getFile());
  LOG.info("Removing volume " + volumesToRemove);
  brt.start();
  dataset.removeVolumes(volumesToRemove,true);
  LOG.info("Volumes removed");
  brReceivedLatch.await();
}
