{
  final ExtendedBlock eb=new ExtendedBlock(BLOCK_POOL_IDS[0],0);
  final CountDownLatch startFinalizeLatch=new CountDownLatch(1);
  final CountDownLatch blockReportReceivedLatch=new CountDownLatch(1);
  final CountDownLatch volRemoveStartedLatch=new CountDownLatch(1);
  final CountDownLatch volRemoveCompletedLatch=new CountDownLatch(1);
class BlockReportThread extends Thread {
    public void run(){
      try {
        volRemoveStartedLatch.await();
      }
 catch (      Exception e) {
        LOG.info("Unexpected exception when waiting for vol removal:",e);
      }
      LOG.info("Getting block report");
      dataset.getBlockReports(eb.getBlockPoolId());
      LOG.info("Successfully received block report");
      blockReportReceivedLatch.countDown();
    }
  }
class ResponderThread extends Thread {
    public void run(){
      try (ReplicaHandler replica=dataset.createRbw(StorageType.DEFAULT,eb,false)){
        LOG.info("CreateRbw finished");
        startFinalizeLatch.countDown();
        try {
          Thread.sleep(1000);
        }
 catch (        InterruptedException ie) {
          LOG.info("Ignoring ",ie);
        }
        blockReportReceivedLatch.await();
        dataset.finalizeBlock(eb);
        LOG.info("FinalizeBlock finished");
      }
 catch (      Exception e) {
        LOG.warn("Exception caught. This should not affect the test",e);
      }
    }
  }
class VolRemoveThread extends Thread {
    public void run(){
      try {
        Set<File> volumesToRemove=new HashSet<>();
        volumesToRemove.add(StorageLocation.parse(dataset.getVolume(eb).getBasePath()).getFile());
        LOG.info("Removing volume " + volumesToRemove);
        dataset.removeVolumes(volumesToRemove,true);
        volRemoveCompletedLatch.countDown();
        LOG.info("Removed volume " + volumesToRemove);
      }
 catch (      Exception e) {
        LOG.info("Unexpected issue while removing volume: ",e);
        volRemoveCompletedLatch.countDown();
      }
    }
  }
  ResponderThread responderThread=new ResponderThread();
  responderThread.start();
  startFinalizeLatch.await();
  final BlockReportThread blockReportThread=new BlockReportThread();
  blockReportThread.start();
  VolRemoveThread volRemoveThread=new VolRemoveThread();
  volRemoveThread.start();
  Thread.sleep(2000);
  volRemoveStartedLatch.countDown();
  blockReportReceivedLatch.await();
  volRemoveCompletedLatch.await();
}
