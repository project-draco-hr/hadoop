{
  final int numNewVolumes=3;
  final int numExistingVolumes=dataset.getVolumes().size();
  final int totalVolumes=numNewVolumes + numExistingVolumes;
  Set<String> expectedVolumes=new HashSet<String>();
  List<NamespaceInfo> nsInfos=Lists.newArrayList();
  for (  String bpid : BLOCK_POOL_IDS) {
    nsInfos.add(new NamespaceInfo(0,CLUSTER_ID,bpid,1));
  }
  for (int i=0; i < numNewVolumes; i++) {
    String path=BASE_DIR + "/newData" + i;
    String pathUri=new Path(path).toUri().toString();
    expectedVolumes.add(new File(pathUri).toString());
    StorageLocation loc=StorageLocation.parse(pathUri);
    Storage.StorageDirectory sd=createStorageDirectory(new File(path));
    DataStorage.VolumeBuilder builder=new DataStorage.VolumeBuilder(storage,sd);
    when(storage.prepareVolume(eq(datanode),eq(loc.getFile()),anyListOf(NamespaceInfo.class))).thenReturn(builder);
    dataset.addVolume(loc,nsInfos);
  }
  assertEquals(totalVolumes,dataset.getVolumes().size());
  assertEquals(totalVolumes,dataset.storageMap.size());
  Set<String> actualVolumes=new HashSet<String>();
  for (int i=0; i < numNewVolumes; i++) {
    actualVolumes.add(dataset.getVolumes().get(numExistingVolumes + i).getBasePath());
  }
  assertEquals(actualVolumes.size(),expectedVolumes.size());
  assertTrue(actualVolumes.containsAll(expectedVolumes));
}
