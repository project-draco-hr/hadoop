{
  AppContext ctx=mock(AppContext.class);
  AppForTest app=new AppForTest(ctx);
  Task task=getTask(0);
  Map<TaskAttemptId,TaskAttempt> attempts=new HashMap<TaskAttemptId,TaskAttempt>();
  TaskAttempt attempt=mock(TaskAttempt.class);
  TaskAttemptId taId=new TaskAttemptIdPBImpl();
  taId.setId(0);
  taId.setTaskId(task.getID());
  when(attempt.getID()).thenReturn(taId);
  when(attempt.getNodeHttpAddress()).thenReturn("Node address");
  ApplicationId appId=ApplicationIdPBImpl.newInstance(0,5);
  ApplicationAttemptId appAttemptId=ApplicationAttemptIdPBImpl.newInstance(appId,1);
  ContainerId containerId=ContainerIdPBImpl.newInstance(appAttemptId,1);
  when(attempt.getAssignedContainerID()).thenReturn(containerId);
  when(attempt.getAssignedContainerMgrAddress()).thenReturn("assignedContainerMgrAddress");
  when(attempt.getNodeRackName()).thenReturn("nodeRackName");
  when(attempt.getLaunchTime()).thenReturn(100002L);
  when(attempt.getFinishTime()).thenReturn(100012L);
  when(attempt.getShuffleFinishTime()).thenReturn(100010L);
  when(attempt.getSortFinishTime()).thenReturn(100011L);
  when(attempt.getState()).thenReturn(TaskAttemptState.SUCCEEDED);
  attempts.put(taId,attempt);
  when(task.getAttempts()).thenReturn(attempts);
  app.setTask(task);
  Job job=mock(Job.class);
  when(job.getUserName()).thenReturn("User");
  app.setJob(job);
  AttemptsBlockForTest block=new AttemptsBlockForTest(app);
  block.addParameter(AMParams.TASK_TYPE,"r");
  PrintWriter pWriter=new PrintWriter(data);
  Block html=new BlockForTest(new HtmlBlockForTest(),pWriter,0,false);
  block.render(html);
  pWriter.flush();
  assertTrue(data.toString().contains("0 attempt_0_0001_r_000000_0"));
  assertTrue(data.toString().contains("SUCCEEDED"));
  assertTrue(data.toString().contains("_0005_01_000001:attempt_0_0001_r_000000_0:User:"));
  assertTrue(data.toString().contains("100002"));
  assertTrue(data.toString().contains("100010"));
  assertTrue(data.toString().contains("100011"));
  assertTrue(data.toString().contains("100012"));
}
