{
  namesystem=fsn;
  datanodeManager=new DatanodeManager(fsn,conf);
  blocksMap=new BlocksMap(DEFAULT_MAP_LOAD_FACTOR);
  blockplacement=BlockPlacementPolicy.getInstance(conf,namesystem,datanodeManager.getNetworkTopology());
  pendingReplications=new PendingReplicationBlocks(conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY,DFSConfigKeys.DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_DEFAULT) * 1000L);
  this.isBlockTokenEnabled=conf.getBoolean(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY,DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_ENABLE_DEFAULT);
  if (isBlockTokenEnabled) {
    if (isBlockTokenEnabled) {
      this.blockKeyUpdateInterval=conf.getLong(DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_KEY,DFSConfigKeys.DFS_BLOCK_ACCESS_KEY_UPDATE_INTERVAL_DEFAULT) * 60 * 1000L;
      this.blockTokenLifetime=conf.getLong(DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_KEY,DFSConfigKeys.DFS_BLOCK_ACCESS_TOKEN_LIFETIME_DEFAULT) * 60 * 1000L;
    }
    blockTokenSecretManager=new BlockTokenSecretManager(true,blockKeyUpdateInterval,blockTokenLifetime);
  }
  LOG.info("isBlockTokenEnabled=" + isBlockTokenEnabled + " blockKeyUpdateInterval="+ blockKeyUpdateInterval / (60 * 1000) + " min(s), blockTokenLifetime=" + blockTokenLifetime / (60 * 1000) + " min(s)");
  this.maxCorruptFilesReturned=conf.getInt(DFSConfigKeys.DFS_DEFAULT_MAX_CORRUPT_FILES_RETURNED_KEY,DFSConfigKeys.DFS_DEFAULT_MAX_CORRUPT_FILES_RETURNED);
  this.defaultReplication=conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,DFSConfigKeys.DFS_REPLICATION_DEFAULT);
  this.maxReplication=conf.getInt(DFSConfigKeys.DFS_REPLICATION_MAX_KEY,DFSConfigKeys.DFS_REPLICATION_MAX_DEFAULT);
  this.minReplication=conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY,DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_DEFAULT);
  if (minReplication <= 0)   throw new IOException("Unexpected configuration parameters: dfs.namenode.replication.min = " + minReplication + " must be greater than 0");
  if (maxReplication >= (int)Short.MAX_VALUE)   throw new IOException("Unexpected configuration parameters: dfs.replication.max = " + maxReplication + " must be less than "+ (Short.MAX_VALUE));
  if (maxReplication < minReplication)   throw new IOException("Unexpected configuration parameters: dfs.namenode.replication.min = " + minReplication + " must be less than dfs.replication.max = "+ maxReplication);
  this.maxReplicationStreams=conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY,DFSConfigKeys.DFS_NAMENODE_REPLICATION_MAX_STREAMS_DEFAULT);
  this.shouldCheckForEnoughRacks=conf.get(DFSConfigKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY) == null ? false : true;
  this.replicationRecheckInterval=conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_INTERVAL_KEY,DFSConfigKeys.DFS_NAMENODE_REPLICATION_INTERVAL_DEFAULT) * 1000L;
  LOG.info("defaultReplication = " + defaultReplication);
  LOG.info("maxReplication     = " + maxReplication);
  LOG.info("minReplication     = " + minReplication);
  LOG.info("maxReplicationStreams      = " + maxReplicationStreams);
  LOG.info("shouldCheckForEnoughRacks  = " + shouldCheckForEnoughRacks);
  LOG.info("replicationRecheckInterval = " + replicationRecheckInterval);
}
