{
  ApplicationId applicationId=evt.getApplicationId();
  Credentials ts=evt.getCredentials();
  boolean shouldCancelAtEnd=evt.shouldCancelAtEnd();
  if (ts == null) {
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Registering tokens for renewal for:" + " appId = " + applicationId);
  }
  Collection<Token<?>> tokens=ts.getAllTokens();
  long now=System.currentTimeMillis();
  appTokens.put(applicationId,Collections.synchronizedSet(new HashSet<DelegationTokenToRenew>()));
  Set<DelegationTokenToRenew> tokenList=new HashSet<DelegationTokenToRenew>();
  boolean hasHdfsToken=false;
  for (  Token<?> token : tokens) {
    if (token.isManaged()) {
      if (token.getKind().equals(HDFS_DELEGATION_KIND)) {
        LOG.info(applicationId + " found existing hdfs token " + token);
        hasHdfsToken=true;
      }
      if (skipTokenRenewal(token)) {
        continue;
      }
      DelegationTokenToRenew dttr=allTokens.get(token);
      if (dttr == null) {
        dttr=new DelegationTokenToRenew(Arrays.asList(applicationId),token,getConfig(),now,shouldCancelAtEnd,evt.getUser());
        try {
          renewToken(dttr);
        }
 catch (        IOException ioe) {
          if (ioe instanceof SecretManager.InvalidToken && dttr.maxDate < Time.now() && evt instanceof DelegationTokenRenewerAppRecoverEvent && token.getKind().equals(HDFS_DELEGATION_KIND)) {
            LOG.info("Failed to renew hdfs token " + dttr + " on recovery as it expired, requesting new hdfs token for "+ applicationId+ ", user="+ evt.getUser(),ioe);
            requestNewHdfsDelegationTokenAsProxyUser(Arrays.asList(applicationId),evt.getUser(),evt.shouldCancelAtEnd());
            continue;
          }
          throw new IOException("Failed to renew token: " + dttr.token,ioe);
        }
      }
      tokenList.add(dttr);
    }
  }
  if (!tokenList.isEmpty()) {
    for (    DelegationTokenToRenew dtr : tokenList) {
      DelegationTokenToRenew currentDtr=allTokens.putIfAbsent(dtr.token,dtr);
      if (currentDtr != null) {
        currentDtr.referringAppIds.add(applicationId);
        appTokens.get(applicationId).add(currentDtr);
      }
 else {
        appTokens.get(applicationId).add(dtr);
        setTimerForTokenRenewal(dtr);
      }
    }
  }
  if (!hasHdfsToken) {
    requestNewHdfsDelegationTokenAsProxyUser(Arrays.asList(applicationId),evt.getUser(),shouldCancelAtEnd);
  }
}
