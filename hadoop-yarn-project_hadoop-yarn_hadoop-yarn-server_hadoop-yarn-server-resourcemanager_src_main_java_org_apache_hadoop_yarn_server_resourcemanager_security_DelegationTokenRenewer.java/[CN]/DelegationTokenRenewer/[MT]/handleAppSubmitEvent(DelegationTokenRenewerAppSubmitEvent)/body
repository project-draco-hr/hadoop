{
  ApplicationId applicationId=evt.getApplicationId();
  Credentials ts=evt.getCredentials();
  boolean shouldCancelAtEnd=evt.shouldCancelAtEnd();
  if (ts == null) {
    return;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Registering tokens for renewal for:" + " appId = " + applicationId);
  }
  Collection<Token<?>> tokens=ts.getAllTokens();
  long now=System.currentTimeMillis();
  appTokens.put(applicationId,Collections.synchronizedSet(new HashSet<DelegationTokenToRenew>()));
  Set<DelegationTokenToRenew> tokenList=new HashSet<DelegationTokenToRenew>();
  boolean hasHdfsToken=false;
  for (  Token<?> token : tokens) {
    if (token.isManaged()) {
      if (token.getKind().equals(new Text("HDFS_DELEGATION_TOKEN"))) {
        LOG.info(applicationId + " found existing hdfs token " + token);
        hasHdfsToken=true;
      }
      DelegationTokenToRenew dttr=allTokens.get(token);
      if (dttr != null) {
        if (!evt.shouldCancelAtEnd) {
          dttr.shouldCancelAtEnd=evt.shouldCancelAtEnd;
          LOG.info("Set shouldCancelAtEnd=" + shouldCancelAtEnd + " for token "+ dttr.token);
        }
        continue;
      }
      tokenList.add(new DelegationTokenToRenew(applicationId,token,getConfig(),now,shouldCancelAtEnd,evt.getUser()));
    }
  }
  if (!tokenList.isEmpty()) {
    for (    DelegationTokenToRenew dtr : tokenList) {
      try {
        renewToken(dtr);
      }
 catch (      IOException ioe) {
        throw new IOException("Failed to renew token: " + dtr.token,ioe);
      }
    }
    for (    DelegationTokenToRenew dtr : tokenList) {
      appTokens.get(applicationId).add(dtr);
      allTokens.put(dtr.token,dtr);
      setTimerForTokenRenewal(dtr);
    }
  }
  if (!hasHdfsToken) {
    requestNewHdfsDelegationToken(applicationId,evt.getUser(),shouldCancelAtEnd);
  }
}
