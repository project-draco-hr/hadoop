{
  fs.mkdirs(TEST_DIR);
  DistributedFileSystem dfs=(DistributedFileSystem)fs;
  dfs.setQuota(TEST_DIR,NS_QUOTA,DS_QUOTA);
  long expectedSize=3 * BLOCK_SIZE + BLOCK_SIZE / 2;
  DFSTestUtil.createFile(fs,TEST_FILE,expectedSize,(short)1,1L);
  HATestUtil.waitForStandbyToCatchUp(nn0,nn1);
  ContentSummary cs=nn1.getRpcServer().getContentSummary(TEST_DIR_STR);
  assertEquals(NS_QUOTA,cs.getQuota());
  assertEquals(DS_QUOTA,cs.getSpaceQuota());
  assertEquals(expectedSize,cs.getSpaceConsumed());
  assertEquals(1,cs.getDirectoryCount());
  assertEquals(1,cs.getFileCount());
  FSDataOutputStream stm=fs.append(TEST_FILE);
  try {
    byte[] data=new byte[(int)(BLOCK_SIZE * 3 / 2)];
    stm.write(data);
    expectedSize+=data.length;
  }
  finally {
    IOUtils.closeStream(stm);
  }
  HATestUtil.waitForStandbyToCatchUp(nn0,nn1);
  cs=nn1.getRpcServer().getContentSummary(TEST_DIR_STR);
  assertEquals(NS_QUOTA,cs.getQuota());
  assertEquals(DS_QUOTA,cs.getSpaceQuota());
  assertEquals(expectedSize,cs.getSpaceConsumed());
  assertEquals(1,cs.getDirectoryCount());
  assertEquals(1,cs.getFileCount());
  fs.delete(TEST_FILE,true);
  expectedSize=0;
  HATestUtil.waitForStandbyToCatchUp(nn0,nn1);
  cs=nn1.getRpcServer().getContentSummary(TEST_DIR_STR);
  assertEquals(NS_QUOTA,cs.getQuota());
  assertEquals(DS_QUOTA,cs.getSpaceQuota());
  assertEquals(expectedSize,cs.getSpaceConsumed());
  assertEquals(1,cs.getDirectoryCount());
  assertEquals(0,cs.getFileCount());
}
