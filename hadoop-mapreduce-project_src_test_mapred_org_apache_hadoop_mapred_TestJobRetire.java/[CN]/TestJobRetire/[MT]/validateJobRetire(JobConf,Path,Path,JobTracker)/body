{
  RunningJob rj=UtilsForTests.runJob(jobConf,inDir,outDir,0,0);
  rj.waitForCompletion();
  assertTrue(rj.isSuccessful());
  JobID id=rj.getID();
  waitTillRetire(id,jobtracker);
  assertTrue("History url not set",rj.getHistoryUrl() != null && rj.getHistoryUrl().length() > 0);
  assertNotNull("Job is not in cache",jobtracker.getJobStatus(id));
  String name=jobtracker.getLocalJobFilePath(id);
  File file=new File(name);
  assertFalse("JobConf file not deleted",file.exists());
  final String JOBDETAILS="jobdetails";
  final String JOBCONF="jobconf";
  final String JOBTASKS="jobtasks";
  final String TASKSTATS="taskstats";
  final String TASKDETAILS="taskdetails";
  String jobUrlStr=rj.getTrackingURL();
  URL jobUrl=new URL(jobUrlStr);
  URL jobConfUrl=new URL(jobUrlStr.replace(JOBDETAILS,JOBCONF));
  URL jobTasksUrl=new URL(jobUrlStr.replace(JOBDETAILS,JOBTASKS) + "&type=map&pagenum=1");
  verifyRedirection(jobConfUrl);
  verifyRedirection(jobTasksUrl);
  verifyRedirection(jobUrl);
  String jobTrackerUrlStr=jobUrlStr.substring(0,jobUrlStr.indexOf(JOBDETAILS));
  Path logFile=new Path(jobtracker.getJobHistory().getHistoryFilePath(id));
  JobHistoryParser.JobInfo jobInfo=JSPUtil.getJobInfo(logFile,logFile.getFileSystem(jobConf),jobtracker);
  for (  TaskID tid : jobInfo.getAllTasks().keySet()) {
    URL taskDetailsUrl=new URL(jobTrackerUrlStr + TASKDETAILS + ".jsp?tipid="+ tid);
    verifyRedirection(taskDetailsUrl);
  }
  for (  JobHistoryParser.TaskInfo task : jobInfo.getAllTasks().values()) {
    for (    org.apache.hadoop.mapreduce.TaskAttemptID attemptid : task.getAllTaskAttempts().keySet()) {
      URL taskstats=new URL(jobTrackerUrlStr + TASKSTATS + ".jsp?attemptid="+ attemptid);
      verifyRedirection(taskstats);
    }
  }
  return id;
}
