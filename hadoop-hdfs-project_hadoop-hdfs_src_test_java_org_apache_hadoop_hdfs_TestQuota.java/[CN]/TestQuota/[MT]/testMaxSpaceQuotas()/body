{
  final Configuration conf=new HdfsConfiguration();
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
  try {
    final FileSystem fs=cluster.getFileSystem();
    assertTrue("Not a HDFS: " + fs.getUri(),fs instanceof DistributedFileSystem);
    final DistributedFileSystem dfs=(DistributedFileSystem)fs;
    final Path testFolder=new Path("/testFolder");
    assertTrue(dfs.mkdirs(testFolder));
    dfs.setQuota(testFolder,Long.MAX_VALUE - 1,10);
    ContentSummary c=dfs.getContentSummary(testFolder);
    compareQuotaUsage(c,dfs,testFolder);
    assertTrue("Quota not set properly",c.getQuota() == Long.MAX_VALUE - 1);
    dfs.setQuota(testFolder,10,Long.MAX_VALUE - 1);
    c=dfs.getContentSummary(testFolder);
    compareQuotaUsage(c,dfs,testFolder);
    assertTrue("Quota not set properly",c.getSpaceQuota() == Long.MAX_VALUE - 1);
    dfs.setQuota(testFolder,Long.MAX_VALUE,10);
    c=dfs.getContentSummary(testFolder);
    compareQuotaUsage(c,dfs,testFolder);
    assertTrue("Quota should not have changed",c.getQuota() == 10);
    dfs.setQuota(testFolder,10,Long.MAX_VALUE);
    c=dfs.getContentSummary(testFolder);
    compareQuotaUsage(c,dfs,testFolder);
    assertTrue("Quota should not have changed",c.getSpaceQuota() == 10);
    try {
      dfs.setQuota(testFolder,Long.MAX_VALUE + 1,10);
      fail("Exception not thrown");
    }
 catch (    IllegalArgumentException e) {
    }
    try {
      dfs.setQuota(testFolder,10,Long.MAX_VALUE + 1);
      fail("Exception not thrown");
    }
 catch (    IllegalArgumentException e) {
    }
  }
  finally {
    cluster.shutdown();
  }
}
