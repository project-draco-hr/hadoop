{
  NodeStatus remoteNodeStatus=request.getNodeStatus();
  NodeId nodeId=remoteNodeStatus.getNodeId();
  if (!this.nodesListManager.isValidNode(nodeId.getHost()) && !isNodeInDecommissioning(nodeId)) {
    String message="Disallowed NodeManager nodeId: " + nodeId + " hostname: "+ nodeId.getHost();
    LOG.info(message);
    return YarnServerBuilderUtils.newNodeHeartbeatResponse(NodeAction.SHUTDOWN,message);
  }
  RMNode rmNode=this.rmContext.getRMNodes().get(nodeId);
  if (rmNode == null) {
    String message="Node not found resyncing " + remoteNodeStatus.getNodeId();
    LOG.info(message);
    return YarnServerBuilderUtils.newNodeHeartbeatResponse(NodeAction.RESYNC,message);
  }
  this.nmLivelinessMonitor.receivedPing(nodeId);
  NodeHeartbeatResponse lastNodeHeartbeatResponse=rmNode.getLastNodeHeartBeatResponse();
  if (remoteNodeStatus.getResponseId() + 1 == lastNodeHeartbeatResponse.getResponseId()) {
    LOG.info("Received duplicate heartbeat from node " + rmNode.getNodeAddress() + " responseId="+ remoteNodeStatus.getResponseId());
    return lastNodeHeartbeatResponse;
  }
 else   if (remoteNodeStatus.getResponseId() + 1 < lastNodeHeartbeatResponse.getResponseId()) {
    String message="Too far behind rm response id:" + lastNodeHeartbeatResponse.getResponseId() + " nm response id:"+ remoteNodeStatus.getResponseId();
    LOG.info(message);
    this.rmContext.getDispatcher().getEventHandler().handle(new RMNodeEvent(nodeId,RMNodeEventType.REBOOTING));
    return YarnServerBuilderUtils.newNodeHeartbeatResponse(NodeAction.RESYNC,message);
  }
  NodeHeartbeatResponse nodeHeartBeatResponse=YarnServerBuilderUtils.newNodeHeartbeatResponse(lastNodeHeartbeatResponse.getResponseId() + 1,NodeAction.NORMAL,null,null,null,null,nextHeartBeatInterval);
  rmNode.updateNodeHeartbeatResponseForCleanup(nodeHeartBeatResponse);
  rmNode.updateNodeHeartbeatResponseForContainersDecreasing(nodeHeartBeatResponse);
  populateKeys(request,nodeHeartBeatResponse);
  ConcurrentMap<ApplicationId,ByteBuffer> systemCredentials=rmContext.getSystemCredentialsForApps();
  if (!systemCredentials.isEmpty()) {
    nodeHeartBeatResponse.setSystemCredentialsForApps(systemCredentials);
  }
  RMNodeStatusEvent nodeStatusEvent=new RMNodeStatusEvent(nodeId,remoteNodeStatus,nodeHeartBeatResponse);
  if (request.getLogAggregationReportsForApps() != null && !request.getLogAggregationReportsForApps().isEmpty()) {
    nodeStatusEvent.setLogAggregationReportsForApps(request.getLogAggregationReportsForApps());
  }
  this.rmContext.getDispatcher().getEventHandler().handle(nodeStatusEvent);
  if (isDistributedNodeLabelsConf && request.getNodeLabels() != null) {
    try {
      updateNodeLabelsFromNMReport(NodeLabelsUtils.convertToStringSet(request.getNodeLabels()),nodeId);
      nodeHeartBeatResponse.setAreNodeLabelsAcceptedByRM(true);
    }
 catch (    IOException ex) {
      nodeHeartBeatResponse.setDiagnosticsMessage(ex.getMessage());
      nodeHeartBeatResponse.setAreNodeLabelsAcceptedByRM(false);
    }
  }
  return nodeHeartBeatResponse;
}
