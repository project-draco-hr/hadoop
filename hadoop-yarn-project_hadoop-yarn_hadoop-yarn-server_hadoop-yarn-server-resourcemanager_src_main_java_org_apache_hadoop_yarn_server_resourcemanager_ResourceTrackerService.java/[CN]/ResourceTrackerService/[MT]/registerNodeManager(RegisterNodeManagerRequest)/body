{
  NodeId nodeId=request.getNodeId();
  String host=nodeId.getHost();
  int cmPort=nodeId.getPort();
  int httpPort=request.getHttpPort();
  Resource capability=request.getResource();
  String nodeManagerVersion=request.getNMVersion();
  RegisterNodeManagerResponse response=recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);
  if (!minimumNodeManagerVersion.equals("NONE")) {
    if (minimumNodeManagerVersion.equals("EqualToRM")) {
      minimumNodeManagerVersion=YarnVersionInfo.getVersion();
    }
    if ((nodeManagerVersion == null) || (VersionUtil.compareVersions(nodeManagerVersion,minimumNodeManagerVersion)) < 0) {
      String message="Disallowed NodeManager Version " + nodeManagerVersion + ", is less than the minimum version "+ minimumNodeManagerVersion+ " sending SHUTDOWN signal to "+ "NodeManager.";
      LOG.info(message);
      response.setDiagnosticsMessage(message);
      response.setNodeAction(NodeAction.SHUTDOWN);
      return response;
    }
  }
  if (!this.nodesListManager.isValidNode(host) && !isNodeInDecommissioning(nodeId)) {
    String message="Disallowed NodeManager from  " + host + ", Sending SHUTDOWN signal to the NodeManager.";
    LOG.info(message);
    response.setDiagnosticsMessage(message);
    response.setNodeAction(NodeAction.SHUTDOWN);
    return response;
  }
  String nid=nodeId.toString();
  Resource dynamicLoadCapability=loadNodeResourceFromDRConfiguration(nid);
  if (dynamicLoadCapability != null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Resource for node: " + nid + " is adjusted from: "+ capability+ " to: "+ dynamicLoadCapability+ " due to settings in dynamic-resources.xml.");
    }
    capability=dynamicLoadCapability;
    response.setResource(capability);
  }
  if (capability.getMemorySize() < minAllocMb || capability.getVirtualCores() < minAllocVcores) {
    String message="NodeManager from  " + host + " doesn't satisfy minimum allocations, Sending SHUTDOWN"+ " signal to the NodeManager.";
    LOG.info(message);
    response.setDiagnosticsMessage(message);
    response.setNodeAction(NodeAction.SHUTDOWN);
    return response;
  }
  response.setContainerTokenMasterKey(containerTokenSecretManager.getCurrentKey());
  response.setNMTokenMasterKey(nmTokenSecretManager.getCurrentKey());
  RMNode rmNode=new RMNodeImpl(nodeId,rmContext,host,cmPort,httpPort,resolve(host),capability,nodeManagerVersion);
  RMNode oldNode=this.rmContext.getRMNodes().putIfAbsent(nodeId,rmNode);
  if (oldNode == null) {
    this.rmContext.getDispatcher().getEventHandler().handle(new RMNodeStartedEvent(nodeId,request.getNMContainerStatuses(),request.getRunningApplications()));
  }
 else {
    LOG.info("Reconnect from the node at: " + host);
    this.nmLivelinessMonitor.unregister(nodeId);
    oldNode.resetLastNodeHeartBeatResponse();
    this.rmContext.getDispatcher().getEventHandler().handle(new RMNodeReconnectEvent(nodeId,rmNode,request.getRunningApplications(),request.getNMContainerStatuses()));
  }
  this.nmTokenSecretManager.removeNodeKey(nodeId);
  this.nmLivelinessMonitor.register(nodeId);
  if (!rmContext.isWorkPreservingRecoveryEnabled()) {
    if (!request.getNMContainerStatuses().isEmpty()) {
      LOG.info("received container statuses on node manager register :" + request.getNMContainerStatuses());
      for (      NMContainerStatus status : request.getNMContainerStatuses()) {
        handleNMContainerStatus(status,nodeId);
      }
    }
  }
  Set<String> nodeLabels=NodeLabelsUtils.convertToStringSet(request.getNodeLabels());
  if (isDistributedNodeLabelsConf && nodeLabels != null) {
    try {
      updateNodeLabelsFromNMReport(nodeLabels,nodeId);
      response.setAreNodeLabelsAcceptedByRM(true);
    }
 catch (    IOException ex) {
      response.setDiagnosticsMessage(ex.getMessage());
      response.setAreNodeLabelsAcceptedByRM(false);
    }
  }
 else   if (isDelegatedCentralizedNodeLabelsConf) {
    this.rmContext.getRMDelegatedNodeLabelsUpdater().updateNodeLabels(nodeId);
  }
  StringBuilder message=new StringBuilder();
  message.append("NodeManager from node ").append(host).append("(cmPort: ").append(cmPort).append(" httpPort: ");
  message.append(httpPort).append(") ").append("registered with capability: ").append(capability);
  message.append(", assigned nodeId ").append(nodeId);
  if (response.getAreNodeLabelsAcceptedByRM()) {
    message.append(", node labels { ").append(StringUtils.join(",",nodeLabels) + " } ");
  }
  LOG.info(message.toString());
  response.setNodeAction(NodeAction.NORMAL);
  response.setRMIdentifier(ResourceManager.getClusterTimeStamp());
  response.setRMVersion(YarnVersionInfo.getVersion());
  return response;
}
