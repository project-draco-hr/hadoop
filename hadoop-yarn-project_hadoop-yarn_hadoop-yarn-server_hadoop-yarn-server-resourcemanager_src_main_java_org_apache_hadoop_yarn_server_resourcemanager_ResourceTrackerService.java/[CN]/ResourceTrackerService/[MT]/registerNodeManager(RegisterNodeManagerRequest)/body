{
  NodeId nodeId=request.getNodeId();
  String host=nodeId.getHost();
  int cmPort=nodeId.getPort();
  int httpPort=request.getHttpPort();
  Resource capability=request.getResource();
  RegisterNodeManagerResponse response=recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);
  if (!this.nodesListManager.isValidNode(host)) {
    String message="Disallowed NodeManager from  " + host + ", Sending SHUTDOWN signal to the NodeManager.";
    LOG.info(message);
    response.setDiagnosticsMessage(message);
    response.setNodeAction(NodeAction.SHUTDOWN);
    return response;
  }
  if (capability.getMemory() < minAllocMb || capability.getVirtualCores() < minAllocVcores) {
    String message="NodeManager from  " + host + " doesn't satisfy minimum allocations, Sending SHUTDOWN"+ " signal to the NodeManager.";
    LOG.info(message);
    response.setDiagnosticsMessage(message);
    response.setNodeAction(NodeAction.SHUTDOWN);
    return response;
  }
  response.setContainerTokenMasterKey(containerTokenSecretManager.getCurrentKey());
  response.setNMTokenMasterKey(nmTokenSecretManager.getCurrentKey());
  RMNode rmNode=new RMNodeImpl(nodeId,rmContext,host,cmPort,httpPort,resolve(host),capability);
  RMNode oldNode=this.rmContext.getRMNodes().putIfAbsent(nodeId,rmNode);
  if (oldNode == null) {
    this.rmContext.getDispatcher().getEventHandler().handle(new RMNodeEvent(nodeId,RMNodeEventType.STARTED));
  }
 else {
    LOG.info("Reconnect from the node at: " + host);
    this.nmLivelinessMonitor.unregister(nodeId);
    this.rmContext.getDispatcher().getEventHandler().handle(new RMNodeReconnectEvent(nodeId,rmNode));
  }
  this.nmTokenSecretManager.removeNodeKey(nodeId);
  this.nmLivelinessMonitor.register(nodeId);
  String message="NodeManager from node " + host + "(cmPort: "+ cmPort+ " httpPort: "+ httpPort+ ") "+ "registered with capability: "+ capability+ ", assigned nodeId "+ nodeId;
  LOG.info(message);
  response.setNodeAction(NodeAction.NORMAL);
  response.setRMIdentifier(ResourceManager.clusterTimeStamp);
  return response;
}
