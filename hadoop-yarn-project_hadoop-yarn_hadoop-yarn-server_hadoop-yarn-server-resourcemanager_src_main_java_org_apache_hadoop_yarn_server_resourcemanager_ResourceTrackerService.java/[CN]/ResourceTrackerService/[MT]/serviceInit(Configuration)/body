{
  resourceTrackerAddress=conf.getSocketAddr(YarnConfiguration.RM_BIND_HOST,YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);
  RackResolver.init(conf);
  nextHeartBeatInterval=conf.getLong(YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS,YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS);
  if (nextHeartBeatInterval <= 0) {
    throw new YarnRuntimeException("Invalid Configuration. " + YarnConfiguration.RM_NM_HEARTBEAT_INTERVAL_MS + " should be larger than 0.");
  }
  minAllocMb=conf.getInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);
  minAllocVcores=conf.getInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES,YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_VCORES);
  minimumNodeManagerVersion=conf.get(YarnConfiguration.RM_NODEMANAGER_MINIMUM_VERSION,YarnConfiguration.DEFAULT_RM_NODEMANAGER_MINIMUM_VERSION);
  String nodeLabelConfigurationType=conf.get(YarnConfiguration.NODELABEL_CONFIGURATION_TYPE,YarnConfiguration.DEFAULT_NODELABEL_CONFIGURATION_TYPE);
  isDistributesNodeLabelsConf=YarnConfiguration.DISTRIBUTED_NODELABEL_CONFIGURATION_TYPE.equals(nodeLabelConfigurationType);
  super.serviceInit(conf);
}
