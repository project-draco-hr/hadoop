{
  CreateOpts.Perms permOpt=CreateOpts.getOpt(CreateOpts.Perms.class,opts);
  FsPermission umask=FsPermission.getUMask(fs.getConf());
  FsPermission permission=(permOpt != null) ? permOpt.getValue() : FsPermission.getFileDefault().applyUMask(umask);
  permission=permission.applyUMask(umask);
  boolean overwrite=createFlag.contains(CreateFlag.OVERWRITE);
  int bufferSize=fs.getConf().getInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY,CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_DEFAULT);
  CreateOpts.BufferSize bufOpt=CreateOpts.getOpt(CreateOpts.BufferSize.class,opts);
  bufferSize=(bufOpt != null) ? bufOpt.getValue() : bufferSize;
  short replication=fs.getDefaultReplication(f);
  CreateOpts.ReplicationFactor repOpt=CreateOpts.getOpt(CreateOpts.ReplicationFactor.class,opts);
  replication=(repOpt != null) ? repOpt.getValue() : replication;
  long blockSize=fs.getDefaultBlockSize(f);
  CreateOpts.BlockSize blockOpt=CreateOpts.getOpt(CreateOpts.BlockSize.class,opts);
  blockSize=(blockOpt != null) ? blockOpt.getValue() : blockSize;
  Progressable progress=null;
  CreateOpts.Progress progressOpt=CreateOpts.getOpt(CreateOpts.Progress.class,opts);
  progress=(progressOpt != null) ? progressOpt.getValue() : progress;
  return fs.create(f,permission,overwrite,bufferSize,replication,blockSize,progress);
}
