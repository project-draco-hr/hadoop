{
  final Configuration conf=new Configuration();
  conf.set(DFSConfigKeys.DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY,"alloweduser");
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build();
  cluster.waitActive();
  final DataNode dn=cluster.getDataNodes().get(0);
  FileSystem fs=cluster.getFileSystem();
  try {
    DFSTestUtil.createFile(fs,new Path("/tmp/x"),16,(short)1,23);
    UserGroupInformation aUgi=UserGroupInformation.createRemoteUser("alloweduser");
    LocatedBlocks lb=cluster.getNameNode().getRpcServer().getBlockLocations("/tmp/x",0,16);
    ExtendedBlock blk=new ExtendedBlock(lb.get(0).getBlock());
    Token<BlockTokenIdentifier> token=lb.get(0).getBlockToken();
    final DatanodeInfo dnInfo=lb.get(0).getLocations()[0];
    ClientDatanodeProtocol proxy=aUgi.doAs(new PrivilegedExceptionAction<ClientDatanodeProtocol>(){
      @Override public ClientDatanodeProtocol run() throws Exception {
        return DFSUtil.createClientDatanodeProtocolProxy(dnInfo,conf,60000);
      }
    }
);
    BlockLocalPathInfo blpi=proxy.getBlockLocalPathInfo(blk,token);
    Assert.assertEquals(dn.data.getBlockLocalPathInfo(blk).getBlockPath(),blpi.getBlockPath());
    UserGroupInformation bUgi=UserGroupInformation.createRemoteUser("notalloweduser");
    proxy=bUgi.doAs(new PrivilegedExceptionAction<ClientDatanodeProtocol>(){
      @Override public ClientDatanodeProtocol run() throws Exception {
        return DFSUtil.createClientDatanodeProtocolProxy(dnInfo,conf,60000);
      }
    }
);
    try {
      proxy.getBlockLocalPathInfo(blk,token);
      Assert.fail("The call should have failed as " + bUgi.getShortUserName() + " is not allowed to call getBlockLocalPathInfo");
    }
 catch (    IOException ex) {
      Assert.assertTrue(ex.getMessage().contains("not allowed to call getBlockLocalPathInfo"));
    }
  }
  finally {
    fs.close();
    cluster.shutdown();
  }
}
