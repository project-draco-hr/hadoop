{
  if (args.length != 3) {
    System.out.println("Usage: test shortcircuit checksum threadCount");
    System.exit(1);
  }
  boolean shortcircuit=Boolean.valueOf(args[0]);
  boolean checksum=Boolean.valueOf(args[1]);
  int threadCount=Integer.valueOf(args[2]);
  final Configuration conf=new Configuration();
  conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY,shortcircuit);
  conf.set(DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY,"/tmp/TestShortCircuitLocalRead._PORT");
  conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY,checksum);
  int fileSize=1000 * blockSize + 100;
  final byte[] dataToWrite=AppendTestUtil.randomBytes(seed,fileSize);
  final Path file1=new Path("filelocal.dat");
  final FileSystem fs=FileSystem.get(conf);
  FSDataOutputStream stm=createFile(fs,file1,1);
  stm.write(dataToWrite);
  stm.close();
  long start=Time.now();
  final int iteration=20;
  Thread[] threads=new Thread[threadCount];
  for (int i=0; i < threadCount; i++) {
    threads[i]=new Thread(){
      @Override public void run(){
        for (int i=0; i < iteration; i++) {
          try {
            String user=getCurrentUser();
            checkFileContent(fs.getUri(),file1,dataToWrite,0,user,conf,true);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
;
  }
  for (int i=0; i < threadCount; i++) {
    threads[i].start();
  }
  for (int i=0; i < threadCount; i++) {
    threads[i].join();
  }
  long end=Time.now();
  System.out.println("Iteration " + iteration + " took "+ (end - start));
  fs.delete(file1,false);
}
