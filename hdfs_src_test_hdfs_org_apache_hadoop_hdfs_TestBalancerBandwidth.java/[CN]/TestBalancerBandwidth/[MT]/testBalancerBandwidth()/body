{
  conf.setLong(DFSConfigKeys.DFS_DATANODE_BALANCE_BANDWIDTHPERSEC_KEY,DEFAULT_BANDWIDTH);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_OF_DATANODES).build();
  try {
    cluster.waitActive();
    DistributedFileSystem fs=(DistributedFileSystem)cluster.getFileSystem();
    ArrayList<DataNode> datanodes=cluster.getDataNodes();
    assertEquals(DEFAULT_BANDWIDTH,(long)datanodes.get(0).getBalancerBandwidth());
    assertEquals(DEFAULT_BANDWIDTH,(long)datanodes.get(1).getBalancerBandwidth());
    long newBandwidth=12 * DEFAULT_BANDWIDTH;
    fs.setBalancerBandwidth(newBandwidth);
    try {
      Thread.sleep(5000);
    }
 catch (    Exception e) {
    }
    assertEquals(newBandwidth,(long)datanodes.get(0).getBalancerBandwidth());
    assertEquals(newBandwidth,(long)datanodes.get(1).getBalancerBandwidth());
    fs.setBalancerBandwidth(0);
    try {
      Thread.sleep(5000);
    }
 catch (    Exception e) {
    }
    assertEquals(newBandwidth,(long)datanodes.get(0).getBalancerBandwidth());
    assertEquals(newBandwidth,(long)datanodes.get(1).getBalancerBandwidth());
  }
  finally {
    cluster.shutdown();
  }
}
