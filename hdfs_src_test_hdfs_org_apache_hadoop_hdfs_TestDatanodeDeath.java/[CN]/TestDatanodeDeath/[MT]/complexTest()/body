{
  Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,2000);
  conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,2);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY,2);
  conf.setInt(DFSConfigKeys.DFS_CLIENT_SOCKET_TIMEOUT_KEY,5000);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build();
  cluster.waitActive();
  FileSystem fs=cluster.getFileSystem();
  Modify modThread=null;
  try {
    workload=new Workload[numThreads];
    for (int i=0; i < numThreads; i++) {
      workload[i]=new Workload(AppendTestUtil.nextLong(),fs,i,numberOfFiles,replication,0);
      workload[i].start();
    }
    modThread=new Modify(conf,cluster);
    modThread.start();
    for (int i=0; i < numThreads; i++) {
      try {
        System.out.println("Waiting for thread " + i + " to complete...");
        workload[i].join();
        if (i >= numThreads / 2) {
          modThread.close();
        }
      }
 catch (      InterruptedException e) {
        i--;
      }
    }
  }
  finally {
    if (modThread != null) {
      modThread.close();
      try {
        modThread.join();
      }
 catch (      InterruptedException e) {
      }
    }
    fs.close();
    cluster.shutdown();
  }
}
