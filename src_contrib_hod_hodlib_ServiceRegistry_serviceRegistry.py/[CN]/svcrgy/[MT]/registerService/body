def registerService(self, userid, job, host, name, type, dict):
    'Method thats called upon by\n        the ringmaster to register to the\n        the service registry'
    lock = self.__serviceDictLock
    lock.acquire()
    try:
        self.logs['main'].debug(('Registering %s.%s.%s.%s.%s...' % (userid, job, host, name, type)))
        id = ('%s.%s' % (name, type))
        if (userid in self.__serviceDict):
            if (job in self.__serviceDict[userid]):
                if (host in self.__serviceDict[userid][job]):
                    self.__serviceDict[userid][job][host].append({id: dict, })
                else:
                    self.__serviceDict[userid][job][host] = [{id: dict, }]
            else:
                self.__serviceDict[userid][job] = {host: [{id: dict, }], }
        else:
            self.__serviceDict[userid] = {job: {host: [{id: dict, }], }, }
    finally:
        lock.release()
    return True
