{
  UserGroupInformation ugi=mock(UserGroupInformation.class);
  UserGroupInformation superUser=mock(UserGroupInformation.class);
  when(ugi.getRealUser()).thenReturn(superUser);
  when(superUser.getShortUserName()).thenReturn("superuser");
  when(superUser.getUserName()).thenReturn("superuser");
  when(ugi.getGroupNames()).thenReturn(new String[]{"group3"});
  when(ugi.getUserName()).thenReturn("regularUser");
  conf.set("hadoop.proxyuser.superuser.groups","group1,group2");
  conf.set("hadoop.proxyuser.superuser.hosts","127.0.0.1");
  String[] args=new String[1];
  args[0]="-refreshSuperUserGroupsConfiguration";
  hsAdminClient.run(args);
  Throwable th=null;
  try {
    ProxyUsers.authorize(ugi,"127.0.0.1",conf);
  }
 catch (  Exception e) {
    th=e;
  }
  assertTrue(th instanceof AuthorizationException);
  conf.set("hadoop.proxyuser.superuser.groups","group1,group2,group3");
  th=null;
  try {
    ProxyUsers.authorize(ugi,"127.0.0.1",conf);
  }
 catch (  Exception e) {
    th=e;
  }
  assertTrue(th instanceof AuthorizationException);
  hsAdminClient.run(args);
  th=null;
  try {
    ProxyUsers.authorize(ugi,"127.0.0.1",conf);
  }
 catch (  Exception e) {
    th=e;
  }
  assertNull("Unexpected exception thrown: " + th,th);
}
