{
  dispatcher=new DrainDispatcher();
  dispatcher.init(null);
  localizerBus=mock(EventHandler.class);
  launcherBus=mock(EventHandler.class);
  monitorBus=mock(EventHandler.class);
  auxBus=mock(EventHandler.class);
  dispatcher.register(LocalizationEventType.class,localizerBus);
  dispatcher.register(ContainersLauncherEventType.class,launcherBus);
  dispatcher.register(ContainersMonitorEventType.class,monitorBus);
  dispatcher.register(AuxServicesEventType.class,auxBus);
  this.user=user;
  ctxt=mock(ContainerLaunchContext.class);
  cId=BuilderUtils.newContainerId(appId,1,timestamp,id);
  when(ctxt.getUser()).thenReturn(this.user);
  when(ctxt.getContainerId()).thenReturn(cId);
  Resource resource=BuilderUtils.newResource(1024);
  when(ctxt.getResource()).thenReturn(resource);
  if (withLocalRes) {
    Random r=new Random();
    long seed=r.nextLong();
    r.setSeed(seed);
    System.out.println("WrappedContainerLocalResource seed: " + seed);
    localResources=createLocalResources(r);
  }
 else {
    localResources=Collections.<String,LocalResource>emptyMap();
  }
  when(ctxt.getAllLocalResources()).thenReturn(localResources);
  if (withServiceData) {
    Random r=new Random();
    long seed=r.nextLong();
    r.setSeed(seed);
    System.out.println("ServiceData seed: " + seed);
    serviceData=createServiceData(r);
  }
 else {
    serviceData=Collections.<String,ByteBuffer>emptyMap();
  }
  when(ctxt.getAllServiceData()).thenReturn(serviceData);
  c=newContainer(dispatcher,ctxt);
  dispatcher.start();
}
