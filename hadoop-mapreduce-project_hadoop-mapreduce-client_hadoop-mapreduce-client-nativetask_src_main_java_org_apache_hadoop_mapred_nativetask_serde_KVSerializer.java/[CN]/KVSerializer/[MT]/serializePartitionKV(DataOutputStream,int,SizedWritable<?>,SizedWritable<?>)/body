{
  if (key.length == SizedWritable.INVALID_LENGTH || value.length == SizedWritable.INVALID_LENGTH) {
    updateLength(key,value);
  }
  final int keyLength=key.length;
  final int valueLength=value.length;
  int bytesWritten=KV_HEAD_LENGTH + keyLength + valueLength;
  if (partitionId != -1) {
    bytesWritten+=Constants.SIZEOF_PARTITION_LENGTH;
  }
  if (out.hasUnFlushedData() && out.shortOfSpace(bytesWritten)) {
    out.flush();
  }
  if (partitionId != -1) {
    out.writeInt(partitionId);
  }
  out.writeInt(keyLength);
  out.writeInt(valueLength);
  keySerializer.serialize(key.v,out);
  valueSerializer.serialize(value.v,out);
  return bytesWritten;
}
