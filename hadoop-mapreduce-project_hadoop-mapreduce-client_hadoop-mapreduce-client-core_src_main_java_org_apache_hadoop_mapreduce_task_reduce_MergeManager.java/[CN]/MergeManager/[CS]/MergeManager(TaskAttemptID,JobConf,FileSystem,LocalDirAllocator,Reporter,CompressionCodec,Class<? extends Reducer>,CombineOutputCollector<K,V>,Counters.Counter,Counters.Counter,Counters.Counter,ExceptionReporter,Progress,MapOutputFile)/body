{
  this.reduceId=reduceId;
  this.jobConf=jobConf;
  this.localDirAllocator=localDirAllocator;
  this.exceptionReporter=exceptionReporter;
  this.reporter=reporter;
  this.codec=codec;
  this.combinerClass=combinerClass;
  this.combineCollector=combineCollector;
  this.reduceCombineInputCounter=reduceCombineInputCounter;
  this.spilledRecordsCounter=spilledRecordsCounter;
  this.mergedMapOutputsCounter=mergedMapOutputsCounter;
  this.mapOutputFile=mapOutputFile;
  this.mapOutputFile.setConf(jobConf);
  this.localFS=localFS;
  this.rfs=((LocalFileSystem)localFS).getRaw();
  final float maxInMemCopyUse=jobConf.getFloat(MRJobConfig.SHUFFLE_INPUT_BUFFER_PERCENT,0.90f);
  if (maxInMemCopyUse > 1.0 || maxInMemCopyUse < 0.0) {
    throw new IllegalArgumentException("Invalid value for " + MRJobConfig.SHUFFLE_INPUT_BUFFER_PERCENT + ": "+ maxInMemCopyUse);
  }
  this.memoryLimit=(long)(jobConf.getLong(MRJobConfig.REDUCE_MEMORY_TOTAL_BYTES,Math.min(Runtime.getRuntime().maxMemory(),Integer.MAX_VALUE)) * maxInMemCopyUse);
  this.ioSortFactor=jobConf.getInt(MRJobConfig.IO_SORT_FACTOR,100);
  this.maxSingleShuffleLimit=(long)(memoryLimit * MAX_SINGLE_SHUFFLE_SEGMENT_FRACTION);
  this.memToMemMergeOutputsThreshold=jobConf.getInt(MRJobConfig.REDUCE_MEMTOMEM_THRESHOLD,ioSortFactor);
  this.mergeThreshold=(long)(this.memoryLimit * jobConf.getFloat(MRJobConfig.SHUFFLE_MERGE_EPRCENT,0.90f));
  LOG.info("MergerManager: memoryLimit=" + memoryLimit + ", "+ "maxSingleShuffleLimit="+ maxSingleShuffleLimit+ ", "+ "mergeThreshold="+ mergeThreshold+ ", "+ "ioSortFactor="+ ioSortFactor+ ", "+ "memToMemMergeOutputsThreshold="+ memToMemMergeOutputsThreshold);
  if (this.maxSingleShuffleLimit >= this.mergeThreshold) {
    throw new RuntimeException("Invlaid configuration: " + "maxSingleShuffleLimit should be less than mergeThreshold" + "maxSingleShuffleLimit: " + this.maxSingleShuffleLimit + "mergeThreshold: "+ this.mergeThreshold);
  }
  boolean allowMemToMemMerge=jobConf.getBoolean(MRJobConfig.REDUCE_MEMTOMEM_ENABLED,false);
  if (allowMemToMemMerge) {
    this.memToMemMerger=new IntermediateMemoryToMemoryMerger(this,memToMemMergeOutputsThreshold);
    this.memToMemMerger.start();
  }
 else {
    this.memToMemMerger=null;
  }
  this.inMemoryMerger=new InMemoryMerger(this);
  this.inMemoryMerger.start();
  this.onDiskMerger=new OnDiskMerger(this);
  this.onDiskMerger.start();
  this.mergePhase=mergePhase;
}
