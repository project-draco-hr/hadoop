{
  LOG.debug("Initializing the GangliaSink for Ganglia metrics.");
  this.conf=conf;
  if (conf.getString("slave.host.name") != null) {
    hostName=conf.getString("slave.host.name");
  }
 else {
    try {
      hostName=DNS.getDefaultHost(conf.getString("dfs.datanode.dns.interface","default"),conf.getString("dfs.datanode.dns.nameserver","default"));
    }
 catch (    UnknownHostException uhe) {
      LOG.error(uhe);
      hostName="UNKNOWN.example.com";
    }
  }
  metricsServers=Servers.parse(conf.getString(SERVERS_PROPERTY),DEFAULT_PORT);
  multicastEnabled=conf.getBoolean(MULTICAST_ENABLED_PROPERTY,DEFAULT_MULTICAST_ENABLED);
  multicastTtl=conf.getInt(MULTICAST_TTL_PROPERTY,DEFAULT_MULTICAST_TTL);
  gangliaConfMap=new HashMap<String,GangliaConf>();
  loadGangliaConf(GangliaConfType.units);
  loadGangliaConf(GangliaConfType.tmax);
  loadGangliaConf(GangliaConfType.dmax);
  loadGangliaConf(GangliaConfType.slope);
  try {
    if (multicastEnabled) {
      LOG.info("Enabling multicast for Ganglia with TTL " + multicastTtl);
      datagramSocket=new MulticastSocket();
      ((MulticastSocket)datagramSocket).setTimeToLive(multicastTtl);
    }
 else {
      datagramSocket=new DatagramSocket();
    }
  }
 catch (  IOException e) {
    LOG.error(e);
  }
  supportSparseMetrics=conf.getBoolean(SUPPORT_SPARSE_METRICS_PROPERTY,SUPPORT_SPARSE_METRICS_DEFAULT);
}
