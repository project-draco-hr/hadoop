{
  if (r <= Modular.MAX_SQRT_LONG) {
    r*=r;
    if (r >= n)     r%=n;
  }
 else {
    final int HALF=(63 - Long.numberOfLeadingZeros(n)) >> 1;
    final int FULL=HALF << 1;
    final long ONES=(1 << HALF) - 1;
    final long high=r >>> HALF;
    final long low=r&=ONES;
    r*=r;
    if (r >= n)     r%=n;
    if (high != 0) {
      long s=high * high;
      if (s >= n)       s%=n;
      for (int i=0; i < FULL; i++)       if ((s<<=1) >= n)       s-=n;
      if (low == 0)       r=s;
 else {
        long t=high * low;
        if (t >= n)         t%=n;
        for (int i=-1; i < HALF; i++)         if ((t<<=1) >= n)         t-=n;
        r+=s;
        if (r >= n)         r-=n;
        r+=t;
        if (r >= n)         r-=n;
      }
    }
  }
  return r;
}
