{
  if (children != null && !children.isEmpty()) {
    float totalCapacity=0.0f;
    for (    JobQueueInfo qs : children) {
      List<JobQueueInfo> childQueues=qs.getChildren();
      if (childQueues != null && childQueues.size() > 0) {
        AbstractQueue cq=new ContainerQueue(parent,loadContext(qs.getProperties(),qs.getQueueName(),schedConfig));
        totalCapacity+=cq.qsc.getCapacityPercent();
        LOG.info("Created a ContainerQueue " + qs.getQueueName() + " and added it as a child to "+ parent.getName());
        createHierarchy(cq,childQueues,schedConfig);
      }
 else {
        AbstractQueue jq=new JobQueue(parent,loadContext(qs.getProperties(),qs.getQueueName(),schedConfig));
        totalCapacity+=jq.qsc.getCapacityPercent();
        LOG.info("Created a jobQueue " + qs.getQueueName() + " and added it as a child to "+ parent.getName());
      }
    }
    if (totalCapacity > 100.0) {
      StringBuilder childQueueNames=new StringBuilder();
      for (      JobQueueInfo child : children) {
        childQueueNames.append(child.getQueueName()).append(",");
      }
      throw new IllegalArgumentException(String.format(TOTAL_CAPACITY_OVERFLOWN_MSG,childQueueNames.toString().substring(0,childQueueNames.toString().length() - 1),Float.valueOf(totalCapacity)));
    }
  }
}
