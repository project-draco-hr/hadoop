{
  try {
    startFlag.await();
    if (Thread.currentThread().isInterrupted()) {
      return;
    }
    LOG.info("START STRESS @ " + System.currentTimeMillis());
    while (!Thread.currentThread().isInterrupted()) {
      lock.lock();
      try {
        while (loadStatus.overloaded()) {
          try {
            condUnderloaded.await();
          }
 catch (          InterruptedException ie) {
            return;
          }
        }
        while (!loadStatus.overloaded()) {
          try {
            final JobStory job=getNextJobFiltered();
            if (null == job) {
              return;
            }
            submitter.add(jobCreator.createGridmixJob(conf,0L,job,scratch,userResolver.getTargetUgi(UserGroupInformation.createRemoteUser(job.getUser())),sequence.getAndIncrement()));
            loadStatus.mapSlotsBackfill-=calcEffectiveIncompleteMapTasks(loadStatus.mapSlotCapacity,job.getNumberMaps(),0.0f);
            loadStatus.reduceSlotsBackfill-=calcEffectiveIncompleteReduceTasks(loadStatus.reduceSlotCapacity,job.getNumberReduces(),0.0f);
            --loadStatus.numJobsBackfill;
          }
 catch (          IOException e) {
            LOG.error("Error while submitting the job ",e);
            error=e;
            return;
          }
        }
      }
  finally {
        lock.unlock();
      }
    }
  }
 catch (  InterruptedException e) {
    return;
  }
 finally {
    IOUtils.cleanup(null,jobProducer);
  }
}
