{
  host.penalize();
  int failures=1;
  if (failureCounts.containsKey(mapId)) {
    IntWritable x=failureCounts.get(mapId);
    x.set(x.get() + 1);
    failures=x.get();
  }
 else {
    failureCounts.put(mapId,new IntWritable(1));
  }
  String hostname=host.getHostName();
  boolean hostFail=hostFailures.get(hostname).get() > getMaxHostFailures() ? true : false;
  if (failures >= abortFailureLimit) {
    try {
      throw new IOException(failures + " failures downloading " + mapId);
    }
 catch (    IOException ie) {
      reporter.reportException(ie);
    }
  }
  checkAndInformJobTracker(failures,mapId,readError,connectExcpt,hostFail);
  checkReducerHealth();
  long delay=(long)(INITIAL_PENALTY * Math.pow(PENALTY_GROWTH_RATE,failures));
  if (delay > maxDelay) {
    delay=maxDelay;
  }
  penalties.add(new Penalty(host,delay));
  failedShuffleCounter.increment(1);
}
