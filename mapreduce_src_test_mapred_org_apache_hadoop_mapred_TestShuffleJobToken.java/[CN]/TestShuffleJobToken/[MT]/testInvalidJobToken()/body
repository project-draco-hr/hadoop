{
  URL url=getMapOutputURL(baseUrl.toString());
  String enc_str=SecureShuffleUtils.buildMsgFrom(url);
  URLConnection connectionGood=url.openConnection();
  TaskTracker tt=new TaskTracker();
  JobTokenSecretManager jtSecretManager=new JobTokenSecretManager();
  JobTokenIdentifier identifier=new JobTokenIdentifier(new Text(JOB_ID));
  Token<JobTokenIdentifier> jt=new Token<JobTokenIdentifier>(identifier,jtSecretManager);
  SecretKey tokenSecret=JobTokenSecretManager.createSecretKey(jt.getPassword());
  addJobToken(tt,JOB_ID,jt);
  server.setAttribute("task.tracker",tt);
  String urlHashGood=SecureShuffleUtils.generateHash(enc_str.getBytes(),tokenSecret);
  JobTokenIdentifier badIdentifier=new JobTokenIdentifier(new Text(BAD_JOB_ID));
  Token<JobTokenIdentifier> badToken=new Token<JobTokenIdentifier>(badIdentifier,jtSecretManager);
  SecretKey badSecret=JobTokenSecretManager.createSecretKey(badToken.getPassword());
  String urlHashBad=SecureShuffleUtils.generateHash(enc_str.getBytes(),badSecret);
  connectionGood.addRequestProperty(SecureShuffleUtils.HTTP_HEADER_URL_HASH,urlHashGood);
  try {
    connectionGood.getInputStream();
  }
 catch (  IOException ie) {
    String msg=ie.getLocalizedMessage();
    if (msg.contains("Server returned HTTP response code: 401 for URL:")) {
      fail("securtity failure with valid urlHash:" + ie);
    }
    System.out.println("valid urlhash passed validation");
  }
  URLConnection connectionBad=url.openConnection();
  connectionBad.addRequestProperty(SecureShuffleUtils.HTTP_HEADER_URL_HASH,urlHashBad);
  try {
    connectionBad.getInputStream();
    fail("Connection should've failed because of invalid urlHash");
  }
 catch (  IOException ie) {
    String msg=ie.getLocalizedMessage();
    if (!msg.contains("Server returned HTTP response code: 401 for URL:")) {
      fail("connection failed with other then validation error:" + ie);
    }
    System.out.println("validation worked, failed with:" + ie);
  }
}
