{
  String id="container_01_01";
  String path="test-path/" + id;
  int defaultVCores=8;
  Configuration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,true);
  int cpuPerc=75;
  conf.setInt(YarnConfiguration.NM_RESOURCE_PERCENTAGE_PHYSICAL_CPU_LIMIT,cpuPerc);
  cGroupsCpuResourceHandler.bootstrap(plugin,conf);
  verify(mockCGroupsHandler,times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU,"",CGroupsHandler.CGROUP_CPU_PERIOD_US,String.valueOf("333333"));
  verify(mockCGroupsHandler,times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU,"",CGroupsHandler.CGROUP_CPU_QUOTA_US,String.valueOf(CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US));
  float yarnCores=(cpuPerc * numProcessors) / 100;
  int[] containerVCores={2,4};
  for (  int cVcores : containerVCores) {
    ContainerId mockContainerId=mock(ContainerId.class);
    when(mockContainerId.toString()).thenReturn(id);
    Container mockContainer=mock(Container.class);
    when(mockContainer.getContainerId()).thenReturn(mockContainerId);
    when(mockCGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.CPU,id)).thenReturn(path);
    when(mockContainer.getResource()).thenReturn(Resource.newInstance(1024,cVcores));
    when(mockCGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.CPU,id)).thenReturn(path);
    float share=(cVcores * yarnCores) / defaultVCores;
    int quotaUS;
    int periodUS;
    if (share > 1.0f) {
      quotaUS=CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US;
      periodUS=(int)((float)CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US / share);
    }
 else {
      quotaUS=(int)(CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US * share);
      periodUS=CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US;
    }
    cGroupsCpuResourceHandler.preStart(mockContainer);
    verify(mockCGroupsHandler,times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU,id,CGroupsHandler.CGROUP_CPU_SHARES,String.valueOf(CGroupsCpuResourceHandlerImpl.CPU_DEFAULT_WEIGHT * cVcores));
    verify(mockCGroupsHandler,times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU,id,CGroupsHandler.CGROUP_CPU_PERIOD_US,String.valueOf(periodUS));
    verify(mockCGroupsHandler,times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU,id,CGroupsHandler.CGROUP_CPU_QUOTA_US,String.valueOf(quotaUS));
  }
}
