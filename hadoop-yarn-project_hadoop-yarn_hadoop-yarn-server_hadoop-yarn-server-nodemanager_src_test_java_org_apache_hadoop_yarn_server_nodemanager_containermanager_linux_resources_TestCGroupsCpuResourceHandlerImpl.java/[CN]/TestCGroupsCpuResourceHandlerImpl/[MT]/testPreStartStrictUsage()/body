{
  String id="container_01_01";
  String path="test-path/" + id;
  ContainerId mockContainerId=mock(ContainerId.class);
  when(mockContainerId.toString()).thenReturn(id);
  Container mockContainer=mock(Container.class);
  when(mockContainer.getContainerId()).thenReturn(mockContainerId);
  when(mockCGroupsHandler.getPathForCGroupTasks(CGroupsHandler.CGroupController.CPU,id)).thenReturn(path);
  when(mockContainer.getResource()).thenReturn(Resource.newInstance(1024,1));
  Configuration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.NM_LINUX_CONTAINER_CGROUPS_STRICT_RESOURCE_USAGE,true);
  cGroupsCpuResourceHandler.bootstrap(plugin,conf);
  int defaultVCores=8;
  float share=(float)numProcessors / (float)defaultVCores;
  List<PrivilegedOperation> ret=cGroupsCpuResourceHandler.preStart(mockContainer);
  verify(mockCGroupsHandler,times(1)).createCGroup(CGroupsHandler.CGroupController.CPU,id);
  verify(mockCGroupsHandler,times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU,id,CGroupsHandler.CGROUP_CPU_SHARES,String.valueOf(CGroupsCpuResourceHandlerImpl.CPU_DEFAULT_WEIGHT));
  verify(mockCGroupsHandler,times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU,id,CGroupsHandler.CGROUP_CPU_PERIOD_US,String.valueOf(CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US));
  verify(mockCGroupsHandler,times(1)).updateCGroupParam(CGroupsHandler.CGroupController.CPU,id,CGroupsHandler.CGROUP_CPU_QUOTA_US,String.valueOf((int)(CGroupsCpuResourceHandlerImpl.MAX_QUOTA_US * share)));
  Assert.assertNotNull(ret);
  Assert.assertEquals(1,ret.size());
  PrivilegedOperation op=ret.get(0);
  Assert.assertEquals(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,op.getOperationType());
  List<String> args=op.getArguments();
  Assert.assertEquals(1,args.size());
  Assert.assertEquals(PrivilegedOperation.CGROUP_ARG_PREFIX + path,args.get(0));
}
