{
  LOG.info("Test started");
  LOG.info("Max split count           = " + MAX_SPLIT_COUNT);
  LOG.info("Split count increment     = " + SPLIT_COUNT_INCR);
  LOG.info("Max bytes per file        = " + MAX_BYTES);
  LOG.info("Max number of files       = " + MAX_NUM_FILES);
  LOG.info("Number of files increment = " + NUM_FILES_INCR);
  MultiFileInputFormat<Text,Text> format=new DummyMultiFileInputFormat();
  FileSystem fs=FileSystem.getLocal(job);
  for (int numFiles=1; numFiles < MAX_NUM_FILES; numFiles+=(NUM_FILES_INCR / 2) + rand.nextInt(NUM_FILES_INCR / 2)) {
    Path dir=initFiles(fs,numFiles,-1);
    BitSet bits=new BitSet(numFiles);
    for (int i=1; i < MAX_SPLIT_COUNT; i+=rand.nextInt(SPLIT_COUNT_INCR) + 1) {
      LOG.info("Running for Num Files=" + numFiles + ", split count="+ i);
      MultiFileSplit[] splits=(MultiFileSplit[])format.getSplits(job,i);
      bits.clear();
      for (      MultiFileSplit split : splits) {
        long splitLength=0;
        for (        Path p : split.getPaths()) {
          long length=fs.getContentSummary(p).getLength();
          assertEquals(length,lengths.get(p.getName()).longValue());
          splitLength+=length;
          String name=p.getName();
          int index=Integer.parseInt(name.substring(name.lastIndexOf("file_") + 5));
          assertFalse(bits.get(index));
          bits.set(index);
        }
        assertEquals(splitLength,split.getLength());
      }
    }
    assertEquals(bits.cardinality(),numFiles);
    fs.delete(dir,true);
  }
  LOG.info("Test Finished");
}
