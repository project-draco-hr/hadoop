{
  SftpATTRS attr=sftpFile.getAttrs();
  long length=attr.getSize();
  boolean isDir=attr.isDir();
  boolean isLink=attr.isLink();
  if (isLink) {
    String link=parentPath.toUri().getPath() + "/" + sftpFile.getFilename();
    try {
      link=channel.realpath(link);
      Path linkParent=new Path("/",link);
      FileStatus fstat=getFileStatus(channel,linkParent);
      isDir=fstat.isDirectory();
      length=fstat.getLen();
    }
 catch (    Exception e) {
      throw new IOException(e);
    }
  }
  int blockReplication=1;
  long blockSize=DEFAULT_BLOCK_SIZE;
  long modTime=attr.getMTime() * 1000;
  long accessTime=0;
  FsPermission permission=getPermissions(sftpFile);
  String user=Integer.toString(attr.getUId());
  String group=Integer.toString(attr.getGId());
  Path filePath=new Path(parentPath,sftpFile.getFilename());
  return new FileStatus(length,isDir,blockReplication,blockSize,modTime,accessTime,permission,user,group,filePath.makeQualified(this.getUri(),this.getWorkingDirectory()));
}
