{
  List<FileOperation> ops=new ArrayList<FileOperation>();
  Path logpath=null;
  boolean isIgnoreFailures=false;
  try {
    for (int idx=0; idx < args.length; idx++) {
      if ("-f".equals(args[idx])) {
        if (++idx == args.length) {
          System.out.println("urilist_uri not specified");
          System.out.println(USAGE);
          return -1;
        }
        ops.addAll(fetchList(jobconf,new Path(args[idx])));
      }
 else       if (Option.IGNORE_FAILURES.cmd.equals(args[idx])) {
        isIgnoreFailures=true;
      }
 else       if ("-log".equals(args[idx])) {
        if (++idx == args.length) {
          System.out.println("logdir not specified");
          System.out.println(USAGE);
          return -1;
        }
        logpath=new Path(args[idx]);
      }
 else       if ('-' == args[idx].codePointAt(0)) {
        System.out.println("Invalid switch " + args[idx]);
        System.out.println(USAGE);
        ToolRunner.printGenericCommandUsage(System.out);
        return -1;
      }
 else {
        ops.add(new FileOperation(args[idx]));
      }
    }
    if (ops.isEmpty()) {
      throw new IllegalStateException("Operation is empty");
    }
    LOG.info("ops=" + ops);
    LOG.info("isIgnoreFailures=" + isIgnoreFailures);
    jobconf.setBoolean(Option.IGNORE_FAILURES.propertyname,isIgnoreFailures);
    check(jobconf,ops);
    try {
      if (setup(ops,logpath)) {
        JobClient.runJob(jobconf);
      }
    }
  finally {
      try {
        if (logpath == null) {
          final Path logdir=FileOutputFormat.getOutputPath(jobconf);
          if (logdir != null) {
            logdir.getFileSystem(jobconf).delete(logdir,true);
          }
        }
      }
  finally {
        final String jobdir=jobconf.get(JOB_DIR_LABEL);
        if (jobdir != null) {
          final Path jobpath=new Path(jobdir);
          jobpath.getFileSystem(jobconf).delete(jobpath,true);
        }
      }
    }
  }
 catch (  DuplicationException e) {
    LOG.error("Input error:",e);
    return DuplicationException.ERROR_CODE;
  }
catch (  Exception e) {
    LOG.error(NAME + " failed: ",e);
    System.out.println(USAGE);
    ToolRunner.printGenericCommandUsage(System.out);
    return -1;
  }
  return 0;
}
