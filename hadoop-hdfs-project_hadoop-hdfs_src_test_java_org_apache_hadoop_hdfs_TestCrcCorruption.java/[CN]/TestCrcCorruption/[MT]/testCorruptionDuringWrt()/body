{
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(10).build();
    cluster.waitActive();
    FileSystem fs=cluster.getFileSystem();
    Path file=new Path("/test_corruption_file");
    FSDataOutputStream out=fs.create(file,true,8192,(short)3,(long)(128 * 1024 * 1024));
    byte[] data=new byte[65536];
    for (int i=0; i < 65536; i++) {
      data[i]=(byte)(i % 256);
    }
    for (int i=0; i < 5; i++) {
      out.write(data,0,65535);
    }
    out.hflush();
    Mockito.when(faultInjector.corruptPacket()).thenReturn(true,false);
    Mockito.when(faultInjector.uncorruptPacket()).thenReturn(true,false);
    for (int i=0; i < 5; i++) {
      out.write(data,0,65535);
    }
    out.close();
    FSDataInputStream in=fs.open(file);
    for (int c; (c=in.read()) != -1; )     ;
    in.close();
    out=fs.create(file,true,8192,(short)3,(long)(128 * 1024 * 1024));
    Mockito.when(faultInjector.corruptPacket()).thenReturn(true,false);
    Mockito.when(faultInjector.uncorruptPacket()).thenReturn(false);
    try {
      for (int i=0; i < 5; i++) {
        out.write(data,0,65535);
      }
      out.close();
      fail("Write did not fail");
    }
 catch (    IOException ioe) {
      DFSClient.LOG.info("Got expected exception",ioe);
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
    Mockito.when(faultInjector.corruptPacket()).thenReturn(false);
    Mockito.when(faultInjector.uncorruptPacket()).thenReturn(false);
  }
}
