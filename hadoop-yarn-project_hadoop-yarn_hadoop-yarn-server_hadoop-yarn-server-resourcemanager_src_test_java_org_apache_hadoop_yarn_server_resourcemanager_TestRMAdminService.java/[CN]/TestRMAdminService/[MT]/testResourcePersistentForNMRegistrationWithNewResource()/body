{
  configuration.set(YarnConfiguration.RM_CONFIGURATION_PROVIDER_CLASS,"org.apache.hadoop.yarn.FileSystemBasedConfigurationProvider");
  uploadDefaultConfiguration();
  try {
    rm=new MockRM(configuration);
    rm.init(configuration);
    rm.start();
    rm.registerNode("h1:1234",5120);
  }
 catch (  Exception ex) {
    fail("Should not get any exceptions");
  }
  NodeId nid=NodeId.fromString("h1:1234");
  RMNode ni=rm.getRMContext().getRMNodes().get(nid);
  Resource resource=ni.getTotalCapability();
  Assert.assertEquals("<memory:5120, vCores:5>",resource.toString());
  DynamicResourceConfiguration drConf=new DynamicResourceConfiguration();
  drConf.set("yarn.resource.dynamic.nodes","h1:1234");
  drConf.set("yarn.resource.dynamic.h1:1234.vcores","4");
  drConf.set("yarn.resource.dynamic.h1:1234.memory","4096");
  uploadConfiguration(drConf,"dynamic-resources.xml");
  rm.adminService.refreshNodesResources(RefreshNodesResourcesRequest.newInstance());
  try {
    rm.registerNode("h1:1234",8192,8);
  }
 catch (  Exception ex) {
    fail("Should not get any exceptions");
  }
  RMNode niAfter=rm.getRMContext().getRMNodes().get(nid);
  Resource resourceAfter=niAfter.getTotalCapability();
  Assert.assertEquals("<memory:4096, vCores:4>",resourceAfter.toString());
  deleteOnRemoteFileSystem("dynamic-resources.xml");
  DynamicResourceConfiguration emptyDRConf=new DynamicResourceConfiguration();
  uploadConfiguration(emptyDRConf,"dynamic-resources.xml");
  rm.adminService.refreshNodesResources(RefreshNodesResourcesRequest.newInstance());
  try {
    rm.registerNode("h1:1234",8192,8);
  }
 catch (  Exception ex) {
    fail("Should not get any exceptions");
  }
  niAfter=rm.getRMContext().getRMNodes().get(nid);
  resourceAfter=niAfter.getTotalCapability();
  Assert.assertEquals("<memory:8192, vCores:8>",resourceAfter.toString());
}
