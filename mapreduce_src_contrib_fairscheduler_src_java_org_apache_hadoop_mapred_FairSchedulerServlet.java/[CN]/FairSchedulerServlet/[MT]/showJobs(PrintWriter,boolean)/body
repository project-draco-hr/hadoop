{
  out.print("<h2>Running Jobs</h2>\n");
  out.print("<table border=\"2\" cellpadding=\"5\" cellspacing=\"2\">\n");
  int colsPerTaskType=advancedView ? 4 : 3;
  out.printf("<tr><th rowspan=2>Submitted</th>" + "<th rowspan=2>JobID</th>" + "<th rowspan=2>User</th>"+ "<th rowspan=2>Name</th>"+ "<th rowspan=2>Pool</th>"+ "<th rowspan=2>Priority</th>"+ "<th colspan=%d>Map Tasks</th>"+ "<th colspan=%d>Reduce Tasks</th>",colsPerTaskType,colsPerTaskType);
  out.print("</tr><tr>\n");
  out.print("<th>Finished</th><th>Running</th><th>Fair Share</th>" + (advancedView ? "<th>Weight</th>" : ""));
  out.print("<th>Finished</th><th>Running</th><th>Fair Share</th>" + (advancedView ? "<th>Weight</th>" : ""));
  out.print("</tr>\n");
synchronized (jobTracker) {
    Collection<JobInProgress> runningJobs=getInitedJobs();
synchronized (scheduler) {
      for (      JobInProgress job : runningJobs) {
        JobProfile profile=job.getProfile();
        JobInfo info=scheduler.infos.get(job);
        if (info == null) {
          info=new JobInfo(null,null);
        }
        out.print("<tr>\n");
        out.printf("<td>%s</td>\n",DATE_FORMAT.format(new Date(job.getStartTime())));
        out.printf("<td><a href=\"jobdetails.jsp?jobid=%s\">%s</a></td>",profile.getJobID(),profile.getJobID());
        out.printf("<td>%s</td>\n",profile.getUser());
        out.printf("<td>%s</td>\n",profile.getJobName());
        if (JSPUtil.privateActionsAllowed(jobTracker.conf)) {
          out.printf("<td>%s</td>\n",generateSelect(scheduler.getPoolManager().getPoolNames(),scheduler.getPoolManager().getPoolName(job),"/scheduler?setPool=<CHOICE>&jobid=" + profile.getJobID() + (advancedView ? "&advanced" : "")));
          out.printf("<td>%s</td>\n",generateSelect(Arrays.asList(new String[]{"VERY_LOW","LOW","NORMAL","HIGH","VERY_HIGH"}),job.getPriority().toString(),"/scheduler?setPriority=<CHOICE>&jobid=" + profile.getJobID() + (advancedView ? "&advanced" : "")));
        }
 else {
          out.printf("<td>%s</td>\n",scheduler.getPoolManager().getPoolName(job));
          out.printf("<td>%s</td>\n",job.getPriority().toString());
        }
        Pool pool=scheduler.getPoolManager().getPool(job);
        String mapShare=(pool.getSchedulingMode() == SchedulingMode.FAIR) ? String.format("%.1f",info.mapSchedulable.getFairShare()) : "NA";
        out.printf("<td>%d / %d</td><td>%d</td><td>%s</td>\n",job.finishedMaps(),job.desiredMaps(),info.mapSchedulable.getRunningTasks(),mapShare);
        if (advancedView) {
          out.printf("<td>%.1f</td>\n",info.mapSchedulable.getWeight());
        }
        String reduceShare=(pool.getSchedulingMode() == SchedulingMode.FAIR) ? String.format("%.1f",info.reduceSchedulable.getFairShare()) : "NA";
        out.printf("<td>%d / %d</td><td>%d</td><td>%s</td>\n",job.finishedReduces(),job.desiredReduces(),info.reduceSchedulable.getRunningTasks(),reduceShare);
        if (advancedView) {
          out.printf("<td>%.1f</td>\n",info.reduceSchedulable.getWeight());
        }
        out.print("</tr>\n");
      }
    }
  }
  out.print("</table>\n");
}
