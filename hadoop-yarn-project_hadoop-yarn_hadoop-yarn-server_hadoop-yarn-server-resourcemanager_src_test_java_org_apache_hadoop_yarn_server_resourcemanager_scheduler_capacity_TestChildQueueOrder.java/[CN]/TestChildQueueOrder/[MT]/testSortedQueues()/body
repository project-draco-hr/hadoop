{
  setupSortedQueues(csConf);
  Map<String,CSQueue> queues=new HashMap<String,CSQueue>();
  CSQueue root=CapacityScheduler.parseQueue(csContext,csConf,null,CapacitySchedulerConfiguration.ROOT,queues,queues,TestUtils.spyHook);
  final int memoryPerNode=10;
  final int coresPerNode=16;
  final int numNodes=1;
  FiCaSchedulerNode node_0=TestUtils.getMockNode("host_0",DEFAULT_RACK,0,memoryPerNode * GB);
  doNothing().when(node_0).releaseContainer(any(Container.class));
  final Resource clusterResource=Resources.createResource(numNodes * (memoryPerNode * GB),numNodes * coresPerNode);
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  CSQueue a=queues.get(A);
  CSQueue b=queues.get(B);
  CSQueue c=queues.get(C);
  CSQueue d=queues.get(D);
  final String user_0="user_0";
  FiCaSchedulerApp app_0=getMockApplication(0,user_0);
  doReturn(true).when(app_0).containerCompleted(any(RMContainer.class),any(ContainerStatus.class),any(RMContainerEventType.class));
  Priority priority=TestUtils.createMockPriority(1);
  ContainerAllocationExpirer expirer=mock(ContainerAllocationExpirer.class);
  DrainDispatcher drainDispatcher=new DrainDispatcher();
  RMApplicationHistoryWriter writer=mock(RMApplicationHistoryWriter.class);
  SystemMetricsPublisher publisher=mock(SystemMetricsPublisher.class);
  RMContext rmContext=mock(RMContext.class);
  when(rmContext.getContainerAllocationExpirer()).thenReturn(expirer);
  when(rmContext.getDispatcher()).thenReturn(drainDispatcher);
  when(rmContext.getRMApplicationHistoryWriter()).thenReturn(writer);
  when(rmContext.getSystemMetricsPublisher()).thenReturn(publisher);
  ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(app_0.getApplicationId(),1);
  ContainerId containerId=BuilderUtils.newContainerId(appAttemptId,1);
  Container container=TestUtils.getMockContainer(containerId,node_0.getNodeID(),Resources.createResource(1 * GB),priority);
  RMContainer rmContainer=new RMContainerImpl(container,appAttemptId,node_0.getNodeID(),"user",rmContext);
  stubQueueAllocation(a,clusterResource,node_0,1 * GB);
  stubQueueAllocation(b,clusterResource,node_0,0 * GB);
  stubQueueAllocation(c,clusterResource,node_0,0 * GB);
  stubQueueAllocation(d,clusterResource,node_0,0 * GB);
  root.assignContainers(clusterResource,node_0,false,new ResourceLimits(clusterResource));
  for (int i=0; i < 2; i++) {
    stubQueueAllocation(a,clusterResource,node_0,0 * GB);
    stubQueueAllocation(b,clusterResource,node_0,1 * GB);
    stubQueueAllocation(c,clusterResource,node_0,0 * GB);
    stubQueueAllocation(d,clusterResource,node_0,0 * GB);
    root.assignContainers(clusterResource,node_0,false,new ResourceLimits(clusterResource));
  }
  for (int i=0; i < 3; i++) {
    stubQueueAllocation(a,clusterResource,node_0,0 * GB);
    stubQueueAllocation(b,clusterResource,node_0,0 * GB);
    stubQueueAllocation(c,clusterResource,node_0,1 * GB);
    stubQueueAllocation(d,clusterResource,node_0,0 * GB);
    root.assignContainers(clusterResource,node_0,false,new ResourceLimits(clusterResource));
  }
  for (int i=0; i < 4; i++) {
    stubQueueAllocation(a,clusterResource,node_0,0 * GB);
    stubQueueAllocation(b,clusterResource,node_0,0 * GB);
    stubQueueAllocation(c,clusterResource,node_0,0 * GB);
    stubQueueAllocation(d,clusterResource,node_0,1 * GB);
    root.assignContainers(clusterResource,node_0,false,new ResourceLimits(clusterResource));
  }
  verifyQueueMetrics(a,1 * GB,clusterResource);
  verifyQueueMetrics(b,2 * GB,clusterResource);
  verifyQueueMetrics(c,3 * GB,clusterResource);
  verifyQueueMetrics(d,4 * GB,clusterResource);
  LOG.info("status child-queues: " + ((ParentQueue)root).getChildQueuesToPrint());
  for (int i=0; i < 3; i++) {
    d.completedContainer(clusterResource,app_0,node_0,rmContainer,null,RMContainerEventType.KILL,null,true);
  }
  verifyQueueMetrics(a,1 * GB,clusterResource);
  verifyQueueMetrics(b,2 * GB,clusterResource);
  verifyQueueMetrics(c,3 * GB,clusterResource);
  verifyQueueMetrics(d,1 * GB,clusterResource);
  node_0=TestUtils.getMockNode("host_0",DEFAULT_RACK,0,(memoryPerNode - 1 - 2- 3- 1) * GB);
  LOG.info("status child-queues: " + ((ParentQueue)root).getChildQueuesToPrint());
  for (int i=0; i < 2; i++) {
    stubQueueAllocation(a,clusterResource,node_0,1 * GB);
    stubQueueAllocation(b,clusterResource,node_0,0 * GB);
    stubQueueAllocation(c,clusterResource,node_0,0 * GB);
    stubQueueAllocation(d,clusterResource,node_0,0 * GB);
    root.assignContainers(clusterResource,node_0,false,new ResourceLimits(clusterResource));
  }
  verifyQueueMetrics(a,3 * GB,clusterResource);
  verifyQueueMetrics(b,2 * GB,clusterResource);
  verifyQueueMetrics(c,3 * GB,clusterResource);
  verifyQueueMetrics(d,1 * GB,clusterResource);
  LOG.info("status child-queues: " + ((ParentQueue)root).getChildQueuesToPrint());
  a.completedContainer(clusterResource,app_0,node_0,rmContainer,null,RMContainerEventType.KILL,null,true);
  verifyQueueMetrics(a,2 * GB,clusterResource);
  verifyQueueMetrics(b,2 * GB,clusterResource);
  verifyQueueMetrics(c,3 * GB,clusterResource);
  verifyQueueMetrics(d,1 * GB,clusterResource);
  node_0=TestUtils.getMockNode("host_0",DEFAULT_RACK,0,(memoryPerNode - 2 - 2- 3- 1) * GB);
  LOG.info("status child-queues: " + ((ParentQueue)root).getChildQueuesToPrint());
  stubQueueAllocation(a,clusterResource,node_0,0 * GB);
  stubQueueAllocation(b,clusterResource,node_0,1 * GB);
  stubQueueAllocation(c,clusterResource,node_0,0 * GB);
  stubQueueAllocation(d,clusterResource,node_0,0 * GB);
  root.assignContainers(clusterResource,node_0,false,new ResourceLimits(clusterResource));
  verifyQueueMetrics(a,2 * GB,clusterResource);
  verifyQueueMetrics(b,3 * GB,clusterResource);
  verifyQueueMetrics(c,3 * GB,clusterResource);
  verifyQueueMetrics(d,1 * GB,clusterResource);
  LOG.info("status child-queues: " + ((ParentQueue)root).getChildQueuesToPrint());
  b.completedContainer(clusterResource,app_0,node_0,rmContainer,null,RMContainerEventType.KILL,null,true);
  verifyQueueMetrics(a,2 * GB,clusterResource);
  verifyQueueMetrics(b,2 * GB,clusterResource);
  verifyQueueMetrics(c,3 * GB,clusterResource);
  verifyQueueMetrics(d,1 * GB,clusterResource);
  node_0=TestUtils.getMockNode("host_0",DEFAULT_RACK,0,(memoryPerNode - 2 - 2- 3- 1) * GB);
  LOG.info("status child-queues: " + ((ParentQueue)root).getChildQueuesToPrint());
  stubQueueAllocation(a,clusterResource,node_0,1 * GB);
  stubQueueAllocation(b,clusterResource,node_0,0 * GB);
  stubQueueAllocation(c,clusterResource,node_0,0 * GB);
  stubQueueAllocation(d,clusterResource,node_0,0 * GB);
  root.assignContainers(clusterResource,node_0,false,new ResourceLimits(clusterResource));
  verifyQueueMetrics(a,3 * GB,clusterResource);
  verifyQueueMetrics(b,2 * GB,clusterResource);
  verifyQueueMetrics(c,3 * GB,clusterResource);
  verifyQueueMetrics(d,1 * GB,clusterResource);
  LOG.info("status child-queues: " + ((ParentQueue)root).getChildQueuesToPrint());
  stubQueueAllocation(a,clusterResource,node_0,0 * GB);
  stubQueueAllocation(b,clusterResource,node_0,1 * GB);
  stubQueueAllocation(c,clusterResource,node_0,0 * GB);
  stubQueueAllocation(d,clusterResource,node_0,1 * GB);
  root.assignContainers(clusterResource,node_0,false,new ResourceLimits(clusterResource));
  InOrder allocationOrder=inOrder(d,b);
  allocationOrder.verify(d).assignContainers(eq(clusterResource),any(FiCaSchedulerNode.class),anyBoolean(),any(ResourceLimits.class));
  allocationOrder.verify(b).assignContainers(eq(clusterResource),any(FiCaSchedulerNode.class),anyBoolean(),any(ResourceLimits.class));
  verifyQueueMetrics(a,3 * GB,clusterResource);
  verifyQueueMetrics(b,2 * GB,clusterResource);
  verifyQueueMetrics(c,3 * GB,clusterResource);
  verifyQueueMetrics(d,2 * GB,clusterResource);
  LOG.info("status child-queues: " + ((ParentQueue)root).getChildQueuesToPrint());
}
