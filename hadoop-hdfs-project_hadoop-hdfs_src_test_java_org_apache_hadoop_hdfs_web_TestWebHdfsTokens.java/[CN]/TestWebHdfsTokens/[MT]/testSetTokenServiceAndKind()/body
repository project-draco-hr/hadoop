{
  MiniDFSCluster cluster=null;
  try {
    final Configuration clusterConf=new HdfsConfiguration(conf);
    SecurityUtil.setAuthenticationMethod(SIMPLE,clusterConf);
    clusterConf.setBoolean(DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,true);
    UserGroupInformation.setConfiguration(clusterConf);
    cluster=new MiniDFSCluster.Builder(clusterConf).numDataNodes(0).build();
    cluster.waitActive();
    SecurityUtil.setAuthenticationMethod(KERBEROS,clusterConf);
    final WebHdfsFileSystem fs=WebHdfsTestUtil.getWebHdfsFileSystem(clusterConf,"webhdfs");
    Whitebox.setInternalState(fs,"canRefreshDelegationToken",true);
    URLConnectionFactory factory=new URLConnectionFactory(new ConnectionConfigurator(){
      @Override public HttpURLConnection configure(      HttpURLConnection conn) throws IOException {
        return conn;
      }
    }
){
      @Override public URLConnection openConnection(      URL url) throws IOException {
        return super.openConnection(new URL(url + "&service=foo&kind=bar"));
      }
    }
;
    Whitebox.setInternalState(fs,"connectionFactory",factory);
    Token<?> token1=fs.getDelegationToken();
    Assert.assertEquals(new Text("bar"),token1.getKind());
    final HttpOpParam.Op op=GetOpParam.Op.GETDELEGATIONTOKEN;
    Token<DelegationTokenIdentifier> token2=fs.new FsPathResponseRunner<Token<DelegationTokenIdentifier>>(op,null,new RenewerParam(null)){
      @Override Token<DelegationTokenIdentifier> decodeResponse(      Map<?,?> json) throws IOException {
        return JsonUtil.toDelegationToken(json);
      }
    }
.run();
    Assert.assertEquals(new Text("bar"),token2.getKind());
    Assert.assertEquals(new Text("foo"),token2.getService());
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
