{
  MiniDFSCluster cluster=null;
  SWebHdfsFileSystem fs=null;
  try {
    final Configuration clusterConf=new HdfsConfiguration(conf);
    SecurityUtil.setAuthenticationMethod(SIMPLE,clusterConf);
    clusterConf.setBoolean(DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,true);
    String BASEDIR=System.getProperty("test.build.dir","target/test-dir") + "/" + TestWebHdfsTokens.class.getSimpleName();
    String keystoresDir;
    String sslConfDir;
    clusterConf.set(DFSConfigKeys.DFS_HTTP_POLICY_KEY,HttpConfig.Policy.HTTPS_ONLY.name());
    clusterConf.set(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,"localhost:0");
    clusterConf.set(DFSConfigKeys.DFS_DATANODE_HTTPS_ADDRESS_KEY,"localhost:0");
    File base=new File(BASEDIR);
    FileUtil.fullyDelete(base);
    base.mkdirs();
    keystoresDir=new File(BASEDIR).getAbsolutePath();
    sslConfDir=KeyStoreTestUtil.getClasspathDir(TestWebHdfsTokens.class);
    KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,clusterConf,false);
    UserGroupInformation.setConfiguration(clusterConf);
    cluster=new MiniDFSCluster.Builder(clusterConf).numDataNodes(1).build();
    cluster.waitActive();
    InetSocketAddress addr=cluster.getNameNode().getHttpsAddress();
    String nnAddr=NetUtils.getHostPortString(addr);
    clusterConf.set(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,nnAddr);
    SecurityUtil.setAuthenticationMethod(KERBEROS,clusterConf);
    UserGroupInformation.setConfiguration(clusterConf);
    uri=DFSUtil.createUri("swebhdfs",cluster.getNameNode().getHttpsAddress());
    validateLazyTokenFetch(clusterConf);
  }
  finally {
    IOUtils.cleanup(null,fs);
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
