{
  MiniDFSCluster cluster=null;
  UserGroupInformation loginUgi=UserGroupInformation.createUserForTesting("LoginUser",new String[]{"supergroup"});
  try {
    final Configuration clusterConf=new HdfsConfiguration(conf);
    SecurityUtil.setAuthenticationMethod(SIMPLE,clusterConf);
    clusterConf.setBoolean(DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,true);
    UserGroupInformation.setConfiguration(clusterConf);
    UserGroupInformation.setLoginUser(loginUgi);
    cluster=new MiniDFSCluster.Builder(clusterConf).numDataNodes(0).build();
    cluster.waitActive();
    SecurityUtil.setAuthenticationMethod(SIMPLE,clusterConf);
    UserGroupInformation.setConfiguration(clusterConf);
    UserGroupInformation simpleUgi=UserGroupInformation.createUserForTesting("testUser",new String[]{"supergroup"});
    final WebHdfsFileSystem simpleFs=WebHdfsTestUtil.getWebHdfsFileSystemAs(simpleUgi,clusterConf,"webhdfs");
    SecurityUtil.setAuthenticationMethod(KERBEROS,clusterConf);
    UserGroupInformation.setConfiguration(clusterConf);
    UserGroupInformation krbUgi=UserGroupInformation.createUserForTesting("testUser",new String[]{"supergroup"});
    final WebHdfsFileSystem krbFs=WebHdfsTestUtil.getWebHdfsFileSystemAs(krbUgi,clusterConf,"webhdfs");
    Token<DelegationTokenIdentifier> krbToken=krbFs.getDelegationToken(null);
    Assert.assertNotNull(krbToken);
    simpleFs.setDelegationToken(krbToken);
    Token<?> simpleToken=simpleFs.getDelegationToken();
    Assert.assertNotNull(simpleToken);
    Assert.assertEquals(krbToken.getService(),simpleToken.getService());
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
