{
  LOG.info("Setting up container launch container for containerid=" + container.getId());
  ContainerLaunchContext ctx=Records.newRecord(ContainerLaunchContext.class);
  ctx.setEnvironment(shellEnv);
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  if (!scriptPath.isEmpty()) {
    Path renamedScriptPath=null;
    if (Shell.WINDOWS) {
      renamedScriptPath=new Path(scriptPath + ".bat");
    }
 else {
      renamedScriptPath=new Path(scriptPath + ".sh");
    }
    try {
      renameScriptFile(renamedScriptPath);
    }
 catch (    Exception e) {
      LOG.error("Not able to add suffix (.bat/.sh) to the shell script filename",e);
      numCompletedContainers.incrementAndGet();
      numFailedContainers.incrementAndGet();
      return;
    }
    LocalResource shellRsrc=Records.newRecord(LocalResource.class);
    shellRsrc.setType(LocalResourceType.FILE);
    shellRsrc.setVisibility(LocalResourceVisibility.APPLICATION);
    try {
      shellRsrc.setResource(ConverterUtils.getYarnUrlFromURI(new URI(renamedScriptPath.toString())));
    }
 catch (    URISyntaxException e) {
      LOG.error("Error when trying to use shell script path specified" + " in env, path=" + renamedScriptPath,e);
      numCompletedContainers.incrementAndGet();
      numFailedContainers.incrementAndGet();
      return;
    }
    shellRsrc.setTimestamp(shellScriptPathTimestamp);
    shellRsrc.setSize(shellScriptPathLen);
    localResources.put(Shell.WINDOWS ? ExecBatScripStringtPath : ExecShellStringPath,shellRsrc);
    shellCommand=Shell.WINDOWS ? windows_command : linux_bash_command;
  }
  ctx.setLocalResources(localResources);
  Vector<CharSequence> vargs=new Vector<CharSequence>(5);
  vargs.add(shellCommand);
  if (!scriptPath.isEmpty()) {
    vargs.add(Shell.WINDOWS ? ExecBatScripStringtPath : ExecShellStringPath);
  }
  vargs.add(shellArgs);
  vargs.add("1>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + "/stdout");
  vargs.add("2>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + "/stderr");
  StringBuilder command=new StringBuilder();
  for (  CharSequence str : vargs) {
    command.append(str).append(" ");
  }
  List<String> commands=new ArrayList<String>();
  commands.add(command.toString());
  ctx.setCommands(commands);
  ctx.setTokens(allTokens.duplicate());
  containerListener.addContainer(container.getId(),container);
  nmClientAsync.startContainerAsync(container,ctx);
}
