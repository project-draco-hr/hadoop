{
  Configuration conf=new Configuration(false);
  Cluster cluster=null;
  try {
    conf=new Configuration();
    conf.set(MRConfig.FRAMEWORK_NAME,MRConfig.YARN_FRAMEWORK_NAME);
    cluster=new Cluster(conf);
    YARNRunner yrunner=(YARNRunner)cluster.getClient();
    GetDelegationTokenResponse getDTResponse=recordFactory.newRecordInstance(GetDelegationTokenResponse.class);
    org.apache.hadoop.yarn.api.records.Token rmDTToken=recordFactory.newRecordInstance(org.apache.hadoop.yarn.api.records.Token.class);
    rmDTToken.setIdentifier(ByteBuffer.wrap(new byte[2]));
    rmDTToken.setKind("Testclusterkind");
    rmDTToken.setPassword(ByteBuffer.wrap("testcluster".getBytes()));
    rmDTToken.setService("0.0.0.0:8032");
    getDTResponse.setRMDelegationToken(rmDTToken);
    final ApplicationClientProtocol cRMProtocol=mock(ApplicationClientProtocol.class);
    when(cRMProtocol.getDelegationToken(any(GetDelegationTokenRequest.class))).thenReturn(getDTResponse);
    ResourceMgrDelegate rmgrDelegate=new ResourceMgrDelegate(new YarnConfiguration(conf)){
      @Override protected void serviceStart() throws Exception {
        assertTrue(this.client instanceof YarnClientImpl);
        ((YarnClientImpl)this.client).setRMClient(cRMProtocol);
      }
    }
;
    yrunner.setResourceMgrDelegate(rmgrDelegate);
    Token t=cluster.getDelegationToken(new Text(" "));
    assertTrue("Token kind is instead " + t.getKind().toString(),"Testclusterkind".equals(t.getKind().toString()));
  }
  finally {
    if (cluster != null) {
      cluster.close();
    }
  }
}
