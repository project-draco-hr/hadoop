{
  int numINUC=in.readInt();
  v.visitEnclosingElement(ImageElement.INODES_UNDER_CONSTRUCTION,ImageElement.NUM_INODES_UNDER_CONSTRUCTION,numINUC);
  for (int i=0; i < numINUC; i++) {
    v.visitEnclosingElement(ImageElement.INODE_UNDER_CONSTRUCTION);
    byte[] name=FSImageSerialization.readBytes(in);
    String n=new String(name,"UTF8");
    v.visit(ImageElement.INODE_PATH,n);
    if (NameNodeLayoutVersion.supports(Feature.ADD_INODE_ID,imageVersion)) {
      long inodeId=in.readLong();
      v.visit(ImageElement.INODE_ID,inodeId);
    }
    v.visit(ImageElement.REPLICATION,in.readShort());
    v.visit(ImageElement.MODIFICATION_TIME,formatDate(in.readLong()));
    v.visit(ImageElement.PREFERRED_BLOCK_SIZE,in.readLong());
    int numBlocks=in.readInt();
    processBlocks(in,v,numBlocks,skipBlocks);
    processPermission(in,v);
    v.visit(ImageElement.CLIENT_NAME,FSImageSerialization.readString(in));
    v.visit(ImageElement.CLIENT_MACHINE,FSImageSerialization.readString(in));
    int numLocs=in.readInt();
    for (int j=0; j < numLocs; j++) {
      in.readShort();
      in.readLong();
      in.readLong();
      in.readLong();
      in.readInt();
      FSImageSerialization.readString(in);
      FSImageSerialization.readString(in);
      WritableUtils.readEnum(in,AdminStates.class);
    }
    v.leaveEnclosingElement();
  }
  v.leaveEnclosingElement();
}
