{
  MockServerClient mockWebHDFSServerClient=new MockServerClient("localhost",WEBHDFS_PORT);
  MockServerClient mockOAuthServerClient=new MockServerClient("localhost",OAUTH_PORT);
  HttpRequest oauthServerRequest=getOAuthServerMockRequest(mockOAuthServerClient);
  HttpRequest fileSystemRequest=request().withMethod("GET").withPath(WebHdfsFileSystem.PATH_PREFIX + "/test1/test2").withHeader(AUTH_TOKEN_HEADER);
  try {
    mockWebHDFSServerClient.when(fileSystemRequest,exactly(1)).respond(response().withStatusCode(HttpStatus.SC_OK).withHeaders(CONTENT_TYPE_APPLICATION_JSON).withBody("{\n" + "  \"FileStatuses\":\n" + "  {\n"+ "    \"FileStatus\":\n"+ "    [\n"+ "      {\n"+ "        \"accessTime\"      : 1320171722771,\n"+ "        \"blockSize\"       : 33554432,\n"+ "        \"group\"           : \"supergroup\",\n"+ "        \"length\"          : 24930,\n"+ "        \"modificationTime\": 1320171722771,\n"+ "        \"owner\"           : \"webuser\",\n"+ "        \"pathSuffix\"      : \"a.patch\",\n"+ "        \"permission\"      : \"644\",\n"+ "        \"replication\"     : 1,\n"+ "        \"type\"            : \"FILE\"\n"+ "      },\n"+ "      {\n"+ "        \"accessTime\"      : 0,\n"+ "        \"blockSize\"       : 0,\n"+ "        \"group\"           : \"supergroup\",\n"+ "        \"length\"          : 0,\n"+ "        \"modificationTime\": 1320895981256,\n"+ "        \"owner\"           : \"szetszwo\",\n"+ "        \"pathSuffix\"      : \"bar\",\n"+ "        \"permission\"      : \"711\",\n"+ "        \"replication\"     : 0,\n"+ "        \"type\"            : \"DIRECTORY\"\n"+ "      }\n"+ "    ]\n"+ "  }\n"+ "}\n"));
    FileSystem fs=new WebHdfsFileSystem();
    Configuration conf=getConfiguration();
    conf.set(OAUTH_REFRESH_URL_KEY,"http://localhost:" + OAUTH_PORT + "/refresh");
    conf.set(CredentialBasedAccessTokenProvider.OAUTH_CREDENTIAL_KEY,"credential");
    URI uri=new URI("webhdfs://localhost:" + WEBHDFS_PORT);
    fs.initialize(uri,conf);
    FileStatus[] ls=fs.listStatus(new Path("/test1/test2"));
    mockOAuthServer.verify(oauthServerRequest);
    mockWebHDFSServerClient.verify(fileSystemRequest);
    assertEquals(2,ls.length);
    assertEquals("a.patch",ls[0].getPath().getName());
    assertEquals("bar",ls[1].getPath().getName());
    fs.close();
  }
  finally {
    mockWebHDFSServerClient.clear(fileSystemRequest);
    mockOAuthServerClient.clear(oauthServerRequest);
  }
}
