{
  final DistributedFileSystem dfs=(DistributedFileSystem)cluster.getFileSystem();
  final Token<DelegationTokenIdentifier> token=dfs.getDelegationToken("JobTracker");
  final UserGroupInformation longUgi=UserGroupInformation.createRemoteUser("JobTracker/foo.com@FOO.COM");
  final UserGroupInformation shortUgi=UserGroupInformation.createRemoteUser("JobTracker");
  longUgi.doAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws IOException {
      final DistributedFileSystem dfs=(DistributedFileSystem)cluster.getFileSystem();
      try {
        dfs.renewDelegationToken(token);
      }
 catch (      IOException e) {
        Assert.fail("Could not renew delegation token for user " + longUgi);
      }
      return null;
    }
  }
);
  shortUgi.doAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws IOException {
      final DistributedFileSystem dfs=(DistributedFileSystem)cluster.getFileSystem();
      dfs.renewDelegationToken(token);
      return null;
    }
  }
);
  longUgi.doAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws IOException {
      final DistributedFileSystem dfs=(DistributedFileSystem)cluster.getFileSystem();
      try {
        dfs.cancelDelegationToken(token);
      }
 catch (      IOException e) {
        Assert.fail("Could not cancel delegation token for user " + longUgi);
      }
      return null;
    }
  }
);
}
