{
  Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,FSConstants.DEFAULT_BLOCK_SIZE);
  conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY,FSConstants.DEFAULT_BYTES_PER_CHECKSUM);
  conf.setInt(DFSConfigKeys.DFS_CLIENT_WRITE_PACKET_SIZE_KEY,FSConstants.DEFAULT_WRITE_PACKET_SIZE);
  conf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY,FSConstants.DEFAULT_REPLICATION_FACTOR + 1);
  conf.setInt("io.file.buffer.size",FSConstants.DEFAULT_FILE_BUFFER_SIZE);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(FSConstants.DEFAULT_REPLICATION_FACTOR + 1).build();
  cluster.waitActive();
  FileSystem fs=cluster.getFileSystem();
  try {
    FsServerDefaults serverDefaults=fs.getServerDefaults();
    assertEquals(FSConstants.DEFAULT_BLOCK_SIZE,serverDefaults.getBlockSize());
    assertEquals(FSConstants.DEFAULT_BYTES_PER_CHECKSUM,serverDefaults.getBytesPerChecksum());
    assertEquals(FSConstants.DEFAULT_WRITE_PACKET_SIZE,serverDefaults.getWritePacketSize());
    assertEquals(FSConstants.DEFAULT_REPLICATION_FACTOR + 1,serverDefaults.getReplication());
    assertEquals(FSConstants.DEFAULT_FILE_BUFFER_SIZE,serverDefaults.getFileBufferSize());
  }
  finally {
    fs.close();
    cluster.shutdown();
  }
}
