{
  String filename=makeFileName(GenericTestUtils.getMethodName());
  Path filePath=new Path(filename);
  DFSTestUtil.createFile(fs,filePath,BLOCK_SIZE,BLOCK_SIZE * NUM_BLOCKS,BLOCK_SIZE,NUM_DATANODES,seed);
  LocatedBlocks locatedBlocks=client.getLocatedBlocks(filePath.toString(),0,BLOCK_SIZE * NUM_BLOCKS);
  DataNode dn=cluster.getDataNodes().get(0);
  DatanodeRegistration dnReg=dn.getDNRegistrationForBP(bpid);
  StorageBlockReport reports[]=new StorageBlockReport[cluster.getStoragesPerDatanode()];
  ArrayList<Replica> blocks=new ArrayList<Replica>();
  for (  LocatedBlock locatedBlock : locatedBlocks.getLocatedBlocks()) {
    Block localBlock=locatedBlock.getBlock().getLocalBlock();
    blocks.add(new FinalizedReplica(localBlock,null,null));
  }
  try (FsDatasetSpi.FsVolumeReferences volumes=dn.getFSDataset().getFsVolumeReferences()){
    BlockListAsLongs bll=BlockListAsLongs.encode(blocks);
    for (int i=0; i < cluster.getStoragesPerDatanode(); ++i) {
      DatanodeStorage dns=new DatanodeStorage(volumes.get(i).getStorageID());
      reports[i]=new StorageBlockReport(dns,bll);
    }
  }
   cluster.getNameNodeRpc().blockReport(dnReg,bpid,reports,new BlockReportContext(1,0,System.nanoTime()));
  locatedBlocks=client.getLocatedBlocks(filename,0,BLOCK_SIZE * NUM_BLOCKS);
  for (  LocatedBlock locatedBlock : locatedBlocks.getLocatedBlocks()) {
    DatanodeInfo[] locations=locatedBlock.getLocations();
    assertThat(locations.length,is((int)NUM_DATANODES));
    assertThat(locations[0].getDatanodeUuid(),not(locations[1].getDatanodeUuid()));
  }
}
