{
  InetSocketAddress targetAddr=null;
  IOException ioe=null;
  BlockReader blockReader=null;
  ExtendedBlock block=lblock.getBlock();
  try {
    DatanodeInfo[] nodes=lblock.getLocations();
    targetAddr=NetUtils.createSocketAddr(nodes[0].getXferAddr());
    blockReader=new BlockReaderFactory(new DFSClient.Conf(conf)).setFileName(BlockReaderFactory.getFileName(targetAddr,"test-blockpoolid",block.getBlockId())).setBlock(block).setBlockToken(lblock.getBlockToken()).setInetSocketAddress(targetAddr).setStartOffset(0).setLength(-1).setVerifyChecksum(true).setClientName("TestBlockTokenWithDFS").setDatanodeInfo(nodes[0]).setCachingStrategy(CachingStrategy.newDefaultStrategy()).setClientCacheContext(ClientContext.getFromConf(conf)).setConfiguration(conf).setRemotePeerFactory(new RemotePeerFactory(){
      @Override public Peer newConnectedPeer(      InetSocketAddress addr) throws IOException {
        Peer peer=null;
        Socket sock=NetUtils.getDefaultSocketFactory(conf).createSocket();
        try {
          sock.connect(addr,HdfsServerConstants.READ_TIMEOUT);
          sock.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);
          peer=TcpPeerServer.peerFromSocket(sock);
        }
  finally {
          if (peer == null) {
            IOUtils.closeSocket(sock);
          }
        }
        return peer;
      }
    }
).build();
  }
 catch (  IOException ex) {
    ioe=ex;
  }
 finally {
    if (blockReader != null) {
      try {
        blockReader.close();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  if (shouldSucceed) {
    Assert.assertNotNull("OP_READ_BLOCK: access token is invalid, " + "when it is expected to be valid",blockReader);
  }
 else {
    Assert.assertNotNull("OP_READ_BLOCK: access token is valid, " + "when it is expected to be invalid",ioe);
    Assert.assertTrue("OP_READ_BLOCK failed due to reasons other than access token: ",ioe instanceof InvalidBlockTokenException);
  }
}
