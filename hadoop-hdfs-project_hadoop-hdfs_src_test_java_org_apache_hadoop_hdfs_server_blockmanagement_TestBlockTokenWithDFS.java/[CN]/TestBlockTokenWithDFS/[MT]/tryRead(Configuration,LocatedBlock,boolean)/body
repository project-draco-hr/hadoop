{
  InetSocketAddress targetAddr=null;
  Socket s=null;
  BlockReader blockReader=null;
  ExtendedBlock block=lblock.getBlock();
  try {
    DatanodeInfo[] nodes=lblock.getLocations();
    targetAddr=NetUtils.createSocketAddr(nodes[0].getXferAddr());
    s=NetUtils.getDefaultSocketFactory(conf).createSocket();
    s.connect(targetAddr,HdfsServerConstants.READ_TIMEOUT);
    s.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);
    String file=BlockReaderFactory.getFileName(targetAddr,"test-blockpoolid",block.getBlockId());
    blockReader=BlockReaderFactory.newBlockReader(new BlockReaderFactory.Params(new Conf(conf)).setSocket(s).setBlock(block).setFile(file).setBlockToken(lblock.getBlockToken()).setStartOffset(0).setLen(-1));
  }
 catch (  IOException ex) {
    if (ex instanceof InvalidBlockTokenException) {
      assertFalse("OP_READ_BLOCK: access token is invalid, " + "when it is expected to be valid",shouldSucceed);
      return;
    }
    fail("OP_READ_BLOCK failed due to reasons other than access token: " + StringUtils.stringifyException(ex));
  }
 finally {
    if (s != null) {
      try {
        s.close();
      }
 catch (      IOException iex) {
      }
 finally {
        s=null;
      }
    }
  }
  if (blockReader == null) {
    fail("OP_READ_BLOCK failed due to reasons other than access token");
  }
  assertTrue("OP_READ_BLOCK: access token is valid, " + "when it is expected to be invalid",shouldSucceed);
}
