{
  String currentUser=System.getProperty("user.name");
  config.set("fs.permissions.umask-mode","u=rwx,g=,o=");
  config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserGroupConfKey(currentUser),"*");
  config.set(DefaultImpersonationProvider.getTestProvider().getProxySuperuserIpConfKey(currentUser),"*");
  fsHelper=new FileSystemTestHelper();
  String testRoot=fsHelper.getTestRootDir();
  testRootDir=new File(testRoot).getAbsoluteFile();
  final Path jksPath=new Path(testRootDir.toString(),"test.jks");
  config.set(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI,JavaKeyStoreProvider.SCHEME_NAME + "://file" + jksPath.toUri());
  ProxyUsers.refreshSuperUserGroupsConfiguration(config);
  cluster=new MiniDFSCluster.Builder(config).numDataNodes(1).build();
  cluster.waitActive();
  hdfs=cluster.getFileSystem();
  nn=cluster.getNameNode();
  dfsAdmin=new HdfsAdmin(cluster.getURI(),config);
  config.setInt("nfs3.mountd.port",0);
  config.setInt("nfs3.server.port",0);
  config.set("dfs.nfs.exports.allowed.hosts","* rw");
  nfs=new Nfs3(config);
  nfs.startServiceInternal(false);
  nfsd=(RpcProgramNfs3)nfs.getRpcProgram();
  hdfs.getClient().setKeyProvider(nn.getNamesystem().getProvider());
  DFSTestUtil.createKey(TEST_KEY,cluster,config);
  securityHandler=Mockito.mock(SecurityHandler.class);
  Mockito.when(securityHandler.getUser()).thenReturn(currentUser);
  securityHandlerUnpriviledged=Mockito.mock(SecurityHandler.class);
  Mockito.when(securityHandlerUnpriviledged.getUser()).thenReturn("harry");
}
