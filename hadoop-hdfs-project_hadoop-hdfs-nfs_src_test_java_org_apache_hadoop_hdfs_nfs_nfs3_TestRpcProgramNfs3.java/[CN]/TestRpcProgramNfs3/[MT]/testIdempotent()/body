{
  int[][] procedures={{Nfs3Constant.NFSPROC3_NULL,1},{Nfs3Constant.NFSPROC3_GETATTR,1},{Nfs3Constant.NFSPROC3_SETATTR,1},{Nfs3Constant.NFSPROC3_LOOKUP,1},{Nfs3Constant.NFSPROC3_ACCESS,1},{Nfs3Constant.NFSPROC3_READLINK,1},{Nfs3Constant.NFSPROC3_READ,1},{Nfs3Constant.NFSPROC3_WRITE,1},{Nfs3Constant.NFSPROC3_CREATE,0},{Nfs3Constant.NFSPROC3_MKDIR,0},{Nfs3Constant.NFSPROC3_SYMLINK,0},{Nfs3Constant.NFSPROC3_MKNOD,0},{Nfs3Constant.NFSPROC3_REMOVE,0},{Nfs3Constant.NFSPROC3_RMDIR,0},{Nfs3Constant.NFSPROC3_RENAME,0},{Nfs3Constant.NFSPROC3_LINK,0},{Nfs3Constant.NFSPROC3_READDIR,1},{Nfs3Constant.NFSPROC3_READDIRPLUS,1},{Nfs3Constant.NFSPROC3_FSSTAT,1},{Nfs3Constant.NFSPROC3_FSINFO,1},{Nfs3Constant.NFSPROC3_PATHCONF,1},{Nfs3Constant.NFSPROC3_COMMIT,1}};
  for (  int[] procedure : procedures) {
    boolean idempotent=procedure[1] == 1;
    int proc=procedure[0];
    if (idempotent) {
      Assert.assertTrue(("Procedure " + proc + " should be idempotent"),RpcProgramNfs3.isIdempotent(proc));
    }
 else {
      Assert.assertFalse(("Procedure " + proc + " should be non-idempotent"),RpcProgramNfs3.isIdempotent(proc));
    }
  }
}
