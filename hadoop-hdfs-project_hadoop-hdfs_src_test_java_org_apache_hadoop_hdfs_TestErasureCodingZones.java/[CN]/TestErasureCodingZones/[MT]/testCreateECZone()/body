{
  final Path testDir=new Path("/ec");
  fs.mkdir(testDir,FsPermission.getDirDefault());
  fs.getClient().createErasureCodingZone(testDir.toString(),null,0);
  final Path ECFilePath=new Path(testDir,"foo");
  fs.create(ECFilePath);
  INode inode=namesystem.getFSDirectory().getINode(ECFilePath.toString());
  assertTrue(inode.asFile().isStriped());
  final Path notEmpty=new Path("/nonEmpty");
  fs.mkdir(notEmpty,FsPermission.getDirDefault());
  fs.create(new Path(notEmpty,"foo"));
  try {
    fs.getClient().createErasureCodingZone(notEmpty.toString(),null,0);
    fail("Erasure coding zone on non-empty dir");
  }
 catch (  IOException e) {
    assertExceptionContains("erasure coding zone for a non-empty directory",e);
  }
  final Path zone1=new Path("/zone1");
  final Path zone2=new Path(zone1,"zone2");
  fs.mkdir(zone1,FsPermission.getDirDefault());
  fs.getClient().createErasureCodingZone(zone1.toString(),null,0);
  fs.mkdir(zone2,FsPermission.getDirDefault());
  try {
    fs.getClient().createErasureCodingZone(zone2.toString(),null,0);
    fail("Nested erasure coding zones");
  }
 catch (  IOException e) {
    assertExceptionContains("already in an erasure coding zone",e);
  }
  final Path fPath=new Path("/file");
  fs.create(fPath);
  try {
    fs.getClient().createErasureCodingZone(fPath.toString(),null,0);
    fail("Erasure coding zone on file");
  }
 catch (  IOException e) {
    assertExceptionContains("erasure coding zone for a file",e);
  }
}
