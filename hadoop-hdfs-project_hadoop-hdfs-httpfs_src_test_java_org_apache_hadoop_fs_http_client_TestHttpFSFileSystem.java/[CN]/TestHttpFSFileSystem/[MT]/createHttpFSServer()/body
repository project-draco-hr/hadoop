{
  File homeDir=TestDirHelper.getTestDir();
  Assert.assertTrue(new File(homeDir,"conf").mkdir());
  Assert.assertTrue(new File(homeDir,"log").mkdir());
  Assert.assertTrue(new File(homeDir,"temp").mkdir());
  HttpFSServerWebApp.setHomeDirForCurrentThread(homeDir.getAbsolutePath());
  File secretFile=new File(new File(homeDir,"conf"),"secret");
  Writer w=new FileWriter(secretFile);
  w.write("secret");
  w.close();
  String fsDefaultName=TestHdfsHelper.getHdfsConf().get("fs.default.name");
  Configuration conf=new Configuration(false);
  conf.set("httpfs.hadoop.conf:fs.default.name",fsDefaultName);
  conf.set("httpfs.proxyuser." + HadoopUsersConfTestHelper.getHadoopProxyUser() + ".groups",HadoopUsersConfTestHelper.getHadoopProxyUserGroups());
  conf.set("httpfs.proxyuser." + HadoopUsersConfTestHelper.getHadoopProxyUser() + ".hosts",HadoopUsersConfTestHelper.getHadoopProxyUserHosts());
  conf.set("httpfs.authentication.signature.secret.file",secretFile.getAbsolutePath());
  File hoopSite=new File(new File(homeDir,"conf"),"httpfs-site.xml");
  OutputStream os=new FileOutputStream(hoopSite);
  conf.writeXml(os);
  os.close();
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  URL url=cl.getResource("webapp");
  WebAppContext context=new WebAppContext(url.getPath(),"/webhdfs");
  Server server=TestJettyHelper.getJettyServer();
  server.addHandler(context);
  server.start();
}
