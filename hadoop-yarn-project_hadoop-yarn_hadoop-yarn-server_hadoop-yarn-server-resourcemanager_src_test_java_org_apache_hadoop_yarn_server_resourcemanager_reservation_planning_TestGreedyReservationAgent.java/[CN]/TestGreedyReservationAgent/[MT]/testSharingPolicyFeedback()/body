{
  prepareBasicPlan();
  float instConstraint=40;
  float avgConstraint=40;
  ReservationSchedulerConfiguration conf=ReservationSystemTestUtil.createConf(plan.getQueueName(),100000,instConstraint,avgConstraint);
  plan.getSharingPolicy().init(plan.getQueueName(),conf);
  ReservationDefinition rr=new ReservationDefinitionPBImpl();
  rr.setArrival(5 * step);
  rr.setDeadline(100 * step);
  ReservationRequest r=ReservationRequest.newInstance(Resource.newInstance(2048,2),20,20,10 * step);
  ReservationRequests reqs=new ReservationRequestsPBImpl();
  reqs.setReservationResources(Collections.singletonList(r));
  rr.setReservationRequests(reqs);
  ReservationId reservationID=ReservationSystemTestUtil.getNewReservationId();
  agent.createReservation(reservationID,"u3",plan,rr);
  ReservationId reservationID2=ReservationSystemTestUtil.getNewReservationId();
  agent.createReservation(reservationID2,"u3",plan,rr);
  ReservationDefinition rr3=new ReservationDefinitionPBImpl();
  rr3.setArrival(5 * step);
  rr3.setDeadline(100 * step);
  ReservationRequest r3=ReservationRequest.newInstance(Resource.newInstance(2048,2),45,45,10 * step);
  ReservationRequests reqs3=new ReservationRequestsPBImpl();
  reqs3.setReservationResources(Collections.singletonList(r3));
  rr3.setReservationRequests(reqs3);
  ReservationId reservationID3=ReservationSystemTestUtil.getNewReservationId();
  try {
    agent.createReservation(reservationID3,"u3",plan,rr3);
    fail();
  }
 catch (  PlanningException pe) {
  }
  assertTrue("Agent-based allocation failed",reservationID != null);
  assertTrue("Agent-based allocation failed",plan.getAllReservations().size() == 4);
  ReservationAllocation cs=plan.getReservationById(reservationID);
  ReservationAllocation cs2=plan.getReservationById(reservationID2);
  ReservationAllocation cs3=plan.getReservationById(reservationID3);
  assertNotNull(cs);
  assertNotNull(cs2);
  assertNull(cs3);
  System.out.println("--------AFTER SIMPLE ALLOCATION (queue: " + reservationID + ")----------");
  System.out.println(plan.toString());
  System.out.println(plan.toCumulativeString());
  if (allocateLeft) {
    for (long i=5 * step; i < 15 * step; i++) {
      assertTrue("Agent-based allocation unexpected",Resources.equals(cs.getResourcesAtTime(i),Resource.newInstance(2048 * 20,2 * 20)));
    }
    for (long i=15 * step; i < 25 * step; i++) {
      assertTrue("Agent-based allocation unexpected",Resources.equals(cs2.getResourcesAtTime(i),Resource.newInstance(2048 * 20,2 * 20)));
    }
  }
 else {
    for (long i=90 * step; i < 100 * step; i++) {
      assertTrue("Agent-based allocation unexpected",Resources.equals(cs.getResourcesAtTime(i),Resource.newInstance(2048 * 20,2 * 20)));
    }
    for (long i=80 * step; i < 90 * step; i++) {
      assertTrue("Agent-based allocation unexpected",Resources.equals(cs2.getResourcesAtTime(i),Resource.newInstance(2048 * 20,2 * 20)));
    }
  }
}
