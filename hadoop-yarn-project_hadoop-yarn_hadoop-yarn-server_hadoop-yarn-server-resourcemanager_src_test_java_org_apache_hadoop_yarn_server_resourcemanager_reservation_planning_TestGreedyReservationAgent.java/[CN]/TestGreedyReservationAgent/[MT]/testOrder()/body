{
  prepareBasicPlan();
  int[] f={100,100};
  ReservationDefinition rDef=ReservationSystemTestUtil.createSimpleReservationDefinition(30 * step,30 * step + f.length * step,f.length * step);
  assertTrue(plan.toString(),plan.addReservation(new InMemoryReservationAllocation(ReservationSystemTestUtil.getNewReservationId(),rDef,"u1","dedicated",30 * step,30 * step + f.length * step,ReservationSystemTestUtil.generateAllocation(30 * step,step,f),res,minAlloc),false));
  ReservationDefinition rr=new ReservationDefinitionPBImpl();
  rr.setArrival(0 * step);
  rr.setDeadline(70 * step);
  ReservationRequests reqs=new ReservationRequestsPBImpl();
  reqs.setInterpreter(ReservationRequestInterpreter.R_ORDER);
  ReservationRequest r=ReservationRequest.newInstance(Resource.newInstance(2048,2),10,1,10 * step);
  ReservationRequest r2=ReservationRequest.newInstance(Resource.newInstance(1024,1),10,10,20 * step);
  List<ReservationRequest> list=new ArrayList<ReservationRequest>();
  list.add(r);
  list.add(r2);
  list.add(r);
  list.add(r2);
  reqs.setReservationResources(list);
  rr.setReservationRequests(reqs);
  ReservationId reservationID=ReservationSystemTestUtil.getNewReservationId();
  agent.createReservation(reservationID,"u1",plan,rr);
  assertTrue("Agent-based allocation failed",reservationID != null);
  assertTrue("Agent-based allocation failed",plan.getAllReservations().size() == 4);
  ReservationAllocation cs=plan.getReservationById(reservationID);
  assertTrue(cs.toString(),check(cs,0 * step,10 * step,20,1024,1));
  assertTrue(cs.toString(),check(cs,10 * step,30 * step,10,1024,1));
  assertTrue(cs.toString(),check(cs,40 * step,50 * step,20,1024,1));
  assertTrue(cs.toString(),check(cs,50 * step,70 * step,10,1024,1));
  System.out.println("--------AFTER ORDER ALLOCATION (queue: " + reservationID + ")----------");
  System.out.println(plan.toString());
  System.out.println(plan.toCumulativeString());
}
