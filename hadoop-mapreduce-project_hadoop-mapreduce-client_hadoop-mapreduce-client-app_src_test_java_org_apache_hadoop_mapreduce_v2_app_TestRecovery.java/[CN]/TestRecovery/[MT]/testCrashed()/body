{
  int runCount=0;
  long am1StartTimeEst=System.currentTimeMillis();
  MRApp app=new MRAppWithHistory(2,1,false,this.getClass().getName(),true,++runCount);
  Configuration conf=new Configuration();
  conf.setBoolean("mapred.mapper.new-api",true);
  conf.setBoolean("mapred.reducer.new-api",true);
  conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE,false);
  conf.set(FileOutputFormat.OUTDIR,outputDir.toString());
  Job job=app.submit(conf);
  app.waitForState(job,JobState.RUNNING);
  long jobStartTime=job.getReport().getStartTime();
  Assert.assertEquals("No of tasks not correct",3,job.getTasks().size());
  Iterator<Task> it=job.getTasks().values().iterator();
  Task mapTask1=it.next();
  Task mapTask2=it.next();
  Task reduceTask=it.next();
  app.waitForState(mapTask1,TaskState.RUNNING);
  app.waitForState(mapTask2,TaskState.RUNNING);
  TaskAttempt task1Attempt1=mapTask1.getAttempts().values().iterator().next();
  TaskAttempt task2Attempt=mapTask2.getAttempts().values().iterator().next();
  app.waitForState(task1Attempt1,TaskAttemptState.RUNNING);
  app.waitForState(task2Attempt,TaskAttemptState.RUNNING);
  Assert.assertEquals("Reduce Task state not correct",TaskState.RUNNING,reduceTask.getReport().getTaskState());
  app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt1.getID(),TaskAttemptEventType.TA_FAILMSG));
  app.waitForState(task1Attempt1,TaskAttemptState.FAILED);
  while (mapTask1.getAttempts().size() != 2) {
    Thread.sleep(2000);
    LOG.info("Waiting for next attempt to start");
  }
  Iterator<TaskAttempt> itr=mapTask1.getAttempts().values().iterator();
  itr.next();
  TaskAttempt task1Attempt2=itr.next();
  app.waitForState(task1Attempt2,TaskAttemptState.RUNNING);
  app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt2.getID(),TaskAttemptEventType.TA_KILL));
  app.waitForState(task1Attempt2,TaskAttemptState.KILLED);
  while (mapTask1.getAttempts().size() != 3) {
    Thread.sleep(2000);
    LOG.info("Waiting for next attempt to start");
  }
  itr=mapTask1.getAttempts().values().iterator();
  itr.next();
  itr.next();
  TaskAttempt task1Attempt3=itr.next();
  app.waitForState(task1Attempt3,TaskAttemptState.RUNNING);
  app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt3.getID(),TaskAttemptEventType.TA_DONE));
  app.waitForState(mapTask1,TaskState.SUCCEEDED);
  long task1StartTime=mapTask1.getReport().getStartTime();
  long task1FinishTime=mapTask1.getReport().getFinishTime();
  app.stop();
  long am2StartTimeEst=System.currentTimeMillis();
  app=new MRAppWithHistory(2,1,false,this.getClass().getName(),false,++runCount);
  conf=new Configuration();
  conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE,true);
  conf.setBoolean("mapred.mapper.new-api",true);
  conf.setBoolean("mapred.reducer.new-api",true);
  conf.set(FileOutputFormat.OUTDIR,outputDir.toString());
  conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE,false);
  job=app.submit(conf);
  app.waitForState(job,JobState.RUNNING);
  Assert.assertEquals("No of tasks not correct",3,job.getTasks().size());
  it=job.getTasks().values().iterator();
  mapTask1=it.next();
  mapTask2=it.next();
  reduceTask=it.next();
  app.waitForState(mapTask1,TaskState.SUCCEEDED);
  app.waitForState(mapTask2,TaskState.RUNNING);
  task2Attempt=mapTask2.getAttempts().values().iterator().next();
  app.waitForState(task2Attempt,TaskAttemptState.RUNNING);
  app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(),TaskAttemptEventType.TA_DONE));
  app.waitForState(mapTask2,TaskState.SUCCEEDED);
  app.waitForState(reduceTask,TaskState.RUNNING);
  app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceTask.getAttempts().values().iterator().next().getID(),TaskAttemptEventType.TA_DONE));
  app.waitForState(job,JobState.SUCCEEDED);
  app.verifyCompleted();
  Assert.assertEquals("Job Start time not correct",jobStartTime,job.getReport().getStartTime());
  Assert.assertEquals("Task Start time not correct",task1StartTime,mapTask1.getReport().getStartTime());
  Assert.assertEquals("Task Finish time not correct",task1FinishTime,mapTask1.getReport().getFinishTime());
  Assert.assertEquals(2,job.getAMInfos().size());
  int attemptNum=1;
  for (  AMInfo amInfo : job.getAMInfos()) {
    Assert.assertEquals(attemptNum++,amInfo.getAppAttemptId().getAttemptId());
    Assert.assertEquals(amInfo.getAppAttemptId(),amInfo.getContainerId().getApplicationAttemptId());
    Assert.assertEquals("testhost",amInfo.getNodeManagerHost());
    Assert.assertEquals(2222,amInfo.getNodeManagerPort());
    Assert.assertEquals(3333,amInfo.getNodeManagerHttpPort());
  }
  long am1StartTimeReal=job.getAMInfos().get(0).getStartTime();
  long am2StartTimeReal=job.getAMInfos().get(1).getStartTime();
  Assert.assertTrue(am1StartTimeReal >= am1StartTimeEst && am1StartTimeReal <= am2StartTimeEst);
  Assert.assertTrue(am2StartTimeReal >= am2StartTimeEst && am2StartTimeReal <= System.currentTimeMillis());
}
