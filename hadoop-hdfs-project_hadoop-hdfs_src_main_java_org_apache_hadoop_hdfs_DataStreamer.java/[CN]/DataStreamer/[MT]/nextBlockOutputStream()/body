{
  LocatedBlock lb=null;
  DatanodeInfo[] nodes=null;
  StorageType[] storageTypes=null;
  int count=getNumBlockWriteRetry();
  boolean success=false;
  ExtendedBlock oldBlock=block;
  do {
    errorState.resetInternalError();
    lastException.clear();
    DatanodeInfo[] excluded=excludedNodes.getAllPresent(excludedNodes.asMap().keySet()).keySet().toArray(new DatanodeInfo[0]);
    block=oldBlock;
    lb=locateFollowingBlock(excluded.length > 0 ? excluded : null);
    block=lb.getBlock();
    block.setNumBytes(0);
    bytesSent=0;
    accessToken=lb.getBlockToken();
    nodes=lb.getLocations();
    storageTypes=lb.getStorageTypes();
    success=createBlockOutputStream(nodes,storageTypes,0L,false);
    if (!success) {
      LOG.info("Abandoning " + block);
      dfsClient.namenode.abandonBlock(block,stat.getFileId(),src,dfsClient.clientName);
      block=null;
      final DatanodeInfo badNode=nodes[errorState.getBadNodeIndex()];
      LOG.info("Excluding datanode " + badNode);
      excludedNodes.put(badNode,badNode);
    }
  }
 while (!success && --count >= 0);
  if (!success) {
    throw new IOException("Unable to create new block.");
  }
  return lb;
}
