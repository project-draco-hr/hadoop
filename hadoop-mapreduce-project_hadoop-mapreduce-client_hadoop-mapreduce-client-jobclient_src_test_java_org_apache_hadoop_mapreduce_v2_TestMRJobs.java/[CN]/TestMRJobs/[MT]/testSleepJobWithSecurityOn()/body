{
  LOG.info("\n\n\nStarting testSleepJobWithSecurityOn().");
  if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) {
    return;
  }
  mrCluster.getConfig().set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  mrCluster.getConfig().set(RMConfig.RM_KEYTAB,"/etc/krb5.keytab");
  mrCluster.getConfig().set(NMConfig.NM_KEYTAB,"/etc/krb5.keytab");
  mrCluster.getConfig().set(YarnConfiguration.RM_SERVER_PRINCIPAL_KEY,"rm/sightbusy-lx@LOCALHOST");
  mrCluster.getConfig().set(YarnServerConfig.NM_SERVER_PRINCIPAL_KEY,"nm/sightbusy-lx@LOCALHOST");
  UserGroupInformation.setConfiguration(mrCluster.getConfig());
  UserGroupInformation user=UserGroupInformation.getCurrentUser();
  LOG.info("User name is " + user.getUserName());
  for (  Token<? extends TokenIdentifier> str : user.getTokens()) {
    LOG.info("Token is " + str.encodeToUrlString());
  }
  user.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      SleepJob sleepJob=new SleepJob();
      sleepJob.setConf(mrCluster.getConfig());
      Job job=sleepJob.createJob(3,0,10000,1,0,0);
      job.addFileToClassPath(APP_JAR);
      job.waitForCompletion(true);
      Assert.assertEquals(JobStatus.State.SUCCEEDED,job.getJobState());
      return null;
    }
  }
);
}
