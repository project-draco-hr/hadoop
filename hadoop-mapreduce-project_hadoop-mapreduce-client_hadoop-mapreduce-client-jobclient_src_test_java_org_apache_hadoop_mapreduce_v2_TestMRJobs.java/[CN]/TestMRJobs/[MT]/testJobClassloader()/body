{
  LOG.info("\n\n\nStarting testJobClassloader().");
  if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) {
    LOG.info("MRAppJar " + MiniMRYarnCluster.APPJAR + " not found. Not running test.");
    return;
  }
  final Configuration sleepConf=new Configuration(mrCluster.getConfig());
  sleepConf.set(MRConfig.MASTER_ADDRESS,"local");
  sleepConf.setBoolean(MRJobConfig.MAPREDUCE_JOB_CLASSLOADER,true);
  sleepConf.set(MRJobConfig.IO_SORT_MB,TEST_IO_SORT_MB);
  sleepConf.set(MRJobConfig.MR_AM_LOG_LEVEL,Level.ALL.toString());
  sleepConf.set(MRJobConfig.MAP_LOG_LEVEL,Level.ALL.toString());
  sleepConf.set(MRJobConfig.REDUCE_LOG_LEVEL,Level.ALL.toString());
  sleepConf.set(MRJobConfig.MAP_JAVA_OPTS,"-verbose:class");
  final SleepJob sleepJob=new SleepJob();
  sleepJob.setConf(sleepConf);
  final Job job=sleepJob.createJob(1,1,10,1,10,1);
  job.setMapperClass(ConfVerificationMapper.class);
  job.addFileToClassPath(APP_JAR);
  job.setJarByClass(SleepJob.class);
  job.setMaxMapAttempts(1);
  job.submit();
  boolean succeeded=job.waitForCompletion(true);
  Assert.assertTrue("Job status: " + job.getStatus().getFailureInfo(),succeeded);
}
