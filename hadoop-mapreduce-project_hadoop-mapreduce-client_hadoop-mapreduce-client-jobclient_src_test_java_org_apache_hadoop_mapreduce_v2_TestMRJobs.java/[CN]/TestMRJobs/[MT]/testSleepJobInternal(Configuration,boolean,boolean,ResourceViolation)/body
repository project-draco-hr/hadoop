{
  LOG.info("\n\n\nStarting testSleepJob: useRemoteJar=" + useRemoteJar);
  if (!jobSubmissionShouldSucceed && violation == null) {
    Assert.fail("Test is misconfigured. jobSubmissionShouldSucceed is set" + " to false and a ResourceViolation is not specified.");
  }
  if (!(new File(MiniMRYarnCluster.APPJAR)).exists()) {
    LOG.info("MRAppJar " + MiniMRYarnCluster.APPJAR + " not found. Not running test.");
    return;
  }
  sleepConf.set(MRConfig.MASTER_ADDRESS,"local");
  SleepJob sleepJob=new SleepJob();
  sleepJob.setConf(sleepConf);
  Job job=sleepJob.createJob(3,numSleepReducers,10000,1,5000,1);
  job.addFileToClassPath(APP_JAR);
  if (useRemoteJar) {
    final Path localJar=new Path(ClassUtil.findContainingJar(SleepJob.class));
    ConfigUtil.addLink(job.getConfiguration(),"/jobjars",localFs.makeQualified(localJar.getParent()).toUri());
    job.setJar("viewfs:///jobjars/" + localJar.getName());
  }
 else {
    job.setJarByClass(SleepJob.class);
  }
  job.setMaxMapAttempts(1);
  try {
    job.submit();
    Assert.assertTrue("JobSubmission succeeded when it should have failed.",jobSubmissionShouldSucceed);
  }
 catch (  IOException e) {
    if (jobSubmissionShouldSucceed) {
      Assert.fail("Job submission failed when it should have succeeded: " + e);
    }
switch (violation) {
case NUMBER_OF_RESOURCES:
      if (!e.getMessage().contains("This job has exceeded the maximum number of" + " submitted resources")) {
        Assert.fail("Test failed unexpectedly: " + e);
      }
    break;
case TOTAL_RESOURCE_SIZE:
  if (!e.getMessage().contains("This job has exceeded the maximum size of submitted resources")) {
    Assert.fail("Test failed unexpectedly: " + e);
  }
break;
case SINGLE_RESOURCE_SIZE:
if (!e.getMessage().contains("This job has exceeded the maximum size of a single submitted")) {
Assert.fail("Test failed unexpectedly: " + e);
}
break;
default :
Assert.fail("Test failed unexpectedly: " + e);
break;
}
return;
}
String trackingUrl=job.getTrackingURL();
String jobId=job.getJobID().toString();
boolean succeeded=job.waitForCompletion(true);
Assert.assertTrue(succeeded);
Assert.assertEquals(JobStatus.State.SUCCEEDED,job.getJobState());
Assert.assertTrue("Tracking URL was " + trackingUrl + " but didn't Match Job ID "+ jobId,trackingUrl.endsWith(jobId.substring(jobId.lastIndexOf("_")) + "/"));
verifySleepJobCounters(job);
verifyTaskProgress(job);
}
