{
  Configuration conf=context.getConfiguration();
  Path[] files=context.getLocalCacheFiles();
  Path[] archives=context.getLocalCacheArchives();
  FileSystem fs=LocalFileSystem.get(conf);
  Assert.assertEquals(4,files.length);
  Assert.assertEquals(2,archives.length);
  Assert.assertEquals(1,fs.getFileStatus(files[1]).getLen());
  Assert.assertTrue(fs.getFileStatus(files[2]).getLen() > 1);
  Assert.assertTrue(fs.exists(new Path(archives[0],"distributed.jar.inside3")));
  Assert.assertTrue(fs.exists(new Path(archives[1],"distributed.jar.inside4")));
  LOG.info("Java Classpath: " + System.getProperty("java.class.path"));
  ClassLoader cl=Thread.currentThread().getContextClassLoader();
  Assert.assertNotNull(cl.getResource("distributed.jar.inside2"));
  Assert.assertNotNull(cl.getResource("distributed.jar.inside3"));
  Assert.assertNotNull(cl.getResource("distributed.jar.inside4"));
  Assert.assertNotNull(cl.getResource("job.jar/"));
  Assert.assertNotNull(cl.getResource("job.jar/lib/lib1.jar"));
  Assert.assertNotNull(cl.getResource("job.jar/lib/lib2.jar"));
  File symlinkFile=new File("distributed.first.symlink");
  Assert.assertTrue(symlinkFile.exists());
  Assert.assertEquals(1,symlinkFile.length());
  File jobJarDir=new File("job.jar");
  Assert.assertTrue(FileUtils.isSymlink(jobJarDir));
  Assert.assertTrue(jobJarDir.isDirectory());
}
