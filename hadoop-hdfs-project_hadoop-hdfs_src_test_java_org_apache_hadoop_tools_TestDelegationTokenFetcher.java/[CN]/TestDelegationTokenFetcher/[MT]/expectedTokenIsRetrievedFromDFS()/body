{
  final byte[] ident=new DelegationTokenIdentifier(new Text("owner"),new Text("renewer"),new Text("realuser")).getBytes();
  final byte[] pw=new byte[]{42};
  final Text service=new Text(uri.toString());
  final String user=UserGroupInformation.getCurrentUser().getShortUserName();
  Token<DelegationTokenIdentifier> t=new Token<DelegationTokenIdentifier>(ident,pw,KIND,service);
  when(dfs.getDelegationToken(eq((String)null))).thenReturn(t);
  when(dfs.renewDelegationToken(eq(t))).thenReturn(1000L);
  when(dfs.getUri()).thenReturn(uri);
  FakeRenewer.reset();
  FileSystem fileSys=FileSystem.getLocal(conf);
  try {
    DelegationTokenFetcher.main(new String[]{"-fs",uri.toString(),tokenFile});
    Path p=new Path(fileSys.getWorkingDirectory(),tokenFile);
    Credentials creds=Credentials.readTokenStorageFile(p,conf);
    Iterator<Token<?>> itr=creds.getAllTokens().iterator();
    assertTrue(itr.hasNext());
    assertEquals(t,itr.next());
    assertTrue(!itr.hasNext());
    DelegationTokenFetcher.main(new String[]{"--print",tokenFile});
    DelegationTokenFetcher.main(new String[]{"--renew",tokenFile});
    assertEquals(t,FakeRenewer.lastRenewed);
    FakeRenewer.reset();
    DelegationTokenFetcher.main(new String[]{"--cancel",tokenFile});
    assertEquals(t,FakeRenewer.lastCanceled);
  }
  finally {
    fileSys.delete(new Path(tokenFile),true);
  }
}
