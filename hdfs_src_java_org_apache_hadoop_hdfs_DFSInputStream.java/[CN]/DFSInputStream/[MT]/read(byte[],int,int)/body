{
  dfsClient.checkOpen();
  if (closed) {
    throw new IOException("Stream closed");
  }
  Map<ExtendedBlock,Set<DatanodeInfo>> corruptedBlockMap=new HashMap<ExtendedBlock,Set<DatanodeInfo>>();
  failures=0;
  if (pos < getFileLength()) {
    int retries=2;
    while (retries > 0) {
      try {
        if (pos > blockEnd) {
          currentNode=blockSeekTo(pos);
        }
        int realLen=(int)Math.min((long)len,(blockEnd - pos + 1L));
        int result=readBuffer(buf,off,realLen,corruptedBlockMap);
        if (result >= 0) {
          pos+=result;
        }
 else {
          throw new IOException("Unexpected EOS from the reader");
        }
        if (dfsClient.stats != null && result != -1) {
          dfsClient.stats.incrementBytesRead(result);
        }
        return result;
      }
 catch (      ChecksumException ce) {
        throw ce;
      }
catch (      IOException e) {
        if (retries == 1) {
          DFSClient.LOG.warn("DFS Read: " + StringUtils.stringifyException(e));
        }
        blockEnd=-1;
        if (currentNode != null) {
          addToDeadNodes(currentNode);
        }
        if (--retries == 0) {
          throw e;
        }
      }
 finally {
        reportCheckSumFailure(corruptedBlockMap,currentLocatedBlock.getLocations().length);
      }
    }
  }
  return -1;
}
