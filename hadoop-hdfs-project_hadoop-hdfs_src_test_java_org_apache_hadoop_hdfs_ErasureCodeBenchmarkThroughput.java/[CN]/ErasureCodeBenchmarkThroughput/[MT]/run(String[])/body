{
  OpType type=null;
  int dataSizeMB=0;
  boolean isEc=true;
  int numClients=1;
  boolean statefulRead=true;
  if (args.length >= 3) {
    if (args[0].equals("read")) {
      type=OpType.READ;
    }
 else     if (args[0].equals("write")) {
      type=OpType.WRITE;
    }
 else     if (args[0].equals("gen")) {
      type=OpType.GEN;
    }
 else     if (args[0].equals("clean")) {
      type=OpType.CLEAN;
    }
 else {
      printUsage("Unknown operation: " + args[0]);
    }
    try {
      dataSizeMB=Integer.parseInt(args[1]);
      if (dataSizeMB <= 0) {
        printUsage("Invalid data size: " + dataSizeMB);
      }
    }
 catch (    NumberFormatException e) {
      printUsage("Invalid data size: " + e.getMessage());
    }
    isEc=args[2].equals("ec");
    if (!isEc && !args[2].equals("rep")) {
      printUsage("Unknown storage policy: " + args[2]);
    }
  }
 else {
    printUsage(null);
  }
  if (args.length >= 4 && type != OpType.CLEAN) {
    try {
      numClients=Integer.parseInt(args[3]);
      if (numClients <= 0) {
        printUsage("Invalid num of clients: " + numClients);
      }
    }
 catch (    NumberFormatException e) {
      printUsage("Invalid num of clients: " + e.getMessage());
    }
  }
  if (args.length >= 5 && type == OpType.READ) {
    statefulRead=args[4].equals("stf");
    if (!statefulRead && !args[4].equals("pos")) {
      printUsage("Unknown read mode: " + args[4]);
    }
  }
  setUpDir();
  if (type == OpType.CLEAN) {
    cleanUp(dataSizeMB,isEc);
  }
 else {
    if (type == OpType.READ && isEc) {
      setReadThreadPoolSize(numClients);
    }
    benchmark(type,dataSizeMB,numClients,isEc,statefulRead);
  }
  return 0;
}
