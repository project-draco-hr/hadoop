{
  if (expr == null || exprLength == 0) {
    return null;
  }
  TimelineCompareOp compareOp=null;
  int openingBracketIndex=expr.indexOf(TimelineParseConstants.OPENING_BRACKET_CHAR);
  if (expr.charAt(0) == TimelineParseConstants.NOT_CHAR) {
    if (openingBracketIndex == -1) {
      throw new TimelineParseException("Invalid config/metric to retrieve " + "expression");
    }
    if (openingBracketIndex != 1 && expr.substring(1,openingBracketIndex + 1).trim().length() != 1) {
      throw new TimelineParseException("Invalid config/metric to retrieve " + "expression");
    }
    compareOp=TimelineCompareOp.NOT_EQUAL;
  }
 else   if (openingBracketIndex <= 0) {
    compareOp=TimelineCompareOp.EQUAL;
  }
  char lastChar=expr.charAt(exprLength - 1);
  if (compareOp == TimelineCompareOp.NOT_EQUAL && lastChar != TimelineParseConstants.CLOSING_BRACKET_CHAR) {
    throw new TimelineParseException("Invalid config/metric to retrieve " + "expression");
  }
  if (openingBracketIndex != -1 && expr.charAt(exprLength - 1) == TimelineParseConstants.CLOSING_BRACKET_CHAR) {
    expr=expr.substring(openingBracketIndex + 1,exprLength - 1).trim();
  }
  if (expr.isEmpty()) {
    return null;
  }
  Operator op=(compareOp == TimelineCompareOp.NOT_EQUAL) ? Operator.AND : Operator.OR;
  TimelineFilterList list=new TimelineFilterList(op);
  String[] splits=expr.split(TimelineParseConstants.COMMA_DELIMITER);
  for (  String split : splits) {
    list.addFilter(new TimelinePrefixFilter(compareOp,split.trim()));
  }
  return list;
}
