{
  boolean loggingEnabled=LOG.isDebugEnabled();
  if (loggingEnabled) {
    LOG.debug("Got heartbeat from: " + status.getTrackerName() + " (restarted: "+ restarted+ " initialContact: "+ initialContact+ " acceptNewTasks: "+ acceptNewTasks+ ")"+ " with responseId: "+ responseId);
  }
  if (!(status instanceof SimulatorTaskTrackerStatus)) {
    throw new IllegalArgumentException("Expecting SimulatorTaskTrackerStatus, but got " + status.getClass());
  }
  SimulatorTaskTrackerStatus taskTrackerStatus=(SimulatorTaskTrackerStatus)status;
  String trackerName=taskTrackerStatus.getTrackerName();
  validateAndSetClock(taskTrackerStatus.getCurrentSimulationTime());
  HeartbeatResponse prevHeartbeatResponse=trackerToHeartbeatResponseMap.get(trackerName);
  if (initialContact != true) {
    if (prevHeartbeatResponse == null) {
      LOG.warn("Serious problem, cannot find record of 'previous' " + " heartbeat for '" + trackerName + "'; reinitializing the tasktracker");
      return new HeartbeatResponse(responseId,new TaskTrackerAction[]{new ReinitTrackerAction()});
    }
 else {
      if (prevHeartbeatResponse.getResponseId() != responseId) {
        if (loggingEnabled) {
          LOG.debug("Ignoring 'duplicate' heartbeat from '" + trackerName + "'; resending the previous 'lost' response");
        }
        return prevHeartbeatResponse;
      }
    }
  }
  if (loggingEnabled) {
    LOG.debug("processed heartbeat for responseId = " + responseId);
  }
  short newResponseId=(short)(responseId + 1);
  status.setLastSeen(getClock().getTime());
  if (!processHeartbeat(taskTrackerStatus,initialContact)) {
    if (prevHeartbeatResponse != null) {
      trackerToHeartbeatResponseMap.remove(trackerName);
    }
    return new HeartbeatResponse(newResponseId,new TaskTrackerAction[]{new ReinitTrackerAction()});
  }
  HeartbeatResponse response=new HeartbeatResponse(newResponseId,null);
  List<TaskTrackerAction> actions=new ArrayList<TaskTrackerAction>();
  if (acceptNewTasks) {
    TaskTracker taskTracker=getTaskTracker(trackerName);
    List<Task> tasks=taskScheduler.assignTasks(taskTracker);
    if (tasks != null) {
      if (loggingEnabled && tasks.size() > 0) {
        LOG.debug("Tasks found from TaskScheduler: number = " + tasks.size());
      }
      for (      Task task : tasks) {
        TaskAttemptID taskAttemptID=task.getTaskID();
        JobID jobID=taskAttemptID.getJobID();
        SimulatorJobInProgress job=getSimulatorJob(jobID);
        if (job == null) {
          LOG.error("Getting taskAttemptId=" + taskAttemptID + " for job "+ jobID+ " not present in SimulatorJobTracker");
          throw new IOException("Getting taskAttemptId=" + taskAttemptID + " for job "+ jobID+ " not present in SimulatorJobTracker");
        }
        if (loggingEnabled) {
          LOG.debug("Getting taskAttemptInfo for '" + taskAttemptID + "' for tracker '"+ trackerName+ "'");
        }
        TaskAttemptInfo taskAttemptInfo=job.getTaskAttemptInfo(taskTracker,taskAttemptID);
        if (taskAttemptInfo == null) {
          throw new RuntimeException("Empty taskAttemptInfo: " + "task information missing");
        }
        if (loggingEnabled) {
          LOG.debug("Adding LaunchTaskAction for '" + taskAttemptID + "' for tracker "+ trackerName+ " taskType="+ taskAttemptID.getTaskType()+ " time="+ getClock().getTime());
        }
        SimulatorLaunchTaskAction newlaunchTask=new SimulatorLaunchTaskAction(task,taskAttemptInfo);
        if (loggingEnabled) {
          LOG.debug("Job " + jobID + " launched taskattempt "+ taskAttemptID+ " at "+ getClock().getTime());
        }
        actions.add(newlaunchTask);
      }
    }
  }
  List<TaskTrackerAction> killTasksList=getTasksToKill(trackerName);
  if (killTasksList != null) {
    if (loggingEnabled) {
      for (      TaskTrackerAction ttAction : killTasksList) {
        LOG.debug("Time =" + getClock().getTime() + " tracker="+ trackerName+ " KillTaskAction for:"+ ((KillTaskAction)ttAction).getTaskID());
      }
    }
    actions.addAll(killTasksList);
  }
  List<TaskTrackerAction> commitTasksList=getTasksToSave(status);
  if (commitTasksList != null) {
    actions.addAll(commitTasksList);
  }
  List<TaskTrackerAction> mapCompletionTasks=getMapCompletionTasks(taskTrackerStatus,killTasksList);
  if (mapCompletionTasks != null) {
    actions.addAll(mapCompletionTasks);
  }
  if (loggingEnabled) {
    LOG.debug("Done with collection actions for tracker " + trackerName + " for responseId "+ responseId);
  }
  int nextInterval=getNextHeartbeatInterval();
  response.setHeartbeatInterval(nextInterval);
  response.setActions(actions.toArray(new TaskTrackerAction[actions.size()]));
  if (loggingEnabled) {
    LOG.debug("Nextinterval for tracker " + trackerName + " is "+ nextInterval);
  }
  trackerToHeartbeatResponseMap.put(trackerName,response);
  removeMarkedTasks(trackerName);
  return response;
}
