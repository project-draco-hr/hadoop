{
  final Configuration conf=new Configuration();
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(conf);
  CustomNM containerManager=new CustomNM();
  final DrainDispatcher dispatcher=new DrainDispatcher();
  MockRM rm=new MockRMWithCustomAMLauncher(conf,containerManager){
    protected ClientRMService createClientRMService(){
      return new ClientRMService(this.rmContext,scheduler,this.rmAppManager,this.applicationACLsManager,this.rmDTSecretManager);
    }
    @Override protected Dispatcher createDispatcher(){
      return dispatcher;
    }
    @Override protected void doSecureLogin() throws IOException {
    }
  }
;
  rm.start();
  RMApp app=rm.submitApp(1024);
  dispatcher.await();
  MockNM nm1=rm.registerNode("localhost:1234",3072);
  nm1.nodeHeartbeat(true);
  dispatcher.await();
  GetApplicationReportRequest request=Records.newRecord(GetApplicationReportRequest.class);
  request.setApplicationId(app.getApplicationId());
  GetApplicationReportResponse reportResponse=rm.getClientRMService().getApplicationReport(request);
  ApplicationReport appReport=reportResponse.getApplicationReport();
  String clientTokenEncoded=appReport.getClientToken();
  int waitTime=0;
  while (containerManager.clientTokensSecret == null && waitTime++ < 20) {
    Thread.sleep(1000);
  }
  Assert.assertNotNull(containerManager.clientTokensSecret);
  final CustomAM am=new CustomAM(app.getApplicationId(),containerManager.clientTokensSecret);
  am.init(conf);
  am.start();
  SecurityUtil.setSecurityInfoProviders(new CustomSecurityInfo());
  try {
    CustomProtocol client=(CustomProtocol)RPC.getProxy(CustomProtocol.class,1L,am.address,conf);
    client.ping();
    fail("Access by unauthenticated user should fail!!");
  }
 catch (  Exception e) {
    Assert.assertFalse(am.pinged);
  }
  UserGroupInformation ugi=UserGroupInformation.createRemoteUser("me");
  Token<ClientTokenIdentifier> clientToken=new Token<ClientTokenIdentifier>();
  clientToken.decodeFromUrlString(clientTokenEncoded);
  SecurityUtil.setTokenService(clientToken,am.address);
  ClientTokenIdentifier maliciousID=new ClientTokenIdentifier(BuilderUtils.newApplicationId(app.getApplicationId().getClusterTimestamp(),42));
  Token<ClientTokenIdentifier> maliciousToken=new Token<ClientTokenIdentifier>(maliciousID.getBytes(),clientToken.getPassword(),clientToken.getKind(),clientToken.getService());
  ugi.addToken(maliciousToken);
  try {
    ugi.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        CustomProtocol client=(CustomProtocol)RPC.getProxy(CustomProtocol.class,1L,am.address,conf);
        client.ping();
        fail("Connection initiation with illegally modified " + "tokens is expected to fail.");
        return null;
      }
    }
);
  }
 catch (  YarnRemoteException e) {
    fail("Cannot get a YARN remote exception as " + "it will indicate RPC success");
  }
catch (  Exception e) {
    Assert.assertEquals(java.lang.reflect.UndeclaredThrowableException.class.getCanonicalName(),e.getClass().getCanonicalName());
    Assert.assertTrue(e.getCause().getMessage().contains("DIGEST-MD5: digest response format violation. " + "Mismatched response."));
    Assert.assertFalse(am.pinged);
  }
  ugi=UserGroupInformation.createRemoteUser("me");
  ugi.addToken(clientToken);
  ugi.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      CustomProtocol client=(CustomProtocol)RPC.getProxy(CustomProtocol.class,1L,am.address,conf);
      client.ping();
      Assert.assertTrue(am.pinged);
      return null;
    }
  }
);
}
