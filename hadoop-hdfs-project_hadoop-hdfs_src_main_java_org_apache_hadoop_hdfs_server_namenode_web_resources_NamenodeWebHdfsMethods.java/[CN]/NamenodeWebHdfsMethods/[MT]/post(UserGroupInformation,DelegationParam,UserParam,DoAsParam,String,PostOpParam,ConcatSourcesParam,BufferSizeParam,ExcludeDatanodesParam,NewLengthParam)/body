{
  final NameNode namenode=(NameNode)context.getAttribute("name.node");
  final NamenodeProtocols np=getRPCServer(namenode);
switch (op.getValue()) {
case APPEND:
{
      final URI uri=redirectURI(namenode,ugi,delegation,username,doAsUser,fullpath,op.getValue(),-1L,-1L,excludeDatanodes.getValue(),bufferSize);
      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();
    }
case CONCAT:
{
    np.concat(fullpath,concatSrcs.getAbsolutePaths());
    return Response.ok().build();
  }
case TRUNCATE:
{
  if (newLength.getValue() == null) {
    throw new IllegalArgumentException("newLength parameter is Missing");
  }
  final boolean b=np.truncate(fullpath,newLength.getValue(),"DFSClient_" + DFSUtil.getSecureRandom().nextLong());
  final String js=JsonUtil.toJsonString("boolean",b);
  return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
default :
throw new UnsupportedOperationException(op + " is not supported");
}
}
