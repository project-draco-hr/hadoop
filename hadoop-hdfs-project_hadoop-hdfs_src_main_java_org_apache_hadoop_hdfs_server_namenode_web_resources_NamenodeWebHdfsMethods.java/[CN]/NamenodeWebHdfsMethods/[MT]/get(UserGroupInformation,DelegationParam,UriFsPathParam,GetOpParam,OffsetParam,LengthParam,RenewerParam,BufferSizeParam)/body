{
  if (LOG.isTraceEnabled()) {
    LOG.trace(op + ": " + path+ ", ugi="+ ugi+ Param.toSortedString(", ",offset,length,renewer,bufferSize));
  }
  return ugi.doAs(new PrivilegedExceptionAction<Response>(){
    @Override public Response run() throws IOException, URISyntaxException {
      REMOTE_ADDRESS.set(request.getRemoteAddr());
      try {
        final NameNode namenode=(NameNode)context.getAttribute("name.node");
        final String fullpath=path.getAbsolutePath();
        final NamenodeProtocols np=namenode.getRpcServer();
switch (op.getValue()) {
case OPEN:
{
            final URI uri=redirectURI(namenode,ugi,delegation,fullpath,op.getValue(),offset.getValue(),offset,length,bufferSize);
            return Response.temporaryRedirect(uri).build();
          }
case GETFILEBLOCKLOCATIONS:
{
          final long offsetValue=offset.getValue();
          final Long lengthValue=length.getValue();
          final LocatedBlocks locatedblocks=np.getBlockLocations(fullpath,offsetValue,lengthValue != null ? lengthValue : offsetValue + 1);
          final String js=JsonUtil.toJsonString(locatedblocks);
          return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
        }
case GETFILESTATUS:
{
        final HdfsFileStatus status=np.getFileInfo(fullpath);
        final String js=JsonUtil.toJsonString(status);
        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
      }
case LISTSTATUS:
{
      final StreamingOutput streaming=getListingStream(np,fullpath);
      return Response.ok(streaming).type(MediaType.APPLICATION_JSON).build();
    }
case GETCONTENTSUMMARY:
{
    final ContentSummary contentsummary=np.getContentSummary(fullpath);
    final String js=JsonUtil.toJsonString(contentsummary);
    return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
  }
case GETFILECHECKSUM:
{
  final URI uri=redirectURI(namenode,ugi,delegation,fullpath,op.getValue(),-1L);
  return Response.temporaryRedirect(uri).build();
}
case GETDELEGATIONTOKEN:
{
final Token<? extends TokenIdentifier> token=generateDelegationToken(namenode,ugi,renewer.getValue());
final String js=JsonUtil.toJsonString(token);
return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
default :
throw new UnsupportedOperationException(op + " is not supported");
}
}
  finally {
REMOTE_ADDRESS.set(null);
}
}
}
);
}
