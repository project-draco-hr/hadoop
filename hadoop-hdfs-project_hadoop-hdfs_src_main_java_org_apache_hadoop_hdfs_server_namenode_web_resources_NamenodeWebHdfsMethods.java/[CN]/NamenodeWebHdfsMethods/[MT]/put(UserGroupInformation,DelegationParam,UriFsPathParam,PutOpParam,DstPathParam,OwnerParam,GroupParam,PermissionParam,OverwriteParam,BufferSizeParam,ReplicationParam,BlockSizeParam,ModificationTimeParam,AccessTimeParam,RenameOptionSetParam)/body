{
  if (LOG.isTraceEnabled()) {
    LOG.trace(op + ": " + path+ ", ugi="+ ugi+ Param.toSortedString(", ",dstPath,owner,group,permission,overwrite,bufferSize,replication,blockSize,modificationTime,accessTime,renameOptions));
  }
  response.setContentType(null);
  return ugi.doAs(new PrivilegedExceptionAction<Response>(){
    @Override public Response run() throws IOException, URISyntaxException {
      REMOTE_ADDRESS.set(request.getRemoteAddr());
      try {
        final String fullpath=path.getAbsolutePath();
        final Configuration conf=(Configuration)context.getAttribute(JspHelper.CURRENT_CONF);
        final NameNode namenode=(NameNode)context.getAttribute("name.node");
        final NamenodeProtocols np=namenode.getRpcServer();
switch (op.getValue()) {
case CREATE:
{
            final URI uri=redirectURI(namenode,ugi,delegation,fullpath,op.getValue(),-1L,permission,overwrite,bufferSize,replication,blockSize);
            return Response.temporaryRedirect(uri).build();
          }
case MKDIRS:
{
          final boolean b=np.mkdirs(fullpath,permission.getFsPermission(),true);
          final String js=JsonUtil.toJsonString("boolean",b);
          return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
        }
case RENAME:
{
        final EnumSet<Options.Rename> s=renameOptions.getValue();
        if (s.isEmpty()) {
          final boolean b=np.rename(fullpath,dstPath.getValue());
          final String js=JsonUtil.toJsonString("boolean",b);
          return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
        }
 else {
          np.rename2(fullpath,dstPath.getValue(),s.toArray(new Options.Rename[s.size()]));
          return Response.ok().type(MediaType.APPLICATION_JSON).build();
        }
      }
case SETREPLICATION:
{
      final boolean b=np.setReplication(fullpath,replication.getValue(conf));
      final String js=JsonUtil.toJsonString("boolean",b);
      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
    }
case SETOWNER:
{
    np.setOwner(fullpath,owner.getValue(),group.getValue());
    return Response.ok().type(MediaType.APPLICATION_JSON).build();
  }
case SETPERMISSION:
{
  np.setPermission(fullpath,permission.getFsPermission());
  return Response.ok().type(MediaType.APPLICATION_JSON).build();
}
case SETTIMES:
{
np.setTimes(fullpath,modificationTime.getValue(),accessTime.getValue());
return Response.ok().type(MediaType.APPLICATION_JSON).build();
}
default :
throw new UnsupportedOperationException(op + " is not supported");
}
}
  finally {
REMOTE_ADDRESS.set(null);
}
}
}
);
}
