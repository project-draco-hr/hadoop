{
  final Configuration conf=(Configuration)context.getAttribute(JspHelper.CURRENT_CONF);
  final NameNode namenode=(NameNode)context.getAttribute("name.node");
  final NamenodeProtocols np=getRPCServer(namenode);
switch (op.getValue()) {
case CREATE:
{
      final URI uri=redirectURI(namenode,ugi,delegation,username,doAsUser,fullpath,op.getValue(),-1L,blockSize.getValue(conf),exclDatanodes.getValue(),permission,unmaskedPermission,overwrite,bufferSize,replication,blockSize,createParent,createFlagParam);
      if (!noredirectParam.getValue()) {
        return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();
      }
 else {
        final String js=JsonUtil.toJsonString("Location",uri);
        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
      }
    }
case MKDIRS:
{
    FsPermission masked=unmaskedPermission.getValue() == null ? permission.getDirFsPermission() : FsCreateModes.create(permission.getDirFsPermission(),unmaskedPermission.getDirFsPermission());
    final boolean b=np.mkdirs(fullpath,masked,true);
    final String js=JsonUtil.toJsonString("boolean",b);
    return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
  }
case CREATESYMLINK:
{
  np.createSymlink(destination.getValue(),fullpath,PermissionParam.getDefaultSymLinkFsPermission(),createParent.getValue());
  return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case RENAME:
{
final EnumSet<Options.Rename> s=renameOptions.getValue();
if (s.isEmpty()) {
  final boolean b=np.rename(fullpath,destination.getValue());
  final String js=JsonUtil.toJsonString("boolean",b);
  return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
 else {
  np.rename2(fullpath,destination.getValue(),s.toArray(new Options.Rename[s.size()]));
  return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
}
case SETREPLICATION:
{
final boolean b=np.setReplication(fullpath,replication.getValue(conf));
final String js=JsonUtil.toJsonString("boolean",b);
return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
case SETOWNER:
{
if (owner.getValue() == null && group.getValue() == null) {
throw new IllegalArgumentException("Both owner and group are empty.");
}
np.setOwner(fullpath,owner.getValue(),group.getValue());
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case SETPERMISSION:
{
np.setPermission(fullpath,permission.getDirFsPermission());
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case SETTIMES:
{
np.setTimes(fullpath,modificationTime.getValue(),accessTime.getValue());
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case RENEWDELEGATIONTOKEN:
{
final Token<DelegationTokenIdentifier> token=new Token<DelegationTokenIdentifier>();
token.decodeFromUrlString(delegationTokenArgument.getValue());
final long expiryTime=np.renewDelegationToken(token);
final String js=JsonUtil.toJsonString("long",expiryTime);
return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
case CANCELDELEGATIONTOKEN:
{
final Token<DelegationTokenIdentifier> token=new Token<DelegationTokenIdentifier>();
token.decodeFromUrlString(delegationTokenArgument.getValue());
np.cancelDelegationToken(token);
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case MODIFYACLENTRIES:
{
np.modifyAclEntries(fullpath,aclPermission.getAclPermission(true));
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case REMOVEACLENTRIES:
{
np.removeAclEntries(fullpath,aclPermission.getAclPermission(false));
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case REMOVEDEFAULTACL:
{
np.removeDefaultAcl(fullpath);
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case REMOVEACL:
{
np.removeAcl(fullpath);
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case SETACL:
{
np.setAcl(fullpath,aclPermission.getAclPermission(true));
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case SETXATTR:
{
np.setXAttr(fullpath,XAttrHelper.buildXAttr(xattrName.getXAttrName(),xattrValue.getXAttrValue()),xattrSetFlag.getFlag());
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case REMOVEXATTR:
{
np.removeXAttr(fullpath,XAttrHelper.buildXAttr(xattrName.getXAttrName()));
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case ALLOWSNAPSHOT:
{
np.allowSnapshot(fullpath);
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case CREATESNAPSHOT:
{
String snapshotPath=np.createSnapshot(fullpath,snapshotName.getValue());
final String js=JsonUtil.toJsonString(org.apache.hadoop.fs.Path.class.getSimpleName(),snapshotPath);
return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
case RENAMESNAPSHOT:
{
np.renameSnapshot(fullpath,oldSnapshotName.getValue(),snapshotName.getValue());
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case DISALLOWSNAPSHOT:
{
np.disallowSnapshot(fullpath);
return Response.ok().type(MediaType.APPLICATION_OCTET_STREAM).build();
}
default :
throw new UnsupportedOperationException(op + " is not supported");
}
}
