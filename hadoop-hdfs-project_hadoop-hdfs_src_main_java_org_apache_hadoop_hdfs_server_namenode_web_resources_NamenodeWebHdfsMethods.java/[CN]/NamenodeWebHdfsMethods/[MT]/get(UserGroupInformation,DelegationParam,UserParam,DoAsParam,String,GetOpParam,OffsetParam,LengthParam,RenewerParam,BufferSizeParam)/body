{
  final NameNode namenode=(NameNode)context.getAttribute("name.node");
  final NamenodeProtocols np=namenode.getRpcServer();
switch (op.getValue()) {
case OPEN:
{
      final URI uri=redirectURI(namenode,ugi,delegation,username,doAsUser,fullpath,op.getValue(),offset.getValue(),-1L,offset,length,bufferSize);
      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();
    }
case GET_BLOCK_LOCATIONS:
{
    final long offsetValue=offset.getValue();
    final Long lengthValue=length.getValue();
    final LocatedBlocks locatedblocks=np.getBlockLocations(fullpath,offsetValue,lengthValue != null ? lengthValue : Long.MAX_VALUE);
    final String js=JsonUtil.toJsonString(locatedblocks);
    return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
  }
case GETFILESTATUS:
{
  final HdfsFileStatus status=np.getFileInfo(fullpath);
  if (status == null) {
    throw new FileNotFoundException("File does not exist: " + fullpath);
  }
  final String js=JsonUtil.toJsonString(status,true);
  return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
case LISTSTATUS:
{
final StreamingOutput streaming=getListingStream(np,fullpath);
return Response.ok(streaming).type(MediaType.APPLICATION_JSON).build();
}
case GETCONTENTSUMMARY:
{
final ContentSummary contentsummary=np.getContentSummary(fullpath);
final String js=JsonUtil.toJsonString(contentsummary);
return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
case GETFILECHECKSUM:
{
final URI uri=redirectURI(namenode,ugi,delegation,username,doAsUser,fullpath,op.getValue(),-1L,-1L);
return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();
}
case GETDELEGATIONTOKEN:
{
if (delegation.getValue() != null) {
throw new IllegalArgumentException(delegation.getName() + " parameter is not null.");
}
final Token<? extends TokenIdentifier> token=generateDelegationToken(namenode,ugi,renewer.getValue());
final String js=JsonUtil.toJsonString(token);
return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
case GETDELEGATIONTOKENS:
{
if (delegation.getValue() != null) {
throw new IllegalArgumentException(delegation.getName() + " parameter is not null.");
}
final Token<? extends TokenIdentifier>[] tokens=new Token<?>[1];
tokens[0]=generateDelegationToken(namenode,ugi,renewer.getValue());
final String js=JsonUtil.toJsonString(tokens);
return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
case GETHOMEDIRECTORY:
{
final String js=JsonUtil.toJsonString(org.apache.hadoop.fs.Path.class.getSimpleName(),WebHdfsFileSystem.getHomeDirectoryString(ugi));
return Response.ok(js).type(MediaType.APPLICATION_JSON).build();
}
default :
throw new UnsupportedOperationException(op + " is not supported");
}
}
