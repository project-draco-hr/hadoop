{
  VerticaConfiguration vtconfig=new VerticaConfiguration(conf);
  Connection conn=vtconfig.getConnection(true);
  String tableName=vtconfig.getOutputTableName();
  Statement stmt=conn.createStatement();
  ResultSet rs=null;
  StringBuffer designTables=new StringBuffer(tableName);
  HashSet<String> tablesWithTemp=new HashSet<String>();
  if (tableName.indexOf(".") == -1) {
    tableName="public." + tableName;
  }
  tablesWithTemp.add(tableName);
  HashMap<String,Collection<String>> tableProj=new HashMap<String,Collection<String>>();
  rs=stmt.executeQuery("select schemaname, anchortablename, projname from vt_projection;");
  while (rs.next()) {
    String ptable=rs.getString(1) + "." + rs.getString(2);
    if (!tableProj.containsKey(ptable)) {
      tableProj.put(ptable,new HashSet<String>());
    }
    tableProj.get(ptable).add(rs.getString(3));
  }
  for (  String table : tablesWithTemp) {
    if (!tableProj.containsKey(table)) {
      throw new RuntimeException("Cannot optimize table with no data: " + table);
    }
  }
  String designName=(new Integer(conn.hashCode())).toString();
  stmt.execute("select create_projection_design('" + designName + "', '', '"+ designTables.toString()+ "')");
  if (VerticaUtil.verticaVersion(conf,true) >= VerticaConfiguration.VERSION_3_5) {
    stmt.execute("select deploy_design('" + designName + "', '"+ designName+ "')");
  }
 else {
    rs=stmt.executeQuery("select get_design_script('" + designName + "', '"+ designName+ "')");
    rs.next();
    String[] projSet=rs.getString(1).split(";");
    for (    String proj : projSet) {
      stmt.execute(proj);
    }
    stmt.execute("select start_refresh()");
    boolean refreshing=true;
    Long timeout=vtconfig.getOptimizePollTimeout();
    while (refreshing) {
      refreshing=false;
      rs=stmt.executeQuery("select table_name, status from vt_projection_refresh");
      while (rs.next()) {
        String table=rs.getString(1);
        String stat=rs.getString(2);
        if (stat.equals("refreshing") && tablesWithTemp.contains(table))         refreshing=true;
      }
      rs.close();
      Thread.sleep(timeout);
    }
    stmt.execute("select make_ahm_now()");
    for (    String table : tablesWithTemp) {
      for (      String proj : tableProj.get(table)) {
        stmt.execute("DROP PROJECTION " + proj);
      }
    }
    stmt.close();
  }
}
