{
  Configuration conf=new Configuration();
  ExecutionSummarizer es=new ExecutionSummarizer();
  assertEquals("ExecutionSummarizer init failed",Summarizer.NA,es.getCommandLineArgsString());
  long startTime=System.currentTimeMillis();
  String[] initArgs=new String[]{"-Xmx20m","-Dtest.args='test'"};
  es=new ExecutionSummarizer(initArgs);
  assertEquals("ExecutionSummarizer init failed","-Xmx20m -Dtest.args='test'",es.getCommandLineArgsString());
  assertTrue("Start time mismatch",es.getStartTime() >= startTime);
  assertTrue("Start time mismatch",es.getStartTime() <= System.currentTimeMillis());
  es.update(null);
  assertEquals("ExecutionSummarizer init failed",0,es.getSimulationStartTime());
  testExecutionSummarizer(0,0,0,0,0,0,es);
  long simStartTime=System.currentTimeMillis();
  es.start(null);
  assertTrue("Simulation start time mismatch",es.getSimulationStartTime() >= simStartTime);
  assertTrue("Simulation start time mismatch",es.getSimulationStartTime() <= System.currentTimeMillis());
  JobStats stats=generateFakeJobStats(1,10,true);
  es.update(stats);
  testExecutionSummarizer(1,10,0,1,1,0,es);
  stats=generateFakeJobStats(5,1,false);
  es.update(stats);
  testExecutionSummarizer(6,11,0,2,1,1,es);
  JobFactory factory=new FakeJobFactory(conf);
  factory.numJobsInTrace=3;
  Path rootTempDir=new Path(System.getProperty("test.build.data","/tmp"));
  Path testDir=new Path(rootTempDir,"testGridmixSummary");
  Path testTraceFile=new Path(testDir,"test-trace.json");
  FileSystem fs=FileSystem.getLocal(conf);
  fs.create(testTraceFile).close();
  UserResolver resolver=new RoundRobinUserResolver();
  DataStatistics dataStats=new DataStatistics(100,2,true);
  String policy=GridmixJobSubmissionPolicy.REPLAY.name();
  conf.set(GridmixJobSubmissionPolicy.JOB_SUBMISSION_POLICY,policy);
  es.finalize(factory,testTraceFile.toString(),1024L,resolver,dataStats,conf);
  assertEquals("Mismtach in num jobs in trace",3,es.getNumJobsInTrace());
  String tid=ExecutionSummarizer.getTraceSignature(testTraceFile.toString());
  assertEquals("Mismatch in trace signature",tid,es.getInputTraceSignature());
  Path qPath=fs.makeQualified(testTraceFile);
  assertEquals("Mismatch in trace signature",qPath.toString(),es.getInputTraceLocation());
  assertEquals("Mismatch in expected data size","1.0k",es.getExpectedDataSize());
  assertEquals("Mismatch in input data statistics",ExecutionSummarizer.stringifyDataStatistics(dataStats),es.getInputDataStatistics());
  assertEquals("Mismatch in user resolver",resolver.getClass().getName(),es.getUserResolver());
  assertEquals("Mismatch in policy",policy,es.getJobSubmissionPolicy());
  es.finalize(factory,testTraceFile.toString(),1024 * 1024 * 1024* 10L,resolver,dataStats,conf);
  assertEquals("Mismatch in expected data size","10.0g",es.getExpectedDataSize());
  fs.delete(testTraceFile,false);
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException ie) {
  }
  fs.create(testTraceFile).close();
  es.finalize(factory,testTraceFile.toString(),0L,resolver,dataStats,conf);
  assertEquals("Mismatch in trace signature",Summarizer.NA,es.getExpectedDataSize());
  assertFalse("Mismatch in trace signature",tid.equals(es.getInputTraceSignature()));
  tid=ExecutionSummarizer.getTraceSignature(testTraceFile.toString());
  assertEquals("Mismatch in trace signature",tid,es.getInputTraceSignature());
  testTraceFile=new Path(testDir,"test-trace2.json");
  fs.create(testTraceFile).close();
  es.finalize(factory,testTraceFile.toString(),0L,resolver,dataStats,conf);
  assertFalse("Mismatch in trace signature",tid.equals(es.getInputTraceSignature()));
  tid=ExecutionSummarizer.getTraceSignature(testTraceFile.toString());
  assertEquals("Mismatch in trace signature",tid,es.getInputTraceSignature());
}
