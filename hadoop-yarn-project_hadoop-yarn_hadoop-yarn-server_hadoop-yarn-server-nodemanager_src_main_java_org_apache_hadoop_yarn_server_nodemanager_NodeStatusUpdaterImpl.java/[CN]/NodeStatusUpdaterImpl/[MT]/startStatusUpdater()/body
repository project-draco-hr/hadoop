{
  statusUpdaterRunnable=new Runnable(){
    @Override @SuppressWarnings("unchecked") public void run(){
      int lastHeartbeatID=0;
      while (!isStopped) {
        try {
          NodeHeartbeatResponse response=null;
          Set<NodeLabel> nodeLabelsForHeartbeat=nodeLabelsHandler.getNodeLabelsForHeartbeat();
          NodeStatus nodeStatus=getNodeStatus(lastHeartbeatID);
          NodeHeartbeatRequest request=NodeHeartbeatRequest.newInstance(nodeStatus,NodeStatusUpdaterImpl.this.context.getContainerTokenSecretManager().getCurrentKey(),NodeStatusUpdaterImpl.this.context.getNMTokenSecretManager().getCurrentKey(),nodeLabelsForHeartbeat,NodeStatusUpdaterImpl.this.context.getRegisteredCollectors());
          if (logAggregationEnabled) {
            List<LogAggregationReport> logAggregationReports=getLogAggregationReportsForApps(context.getLogAggregationStatusForApps());
            if (logAggregationReports != null && !logAggregationReports.isEmpty()) {
              request.setLogAggregationReportsForApps(logAggregationReports);
            }
          }
          response=resourceTracker.nodeHeartbeat(request);
          nextHeartBeatInterval=response.getNextHeartBeatInterval();
          updateMasterKeys(response);
          if (!handleShutdownOrResyncCommand(response)) {
            nodeLabelsHandler.verifyRMHeartbeatResponseForNodeLabels(response);
            removeOrTrackCompletedContainersFromContext(response.getContainersToBeRemovedFromNM());
            logAggregationReportForAppsTempList.clear();
            lastHeartbeatID=response.getResponseId();
            List<ContainerId> containersToCleanup=response.getContainersToCleanup();
            if (!containersToCleanup.isEmpty()) {
              dispatcher.getEventHandler().handle(new CMgrCompletedContainersEvent(containersToCleanup,CMgrCompletedContainersEvent.Reason.BY_RESOURCEMANAGER));
            }
            List<ApplicationId> appsToCleanup=response.getApplicationsToCleanup();
            trackAppsForKeepAlive(appsToCleanup);
            if (!appsToCleanup.isEmpty()) {
              dispatcher.getEventHandler().handle(new CMgrCompletedAppsEvent(appsToCleanup,CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER));
            }
            Map<ApplicationId,ByteBuffer> systemCredentials=response.getSystemCredentialsForApps();
            if (systemCredentials != null && !systemCredentials.isEmpty()) {
              ((NMContext)context).setSystemCrendentialsForApps(parseCredentials(systemCredentials));
            }
            List<org.apache.hadoop.yarn.api.records.Container> containersToDecrease=response.getContainersToDecrease();
            if (!containersToDecrease.isEmpty()) {
              dispatcher.getEventHandler().handle(new CMgrDecreaseContainersResourceEvent(containersToDecrease));
            }
            List<SignalContainerRequest> containersToSignal=response.getContainersToSignalList();
            if (containersToSignal.size() != 0) {
              dispatcher.getEventHandler().handle(new CMgrSignalContainersEvent(containersToSignal));
            }
            ContainerQueuingLimit queuingLimit=response.getContainerQueuingLimit();
            if (queuingLimit != null) {
              context.getContainerManager().updateQueuingLimit(queuingLimit);
            }
          }
          Resource newResource=response.getResource();
          if (newResource != null) {
            updateNMResource(newResource);
            if (LOG.isDebugEnabled()) {
              LOG.debug("Node's resource is updated to " + newResource.toString());
            }
          }
          Map<ApplicationId,String> knownCollectors=response.getAppCollectorsMap();
          ((NodeManager.NMContext)context).addKnownCollectors(knownCollectors);
        }
 catch (        ConnectException e) {
          dispatcher.getEventHandler().handle(new NodeManagerEvent(NodeManagerEventType.SHUTDOWN));
          failedToConnect=true;
          throw new YarnRuntimeException(e);
        }
catch (        Throwable e) {
          LOG.error("Caught exception in status-updater",e);
        }
 finally {
synchronized (heartbeatMonitor) {
            nextHeartBeatInterval=nextHeartBeatInterval <= 0 ? YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS : nextHeartBeatInterval;
            try {
              heartbeatMonitor.wait(nextHeartBeatInterval);
            }
 catch (            InterruptedException e) {
            }
          }
        }
      }
    }
    private void updateMasterKeys(    NodeHeartbeatResponse response){
      MasterKey updatedMasterKey=response.getContainerTokenMasterKey();
      if (updatedMasterKey != null) {
        context.getContainerTokenSecretManager().setMasterKey(updatedMasterKey);
      }
      updatedMasterKey=response.getNMTokenMasterKey();
      if (updatedMasterKey != null) {
        context.getNMTokenSecretManager().setMasterKey(updatedMasterKey);
      }
    }
  }
;
  statusUpdater=new Thread(statusUpdaterRunnable,"Node Status Updater");
  statusUpdater.start();
}
