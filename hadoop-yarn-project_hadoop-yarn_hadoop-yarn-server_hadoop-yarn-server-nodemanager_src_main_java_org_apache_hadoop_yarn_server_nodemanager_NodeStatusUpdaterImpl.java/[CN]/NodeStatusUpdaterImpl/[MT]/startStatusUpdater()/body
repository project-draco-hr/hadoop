{
  statusUpdaterRunnable=new Runnable(){
    @Override @SuppressWarnings("unchecked") public void run(){
      int lastHeartBeatID=0;
      while (!isStopped) {
        try {
          NodeHeartbeatResponse response=null;
          NodeStatus nodeStatus=getNodeStatus(lastHeartBeatID);
          NodeHeartbeatRequest request=NodeHeartbeatRequest.newInstance(nodeStatus,NodeStatusUpdaterImpl.this.context.getContainerTokenSecretManager().getCurrentKey(),NodeStatusUpdaterImpl.this.context.getNMTokenSecretManager().getCurrentKey());
          response=resourceTracker.nodeHeartbeat(request);
          nextHeartBeatInterval=response.getNextHeartBeatInterval();
          updateMasterKeys(response);
          if (response.getNodeAction() == NodeAction.SHUTDOWN) {
            LOG.warn("Recieved SHUTDOWN signal from Resourcemanager as part of heartbeat," + " hence shutting down.");
            LOG.warn("Message from ResourceManager: " + response.getDiagnosticsMessage());
            dispatcher.getEventHandler().handle(new NodeManagerEvent(NodeManagerEventType.SHUTDOWN));
            break;
          }
          if (response.getNodeAction() == NodeAction.RESYNC) {
            LOG.warn("Node is out of sync with ResourceManager," + " hence resyncing.");
            LOG.warn("Message from ResourceManager: " + response.getDiagnosticsMessage());
            NodeStatusUpdaterImpl.this.rmIdentifier=ResourceManagerConstants.RM_INVALID_IDENTIFIER;
            dispatcher.getEventHandler().handle(new NodeManagerEvent(NodeManagerEventType.RESYNC));
            break;
          }
          removeCompletedContainersFromContext();
          lastHeartBeatID=response.getResponseId();
          List<ContainerId> containersToCleanup=response.getContainersToCleanup();
          if (!containersToCleanup.isEmpty()) {
            dispatcher.getEventHandler().handle(new CMgrCompletedContainersEvent(containersToCleanup,CMgrCompletedContainersEvent.Reason.BY_RESOURCEMANAGER));
          }
          List<ApplicationId> appsToCleanup=response.getApplicationsToCleanup();
          trackAppsForKeepAlive(appsToCleanup);
          if (!appsToCleanup.isEmpty()) {
            dispatcher.getEventHandler().handle(new CMgrCompletedAppsEvent(appsToCleanup,CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER));
          }
        }
 catch (        ConnectException e) {
          dispatcher.getEventHandler().handle(new NodeManagerEvent(NodeManagerEventType.SHUTDOWN));
          throw new YarnRuntimeException(e);
        }
catch (        Throwable e) {
          LOG.error("Caught exception in status-updater",e);
        }
 finally {
synchronized (heartbeatMonitor) {
            nextHeartBeatInterval=nextHeartBeatInterval <= 0 ? YarnConfiguration.DEFAULT_RM_NM_HEARTBEAT_INTERVAL_MS : nextHeartBeatInterval;
            try {
              heartbeatMonitor.wait(nextHeartBeatInterval);
            }
 catch (            InterruptedException e) {
            }
          }
        }
      }
    }
    private void updateMasterKeys(    NodeHeartbeatResponse response){
      MasterKey updatedMasterKey=response.getContainerTokenMasterKey();
      if (updatedMasterKey != null) {
        context.getContainerTokenSecretManager().setMasterKey(updatedMasterKey);
      }
      updatedMasterKey=response.getNMTokenMasterKey();
      if (updatedMasterKey != null) {
        context.getNMTokenSecretManager().setMasterKey(updatedMasterKey);
      }
    }
  }
;
  statusUpdater=new Thread(statusUpdaterRunnable,"Node Status Updater");
  statusUpdater.start();
}
