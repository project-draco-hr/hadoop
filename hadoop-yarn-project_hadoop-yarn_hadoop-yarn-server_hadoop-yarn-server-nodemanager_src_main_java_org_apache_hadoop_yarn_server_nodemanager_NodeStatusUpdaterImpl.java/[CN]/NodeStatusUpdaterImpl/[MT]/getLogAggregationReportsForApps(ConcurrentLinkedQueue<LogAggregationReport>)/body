{
  Map<ApplicationId,LogAggregationReport> latestLogAggregationReports=new HashMap<ApplicationId,LogAggregationReport>();
  LogAggregationReport status;
  while ((status=lastestLogAggregationStatus.poll()) != null) {
    this.logAggregationReportForAppsTempList.add(status);
  }
  for (  LogAggregationReport logAggregationReport : this.logAggregationReportForAppsTempList) {
    LogAggregationReport report=null;
    if (latestLogAggregationReports.containsKey(logAggregationReport.getApplicationId())) {
      report=latestLogAggregationReports.get(logAggregationReport.getApplicationId());
      report.setLogAggregationStatus(logAggregationReport.getLogAggregationStatus());
      String message=report.getDiagnosticMessage();
      if (logAggregationReport.getDiagnosticMessage() != null && !logAggregationReport.getDiagnosticMessage().isEmpty()) {
        if (message != null) {
          message+=logAggregationReport.getDiagnosticMessage();
        }
 else {
          message=logAggregationReport.getDiagnosticMessage();
        }
        report.setDiagnosticMessage(message);
      }
    }
 else {
      report=Records.newRecord(LogAggregationReport.class);
      report.setApplicationId(logAggregationReport.getApplicationId());
      report.setNodeId(this.nodeId);
      report.setLogAggregationStatus(logAggregationReport.getLogAggregationStatus());
      report.setDiagnosticMessage(logAggregationReport.getDiagnosticMessage());
    }
    latestLogAggregationReports.put(logAggregationReport.getApplicationId(),report);
  }
  return latestLogAggregationReports;
}
