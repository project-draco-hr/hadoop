{
  int memoryMb=conf.getInt(YarnConfiguration.NM_PMEM_MB,YarnConfiguration.DEFAULT_NM_PMEM_MB);
  float vMemToPMem=conf.getFloat(YarnConfiguration.NM_VMEM_PMEM_RATIO,YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);
  int virtualMemoryMb=(int)Math.ceil(memoryMb * vMemToPMem);
  int virtualCores=conf.getInt(YarnConfiguration.NM_VCORES,YarnConfiguration.DEFAULT_NM_VCORES);
  this.totalResource=Resource.newInstance(memoryMb,virtualCores);
  metrics.addResource(totalResource);
  this.tokenKeepAliveEnabled=isTokenKeepAliveEnabled(conf);
  this.tokenRemovalDelayMs=conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);
  this.minimumResourceManagerVersion=conf.get(YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);
  durationToTrackStoppedContainers=conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,600000);
  if (durationToTrackStoppedContainers < 0) {
    String message="Invalid configuration for " + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + " default "+ "value is 10Min(600000).";
    LOG.error(message);
    throw new YarnException(message);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + " :" + durationToTrackStoppedContainers);
  }
  super.serviceInit(conf);
  LOG.info("Initialized nodemanager with :" + " physical-memory=" + memoryMb + " virtual-memory="+ virtualMemoryMb+ " virtual-cores="+ virtualCores);
  this.logAggregationEnabled=conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);
}
