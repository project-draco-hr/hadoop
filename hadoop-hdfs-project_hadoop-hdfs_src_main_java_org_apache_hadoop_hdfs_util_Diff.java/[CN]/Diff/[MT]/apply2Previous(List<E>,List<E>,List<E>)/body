{
  final List<E> tmp=new ArrayList<E>(previous.size() - dlist.size());
{
    final Iterator<E> i=previous.iterator();
    for (    E deleted : dlist) {
      E e=i.next();
      int cmp=0;
      for (; (cmp=e.compareTo(deleted.getKey())) < 0; e=i.next()) {
        tmp.add(e);
      }
      Preconditions.checkState(cmp == 0);
    }
    for (; i.hasNext(); ) {
      tmp.add(i.next());
    }
  }
  final List<E> current=new ArrayList<E>(tmp.size() + clist.size());
{
    final Iterator<E> tmpIterator=tmp.iterator();
    final Iterator<E> cIterator=clist.iterator();
    E t=tmpIterator.hasNext() ? tmpIterator.next() : null;
    E c=cIterator.hasNext() ? cIterator.next() : null;
    for (; t != null || c != null; ) {
      final int cmp=c == null ? 1 : t == null ? -1 : c.compareTo(t.getKey());
      if (cmp < 0) {
        current.add(c);
        c=cIterator.hasNext() ? cIterator.next() : null;
      }
 else       if (cmp > 0) {
        current.add(t);
        t=tmpIterator.hasNext() ? tmpIterator.next() : null;
      }
 else {
        throw new AssertionError("Violated assumption (A3).");
      }
    }
  }
  return current;
}
