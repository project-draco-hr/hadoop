{
  CachePool pool=cachePools.get(directive.getPool());
  if (pool == null) {
    LOG.info("addDirective " + directive + ": pool not found.");
    throw new InvalidPoolNameError(directive);
  }
  if ((pc != null) && (!pc.checkPermission(pool,FsAction.WRITE))) {
    LOG.info("addDirective " + directive + ": write permission denied.");
    throw new PoolWritePermissionDeniedError(directive);
  }
  try {
    directive.validate();
  }
 catch (  IOException ioe) {
    LOG.info("addDirective " + directive + ": validation failed: "+ ioe.getClass().getName()+ ": "+ ioe.getMessage());
    throw ioe;
  }
  PathBasedCacheEntry existing=findEntry(directive);
  if (existing != null) {
    LOG.info("addDirective " + directive + ": there is an "+ "existing directive "+ existing+ " in this pool.");
    return existing.getDescriptor();
  }
  PathBasedCacheEntry entry;
  try {
    entry=new PathBasedCacheEntry(getNextEntryId(),directive.getPath(),pool);
  }
 catch (  IOException ioe) {
    throw new UnexpectedAddPathBasedCacheDirectiveException(directive);
  }
  LOG.info("addDirective " + directive + ": added cache directive "+ directive);
  entriesById.put(entry.getEntryId(),entry);
  String path=directive.getPath();
  List<PathBasedCacheEntry> entryList=entriesByPath.get(path);
  if (entryList == null) {
    entryList=new ArrayList<PathBasedCacheEntry>(1);
    entriesByPath.put(path,entryList);
  }
  entryList.add(entry);
  try {
    INode node=dir.getINode(directive.getPath());
    if (node != null && node.isFile()) {
      INodeFile file=node.asFile();
      namesystem.setCacheReplicationInt(directive.getPath(),file.getBlockReplication());
    }
 else {
      LOG.warn("Path " + directive.getPath() + " is not a file");
    }
  }
 catch (  IOException ioe) {
    LOG.info("addDirective " + directive + ": failed to cache file: "+ ioe.getClass().getName()+ ": "+ ioe.getMessage());
    throw ioe;
  }
  return entry.getDescriptor();
}
