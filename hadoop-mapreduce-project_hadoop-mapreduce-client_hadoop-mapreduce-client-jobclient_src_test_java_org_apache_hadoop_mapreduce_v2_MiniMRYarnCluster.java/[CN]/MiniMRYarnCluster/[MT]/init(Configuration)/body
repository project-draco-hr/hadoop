{
  conf.set(MRConfig.FRAMEWORK_NAME,MRConfig.YARN_FRAMEWORK_NAME);
  conf.set(MRJobConfig.MR_AM_STAGING_DIR,new File(getTestWorkDir(),"apps_staging_dir/").getAbsolutePath());
  conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,"000");
  try {
    Path stagingPath=FileContext.getFileContext(conf).makeQualified(new Path(conf.get(MRJobConfig.MR_AM_STAGING_DIR)));
    FileContext fc=FileContext.getFileContext(stagingPath.toUri(),conf);
    if (fc.util().exists(stagingPath)) {
      LOG.info(stagingPath + " exists! deleting...");
      fc.delete(stagingPath,true);
    }
    LOG.info("mkdir: " + stagingPath);
    fc.mkdir(stagingPath,null,true);
    String doneDir=JobHistoryUtils.getConfiguredHistoryServerDoneDirPrefix(conf);
    Path doneDirPath=fc.makeQualified(new Path(doneDir));
    fc.mkdir(doneDirPath,null,true);
  }
 catch (  IOException e) {
    throw new YarnException("Could not create staging directory. ",e);
  }
  conf.set(MRConfig.MASTER_ADDRESS,"test");
  conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,new String[]{ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID});
  conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT,ShuffleHandler.MAPREDUCE_SHUFFLE_SERVICEID),ShuffleHandler.class,Service.class);
  conf.setInt(ShuffleHandler.SHUFFLE_PORT_CONFIG_KEY,0);
  conf.setClass(YarnConfiguration.NM_CONTAINER_EXECUTOR,DefaultContainerExecutor.class,ContainerExecutor.class);
  conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE,false);
  conf.set(JHAdminConfig.MR_HISTORY_ADDRESS,JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);
  super.init(conf);
}
