{
  final String infoHost=bindAddress.getHostName();
  if (UserGroupInformation.isSecurityEnabled()) {
    String httpsUser=SecurityUtil.getServerPrincipal(conf.get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY),infoHost);
    if (httpsUser == null) {
      LOG.warn(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY + " not defined in config. Starting http server as " + getDefaultServerPrincipal()+ ": Kerberized SSL may be not function correctly.");
    }
 else {
      LOG.info("Logging in as " + httpsUser + " to start http server.");
      SecurityUtil.login(conf,DFSConfigKeys.DFS_NAMENODE_KEYTAB_FILE_KEY,DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY,infoHost);
    }
  }
  UserGroupInformation ugi=UserGroupInformation.getLoginUser();
  try {
    this.httpServer=ugi.doAs(new PrivilegedExceptionAction<HttpServer>(){
      @Override public HttpServer run() throws IOException, InterruptedException {
        int infoPort=bindAddress.getPort();
        httpServer=new HttpServer("hdfs",infoHost,infoPort,infoPort == 0,conf,new AccessControlList(conf.get(DFSConfigKeys.DFS_ADMIN," "))){
{
            if (WebHdfsFileSystem.isEnabled(conf,LOG)) {
              final String name="SPNEGO";
              final String classname=AuthFilter.class.getName();
              final String pathSpec=WebHdfsFileSystem.PATH_PREFIX + "/*";
              Map<String,String> params=getAuthFilterParams(conf);
              defineFilter(webAppContext,name,classname,params,new String[]{pathSpec});
              LOG.info("Added filter '" + name + "' (class="+ classname+ ")");
              addJerseyResourcePackage(NamenodeWebHdfsMethods.class.getPackage().getName() + ";" + Param.class.getPackage().getName(),pathSpec);
            }
          }
          private Map<String,String> getAuthFilterParams(          Configuration conf) throws IOException {
            Map<String,String> params=new HashMap<String,String>();
            String principalInConf=conf.get(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY);
            if (principalInConf != null && !principalInConf.isEmpty()) {
              params.put(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY,SecurityUtil.getServerPrincipal(principalInConf,infoHost));
            }
            String httpKeytab=conf.get(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY);
            if (httpKeytab != null && !httpKeytab.isEmpty()) {
              params.put(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY,httpKeytab);
            }
            return params;
          }
        }
;
        boolean certSSL=conf.getBoolean(DFSConfigKeys.DFS_HTTPS_ENABLE_KEY,false);
        boolean useKrb=UserGroupInformation.isSecurityEnabled();
        if (certSSL || useKrb) {
          boolean needClientAuth=conf.getBoolean(DFSConfigKeys.DFS_CLIENT_HTTPS_NEED_AUTH_KEY,DFSConfigKeys.DFS_CLIENT_HTTPS_NEED_AUTH_DEFAULT);
          InetSocketAddress secInfoSocAddr=NetUtils.createSocketAddr(conf.get(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_DEFAULT));
          Configuration sslConf=new HdfsConfiguration(false);
          if (certSSL) {
            sslConf.addResource(conf.get(DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY,DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_DEFAULT));
          }
          httpServer.addSslListener(secInfoSocAddr,sslConf,needClientAuth,useKrb);
          InetSocketAddress datanodeSslPort=NetUtils.createSocketAddr(conf.get(DFS_DATANODE_HTTPS_ADDRESS_KEY,infoHost + ":" + DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT));
          httpServer.setAttribute(DFSConfigKeys.DFS_DATANODE_HTTPS_PORT_KEY,datanodeSslPort.getPort());
        }
        httpServer.setAttribute(NAMENODE_ATTRIBUTE_KEY,nn);
        httpServer.setAttribute(NAMENODE_ADDRESS_ATTRIBUTE_KEY,nn.getNameNodeAddress());
        httpServer.setAttribute(FSIMAGE_ATTRIBUTE_KEY,nn.getFSImage());
        httpServer.setAttribute(JspHelper.CURRENT_CONF,conf);
        setupServlets(httpServer,conf);
        httpServer.start();
        infoPort=httpServer.getPort();
        httpAddress=new InetSocketAddress(infoHost,infoPort);
        LOG.info(nn.getRole() + " Web-server up at: " + httpAddress);
        return httpServer;
      }
    }
);
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
 finally {
    if (UserGroupInformation.isSecurityEnabled() && conf.get(DFSConfigKeys.DFS_NAMENODE_KRB_HTTPS_USER_NAME_KEY) != null) {
      LOG.info("Logging back in as NameNode user following http server start");
      nn.loginAsNameNodeUser(conf);
    }
  }
}
