{
  HttpConfig.Policy policy=DFSUtil.getHttpPolicy(conf);
  final String infoHost=bindAddress.getHostName();
  final InetSocketAddress httpAddr=bindAddress;
  final String httpsAddrString=conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_DEFAULT);
  InetSocketAddress httpsAddr=NetUtils.createSocketAddr(httpsAddrString);
  if (httpsAddr != null) {
    final String bindHost=conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_HTTPS_BIND_HOST_KEY);
    if (bindHost != null && !bindHost.isEmpty()) {
      httpsAddr=new InetSocketAddress(bindHost,httpsAddr.getPort());
    }
  }
  HttpServer2.Builder builder=DFSUtil.httpServerTemplateForNNAndJN(conf,httpAddr,httpsAddr,"hdfs",DFSConfigKeys.DFS_NAMENODE_KERBEROS_INTERNAL_SPNEGO_PRINCIPAL_KEY,DFSConfigKeys.DFS_NAMENODE_KEYTAB_FILE_KEY);
  httpServer=builder.build();
  if (policy.isHttpsEnabled()) {
    InetSocketAddress datanodeSslPort=NetUtils.createSocketAddr(conf.getTrimmed(DFSConfigKeys.DFS_DATANODE_HTTPS_ADDRESS_KEY,infoHost + ":" + DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT));
    httpServer.setAttribute(DFSConfigKeys.DFS_DATANODE_HTTPS_PORT_KEY,datanodeSslPort.getPort());
  }
  initWebHdfs(conf);
  httpServer.setAttribute(NAMENODE_ATTRIBUTE_KEY,nn);
  httpServer.setAttribute(JspHelper.CURRENT_CONF,conf);
  setupServlets(httpServer,conf);
  httpServer.start();
  int connIdx=0;
  if (policy.isHttpEnabled()) {
    httpAddress=httpServer.getConnectorAddress(connIdx++);
    conf.set(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY,NetUtils.getHostPortString(httpAddress));
  }
  if (policy.isHttpsEnabled()) {
    httpsAddress=httpServer.getConnectorAddress(connIdx);
    conf.set(DFSConfigKeys.DFS_NAMENODE_HTTPS_ADDRESS_KEY,NetUtils.getHostPortString(httpsAddress));
  }
}
