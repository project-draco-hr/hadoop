{
  final String infoHost=bindAddress.getHostName();
  int infoPort=bindAddress.getPort();
  httpServer=new HttpServer("hdfs",infoHost,infoPort,infoPort == 0,conf,new AccessControlList(conf.get(DFS_ADMIN," "))){
{
      if (UserGroupInformation.isSecurityEnabled()) {
        Map<String,String> params=new HashMap<String,String>();
        String principalInConf=conf.get(DFSConfigKeys.DFS_NAMENODE_INTERNAL_SPENGO_USER_NAME_KEY);
        if (principalInConf != null && !principalInConf.isEmpty()) {
          params.put("kerberos.principal",SecurityUtil.getServerPrincipal(principalInConf,infoHost));
          String httpKeytab=conf.get(DFSConfigKeys.DFS_NAMENODE_KEYTAB_FILE_KEY);
          if (httpKeytab != null && !httpKeytab.isEmpty()) {
            params.put("kerberos.keytab",httpKeytab);
          }
          params.put(AuthenticationFilter.AUTH_TYPE,"kerberos");
          defineFilter(webAppContext,SPNEGO_FILTER,AuthenticationFilter.class.getName(),params,null);
        }
      }
      if (WebHdfsFileSystem.isEnabled(conf,LOG)) {
        final String name="SPNEGO";
        final String classname=AuthFilter.class.getName();
        final String pathSpec=WebHdfsFileSystem.PATH_PREFIX + "/*";
        Map<String,String> params=getAuthFilterParams(conf);
        defineFilter(webAppContext,name,classname,params,new String[]{pathSpec});
        LOG.info("Added filter '" + name + "' (class="+ classname+ ")");
        addJerseyResourcePackage(NamenodeWebHdfsMethods.class.getPackage().getName() + ";" + Param.class.getPackage().getName(),pathSpec);
      }
    }
    private Map<String,String> getAuthFilterParams(    Configuration conf) throws IOException {
      Map<String,String> params=new HashMap<String,String>();
      String principalInConf=conf.get(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY);
      if (principalInConf != null && !principalInConf.isEmpty()) {
        params.put(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY,SecurityUtil.getServerPrincipal(principalInConf,bindAddress.getHostName()));
      }
      String httpKeytab=conf.get(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY);
      if (httpKeytab != null && !httpKeytab.isEmpty()) {
        params.put(DFSConfigKeys.DFS_WEB_AUTHENTICATION_KERBEROS_KEYTAB_KEY,httpKeytab);
      }
      return params;
    }
  }
;
  boolean certSSL=conf.getBoolean("dfs.https.enable",false);
  if (certSSL) {
    boolean needClientAuth=conf.getBoolean("dfs.https.need.client.auth",false);
    InetSocketAddress secInfoSocAddr=NetUtils.createSocketAddr(infoHost + ":" + conf.get("dfs.https.port",infoHost + ":" + 0));
    Configuration sslConf=new Configuration(false);
    if (certSSL) {
      sslConf.addResource(conf.get("dfs.https.server.keystore.resource","ssl-server.xml"));
    }
    httpServer.addSslListener(secInfoSocAddr,sslConf,needClientAuth);
    InetSocketAddress datanodeSslPort=NetUtils.createSocketAddr(conf.get("dfs.datanode.https.address",infoHost + ":" + 50475));
    httpServer.setAttribute("datanode.https.port",datanodeSslPort.getPort());
  }
  httpServer.setAttribute("name.node",nn);
  httpServer.setAttribute("name.node.address",bindAddress);
  httpServer.setAttribute("name.system.image",nn.getFSImage());
  httpServer.setAttribute(JspHelper.CURRENT_CONF,conf);
  setupServlets(httpServer,conf);
  httpServer.start();
  httpAddress=new InetSocketAddress(bindAddress.getAddress(),httpServer.getPort());
}
