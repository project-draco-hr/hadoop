{
  UserParam.setUserPattern(conf.get(HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_KEY,HdfsClientConfigKeys.DFS_WEBHDFS_USER_PATTERN_DEFAULT));
  final String className=conf.get(DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_KEY,DFSConfigKeys.DFS_WEBHDFS_AUTHENTICATION_FILTER_DEFAULT);
  final String name=className;
  final String pathSpec=WebHdfsFileSystem.PATH_PREFIX + "/*";
  Map<String,String> params=getAuthFilterParams(conf);
  HttpServer2.defineFilter(httpServer.getWebAppContext(),name,className,params,new String[]{pathSpec});
  HttpServer2.LOG.info("Added filter '" + name + "' (class="+ className+ ")");
  if (conf.getBoolean(DFS_WEBHDFS_REST_CSRF_ENABLED_KEY,DFS_WEBHDFS_REST_CSRF_ENABLED_DEFAULT)) {
    Map<String,String> restCsrfParams=RestCsrfPreventionFilter.getFilterParams(conf,"dfs.webhdfs.rest-csrf.");
    String restCsrfClassName=RestCsrfPreventionFilter.class.getName();
    HttpServer2.defineFilter(httpServer.getWebAppContext(),restCsrfClassName,restCsrfClassName,restCsrfParams,new String[]{pathSpec});
  }
  httpServer.addJerseyResourcePackage(NamenodeWebHdfsMethods.class.getPackage().getName() + ";" + Param.class.getPackage().getName(),pathSpec);
}
