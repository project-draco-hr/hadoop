{
  MiniDFSCluster cluster=null;
  Configuration conf=new HdfsConfiguration();
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(true).build();
    NamenodeProtocols nn=cluster.getNameNodeRpc();
    URL fsName=DFSUtil.getInfoServer(cluster.getNameNode().getServiceRpcAddress(),conf,DFSUtil.getHttpClientScheme(conf)).toURL();
    nn.rollEditLog();
    RemoteEditLogManifest manifest=nn.getEditLogManifest(1);
    RemoteEditLog log=manifest.getLogs().get(0);
    NNStorage dstImage=Mockito.mock(NNStorage.class);
    Mockito.doReturn(Lists.newArrayList(new File("/wont-be-written"))).when(dstImage).getFiles(Mockito.<NameNodeDirType>anyObject(),Mockito.anyString());
    Mockito.doReturn(new StorageInfo(1,1,"X",1,NodeType.NAME_NODE).toColonSeparatedString()).when(dstImage).toColonSeparatedString();
    try {
      TransferFsImage.downloadImageToStorage(fsName,NameNodeFile.IMAGE,0,dstImage,false);
      fail("Storage info was not verified");
    }
 catch (    IOException ioe) {
      String msg=StringUtils.stringifyException(ioe);
      assertTrue(msg,msg.contains("but the secondary expected"));
    }
    try {
      TransferFsImage.downloadEditsToStorage(fsName,log,dstImage);
      fail("Storage info was not verified");
    }
 catch (    IOException ioe) {
      String msg=StringUtils.stringifyException(ioe);
      assertTrue(msg,msg.contains("but the secondary expected"));
    }
    try {
      TransferFsImage.uploadImageFromStorage(fsName,new URL("http://localhost:1234"),dstImage,NameNodeFile.IMAGE,0);
      fail("Storage info was not verified");
    }
 catch (    IOException ioe) {
      String msg=StringUtils.stringifyException(ioe);
      assertTrue(msg,msg.contains("but the secondary expected"));
    }
  }
  finally {
    cleanup(cluster);
    cluster=null;
  }
}
