{
  Configuration conf=new HdfsConfiguration();
  Path testPath=new Path("/testfile");
  SecondaryNameNode snn=null;
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).build();
  Collection<URI> nameDirs=cluster.getNameDirs(0);
  try {
    cluster.getFileSystem().mkdirs(testPath);
    snn=startSecondaryNameNode(conf);
    snn.doCheckpoint();
  }
  finally {
    if (snn != null) {
      snn.shutdown();
    }
    cluster.shutdown();
    cluster=null;
  }
  LOG.info("Trying to import checkpoint when the NameNode already " + "contains an image. This should fail.");
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).startupOption(StartupOption.IMPORT).build();
    fail("NameNode did not fail to start when it already contained " + "an image");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("NameNode already contains an image",ioe);
  }
 finally {
    if (cluster != null) {
      cluster.shutdown();
      cluster=null;
    }
  }
  LOG.info("Removing NN storage contents");
  for (  URI uri : nameDirs) {
    File dir=new File(uri.getPath());
    LOG.info("Cleaning " + dir);
    removeAndRecreateDir(dir);
  }
  LOG.info("Trying to import checkpoint");
  try {
    cluster=new MiniDFSCluster.Builder(conf).format(false).numDataNodes(0).startupOption(StartupOption.IMPORT).build();
    assertTrue("Path from checkpoint should exist after import",cluster.getFileSystem().exists(testPath));
    FSImageTestUtil.assertNNHasCheckpoints(cluster,Ints.asList(3));
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
