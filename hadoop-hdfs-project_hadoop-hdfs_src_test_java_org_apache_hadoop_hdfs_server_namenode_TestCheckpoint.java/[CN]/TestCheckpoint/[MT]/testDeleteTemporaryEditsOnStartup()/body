{
  Configuration conf=new HdfsConfiguration();
  SecondaryNameNode secondary=null;
  MiniDFSCluster cluster=null;
  FileSystem fs=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build();
    cluster.waitActive();
    fs=cluster.getFileSystem();
    secondary=startSecondaryNameNode(conf);
    DFSTestUtil.createFile(fs,new Path("tmpfile0"),1024,(short)1,0l);
    secondary.doCheckpoint();
    Mockito.doThrow(new IOException("Injecting failure before edit rename")).when(faultInjector).beforeEditsRename();
    DFSTestUtil.createFile(fs,new Path("tmpfile1"),1024,(short)1,0l);
    try {
      secondary.doCheckpoint();
      fail("Fault injection failed.");
    }
 catch (    IOException ioe) {
      GenericTestUtils.assertExceptionContains("Injecting failure before edit rename",ioe);
    }
    Mockito.reset(faultInjector);
    for (    StorageDirectory sd : secondary.getFSImage().getStorage().dirIterable(NameNodeDirType.EDITS)) {
      File[] tmpEdits=sd.getCurrentDir().listFiles(tmpEditsFilter);
      assertTrue("Expected a single tmp edits file in directory " + sd.toString(),tmpEdits.length == 1);
    }
    secondary.shutdown();
    secondary=startSecondaryNameNode(conf);
    for (    StorageDirectory sd : secondary.getFSImage().getStorage().dirIterable(NameNodeDirType.EDITS)) {
      File[] tmpEdits=sd.getCurrentDir().listFiles(tmpEditsFilter);
      assertTrue("Did not expect a tmp edits file in directory " + sd.toString(),tmpEdits.length == 0);
    }
    secondary.doCheckpoint();
  }
  finally {
    if (secondary != null) {
      secondary.shutdown();
    }
    if (fs != null) {
      fs.close();
    }
    if (cluster != null) {
      cluster.shutdown();
    }
    Mockito.reset(faultInjector);
  }
}
