{
  Path tmpDir=new Path("/tmp_tmp");
  Path file1=new Path("checkpoint.dat");
  Path file2=new Path("checkpoint2.dat");
  Configuration conf=new HdfsConfiguration();
  conf.set(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,"0.0.0.0:0");
  replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  MiniDFSCluster cluster=null;
  FileSystem fileSys=null;
  SecondaryNameNode secondary=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build();
    cluster.waitActive();
    fileSys=cluster.getFileSystem();
    assertTrue(!fileSys.exists(file1));
    assertTrue(!fileSys.exists(file2));
    DFSTestUtil.createFile(fileSys,file1,fileSize,fileSize,blockSize,replication,seed);
    checkFile(fileSys,file1,replication);
    for (int i=0; i < 1000; i++) {
      fileSys.mkdirs(tmpDir);
      fileSys.delete(tmpDir,true);
    }
    secondary=startSecondaryNameNode(conf);
    secondary.doCheckpoint();
    MetricsRecordBuilder rb=getMetrics(NN_METRICS);
    assertCounterGt("GetImageNumOps",0,rb);
    assertCounterGt("GetEditNumOps",0,rb);
    assertCounterGt("PutImageNumOps",0,rb);
    assertGaugeGt("GetImageAvgTime",0.0,rb);
    assertGaugeGt("GetEditAvgTime",0.0,rb);
    assertGaugeGt("PutImageAvgTime",0.0,rb);
  }
  finally {
    fileSys.close();
    cleanup(secondary);
    secondary=null;
    cleanup(cluster);
    cluster=null;
  }
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build();
    cluster.waitActive();
    fileSys=cluster.getFileSystem();
    checkFile(fileSys,file1,replication);
    cleanupFile(fileSys,file1);
    DFSTestUtil.createFile(fileSys,file2,fileSize,fileSize,blockSize,replication,seed);
    checkFile(fileSys,file2,replication);
    secondary=startSecondaryNameNode(conf);
    secondary.doCheckpoint();
    FSDirectory secondaryFsDir=secondary.getFSNamesystem().dir;
    INode rootInMap=secondaryFsDir.getInode(secondaryFsDir.rootDir.getId());
    assertSame(rootInMap,secondaryFsDir.rootDir);
    fileSys.delete(tmpDir,true);
    fileSys.mkdirs(tmpDir);
    secondary.doCheckpoint();
  }
  finally {
    fileSys.close();
    cleanup(secondary);
    secondary=null;
    cleanup(cluster);
    cluster=null;
  }
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).format(false).build();
  cluster.waitActive();
  fileSys=cluster.getFileSystem();
  assertTrue(!fileSys.exists(file1));
  assertTrue(fileSys.exists(tmpDir));
  try {
    checkFile(fileSys,file2,replication);
  }
  finally {
    fileSys.close();
    cluster.shutdown();
    cluster=null;
  }
}
