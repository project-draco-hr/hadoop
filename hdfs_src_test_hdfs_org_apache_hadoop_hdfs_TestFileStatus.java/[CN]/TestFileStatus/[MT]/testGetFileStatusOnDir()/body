{
  Path dir=new Path("/test/mkdirs");
  assertTrue("mkdir failed",fs.mkdirs(dir));
  assertTrue("mkdir failed",fs.exists(dir));
  FileStatus status=fs.getFileStatus(dir);
  assertTrue(dir + " should be a directory",status.isDirectory());
  assertTrue(dir + " should be zero size ",status.getLen() == 0);
  assertEquals(dir.makeQualified(fs.getUri(),fs.getWorkingDirectory()).toString(),status.getPath().toString());
  FileStatus[] stats=fs.listStatus(dir);
  assertEquals(dir + " should be empty",0,stats.length);
  assertEquals(dir + " should be zero size ",0,fs.getContentSummary(dir).getLength());
  assertEquals(dir + " should be zero size using hftp",0,hftpfs.getContentSummary(dir).getLength());
  RemoteIterator<FileStatus> itor=fc.listStatus(dir);
  assertFalse(dir + " should be empty",itor.hasNext());
  Path file2=new Path(dir,"filestatus2.dat");
  writeFile(fs,file2,1,blockSize / 4,blockSize);
  checkFile(fs,file2,1);
  status=fs.getFileStatus(file2);
  assertEquals(blockSize,status.getBlockSize());
  assertEquals(1,status.getReplication());
  file2=fs.makeQualified(file2);
  assertEquals(file2.toString(),status.getPath().toString());
  Path file3=new Path(dir,"filestatus3.dat");
  writeFile(fs,file3,1,blockSize / 4,blockSize);
  checkFile(fs,file3,1);
  file3=fs.makeQualified(file3);
  final int expected=blockSize / 2;
  assertEquals(dir + " size should be " + expected,expected,fs.getContentSummary(dir).getLength());
  assertEquals(dir + " size should be " + expected+ " using hftp",expected,hftpfs.getContentSummary(dir).getLength());
  stats=fs.listStatus(dir);
  assertEquals(dir + " should have two entries",2,stats.length);
  assertEquals(file2.toString(),stats[0].getPath().toString());
  assertEquals(file3.toString(),stats[1].getPath().toString());
  itor=fc.listStatus(dir);
  assertEquals(file2.toString(),itor.next().getPath().toString());
  assertEquals(file3.toString(),itor.next().getPath().toString());
  assertFalse("Unexpected addtional file",itor.hasNext());
  Path dir3=fs.makeQualified(new Path(dir,"dir3"));
  fs.mkdirs(dir3);
  dir3=fs.makeQualified(dir3);
  stats=fs.listStatus(dir);
  assertEquals(dir + " should have three entries",3,stats.length);
  assertEquals(dir3.toString(),stats[0].getPath().toString());
  assertEquals(file2.toString(),stats[1].getPath().toString());
  assertEquals(file3.toString(),stats[2].getPath().toString());
  itor=fc.listStatus(dir);
  assertEquals(dir3.toString(),itor.next().getPath().toString());
  assertEquals(file2.toString(),itor.next().getPath().toString());
  assertEquals(file3.toString(),itor.next().getPath().toString());
  assertFalse("Unexpected addtional file",itor.hasNext());
  Path dir4=fs.makeQualified(new Path(dir,"dir4"));
  fs.mkdirs(dir4);
  dir4=fs.makeQualified(dir4);
  Path dir5=fs.makeQualified(new Path(dir,"dir5"));
  fs.mkdirs(dir5);
  dir5=fs.makeQualified(dir5);
  stats=fs.listStatus(dir);
  assertEquals(dir + " should have five entries",5,stats.length);
  assertEquals(dir3.toString(),stats[0].getPath().toString());
  assertEquals(dir4.toString(),stats[1].getPath().toString());
  assertEquals(dir5.toString(),stats[2].getPath().toString());
  assertEquals(file2.toString(),stats[3].getPath().toString());
  assertEquals(file3.toString(),stats[4].getPath().toString());
  itor=fc.listStatus(dir);
  assertEquals(dir3.toString(),itor.next().getPath().toString());
  assertEquals(dir4.toString(),itor.next().getPath().toString());
  assertEquals(dir5.toString(),itor.next().getPath().toString());
  assertEquals(file2.toString(),itor.next().getPath().toString());
  assertEquals(file3.toString(),itor.next().getPath().toString());
  assertFalse(itor.hasNext());
{
    fs.setPermission(dir,new FsPermission((short)0));
    try {
      final String username=UserGroupInformation.getCurrentUser().getShortUserName() + "1";
      final HftpFileSystem hftp2=cluster.getHftpFileSystemAs(username,conf,0,"somegroup");
      hftp2.getContentSummary(dir);
      fail();
    }
 catch (    IOException ioe) {
      FileSystem.LOG.info("GOOD: getting an exception",ioe);
    }
  }
}
