{
  try {
    writeLock.lock();
    AggregateAppResourceUsage runningResourceUsage=getRunningAggregateAppResourceUsage();
    Resource usedResourceClone=Resources.clone(attemptResourceUsage.getAllUsed());
    Resource reservedResourceClone=Resources.clone(attemptResourceUsage.getReserved());
    Resource cluster=rmContext.getScheduler().getClusterResource();
    ResourceCalculator calc=rmContext.getScheduler().getResourceCalculator();
    float queueUsagePerc=0.0f;
    float clusterUsagePerc=0.0f;
    if (!calc.isInvalidDivisor(cluster)) {
      queueUsagePerc=calc.divide(cluster,usedResourceClone,Resources.multiply(cluster,queue.getQueueInfo(false,false).getCapacity())) * 100;
      clusterUsagePerc=calc.divide(cluster,usedResourceClone,cluster) * 100;
    }
    return ApplicationResourceUsageReport.newInstance(liveContainers.size(),reservedContainers.size(),usedResourceClone,reservedResourceClone,Resources.add(usedResourceClone,reservedResourceClone),runningResourceUsage.getMemorySeconds(),runningResourceUsage.getVcoreSeconds(),queueUsagePerc,clusterUsagePerc);
  }
  finally {
    writeLock.unlock();
  }
}
