{
  long start=System.currentTimeMillis();
  String mapIds=request.getParameter("map");
  String reduceId=request.getParameter("reduce");
  String jobId=request.getParameter("job");
  LOG.debug("Shuffle started for maps (mapIds=" + mapIds + ") to reduce "+ reduceId);
  if (jobId == null) {
    throw new IOException("job parameter is required");
  }
  if (mapIds == null || reduceId == null) {
    throw new IOException("map and reduce parameters are required");
  }
  ServletContext context=getServletContext();
  int reduce=Integer.parseInt(reduceId);
  DataOutputStream outStream=null;
  ShuffleServerMetrics shuffleMetrics=(ShuffleServerMetrics)context.getAttribute("shuffleServerMetrics");
  TaskTracker tracker=(TaskTracker)context.getAttribute("task.tracker");
  String exceptionStackRegex=(String)context.getAttribute("exceptionStackRegex");
  String exceptionMsgRegex=(String)context.getAttribute("exceptionMsgRegex");
  verifyRequest(request,response,tracker,jobId);
  int numMaps=0;
  try {
    shuffleMetrics.serverHandlerBusy();
    response.setContentType("application/octet-stream");
    outStream=new DataOutputStream(response.getOutputStream());
    response.setBufferSize(MAX_BYTES_TO_READ);
    JobConf conf=(JobConf)context.getAttribute("conf");
    LocalDirAllocator lDirAlloc=(LocalDirAllocator)context.getAttribute("localDirAllocator");
    FileSystem rfs=((LocalFileSystem)context.getAttribute("local.file.system")).getRaw();
    StringTokenizer itr=new StringTokenizer(mapIds,",");
    while (itr.hasMoreTokens()) {
      String mapId=itr.nextToken();
      ++numMaps;
      sendMapFile(jobId,mapId,reduce,conf,outStream,tracker,lDirAlloc,shuffleMetrics,rfs);
    }
  }
 catch (  IOException ie) {
    Log log=(Log)context.getAttribute("log");
    String errorMsg=("getMapOutputs(" + mapIds + ","+ reduceId+ ") failed");
    log.warn(errorMsg,ie);
    checkException(ie,exceptionMsgRegex,exceptionStackRegex,shuffleMetrics);
    response.sendError(HttpServletResponse.SC_GONE,errorMsg);
    shuffleMetrics.failedOutput();
    throw ie;
  }
 finally {
    shuffleMetrics.serverHandlerFree();
  }
  outStream.close();
  shuffleMetrics.successOutput();
  long timeElapsed=(System.currentTimeMillis() - start);
  LOG.info("Shuffled " + numMaps + "maps (mapIds="+ mapIds+ ") to reduce "+ reduceId+ " in "+ timeElapsed+ "s");
  if (ClientTraceLog.isInfoEnabled()) {
    ClientTraceLog.info(String.format(MR_CLIENTTRACE_FORMAT,request.getLocalAddr() + ":" + request.getLocalPort(),request.getRemoteAddr() + ":" + request.getRemotePort(),numMaps,"MAPRED_SHUFFLE",reduceId,timeElapsed));
  }
}
