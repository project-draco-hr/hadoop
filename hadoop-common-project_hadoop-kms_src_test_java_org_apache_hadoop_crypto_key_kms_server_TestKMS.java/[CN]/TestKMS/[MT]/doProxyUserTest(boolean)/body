{
  Configuration conf=new Configuration();
  conf.set("hadoop.security.authentication","kerberos");
  final File testDir=getTestDir();
  conf=createBaseKMSConf(testDir,conf);
  if (kerberos) {
    conf.set("hadoop.kms.authentication.type","kerberos");
  }
  conf.set("hadoop.kms.authentication.kerberos.keytab",keytab.getAbsolutePath());
  conf.set("hadoop.kms.authentication.kerberos.principal","HTTP/localhost");
  conf.set("hadoop.kms.authentication.kerberos.name.rules","DEFAULT");
  conf.set("hadoop.kms.proxyuser.client.users","foo,bar");
  conf.set("hadoop.kms.proxyuser.client.hosts","*");
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "kaa.ALL","client");
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "kbb.ALL","foo");
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "kcc.ALL","foo1");
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "kdd.ALL","bar");
  writeConf(testDir,conf);
  runServer(null,null,testDir,new KMSCallable<Void>(){
    @Override public Void call() throws Exception {
      final Configuration conf=new Configuration();
      conf.setInt(KeyProvider.DEFAULT_BITLENGTH_NAME,128);
      final URI uri=createKMSUri(getKMSUrl());
      UserGroupInformation proxyUgi=null;
      if (kerberos) {
        proxyUgi=UserGroupInformation.loginUserFromKeytabAndReturnUGI("client",keytab.getAbsolutePath());
      }
 else {
        proxyUgi=UserGroupInformation.createRemoteUser("client");
      }
      final UserGroupInformation clientUgi=proxyUgi;
      clientUgi.doAs(new PrivilegedExceptionAction<Void>(){
        @Override public Void run() throws Exception {
          final KeyProvider kp=createProvider(uri,conf);
          kp.createKey("kaa",new KeyProvider.Options(conf));
          UserGroupInformation fooUgi=UserGroupInformation.createProxyUser("foo",clientUgi);
          fooUgi.doAs(new PrivilegedExceptionAction<Void>(){
            @Override public Void run() throws Exception {
              Assert.assertNotNull(kp.createKey("kbb",new KeyProvider.Options(conf)));
              return null;
            }
          }
);
          UserGroupInformation foo1Ugi=UserGroupInformation.createProxyUser("foo1",clientUgi);
          foo1Ugi.doAs(new PrivilegedExceptionAction<Void>(){
            @Override public Void run() throws Exception {
              try {
                kp.createKey("kcc",new KeyProvider.Options(conf));
                Assert.fail();
              }
 catch (              AuthorizationException ex) {
              }
catch (              Exception ex) {
                Assert.fail(ex.getMessage());
              }
              return null;
            }
          }
);
          UserGroupInformation barUgi=UserGroupInformation.createProxyUser("bar",clientUgi);
          barUgi.doAs(new PrivilegedExceptionAction<Void>(){
            @Override public Void run() throws Exception {
              Assert.assertNotNull(kp.createKey("kdd",new KeyProvider.Options(conf)));
              return null;
            }
          }
);
          return null;
        }
      }
);
      return null;
    }
  }
);
}
