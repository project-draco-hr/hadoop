{
  Configuration conf=new Configuration();
  conf.set("hadoop.security.authentication","kerberos");
  File testDir=getTestDir();
  conf=createBaseKMSConf(testDir,conf);
  conf.set("hadoop.kms.authentication.type","kerberos");
  conf.set("hadoop.kms.authentication.kerberos.keytab",keytab.getAbsolutePath());
  conf.set("hadoop.kms.authentication.kerberos.principal","HTTP/localhost");
  conf.set("hadoop.kms.authentication.kerberos.name.rules","DEFAULT");
  for (  KMSACLs.Type type : KMSACLs.Type.values()) {
    conf.set(type.getAclConfigKey()," ");
  }
  conf.set(KMSACLs.Type.CREATE.getAclConfigKey(),"client");
  conf.set(KMSConfiguration.DEFAULT_KEY_ACL_PREFIX + "MANAGEMENT","client,client/host");
  writeConf(testDir,conf);
  runServer(null,null,testDir,new KMSCallable<Void>(){
    @Override public Void call() throws Exception {
      final Configuration conf=new Configuration();
      conf.setInt(KeyProvider.DEFAULT_BITLENGTH_NAME,128);
      final URI uri=createKMSUri(getKMSUrl());
      doAs("client",new PrivilegedExceptionAction<Void>(){
        @Override public Void run() throws Exception {
          try {
            KeyProvider kp=createProvider(uri,conf);
            KeyProvider.KeyVersion kv=kp.createKey("ck0",new KeyProvider.Options(conf));
            Assert.assertNull(kv.getMaterial());
          }
 catch (          Exception ex) {
            Assert.fail(ex.getMessage());
          }
          return null;
        }
      }
);
      doAs("client/host",new PrivilegedExceptionAction<Void>(){
        @Override public Void run() throws Exception {
          try {
            KeyProvider kp=createProvider(uri,conf);
            KeyProvider.KeyVersion kv=kp.createKey("ck1",new KeyProvider.Options(conf));
            Assert.assertNull(kv.getMaterial());
          }
 catch (          Exception ex) {
            Assert.fail(ex.getMessage());
          }
          return null;
        }
      }
);
      return null;
    }
  }
);
}
