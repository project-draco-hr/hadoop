{
  tearDownMiniKdc();
  Properties kdcConf=MiniKdc.createConf();
  kdcConf.setProperty(MiniKdc.MAX_TICKET_LIFETIME,"3");
  kdcConf.setProperty(MiniKdc.MIN_TICKET_LIFETIME,"3");
  setUpMiniKdc(kdcConf);
  Configuration conf=new Configuration();
  conf.set("hadoop.security.authentication","kerberos");
  final File testDir=getTestDir();
  conf=createBaseKMSConf(testDir,conf);
  conf.set("hadoop.kms.authentication.type","kerberos");
  conf.set("hadoop.kms.authentication.kerberos.keytab",keytab.getAbsolutePath());
  conf.set("hadoop.kms.authentication.kerberos.principal","HTTP/localhost");
  conf.set("hadoop.kms.authentication.kerberos.name.rules","DEFAULT");
  conf.set("hadoop.kms.proxyuser.client.users","*");
  conf.set("hadoop.kms.proxyuser.client.hosts","*");
  writeConf(testDir,conf);
  runServer(null,null,testDir,new KMSCallable<Void>(){
    @Override public Void call() throws Exception {
      final Configuration conf=new Configuration();
      final URI uri=createKMSUri(getKMSUrl());
      UserGroupInformation.setShouldRenewImmediatelyForTests(true);
      UserGroupInformation.loginUserFromKeytab("client",keytab.getAbsolutePath());
      final UserGroupInformation clientUgi=UserGroupInformation.getCurrentUser();
      clientUgi.doAs(new PrivilegedExceptionAction<Void>(){
        @Override public Void run() throws Exception {
          Thread.sleep(3100);
          KeyProvider kp=createProvider(uri,conf);
          kp.getKeys();
          Thread.sleep(3100);
          kp=createProvider(uri,conf);
          ((KeyProviderDelegationTokenExtension.DelegationTokenExtension)kp).addDelegationTokens("myuser",new Credentials());
          UserGroupInformation anotherUgi=UserGroupInformation.createProxyUser("client1",clientUgi);
          anotherUgi.doAs(new PrivilegedExceptionAction<Void>(){
            @Override public Void run() throws Exception {
              Thread.sleep(3100);
              KeyProvider kp=createProvider(uri,conf);
              kp.getKeys();
              return null;
            }
          }
);
          return null;
        }
      }
);
      return null;
    }
  }
);
}
