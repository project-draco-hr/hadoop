{
  UserGroupInformation.setConfiguration(conf);
  File confDir=getTestDir();
  conf=createBaseKMSConf(confDir);
  writeConf(confDir,conf);
  doNothing().when(mockAuthenticator).authenticate(any(URL.class),any(AuthenticatedURL.Token.class));
  runServer(null,null,confDir,new KMSCallable<Void>(){
    @Override public Void call() throws Exception {
      Configuration conf=new Configuration();
      URI uri=createKMSUri(getKMSUrl());
      KeyProvider kp=createProvider(uri,conf);
      conf.set(KeyProviderFactory.KEY_PROVIDER_PATH,createKMSUri(getKMSUrl()).toString());
      KeyProviderDelegationTokenExtension kpdte=KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp);
      Credentials credentials=new Credentials();
      final Token<?>[] tokens=kpdte.addDelegationTokens(UserGroupInformation.getCurrentUser().getUserName(),credentials);
      Assert.assertEquals(1,credentials.getAllTokens().size());
      InetSocketAddress kmsAddr=new InetSocketAddress(getKMSUrl().getHost(),getKMSUrl().getPort());
      Assert.assertEquals(KMSClientProvider.TOKEN_KIND,credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind());
      doThrow(new IOException("Authenticator should not fall back")).when(mockAuthenticator).authenticate(any(URL.class),any(AuthenticatedURL.Token.class));
      boolean renewed=false;
      for (      Token<?> token : tokens) {
        if (!(token.getKind().equals(KMSClientProvider.TOKEN_KIND))) {
          LOG.info("Skipping token {}",token);
          continue;
        }
        LOG.info("Got dt for " + uri + "; "+ token);
        long tokenLife=token.renew(conf);
        LOG.info("Renewed token of kind {}, new lifetime:{}",token.getKind(),tokenLife);
        Thread.sleep(100);
        long newTokenLife=token.renew(conf);
        LOG.info("Renewed token of kind {}, new lifetime:{}",token.getKind(),newTokenLife);
        Assert.assertTrue(newTokenLife > tokenLife);
        renewed=true;
      }
      Assert.assertTrue(renewed);
      for (      Token<?> token : tokens) {
        if (!(token.getKind().equals(KMSClientProvider.TOKEN_KIND))) {
          LOG.info("Skipping token {}",token);
          continue;
        }
        LOG.info("Got dt for " + uri + "; "+ token);
        token.cancel(conf);
        LOG.info("Cancelled token of kind {}",token.getKind());
        doNothing().when(mockAuthenticator).authenticate(any(URL.class),any(AuthenticatedURL.Token.class));
        try {
          token.renew(conf);
          Assert.fail("should not be able to renew a canceled token");
        }
 catch (        Exception e) {
          LOG.info("Expected exception when trying to renew token",e);
        }
      }
      return null;
    }
  }
);
}
