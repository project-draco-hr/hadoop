{
  Configuration conf=new Configuration();
  UserGroupInformation.setConfiguration(conf);
  File confDir=getTestDir();
  conf=createBaseKMSConf(confDir);
  conf.set("hadoop.kms.authentication.delegation-token.max-lifetime.sec","5");
  conf.set("hadoop.kms.authentication.delegation-token.renew-interval.sec","5");
  writeConf(confDir,conf);
  runServer(null,null,confDir,new KMSCallable<Void>(){
    @Override public Void call() throws Exception {
      final Configuration clientConf=new Configuration();
      final URI uri=createKMSUri(getKMSUrl());
      clientConf.set(KeyProviderFactory.KEY_PROVIDER_PATH,createKMSUri(getKMSUrl()).toString());
      final KeyProvider kp=createProvider(uri,clientConf);
      final KeyProviderDelegationTokenExtension kpdte=KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp);
      final InetSocketAddress kmsAddr=new InetSocketAddress(getKMSUrl().getHost(),getKMSUrl().getPort());
      final Collection<Token<?>> job1Token=new HashSet<>();
      doAs("client",new PrivilegedExceptionAction<Void>(){
        @Override public Void run() throws Exception {
          final Credentials credentials=new Credentials();
          kpdte.addDelegationTokens("client",credentials);
          Assert.assertEquals(1,credentials.getAllTokens().size());
          Assert.assertEquals(KMSClientProvider.TOKEN_KIND,credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind());
          UserGroupInformation.getCurrentUser().addCredentials(credentials);
          LOG.info("Added kms dt to credentials: {}",UserGroupInformation.getCurrentUser().getCredentials().getAllTokens());
          Token<?> token=UserGroupInformation.getCurrentUser().getCredentials().getToken(SecurityUtil.buildTokenService(kmsAddr));
          Assert.assertNotNull(token);
          job1Token.add(token);
          ByteArrayInputStream buf=new ByteArrayInputStream(token.getIdentifier());
          DataInputStream dis=new DataInputStream(buf);
          DelegationTokenIdentifier id=new DelegationTokenIdentifier(token.getKind());
          id.readFields(dis);
          dis.close();
          final long maxTime=id.getMaxDate();
          Thread.sleep(5100);
          Assert.assertTrue("maxTime " + maxTime + " is not less than now.",maxTime > 0 && maxTime < Time.now());
          try {
            kp.getKeys();
            Assert.fail("Operation should fail since dt is expired.");
          }
 catch (          Exception e) {
            LOG.info("Expected error.",e);
          }
          return null;
        }
      }
);
      Assert.assertFalse(job1Token.isEmpty());
      doAs("client",new PrivilegedExceptionAction<Void>(){
        @Override public Void run() throws Exception {
          final Credentials newCreds=new Credentials();
          kpdte.addDelegationTokens("client",newCreds);
          Assert.assertEquals(1,newCreds.getAllTokens().size());
          Assert.assertEquals(KMSClientProvider.TOKEN_KIND,newCreds.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind());
          final Credentials oldCreds=new Credentials();
          for (          Token<?> token : job1Token) {
            if (token.getKind().equals(KMSClientProvider.TOKEN_KIND)) {
              oldCreds.addToken(SecurityUtil.buildTokenService(kmsAddr),token);
            }
          }
          UserGroupInformation.getCurrentUser().addCredentials(oldCreds);
          LOG.info("Added old kms dt to credentials: {}",UserGroupInformation.getCurrentUser().getCredentials().getAllTokens());
          try {
            kp.getKeys();
            Assert.fail("Operation should fail since dt is expired.");
          }
 catch (          Exception e) {
            LOG.info("Expected error.",e);
          }
          Assert.assertEquals(1,newCreds.getAllTokens().size());
          Assert.assertEquals(KMSClientProvider.TOKEN_KIND,newCreds.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind());
          UserGroupInformation.getCurrentUser().addCredentials(newCreds);
          LOG.info("Credetials now are: {}",UserGroupInformation.getCurrentUser().getCredentials().getAllTokens());
          kp.getKeys();
          return null;
        }
      }
);
      return null;
    }
  }
);
}
