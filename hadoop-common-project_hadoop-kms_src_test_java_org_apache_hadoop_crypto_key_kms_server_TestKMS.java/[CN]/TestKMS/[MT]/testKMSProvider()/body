{
  Configuration conf=new Configuration();
  conf.set("hadoop.security.authentication","kerberos");
  UserGroupInformation.setConfiguration(conf);
  File confDir=getTestDir();
  conf=createBaseKMSConf(confDir);
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "k1.ALL","*");
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "k2.MANAGEMENT","*");
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "k2.READ","*");
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "k3.ALL","*");
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "k4.ALL","*");
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "k5.ALL","*");
  conf.set(KeyAuthorizationKeyProvider.KEY_ACL + "k6.ALL","*");
  writeConf(confDir,conf);
  runServer(null,null,confDir,new KMSCallable<Void>(){
    @Override public Void call() throws Exception {
      Date started=new Date();
      Configuration conf=new Configuration();
      URI uri=createKMSUri(getKMSUrl());
      KeyProvider kp=new KMSClientProvider(uri,conf);
      Assert.assertTrue(kp.getKeys().isEmpty());
      Assert.assertEquals(0,kp.getKeysMetadata().length);
      KeyProvider.Options options=new KeyProvider.Options(conf);
      options.setCipher("AES/CTR/NoPadding");
      options.setBitLength(128);
      options.setDescription("l1");
      KeyProvider.KeyVersion kv0=kp.createKey("k1",options);
      Assert.assertNotNull(kv0);
      Assert.assertNotNull(kv0.getVersionName());
      Assert.assertNotNull(kv0.getMaterial());
      KeyProvider.KeyVersion kv1=kp.getKeyVersion(kv0.getVersionName());
      Assert.assertEquals(kv0.getVersionName(),kv1.getVersionName());
      Assert.assertNotNull(kv1.getMaterial());
      KeyProvider.KeyVersion cv1=kp.getCurrentKey("k1");
      Assert.assertEquals(kv0.getVersionName(),cv1.getVersionName());
      Assert.assertNotNull(cv1.getMaterial());
      KeyProvider.Metadata m1=kp.getMetadata("k1");
      Assert.assertEquals("AES/CTR/NoPadding",m1.getCipher());
      Assert.assertEquals("AES",m1.getAlgorithm());
      Assert.assertEquals(128,m1.getBitLength());
      Assert.assertEquals(1,m1.getVersions());
      Assert.assertNotNull(m1.getCreated());
      Assert.assertTrue(started.before(m1.getCreated()));
      List<KeyProvider.KeyVersion> lkv1=kp.getKeyVersions("k1");
      Assert.assertEquals(1,lkv1.size());
      Assert.assertEquals(kv0.getVersionName(),lkv1.get(0).getVersionName());
      Assert.assertNotNull(kv1.getMaterial());
      KeyProvider.KeyVersion kv2=kp.rollNewVersion("k1");
      Assert.assertNotSame(kv0.getVersionName(),kv2.getVersionName());
      Assert.assertNotNull(kv2.getMaterial());
      kv2=kp.getKeyVersion(kv2.getVersionName());
      boolean eq=true;
      for (int i=0; i < kv1.getMaterial().length; i++) {
        eq=eq && kv1.getMaterial()[i] == kv2.getMaterial()[i];
      }
      Assert.assertFalse(eq);
      KeyProvider.KeyVersion cv2=kp.getCurrentKey("k1");
      Assert.assertEquals(kv2.getVersionName(),cv2.getVersionName());
      Assert.assertNotNull(cv2.getMaterial());
      eq=true;
      for (int i=0; i < kv1.getMaterial().length; i++) {
        eq=eq && cv2.getMaterial()[i] == kv2.getMaterial()[i];
      }
      Assert.assertTrue(eq);
      List<KeyProvider.KeyVersion> lkv2=kp.getKeyVersions("k1");
      Assert.assertEquals(2,lkv2.size());
      Assert.assertEquals(kv1.getVersionName(),lkv2.get(0).getVersionName());
      Assert.assertNotNull(lkv2.get(0).getMaterial());
      Assert.assertEquals(kv2.getVersionName(),lkv2.get(1).getVersionName());
      Assert.assertNotNull(lkv2.get(1).getMaterial());
      KeyProvider.Metadata m2=kp.getMetadata("k1");
      Assert.assertEquals("AES/CTR/NoPadding",m2.getCipher());
      Assert.assertEquals("AES",m2.getAlgorithm());
      Assert.assertEquals(128,m2.getBitLength());
      Assert.assertEquals(2,m2.getVersions());
      Assert.assertNotNull(m2.getCreated());
      Assert.assertTrue(started.before(m2.getCreated()));
      List<String> ks1=kp.getKeys();
      Assert.assertEquals(1,ks1.size());
      Assert.assertEquals("k1",ks1.get(0));
      KeyProvider.Metadata[] kms1=kp.getKeysMetadata("k1");
      Assert.assertEquals(1,kms1.length);
      Assert.assertEquals("AES/CTR/NoPadding",kms1[0].getCipher());
      Assert.assertEquals("AES",kms1[0].getAlgorithm());
      Assert.assertEquals(128,kms1[0].getBitLength());
      Assert.assertEquals(2,kms1[0].getVersions());
      Assert.assertNotNull(kms1[0].getCreated());
      Assert.assertTrue(started.before(kms1[0].getCreated()));
      KeyProvider.KeyVersion kv=kp.getCurrentKey("k1");
      KeyProviderCryptoExtension kpExt=KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp);
      EncryptedKeyVersion ek1=kpExt.generateEncryptedKey(kv.getName());
      Assert.assertEquals(KeyProviderCryptoExtension.EEK,ek1.getEncryptedKeyVersion().getVersionName());
      Assert.assertNotNull(ek1.getEncryptedKeyVersion().getMaterial());
      Assert.assertEquals(kv.getMaterial().length,ek1.getEncryptedKeyVersion().getMaterial().length);
      KeyProvider.KeyVersion k1=kpExt.decryptEncryptedKey(ek1);
      Assert.assertEquals(KeyProviderCryptoExtension.EK,k1.getVersionName());
      KeyProvider.KeyVersion k1a=kpExt.decryptEncryptedKey(ek1);
      Assert.assertArrayEquals(k1.getMaterial(),k1a.getMaterial());
      Assert.assertEquals(kv.getMaterial().length,k1.getMaterial().length);
      EncryptedKeyVersion ek2=kpExt.generateEncryptedKey(kv.getName());
      KeyProvider.KeyVersion k2=kpExt.decryptEncryptedKey(ek2);
      boolean isEq=true;
      for (int i=0; isEq && i < ek2.getEncryptedKeyVersion().getMaterial().length; i++) {
        isEq=k2.getMaterial()[i] == k1.getMaterial()[i];
      }
      Assert.assertFalse(isEq);
      kp.deleteKey("k1");
      Assert.assertNull(kp.getKeyVersion("k1"));
      Assert.assertNull(kp.getKeyVersions("k1"));
      Assert.assertNull(kp.getMetadata("k1"));
      Assert.assertTrue(kp.getKeys().isEmpty());
      Assert.assertEquals(0,kp.getKeysMetadata().length);
      options=new KeyProvider.Options(conf);
      options.setCipher("AES/CTR/NoPadding");
      options.setBitLength(128);
      KeyVersion kVer2=kp.createKey("k2",options);
      KeyProvider.Metadata meta=kp.getMetadata("k2");
      Assert.assertNull(meta.getDescription());
      Assert.assertEquals("k2",meta.getAttributes().get("key.acl.name"));
      try {
        kpExt=KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp);
        kpExt.generateEncryptedKey(kVer2.getName());
        Assert.fail("User should not be allowed to encrypt !!");
      }
 catch (      Exception ex) {
      }
      options=new KeyProvider.Options(conf);
      options.setCipher("AES/CTR/NoPadding");
      options.setBitLength(128);
      options.setDescription("d");
      kp.createKey("k3",options);
      meta=kp.getMetadata("k3");
      Assert.assertEquals("d",meta.getDescription());
      Assert.assertEquals("k3",meta.getAttributes().get("key.acl.name"));
      Map<String,String> attributes=new HashMap<String,String>();
      attributes.put("a","A");
      options=new KeyProvider.Options(conf);
      options.setCipher("AES/CTR/NoPadding");
      options.setBitLength(128);
      attributes.put("key.acl.name","k4");
      options.setAttributes(attributes);
      kp.createKey("k4",options);
      meta=kp.getMetadata("k4");
      Assert.assertNull(meta.getDescription());
      Assert.assertEquals(attributes,meta.getAttributes());
      options=new KeyProvider.Options(conf);
      options.setCipher("AES/CTR/NoPadding");
      options.setBitLength(128);
      options.setDescription("d");
      attributes.put("key.acl.name","k5");
      options.setAttributes(attributes);
      kp.createKey("k5",options);
      meta=kp.getMetadata("k5");
      Assert.assertEquals("d",meta.getDescription());
      Assert.assertEquals(attributes,meta.getAttributes());
      KeyProviderDelegationTokenExtension kpdte=KeyProviderDelegationTokenExtension.createKeyProviderDelegationTokenExtension(kp);
      Credentials credentials=new Credentials();
      kpdte.addDelegationTokens("foo",credentials);
      Assert.assertEquals(1,credentials.getAllTokens().size());
      InetSocketAddress kmsAddr=new InetSocketAddress(getKMSUrl().getHost(),getKMSUrl().getPort());
      Assert.assertEquals(new Text("kms-dt"),credentials.getToken(SecurityUtil.buildTokenService(kmsAddr)).getKind());
      KeyProviderCryptoExtension kpce=KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp);
      options=new KeyProvider.Options(conf);
      options.setCipher("AES/CTR/NoPadding");
      options.setBitLength(128);
      kpce.createKey("k6",options);
      EncryptedKeyVersion ekv1=kpce.generateEncryptedKey("k6");
      kpce.rollNewVersion("k6");
      EncryptedKeyVersion ekv2=kpce.generateEncryptedKey("k6");
      Assert.assertNotEquals(ekv1.getEncryptionKeyVersionName(),ekv2.getEncryptionKeyVersionName());
      return null;
    }
  }
);
}
