{
  Configuration conf=new Configuration();
  if (kerberos) {
    conf.set("hadoop.security.authentication","kerberos");
  }
  File testDir=getTestDir();
  conf=createBaseKMSConf(testDir,conf);
  final String keystore;
  final String password;
  if (ssl) {
    String sslConfDir=KeyStoreTestUtil.getClasspathDir(TestKMS.class);
    KeyStoreTestUtil.setupSSLConfig(testDir.getAbsolutePath(),sslConfDir,conf,false);
    keystore=testDir.getAbsolutePath() + "/serverKS.jks";
    password="serverP";
  }
 else {
    keystore=null;
    password=null;
  }
  conf.set("hadoop.kms.authentication.token.validity","1");
  if (kerberos) {
    conf.set("hadoop.kms.authentication.type","kerberos");
    conf.set("hadoop.kms.authentication.kerberos.keytab",keytab.getAbsolutePath());
    conf.set("hadoop.kms.authentication.kerberos.principal","HTTP/localhost");
    conf.set("hadoop.kms.authentication.kerberos.name.rules","DEFAULT");
  }
  writeConf(testDir,conf);
  runServer(keystore,password,testDir,new KMSCallable<Void>(){
    @Override public Void call() throws Exception {
      final Configuration conf=new Configuration();
      URL url=getKMSUrl();
      Assert.assertEquals(keystore != null,url.getProtocol().equals("https"));
      final URI uri=createKMSUri(getKMSUrl());
      if (ssl) {
        KeyProvider testKp=createProvider(uri,conf);
        ThreadGroup threadGroup=Thread.currentThread().getThreadGroup();
        while (threadGroup.getParent() != null) {
          threadGroup=threadGroup.getParent();
        }
        Thread[] threads=new Thread[threadGroup.activeCount()];
        threadGroup.enumerate(threads);
        Thread reloaderThread=null;
        for (        Thread thread : threads) {
          if ((thread.getName() != null) && (thread.getName().contains("Truststore reloader thread"))) {
            reloaderThread=thread;
          }
        }
        Assert.assertTrue("Reloader is not alive",reloaderThread.isAlive());
        testKp.close();
        boolean reloaderStillAlive=true;
        for (int i=0; i < 10; i++) {
          reloaderStillAlive=reloaderThread.isAlive();
          if (!reloaderStillAlive)           break;
          Thread.sleep(1000);
        }
        Assert.assertFalse("Reloader is still alive",reloaderStillAlive);
      }
      if (kerberos) {
        for (        String user : new String[]{"client","client/host"}) {
          doAs(user,new PrivilegedExceptionAction<Void>(){
            @Override public Void run() throws Exception {
              final KeyProvider kp=createProvider(uri,conf);
              Assert.assertTrue(kp.getKeys().isEmpty());
              Thread.sleep(4000);
              Token<?>[] tokens=((KeyProviderDelegationTokenExtension.DelegationTokenExtension)kp).addDelegationTokens("myuser",new Credentials());
              Assert.assertEquals(1,tokens.length);
              Assert.assertEquals("kms-dt",tokens[0].getKind().toString());
              return null;
            }
          }
);
        }
      }
 else {
        KeyProvider kp=createProvider(uri,conf);
        Assert.assertTrue(kp.getKeys().isEmpty());
        Thread.sleep(4000);
        Token<?>[] tokens=((KeyProviderDelegationTokenExtension.DelegationTokenExtension)kp).addDelegationTokens("myuser",new Credentials());
        Assert.assertEquals(1,tokens.length);
        Assert.assertEquals("kms-dt",tokens[0].getKind().toString());
      }
      return null;
    }
  }
);
}
