{
  int errors=0;
  IntWritable i;
  ArrayList<IntWritable> expectedValues=new ArrayList<IntWritable>();
  LOG.info("Executing TEST:3 for Key:" + key);
  values.mark();
  LOG.info("TEST:3. Marking");
  int count=0;
  while (values.hasNext()) {
    i=values.next();
    ;
    LOG.info(key + ":" + i);
    if (count == 5) {
      LOG.info("TEST:3. Clearing Mark");
      values.clearMark();
    }
    if (count == 8) {
      LOG.info("TEST:3. Marking -- " + key + ":"+ i);
      values.mark();
    }
    if (count >= 8) {
      expectedValues.add(i);
    }
    count++;
  }
  values.reset();
  LOG.info("TEST:3. After reset");
  if (!values.hasNext()) {
    errors++;
    LOG.info("TEST:3, Check:1. HasNext returned false");
    return errors;
  }
  count=0;
  while (values.hasNext()) {
    i=values.next();
    LOG.info(key + ":" + i);
    if (count < expectedValues.size()) {
      if (i != expectedValues.get(count)) {
        errors++;
        LOG.info("TEST:2. Check:1 Expected: " + expectedValues.get(count) + ", Got: "+ i);
        return errors;
      }
    }
    if (count == 10) {
      values.clearMark();
      LOG.info("TEST:3. After clear mark");
    }
    count++;
  }
  boolean successfulClearMark=false;
  try {
    LOG.info("TEST:3. Before Reset");
    values.reset();
  }
 catch (  IOException e) {
    successfulClearMark=true;
  }
  if (!successfulClearMark) {
    LOG.info("TEST:3 Check:4 reset was successfule even after clearMark");
    errors++;
    return errors;
  }
  LOG.info("TEST:3 Done.");
  return errors;
}
