{
  byte temp;
  for (int i=0; i < n * n; i++) {
    outMatrix[i]=0;
  }
  for (int i=0; i < n; i++) {
    outMatrix[i * n + i]=1;
  }
  for (int j, i=0; i < n; i++) {
    if (inMatrix[i * n + i] == 0) {
      for (j=i + 1; j < n; j++) {
        if (inMatrix[j * n + i] != 0) {
          break;
        }
      }
      if (j == n) {
        throw new RuntimeException("Not invertble");
      }
      for (int k=0; k < n; k++) {
        temp=inMatrix[i * n + k];
        inMatrix[i * n + k]=inMatrix[j * n + k];
        inMatrix[j * n + k]=temp;
        temp=outMatrix[i * n + k];
        outMatrix[i * n + k]=outMatrix[j * n + k];
        outMatrix[j * n + k]=temp;
      }
    }
    temp=gfInv(inMatrix[i * n + i]);
    for (j=0; j < n; j++) {
      inMatrix[i * n + j]=gfMul(inMatrix[i * n + j],temp);
      outMatrix[i * n + j]=gfMul(outMatrix[i * n + j],temp);
    }
    for (j=0; j < n; j++) {
      if (j == i) {
        continue;
      }
      temp=inMatrix[j * n + i];
      for (int k=0; k < n; k++) {
        outMatrix[j * n + k]^=gfMul(temp,outMatrix[i * n + k]);
        inMatrix[j * n + k]^=gfMul(temp,inMatrix[i * n + k]);
      }
    }
  }
}
