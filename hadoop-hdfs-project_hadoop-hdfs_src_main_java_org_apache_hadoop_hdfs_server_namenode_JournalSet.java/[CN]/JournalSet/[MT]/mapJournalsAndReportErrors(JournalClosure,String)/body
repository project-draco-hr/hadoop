{
  List<JournalAndStream> badJAS=Lists.newLinkedList();
  for (  JournalAndStream jas : journals) {
    try {
      closure.apply(jas);
    }
 catch (    Throwable t) {
      LOG.error("Error: " + status + " failed for (journal "+ jas+ ")",t);
      badJAS.add(jas);
    }
  }
  disableAndReportErrorOnJournals(badJAS);
  if (!NameNodeResourcePolicy.areResourcesAvailable(journals,minimumRedundantJournals)) {
    String message=status + " failed for too many journals";
    LOG.error("Error: " + message);
    throw new IOException(message);
  }
}
