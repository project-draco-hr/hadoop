{
  assumeTrue(NativeIO.isAvailable());
  String user="randomUser" + System.currentTimeMillis();
  File absLogDir=null, appDir=null, containerDir=null, syslog=null;
  try {
    absLogDir=new File("target",TestContainerLogsPage.class.getSimpleName() + "LogDir").getAbsoluteFile();
    absLogDir.mkdir();
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.NM_LOG_DIRS,absLogDir.toURI().toString());
    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
    UserGroupInformation.setConfiguration(conf);
    NodeHealthCheckerService healthChecker=new NodeHealthCheckerService();
    healthChecker.init(conf);
    LocalDirsHandlerService dirsHandler=healthChecker.getDiskHandler();
    RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(conf);
    long clusterTimeStamp=1234;
    ApplicationId appId=BuilderUtils.newApplicationId(recordFactory,clusterTimeStamp,1);
    Application app=mock(Application.class);
    when(app.getAppId()).thenReturn(appId);
    when(app.getUser()).thenReturn(user);
    ApplicationAttemptId appAttemptId=BuilderUtils.newApplicationAttemptId(appId,1);
    ContainerId container1=BuilderUtils.newContainerId(recordFactory,appId,appAttemptId,0);
    appDir=new File(absLogDir,appId.toString());
    appDir.mkdir();
    containerDir=new File(appDir,container1.toString());
    containerDir.mkdir();
    syslog=new File(containerDir,"syslog");
    syslog.createNewFile();
    BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(syslog));
    out.write("Log file Content".getBytes());
    out.close();
    Context context=mock(Context.class);
    ConcurrentMap<ApplicationId,Application> appMap=new ConcurrentHashMap<ApplicationId,Application>();
    appMap.put(appId,app);
    when(context.getApplications()).thenReturn(appMap);
    when(context.getContainers()).thenReturn(new ConcurrentHashMap<ContainerId,Container>());
    ContainersLogsBlock cLogsBlock=new ContainersLogsBlock(context);
    Map<String,String> params=new HashMap<String,String>();
    params.put(YarnWebParams.CONTAINER_ID,container1.toString());
    params.put(YarnWebParams.CONTAINER_LOG_TYPE,"syslog");
    Injector injector=WebAppTests.testPage(ContainerLogsPage.class,ContainersLogsBlock.class,cLogsBlock,params,(Module[])null);
    PrintWriter spyPw=WebAppTests.getPrintWriter(injector);
    verify(spyPw).write("Exception reading log file. Application submitted by '" + user + "' doesn't own requested log file : syslog");
  }
  finally {
    if (syslog != null) {
      syslog.delete();
    }
    if (containerDir != null) {
      containerDir.delete();
    }
    if (appDir != null) {
      appDir.delete();
    }
    if (absLogDir != null) {
      absLogDir.delete();
    }
  }
}
