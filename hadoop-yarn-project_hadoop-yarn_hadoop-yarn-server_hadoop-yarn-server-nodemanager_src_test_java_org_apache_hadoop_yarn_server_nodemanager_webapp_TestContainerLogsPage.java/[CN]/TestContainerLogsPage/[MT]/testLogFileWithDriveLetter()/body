{
  ContainerImpl container=mock(ContainerImpl.class);
  ApplicationIdPBImpl appId=mock(ApplicationIdPBImpl.class);
  when(appId.toString()).thenReturn("appId");
  Application app=mock(Application.class);
  when(app.getAppId()).thenReturn(appId);
  ApplicationAttemptIdPBImpl appAttemptId=mock(ApplicationAttemptIdPBImpl.class);
  when(appAttemptId.getApplicationId()).thenReturn(appId);
  ConcurrentMap<ApplicationId,Application> applications=new ConcurrentHashMap<ApplicationId,Application>();
  applications.put(appId,app);
  ContainerId containerId=mock(ContainerIdPBImpl.class);
  when(containerId.toString()).thenReturn("containerId");
  when(containerId.getApplicationAttemptId()).thenReturn(appAttemptId);
  ConcurrentMap<ContainerId,Container> containers=new ConcurrentHashMap<ContainerId,Container>();
  containers.put(containerId,container);
  LocalDirsHandlerService localDirs=mock(LocalDirsHandlerService.class);
  when(localDirs.getLogPathToRead("appId" + Path.SEPARATOR + "containerId"+ Path.SEPARATOR+ "fileName")).thenReturn(new Path("F:/nmlogs/appId/containerId/fileName"));
  NMContext context=mock(NMContext.class);
  when(context.getLocalDirsHandler()).thenReturn(localDirs);
  when(context.getApplications()).thenReturn(applications);
  when(context.getContainers()).thenReturn(containers);
  File logFile=ContainerLogsUtils.getContainerLogFile(containerId,"fileName",null,context);
  Assert.assertTrue("logFile lost drive letter " + logFile,logFile.toString().indexOf("F:" + File.separator + "nmlogs") > -1);
}
