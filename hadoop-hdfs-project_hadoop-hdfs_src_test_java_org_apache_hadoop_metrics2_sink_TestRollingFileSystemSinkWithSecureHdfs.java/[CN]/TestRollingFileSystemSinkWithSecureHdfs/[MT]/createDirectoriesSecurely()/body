{
  Path tmp=new Path("/tmp");
  Path test=new Path(tmp,"test");
  UserGroupInformation hdfs=UserGroupInformation.loginUserFromKeytabAndReturnUGI(hdfsPrincipal,hdfsKeytab);
  FileSystem fsForSuperUser=hdfs.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws Exception {
      return cluster.getFileSystem();
    }
  }
);
  fsForSuperUser.mkdirs(tmp);
  fsForSuperUser.setPermission(tmp,new FsPermission((short)0777));
  sink=UserGroupInformation.loginUserFromKeytabAndReturnUGI(sinkPrincipal,sinkKeytab);
  FileSystem fsForSink=sink.doAs(new PrivilegedExceptionAction<FileSystem>(){
    @Override public FileSystem run() throws Exception {
      return cluster.getFileSystem();
    }
  }
);
  fsForSink.mkdirs(test);
  RollingFileSystemSink.suppliedFilesystem=fsForSink;
}
