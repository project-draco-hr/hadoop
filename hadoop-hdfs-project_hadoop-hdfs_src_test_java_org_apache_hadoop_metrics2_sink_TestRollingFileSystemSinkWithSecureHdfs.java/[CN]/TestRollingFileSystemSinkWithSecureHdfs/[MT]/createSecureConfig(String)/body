{
  HdfsConfiguration conf=new HdfsConfiguration();
  SecurityUtil.setAuthenticationMethod(UserGroupInformation.AuthenticationMethod.KERBEROS,conf);
  conf.set(DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY,hdfsPrincipal);
  conf.set(DFS_NAMENODE_KEYTAB_FILE_KEY,hdfsKeytab);
  conf.set(DFS_DATANODE_KERBEROS_PRINCIPAL_KEY,hdfsPrincipal);
  conf.set(DFS_DATANODE_KEYTAB_FILE_KEY,hdfsKeytab);
  conf.set(SINK_PRINCIPAL_KEY,sinkPrincipal);
  conf.set(SINK_KEYTAB_FILE_KEY,sinkKeytab);
  conf.set(DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY,spnegoPrincipal);
  conf.setBoolean(DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY,true);
  conf.set(DFS_DATA_TRANSFER_PROTECTION_KEY,dataTransferProtection);
  conf.set(DFS_HTTP_POLICY_KEY,HttpConfig.Policy.HTTPS_ONLY.name());
  conf.set(DFS_NAMENODE_HTTPS_ADDRESS_KEY,"localhost:0");
  conf.set(DFS_DATANODE_HTTPS_ADDRESS_KEY,"localhost:0");
  conf.setInt(IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY,10);
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_GROUP_MAPPING,NullGroupsMapping.class.getName());
  String keystoresDir=methodDir.getAbsolutePath();
  String sslConfDir=KeyStoreTestUtil.getClasspathDir(this.getClass());
  KeyStoreTestUtil.setupSSLConfig(keystoresDir,sslConfDir,conf,false);
  conf.set(DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getClientSSLConfigFileName());
  conf.set(DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY,KeyStoreTestUtil.getServerSSLConfigFileName());
  return conf;
}
