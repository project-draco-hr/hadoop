{
  Configuration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
  conf.setBoolean(MRJobConfig.MAPREDUCE_JOB_EMIT_TIMELINE_DATA,true);
  MiniMRYarnCluster cluster=null;
  try {
    cluster=new MiniMRYarnCluster(TestJobHistoryEventHandler.class.getSimpleName(),1);
    cluster.init(conf);
    cluster.start();
    conf.set(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,MiniYARNCluster.getHostname() + ":" + cluster.getApplicationHistoryServer().getPort());
    TimelineStore ts=cluster.getApplicationHistoryServer().getTimelineStore();
    Path inDir=new Path("input");
    Path outDir=new Path("output");
    RunningJob job=UtilsForTests.runJobSucceed(new JobConf(conf),inDir,outDir);
    Assert.assertEquals(JobStatus.SUCCEEDED,job.getJobStatus().getState().getValue());
    TimelineEntities entities=ts.getEntities("MAPREDUCE_JOB",null,null,null,null,null,null,null,null,null);
    Assert.assertEquals(1,entities.getEntities().size());
    TimelineEntity tEntity=entities.getEntities().get(0);
    Assert.assertEquals(job.getID().toString(),tEntity.getEntityId());
    Assert.assertEquals("MAPREDUCE_JOB",tEntity.getEntityType());
    Assert.assertEquals(EventType.AM_STARTED.toString(),tEntity.getEvents().get(tEntity.getEvents().size() - 1).getEventType());
    Assert.assertEquals(EventType.JOB_FINISHED.toString(),tEntity.getEvents().get(0).getEventType());
    job=UtilsForTests.runJobFail(new JobConf(conf),inDir,outDir);
    Assert.assertEquals(JobStatus.FAILED,job.getJobStatus().getState().getValue());
    entities=ts.getEntities("MAPREDUCE_JOB",null,null,null,null,null,null,null,null,null);
    Assert.assertEquals(2,entities.getEntities().size());
    tEntity=entities.getEntities().get(0);
    Assert.assertEquals(job.getID().toString(),tEntity.getEntityId());
    Assert.assertEquals("MAPREDUCE_JOB",tEntity.getEntityType());
    Assert.assertEquals(EventType.AM_STARTED.toString(),tEntity.getEvents().get(tEntity.getEvents().size() - 1).getEventType());
    Assert.assertEquals(EventType.JOB_FAILED.toString(),tEntity.getEvents().get(0).getEventType());
  }
  finally {
    if (cluster != null) {
      cluster.stop();
    }
  }
}
