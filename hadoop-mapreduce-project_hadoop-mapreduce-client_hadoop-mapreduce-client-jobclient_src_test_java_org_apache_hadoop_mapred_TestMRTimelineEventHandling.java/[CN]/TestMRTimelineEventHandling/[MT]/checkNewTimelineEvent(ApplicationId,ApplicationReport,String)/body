{
  String tmpRoot=storageDir + File.separator + "entities"+ File.separator;
  File tmpRootFolder=new File(tmpRoot);
  Assert.assertTrue(tmpRootFolder.isDirectory());
  String basePath=tmpRoot + YarnConfiguration.DEFAULT_RM_CLUSTER_ID + File.separator+ UserGroupInformation.getCurrentUser().getShortUserName()+ File.separator+ appReport.getName()+ File.separator+ TimelineUtils.DEFAULT_FLOW_VERSION+ File.separator+ appReport.getStartTime()+ File.separator+ appId.toString();
  String outputDirJob=basePath + File.separator + "MAPREDUCE_JOB"+ File.separator;
  File entityFolder=new File(outputDirJob);
  Assert.assertTrue("Job output directory: " + outputDirJob + " does not exist.",entityFolder.isDirectory());
  String jobEventFileName=appId.toString().replaceAll("application","job") + FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;
  String jobEventFilePath=outputDirJob + jobEventFileName;
  File jobEventFile=new File(jobEventFilePath);
  Assert.assertTrue("jobEventFilePath: " + jobEventFilePath + " does not exist.",jobEventFile.exists());
  verifyEntity(jobEventFile,EventType.JOB_FINISHED.name(),true,false,null);
  Set<String> cfgsToCheck=Sets.newHashSet("dummy_conf1","dummy_conf2","huge_dummy_conf1","huge_dummy_conf2");
  verifyEntity(jobEventFile,null,false,true,cfgsToCheck);
  String outputAppDir=basePath + File.separator + "YARN_APPLICATION"+ File.separator;
  entityFolder=new File(outputAppDir);
  Assert.assertTrue("Job output directory: " + outputAppDir + " does not exist.",entityFolder.isDirectory());
  String appEventFileName=appId.toString() + FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;
  String appEventFilePath=outputAppDir + appEventFileName;
  File appEventFile=new File(appEventFilePath);
  Assert.assertTrue("appEventFilePath: " + appEventFilePath + " does not exist.",appEventFile.exists());
  verifyEntity(appEventFile,null,true,false,null);
  verifyEntity(appEventFile,null,false,true,cfgsToCheck);
  String outputDirTask=basePath + File.separator + "MAPREDUCE_TASK"+ File.separator;
  File taskFolder=new File(outputDirTask);
  Assert.assertTrue("Task output directory: " + outputDirTask + " does not exist.",taskFolder.isDirectory());
  String taskEventFileName=appId.toString().replaceAll("application","task") + "_m_000000" + FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;
  String taskEventFilePath=outputDirTask + taskEventFileName;
  File taskEventFile=new File(taskEventFilePath);
  Assert.assertTrue("taskEventFileName: " + taskEventFilePath + " does not exist.",taskEventFile.exists());
  verifyEntity(taskEventFile,EventType.TASK_FINISHED.name(),true,false,null);
  String outputDirTaskAttempt=basePath + File.separator + "MAPREDUCE_TASK_ATTEMPT"+ File.separator;
  File taskAttemptFolder=new File(outputDirTaskAttempt);
  Assert.assertTrue("TaskAttempt output directory: " + outputDirTaskAttempt + " does not exist.",taskAttemptFolder.isDirectory());
  String taskAttemptEventFileName=appId.toString().replaceAll("application","attempt") + "_m_000000_0" + FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;
  String taskAttemptEventFilePath=outputDirTaskAttempt + taskAttemptEventFileName;
  File taskAttemptEventFile=new File(taskAttemptEventFilePath);
  Assert.assertTrue("taskAttemptEventFileName: " + taskAttemptEventFilePath + " does not exist.",taskAttemptEventFile.exists());
  verifyEntity(taskAttemptEventFile,EventType.MAP_ATTEMPT_FINISHED.name(),true,false,null);
}
