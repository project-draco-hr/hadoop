{
  Entry<AsyncLogger,PrepareRecoveryResponseProto> INPROGRESS_1_3=makeEntry(PrepareRecoveryResponseProto.newBuilder().setSegmentState(SegmentStateProto.newBuilder().setStartTxId(1L).setEndTxId(3L).setMd5Sum(ByteString.EMPTY).setIsInProgress(true)).setLastWriterEpoch(0L).build());
  Entry<AsyncLogger,PrepareRecoveryResponseProto> INPROGRESS_1_4=makeEntry(PrepareRecoveryResponseProto.newBuilder().setSegmentState(SegmentStateProto.newBuilder().setStartTxId(1L).setEndTxId(4L).setMd5Sum(ByteString.EMPTY).setIsInProgress(true)).setLastWriterEpoch(0L).build());
  Entry<AsyncLogger,PrepareRecoveryResponseProto> INPROGRESS_1_4_ACCEPTED=makeEntry(PrepareRecoveryResponseProto.newBuilder().setSegmentState(SegmentStateProto.newBuilder().setStartTxId(1L).setEndTxId(4L).setMd5Sum(ByteString.EMPTY).setIsInProgress(true)).setLastWriterEpoch(0L).setAcceptedInEpoch(1L).build());
  Entry<AsyncLogger,PrepareRecoveryResponseProto> FINALIZED_1_3=makeEntry(PrepareRecoveryResponseProto.newBuilder().setSegmentState(SegmentStateProto.newBuilder().setStartTxId(1L).setEndTxId(3L).setMd5Sum(ByteString.EMPTY).setIsInProgress(false)).setLastWriterEpoch(0L).build());
  assertEquals(0,INSTANCE.compare(INPROGRESS_1_3,INPROGRESS_1_3));
  assertEquals(-1,INSTANCE.compare(INPROGRESS_1_3,INPROGRESS_1_4));
  assertEquals(1,INSTANCE.compare(INPROGRESS_1_4,INPROGRESS_1_3));
  assertEquals(-1,INSTANCE.compare(INPROGRESS_1_4,FINALIZED_1_3));
  assertEquals(1,INSTANCE.compare(FINALIZED_1_3,INPROGRESS_1_4));
  assertEquals(-1,INSTANCE.compare(INPROGRESS_1_4_ACCEPTED,FINALIZED_1_3));
  assertEquals(1,INSTANCE.compare(FINALIZED_1_3,INPROGRESS_1_4_ACCEPTED));
}
