{
  final Configuration conf=new Configuration();
  KeyProvider kp=new UserProvider.Factory().createProvider(new URI("user:///"),conf);
  KeyACLs mock=mock(KeyACLs.class);
  when(mock.isACLPresent("testKey",KeyOpType.MANAGEMENT)).thenReturn(true);
  when(mock.isACLPresent("testKey",KeyOpType.GENERATE_EEK)).thenReturn(true);
  when(mock.isACLPresent("testKey",KeyOpType.DECRYPT_EEK)).thenReturn(true);
  when(mock.isACLPresent("testKey",KeyOpType.ALL)).thenReturn(true);
  UserGroupInformation u1=UserGroupInformation.createRemoteUser("u1");
  UserGroupInformation u2=UserGroupInformation.createRemoteUser("u2");
  UserGroupInformation u3=UserGroupInformation.createRemoteUser("u3");
  UserGroupInformation sudo=UserGroupInformation.createRemoteUser("sudo");
  when(mock.hasAccessToKey("testKey",u1,KeyOpType.MANAGEMENT)).thenReturn(true);
  when(mock.hasAccessToKey("testKey",u2,KeyOpType.GENERATE_EEK)).thenReturn(true);
  when(mock.hasAccessToKey("testKey",u3,KeyOpType.DECRYPT_EEK)).thenReturn(true);
  when(mock.hasAccessToKey("testKey",sudo,KeyOpType.ALL)).thenReturn(true);
  final KeyProviderCryptoExtension kpExt=new KeyAuthorizationKeyProvider(KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp),mock);
  final KeyVersion barKv=u1.doAs(new PrivilegedExceptionAction<KeyVersion>(){
    @Override public KeyVersion run() throws Exception {
      Options opt=newOptions(conf);
      Map<String,String> m=new HashMap<String,String>();
      m.put("key.acl.name","testKey");
      opt.setAttributes(m);
      try {
        KeyVersion kv=kpExt.createKey("foo",SecureRandom.getSeed(16),opt);
        kpExt.rollNewVersion(kv.getName());
        kpExt.rollNewVersion(kv.getName(),SecureRandom.getSeed(16));
        kpExt.deleteKey(kv.getName());
      }
 catch (      IOException ioe) {
        Assert.fail("User should be Authorized !!");
      }
      KeyVersion retkv=null;
      try {
        retkv=kpExt.createKey("bar",SecureRandom.getSeed(16),opt);
        kpExt.generateEncryptedKey(retkv.getName());
        Assert.fail("User should NOT be Authorized to generate EEK !!");
      }
 catch (      IOException ioe) {
      }
      Assert.assertNotNull(retkv);
      return retkv;
    }
  }
);
  final EncryptedKeyVersion barEKv=u2.doAs(new PrivilegedExceptionAction<EncryptedKeyVersion>(){
    @Override public EncryptedKeyVersion run() throws Exception {
      try {
        kpExt.deleteKey(barKv.getName());
        Assert.fail("User should NOT be Authorized to " + "perform any other operation !!");
      }
 catch (      IOException ioe) {
      }
      return kpExt.generateEncryptedKey(barKv.getName());
    }
  }
);
  u3.doAs(new PrivilegedExceptionAction<KeyVersion>(){
    @Override public KeyVersion run() throws Exception {
      try {
        kpExt.deleteKey(barKv.getName());
        Assert.fail("User should NOT be Authorized to " + "perform any other operation !!");
      }
 catch (      IOException ioe) {
      }
      return kpExt.decryptEncryptedKey(barEKv);
    }
  }
);
  sudo.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      Options opt=newOptions(conf);
      Map<String,String> m=new HashMap<String,String>();
      m.put("key.acl.name","testKey");
      opt.setAttributes(m);
      try {
        KeyVersion kv=kpExt.createKey("foo",SecureRandom.getSeed(16),opt);
        kpExt.rollNewVersion(kv.getName());
        kpExt.rollNewVersion(kv.getName(),SecureRandom.getSeed(16));
        EncryptedKeyVersion ekv=kpExt.generateEncryptedKey(kv.getName());
        kpExt.decryptEncryptedKey(ekv);
        kpExt.deleteKey(kv.getName());
      }
 catch (      IOException ioe) {
        Assert.fail("User should be Allowed to do everything !!");
      }
      return null;
    }
  }
);
}
