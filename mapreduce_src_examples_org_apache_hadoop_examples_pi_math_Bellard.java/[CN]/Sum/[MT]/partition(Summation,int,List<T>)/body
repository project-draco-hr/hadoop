{
  final List<Summation> parts=new ArrayList<Summation>();
  if (existing == null || existing.isEmpty())   parts.addAll(Arrays.asList(sigma.partition(nParts)));
 else {
    final long stepsPerPart=sigma.getSteps() / nParts;
    final List<Summation> remaining=sigma.remainingTerms(existing);
    for (    Summation s : remaining) {
      final int n=(int)((s.getSteps() - 1) / stepsPerPart) + 1;
      parts.addAll(Arrays.asList(s.partition(n)));
    }
    for (    Container<Summation> c : existing)     parts.add(c.getElement());
    Collections.sort(parts);
  }
  return parts.toArray(new Summation[parts.size()]);
}
