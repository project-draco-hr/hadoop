{
  final boolean needReport=this.fsLock.getReadHoldCount() == 1;
  final long readLockInterval=timer.monotonicNow() - readLockHeldTimeStamp.get();
  if (needReport) {
    readLockHeldTimeStamp.remove();
  }
  this.fsLock.readLock().unlock();
  if (needReport && readLockInterval >= this.readLockReportingThreshold) {
    long localLongestReadLock;
    do {
      localLongestReadLock=longestReadLockHeldInterval.get();
    }
 while (localLongestReadLock - readLockInterval < 0 && !longestReadLockHeldInterval.compareAndSet(localLongestReadLock,readLockInterval));
    long localTimeStampOfLastReadLockReport;
    long now;
    do {
      now=timer.monotonicNow();
      localTimeStampOfLastReadLockReport=timeStampOfLastReadLockReport.get();
      if (now - localTimeStampOfLastReadLockReport < lockSuppressWarningInterval) {
        numReadLockWarningsSuppressed.incrementAndGet();
        return;
      }
    }
 while (!timeStampOfLastReadLockReport.compareAndSet(localTimeStampOfLastReadLockReport,now));
    int numSuppressedWarnings=numReadLockWarningsSuppressed.getAndSet(0);
    long longestLockHeldInterval=longestReadLockHeldInterval.getAndSet(0);
    LOG.info("FSNamesystem read lock held for " + readLockInterval + " ms via\n"+ StringUtils.getStackTrace(Thread.currentThread())+ "\tNumber of suppressed read-lock reports: "+ numSuppressedWarnings+ "\n\tLongest read-lock held interval: "+ longestLockHeldInterval);
  }
}
