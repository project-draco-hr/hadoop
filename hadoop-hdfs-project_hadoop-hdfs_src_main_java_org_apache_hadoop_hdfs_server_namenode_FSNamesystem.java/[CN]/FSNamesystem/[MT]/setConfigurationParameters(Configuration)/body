{
  fsOwner=UserGroupInformation.getCurrentUser();
  LOG.info("fsOwner=" + fsOwner);
  this.supergroup=conf.get(DFS_PERMISSIONS_SUPERUSERGROUP_KEY,DFS_PERMISSIONS_SUPERUSERGROUP_DEFAULT);
  this.isPermissionEnabled=conf.getBoolean(DFS_PERMISSIONS_ENABLED_KEY,DFS_PERMISSIONS_ENABLED_DEFAULT);
  LOG.info("supergroup=" + supergroup);
  LOG.info("isPermissionEnabled=" + isPermissionEnabled);
  this.persistBlocks=conf.getBoolean(DFS_PERSIST_BLOCKS_KEY,DFS_PERSIST_BLOCKS_DEFAULT);
  String nameserviceId=DFSUtil.getNamenodeNameServiceId(conf);
  this.haEnabled=HAUtil.isHAEnabled(conf,nameserviceId);
  this.persistBlocks|=haEnabled && HAUtil.usesSharedEditsDir(conf);
  if (nameserviceId != null) {
    LOG.info("Determined nameservice ID: " + nameserviceId);
  }
  LOG.info("HA Enabled: " + haEnabled);
  if (!haEnabled && HAUtil.usesSharedEditsDir(conf)) {
    LOG.warn("Configured NNs:\n" + DFSUtil.nnAddressesAsString(conf));
    throw new IOException("Invalid configuration: a shared edits dir " + "must not be specified if HA is not enabled.");
  }
  short filePermission=(short)conf.getInt(DFS_NAMENODE_UPGRADE_PERMISSION_KEY,DFS_NAMENODE_UPGRADE_PERMISSION_DEFAULT);
  this.defaultPermission=PermissionStatus.createImmutable(fsOwner.getShortUserName(),supergroup,new FsPermission(filePermission));
  this.serverDefaults=new FsServerDefaults(conf.getLongBytes(DFS_BLOCK_SIZE_KEY,DFS_BLOCK_SIZE_DEFAULT),conf.getInt(DFS_BYTES_PER_CHECKSUM_KEY,DFS_BYTES_PER_CHECKSUM_DEFAULT),conf.getInt(DFS_CLIENT_WRITE_PACKET_SIZE_KEY,DFS_CLIENT_WRITE_PACKET_SIZE_DEFAULT),(short)conf.getInt(DFS_REPLICATION_KEY,DFS_REPLICATION_DEFAULT),conf.getInt(IO_FILE_BUFFER_SIZE_KEY,IO_FILE_BUFFER_SIZE_DEFAULT));
  this.maxFsObjects=conf.getLong(DFS_NAMENODE_MAX_OBJECTS_KEY,DFS_NAMENODE_MAX_OBJECTS_DEFAULT);
  this.accessTimePrecision=conf.getLong(DFS_NAMENODE_ACCESSTIME_PRECISION_KEY,0);
  this.supportAppends=conf.getBoolean(DFS_SUPPORT_APPEND_KEY,DFS_SUPPORT_APPEND_DEFAULT);
  this.dtpReplaceDatanodeOnFailure=ReplaceDatanodeOnFailure.get(conf);
  this.standbyShouldCheckpoint=conf.getBoolean(DFS_HA_STANDBY_CHECKPOINTS_KEY,DFS_HA_STANDBY_CHECKPOINTS_DEFAULT);
  alwaysUseDelegationTokensForTests=conf.getBoolean(DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY,DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_DEFAULT);
}
