{
  if (NameNode.stateChangeLog.isDebugEnabled()) {
    StringBuilder builder=new StringBuilder();
    builder.append("DIR* NameSystem.startFile: src=").append(src).append(", holder=").append(holder).append(", clientMachine=").append(clientMachine).append(", createParent=").append(createParent).append(", replication=").append(replication).append(", createFlag=").append(flag.toString()).append(", blockSize=").append(blockSize).append(", supportedVersions=").append(supportedVersions == null ? null : Arrays.toString(supportedVersions));
    NameNode.stateChangeLog.debug(builder.toString());
  }
  if (!DFSUtil.isValidName(src)) {
    throw new InvalidPathException(src);
  }
  blockManager.verifyReplication(src,replication,clientMachine);
  if (blockSize < minBlockSize) {
    throw new IOException("Specified block size is less than configured" + " minimum value (" + DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY + "): "+ blockSize+ " < "+ minBlockSize);
  }
  FSPermissionChecker pc=getPermissionChecker();
  waitForLoadingFSImage();
  FSDirWriteFileOp.EncryptionKeyInfo ezInfo=null;
  if (provider != null) {
    readLock();
    try {
      checkOperation(OperationCategory.READ);
      ezInfo=FSDirWriteFileOp.getEncryptionKeyInfo(this,pc,src,supportedVersions);
    }
  finally {
      readUnlock();
    }
    if (ezInfo != null) {
      ezInfo.edek=generateEncryptedDataEncryptionKey(ezInfo.ezKeyName);
    }
    EncryptionFaultInjector.getInstance().startFileAfterGenerateKey();
  }
  boolean skipSync=false;
  HdfsFileStatus stat=null;
  BlocksMapUpdateInfo toRemoveBlocks=new BlocksMapUpdateInfo();
  writeLock();
  try {
    checkOperation(OperationCategory.WRITE);
    checkNameNodeSafeMode("Cannot create file" + src);
    dir.writeLock();
    try {
      stat=FSDirWriteFileOp.startFile(this,pc,src,permissions,holder,clientMachine,flag,createParent,replication,blockSize,ezInfo,toRemoveBlocks,logRetryCache);
    }
  finally {
      dir.writeUnlock();
    }
  }
 catch (  IOException e) {
    skipSync=e instanceof StandbyException;
    throw e;
  }
 finally {
    writeUnlock();
    if (!skipSync) {
      getEditLog().logSync();
      removeBlocks(toRemoveBlocks);
      toRemoveBlocks.clear();
    }
  }
  return stat;
}
