{
  String src=srcArg;
  if (NameNode.stateChangeLog.isDebugEnabled()) {
    StringBuilder builder=new StringBuilder();
    builder.append("DIR* NameSystem.startFile: src=" + src + ", holder="+ holder+ ", clientMachine="+ clientMachine+ ", createParent="+ createParent+ ", replication="+ replication+ ", createFlag="+ flag.toString()+ ", blockSize="+ blockSize);
    builder.append(", supportedVersions=");
    if (supportedVersions != null) {
      builder.append(Arrays.toString(supportedVersions));
    }
 else {
      builder.append("null");
    }
    NameNode.stateChangeLog.debug(builder.toString());
  }
  if (!DFSUtil.isValidName(src)) {
    throw new InvalidPathException(src);
  }
  blockManager.verifyReplication(src,replication,clientMachine);
  boolean skipSync=false;
  HdfsFileStatus stat=null;
  FSPermissionChecker pc=getPermissionChecker();
  checkOperation(OperationCategory.WRITE);
  if (blockSize < minBlockSize) {
    throw new IOException("Specified block size is less than configured" + " minimum value (" + DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY + "): "+ blockSize+ " < "+ minBlockSize);
  }
  byte[][] pathComponents=FSDirectory.getPathComponentsForReservedPath(src);
  boolean create=flag.contains(CreateFlag.CREATE);
  boolean overwrite=flag.contains(CreateFlag.OVERWRITE);
  boolean isLazyPersist=flag.contains(CreateFlag.LAZY_PERSIST);
  waitForLoadingFSImage();
  CryptoProtocolVersion protocolVersion=null;
  CipherSuite suite=null;
  String ezKeyName=null;
  readLock();
  try {
    src=resolvePath(src,pathComponents);
    INodesInPath iip=dir.getINodesInPath4Write(src);
    if (dir.isInAnEZ(iip)) {
      EncryptionZone zone=dir.getEZForPath(iip);
      protocolVersion=chooseProtocolVersion(zone,supportedVersions);
      suite=zone.getSuite();
      ezKeyName=dir.getKeyName(iip);
      Preconditions.checkNotNull(protocolVersion);
      Preconditions.checkNotNull(suite);
      Preconditions.checkArgument(!suite.equals(CipherSuite.UNKNOWN),"Chose an UNKNOWN CipherSuite!");
      Preconditions.checkNotNull(ezKeyName);
    }
  }
  finally {
    readUnlock();
  }
  Preconditions.checkState((suite == null && ezKeyName == null) || (suite != null && ezKeyName != null),"Both suite and ezKeyName should both be null or not null");
  EncryptedKeyVersion edek=generateEncryptedDataEncryptionKey(ezKeyName);
  EncryptionFaultInjector.getInstance().startFileAfterGenerateKey();
  BlocksMapUpdateInfo toRemoveBlocks=null;
  writeLock();
  try {
    checkOperation(OperationCategory.WRITE);
    checkNameNodeSafeMode("Cannot create file" + src);
    src=resolvePath(src,pathComponents);
    toRemoveBlocks=startFileInternal(pc,src,permissions,holder,clientMachine,create,overwrite,createParent,replication,blockSize,isLazyPersist,suite,protocolVersion,edek,logRetryCache);
    stat=dir.getFileInfo(src,false,FSDirectory.isReservedRawName(srcArg),true);
  }
 catch (  StandbyException se) {
    skipSync=true;
    throw se;
  }
 finally {
    writeUnlock();
    if (!skipSync) {
      getEditLog().logSync();
      if (toRemoveBlocks != null) {
        removeBlocks(toRemoveBlocks);
        toRemoveBlocks.clear();
      }
    }
  }
  logAuditEvent(true,"create",srcArg,null,stat);
  return stat;
}
