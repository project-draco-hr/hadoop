{
  String src=srcArg;
  String dst=dstArg;
  if (NameNode.stateChangeLog.isDebugEnabled()) {
    NameNode.stateChangeLog.debug("DIR* NameSystem.renameTo: with options - " + src + " to "+ dst);
  }
  if (!DFSUtil.isValidName(dst)) {
    throw new InvalidPathException("Invalid name: " + dst);
  }
  final FSPermissionChecker pc=getPermissionChecker();
  checkOperation(OperationCategory.WRITE);
  byte[][] srcComponents=FSDirectory.getPathComponentsForReservedPath(src);
  byte[][] dstComponents=FSDirectory.getPathComponentsForReservedPath(dst);
  HdfsFileStatus resultingStat=null;
  writeLock();
  BlocksMapUpdateInfo collectedBlocks=new BlocksMapUpdateInfo();
  try {
    checkOperation(OperationCategory.WRITE);
    checkNameNodeSafeMode("Cannot rename " + src);
    src=dir.resolvePath(pc,src,srcComponents);
    dst=dir.resolvePath(pc,dst,dstComponents);
    renameToInternal(pc,src,dst,logRetryCache,collectedBlocks,options);
    resultingStat=getAuditFileInfo(dst,false);
  }
  finally {
    writeUnlock();
  }
  getEditLog().logSync();
  if (!collectedBlocks.getToDeleteList().isEmpty()) {
    removeBlocks(collectedBlocks);
    collectedBlocks.clear();
  }
  if (resultingStat != null) {
    StringBuilder cmd=new StringBuilder("rename options=");
    for (    Rename option : options) {
      cmd.append(option.value()).append(" ");
    }
    logAuditEvent(true,cmd.toString(),srcArg,dstArg,resultingStat);
  }
}
