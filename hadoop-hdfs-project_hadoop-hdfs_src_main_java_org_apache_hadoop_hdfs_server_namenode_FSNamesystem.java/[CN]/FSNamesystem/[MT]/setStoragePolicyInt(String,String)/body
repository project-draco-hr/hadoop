{
  if (!isStoragePolicyEnabled) {
    throw new IOException("Failed to set storage policy since " + DFS_STORAGE_POLICY_ENABLED_KEY + " is set to false.");
  }
  FSPermissionChecker pc=null;
  if (isPermissionEnabled) {
    pc=getPermissionChecker();
  }
  checkOperation(OperationCategory.WRITE);
  byte[][] pathComponents=FSDirectory.getPathComponentsForReservedPath(src);
  waitForLoadingFSImage();
  HdfsFileStatus fileStat;
  writeLock();
  try {
    checkOperation(OperationCategory.WRITE);
    checkNameNodeSafeMode("Cannot set storage policy for " + src);
    src=FSDirectory.resolvePath(src,pathComponents,dir);
    final INodesInPath iip=dir.getINodesInPath4Write(src);
    if (pc != null) {
      dir.checkPermission(pc,iip,false,null,null,FsAction.WRITE,null,false);
    }
    BlockStoragePolicy policy=blockManager.getStoragePolicy(policyName);
    if (policy == null) {
      throw new HadoopIllegalArgumentException("Cannot find a block policy with the name " + policyName);
    }
    dir.setStoragePolicy(iip,policy.getId());
    getEditLog().logSetStoragePolicy(src,policy.getId());
    fileStat=getAuditFileInfo(src,false);
  }
  finally {
    writeUnlock();
  }
  getEditLog().logSync();
  logAuditEvent(true,"setStoragePolicy",src,null,fileStat);
}
