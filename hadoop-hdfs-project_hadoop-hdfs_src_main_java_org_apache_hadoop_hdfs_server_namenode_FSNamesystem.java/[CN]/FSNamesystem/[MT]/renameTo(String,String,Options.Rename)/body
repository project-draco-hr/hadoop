{
  if (NameNode.stateChangeLog.isDebugEnabled()) {
    NameNode.stateChangeLog.debug("DIR* NameSystem.renameTo: with options - " + src + " to "+ dst);
  }
  if (!DFSUtil.isValidName(dst)) {
    throw new InvalidPathException("Invalid name: " + dst);
  }
  final FSPermissionChecker pc=getPermissionChecker();
  checkOperation(OperationCategory.WRITE);
  CacheEntry cacheEntry=RetryCache.waitForCompletion(retryCache);
  if (cacheEntry != null && cacheEntry.isSuccess()) {
    return;
  }
  byte[][] srcComponents=FSDirectory.getPathComponentsForReservedPath(src);
  byte[][] dstComponents=FSDirectory.getPathComponentsForReservedPath(dst);
  HdfsFileStatus resultingStat=null;
  boolean success=false;
  writeLock();
  try {
    checkOperation(OperationCategory.WRITE);
    if (isInSafeMode()) {
      throw new SafeModeException("Cannot rename " + src,safeMode);
    }
    src=FSDirectory.resolvePath(src,srcComponents,dir);
    dst=FSDirectory.resolvePath(dst,dstComponents,dir);
    renameToInternal(pc,src,dst,cacheEntry != null,options);
    resultingStat=getAuditFileInfo(dst,false);
    success=true;
  }
  finally {
    writeUnlock();
    RetryCache.setState(cacheEntry,success);
  }
  getEditLog().logSync();
  if (resultingStat != null) {
    StringBuilder cmd=new StringBuilder("rename options=");
    for (    Rename option : options) {
      cmd.append(option.value()).append(" ");
    }
    logAuditEvent(true,cmd.toString(),src,dst,resultingStat);
  }
}
