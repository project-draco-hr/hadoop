{
  BlocksMapUpdateInfo collectedBlocks=new BlocksMapUpdateInfo();
  List<INode> removedINodes=new ChunkedArrayList<INode>();
  FSPermissionChecker pc=getPermissionChecker();
  checkOperation(OperationCategory.WRITE);
  byte[][] pathComponents=FSDirectory.getPathComponentsForReservedPath(src);
  boolean ret=false;
  writeLock();
  try {
    checkOperation(OperationCategory.WRITE);
    if (isInSafeMode()) {
      throw new SafeModeException("Cannot delete " + src,safeMode);
    }
    src=FSDirectory.resolvePath(src,pathComponents,dir);
    if (!recursive && dir.isNonEmptyDirectory(src)) {
      throw new IOException(src + " is non empty");
    }
    if (enforcePermission && isPermissionEnabled) {
      checkPermission(pc,src,false,null,FsAction.WRITE,null,FsAction.ALL,false);
    }
    if (!dir.delete(src,collectedBlocks,removedINodes,logRetryCache)) {
      return false;
    }
    ret=true;
  }
  finally {
    writeUnlock();
  }
  getEditLog().logSync();
  removeBlocks(collectedBlocks);
  collectedBlocks.clear();
  dir.writeLock();
  try {
    dir.removeFromInodeMap(removedINodes);
  }
  finally {
    dir.writeUnlock();
  }
  removedINodes.clear();
  if (NameNode.stateChangeLog.isDebugEnabled()) {
    NameNode.stateChangeLog.debug("DIR* Namesystem.delete: " + src + " is removed");
  }
  return ret;
}
