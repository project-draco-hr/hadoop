{
  if (NameNode.stateChangeLog.isDebugEnabled()) {
    NameNode.stateChangeLog.debug("DIR* NameSystem.startFile: src=" + src + ", holder="+ holder+ ", clientMachine="+ clientMachine+ ", createParent="+ createParent+ ", replication="+ replication+ ", createFlag="+ flag.toString());
  }
  if (!DFSUtil.isValidName(src)) {
    throw new InvalidPathException(src);
  }
  blockManager.verifyReplication(src,replication,clientMachine);
  boolean skipSync=false;
  final HdfsFileStatus stat;
  FSPermissionChecker pc=getPermissionChecker();
  checkOperation(OperationCategory.WRITE);
  if (blockSize < minBlockSize) {
    throw new IOException("Specified block size is less than configured" + " minimum value (" + DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY + "): "+ blockSize+ " < "+ minBlockSize);
  }
  byte[][] pathComponents=FSDirectory.getPathComponentsForReservedPath(src);
  boolean create=flag.contains(CreateFlag.CREATE);
  boolean overwrite=flag.contains(CreateFlag.OVERWRITE);
  writeLock();
  try {
    checkOperation(OperationCategory.WRITE);
    if (isInSafeMode()) {
      throw new SafeModeException("Cannot create file" + src,safeMode);
    }
    src=FSDirectory.resolvePath(src,pathComponents,dir);
    startFileInternal(pc,src,permissions,holder,clientMachine,create,overwrite,createParent,replication,blockSize);
    stat=dir.getFileInfo(src,false);
  }
 catch (  StandbyException se) {
    skipSync=true;
    throw se;
  }
 finally {
    writeUnlock();
    if (!skipSync) {
      getEditLog().logSync();
    }
  }
  logAuditEvent(true,"create",src,null,stat);
  return stat;
}
