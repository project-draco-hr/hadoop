{
  dtpReplaceDatanodeOnFailure.checkEnabled();
  Node clientnode=null;
  String clientMachine;
  final long preferredblocksize;
  final byte storagePolicyID;
  final List<DatanodeStorageInfo> chosen;
  final boolean isStriped;
  checkOperation(OperationCategory.READ);
  byte[][] pathComponents=FSDirectory.getPathComponentsForReservedPath(src);
  FSPermissionChecker pc=getPermissionChecker();
  readLock();
  try {
    checkOperation(OperationCategory.READ);
    checkNameNodeSafeMode("Cannot add datanode; src=" + src + ", blk="+ blk);
    src=dir.resolvePath(pc,src,pathComponents);
    final INode inode;
    if (fileId == HdfsConstants.GRANDFATHER_INODE_ID) {
      inode=dir.getINode(src);
    }
 else {
      inode=dir.getInode(fileId);
      if (inode != null)       src=inode.getFullPathName();
    }
    final INodeFile file=checkLease(src,clientName,inode,fileId);
    clientMachine=file.getFileUnderConstructionFeature().getClientMachine();
    clientnode=blockManager.getDatanodeManager().getDatanodeByHost(clientMachine);
    preferredblocksize=file.getPreferredBlockSize();
    storagePolicyID=file.getStoragePolicyID();
    isStriped=file.isStriped();
    final DatanodeManager dm=blockManager.getDatanodeManager();
    chosen=Arrays.asList(dm.getDatanodeStorageInfos(existings,storageIDs));
  }
  finally {
    readUnlock();
  }
  if (clientnode == null) {
    clientnode=FSDirWriteFileOp.getClientNode(blockManager,clientMachine);
  }
  final DatanodeStorageInfo[] targets=blockManager.chooseTarget4AdditionalDatanode(src,numAdditionalNodes,clientnode,chosen,excludes,preferredblocksize,storagePolicyID,isStriped);
  final LocatedBlock lb=BlockManager.newLocatedBlock(blk,targets,-1,false);
  blockManager.setBlockToken(lb,BlockTokenIdentifier.AccessMode.COPY);
  return lb;
}
