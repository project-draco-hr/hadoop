{
  String src=srcArg;
  if (NameNode.stateChangeLog.isDebugEnabled()) {
    StringBuilder builder=new StringBuilder();
    builder.append("DIR* NameSystem.startFile: src=" + src + ", holder="+ holder+ ", clientMachine="+ clientMachine+ ", createParent="+ createParent+ ", replication="+ replication+ ", createFlag="+ flag.toString()+ ", blockSize="+ blockSize);
    builder.append(", cipherSuites=");
    if (cipherSuites != null) {
      builder.append(Arrays.toString(cipherSuites.toArray()));
    }
 else {
      builder.append("null");
    }
    NameNode.stateChangeLog.debug(builder.toString());
  }
  if (!DFSUtil.isValidName(src)) {
    throw new InvalidPathException(src);
  }
  blockManager.verifyReplication(src,replication,clientMachine);
  boolean skipSync=false;
  HdfsFileStatus stat=null;
  FSPermissionChecker pc=getPermissionChecker();
  checkOperation(OperationCategory.WRITE);
  if (blockSize < minBlockSize) {
    throw new IOException("Specified block size is less than configured" + " minimum value (" + DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY + "): "+ blockSize+ " < "+ minBlockSize);
  }
  byte[][] pathComponents=FSDirectory.getPathComponentsForReservedPath(src);
  boolean create=flag.contains(CreateFlag.CREATE);
  boolean overwrite=flag.contains(CreateFlag.OVERWRITE);
  boolean isLazyPersist=flag.contains(CreateFlag.LAZY_PERSIST);
  waitForLoadingFSImage();
  BlocksMapUpdateInfo toRemoveBlocks=null;
  try {
    boolean shouldContinue=true;
    int iters=0;
    while (shouldContinue) {
      skipSync=false;
      if (iters >= 10) {
        throw new IOException("Too many retries because of encryption zone " + "operations, something might be broken!");
      }
      shouldContinue=false;
      iters++;
      CipherSuite suite=null;
      String ezKeyName=null;
      readLock();
      try {
        src=resolvePath(src,pathComponents);
        INodesInPath iip=dir.getINodesInPath4Write(src);
        if (dir.isInAnEZ(iip)) {
          suite=chooseCipherSuite(iip,cipherSuites);
          if (suite != null) {
            Preconditions.checkArgument(!suite.equals(CipherSuite.UNKNOWN),"Chose an UNKNOWN CipherSuite!");
          }
          ezKeyName=dir.getKeyName(iip);
          Preconditions.checkState(ezKeyName != null);
        }
      }
  finally {
        readUnlock();
      }
      Preconditions.checkState((suite == null && ezKeyName == null) || (suite != null && ezKeyName != null),"Both suite and ezKeyName should both be null or not null");
      EncryptedKeyVersion edek=generateEncryptedDataEncryptionKey(ezKeyName);
      EncryptionFaultInjector.getInstance().startFileAfterGenerateKey();
      writeLock();
      try {
        checkOperation(OperationCategory.WRITE);
        checkNameNodeSafeMode("Cannot create file" + src);
        src=resolvePath(src,pathComponents);
        toRemoveBlocks=startFileInternal(pc,src,permissions,holder,clientMachine,create,overwrite,createParent,replication,blockSize,isLazyPersist,suite,edek,logRetryCache);
        stat=dir.getFileInfo(src,false,FSDirectory.isReservedRawName(srcArg));
      }
 catch (      StandbyException se) {
        skipSync=true;
        throw se;
      }
catch (      RetryStartFileException e) {
        shouldContinue=true;
        if (LOG.isTraceEnabled()) {
          LOG.trace("Preconditions failed, retrying creation of " + "FileEncryptionInfo",e);
        }
      }
 finally {
        writeUnlock();
      }
    }
  }
  finally {
    if (!skipSync) {
      getEditLog().logSync();
      if (toRemoveBlocks != null) {
        removeBlocks(toRemoveBlocks);
        toRemoveBlocks.clear();
      }
    }
  }
  logAuditEvent(true,"create",srcArg,null,stat);
  return stat;
}
