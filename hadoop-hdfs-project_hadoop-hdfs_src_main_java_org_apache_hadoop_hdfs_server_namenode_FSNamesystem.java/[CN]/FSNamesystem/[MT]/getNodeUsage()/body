{
  float median=0;
  float max=0;
  float min=0;
  float dev=0;
  final Map<String,Map<String,Object>> info=new HashMap<String,Map<String,Object>>();
  final List<DatanodeDescriptor> live=new ArrayList<DatanodeDescriptor>();
  blockManager.getDatanodeManager().fetchDatanodes(live,null,true);
  for (Iterator<DatanodeDescriptor> it=live.iterator(); it.hasNext(); ) {
    DatanodeDescriptor node=it.next();
    if (node.isDecommissionInProgress() || node.isDecommissioned()) {
      it.remove();
    }
  }
  if (live.size() > 0) {
    float totalDfsUsed=0;
    float[] usages=new float[live.size()];
    int i=0;
    for (    DatanodeDescriptor dn : live) {
      usages[i++]=dn.getDfsUsedPercent();
      totalDfsUsed+=dn.getDfsUsedPercent();
    }
    totalDfsUsed/=live.size();
    Arrays.sort(usages);
    median=usages[usages.length / 2];
    max=usages[usages.length - 1];
    min=usages[0];
    for (i=0; i < usages.length; i++) {
      dev+=(usages[i] - totalDfsUsed) * (usages[i] - totalDfsUsed);
    }
    dev=(float)Math.sqrt(dev / usages.length);
  }
  final Map<String,Object> innerInfo=new HashMap<String,Object>();
  innerInfo.put("min",StringUtils.format("%.2f%%",min));
  innerInfo.put("median",StringUtils.format("%.2f%%",median));
  innerInfo.put("max",StringUtils.format("%.2f%%",max));
  innerInfo.put("stdDev",StringUtils.format("%.2f%%",dev));
  info.put("nodeUsage",innerInfo);
  return JSON.toString(info);
}
