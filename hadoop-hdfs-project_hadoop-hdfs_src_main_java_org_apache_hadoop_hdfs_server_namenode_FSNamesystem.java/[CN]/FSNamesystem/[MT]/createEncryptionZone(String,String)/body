{
  final CacheEntry cacheEntry=RetryCache.waitForCompletion(retryCache);
  if (cacheEntry != null && cacheEntry.isSuccess()) {
    return;
  }
  boolean createdKey=false;
  String keyId=keyIdArg;
  boolean success=false;
  try {
    KeyVersion keyVersion;
    if (keyId == null || keyId.isEmpty()) {
      keyId=UUID.randomUUID().toString();
      keyVersion=createNewKey(keyId,src);
      createdKey=true;
    }
 else {
      keyVersion=provider.getCurrentKey(keyId);
      if (keyVersion == null) {
        throw new IOException("Key " + keyId + " doesn't exist.");
      }
    }
    createEncryptionZoneInt(src,keyId,keyVersion,cacheEntry != null);
    success=true;
  }
 catch (  AccessControlException e) {
    logAuditEvent(false,"createEncryptionZone",src);
    throw e;
  }
 finally {
    RetryCache.setState(cacheEntry,success);
    if (!success && createdKey) {
      provider.deleteKey(keyId);
    }
  }
}
