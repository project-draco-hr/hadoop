{
  LOG.info("commitBlockSynchronization(oldBlock=" + oldBlock + ", newgenerationstamp="+ newgenerationstamp+ ", newlength="+ newlength+ ", newtargets="+ Arrays.asList(newtargets)+ ", closeFile="+ closeFile+ ", deleteBlock="+ deleteblock+ ")");
  checkOperation(OperationCategory.WRITE);
  String src="";
  waitForLoadingFSImage();
  writeLock();
  boolean copyTruncate=false;
  BlockInfoContiguousUnderConstruction truncatedBlock=null;
  try {
    checkOperation(OperationCategory.WRITE);
    checkNameNodeSafeMode("Cannot commitBlockSynchronization while in safe mode");
    final BlockInfoContiguous storedBlock=getStoredBlock(ExtendedBlock.getLocalBlock(oldBlock));
    if (storedBlock == null) {
      if (deleteblock) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Block (=" + oldBlock + ") not found");
        }
        return;
      }
 else {
        throw new IOException("Block (=" + oldBlock + ") not found");
      }
    }
    final long oldGenerationStamp=storedBlock.getGenerationStamp();
    final long oldNumBytes=storedBlock.getNumBytes();
    if (storedBlock.isDeleted()) {
      throw new IOException("The blockCollection of " + storedBlock + " is null, likely because the file owning this block was"+ " deleted and the block removal is delayed");
    }
    INodeFile iFile=((INode)storedBlock.getBlockCollection()).asFile();
    if (isFileDeleted(iFile)) {
      throw new FileNotFoundException("File not found: " + iFile.getFullPathName() + ", likely due to delayed block"+ " removal");
    }
    if ((!iFile.isUnderConstruction() || storedBlock.isComplete()) && iFile.getLastBlock().isComplete()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Unexpected block (=" + oldBlock + ") since the file (="+ iFile.getLocalName()+ ") is not under construction");
      }
      return;
    }
    truncatedBlock=(BlockInfoContiguousUnderConstruction)iFile.getLastBlock();
    long recoveryId=truncatedBlock.getBlockRecoveryId();
    copyTruncate=truncatedBlock.getBlockId() != storedBlock.getBlockId();
    if (recoveryId != newgenerationstamp) {
      throw new IOException("The recovery id " + newgenerationstamp + " does not match current recovery id "+ recoveryId+ " for block "+ oldBlock);
    }
    if (deleteblock) {
      Block blockToDel=ExtendedBlock.getLocalBlock(oldBlock);
      boolean remove=iFile.removeLastBlock(blockToDel) != null;
      if (remove) {
        blockManager.removeBlock(storedBlock);
      }
    }
 else {
      if (!copyTruncate) {
        storedBlock.setGenerationStamp(newgenerationstamp);
        storedBlock.setNumBytes(newlength);
      }
      ArrayList<DatanodeDescriptor> trimmedTargets=new ArrayList<DatanodeDescriptor>(newtargets.length);
      ArrayList<String> trimmedStorages=new ArrayList<String>(newtargets.length);
      if (newtargets.length > 0) {
        for (int i=0; i < newtargets.length; ++i) {
          DatanodeDescriptor targetNode=blockManager.getDatanodeManager().getDatanode(newtargets[i]);
          if (targetNode != null) {
            trimmedTargets.add(targetNode);
            trimmedStorages.add(newtargetstorages[i]);
          }
 else           if (LOG.isDebugEnabled()) {
            LOG.debug("DatanodeDescriptor (=" + newtargets[i] + ") not found");
          }
        }
      }
      if ((closeFile) && !trimmedTargets.isEmpty()) {
        for (int i=0; i < trimmedTargets.size(); i++) {
          DatanodeStorageInfo storageInfo=trimmedTargets.get(i).getStorageInfo(trimmedStorages.get(i));
          if (storageInfo != null) {
            if (copyTruncate) {
              storageInfo.addBlock(truncatedBlock);
            }
 else {
              storageInfo.addBlock(storedBlock);
            }
          }
        }
      }
      DatanodeStorageInfo[] trimmedStorageInfos=blockManager.getDatanodeManager().getDatanodeStorageInfos(trimmedTargets.toArray(new DatanodeID[trimmedTargets.size()]),trimmedStorages.toArray(new String[trimmedStorages.size()]));
      if (copyTruncate) {
        iFile.setLastBlock(truncatedBlock,trimmedStorageInfos);
      }
 else {
        iFile.setLastBlock(storedBlock,trimmedStorageInfos);
        if (closeFile) {
          blockManager.markBlockReplicasAsCorrupt(storedBlock,oldGenerationStamp,oldNumBytes,trimmedStorageInfos);
        }
      }
    }
    if (closeFile) {
      if (copyTruncate) {
        src=closeFileCommitBlocks(iFile,truncatedBlock);
        if (!iFile.isBlockInLatestSnapshot(storedBlock)) {
          blockManager.removeBlock(storedBlock);
        }
      }
 else {
        src=closeFileCommitBlocks(iFile,storedBlock);
      }
    }
 else {
      src=iFile.getFullPathName();
      persistBlocks(src,iFile,false);
    }
  }
  finally {
    writeUnlock();
  }
  getEditLog().logSync();
  if (closeFile) {
    LOG.info("commitBlockSynchronization(oldBlock=" + oldBlock + ", file="+ src+ (copyTruncate ? ", newBlock=" + truncatedBlock : ", newgenerationstamp=" + newgenerationstamp)+ ", newlength="+ newlength+ ", newtargets="+ Arrays.asList(newtargets)+ ") successful");
  }
 else {
    LOG.info("commitBlockSynchronization(" + oldBlock + ") successful");
  }
}
