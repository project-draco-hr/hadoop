{
  LOG.info("commitBlockSynchronization(lastblock=" + lastblock + ", newgenerationstamp="+ newgenerationstamp+ ", newlength="+ newlength+ ", newtargets="+ Arrays.asList(newtargets)+ ", closeFile="+ closeFile+ ", deleteBlock="+ deleteblock+ ")");
  checkOperation(OperationCategory.WRITE);
  String src="";
  writeLock();
  try {
    checkOperation(OperationCategory.WRITE);
    checkNameNodeSafeMode("Cannot commitBlockSynchronization while in safe mode");
    final BlockInfo storedBlock=getStoredBlock(ExtendedBlock.getLocalBlock(lastblock));
    if (storedBlock == null) {
      if (deleteblock) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Block (=" + lastblock + ") not found");
        }
        return;
      }
 else {
        throw new IOException("Block (=" + lastblock + ") not found");
      }
    }
    INodeFile iFile=((INode)storedBlock.getBlockCollection()).asFile();
    if (!iFile.isUnderConstruction() || storedBlock.isComplete()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Unexpected block (=" + lastblock + ") since the file (="+ iFile.getLocalName()+ ") is not under construction");
      }
      return;
    }
    long recoveryId=((BlockInfoUnderConstruction)storedBlock).getBlockRecoveryId();
    if (recoveryId != newgenerationstamp) {
      throw new IOException("The recovery id " + newgenerationstamp + " does not match current recovery id "+ recoveryId+ " for block "+ lastblock);
    }
    INodeFileUnderConstruction pendingFile=(INodeFileUnderConstruction)iFile;
    if (deleteblock) {
      Block blockToDel=ExtendedBlock.getLocalBlock(lastblock);
      boolean remove=pendingFile.removeLastBlock(blockToDel);
      if (remove) {
        blockManager.removeBlockFromMap(storedBlock);
      }
    }
 else {
      storedBlock.setGenerationStamp(newgenerationstamp);
      storedBlock.setNumBytes(newlength);
      List<DatanodeDescriptor> targetList=new ArrayList<DatanodeDescriptor>(newtargets.length);
      if (newtargets.length > 0) {
        for (        DatanodeID newtarget : newtargets) {
          DatanodeDescriptor targetNode=blockManager.getDatanodeManager().getDatanode(newtarget);
          if (targetNode != null)           targetList.add(targetNode);
 else           if (LOG.isDebugEnabled()) {
            LOG.debug("DatanodeDescriptor (=" + newtarget + ") not found");
          }
        }
      }
      if ((closeFile) && !targetList.isEmpty()) {
        for (        DatanodeDescriptor targetNode : targetList) {
          targetNode.addBlock(storedBlock);
        }
      }
      DatanodeDescriptor[] targetArray=new DatanodeDescriptor[targetList.size()];
      pendingFile.setLastBlock(storedBlock,targetList.toArray(targetArray));
    }
    if (closeFile) {
      src=closeFileCommitBlocks(pendingFile,storedBlock);
    }
 else {
      src=persistBlocks(pendingFile,false);
    }
  }
  finally {
    writeUnlock();
  }
  getEditLog().logSync();
  if (closeFile) {
    LOG.info("commitBlockSynchronization(newblock=" + lastblock + ", file="+ src+ ", newgenerationstamp="+ newgenerationstamp+ ", newlength="+ newlength+ ", newtargets="+ Arrays.asList(newtargets)+ ") successful");
  }
 else {
    LOG.info("commitBlockSynchronization(" + lastblock + ") successful");
  }
}
