{
  LOG.info("commitBlockSynchronization(lastblock=" + lastblock + ", newgenerationstamp="+ newgenerationstamp+ ", newlength="+ newlength+ ", newtargets="+ Arrays.asList(newtargets)+ ", closeFile="+ closeFile+ ", deleteBlock="+ deleteblock+ ")");
  checkOperation(OperationCategory.WRITE);
  String src="";
  writeLock();
  try {
    checkOperation(OperationCategory.WRITE);
    if (isInSafeMode()) {
      throw new SafeModeException("Cannot commitBlockSynchronization while in safe mode",safeMode);
    }
    final BlockInfo storedBlock=getStoredBlock(ExtendedBlock.getLocalBlock(lastblock));
    if (storedBlock == null) {
      if (deleteblock) {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Block (=" + lastblock + ") not found");
        }
        return;
      }
 else {
        throw new IOException("Block (=" + lastblock + ") not found");
      }
    }
    INodeFile iFile=((INode)storedBlock.getBlockCollection()).asFile();
    if (!iFile.isUnderConstruction() || storedBlock.isComplete()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Unexpected block (=" + lastblock + ") since the file (="+ iFile.getLocalName()+ ") is not under construction");
      }
      return;
    }
    long recoveryId=((BlockInfoUnderConstruction)storedBlock).getBlockRecoveryId();
    if (recoveryId != newgenerationstamp) {
      throw new IOException("The recovery id " + newgenerationstamp + " does not match current recovery id "+ recoveryId+ " for block "+ lastblock);
    }
    INodeFileUnderConstruction pendingFile=(INodeFileUnderConstruction)iFile;
    if (deleteblock) {
      Block blockToDel=ExtendedBlock.getLocalBlock(lastblock);
      boolean remove=pendingFile.removeLastBlock(blockToDel);
      if (remove) {
        blockManager.removeBlockFromMap(storedBlock);
      }
    }
 else {
      storedBlock.setGenerationStamp(newgenerationstamp);
      storedBlock.setNumBytes(newlength);
      ArrayList<DatanodeDescriptor> trimmedTargets=new ArrayList<DatanodeDescriptor>(newtargets.length);
      ArrayList<String> trimmedStorages=new ArrayList<String>(newtargets.length);
      if (newtargets.length > 0) {
        for (int i=0; i < newtargets.length; ++i) {
          DatanodeDescriptor targetNode=blockManager.getDatanodeManager().getDatanode(newtargets[i]);
          if (targetNode != null) {
            trimmedTargets.add(targetNode);
            trimmedStorages.add(newtargetstorages[i]);
          }
 else           if (LOG.isDebugEnabled()) {
            LOG.debug("DatanodeDescriptor (=" + newtargets[i] + ") not found");
          }
        }
      }
      if ((closeFile) && !trimmedTargets.isEmpty()) {
        for (int i=0; i < trimmedTargets.size(); i++) {
          trimmedTargets.get(i).addBlock(trimmedStorages.get(i),storedBlock);
        }
      }
      DatanodeStorageInfo[] trimmedStorageInfos=blockManager.getDatanodeManager().getDatanodeStorageInfos(trimmedTargets.toArray(new DatanodeID[trimmedTargets.size()]),trimmedStorages.toArray(new String[trimmedStorages.size()]));
      pendingFile.setLastBlock(storedBlock,trimmedStorageInfos);
    }
    if (closeFile) {
      src=closeFileCommitBlocks(pendingFile,storedBlock);
    }
 else {
      src=persistBlocks(pendingFile,false);
    }
  }
  finally {
    writeUnlock();
  }
  getEditLog().logSync();
  if (closeFile) {
    LOG.info("commitBlockSynchronization(newblock=" + lastblock + ", file="+ src+ ", newgenerationstamp="+ newgenerationstamp+ ", newlength="+ newlength+ ", newtargets="+ Arrays.asList(newtargets)+ ") successful");
  }
 else {
    LOG.info("commitBlockSynchronization(" + lastblock + ") successful");
  }
}
