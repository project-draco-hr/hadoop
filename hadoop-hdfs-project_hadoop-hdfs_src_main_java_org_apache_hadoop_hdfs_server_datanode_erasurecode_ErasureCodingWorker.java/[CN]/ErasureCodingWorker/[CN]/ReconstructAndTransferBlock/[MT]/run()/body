{
  datanode.incrementXmitsInProgress();
  try {
    int[] success=new int[dataBlkNum];
    int nsuccess=0;
    for (int i=0; i < sources.length && nsuccess < dataBlkNum; i++) {
      StripedReader reader=new StripedReader(liveIndices[i]);
      stripedReaders.add(reader);
      BlockReader blockReader=newBlockReader(getBlock(blockGroup,liveIndices[i]),0,sources[i]);
      if (blockReader != null) {
        initChecksumAndBufferSizeIfNeeded(blockReader);
        reader.blockReader=blockReader;
        reader.buffer=ByteBuffer.allocate(bufferSize);
        success[nsuccess++]=i;
      }
    }
    if (nsuccess < dataBlkNum) {
      String error="Can't find minimum sources required by " + "recovery, block id: " + blockGroup.getBlockId();
      throw new IOException(error);
    }
    for (int i=0; i < targets.length; i++) {
      targetBuffers[i]=ByteBuffer.allocate(bufferSize);
    }
    checksumSize=checksum.getChecksumSize();
    int chunkSize=bytesPerChecksum + checksumSize;
    maxChunksPerPacket=Math.max((WRITE_PACKET_SIZE - PacketHeader.PKT_MAX_HEADER_LEN) / chunkSize,1);
    int maxPacketSize=chunkSize * maxChunksPerPacket + PacketHeader.PKT_MAX_HEADER_LEN;
    packetBuf=new byte[maxPacketSize];
    checksumBuf=new byte[checksumSize * (bufferSize / bytesPerChecksum)];
    boolean[] targetsStatus=new boolean[targets.length];
    if (initTargetStreams(targetsStatus) == 0) {
      String error="All targets are failed.";
      throw new IOException(error);
    }
    long firstStripedBlockLength=getBlockLen(blockGroup,0);
    while (positionInBlock < firstStripedBlockLength) {
      int toRead=Math.min(bufferSize,(int)(firstStripedBlockLength - positionInBlock));
      nsuccess=readMinimumStripedData4Recovery(success);
      if (nsuccess < dataBlkNum) {
        String error="Can't read data from minimum number of sources " + "required by recovery, block id: " + blockGroup.getBlockId();
        throw new IOException(error);
      }
      long remaining=firstStripedBlockLength - positionInBlock;
      int toRecoverLen=remaining < bufferSize ? (int)remaining : bufferSize;
      recoverTargets(success,targetsStatus,toRecoverLen);
      if (transferData2Targets(targetsStatus) == 0) {
        String error="Transfer failed for all targets.";
        throw new IOException(error);
      }
      clearBuffers();
      positionInBlock+=toRead;
    }
    endTargetBlocks(targetsStatus);
  }
 catch (  Throwable e) {
    LOG.warn("Failed to recover striped block: " + blockGroup,e);
  }
 finally {
    datanode.decrementXmitsInProgress();
    for (    StripedReader stripedReader : stripedReaders) {
      closeBlockReader(stripedReader.blockReader);
    }
    for (int i=0; i < targets.length; i++) {
      IOUtils.closeStream(targetOutputStreams[i]);
      IOUtils.closeStream(targetInputStreams[i]);
      IOUtils.closeStream(targetSockets[i]);
    }
  }
}
