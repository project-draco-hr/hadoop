{
  int numSegments=segments.size();
  List<Long> segmentSizes=new ArrayList<Long>(numSegments);
  long totalBytes=0;
  int n=numSegments - inMem;
  int f=getPassFactor(factor,1,n) + inMem;
  n=numSegments;
  for (int i=0; i < numSegments; i++) {
    segmentSizes.add(segments.get(i).getLength());
  }
  boolean considerFinalMerge=includeFinalMerge;
  while (n > f || considerFinalMerge) {
    if (n <= f) {
      considerFinalMerge=false;
    }
    long mergedSize=0;
    f=Math.min(f,segmentSizes.size());
    for (int j=0; j < f; j++) {
      mergedSize+=segmentSizes.remove(0);
    }
    totalBytes+=mergedSize;
    int pos=Collections.binarySearch(segmentSizes,mergedSize);
    if (pos < 0) {
      pos=-pos - 1;
    }
    segmentSizes.add(pos,mergedSize);
    n-=(f - 1);
    f=factor;
  }
  return totalBytes;
}
