{
  if (size() == 0) {
    resetKeyValue();
    return false;
  }
  if (minSegment != null) {
    adjustPriorityQueue(minSegment);
    if (size() == 0) {
      minSegment=null;
      resetKeyValue();
      return false;
    }
  }
  minSegment=top();
  long startPos=minSegment.getReader().bytesRead;
  key=minSegment.getKey();
  if (!minSegment.inMemory()) {
    minSegment.getValue(diskIFileValue);
    value.reset(diskIFileValue.getData(),diskIFileValue.getLength());
  }
 else {
    minSegment.getValue(value);
  }
  long endPos=minSegment.getReader().bytesRead;
  totalBytesProcessed+=endPos - startPos;
  mergeProgress.set(Math.min(1.0f,totalBytesProcessed * progPerByte));
  return true;
}
