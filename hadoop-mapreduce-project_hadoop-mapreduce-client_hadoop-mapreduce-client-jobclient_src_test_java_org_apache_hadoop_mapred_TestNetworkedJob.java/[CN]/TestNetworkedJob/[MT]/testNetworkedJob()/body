{
  MiniMRClientCluster mr=null;
  FileSystem fileSys=null;
  try {
    Configuration conf=new Configuration();
    mr=MiniMRClientClusterFactory.create(this.getClass(),2,conf);
    JobConf job=new JobConf(mr.getConfig());
    fileSys=FileSystem.get(job);
    fileSys.delete(testDir,true);
    FSDataOutputStream out=fileSys.create(inFile,true);
    out.writeBytes("This is a test file");
    out.close();
    FileInputFormat.setInputPaths(job,inFile);
    FileOutputFormat.setOutputPath(job,outDir);
    job.setInputFormat(TextInputFormat.class);
    job.setOutputFormat(TextOutputFormat.class);
    job.setMapperClass(IdentityMapper.class);
    job.setReducerClass(IdentityReducer.class);
    job.setNumReduceTasks(0);
    JobClient client=new JobClient(mr.getConfig());
    RunningJob rj=client.submitJob(job);
    JobID jobId=rj.getID();
    NetworkedJob runningJob=(NetworkedJob)client.getJob(jobId);
    runningJob.setJobPriority(JobPriority.HIGH.name());
    assertTrue(runningJob.getConfiguration().toString().endsWith("0001/job.xml"));
    assertEquals(runningJob.getID(),jobId);
    assertEquals(runningJob.getJobID(),jobId.toString());
    assertEquals(runningJob.getJobName(),"N/A");
    assertTrue(runningJob.getJobFile().endsWith(".staging/" + runningJob.getJobID() + "/job.xml"));
    assertTrue(runningJob.getTrackingURL().length() > 0);
    assertTrue(runningJob.mapProgress() == 0.0f);
    assertTrue(runningJob.reduceProgress() == 0.0f);
    assertTrue(runningJob.cleanupProgress() == 0.0f);
    assertTrue(runningJob.setupProgress() == 0.0f);
    TaskCompletionEvent[] tce=runningJob.getTaskCompletionEvents(0);
    assertEquals(tce.length,0);
    assertEquals(runningJob.getHistoryUrl(),"");
    assertFalse(runningJob.isRetired());
    assertEquals(runningJob.getFailureInfo(),"");
    assertEquals(runningJob.getJobStatus().getJobName(),"N/A");
    assertEquals(client.getMapTaskReports(jobId).length,0);
    try {
      client.getSetupTaskReports(jobId);
    }
 catch (    YarnException e) {
      assertEquals(e.getMessage(),"Unrecognized task type: JOB_SETUP");
    }
    try {
      client.getCleanupTaskReports(jobId);
    }
 catch (    YarnException e) {
      assertEquals(e.getMessage(),"Unrecognized task type: JOB_CLEANUP");
    }
    assertEquals(client.getReduceTaskReports(jobId).length,0);
    ClusterStatus status=client.getClusterStatus(true);
    assertEquals(status.getActiveTrackerNames().size(),2);
    assertEquals(status.getBlacklistedTrackers(),0);
    assertEquals(status.getBlacklistedTrackerNames().size(),0);
    assertEquals(status.getBlackListedTrackersInfo().size(),0);
    assertEquals(status.getJobTrackerStatus(),JobTrackerStatus.RUNNING);
    assertEquals(status.getMapTasks(),1);
    assertEquals(status.getMaxMapTasks(),20);
    assertEquals(status.getMaxReduceTasks(),4);
    assertEquals(status.getNumExcludedNodes(),0);
    assertEquals(status.getReduceTasks(),1);
    assertEquals(status.getTaskTrackers(),2);
    assertEquals(status.getTTExpiryInterval(),0);
    assertEquals(status.getJobTrackerStatus(),JobTrackerStatus.RUNNING);
    assertEquals(status.getGraylistedTrackers(),0);
    ByteArrayOutputStream dataOut=new ByteArrayOutputStream();
    status.write(new DataOutputStream(dataOut));
    ClusterStatus status2=new ClusterStatus();
    status2.readFields(new DataInputStream(new ByteArrayInputStream(dataOut.toByteArray())));
    assertEquals(status.getActiveTrackerNames(),status2.getActiveTrackerNames());
    assertEquals(status.getBlackListedTrackersInfo(),status2.getBlackListedTrackersInfo());
    assertEquals(status.getMapTasks(),status2.getMapTasks());
    try {
    }
 catch (    RuntimeException e) {
      assertTrue(e.getMessage().endsWith("not found on CLASSPATH"));
    }
    JobClient.setTaskOutputFilter(job,TaskStatusFilter.ALL);
    assertEquals(JobClient.getTaskOutputFilter(job),TaskStatusFilter.ALL);
    assertEquals(client.getDefaultMaps(),20);
    assertEquals(client.getDefaultReduces(),4);
    assertEquals(client.getSystemDir().getName(),"jobSubmitDir");
    JobQueueInfo[] rootQueueInfo=client.getRootQueues();
    assertEquals(rootQueueInfo.length,1);
    assertEquals(rootQueueInfo[0].getQueueName(),"default");
    JobQueueInfo[] qinfo=client.getQueues();
    assertEquals(qinfo.length,1);
    assertEquals(qinfo[0].getQueueName(),"default");
    assertEquals(client.getChildQueues("default").length,0);
    assertEquals(client.getJobsFromQueue("default").length,1);
    assertTrue(client.getJobsFromQueue("default")[0].getJobFile().endsWith("/job.xml"));
    JobQueueInfo qi=client.getQueueInfo("default");
    assertEquals(qi.getQueueName(),"default");
    assertEquals(qi.getQueueState(),"running");
    QueueAclsInfo[] aai=client.getQueueAclsForCurrentUser();
    assertEquals(aai.length,2);
    assertEquals(aai[0].getQueueName(),"root");
    assertEquals(aai[1].getQueueName(),"default");
    Token<DelegationTokenIdentifier> token=client.getDelegationToken(new Text(UserGroupInformation.getCurrentUser().getShortUserName()));
    assertEquals(token.getKind().toString(),"RM_DELEGATION_TOKEN");
    assertEquals("Expected matching JobIDs",jobId,client.getJob(jobId).getJobStatus().getJobID());
    assertEquals("Expected matching startTimes",rj.getJobStatus().getStartTime(),client.getJob(jobId).getJobStatus().getStartTime());
  }
  finally {
    if (fileSys != null) {
      fileSys.delete(testDir,true);
    }
    if (mr != null) {
      mr.stop();
    }
  }
}
