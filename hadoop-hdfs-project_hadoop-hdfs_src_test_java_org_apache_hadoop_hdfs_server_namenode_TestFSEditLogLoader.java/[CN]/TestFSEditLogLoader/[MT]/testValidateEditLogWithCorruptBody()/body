{
  File testDir=new File(TEST_DIR,"testValidateEditLogWithCorruptBody");
  SortedMap<Long,Long> offsetToTxId=Maps.newTreeMap();
  final int NUM_TXNS=20;
  File logFile=prepareUnfinalizedTestEditLog(testDir,NUM_TXNS,offsetToTxId);
  File logFileBak=new File(testDir,logFile.getName() + ".bak");
  Files.copy(logFile,logFileBak);
  EditLogValidation validation=EditLogFileInputStream.validateEditLog(logFile,Long.MAX_VALUE);
  assertTrue(!validation.hasCorruptHeader());
  assertEquals(NUM_TXNS + 1,validation.getEndTxId());
  for (  Map.Entry<Long,Long> entry : offsetToTxId.entrySet()) {
    long txOffset=entry.getKey();
    long txId=entry.getValue();
    Files.copy(logFileBak,logFile);
    corruptByteInFile(logFile,txOffset);
    validation=EditLogFileInputStream.validateEditLog(logFile,Long.MAX_VALUE);
    long expectedEndTxId=(txId == (NUM_TXNS + 1)) ? NUM_TXNS : (NUM_TXNS + 1);
    assertEquals("Failed when corrupting txn opcode at " + txOffset,expectedEndTxId,validation.getEndTxId());
    assertTrue(!validation.hasCorruptHeader());
  }
  for (  Map.Entry<Long,Long> entry : offsetToTxId.entrySet()) {
    long txOffset=entry.getKey();
    long txId=entry.getValue();
    Files.copy(logFileBak,logFile);
    truncateFile(logFile,txOffset);
    validation=EditLogFileInputStream.validateEditLog(logFile,Long.MAX_VALUE);
    long expectedEndTxId=(txId == 0) ? HdfsServerConstants.INVALID_TXID : (txId - 1);
    assertEquals("Failed when corrupting txid " + txId + " txn opcode "+ "at "+ txOffset,expectedEndTxId,validation.getEndTxId());
    assertTrue(!validation.hasCorruptHeader());
  }
}
