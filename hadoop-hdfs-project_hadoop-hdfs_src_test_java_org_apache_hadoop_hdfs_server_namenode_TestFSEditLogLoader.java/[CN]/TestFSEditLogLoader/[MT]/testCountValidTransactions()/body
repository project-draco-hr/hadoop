{
  File testDir=new File(TEST_DIR,"testCountValidTransactions");
  File logFile=new File(testDir,NNStorage.getInProgressEditsFileName(1));
  FSEditLog fsel=null;
  final int NUM_TXNS=30;
  SortedMap<Long,Long> offsetToTxId=Maps.newTreeMap();
  try {
    fsel=FSImageTestUtil.createStandaloneEditLog(testDir);
    fsel.openForWrite();
    assertTrue("should exist: " + logFile,logFile.exists());
    for (int i=0; i < NUM_TXNS; i++) {
      long trueOffset=getNonTrailerLength(logFile);
      long thisTxId=fsel.getLastWrittenTxId() + 1;
      offsetToTxId.put(trueOffset,thisTxId);
      System.err.println("txid " + thisTxId + " at offset "+ trueOffset);
      fsel.logDelete("path" + i,i);
      fsel.logSync();
    }
  }
  finally {
    if (fsel != null) {
      fsel.close();
    }
  }
  logFile=testDir.listFiles()[0];
  long validLength=getNonTrailerLength(logFile);
  EditLogValidation validation=EditLogFileInputStream.validateEditLog(logFile);
  assertEquals(NUM_TXNS + 2,validation.getNumTransactions());
  assertEquals(validLength,validation.getValidLength());
  File logFileBak=new File(testDir,logFile.getName() + ".bak");
  Files.copy(logFile,logFileBak);
  for (  Map.Entry<Long,Long> entry : offsetToTxId.entrySet()) {
    long txOffset=entry.getKey();
    long txid=entry.getValue();
    Files.copy(logFileBak,logFile);
    truncateFile(logFile,txOffset);
    validation=EditLogFileInputStream.validateEditLog(logFile);
    assertEquals("Failed when truncating to length " + txOffset,txid - 1,validation.getNumTransactions());
    assertEquals(txOffset,validation.getValidLength());
    Files.copy(logFileBak,logFile);
    truncateFile(logFile,txOffset + 1);
    validation=EditLogFileInputStream.validateEditLog(logFile);
    assertEquals("Failed when truncating to length " + (txOffset + 1),txid - 1,validation.getNumTransactions());
    assertEquals(txOffset,validation.getValidLength());
    Files.copy(logFileBak,logFile);
    corruptByteInFile(logFile,txOffset);
    validation=EditLogFileInputStream.validateEditLog(logFile);
    assertEquals("Failed when corrupting txn opcode at " + txOffset,txid - 1,validation.getNumTransactions());
    assertEquals(txOffset,validation.getValidLength());
    Files.copy(logFileBak,logFile);
    corruptByteInFile(logFile,txOffset + 5);
    validation=EditLogFileInputStream.validateEditLog(logFile);
    assertEquals("Failed when corrupting txn data at " + (txOffset + 5),txid - 1,validation.getNumTransactions());
    assertEquals(txOffset,validation.getValidLength());
  }
  long prevNumValid=0;
  for (long offset=0; offset < validLength; offset++) {
    Files.copy(logFileBak,logFile);
    corruptByteInFile(logFile,offset);
    EditLogValidation val=EditLogFileInputStream.validateEditLog(logFile);
    assertTrue(val.getNumTransactions() >= prevNumValid);
    prevNumValid=val.getNumTransactions();
  }
}
