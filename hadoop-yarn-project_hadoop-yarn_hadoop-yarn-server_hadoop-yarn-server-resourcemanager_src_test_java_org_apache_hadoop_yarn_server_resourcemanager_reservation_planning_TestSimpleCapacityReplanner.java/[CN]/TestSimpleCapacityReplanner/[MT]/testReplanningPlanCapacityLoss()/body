{
  Resource clusterCapacity=Resource.newInstance(100 * 1024,10);
  Resource minAlloc=Resource.newInstance(1024,1);
  Resource maxAlloc=Resource.newInstance(1024 * 8,8);
  ResourceCalculator res=new DefaultResourceCalculator();
  long step=1L;
  Clock clock=mock(Clock.class);
  ReservationAgent agent=mock(ReservationAgent.class);
  SharingPolicy policy=new NoOverCommitPolicy();
  policy.init("root.dedicated",null);
  QueueMetrics queueMetrics=mock(QueueMetrics.class);
  when(clock.getTime()).thenReturn(0L);
  SimpleCapacityReplanner enf=new SimpleCapacityReplanner(clock);
  RMContext context=ReservationSystemTestUtil.createMockRMContext();
  ReservationSchedulerConfiguration conf=mock(ReservationSchedulerConfiguration.class);
  when(conf.getEnforcementWindow(any(String.class))).thenReturn(6L);
  enf.init("blah",conf);
  InMemoryPlan plan=new InMemoryPlan(queueMetrics,policy,agent,clusterCapacity,step,res,minAlloc,maxAlloc,"dedicated",enf,true,context,clock);
  long ts=System.currentTimeMillis();
  ReservationId r1=ReservationId.newInstance(ts,1);
  int[] f5={20,20,20,20,20};
  ReservationDefinition rDef=ReservationSystemTestUtil.createSimpleReservationDefinition(0,0 + f5.length,f5.length);
  assertTrue(plan.toString(),plan.addReservation(new InMemoryReservationAllocation(r1,rDef,"u3","dedicated",0,0 + f5.length,generateAllocation(0,f5),res,minAlloc)));
  when(clock.getTime()).thenReturn(1L);
  ReservationId r2=ReservationId.newInstance(ts,2);
  assertTrue(plan.toString(),plan.addReservation(new InMemoryReservationAllocation(r2,rDef,"u4","dedicated",0,0 + f5.length,generateAllocation(0,f5),res,minAlloc)));
  when(clock.getTime()).thenReturn(2L);
  ReservationId r3=ReservationId.newInstance(ts,3);
  assertTrue(plan.toString(),plan.addReservation(new InMemoryReservationAllocation(r3,rDef,"u5","dedicated",0,0 + f5.length,generateAllocation(0,f5),res,minAlloc)));
  when(clock.getTime()).thenReturn(3L);
  ReservationId r4=ReservationId.newInstance(ts,4);
  assertTrue(plan.toString(),plan.addReservation(new InMemoryReservationAllocation(r4,rDef,"u6","dedicated",0,0 + f5.length,generateAllocation(0,f5),res,minAlloc)));
  when(clock.getTime()).thenReturn(4L);
  ReservationId r5=ReservationId.newInstance(ts,5);
  assertTrue(plan.toString(),plan.addReservation(new InMemoryReservationAllocation(r5,rDef,"u7","dedicated",0,0 + f5.length,generateAllocation(0,f5),res,minAlloc)));
  int[] f6={50,50,50,50,50};
  ReservationId r6=ReservationId.newInstance(ts,6);
  assertTrue(plan.toString(),plan.addReservation(new InMemoryReservationAllocation(r6,rDef,"u3","dedicated",10,10 + f6.length,generateAllocation(10,f6),res,minAlloc)));
  when(clock.getTime()).thenReturn(6L);
  ReservationId r7=ReservationId.newInstance(ts,7);
  assertTrue(plan.toString(),plan.addReservation(new InMemoryReservationAllocation(r7,rDef,"u4","dedicated",10,10 + f6.length,generateAllocation(10,f6),res,minAlloc)));
  plan.setTotalCapacity(Resource.newInstance(70 * 1024,70));
  when(clock.getTime()).thenReturn(0L);
  enf.plan(plan,null);
  assertNotNull(plan.getReservationById(r1));
  assertNotNull(plan.getReservationById(r2));
  assertNotNull(plan.getReservationById(r3));
  assertNotNull(plan.getReservationById(r6));
  assertNotNull(plan.getReservationById(r7));
  assertNull(plan.getReservationById(r4));
  assertNull(plan.getReservationById(r5));
  for (int i=0; i < 20; i++) {
    int tot=0;
    for (    ReservationAllocation r : plan.getReservationsAtTime(i)) {
      tot=r.getResourcesAtTime(i).getMemory();
    }
    assertTrue(tot <= 70 * 1024);
  }
}
