{
  long time=WINDOW_LEN_MS + BUCKET_LEN * 3 / 2;
  for (int i=0; i < users.length; i++)   manager.recordMetric(time,"open",users[i],(i + 1) * 2);
  time++;
  for (int i=0; i < users.length; i++)   manager.recordMetric(time,"close",users[i],i + 1);
  time++;
  TopWindow tops=manager.snapshot(time);
  assertEquals("Unexpected number of ops",2,tops.getOps().size());
  for (  Op op : tops.getOps()) {
    final List<User> topUsers=op.getTopUsers();
    assertEquals("Unexpected number of users",N_TOP_USERS,topUsers.size());
    if (op.getOpType() == "open") {
      for (int i=0; i < topUsers.size(); i++) {
        User user=topUsers.get(i);
        assertEquals("Unexpected count for user " + user.getUser(),(users.length - i) * 2,user.getCount());
      }
      assertEquals("Unexpected total count for op",(2 + (users.length * 2)) * (users.length / 2),op.getTotalCount());
    }
  }
  time+=WINDOW_LEN_MS - 2;
  tops=manager.snapshot(time);
  assertEquals("Unexpected number of ops",1,tops.getOps().size());
  final Op op=tops.getOps().get(0);
  assertEquals("Should only see close ops","close",op.getOpType());
  final List<User> topUsers=op.getTopUsers();
  for (int i=0; i < topUsers.size(); i++) {
    User user=topUsers.get(i);
    assertEquals("Unexpected count for user " + user.getUser(),(users.length - i),user.getCount());
  }
  assertEquals("Unexpected total count for op",(1 + users.length) * (users.length / 2),op.getTotalCount());
}
