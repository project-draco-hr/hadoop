{
  for (int i=0; i < args.length; i++) {
    if ("-l".equalsIgnoreCase(args[i]) || "--language".equalsIgnoreCase(args[i])) {
      language=args[i + 1].toLowerCase();
      i++;
    }
 else     if ("-d".equalsIgnoreCase(args[i]) || "--destdir".equalsIgnoreCase(args[i])) {
      destDir=args[i + 1];
      i++;
    }
 else     if (args[i].startsWith("-")) {
      String arg=args[i].substring(1);
      if (arg.startsWith("-")) {
        arg=arg.substring(1);
      }
      cmdargs.add(arg.toLowerCase());
    }
 else {
      recFiles.add(args[i]);
    }
  }
  if (recFiles.size() == 0) {
    usage();
    return 1;
  }
  for (int i=0; i < recFiles.size(); i++) {
    curFileName=recFiles.get(i);
    File file=new File(curFileName);
    try {
      FileReader reader=new FileReader(file);
      Rcc parser=new Rcc(reader);
      try {
        recTab=new Hashtable<String,JRecord>();
        curFile=parser.Input();
      }
 catch (      ParseException e) {
        System.err.println(e.toString());
        return 1;
      }
      try {
        reader.close();
      }
 catch (      IOException e) {
      }
    }
 catch (    FileNotFoundException e) {
      System.err.println("File " + recFiles.get(i) + " Not found.");
      return 1;
    }
    try {
      int retCode=curFile.genCode(language,destDir,cmdargs);
      if (retCode != 0) {
        return retCode;
      }
    }
 catch (    IOException e) {
      System.err.println(e.toString());
      return 1;
    }
  }
  return 0;
}
