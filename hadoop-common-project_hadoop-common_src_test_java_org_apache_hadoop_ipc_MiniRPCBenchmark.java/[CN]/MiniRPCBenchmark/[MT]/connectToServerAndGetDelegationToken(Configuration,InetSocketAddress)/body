{
  MiniProtocol client=null;
  try {
    UserGroupInformation current=UserGroupInformation.getCurrentUser();
    UserGroupInformation proxyUserUgi=UserGroupInformation.createProxyUserForTesting(MINI_USER,current,GROUP_NAMES);
    try {
      client=proxyUserUgi.doAs(new PrivilegedExceptionAction<MiniProtocol>(){
        public MiniProtocol run() throws IOException {
          MiniProtocol p=(MiniProtocol)RPC.getProxy(MiniProtocol.class,MiniProtocol.versionID,addr,conf);
          Token<TestDelegationTokenIdentifier> token;
          token=p.getDelegationToken(new Text(RENEWER));
          currentUgi=UserGroupInformation.createUserForTesting(MINI_USER,GROUP_NAMES);
          SecurityUtil.setTokenService(token,addr);
          currentUgi.addToken(token);
          return p;
        }
      }
);
    }
 catch (    InterruptedException e) {
      Assert.fail(Arrays.toString(e.getStackTrace()));
    }
  }
  finally {
    RPC.stopProxy(client);
  }
}
