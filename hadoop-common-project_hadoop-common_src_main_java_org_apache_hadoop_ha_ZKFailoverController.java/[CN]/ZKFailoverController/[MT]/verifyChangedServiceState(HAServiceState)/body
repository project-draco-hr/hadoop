{
synchronized (elector) {
synchronized (this) {
      if (serviceState == HAServiceState.INITIALIZING) {
        if (quitElectionOnBadState) {
          LOG.debug("rechecking for electability from bad state");
          recheckElectability();
        }
        return;
      }
      if (changedState == serviceState) {
        serviceStateMismatchCount=0;
        return;
      }
      if (serviceStateMismatchCount == 0) {
        serviceStateMismatchCount++;
        return;
      }
      LOG.error("Local service " + localTarget + " has changed the serviceState to "+ changedState+ ". Expected was "+ serviceState+ ". Quitting election marking fencing necessary.");
      delayJoiningUntilNanotime=System.nanoTime() + TimeUnit.MILLISECONDS.toNanos(1000);
      elector.quitElection(true);
      quitElectionOnBadState=true;
      serviceStateMismatchCount=0;
      serviceState=HAServiceState.INITIALIZING;
    }
  }
}
