{
  zkQuorum=conf.get(ZK_QUORUM_KEY);
  int zkTimeout=conf.getInt(ZK_SESSION_TIMEOUT_KEY,ZK_SESSION_TIMEOUT_DEFAULT);
  String zkAclConf=conf.get(ZK_ACL_KEY,ZK_ACL_DEFAULT);
  zkAclConf=ZKUtil.resolveConfIndirection(zkAclConf);
  List<ACL> zkAcls=ZKUtil.parseACLs(zkAclConf);
  if (zkAcls.isEmpty()) {
    zkAcls=Ids.CREATOR_ALL_ACL;
  }
  String zkAuthConf=conf.get(ZK_AUTH_KEY);
  zkAuthConf=ZKUtil.resolveConfIndirection(zkAuthConf);
  List<ZKAuthInfo> zkAuths;
  if (zkAuthConf != null) {
    zkAuths=ZKUtil.parseAuth(zkAuthConf);
  }
 else {
    zkAuths=Collections.emptyList();
  }
  Preconditions.checkArgument(zkQuorum != null,"Missing required configuration '%s' for ZooKeeper quorum",ZK_QUORUM_KEY);
  Preconditions.checkArgument(zkTimeout > 0,"Invalid ZK session timeout %s",zkTimeout);
  int maxRetryNum=conf.getInt(CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_KEY,CommonConfigurationKeys.HA_FC_ELECTOR_ZK_OP_RETRIES_DEFAULT);
  elector=new ActiveStandbyElector(zkQuorum,zkTimeout,getParentZnode(),zkAcls,zkAuths,new ElectorCallbacks(),maxRetryNum);
}
