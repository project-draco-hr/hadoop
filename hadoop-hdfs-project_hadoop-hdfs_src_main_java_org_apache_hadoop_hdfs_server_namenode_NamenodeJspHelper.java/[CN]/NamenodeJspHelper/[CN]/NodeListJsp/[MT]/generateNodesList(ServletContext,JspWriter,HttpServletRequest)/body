{
  final NameNode nn=NameNodeHttpServer.getNameNodeFromContext(context);
  final FSNamesystem ns=nn.getNamesystem();
  final DatanodeManager dm=ns.getBlockManager().getDatanodeManager();
  final List<DatanodeDescriptor> live=new ArrayList<DatanodeDescriptor>();
  final List<DatanodeDescriptor> dead=new ArrayList<DatanodeDescriptor>();
  dm.fetchDatanodes(live,dead,true);
  InetSocketAddress nnSocketAddress=(InetSocketAddress)context.getAttribute(NameNodeHttpServer.NAMENODE_ADDRESS_ATTRIBUTE_KEY);
  String nnaddr=nnSocketAddress.getAddress().getHostAddress() + ":" + nnSocketAddress.getPort();
  whatNodes=request.getParameter("whatNodes");
  if (null == whatNodes || whatNodes.isEmpty()) {
    out.print("Invalid input");
    return;
  }
  sorterField=request.getParameter("sorter/field");
  sorterOrder=request.getParameter("sorter/order");
  if (sorterField == null)   sorterField="name";
  if (sorterOrder == null)   sorterOrder="ASC";
  JspHelper.sortNodeList(live,sorterField,sorterOrder);
  String port_suffix=null;
  if (live.size() > 0) {
    String name=live.get(0).getXferAddr();
    int idx=name.indexOf(':');
    if (idx > 0) {
      port_suffix=name.substring(idx);
    }
    for (int i=1; port_suffix != null && i < live.size(); i++) {
      if (live.get(i).getXferAddr().endsWith(port_suffix) == false) {
        port_suffix=null;
        break;
      }
    }
  }
  counterReset();
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
  }
  if (live.isEmpty() && dead.isEmpty()) {
    out.print("There are no datanodes in the cluster");
  }
 else {
    int nnHttpPort=nn.getHttpAddress().getPort();
    out.print("<div id=\"dfsnodetable\"> ");
    if (whatNodes.equals("LIVE")) {
      out.print("<a name=\"LiveNodes\" id=\"title\">" + "Live Datanodes : " + live.size() + "</a>"+ "<br><br>\n<table class=\"nodes\">\n");
      counterReset();
      if (live.size() > 0) {
        if (live.get(0).getCapacity() > 1024 * diskBytes) {
          diskBytes*=1024;
          diskByteStr="TB";
        }
        out.print("<tr class=\"headerRow\"> <th " + nodeHeaderStr("name") + "> Node <th "+ nodeHeaderStr("address")+ "> Transferring<br>Address <th "+ nodeHeaderStr("lastcontact")+ "> Last <br>Contact <th "+ nodeHeaderStr("adminstate")+ "> Admin State <th "+ nodeHeaderStr("capacity")+ "> Configured <br>Capacity ("+ diskByteStr+ ") <th "+ nodeHeaderStr("used")+ "> Used <br>("+ diskByteStr+ ") <th "+ nodeHeaderStr("nondfsused")+ "> Non DFS <br>Used ("+ diskByteStr+ ") <th "+ nodeHeaderStr("remaining")+ "> Remaining <br>("+ diskByteStr+ ") <th "+ nodeHeaderStr("pcused")+ "> Used <br>(%) <th "+ nodeHeaderStr("pcused")+ "> Used <br>(%) <th "+ nodeHeaderStr("pcremaining")+ "> Remaining <br>(%) <th "+ nodeHeaderStr("blocks")+ "> Blocks <th "+ nodeHeaderStr("bpused")+ "> Block Pool<br>Used ("+ diskByteStr+ ") <th "+ nodeHeaderStr("pcbpused")+ "> Block Pool<br>Used (%)"+ " <th "+ nodeHeaderStr("volfails")+ "> Failed Volumes\n");
        JspHelper.sortNodeList(live,sorterField,sorterOrder);
        for (int i=0; i < live.size(); i++) {
          generateNodeData(out,live.get(i),port_suffix,true,nnHttpPort,nnaddr);
        }
      }
      out.print("</table>\n");
    }
 else     if (whatNodes.equals("DEAD")) {
      out.print("<br> <a name=\"DeadNodes\" id=\"title\"> " + " Dead Datanodes : " + dead.size() + "</a><br><br>\n");
      if (dead.size() > 0) {
        out.print("<table border=1 cellspacing=0> <tr id=\"row1\"> " + "<th " + nodeHeaderStr("node") + "> Node <th "+ nodeHeaderStr("address")+ "> Transferring<br>Address <th "+ nodeHeaderStr("decommissioned")+ "> Decommissioned\n");
        JspHelper.sortNodeList(dead,sorterField,sorterOrder);
        for (int i=0; i < dead.size(); i++) {
          generateNodeData(out,dead.get(i),port_suffix,false,nnHttpPort,nnaddr);
        }
        out.print("</table>\n");
      }
    }
 else     if (whatNodes.equals("DECOMMISSIONING")) {
      final List<DatanodeDescriptor> decommissioning=dm.getDecommissioningNodes();
      out.print("<br> <a name=\"DecommissioningNodes\" id=\"title\"> " + " Decommissioning Datanodes : " + decommissioning.size() + "</a><br><br>\n");
      if (decommissioning.size() > 0) {
        out.print("<table border=1 cellspacing=0> <tr class=\"headRow\"> " + "<th " + nodeHeaderStr("name") + "> Node <th "+ nodeHeaderStr("address")+ "> Transferring<br>Address <th "+ nodeHeaderStr("lastcontact")+ "> Last <br>Contact <th "+ nodeHeaderStr("underreplicatedblocks")+ "> Under Replicated Blocks <th "+ nodeHeaderStr("blockswithonlydecommissioningreplicas")+ "> Blocks With No <br> Live Replicas <th "+ nodeHeaderStr("underrepblocksinfilesunderconstruction")+ "> Under Replicated Blocks <br> In Files Under Construction"+ " <th "+ nodeHeaderStr("timesincedecommissionrequest")+ "> Time Since Decommissioning Started");
        JspHelper.sortNodeList(decommissioning,"name","ASC");
        for (int i=0; i < decommissioning.size(); i++) {
          generateDecommissioningNodeData(out,decommissioning.get(i),port_suffix,true,nnHttpPort,nnaddr);
        }
        out.print("</table>\n");
      }
    }
 else {
      out.print("Invalid input");
    }
    out.print("</div>");
  }
}
