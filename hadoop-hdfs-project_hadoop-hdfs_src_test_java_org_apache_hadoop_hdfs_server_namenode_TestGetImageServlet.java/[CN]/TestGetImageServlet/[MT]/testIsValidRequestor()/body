{
  Configuration conf=new HdfsConfiguration();
  KerberosName.setRules("RULE:[1:$1]\nRULE:[2:$1]");
  conf.set(DFSConfigKeys.DFS_NAMESERVICES,"ns1");
  conf.set(DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_HA_NAMENODES_KEY_PREFIX,"ns1"),"nn1,nn2");
  conf.set(DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY,"ns1","nn1"),"host1:1234");
  conf.set(DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY,"ns1","nn1"),"hdfs/_HOST@TEST-REALM.COM");
  conf.set(DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_NAMENODE_RPC_ADDRESS_KEY,"ns1","nn2"),"host2:1234");
  conf.set(DFSUtil.addKeySuffixes(DFSConfigKeys.DFS_NAMENODE_USER_NAME_KEY,"ns1","nn2"),"hdfs/_HOST@TEST-REALM.COM");
  NameNode.initializeGenericKeys(conf,"ns1","nn1");
  AccessControlList acls=Mockito.mock(AccessControlList.class);
  Mockito.when(acls.isUserAllowed(Mockito.<UserGroupInformation>any())).thenReturn(false);
  ServletContext context=Mockito.mock(ServletContext.class);
  Mockito.when(context.getAttribute(HttpServer2.ADMINS_ACL)).thenReturn(acls);
  assertTrue(GetImageServlet.isValidRequestor(context,"hdfs/host2@TEST-REALM.COM",conf));
  Mockito.when(acls.isUserAllowed(Mockito.argThat(new ArgumentMatcher<UserGroupInformation>(){
    @Override public boolean matches(    Object argument){
      return ((UserGroupInformation)argument).getShortUserName().equals("atm");
    }
  }
))).thenReturn(true);
  assertTrue(GetImageServlet.isValidRequestor(context,"hdfs/host2@TEST-REALM.COM",conf));
  assertTrue(GetImageServlet.isValidRequestor(context,"atm@TEST-REALM.COM",conf));
  assertFalse(GetImageServlet.isValidRequestor(context,"todd@TEST-REALM.COM",conf));
}
