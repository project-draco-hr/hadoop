{
  final NavigableMap<Integer,Integer> map=new TreeMap<Integer,Integer>();
  final Integer[] integers=new Integer[numOfElements];
  for (int i=0; i < integers.length; i++) {
    integers[i]=2 * i;
    map.put(integers[i],integers[i]);
  }
  System.out.println("\n\nintegers=" + Arrays.asList(integers));
  System.out.println("map=" + map);
  for (int start=-1; start <= 2 * integers.length - 1; start++) {
    final List<Integer> iteration=new ArrayList<Integer>();
    for (    Map.Entry<Integer,Integer> e : new CyclicIteration<Integer,Integer>(map,start)) {
      iteration.add(e.getKey());
    }
    System.out.println("start=" + start + ", iteration="+ iteration);
    for (int i=0; i < integers.length; i++) {
      final int j=((start + 2) / 2 + i) % integers.length;
      assertEquals("i=" + i + ", j="+ j,iteration.get(i),integers[j]);
    }
  }
}
