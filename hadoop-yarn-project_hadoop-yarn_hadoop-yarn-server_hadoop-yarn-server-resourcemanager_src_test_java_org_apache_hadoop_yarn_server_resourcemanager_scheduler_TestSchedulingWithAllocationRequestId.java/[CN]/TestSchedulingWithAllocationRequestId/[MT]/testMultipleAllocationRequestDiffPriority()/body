{
  configureScheduler();
  YarnConfiguration conf=getConf();
  MockRM rm=new MockRM(conf);
  try {
    rm.start();
    MockNM nm1=rm.registerNode("127.0.0.1:1234",4 * GB);
    MockNM nm2=rm.registerNode("127.0.0.2:5678",4 * GB);
    RMApp app1=rm.submitApp(2048);
    nm1.nodeHeartbeat(true);
    RMAppAttempt attempt1=app1.getCurrentAppAttempt();
    MockAM am1=rm.sendAMLaunched(attempt1.getAppAttemptId());
    am1.registerAppAttempt();
    am1.addRequests(new String[]{"127.0.0.1"},2 * GB,2,1,10L);
    AllocateResponse allocResponse=am1.schedule();
    am1.addRequests(new String[]{"127.0.0.2"},2 * GB,1,2,20L);
    allocResponse=am1.schedule();
    nm2.nodeHeartbeat(true);
    while (allocResponse.getAllocatedContainers().size() < 2) {
      LOG.info("Waiting for containers to be created for app 1...");
      Thread.sleep(100);
      allocResponse=am1.schedule();
    }
    List<Container> allocated=allocResponse.getAllocatedContainers();
    Assert.assertEquals(2,allocated.size());
    for (    Container container : allocated) {
      checkAllocatedContainer(container,2 * GB,nm2.getNodeId(),20);
    }
    nm1.nodeHeartbeat(true);
    allocResponse=am1.schedule();
    while (allocResponse.getAllocatedContainers().size() < 1) {
      LOG.info("Waiting for containers to be created for app 1...");
      Thread.sleep(100);
      allocResponse=am1.schedule();
    }
    allocated=allocResponse.getAllocatedContainers();
    Assert.assertEquals(1,allocated.size());
    checkAllocatedContainer(allocated.get(0),2 * GB,nm1.getNodeId(),10);
  }
  finally {
    if (rm != null) {
      rm.stop();
    }
  }
}
