{
  configureScheduler();
  YarnConfiguration conf=getConf();
  MockRM rm=new MockRM(conf);
  try {
    rm.start();
    String host0="host_0";
    String host1="host_1";
    MockNM nm1=new MockNM(host0 + ":1234",8 * GB,rm.getResourceTrackerService());
    nm1.registerNode();
    MockNM nm2=new MockNM(host1 + ":2351",8 * GB,rm.getResourceTrackerService());
    nm2.registerNode();
    RMApp app1=rm.submitApp(1 * GB,"user_0","a1");
    MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm1);
    int numContainers=1;
    am1.addRequests(new String[]{host0,host1},1 * GB,1,numContainers,5L);
    AllocateResponse allocResponse=am1.schedule();
    nm1.nodeHeartbeat(true);
    allocResponse=am1.schedule();
    while (allocResponse.getAllocatedContainers().size() < 1) {
      LOG.info("Waiting for containers to be created for app 1...");
      Thread.sleep(100);
      allocResponse=am1.schedule();
    }
    List<Container> allocated=allocResponse.getAllocatedContainers();
    Assert.assertEquals(1,allocated.size());
    checkAllocatedContainer(allocated.get(0),1 * GB,nm1.getNodeId(),5L);
    RMApp app2=rm.submitApp(1 * GB,"user_1","a2");
    MockAM am2=MockRM.launchAndRegisterAM(app2,rm,nm2);
    am2.addRequests(new String[]{host0,host1},2 * GB,1,numContainers,5L);
    am2.schedule();
    nm2.nodeHeartbeat(true);
    allocResponse=am2.schedule();
    while (allocResponse.getAllocatedContainers().size() < 1) {
      LOG.info("Waiting for containers to be created for app 1...");
      Thread.sleep(100);
      allocResponse=am2.schedule();
    }
    allocated=allocResponse.getAllocatedContainers();
    Assert.assertEquals(1,allocated.size());
    checkAllocatedContainer(allocated.get(0),2 * GB,nm2.getNodeId(),5L);
    am2.addRequests(new String[]{host0,host1},3 * GB,1,numContainers,10L);
    am2.schedule();
    nm1.nodeHeartbeat(true);
    allocResponse=am2.schedule();
    while (allocResponse.getAllocatedContainers().size() < 1) {
      LOG.info("Waiting for containers to be created for app 1...");
      Thread.sleep(100);
      allocResponse=am2.schedule();
    }
    allocated=allocResponse.getAllocatedContainers();
    Assert.assertEquals(1,allocated.size());
    checkAllocatedContainer(allocated.get(0),3 * GB,nm1.getNodeId(),10L);
    am1.addRequests(new String[]{host0,host1},4 * GB,1,numContainers,10L);
    am1.schedule();
    nm2.nodeHeartbeat(true);
    allocResponse=am1.schedule();
    while (allocResponse.getAllocatedContainers().size() < 1) {
      LOG.info("Waiting for containers to be created for app 1...");
      Thread.sleep(100);
      allocResponse=am1.schedule();
    }
    allocated=allocResponse.getAllocatedContainers();
    Assert.assertEquals(1,allocated.size());
    checkAllocatedContainer(allocated.get(0),4 * GB,nm2.getNodeId(),10L);
  }
  finally {
    if (rm != null) {
      rm.stop();
    }
  }
}
