{
  int replication=2;
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(replication).build();
  DistributedFileSystem fs=cluster.getFileSystem();
  PrintStream psBackup=System.out;
  ByteArrayOutputStream out=new ByteArrayOutputStream();
  PrintStream psOut=new PrintStream(out);
  System.setOut(psOut);
  FsShell shell=new FsShell();
  shell.setConf(conf);
  try {
    Path myPath=new Path("/test/dir");
    assertTrue(fs.mkdirs(myPath));
    assertTrue(fs.exists(myPath));
    Path myFile=new Path("/test/dir/file");
    writeFile(fs,myFile);
    assertTrue(fs.exists(myFile));
    Path myFile2=new Path("/test/dir/file2");
    writeFile(fs,myFile2);
    assertTrue(fs.exists(myFile2));
    Long myFileLength=fs.getFileStatus(myFile).getLen();
    Long myFileDiskUsed=myFileLength * replication;
    Long myFile2Length=fs.getFileStatus(myFile2).getLen();
    Long myFile2DiskUsed=myFile2Length * replication;
    String[] args=new String[2];
    args[0]="-du";
    args[1]="/test/dir";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
    String returnString=out.toString();
    out.reset();
    assertThat(returnString,containsString(myFileLength.toString()));
    assertThat(returnString,containsString(myFileDiskUsed.toString()));
    assertThat(returnString,containsString(myFile2Length.toString()));
    assertThat(returnString,containsString(myFile2DiskUsed.toString()));
    String snapshotName="ss1";
    Path snapshotPath=new Path(myPath,".snapshot/" + snapshotName);
    fs.allowSnapshot(myPath);
    assertThat(fs.createSnapshot(myPath,snapshotName),is(snapshotPath));
    assertThat(fs.delete(myFile,false),is(true));
    assertThat(fs.exists(myFile),is(false));
    args=new String[3];
    args[0]="-du";
    args[1]="-s";
    args[2]=snapshotPath.toString();
    val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertThat(val,is(0));
    returnString=out.toString();
    out.reset();
    Long combinedLength=myFileLength + myFile2Length;
    Long combinedDiskUsed=myFileDiskUsed + myFile2DiskUsed;
    assertThat(returnString,containsString(combinedLength.toString()));
    assertThat(returnString,containsString(combinedDiskUsed.toString()));
  }
  finally {
    System.setOut(psBackup);
    cluster.shutdown();
  }
}
