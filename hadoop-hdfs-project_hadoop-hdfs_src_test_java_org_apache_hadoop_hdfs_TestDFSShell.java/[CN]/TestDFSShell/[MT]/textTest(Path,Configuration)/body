{
  PrintStream bak=null;
  try {
    final FileSystem fs=root.getFileSystem(conf);
    fs.mkdirs(root);
    OutputStream zout=new GZIPOutputStream(fs.create(new Path(root,"file.gz")));
    Random r=new Random();
    bak=System.out;
    ByteArrayOutputStream file=new ByteArrayOutputStream();
    for (int i=0; i < 1024; ++i) {
      char c=Character.forDigit(r.nextInt(26) + 10,36);
      file.write(c);
      zout.write(c);
    }
    zout.close();
    ByteArrayOutputStream out=new ByteArrayOutputStream();
    System.setOut(new PrintStream(out));
    String[] argv=new String[2];
    argv[0]="-text";
    argv[1]=new Path(root,"file.gz").toString();
    int ret=ToolRunner.run(new FsShell(conf),argv);
    assertEquals("'-text " + argv[1] + " returned "+ ret,0,ret);
    assertTrue("Output doesn't match input",Arrays.equals(file.toByteArray(),out.toByteArray()));
    SequenceFile.Writer writer=SequenceFile.createWriter(conf,SequenceFile.Writer.file(new Path(root,"file.gz")),SequenceFile.Writer.keyClass(Text.class),SequenceFile.Writer.valueClass(Text.class));
    writer.append(new Text("Foo"),new Text("Bar"));
    writer.close();
    out=new ByteArrayOutputStream();
    System.setOut(new PrintStream(out));
    argv=new String[2];
    argv[0]="-text";
    argv[1]=new Path(root,"file.gz").toString();
    ret=ToolRunner.run(new FsShell(conf),argv);
    assertEquals("'-text " + argv[1] + " returned "+ ret,0,ret);
    assertTrue("Output doesn't match input",Arrays.equals("Foo\tBar\n".getBytes(),out.toByteArray()));
    out.reset();
    OutputStream dout=new DeflaterOutputStream(fs.create(new Path(root,"file.deflate")));
    byte[] outbytes="foo".getBytes();
    dout.write(outbytes);
    dout.close();
    out=new ByteArrayOutputStream();
    System.setOut(new PrintStream(out));
    argv=new String[2];
    argv[0]="-text";
    argv[1]=new Path(root,"file.deflate").toString();
    ret=ToolRunner.run(new FsShell(conf),argv);
    assertEquals("'-text " + argv[1] + " returned "+ ret,0,ret);
    assertTrue("Output doesn't match input",Arrays.equals(outbytes,out.toByteArray()));
    out.reset();
    CompressionCodec codec=(CompressionCodec)ReflectionUtils.newInstance(BZip2Codec.class,conf);
    String extension=codec.getDefaultExtension();
    Path p=new Path(root,"file." + extension);
    OutputStream fout=new DataOutputStream(codec.createOutputStream(fs.create(p,true)));
    byte[] writebytes="foo".getBytes();
    fout.write(writebytes);
    fout.close();
    out=new ByteArrayOutputStream();
    System.setOut(new PrintStream(out));
    argv=new String[2];
    argv[0]="-text";
    argv[1]=new Path(root,p).toString();
    ret=ToolRunner.run(new FsShell(conf),argv);
    assertEquals("'-text " + argv[1] + " returned "+ ret,0,ret);
    assertTrue("Output doesn't match input",Arrays.equals(writebytes,out.toByteArray()));
    out.reset();
    OutputStream pout=fs.create(new Path(root,"file.txt"));
    writebytes="bar".getBytes();
    pout.write(writebytes);
    pout.close();
    out=new ByteArrayOutputStream();
    System.setOut(new PrintStream(out));
    argv=new String[2];
    argv[0]="-text";
    argv[1]=new Path(root,"file.txt").toString();
    ret=ToolRunner.run(new FsShell(conf),argv);
    assertEquals("'-text " + argv[1] + " returned "+ ret,0,ret);
    assertTrue("Output doesn't match input",Arrays.equals(writebytes,out.toByteArray()));
    out.reset();
  }
  finally {
    if (null != bak) {
      System.setOut(bak);
    }
  }
}
