{
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
  FileSystem fs=cluster.getFileSystem();
  FsShell shell=new FsShell();
  shell.setConf(conf);
  FileStatus test=fs.getFileStatus(new Path("/.reserved"));
  assertEquals(FSDirectory.DOT_RESERVED_STRING,test.getPath().getName());
  FileStatus[] stats=fs.listStatus(new Path("/.reserved"));
  assertEquals(2,stats.length);
  assertEquals(FSDirectory.DOT_INODES_STRING,stats[0].getPath().getName());
  assertEquals(conf.get(DFSConfigKeys.DFS_PERMISSIONS_SUPERUSERGROUP_KEY),stats[0].getGroup());
  assertEquals("raw",stats[1].getPath().getName());
  assertEquals(conf.get(DFSConfigKeys.DFS_PERMISSIONS_SUPERUSERGROUP_KEY),stats[1].getGroup());
  stats=fs.listStatus(new Path("/"));
  assertEquals(0,stats.length);
  PrintStream syserr=System.err;
  final ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintStream ps=new PrintStream(baos);
  System.setErr(ps);
  try {
    runCmd(shell,"-ls","/.reserved");
    assertEquals(0,baos.toString().length());
    runCmd(shell,"-ls","/.reserved/raw/.reserved");
    assertTrue(baos.toString().contains("No such file or directory"));
  }
  finally {
    System.setErr(syserr);
    cluster.shutdown();
  }
}
