{
  UserGroupInformation user=UserGroupInformation.createUserForTesting("user",new String[]{"mygroup"});
  MiniDFSCluster cluster=null;
  PrintStream bak=null;
  try {
    final Configuration conf=new HdfsConfiguration();
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
    FileSystem fs=cluster.getFileSystem();
    Path p=new Path("/foo");
    fs.mkdirs(p);
    bak=System.err;
    final FsShell fshell=new FsShell(conf);
    final ByteArrayOutputStream out=new ByteArrayOutputStream();
    System.setErr(new PrintStream(out));
    fs.setPermission(p,new FsPermission((short)0700));
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        int ret=ToolRunner.run(fshell,new String[]{"-setfattr","-n","user.a1","-v","1234","/foo"});
        assertEquals("Returned should be 1",1,ret);
        String str=out.toString();
        assertTrue("Permission denied printed",str.indexOf("Permission denied") != -1);
        out.reset();
        return null;
      }
    }
);
    int ret=ToolRunner.run(fshell,new String[]{"-setfattr","-n","user.a1","-v","1234","/foo"});
    assertEquals("Returned should be 0",0,ret);
    out.reset();
    fs.setPermission(p,new FsPermission((short)0750));
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        int ret=ToolRunner.run(fshell,new String[]{"-getfattr","-n","user.a1","/foo"});
        assertEquals("Returned should be 1",1,ret);
        String str=out.toString();
        assertTrue("Permission denied printed",str.indexOf("Permission denied") != -1);
        out.reset();
        ret=ToolRunner.run(fshell,new String[]{"-setfattr","-x","user.a1","/foo"});
        assertEquals("Returned should be 1",1,ret);
        str=out.toString();
        assertTrue("Permission denied printed",str.indexOf("Permission denied") != -1);
        out.reset();
        return null;
      }
    }
);
  }
  finally {
    if (bak != null) {
      System.setErr(bak);
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
