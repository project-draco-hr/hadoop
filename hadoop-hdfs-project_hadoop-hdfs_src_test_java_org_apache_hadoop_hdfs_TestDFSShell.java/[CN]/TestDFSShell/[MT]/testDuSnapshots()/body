{
  final int replication=2;
  final Configuration conf=new HdfsConfiguration();
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(replication).build();
  final DistributedFileSystem dfs=cluster.getFileSystem();
  final PrintStream psBackup=System.out;
  final ByteArrayOutputStream out=new ByteArrayOutputStream();
  final PrintStream psOut=new PrintStream(out);
  final FsShell shell=new FsShell();
  shell.setConf(conf);
  try {
    System.setOut(psOut);
    cluster.waitActive();
    final Path parent=new Path("/test");
    final Path dir=new Path(parent,"dir");
    mkdir(dfs,dir);
    final Path file=new Path(dir,"file");
    writeFile(dfs,file);
    final Path file2=new Path(dir,"file2");
    writeFile(dfs,file2);
    final Long fileLength=dfs.getFileStatus(file).getLen();
    final Long fileDiskUsed=fileLength * replication;
    final Long file2Length=dfs.getFileStatus(file2).getLen();
    final Long file2DiskUsed=file2Length * replication;
    int ret=-1;
    try {
      ret=shell.run(new String[]{"-du",dir.toString()});
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,ret);
    String returnString=out.toString();
    LOG.info("-du return is:\n" + returnString);
    assertTrue(returnString.contains(fileLength.toString()));
    assertTrue(returnString.contains(fileDiskUsed.toString()));
    assertTrue(returnString.contains(file2Length.toString()));
    assertTrue(returnString.contains(file2DiskUsed.toString()));
    out.reset();
    final String snapshotName="ss1";
    final Path snapshotPath=new Path(parent,".snapshot/" + snapshotName);
    dfs.allowSnapshot(parent);
    assertThat(dfs.createSnapshot(parent,snapshotName),is(snapshotPath));
    rmr(dfs,file);
    final Path newFile=new Path(dir,"newfile");
    writeFile(dfs,newFile);
    final Long newFileLength=dfs.getFileStatus(newFile).getLen();
    final Long newFileDiskUsed=newFileLength * replication;
    ret=-1;
    try {
      ret=shell.run(new String[]{"-du","-s",parent.toString()});
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,ret);
    returnString=out.toString();
    LOG.info("-du -s return is:\n" + returnString);
    Long combinedLength=fileLength + file2Length + newFileLength;
    Long combinedDiskUsed=fileDiskUsed + file2DiskUsed + newFileDiskUsed;
    assertTrue(returnString.contains(combinedLength.toString()));
    assertTrue(returnString.contains(combinedDiskUsed.toString()));
    out.reset();
    ret=-1;
    try {
      ret=shell.run(new String[]{"-du",parent.toString()});
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,ret);
    returnString=out.toString();
    LOG.info("-du return is:\n" + returnString);
    assertTrue(returnString.contains(combinedLength.toString()));
    assertTrue(returnString.contains(combinedDiskUsed.toString()));
    out.reset();
    ret=-1;
    try {
      ret=shell.run(new String[]{"-du","-s","-x",parent.toString()});
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,ret);
    returnString=out.toString();
    LOG.info("-du -s -x return is:\n" + returnString);
    Long exludeSnapshotLength=file2Length + newFileLength;
    Long excludeSnapshotDiskUsed=file2DiskUsed + newFileDiskUsed;
    assertTrue(returnString.contains(exludeSnapshotLength.toString()));
    assertTrue(returnString.contains(excludeSnapshotDiskUsed.toString()));
    out.reset();
    ret=-1;
    try {
      ret=shell.run(new String[]{"-du","-x",parent.toString()});
    }
 catch (    Exception e) {
      System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
    }
    assertEquals(0,ret);
    returnString=out.toString();
    LOG.info("-du -x return is:\n" + returnString);
    assertTrue(returnString.contains(exludeSnapshotLength.toString()));
    assertTrue(returnString.contains(excludeSnapshotDiskUsed.toString()));
    out.reset();
  }
  finally {
    System.setOut(psBackup);
    cluster.shutdown();
  }
}
