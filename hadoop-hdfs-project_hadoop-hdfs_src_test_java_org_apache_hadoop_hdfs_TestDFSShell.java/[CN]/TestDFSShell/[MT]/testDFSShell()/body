{
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(2).build();
  FileSystem fs=cluster.getFileSystem();
  assertTrue("Not a HDFS: " + fs.getUri(),fs instanceof DistributedFileSystem);
  DistributedFileSystem fileSys=(DistributedFileSystem)fs;
  FsShell shell=new FsShell();
  shell.setConf(conf);
  try {
    Path myPath=new Path("/test/mkdirs");
    assertTrue(fileSys.mkdirs(myPath));
    assertTrue(fileSys.exists(myPath));
    assertTrue(fileSys.mkdirs(myPath));
    Path myFile=new Path("/test/mkdirs/myFile");
    writeFile(fileSys,myFile);
    assertTrue(fileSys.exists(myFile));
    Path myFile2=new Path("/test/mkdirs/myFile2");
    writeFile(fileSys,myFile2);
    assertTrue(fileSys.exists(myFile2));
{
      String[] args=new String[2];
      args[0]="-rm";
      args[1]="/test/mkdirs/myFile*";
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertTrue(val == 0);
      assertFalse(fileSys.exists(myFile));
      assertFalse(fileSys.exists(myFile2));
      writeFile(fileSys,myFile);
      assertTrue(fileSys.exists(myFile));
      writeFile(fileSys,myFile2);
      assertTrue(fileSys.exists(myFile2));
    }
{
      String[] args=new String[3];
      args[0]="-cat";
      args[1]="/test/mkdirs/myFile";
      args[2]="/test/mkdirs/myFile2";
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run: " + StringUtils.stringifyException(e));
      }
      assertTrue(val == 0);
    }
    fileSys.delete(myFile2,true);
{
      String[] args=new String[2];
      args[0]="-cat";
      args[1]="/test/mkdirs/myFile1";
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertTrue(val != 0);
    }
{
      String[] args=new String[2];
      args[0]="-rm";
      args[1]="/test/mkdirs/myFile1";
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertTrue(val != 0);
    }
{
      String[] args=new String[2];
      args[0]="-rm";
      args[1]="/test/mkdirs/myFile";
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertTrue(val == 0);
    }
{
      String[] args;
      int val;
      args=new String[3];
      args[0]="-test";
      args[1]="-e";
      args[2]="/test/mkdirs/noFileHere";
      val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(1,val);
      args[1]="-z";
      val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(1,val);
      args=new String[2];
      args[0]="-touchz";
      args[1]="/test/mkdirs/isFileHere";
      val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(0,val);
      args=new String[2];
      args[0]="-touchz";
      args[1]="/test/mkdirs/thisDirNotExists/isFileHere";
      val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(1,val);
      args=new String[3];
      args[0]="-test";
      args[1]="-e";
      args[2]="/test/mkdirs/isFileHere";
      val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(0,val);
      args[1]="-d";
      val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(1,val);
      args[1]="-z";
      val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(0,val);
    }
{
      String[] args=new String[2];
      args[0]="-mkdir";
      args[1]="/test/dir1";
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(0,val);
      String[] args1=new String[3];
      args1[0]="-cp";
      args1[1]="/test/dir1";
      args1[2]="/test/dir1/dir2";
      val=0;
      try {
        val=shell.run(args1);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(1,val);
      args1[0]="-cp";
      args1[1]="/test/dir1";
      args1[2]="/test/dir1foo";
      val=-1;
      try {
        val=shell.run(args1);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(0,val);
      args1[0]="-cp";
      args1[1]="/";
      args1[2]="/test";
      val=0;
      try {
        val=shell.run(args1);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(1,val);
    }
{
      String[] args=new String[3];
      args[0]="-test";
      args[1]="-f";
      args[2]="/test/mkdirs/noFileHere";
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(1,val);
    }
{
      String[] args=new String[3];
      args[0]="-test";
      args[1]="-f";
      args[2]="/test/mkdirs";
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(1,val);
    }
{
      writeFile(fileSys,myFile);
      assertTrue(fileSys.exists(myFile));
      String[] args=new String[3];
      args[0]="-test";
      args[1]="-f";
      args[2]=myFile.toString();
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(0,val);
    }
{
      String[] args=new String[3];
      args[0]="-test";
      args[1]="-s";
      args[2]="/test/mkdirs/noFileHere";
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(1,val);
    }
{
      String[] args=new String[3];
      args[0]="-test";
      args[1]="-s";
      args[2]="/test/mkdirs/isFileHere";
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(1,val);
    }
{
      String[] args=new String[3];
      args[0]="-test";
      args[1]="-s";
      args[2]=myFile.toString();
      int val=-1;
      try {
        val=shell.run(args);
      }
 catch (      Exception e) {
        System.err.println("Exception raised from DFSShell.run " + e.getLocalizedMessage());
      }
      assertEquals(0,val);
    }
  }
  finally {
    try {
      fileSys.close();
    }
 catch (    Exception e) {
    }
    cluster.shutdown();
  }
}
