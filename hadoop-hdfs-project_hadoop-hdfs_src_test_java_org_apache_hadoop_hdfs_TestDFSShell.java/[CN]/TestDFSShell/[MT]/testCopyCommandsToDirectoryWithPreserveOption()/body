{
  Configuration conf=new Configuration();
  conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_XATTRS_ENABLED_KEY,true);
  conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_ACLS_ENABLED_KEY,true);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build();
  FsShell shell=null;
  FileSystem fs=null;
  final String testdir="/tmp/TestDFSShell-testCopyCommandsToDirectoryWithPreserveOption-" + counter.getAndIncrement();
  final Path hdfsTestDir=new Path(testdir);
  try {
    fs=cluster.getFileSystem();
    fs.mkdirs(hdfsTestDir);
    Path srcDir=new Path(hdfsTestDir,"srcDir");
    fs.mkdirs(srcDir);
    fs.setAcl(srcDir,Lists.newArrayList(aclEntry(ACCESS,USER,ALL),aclEntry(ACCESS,USER,"foo",ALL),aclEntry(ACCESS,GROUP,READ_EXECUTE),aclEntry(DEFAULT,GROUP,"bar",READ_EXECUTE),aclEntry(ACCESS,OTHER,EXECUTE)));
    fs.setPermission(srcDir,new FsPermission(ALL,READ_EXECUTE,EXECUTE,true));
    Path srcFile=new Path(srcDir,"srcFile");
    fs.create(srcFile).close();
    FileStatus status=fs.getFileStatus(srcDir);
    final long mtime=status.getModificationTime();
    final long atime=status.getAccessTime();
    final String owner=status.getOwner();
    final String group=status.getGroup();
    final FsPermission perm=status.getPermission();
    fs.setXAttr(srcDir,USER_A1,USER_A1_VALUE);
    fs.setXAttr(srcDir,TRUSTED_A1,TRUSTED_A1_VALUE);
    shell=new FsShell(conf);
    Path targetDir1=new Path(hdfsTestDir,"targetDir1");
    String[] argv=new String[]{"-cp","-p",srcDir.toUri().toString(),targetDir1.toUri().toString()};
    int ret=ToolRunner.run(shell,argv);
    assertEquals("cp -p is not working",SUCCESS,ret);
    FileStatus targetStatus=fs.getFileStatus(targetDir1);
    assertEquals(mtime,targetStatus.getModificationTime());
    assertEquals(atime,targetStatus.getAccessTime());
    assertEquals(owner,targetStatus.getOwner());
    assertEquals(group,targetStatus.getGroup());
    FsPermission targetPerm=targetStatus.getPermission();
    assertTrue(perm.equals(targetPerm));
    Map<String,byte[]> xattrs=fs.getXAttrs(targetDir1);
    assertTrue(xattrs.isEmpty());
    List<AclEntry> acls=fs.getAclStatus(targetDir1).getEntries();
    assertTrue(acls.isEmpty());
    assertFalse(targetPerm.getAclBit());
    Path targetDir2=new Path(hdfsTestDir,"targetDir2");
    argv=new String[]{"-cp","-ptop",srcDir.toUri().toString(),targetDir2.toUri().toString()};
    ret=ToolRunner.run(shell,argv);
    assertEquals("cp -ptop is not working",SUCCESS,ret);
    targetStatus=fs.getFileStatus(targetDir2);
    assertEquals(mtime,targetStatus.getModificationTime());
    assertEquals(atime,targetStatus.getAccessTime());
    assertEquals(owner,targetStatus.getOwner());
    assertEquals(group,targetStatus.getGroup());
    targetPerm=targetStatus.getPermission();
    assertTrue(perm.equals(targetPerm));
    xattrs=fs.getXAttrs(targetDir2);
    assertTrue(xattrs.isEmpty());
    acls=fs.getAclStatus(targetDir2).getEntries();
    assertTrue(acls.isEmpty());
    assertFalse(targetPerm.getAclBit());
    Path targetDir3=new Path(hdfsTestDir,"targetDir3");
    argv=new String[]{"-cp","-ptopx",srcDir.toUri().toString(),targetDir3.toUri().toString()};
    ret=ToolRunner.run(shell,argv);
    assertEquals("cp -ptopx is not working",SUCCESS,ret);
    targetStatus=fs.getFileStatus(targetDir3);
    assertEquals(mtime,targetStatus.getModificationTime());
    assertEquals(atime,targetStatus.getAccessTime());
    assertEquals(owner,targetStatus.getOwner());
    assertEquals(group,targetStatus.getGroup());
    targetPerm=targetStatus.getPermission();
    assertTrue(perm.equals(targetPerm));
    xattrs=fs.getXAttrs(targetDir3);
    assertEquals(xattrs.size(),2);
    assertArrayEquals(USER_A1_VALUE,xattrs.get(USER_A1));
    assertArrayEquals(TRUSTED_A1_VALUE,xattrs.get(TRUSTED_A1));
    acls=fs.getAclStatus(targetDir3).getEntries();
    assertTrue(acls.isEmpty());
    assertFalse(targetPerm.getAclBit());
    Path targetDir4=new Path(hdfsTestDir,"targetDir4");
    argv=new String[]{"-cp","-ptopa",srcDir.toUri().toString(),targetDir4.toUri().toString()};
    ret=ToolRunner.run(shell,argv);
    assertEquals("cp -ptopa is not working",SUCCESS,ret);
    targetStatus=fs.getFileStatus(targetDir4);
    assertEquals(mtime,targetStatus.getModificationTime());
    assertEquals(atime,targetStatus.getAccessTime());
    assertEquals(owner,targetStatus.getOwner());
    assertEquals(group,targetStatus.getGroup());
    targetPerm=targetStatus.getPermission();
    assertTrue(perm.equals(targetPerm));
    xattrs=fs.getXAttrs(targetDir4);
    assertTrue(xattrs.isEmpty());
    acls=fs.getAclStatus(targetDir4).getEntries();
    assertFalse(acls.isEmpty());
    assertTrue(targetPerm.getAclBit());
    assertEquals(fs.getAclStatus(srcDir),fs.getAclStatus(targetDir4));
    Path targetDir5=new Path(hdfsTestDir,"targetDir5");
    argv=new String[]{"-cp","-ptoa",srcDir.toUri().toString(),targetDir5.toUri().toString()};
    ret=ToolRunner.run(shell,argv);
    assertEquals("cp -ptoa is not working",SUCCESS,ret);
    targetStatus=fs.getFileStatus(targetDir5);
    assertEquals(mtime,targetStatus.getModificationTime());
    assertEquals(atime,targetStatus.getAccessTime());
    assertEquals(owner,targetStatus.getOwner());
    assertEquals(group,targetStatus.getGroup());
    targetPerm=targetStatus.getPermission();
    assertTrue(perm.equals(targetPerm));
    xattrs=fs.getXAttrs(targetDir5);
    assertTrue(xattrs.isEmpty());
    acls=fs.getAclStatus(targetDir5).getEntries();
    assertFalse(acls.isEmpty());
    assertTrue(targetPerm.getAclBit());
    assertEquals(fs.getAclStatus(srcDir),fs.getAclStatus(targetDir5));
  }
  finally {
    if (shell != null) {
      shell.close();
    }
    if (fs != null) {
      fs.delete(hdfsTestDir,true);
      fs.close();
    }
    cluster.shutdown();
  }
}
