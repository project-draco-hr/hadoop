{
  Configuration conf=new HdfsConfiguration();
  final int MAX_IDLE_TIME=2000;
  conf.setInt("ipc.client.connection.maxidletime",MAX_IDLE_TIME);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,1000);
  conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).build();
  cluster.waitActive();
  final int nnport=cluster.getNameNodePort();
  InetSocketAddress addr=new InetSocketAddress("localhost",cluster.getNameNodePort());
  DFSClient client=new DFSClient(addr,conf);
  DatanodeInfo[] info=client.datanodeReport(DatanodeReportType.LIVE);
  assertEquals("Number of Datanodes ",numDatanodes,info.length);
  FileSystem fileSys=cluster.getFileSystem();
  int replicas=1;
  assertTrue(fileSys instanceof DistributedFileSystem);
  try {
    System.out.println("Creating testdir1 and testdir1/test1.dat.");
    Path dir1=new Path("testdir1");
    Path file1=new Path(dir1,"test1.dat");
    FSDataOutputStream stm=writeFile(fileSys,file1,replicas);
    FileStatus stat=fileSys.getFileStatus(file1);
    long atimeBeforeClose=stat.getAccessTime();
    String adate=dateForm.format(new Date(atimeBeforeClose));
    System.out.println("atime on " + file1 + " before close is "+ adate+ " ("+ atimeBeforeClose+ ")");
    assertTrue(atimeBeforeClose != 0);
    stm.close();
    stat=fileSys.getFileStatus(file1);
    long atime1=stat.getAccessTime();
    long mtime1=stat.getModificationTime();
    adate=dateForm.format(new Date(atime1));
    String mdate=dateForm.format(new Date(mtime1));
    System.out.println("atime on " + file1 + " is "+ adate+ " ("+ atime1+ ")");
    System.out.println("mtime on " + file1 + " is "+ mdate+ " ("+ mtime1+ ")");
    assertTrue(atime1 != 0);
    stat=fileSys.getFileStatus(dir1);
    long mdir1=stat.getAccessTime();
    assertTrue(mdir1 == 0);
    long atime2=atime1 - (24L * 3600L * 1000L);
    fileSys.setTimes(file1,-1,atime2);
    stat=fileSys.getFileStatus(file1);
    long atime3=stat.getAccessTime();
    String adate3=dateForm.format(new Date(atime3));
    System.out.println("new atime on " + file1 + " is "+ adate3+ " ("+ atime3+ ")");
    assertTrue(atime2 == atime3);
    assertTrue(mtime1 == stat.getModificationTime());
    long mtime2=mtime1 - (3600L * 1000L);
    fileSys.setTimes(file1,mtime2,-1);
    stat=fileSys.getFileStatus(file1);
    long mtime3=stat.getModificationTime();
    String mdate3=dateForm.format(new Date(mtime3));
    System.out.println("new mtime on " + file1 + " is "+ mdate3+ " ("+ mtime3+ ")");
    assertTrue(atime2 == stat.getAccessTime());
    assertTrue(mtime2 == mtime3);
    long mtime4=Time.now() - (3600L * 1000L);
    long atime4=Time.now();
    fileSys.setTimes(dir1,mtime4,atime4);
    stat=fileSys.getFileStatus(dir1);
    assertTrue("Not matching the modification times",mtime4 == stat.getModificationTime());
    assertTrue("Not matching the access times",atime4 == stat.getAccessTime());
    Path nonExistingDir=new Path(dir1,"/nonExistingDir/");
    try {
      fileSys.setTimes(nonExistingDir,mtime4,atime4);
      fail("Expecting FileNotFoundException");
    }
 catch (    FileNotFoundException e) {
      assertTrue(e.getMessage().contains("File/Directory " + nonExistingDir.toString() + " does not exist."));
    }
    cluster.shutdown();
    try {
      Thread.sleep(2 * MAX_IDLE_TIME);
    }
 catch (    InterruptedException e) {
    }
    cluster=new MiniDFSCluster.Builder(conf).nameNodePort(nnport).format(false).build();
    cluster.waitActive();
    fileSys=cluster.getFileSystem();
    System.out.println("Verifying times after cluster restart");
    stat=fileSys.getFileStatus(file1);
    assertTrue(atime2 == stat.getAccessTime());
    assertTrue(mtime3 == stat.getModificationTime());
    cleanupFile(fileSys,file1);
    cleanupFile(fileSys,dir1);
  }
 catch (  IOException e) {
    info=client.datanodeReport(DatanodeReportType.ALL);
    printDatanodeReport(info);
    throw e;
  }
 finally {
    fileSys.close();
    cluster.shutdown();
  }
}
