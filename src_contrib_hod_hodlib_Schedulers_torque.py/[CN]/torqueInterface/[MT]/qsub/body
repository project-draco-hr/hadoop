def qsub(self, argList, stdinList):
    jobID = False
    exitCode = 0
    qsubCommand = ('%s %s' % (self.__qsub, args_to_string(argList)))
    self.__log.debug(('qsub -> %s' % qsubCommand))
    qsubProcess = simpleCommand('qsub', qsubCommand, env=self.__env)
    qsubProcess.start()
    while (qsubProcess.stdin == None):
        time.sleep(0.2)
    try:
        for line in stdinList:
            self.__log.debug(('qsub stdin: %s' % line))
            print  >> qsubProcess.stdin, line
        qsubProcess.stdin.close()
    except IOError as i:
        qsubProcess.wait()
        qsubProcess.join()
        output = qsubProcess.output()
        if (output != []):
            self.__log.critical(('qsub Failure : %s ' % output[0].strip()))
            self.__log.critical(('qsub Command : %s' % qsubCommand))
        return (None, qsubProcess.exit_code())
    qsubProcess.wait()
    qsubProcess.join()
    exitCode = qsubProcess.exit_code()
    if (exitCode == 0):
        buffer = qsubProcess.output()
        jobID = buffer[0].rstrip('\n')
        self.__log.debug(('qsub jobid: %s' % jobID))
    else:
        self.__log.critical(('qsub error: %s' % qsubProcess.exit_status_string()))
    return (jobID, exitCode)
