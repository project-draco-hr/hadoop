{
  if (status != StreamStatus.NORMAL) {
    if (in != null) {
      in.close();
      in=null;
    }
    final URLOpener opener=(resolvedURL.getURL() == null) ? originalURL : resolvedURL;
    final HttpURLConnection connection=opener.openConnection();
    try {
      connection.setRequestMethod("GET");
      if (startPos != 0) {
        connection.setRequestProperty("Range","bytes=" + startPos + "-");
      }
      connection.connect();
      final String cl=connection.getHeaderField(StreamFile.CONTENT_LENGTH);
      filelength=(cl == null) ? -1 : Long.parseLong(cl);
      if (HftpFileSystem.LOG.isDebugEnabled()) {
        HftpFileSystem.LOG.debug("filelength = " + filelength);
      }
      in=connection.getInputStream();
    }
 catch (    FileNotFoundException fnfe) {
      throw fnfe;
    }
catch (    IOException ioe) {
      HftpFileSystem.throwIOExceptionFromConnection(connection,ioe);
    }
    int respCode=connection.getResponseCode();
    if (startPos != 0 && respCode != HttpURLConnection.HTTP_PARTIAL) {
      throw new IOException("HTTP_PARTIAL expected, received " + respCode);
    }
 else     if (startPos == 0 && respCode != HttpURLConnection.HTTP_OK) {
      throw new IOException("HTTP_OK expected, received " + respCode);
    }
    resolvedURL.setURL(connection.getURL());
    status=StreamStatus.NORMAL;
  }
  return in;
}
