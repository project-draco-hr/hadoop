{
  Path dirName=new Path(TEST_DIR,"testGetClosest.mapfile");
  FileSystem fs=FileSystem.getLocal(conf);
  Path qualifiedDirName=fs.makeQualified(dirName);
  MapFile.Writer.setIndexInterval(conf,3);
  MapFile.Writer writer=new MapFile.Writer(conf,fs,qualifiedDirName.toString(),Text.class,Text.class);
  assertEquals(3,writer.getIndexInterval());
  final int FIRST_KEY=10;
  for (int i=FIRST_KEY; i < 100; i+=10) {
    String iStr=Integer.toString(i);
    Text t=new Text("00".substring(iStr.length()) + iStr);
    writer.append(t,t);
  }
  writer.close();
  MapFile.Reader reader=new MapFile.Reader(qualifiedDirName,conf);
  try {
    Text key=new Text("55");
    Text value=new Text();
    Text closest=(Text)reader.getClosest(key,value);
    assertEquals(new Text("60"),closest);
    closest=(Text)reader.getClosest(key,value,true);
    assertEquals(new Text("50"),closest);
    final Text TWENTY=new Text("20");
    closest=(Text)reader.getClosest(TWENTY,value);
    assertEquals(TWENTY,closest);
    closest=(Text)reader.getClosest(TWENTY,value,true);
    assertEquals(TWENTY,closest);
    key=new Text("00");
    closest=(Text)reader.getClosest(key,value);
    assertEquals(FIRST_KEY,Integer.parseInt(closest.toString()));
    closest=(Text)reader.getClosest(key,value,true);
    assertNull(closest);
    key=new Text("99");
    closest=(Text)reader.getClosest(key,value);
    assertNull(closest);
    closest=(Text)reader.getClosest(key,value,true);
    assertEquals(new Text("90"),closest);
  }
  finally {
    reader.close();
  }
}
