{
  final String TEST_METHOD_KEY="testMerge.mapfile";
  int SIZE=10;
  int ITERATIONS=5;
  Path[] in=new Path[5];
  List<Integer> expected=new ArrayList<Integer>();
  for (int j=0; j < 5; j++) {
    try (MapFile.Writer writer=createWriter(TEST_METHOD_KEY + "." + j,IntWritable.class,Text.class)){
      in[j]=new Path(TEST_DIR,TEST_METHOD_KEY + "." + j);
      for (int i=0; i < SIZE; i++) {
        expected.add(i + j);
        writer.append(new IntWritable(i + j),new Text("Value:" + (i + j)));
      }
    }
   }
  Collections.sort(expected);
  MapFile.Merger merger=new MapFile.Merger(conf);
  merger.merge(in,true,new Path(TEST_DIR,TEST_METHOD_KEY));
  try (MapFile.Reader reader=createReader(TEST_METHOD_KEY,IntWritable.class)){
    int start=0;
    Text startValue=new Text("Value:" + start);
    int i=0;
    while (i++ < ITERATIONS) {
      Iterator<Integer> expectedIterator=expected.iterator();
      IntWritable key=new IntWritable(start);
      Text value=startValue;
      IntWritable prev=new IntWritable(start);
      while (reader.next(key,value)) {
        assertTrue("Next key should be always equal or more",prev.get() <= key.get());
        assertEquals(expectedIterator.next().intValue(),key.get());
        prev.set(key.get());
      }
      reader.reset();
    }
  }
   for (int j=0; j < in.length; j++) {
    Path path=in[j];
    assertFalse("inputs should be deleted",path.getFileSystem(conf).exists(path));
  }
}
