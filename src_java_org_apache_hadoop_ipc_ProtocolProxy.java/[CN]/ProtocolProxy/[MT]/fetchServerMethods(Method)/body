{
  long clientVersion;
  try {
    clientVersion=method.getDeclaringClass().getField("versionID").getLong(method.getDeclaringClass());
  }
 catch (  NoSuchFieldException ex) {
    throw new RuntimeException(ex);
  }
catch (  IllegalAccessException ex) {
    throw new RuntimeException(ex);
  }
  int clientMethodsHash=ProtocolSignature.getFingerprint(method.getDeclaringClass().getMethods());
  ProtocolSignature serverInfo=((VersionedProtocol)proxy).getProtocolSignature(protocol.getName(),clientVersion,clientMethodsHash);
  long serverVersion=serverInfo.getVersion();
  if (serverVersion != clientVersion) {
    throw new RPC.VersionMismatch(protocol.getName(),clientVersion,serverVersion);
  }
  int[] serverMethodsCodes=serverInfo.getMethods();
  if (serverMethodsCodes != null) {
    serverMethods=new HashSet<Integer>(serverMethodsCodes.length);
    for (    int m : serverMethodsCodes) {
      this.serverMethods.add(Integer.valueOf(m));
    }
  }
  serverMethodsFetched=true;
}
