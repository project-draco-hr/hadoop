{
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=null;
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  cluster.waitActive();
  NamenodeProtocols proto=cluster.getNameNodeRpc();
  proto.addCachePool(new CachePoolInfo("pool1").setOwnerName("abc").setGroupName("123").setMode(0755).setWeight(150));
  proto.modifyCachePool(new CachePoolInfo("pool1").setOwnerName("def").setGroupName("456"));
  RemoteIterator<CachePoolInfo> iter=proto.listCachePools("",1);
  CachePoolInfo info=iter.next();
  assertEquals("pool1",info.getPoolName());
  assertEquals("def",info.getOwnerName());
  assertEquals("456",info.getGroupName());
  assertEquals(Integer.valueOf(0755),info.getMode());
  assertEquals(Integer.valueOf(150),info.getWeight());
  try {
    proto.removeCachePool("pool99");
    Assert.fail("expected to get an exception when " + "removing a non-existent pool.");
  }
 catch (  IOException ioe) {
  }
  proto.removeCachePool("pool1");
  try {
    proto.removeCachePool("pool1");
    Assert.fail("expected to get an exception when " + "removing a non-existent pool.");
  }
 catch (  IOException ioe) {
  }
}
