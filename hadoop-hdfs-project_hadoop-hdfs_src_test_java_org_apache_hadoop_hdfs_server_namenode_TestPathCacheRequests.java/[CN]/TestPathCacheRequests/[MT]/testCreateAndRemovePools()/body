{
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=null;
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  cluster.waitActive();
  NamenodeProtocols proto=cluster.getNameNodeRpc();
  CachePoolInfo req=new CachePoolInfo("pool1").setOwnerName("bob").setGroupName("bobgroup").setMode(0755).setWeight(150);
  proto.addCachePool(req);
  try {
    proto.removeCachePool("pool99");
    Assert.fail("expected to get an exception when " + "removing a non-existent pool.");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("can't remove " + "nonexistent cache pool",ioe);
  }
  proto.removeCachePool("pool1");
  try {
    proto.removeCachePool("pool1");
    Assert.fail("expected to get an exception when " + "removing a non-existent pool.");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("can't remove " + "nonexistent cache pool",ioe);
  }
  req=new CachePoolInfo("pool2");
  proto.addCachePool(req);
}
