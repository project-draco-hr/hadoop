{
  ProcessBuilder builder=new ProcessBuilder("bash","-e","-c",cmd);
  setConfAsEnvVars(builder.environment());
  addTargetInfoAsEnvVars(target,builder.environment());
  Process p;
  try {
    p=builder.start();
    p.getOutputStream().close();
  }
 catch (  IOException e) {
    LOG.warn("Unable to execute " + cmd,e);
    return false;
  }
  String pid=tryGetPid(p);
  LOG.info("Launched fencing command '" + cmd + "' with "+ ((pid != null) ? ("pid " + pid) : "unknown pid"));
  String logPrefix=abbreviate(cmd,ABBREV_LENGTH);
  if (pid != null) {
    logPrefix="[PID " + pid + "] "+ logPrefix;
  }
  StreamPumper errPumper=new StreamPumper(LOG,logPrefix,p.getErrorStream(),StreamPumper.StreamType.STDERR);
  errPumper.start();
  StreamPumper outPumper=new StreamPumper(LOG,logPrefix,p.getInputStream(),StreamPumper.StreamType.STDOUT);
  outPumper.start();
  int rc;
  try {
    rc=p.waitFor();
    errPumper.join();
    outPumper.join();
  }
 catch (  InterruptedException ie) {
    LOG.warn("Interrupted while waiting for fencing command: " + cmd);
    return false;
  }
  return rc == 0;
}
