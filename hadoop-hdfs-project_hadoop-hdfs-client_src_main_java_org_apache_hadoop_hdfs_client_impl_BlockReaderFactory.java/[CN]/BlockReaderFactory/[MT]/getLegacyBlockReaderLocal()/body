{
  LOG.trace("{}: trying to construct BlockReaderLocalLegacy",this);
  if (!DFSUtilClient.isLocalAddress(inetSocketAddress)) {
    LOG.trace("{}: can't construct BlockReaderLocalLegacy because the address" + "{} is not local",this,inetSocketAddress);
    return null;
  }
  if (clientContext.getDisableLegacyBlockReaderLocal()) {
    PerformanceAdvisory.LOG.debug("{}: can't construct " + "BlockReaderLocalLegacy because " + "disableLegacyBlockReaderLocal is set.",this);
    return null;
  }
  IOException ioe;
  try {
    return BlockReaderLocalLegacy.newBlockReader(conf,userGroupInformation,configuration,fileName,block,token,datanode,startOffset,length,storageType,tracer);
  }
 catch (  RemoteException remoteException) {
    ioe=remoteException.unwrapRemoteException(InvalidToken.class,AccessControlException.class);
  }
catch (  IOException e) {
    ioe=e;
  }
  if ((!(ioe instanceof AccessControlException)) && isSecurityException(ioe)) {
    throw ioe;
  }
  LOG.warn(this + ": error creating legacy BlockReaderLocal.  " + "Disabling legacy local reads.",ioe);
  clientContext.setDisableLegacyBlockReaderLocal();
  return null;
}
