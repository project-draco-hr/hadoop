{
  Path root=new Path(testRootDir,"TestMerge");
  Path f1=new Path(root,"f1");
  Path f2=new Path(root,"f2");
  Path f3=new Path(root,"f3");
  Path empty=new Path(root,"empty");
  Path fnf=new Path(root,"fnf");
  Path d=new Path(root,"dir");
  Path df1=new Path(d,"df1");
  Path df2=new Path(d,"df2");
  Path df3=new Path(d,"df3");
  createFile(f1,f2,f3,df1,df2,df3);
  createEmptyFile(empty);
  int exit;
  exit=shell.run(new String[]{"-getmerge",f1.toString(),"out"});
  assertEquals(0,exit);
  assertEquals("f1",readFile("out"));
  exit=shell.run(new String[]{"-getmerge",fnf.toString(),"out"});
  assertEquals(1,exit);
  assertFalse(lfs.exists(new Path("out")));
  exit=shell.run(new String[]{"-getmerge",f1.toString(),f2.toString(),"out"});
  assertEquals(0,exit);
  assertEquals("f1f2",readFile("out"));
  exit=shell.run(new String[]{"-getmerge",f2.toString(),f1.toString(),"out"});
  assertEquals(0,exit);
  assertEquals("f2f1",readFile("out"));
  exit=shell.run(new String[]{"-getmerge","-nl",f1.toString(),f2.toString(),"out"});
  assertEquals(0,exit);
  assertEquals("f1\nf2\n",readFile("out"));
  exit=shell.run(new String[]{"-getmerge","-nl","-skip-empty-file",f1.toString(),f2.toString(),empty.toString(),"out"});
  assertEquals(0,exit);
  assertEquals("f1\nf2\n",readFile("out"));
  shell.run(new String[]{"-getmerge","-nl",new Path(root,"f*").toString(),"out"});
  assertEquals(0,exit);
  assertEquals("f1\nf2\nf3\n",readFile("out"));
  shell.run(new String[]{"-getmerge","-nl",root.toString(),"out"});
  assertEquals(0,exit);
  assertEquals("\nf1\nf2\nf3\n",readFile("out"));
  shell.run(new String[]{"-getmerge","-nl",d.toString(),"out"});
  assertEquals(0,exit);
  assertEquals("df1\ndf2\ndf3\n",readFile("out"));
  shell.run(new String[]{"-getmerge","-nl",f1.toString(),d.toString(),f2.toString(),"out"});
  assertEquals(0,exit);
  assertEquals("f1\ndf1\ndf2\ndf3\nf2\n",readFile("out"));
}
