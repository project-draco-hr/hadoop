{
  FSDataInputStream fis=null;
  FileStatus fileStatus=null;
  int bytesRead;
  byte[] buffer=new byte[BLOCKSIZE * 8];
  hdfs.mkdirs(sub);
  Path file1=new Path(sub,file1Name);
  DFSTestUtil.createFile(hdfs,file1,BLOCKSIZE,REPLICATION,SEED);
  hdfs.allowSnapshot(sub);
  hdfs.createSnapshot(sub,snapshot1);
  DFSTestUtil.appendFile(hdfs,file1,BLOCKSIZE);
  fileStatus=hdfs.getFileStatus(file1);
  assertEquals(fileStatus.getLen(),BLOCKSIZE * 2);
  fis=hdfs.open(file1);
  bytesRead=fis.read(buffer,0,buffer.length);
  assertEquals(bytesRead,BLOCKSIZE * 2);
  fis.close();
  Path file1snap1=SnapshotTestHelper.getSnapshotPath(sub,snapshot1,file1Name);
  fis=hdfs.open(file1snap1);
  fileStatus=hdfs.getFileStatus(file1snap1);
  assertEquals(fileStatus.getLen(),BLOCKSIZE);
  bytesRead=fis.read(buffer,0,buffer.length);
  assertEquals(bytesRead,BLOCKSIZE);
  fis.close();
  PrintStream psBackup=System.out;
  ByteArrayOutputStream bao=new ByteArrayOutputStream();
  System.setOut(new PrintStream(bao));
  System.setErr(new PrintStream(bao));
  FsShell shell=new FsShell();
  try {
    ToolRunner.run(conf,shell,new String[]{"-cat","/TestSnapshotFileLength/sub1/.snapshot/snapshot1/file1"});
    assertEquals(bao.size(),BLOCKSIZE);
  }
  finally {
    System.setOut(psBackup);
  }
}
