{
  TimelineEntities te=new TimelineEntities();
  TimelineEntity entity=new TimelineEntity();
  String id="hello";
  String type="world";
  entity.setId(id);
  entity.setType(type);
  entity.setCreatedTime(1425016501000L);
  te.addEntity(entity);
  TimelineMetric metric=new TimelineMetric();
  String metricId="CPU";
  metric.setId(metricId);
  metric.setType(TimelineMetric.Type.SINGLE_VALUE);
  metric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);
  metric.addValue(1425016501000L,1234567L);
  TimelineEntity entity2=new TimelineEntity();
  String id2="metric";
  String type2="app";
  entity2.setId(id2);
  entity2.setType(type2);
  entity2.setCreatedTime(1425016503000L);
  entity2.addMetric(metric);
  te.addEntity(entity2);
  Map<String,TimelineMetric> aggregatedMetrics=new HashMap<String,TimelineMetric>();
  aggregatedMetrics.put(metricId,metric);
  FileSystemTimelineWriterImpl fsi=null;
  try {
    fsi=new FileSystemTimelineWriterImpl();
    fsi.init(new YarnConfiguration());
    fsi.start();
    fsi.write("cluster_id","user_id","flow_name","flow_version",12345678L,"app_id",te);
    String fileName=fsi.getOutputRoot() + "/entities/cluster_id/user_id/flow_name/flow_version/12345678/app_id/" + type+ "/"+ id+ FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;
    Path path=Paths.get(fileName);
    File f=new File(fileName);
    assertTrue(f.exists() && !f.isDirectory());
    List<String> data=Files.readAllLines(path,StandardCharsets.UTF_8);
    assertTrue("data size is:" + data.size(),data.size() == 2);
    String d=data.get(0);
    assertEquals(d,TimelineUtils.dumpTimelineRecordtoJSON(entity));
    String fileName2=fsi.getOutputRoot() + "/entities/cluster_id/user_id/flow_name/flow_version/12345678/app_id/" + type2+ "/"+ id2+ FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;
    Path path2=Paths.get(fileName2);
    File file=new File(fileName2);
    assertTrue(file.exists() && !file.isDirectory());
    List<String> data2=Files.readAllLines(path2,StandardCharsets.UTF_8);
    assertTrue("data size is:" + data.size(),data2.size() == 2);
    String metricToString=data2.get(0);
    assertEquals(metricToString,TimelineUtils.dumpTimelineRecordtoJSON(entity2));
    File outputDir=new File(fsi.getOutputRoot());
    FileUtils.deleteDirectory(outputDir);
    assertTrue(!(f.exists()));
  }
  finally {
    if (fsi != null) {
      fsi.close();
      FileUtils.deleteDirectory(new File(fsi.getOutputRoot()));
    }
  }
}
