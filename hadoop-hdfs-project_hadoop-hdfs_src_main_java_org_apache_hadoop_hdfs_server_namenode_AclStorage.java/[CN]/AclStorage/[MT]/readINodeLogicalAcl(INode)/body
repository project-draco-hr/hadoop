{
  FsPermission perm=inode.getFsPermission();
  AclFeature f=inode.getAclFeature();
  if (f == null) {
    return AclUtil.getMinimalAcl(perm);
  }
  final List<AclEntry> existingAcl;
  List<AclEntry> featureEntries=f.getEntries();
  ScopedAclEntries scoped=new ScopedAclEntries(featureEntries);
  List<AclEntry> accessEntries=scoped.getAccessEntries();
  List<AclEntry> defaultEntries=scoped.getDefaultEntries();
  existingAcl=Lists.newArrayListWithCapacity(featureEntries.size() + 3);
  if (!accessEntries.isEmpty()) {
    existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS).setType(AclEntryType.USER).setPermission(perm.getUserAction()).build());
    existingAcl.addAll(accessEntries);
    existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS).setType(AclEntryType.MASK).setPermission(perm.getGroupAction()).build());
    existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS).setType(AclEntryType.OTHER).setPermission(perm.getOtherAction()).build());
  }
 else {
    existingAcl.addAll(AclUtil.getMinimalAcl(perm));
  }
  existingAcl.addAll(defaultEntries);
  return existingAcl;
}
