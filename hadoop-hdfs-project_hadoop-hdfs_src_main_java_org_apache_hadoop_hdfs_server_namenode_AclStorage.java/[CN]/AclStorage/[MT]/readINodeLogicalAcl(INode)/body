{
  final List<AclEntry> existingAcl;
  FsPermission perm=inode.getFsPermission();
  if (perm.getAclBit()) {
    List<AclEntry> featureEntries=inode.getAclFeature().getEntries();
    ScopedAclEntries scoped=new ScopedAclEntries(featureEntries);
    List<AclEntry> accessEntries=scoped.getAccessEntries();
    List<AclEntry> defaultEntries=scoped.getDefaultEntries();
    existingAcl=Lists.newArrayListWithCapacity(featureEntries.size() + 3);
    if (!accessEntries.isEmpty()) {
      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS).setType(AclEntryType.USER).setPermission(perm.getUserAction()).build());
      existingAcl.addAll(accessEntries);
      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS).setType(AclEntryType.MASK).setPermission(perm.getGroupAction()).build());
      existingAcl.add(new AclEntry.Builder().setScope(AclEntryScope.ACCESS).setType(AclEntryType.OTHER).setPermission(perm.getOtherAction()).build());
    }
 else {
      existingAcl.addAll(getMinimalAcl(perm));
    }
    existingAcl.addAll(defaultEntries);
  }
 else {
    existingAcl=getMinimalAcl(perm);
  }
  return existingAcl;
}
