{
  Configuration sslConf=new HdfsConfiguration(false);
  sslConf.addResource(conf.get(DFSConfigKeys.DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_KEY,DFSConfigKeys.DFS_CLIENT_HTTPS_KEYSTORE_RESOURCE_DEFAULT));
  FileInputStream fis=null;
  try {
    SSLContext sc=SSLContext.getInstance("SSL");
    KeyManager[] kms=null;
    TrustManager[] tms=null;
    if (sslConf.get("ssl.client.keystore.location") != null) {
      KeyManagerFactory kmf=KeyManagerFactory.getInstance("SunX509");
      KeyStore ks=KeyStore.getInstance(sslConf.get("ssl.client.keystore.type","JKS"));
      char[] ksPass=sslConf.get("ssl.client.keystore.password","changeit").toCharArray();
      fis=new FileInputStream(sslConf.get("ssl.client.keystore.location","keystore.jks"));
      ks.load(fis,ksPass);
      kmf.init(ks,sslConf.get("ssl.client.keystore.keypassword","changeit").toCharArray());
      kms=kmf.getKeyManagers();
      fis.close();
      fis=null;
    }
    if (sslConf.getBoolean("ssl.client.do.not.authenticate.server",false)) {
      tms=new DummyTrustManager[]{new DummyTrustManager()};
    }
 else {
      TrustManagerFactory tmf=TrustManagerFactory.getInstance("PKIX");
      KeyStore ts=KeyStore.getInstance(sslConf.get("ssl.client.truststore.type","JKS"));
      char[] tsPass=sslConf.get("ssl.client.truststore.password","changeit").toCharArray();
      fis=new FileInputStream(sslConf.get("ssl.client.truststore.location","truststore.jks"));
      ts.load(fis,tsPass);
      tmf.init(ts);
      tms=tmf.getTrustManagers();
    }
    sc.init(kms,tms,new java.security.SecureRandom());
    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
  }
 catch (  Exception e) {
    throw new IOException("Could not initialize SSLContext",e);
  }
 finally {
    if (fis != null) {
      fis.close();
    }
  }
}
