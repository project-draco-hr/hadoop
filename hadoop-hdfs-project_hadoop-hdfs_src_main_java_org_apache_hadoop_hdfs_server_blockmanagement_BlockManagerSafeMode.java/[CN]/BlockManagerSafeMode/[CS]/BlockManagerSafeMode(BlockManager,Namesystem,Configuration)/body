{
  this.blockManager=blockManager;
  this.namesystem=namesystem;
  this.haEnabled=namesystem.isHaEnabled();
  this.threshold=conf.getFloat(DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY,DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_DEFAULT);
  if (this.threshold > 1.0) {
    LOG.warn("The threshold value should't be greater than 1, threshold: {}",threshold);
  }
  this.datanodeThreshold=conf.getInt(DFS_NAMENODE_SAFEMODE_MIN_DATANODES_KEY,DFS_NAMENODE_SAFEMODE_MIN_DATANODES_DEFAULT);
  int minReplication=conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY,DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_DEFAULT);
  this.safeReplication=conf.getInt(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_REPLICATION_MIN_KEY,minReplication);
  this.replQueueThreshold=conf.getFloat(DFS_NAMENODE_REPL_QUEUE_THRESHOLD_PCT_KEY,(float)threshold);
  this.extension=conf.getInt(DFS_NAMENODE_SAFEMODE_EXTENSION_KEY,0);
  this.inRollBack=isInRollBackMode(NameNode.getStartupOption(conf));
  LOG.info("{} = {}",DFS_NAMENODE_SAFEMODE_THRESHOLD_PCT_KEY,threshold);
  LOG.info("{} = {}",DFS_NAMENODE_SAFEMODE_MIN_DATANODES_KEY,datanodeThreshold);
  LOG.info("{} = {}",DFS_NAMENODE_SAFEMODE_EXTENSION_KEY,extension);
}
