{
  final Path in=new Path("foo").makeQualified(GridmixTestUtils.dfs);
  final Path out=GridmixTestUtils.DEST.makeQualified(GridmixTestUtils.dfs);
  final Path root=new Path("/user");
  Configuration conf=null;
  try {
    ArrayList<String> argsList=new ArrayList<String>();
    argsList.add("-D" + FilePool.GRIDMIX_MIN_FILE + "=0");
    argsList.add("-D" + Gridmix.GRIDMIX_USR_RSV + "="+ EchoUserResolver.class.getName());
    if (!defaultOutputPath) {
      argsList.add("-D" + Gridmix.GRIDMIX_OUT_DIR + "="+ out);
    }
    argsList.add("-generate");
    argsList.add(String.valueOf(GENDATA) + "m");
    argsList.add(in.toString());
    argsList.add("-");
    String[] argv=argsList.toArray(new String[argsList.size()]);
    DebugGridmix client=new DebugGridmix();
    conf=new Configuration();
    conf.setEnum(GridmixJobSubmissionPolicy.JOB_SUBMISSION_POLICY,policy);
    conf.set("mapreduce.job.hdfs-servers","");
    if (useDefaultQueue) {
      conf.setBoolean(GridmixJob.GRIDMIX_USE_QUEUE_IN_TRACE,false);
      conf.set(GridmixJob.GRIDMIX_DEFAULT_QUEUE,"q1");
    }
 else {
      conf.setBoolean(GridmixJob.GRIDMIX_USE_QUEUE_IN_TRACE,true);
    }
    conf=GridmixTestUtils.mrCluster.createJobConf(new JobConf(conf));
    GridmixTestUtils.dfs.mkdirs(root,new FsPermission((short)0777));
    GridmixTestUtils.dfs.setPermission(root,new FsPermission((short)0777));
    int res=ToolRunner.run(conf,client,argv);
    assertEquals("Client exited with nonzero status",0,res);
    client.checkMonitor(conf);
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw new RuntimeException(e);
  }
 finally {
    in.getFileSystem(conf).delete(in,true);
    out.getFileSystem(conf).delete(out,true);
    root.getFileSystem(conf).delete(root,true);
  }
}
