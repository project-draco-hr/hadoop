{
  List<BlockProto> blockProtoList=blkCmd.getBlocksList();
  Block[] blocks=new Block[blockProtoList.size()];
  for (int i=0; i < blockProtoList.size(); i++) {
    blocks[i]=PBHelper.convert(blockProtoList.get(i));
  }
  List<DatanodeInfosProto> targetList=blkCmd.getTargetsList();
  DatanodeInfo[][] targets=new DatanodeInfo[targetList.size()][];
  for (int i=0; i < targetList.size(); i++) {
    targets[i]=PBHelper.convert(targetList.get(i));
  }
  List<StorageUuidsProto> targetStorageUuidsList=blkCmd.getTargetStorageUuidsList();
  String[][] targetStorageIDs=new String[targetStorageUuidsList.size()][];
  for (int i=0; i < targetStorageIDs.length; i++) {
    List<String> storageIDs=targetStorageUuidsList.get(i).getStorageUuidsList();
    targetStorageIDs[i]=storageIDs.toArray(new String[storageIDs.size()]);
  }
  int action=DatanodeProtocol.DNA_UNKNOWN;
switch (blkCmd.getAction()) {
case TRANSFER:
    action=DatanodeProtocol.DNA_TRANSFER;
  break;
case INVALIDATE:
action=DatanodeProtocol.DNA_INVALIDATE;
break;
case SHUTDOWN:
action=DatanodeProtocol.DNA_SHUTDOWN;
break;
}
return new BlockCommand(action,blkCmd.getBlockPoolId(),blocks,targets,targetStorageIDs);
}
