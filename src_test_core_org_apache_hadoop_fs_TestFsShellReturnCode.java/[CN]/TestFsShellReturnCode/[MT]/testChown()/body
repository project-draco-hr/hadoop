{
  FsShell fsShell=new FsShell(conf);
  final String f1=TEST_ROOT_DIR + "/" + "testChown/fileExists";
  final String f2=TEST_ROOT_DIR + "/" + "testChown/fileDoesNotExist";
  final String f3=TEST_ROOT_DIR + "/" + "testChown/nonExistingfiles*";
  Path p1=new Path(f1);
  final Path p4=new Path(TEST_ROOT_DIR + "/" + "testChown/file1");
  final Path p5=new Path(TEST_ROOT_DIR + "/" + "testChown/file2");
  final Path p6=new Path(TEST_ROOT_DIR + "/" + "testChown/file3");
  final String f7=TEST_ROOT_DIR + "/" + "testChown/file*";
  FileSystem fileSys=FileSystem.getLocal(conf);
  writeFile(fileSys,p1);
  assertTrue(fileSys.exists(p1));
  String argv[]={"-chown","admin",f1};
  verify("-chown",argv,1,fsShell,0);
  String argv2[]={"-chown","admin",f2};
  verify("-chown",argv2,1,fsShell,1);
  String argv3[]={"-chown","admin",f3};
  verify("-chown",argv3,1,fsShell,1);
  writeFile(fileSys,p4);
  assertTrue(fileSys.exists(p4));
  writeFile(fileSys,p5);
  assertTrue(fileSys.exists(p5));
  writeFile(fileSys,p6);
  assertTrue(fileSys.exists(p6));
  String argv4[]={"-chown","admin",f7};
  verify("-chown",argv4,1,fsShell,0);
  conf.set("fs.testfs.impl","org.apache.hadoop.fs.TestFsShellReturnCode$LocalFileSystemExtn");
  final String file="testfs:///testFile";
  LocalFileSystemExtn fileSystem=(LocalFileSystemExtn)FileSystem.get(new URI(file),conf);
  String argv5[]={"-chown","admin:Test",file};
  FsShellPermissions.changePermissions("-chown",argv5,1,fsShell);
  assertTrue("Not invoked the setOwner on Fs",fileSystem.groupname.equals("Test"));
  assertTrue("Not invoked the setOwner on Fs",fileSystem.username.equals("admin"));
  String argv6[]={"-chown","admin:",file};
  FsShellPermissions.changePermissions("-chown",argv6,1,fsShell);
  assertTrue("Not invoked the setOwner on Fs",fileSystem.groupname == null);
  assertTrue("Not invoked the setOwner on Fs",fileSystem.username.equals("admin"));
}
