{
  TaskAttemptID[] taskAttemptID=new TaskAttemptID[3];
  JobConf conf=new JobConf();
  conf.setSpeculativeExecution(false);
  conf.setNumMapTasks(2);
  conf.setNumReduceTasks(2);
  conf.set(JobContext.REDUCE_FAILURES_MAXPERCENT,".70");
  conf.set(JobContext.MAP_FAILURES_MAX_PERCENT,".70");
  conf.setBoolean(JobContext.SETUP_CLEANUP_NEEDED,false);
  conf.setMaxTaskFailuresPerTracker(1);
  FakeJobInProgress job=new FakeJobInProgress(conf,jobTracker);
  job.setClusterSize(trackers.length);
  job.initTasks();
  TaskTracker tt1=jobTracker.getTaskTracker(trackers[0]);
  TaskTracker tt2=jobTracker.getTaskTracker(trackers[1]);
  TaskTracker tt3=jobTracker.getTaskTracker(trackers[2]);
  TaskTrackerStatus status1=new TaskTrackerStatus(trackers[0],JobInProgress.convertTrackerNameToHostName(trackers[0]),0,new ArrayList<TaskStatus>(),0,2,2);
  TaskTrackerStatus status2=new TaskTrackerStatus(trackers[1],JobInProgress.convertTrackerNameToHostName(trackers[1]),0,new ArrayList<TaskStatus>(),0,2,2);
  TaskTrackerStatus status3=new TaskTrackerStatus(trackers[1],JobInProgress.convertTrackerNameToHostName(trackers[1]),0,new ArrayList<TaskStatus>(),0,2,2);
  tt1.setStatus(status1);
  tt2.setStatus(status2);
  tt3.setStatus(status3);
  tt1.reserveSlots(TaskType.MAP,job,2);
  tt1.reserveSlots(TaskType.REDUCE,job,2);
  tt3.reserveSlots(TaskType.MAP,job,2);
  tt3.reserveSlots(TaskType.REDUCE,job,2);
  assertEquals("Trackers not reserved for the job : maps",2,job.getNumReservedTaskTrackersForMaps());
  assertEquals("Trackers not reserved for the job : reduces",2,job.getNumReservedTaskTrackersForReduces());
  ClusterMetrics metrics=jobTracker.getClusterMetrics();
  assertEquals("reserved map slots do not match",4,metrics.getReservedMapSlots());
  assertEquals("reserved reduce slots do not match",4,metrics.getReservedReduceSlots());
  TaskAttemptID mTid=job.findMapTask(trackers[0]);
  TaskAttemptID rTid=job.findReduceTask(trackers[0]);
  job.failTask(rTid);
  assertEquals("Tracker 0 not blacklisted for the job",1,job.getBlackListedTrackers().size());
  assertEquals("Extra Trackers reserved for the job : maps",1,job.getNumReservedTaskTrackersForMaps());
  assertEquals("Extra Trackers reserved for the job : reduces",1,job.getNumReservedTaskTrackersForReduces());
  metrics=jobTracker.getClusterMetrics();
  assertEquals("reserved map slots do not match",2,metrics.getReservedMapSlots());
  assertEquals("reserved reduce slots do not match",2,metrics.getReservedReduceSlots());
  job.finishTask(mTid);
  mTid=job.findMapTask(trackers[1]);
  rTid=job.findReduceTask(trackers[1]);
  job.finishTask(mTid);
  job.finishTask(rTid);
  rTid=job.findReduceTask(trackers[1]);
  job.finishTask(rTid);
  assertEquals("Job didnt complete successfully complete",job.getStatus().getRunState(),JobStatus.SUCCEEDED);
  assertEquals("Trackers not unreserved for the job : maps",0,job.getNumReservedTaskTrackersForMaps());
  assertEquals("Trackers not unreserved for the job : reduces",0,job.getNumReservedTaskTrackersForReduces());
  metrics=jobTracker.getClusterMetrics();
  assertEquals("reserved map slots do not match",0,metrics.getReservedMapSlots());
  assertEquals("reserved reduce slots do not match",0,metrics.getReservedReduceSlots());
}
