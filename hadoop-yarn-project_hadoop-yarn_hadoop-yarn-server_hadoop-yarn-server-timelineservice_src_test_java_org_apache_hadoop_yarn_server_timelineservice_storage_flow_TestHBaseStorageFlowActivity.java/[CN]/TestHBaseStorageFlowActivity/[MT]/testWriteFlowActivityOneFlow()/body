{
  String cluster="testWriteFlowActivityOneFlow_cluster1";
  String user="testWriteFlowActivityOneFlow_user1";
  String flow="flow_activity_test_flow_name";
  String flowVersion="A122110F135BC4";
  long runid=1001111178919L;
  TimelineEntities te=new TimelineEntities();
  TimelineEntity entityApp1=TestFlowDataGenerator.getFlowApp1();
  te.addEntity(entityApp1);
  HBaseTimelineWriterImpl hbi=null;
  Configuration c1=util.getConfiguration();
  try {
    hbi=new HBaseTimelineWriterImpl(c1);
    hbi.init(c1);
    String appName="application_1111999999_1234";
    hbi.write(cluster,user,flow,flowVersion,runid,appName,te);
    hbi.flush();
  }
  finally {
    hbi.close();
  }
  checkFlowActivityTable(cluster,user,flow,flowVersion,runid,c1);
  HBaseTimelineReaderImpl hbr=null;
  try {
    hbr=new HBaseTimelineReaderImpl();
    hbr.init(c1);
    hbr.start();
    Set<TimelineEntity> entities=hbr.getEntities(new TimelineReaderContext(cluster,user,flow,null,null,TimelineEntityType.YARN_FLOW_ACTIVITY.toString(),null),new TimelineEntityFilters(10L,null,null,null,null,null,null,null,null),new TimelineDataToRetrieve());
    assertEquals(1,entities.size());
    for (    TimelineEntity e : entities) {
      FlowActivityEntity entity=(FlowActivityEntity)e;
      NavigableSet<FlowRunEntity> flowRuns=entity.getFlowRuns();
      assertEquals(1,flowRuns.size());
      for (      FlowRunEntity flowRun : flowRuns) {
        assertEquals(runid,flowRun.getRunId());
        assertEquals(flowVersion,flowRun.getVersion());
      }
    }
  }
  finally {
    hbr.close();
  }
}
