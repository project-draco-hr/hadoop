{
  if (!isValidRequest()) {
    html.h2($(TITLE));
    return;
  }
  TaskType type=null;
  String symbol=$(TASK_TYPE);
  if (!symbol.isEmpty()) {
    type=MRApps.taskType(symbol);
  }
 else {
    type=app.getTask().getType();
  }
  TR<THEAD<TABLE<Hamlet>>> headRow=html.table("#attempts").thead().tr();
  headRow.th(".id","Attempt").th(".state","State").th(".node","node").th(".tsh","Start Time");
  if (type == TaskType.REDUCE) {
    headRow.th("Shuffle Finish Time");
    headRow.th("Merge Finish Time");
  }
  headRow.th("Finish Time");
  if (type == TaskType.REDUCE) {
    headRow.th("Elapsed Time Shuffle");
    headRow.th("Elapsed Time Merge");
    headRow.th("Elapsed Time Reduce");
  }
  headRow.th("Elapsed Time").th(".note","Note");
  TBODY<TABLE<Hamlet>> tbody=headRow._()._().tbody();
  for (  TaskAttempt ta : getTaskAttempts()) {
    String taid=MRApps.toString(ta.getID());
    String nodeHttpAddr=ta.getNodeHttpAddress();
    String containerIdString=ta.getAssignedContainerID().toString();
    String nodeIdString=ta.getAssignedContainerMgrAddress();
    String nodeRackName=ta.getNodeRackName();
    long attemptStartTime=ta.getLaunchTime();
    long shuffleFinishTime=-1;
    long sortFinishTime=-1;
    long attemptFinishTime=ta.getFinishTime();
    long elapsedShuffleTime=-1;
    long elapsedSortTime=-1;
    long elapsedReduceTime=-1;
    if (type == TaskType.REDUCE) {
      shuffleFinishTime=ta.getShuffleFinishTime();
      sortFinishTime=ta.getSortFinishTime();
      elapsedShuffleTime=Times.elapsed(attemptStartTime,shuffleFinishTime,false);
      elapsedSortTime=Times.elapsed(shuffleFinishTime,sortFinishTime,false);
      elapsedReduceTime=Times.elapsed(sortFinishTime,attemptFinishTime,false);
    }
    long attemptElapsed=Times.elapsed(attemptStartTime,attemptFinishTime,false);
    int sortId=ta.getID().getId() + (ta.getID().getTaskId().getId() * 10000);
    TR<TBODY<TABLE<Hamlet>>> row=tbody.tr();
    TD<TR<TBODY<TABLE<Hamlet>>>> td=row.td();
    td.br().$title(String.valueOf(sortId))._()._(taid)._().td(ta.getState().toString()).td().a(".nodelink",url("http://",nodeHttpAddr),nodeRackName + "/" + nodeHttpAddr);
    td._(" ").a(".logslink",url("logs",nodeIdString,containerIdString,taid,app.getJob().getUserName()),"logs");
    td._();
    row.td().br().$title(String.valueOf(attemptStartTime))._()._(Times.format(attemptStartTime))._();
    if (type == TaskType.REDUCE) {
      row.td().br().$title(String.valueOf(shuffleFinishTime))._()._(Times.format(shuffleFinishTime))._();
      row.td().br().$title(String.valueOf(sortFinishTime))._()._(Times.format(sortFinishTime))._();
    }
    row.td().br().$title(String.valueOf(attemptFinishTime))._()._(Times.format(attemptFinishTime))._();
    if (type == TaskType.REDUCE) {
      row.td().br().$title(String.valueOf(elapsedShuffleTime))._()._(formatTime(elapsedShuffleTime))._();
      row.td().br().$title(String.valueOf(elapsedSortTime))._()._(formatTime(elapsedSortTime))._();
      row.td().br().$title(String.valueOf(elapsedReduceTime))._()._(formatTime(elapsedReduceTime))._();
    }
    row.td().br().$title(String.valueOf(attemptElapsed))._()._(formatTime(attemptElapsed))._().td(".note",Joiner.on('\n').join(ta.getDiagnostics()));
    row._();
  }
  TR<TFOOT<TABLE<Hamlet>>> footRow=tbody._().tfoot().tr();
  footRow.th().input("search_init").$type(InputType.text).$name("attempt_name").$value("Attempt")._()._().th().input("search_init").$type(InputType.text).$name("attempt_state").$value("State")._()._().th().input("search_init").$type(InputType.text).$name("attempt_node").$value("Node")._()._().th().input("search_init").$type(InputType.text).$name("attempt_start_time").$value("Start Time")._()._();
  if (type == TaskType.REDUCE) {
    footRow.th().input("search_init").$type(InputType.text).$name("shuffle_time").$value("Shuffle Time")._()._();
    footRow.th().input("search_init").$type(InputType.text).$name("merge_time").$value("Merge Time")._()._();
  }
  footRow.th().input("search_init").$type(InputType.text).$name("attempt_finish").$value("Finish Time")._()._();
  if (type == TaskType.REDUCE) {
    footRow.th().input("search_init").$type(InputType.text).$name("elapsed_shuffle_time").$value("Elapsed Shuffle Time")._()._();
    footRow.th().input("search_init").$type(InputType.text).$name("elapsed_merge_time").$value("Elapsed Merge Time")._()._();
    footRow.th().input("search_init").$type(InputType.text).$name("elapsed_reduce_time").$value("Elapsed Reduce Time")._()._();
  }
  footRow.th().input("search_init").$type(InputType.text).$name("attempt_elapsed").$value("Elapsed Time")._()._().th().input("search_init").$type(InputType.text).$name("note").$value("Note")._()._();
  footRow._()._()._();
}
