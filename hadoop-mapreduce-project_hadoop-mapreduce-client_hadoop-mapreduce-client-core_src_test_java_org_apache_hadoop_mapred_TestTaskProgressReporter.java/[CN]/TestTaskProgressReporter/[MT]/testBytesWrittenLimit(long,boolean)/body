{
  ExitUtil.disableSystemExit();
  threadExited=false;
  Thread.UncaughtExceptionHandler h=new Thread.UncaughtExceptionHandler(){
    public void uncaughtException(    Thread th,    Throwable ex){
      System.out.println("Uncaught exception: " + ex);
      if (ex instanceof ExitUtil.ExitException) {
        threadExited=true;
      }
    }
  }
;
  JobConf conf=new JobConf();
  conf.getLong(MRJobConfig.TASK_PROGRESS_REPORT_INTERVAL,0);
  conf.setLong(MRJobConfig.TASK_LOCAL_WRITE_LIMIT_BYTES,limit);
  LocalFileSystem localFS=FileSystem.getLocal(conf);
  Path tmpPath=new Path("/tmp/testBytesWrittenLimit-tmpFile-" + new Random(System.currentTimeMillis()).nextInt());
  FSDataOutputStream out=localFS.create(tmpPath,true);
  out.write(new byte[LOCAL_BYTES_WRITTEN]);
  out.close();
  Task task=new DummyTask();
  task.setConf(conf);
  DummyTaskReporter reporter=new DummyTaskReporter(task);
  Thread t=new Thread(reporter);
  t.setUncaughtExceptionHandler(h);
  reporter.setProgressFlag();
  t.start();
  while (!reporter.taskLimitIsChecked) {
    Thread.yield();
  }
  task.setTaskDone();
  reporter.resetDoneFlag();
  t.join();
  Assert.assertEquals(failFast,threadExited);
}
