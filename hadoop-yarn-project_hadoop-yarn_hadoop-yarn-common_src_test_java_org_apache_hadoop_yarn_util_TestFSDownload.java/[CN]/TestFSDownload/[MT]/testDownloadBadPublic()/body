{
  Configuration conf=new Configuration();
  conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,"077");
  FileContext files=FileContext.getLocalFSFileContext(conf);
  final Path basedir=files.makeQualified(new Path("target",TestFSDownload.class.getSimpleName()));
  files.mkdir(basedir,null,true);
  conf.setStrings(TestFSDownload.class.getName(),basedir.toString());
  Map<LocalResource,LocalResourceVisibility> rsrcVis=new HashMap<LocalResource,LocalResourceVisibility>();
  Random rand=new Random();
  long sharedSeed=rand.nextLong();
  rand.setSeed(sharedSeed);
  System.out.println("SEED: " + sharedSeed);
  Map<LocalResource,Future<Path>> pending=new HashMap<LocalResource,Future<Path>>();
  ExecutorService exec=Executors.newSingleThreadExecutor();
  LocalDirAllocator dirs=new LocalDirAllocator(TestFSDownload.class.getName());
  int size=512;
  LocalResourceVisibility vis=LocalResourceVisibility.PUBLIC;
  Path path=new Path(basedir,"test-file");
  LocalResource rsrc=createFile(files,path,size,rand,vis);
  rsrcVis.put(rsrc,vis);
  Path destPath=dirs.getLocalPathForWrite(basedir.toString(),size,conf);
  FSDownload fsd=new FSDownload(files,UserGroupInformation.getCurrentUser(),conf,destPath,rsrc,new Random(sharedSeed));
  pending.put(rsrc,exec.submit(fsd));
  try {
    for (    Map.Entry<LocalResource,Future<Path>> p : pending.entrySet()) {
      p.getValue().get();
      Assert.fail("We localized a file that is not public.");
    }
  }
 catch (  ExecutionException e) {
    Assert.assertTrue(e.getCause() instanceof IOException);
  }
 finally {
    exec.shutdown();
  }
}
