{
  Map<String,String> filterConfig=new HashMap<String,String>();
  filterConfig.put(AuthenticationFilter.COOKIE_PATH,cookiePath);
  for (  Map.Entry<String,String> entry : conf) {
    String propName=entry.getKey();
    if (propName.startsWith(configPrefix)) {
      String value=conf.get(propName);
      String name=propName.substring(configPrefix.length());
      filterConfig.put(name,value);
    }
 else     if (propName.startsWith(ProxyUsers.CONF_HADOOP_PROXYUSER)) {
      String value=conf.get(propName);
      String name=propName.substring("hadoop.".length());
      filterConfig.put(name,value);
    }
  }
  String bindAddress=conf.get(HttpServer2.BIND_ADDRESS);
  String principal=filterConfig.get(kerberosPrincipalProperty);
  if (principal != null) {
    try {
      principal=SecurityUtil.getServerPrincipal(principal,bindAddress);
    }
 catch (    IOException ex) {
      throw new RuntimeException("Could not resolve Kerberos principal name: " + ex.toString(),ex);
    }
    filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL,principal);
  }
  filterConfig.put(DelegationTokenAuthenticationHandler.TOKEN_KIND,RMDelegationTokenIdentifier.KIND_NAME.toString());
  return filterConfig;
}
