{
  Map<String,String> filterConfig=new HashMap<String,String>();
  filterConfig.put(AuthenticationFilter.COOKIE_PATH,cookiePath);
  for (  Map.Entry<String,String> entry : conf) {
    String name=entry.getKey();
    if (name.startsWith(configPrefix)) {
      String value=conf.get(name);
      name=name.substring(configPrefix.length());
      filterConfig.put(name,value);
    }
  }
  String signatureSecretFile=filterConfig.get(signatureSecretFileProperty);
  if (signatureSecretFile != null) {
    Reader reader=null;
    try {
      StringBuilder secret=new StringBuilder();
      reader=new InputStreamReader(new FileInputStream(signatureSecretFile),"UTF-8");
      int c=reader.read();
      while (c > -1) {
        secret.append((char)c);
        c=reader.read();
      }
      filterConfig.put(AuthenticationFilter.SIGNATURE_SECRET,secret.toString());
    }
 catch (    IOException ex) {
      if (UserGroupInformation.isSecurityEnabled()) {
        throw new RuntimeException("Could not read HTTP signature secret file: " + signatureSecretFile);
      }
    }
 finally {
      IOUtils.closeQuietly(reader);
    }
  }
  String bindAddress=conf.get(HttpServer2.BIND_ADDRESS);
  String principal=filterConfig.get(kerberosPrincipalProperty);
  if (principal != null) {
    try {
      principal=SecurityUtil.getServerPrincipal(principal,bindAddress);
    }
 catch (    IOException ex) {
      throw new RuntimeException("Could not resolve Kerberos principal name: " + ex.toString(),ex);
    }
    filterConfig.put(KerberosAuthenticationHandler.PRINCIPAL,principal);
  }
  return filterConfig;
}
