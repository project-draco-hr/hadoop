{
  YarnConfiguration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,true);
  conf.setLong(YarnConfiguration.LOG_AGGREGATION_STATUS_TIME_OUT_MS,1500);
  RMApp rmApp=createRMApp(conf);
  this.rmContext.getRMApps().put(appId,rmApp);
  rmApp.handle(new RMAppEvent(this.appId,RMAppEventType.START));
  rmApp.handle(new RMAppEvent(this.appId,RMAppEventType.APP_NEW_SAVED));
  rmApp.handle(new RMAppEvent(this.appId,RMAppEventType.APP_ACCEPTED));
  NodeId nodeId1=NodeId.newInstance("localhost",1234);
  Resource capability=Resource.newInstance(4096,4);
  RMNodeImpl node1=new RMNodeImpl(nodeId1,rmContext,null,0,0,null,capability,null);
  node1.handle(new RMNodeStartedEvent(nodeId1,null,null));
  rmApp.handle(new RMAppRunningOnNodeEvent(this.appId,nodeId1));
  NodeId nodeId2=NodeId.newInstance("localhost",2345);
  RMNodeImpl node2=new RMNodeImpl(nodeId2,rmContext,null,0,0,null,capability,null);
  node2.handle(new RMNodeStartedEvent(node2.getNodeID(),null,null));
  rmApp.handle(new RMAppRunningOnNodeEvent(this.appId,nodeId2));
  Map<NodeId,LogAggregationReport> logAggregationStatus=rmApp.getLogAggregationReportsForApp();
  Assert.assertEquals(2,logAggregationStatus.size());
  Assert.assertTrue(logAggregationStatus.containsKey(nodeId1));
  Assert.assertTrue(logAggregationStatus.containsKey(nodeId2));
  for (  Entry<NodeId,LogAggregationReport> report : logAggregationStatus.entrySet()) {
    Assert.assertEquals(LogAggregationStatus.NOT_START,report.getValue().getLogAggregationStatus());
  }
  Map<ApplicationId,LogAggregationReport> node1ReportForApp=new HashMap<ApplicationId,LogAggregationReport>();
  String messageForNode1_1="node1 logAggregation status updated at " + System.currentTimeMillis();
  LogAggregationReport report1=LogAggregationReport.newInstance(appId,nodeId1,LogAggregationStatus.RUNNING,messageForNode1_1);
  node1ReportForApp.put(appId,report1);
  node1.handle(new RMNodeStatusEvent(node1.getNodeID(),NodeHealthStatus.newInstance(true,null,0),new ArrayList<ContainerStatus>(),null,null,node1ReportForApp));
  Map<ApplicationId,LogAggregationReport> node2ReportForApp=new HashMap<ApplicationId,LogAggregationReport>();
  String messageForNode2_1="node2 logAggregation status updated at " + System.currentTimeMillis();
  LogAggregationReport report2=LogAggregationReport.newInstance(appId,nodeId2,LogAggregationStatus.RUNNING,messageForNode2_1);
  node2ReportForApp.put(appId,report2);
  node2.handle(new RMNodeStatusEvent(node2.getNodeID(),NodeHealthStatus.newInstance(true,null,0),new ArrayList<ContainerStatus>(),null,null,node2ReportForApp));
  logAggregationStatus=rmApp.getLogAggregationReportsForApp();
  Assert.assertEquals(2,logAggregationStatus.size());
  Assert.assertTrue(logAggregationStatus.containsKey(nodeId1));
  Assert.assertTrue(logAggregationStatus.containsKey(nodeId2));
  for (  Entry<NodeId,LogAggregationReport> report : logAggregationStatus.entrySet()) {
    if (report.getKey().equals(node1.getNodeID())) {
      Assert.assertEquals(LogAggregationStatus.RUNNING,report.getValue().getLogAggregationStatus());
      Assert.assertEquals(messageForNode1_1,report.getValue().getDiagnosticMessage());
    }
 else     if (report.getKey().equals(node2.getNodeID())) {
      Assert.assertEquals(LogAggregationStatus.RUNNING,report.getValue().getLogAggregationStatus());
      Assert.assertEquals(messageForNode2_1,report.getValue().getDiagnosticMessage());
    }
 else {
      Assert.fail("should not contain log aggregation report for other nodes");
    }
  }
  Map<ApplicationId,LogAggregationReport> node1ReportForApp2=new HashMap<ApplicationId,LogAggregationReport>();
  String messageForNode1_2="node1 logAggregation status updated at " + System.currentTimeMillis();
  LogAggregationReport report1_2=LogAggregationReport.newInstance(appId,nodeId1,LogAggregationStatus.RUNNING,messageForNode1_2);
  node1ReportForApp2.put(appId,report1_2);
  node1.handle(new RMNodeStatusEvent(node1.getNodeID(),NodeHealthStatus.newInstance(true,null,0),new ArrayList<ContainerStatus>(),null,null,node1ReportForApp2));
  logAggregationStatus=rmApp.getLogAggregationReportsForApp();
  Assert.assertEquals(2,logAggregationStatus.size());
  Assert.assertTrue(logAggregationStatus.containsKey(nodeId1));
  Assert.assertTrue(logAggregationStatus.containsKey(nodeId2));
  for (  Entry<NodeId,LogAggregationReport> report : logAggregationStatus.entrySet()) {
    if (report.getKey().equals(node1.getNodeID())) {
      Assert.assertEquals(LogAggregationStatus.RUNNING,report.getValue().getLogAggregationStatus());
      Assert.assertEquals(messageForNode1_1 + messageForNode1_2,report.getValue().getDiagnosticMessage());
    }
 else     if (report.getKey().equals(node2.getNodeID())) {
      Assert.assertEquals(LogAggregationStatus.RUNNING,report.getValue().getLogAggregationStatus());
      Assert.assertEquals(messageForNode2_1,report.getValue().getDiagnosticMessage());
    }
 else {
      Assert.fail("should not contain log aggregation report for other nodes");
    }
  }
  rmApp.handle(new RMAppEvent(appId,RMAppEventType.KILL));
  rmApp.handle(new RMAppEvent(appId,RMAppEventType.ATTEMPT_KILLED));
  rmApp.handle(new RMAppEvent(appId,RMAppEventType.APP_UPDATE_SAVED));
  Assert.assertEquals(RMAppState.KILLED,rmApp.getState());
  Thread.sleep(1500);
  logAggregationStatus=rmApp.getLogAggregationReportsForApp();
  Assert.assertEquals(2,logAggregationStatus.size());
  Assert.assertTrue(logAggregationStatus.containsKey(nodeId1));
  Assert.assertTrue(logAggregationStatus.containsKey(nodeId2));
  for (  Entry<NodeId,LogAggregationReport> report : logAggregationStatus.entrySet()) {
    Assert.assertEquals(LogAggregationStatus.TIME_OUT,report.getValue().getLogAggregationStatus());
  }
  Map<ApplicationId,LogAggregationReport> node1ReportForApp3=new HashMap<ApplicationId,LogAggregationReport>();
  String messageForNode1_3="node1 final logAggregation status updated at " + System.currentTimeMillis();
  LogAggregationReport report1_3=LogAggregationReport.newInstance(appId,nodeId1,LogAggregationStatus.SUCCEEDED,messageForNode1_3);
  node1ReportForApp3.put(appId,report1_3);
  node1.handle(new RMNodeStatusEvent(node1.getNodeID(),NodeHealthStatus.newInstance(true,null,0),new ArrayList<ContainerStatus>(),null,null,node1ReportForApp3));
  logAggregationStatus=rmApp.getLogAggregationReportsForApp();
  Assert.assertEquals(2,logAggregationStatus.size());
  Assert.assertTrue(logAggregationStatus.containsKey(nodeId1));
  Assert.assertTrue(logAggregationStatus.containsKey(nodeId2));
  for (  Entry<NodeId,LogAggregationReport> report : logAggregationStatus.entrySet()) {
    if (report.getKey().equals(node1.getNodeID())) {
      Assert.assertEquals(LogAggregationStatus.SUCCEEDED,report.getValue().getLogAggregationStatus());
      Assert.assertEquals(messageForNode1_1 + messageForNode1_2 + messageForNode1_3,report.getValue().getDiagnosticMessage());
    }
 else     if (report.getKey().equals(node2.getNodeID())) {
      Assert.assertEquals(LogAggregationStatus.TIME_OUT,report.getValue().getLogAggregationStatus());
    }
 else {
      Assert.fail("should not contain log aggregation report for other nodes");
    }
  }
}
