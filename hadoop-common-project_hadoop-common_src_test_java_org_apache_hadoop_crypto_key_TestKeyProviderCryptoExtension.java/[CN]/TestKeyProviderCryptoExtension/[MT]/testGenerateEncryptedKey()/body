{
  Configuration conf=new Configuration();
  KeyProvider kp=new UserProvider.Factory().createProvider(new URI("user:///"),conf);
  KeyProvider.Options options=new KeyProvider.Options(conf);
  options.setCipher(CIPHER);
  options.setBitLength(128);
  KeyProvider.KeyVersion kv=kp.createKey("foo",SecureRandom.getSeed(16),options);
  KeyProviderCryptoExtension kpExt=KeyProviderCryptoExtension.createKeyProviderCryptoExtension(kp);
  KeyProviderCryptoExtension.EncryptedKeyVersion ek1=kpExt.generateEncryptedKey(kv.getName());
  Assert.assertEquals(KeyProviderCryptoExtension.EEK,ek1.getEncryptedKey().getVersionName());
  Assert.assertEquals("foo",ek1.getKeyName());
  Assert.assertNotNull(ek1.getEncryptedKey().getMaterial());
  Assert.assertEquals(kv.getMaterial().length,ek1.getEncryptedKey().getMaterial().length);
  KeyProvider.KeyVersion k1=kpExt.decryptEncryptedKey(ek1);
  Assert.assertEquals(KeyProviderCryptoExtension.EK,k1.getVersionName());
  KeyProvider.KeyVersion k1a=kpExt.decryptEncryptedKey(ek1);
  Assert.assertArrayEquals(k1.getMaterial(),k1a.getMaterial());
  Assert.assertEquals(kv.getMaterial().length,k1.getMaterial().length);
  KeyProviderCryptoExtension.EncryptedKeyVersion ek2=kpExt.generateEncryptedKey(kv.getName());
  KeyProvider.KeyVersion k2=kpExt.decryptEncryptedKey(ek2);
  boolean eq=true;
  for (int i=0; eq && i < ek2.getEncryptedKey().getMaterial().length; i++) {
    eq=k2.getMaterial()[i] == k1.getMaterial()[i];
  }
  Assert.assertFalse(eq);
}
