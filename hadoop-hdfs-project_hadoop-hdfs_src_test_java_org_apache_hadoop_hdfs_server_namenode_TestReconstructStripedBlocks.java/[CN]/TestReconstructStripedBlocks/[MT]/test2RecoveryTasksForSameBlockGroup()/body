{
  Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1000);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_INTERVAL_KEY,1000);
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,StripedFileTestUtil.blockSize);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(GROUP_SIZE + 2).build();
  try {
    cluster.waitActive();
    DistributedFileSystem fs=cluster.getFileSystem();
    BlockManager bm=cluster.getNamesystem().getBlockManager();
    fs.getClient().setErasureCodingPolicy("/",null);
    int fileLen=NUM_DATA_BLOCKS * StripedFileTestUtil.blockSize;
    Path p=new Path("/test2RecoveryTasksForSameBlockGroup");
    final byte[] data=new byte[fileLen];
    DFSTestUtil.writeFile(fs,p,data);
    LocatedStripedBlock lb=(LocatedStripedBlock)fs.getClient().getLocatedBlocks(p.toString(),0).get(0);
    LocatedBlock[] lbs=StripedBlockUtil.parseStripedBlockGroup(lb,cellSize,NUM_DATA_BLOCKS,NUM_PARITY_BLOCKS);
    assertEquals(0,getNumberOfBlocksToBeErasureCoded(cluster));
    assertEquals(0,bm.getPendingReconstructionBlocksCount());
    DatanodeInfo dn0=lbs[0].getLocations()[0];
    cluster.stopDataNode(dn0.getName());
    cluster.setDataNodeDead(dn0);
    BlockManagerTestUtil.getComputedDatanodeWork(bm);
    assertEquals(1,getNumberOfBlocksToBeErasureCoded(cluster));
    assertEquals(1,bm.getPendingReconstructionBlocksCount());
    DatanodeInfo dn1=lbs[1].getLocations()[0];
    cluster.stopDataNode(dn1.getName());
    cluster.setDataNodeDead(dn1);
    BlockManagerTestUtil.getComputedDatanodeWork(bm);
    assertEquals(1,getNumberOfBlocksToBeErasureCoded(cluster));
    assertEquals(1,bm.getPendingReconstructionBlocksCount());
  }
  finally {
    cluster.shutdown();
  }
}
