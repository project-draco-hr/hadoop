{
  List<ContainerId> finishedContainersPulledByAM=new ArrayList<ContainerId>();
  try {
    if (heartBeatID == 0) {
      Assert.assertEquals(0,request.getNodeStatus().getContainersStatuses().size());
      Assert.assertEquals(0,context.getContainers().size());
    }
 else     if (heartBeatID == 1) {
      List<ContainerStatus> statuses=request.getNodeStatus().getContainersStatuses();
      Assert.assertEquals(2,statuses.size());
      Assert.assertEquals(2,context.getContainers().size());
      boolean container2Exist=false, container3Exist=false;
      for (      ContainerStatus status : statuses) {
        if (status.getContainerId().equals(containerStatus2.getContainerId())) {
          Assert.assertTrue(status.getState().equals(containerStatus2.getState()));
          container2Exist=true;
        }
        if (status.getContainerId().equals(containerStatus3.getContainerId())) {
          Assert.assertTrue(status.getState().equals(containerStatus3.getState()));
          container3Exist=true;
        }
      }
      Assert.assertTrue(container2Exist && container3Exist);
      throw new YarnRuntimeException("Lost the heartbeat response");
    }
 else     if (heartBeatID == 2 || heartBeatID == 3) {
      List<ContainerStatus> statuses=request.getNodeStatus().getContainersStatuses();
      if (heartBeatID == 2) {
        Assert.assertEquals(4,statuses.size());
      }
 else {
        Assert.assertEquals(2,statuses.size());
      }
      Assert.assertEquals(4,context.getContainers().size());
      boolean container2Exist=false, container3Exist=false, container4Exist=false, container5Exist=false;
      for (      ContainerStatus status : statuses) {
        if (status.getContainerId().equals(containerStatus2.getContainerId())) {
          Assert.assertTrue(status.getState().equals(containerStatus2.getState()));
          container2Exist=true;
        }
        if (status.getContainerId().equals(containerStatus3.getContainerId())) {
          Assert.assertTrue(status.getState().equals(containerStatus3.getState()));
          container3Exist=true;
        }
        if (status.getContainerId().equals(containerStatus4.getContainerId())) {
          Assert.assertTrue(status.getState().equals(containerStatus4.getState()));
          container4Exist=true;
        }
        if (status.getContainerId().equals(containerStatus5.getContainerId())) {
          Assert.assertTrue(status.getState().equals(containerStatus5.getState()));
          container5Exist=true;
        }
      }
      if (heartBeatID == 2) {
        Assert.assertTrue(container2Exist && container3Exist && container4Exist&& container5Exist);
      }
 else {
        Assert.assertTrue(container2Exist && !container3Exist && container4Exist&& !container5Exist);
      }
      if (heartBeatID == 3) {
        finishedContainersPulledByAM.add(containerStatus3.getContainerId());
      }
    }
 else     if (heartBeatID == 4) {
      List<ContainerStatus> statuses=request.getNodeStatus().getContainersStatuses();
      Assert.assertEquals(2,statuses.size());
      Assert.assertEquals(3,context.getContainers().size());
      boolean container3Exist=false;
      for (      ContainerStatus status : statuses) {
        if (status.getContainerId().equals(containerStatus3.getContainerId())) {
          container3Exist=true;
        }
      }
      Assert.assertFalse(container3Exist);
    }
  }
 catch (  AssertionError error) {
    error.printStackTrace();
    assertionFailedInThread.set(true);
  }
 finally {
    heartBeatID++;
  }
  NodeStatus nodeStatus=request.getNodeStatus();
  nodeStatus.setResponseId(heartBeatID);
  NodeHeartbeatResponse nhResponse=YarnServerBuilderUtils.newNodeHeartbeatResponse(heartBeatID,heartBeatNodeAction,null,null,null,null,1000L);
  nhResponse.addContainersToBeRemovedFromNM(finishedContainersPulledByAM);
  Map<ApplicationId,ByteBuffer> appCredentials=new HashMap<ApplicationId,ByteBuffer>();
  DataOutputBuffer dob=new DataOutputBuffer();
  expectedCredentials.writeTokenStorageToStream(dob);
  ByteBuffer byteBuffer1=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  appCredentials.put(ApplicationId.newInstance(1234,1),byteBuffer1);
  nhResponse.setSystemCredentialsForApps(appCredentials);
  return nhResponse;
}
