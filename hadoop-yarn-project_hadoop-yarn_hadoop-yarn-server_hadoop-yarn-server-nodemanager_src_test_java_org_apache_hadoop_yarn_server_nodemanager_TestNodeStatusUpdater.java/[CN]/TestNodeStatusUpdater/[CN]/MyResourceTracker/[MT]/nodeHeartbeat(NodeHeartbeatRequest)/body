{
  NodeStatus nodeStatus=request.getNodeStatus();
  LOG.info("Got heartbeat number " + heartBeatID);
  NodeManagerMetrics mockMetrics=mock(NodeManagerMetrics.class);
  Dispatcher mockDispatcher=mock(Dispatcher.class);
  EventHandler mockEventHandler=mock(EventHandler.class);
  when(mockDispatcher.getEventHandler()).thenReturn(mockEventHandler);
  nodeStatus.setResponseId(heartBeatID++);
  Map<ApplicationId,List<ContainerStatus>> appToContainers=getAppToContainerStatusMap(nodeStatus.getContainersStatuses());
  org.apache.hadoop.yarn.api.records.Container mockContainer=mock(org.apache.hadoop.yarn.api.records.Container.class);
  if (heartBeatID == 1) {
    Assert.assertEquals(0,nodeStatus.getContainersStatuses().size());
    applicationID.setId(heartBeatID);
    appAttemptID.setApplicationId(applicationID);
    firstContainerID.setApplicationAttemptId(appAttemptID);
    firstContainerID.setId(heartBeatID);
    ContainerLaunchContext launchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
    when(mockContainer.getId()).thenReturn(firstContainerID);
    Resource resource=BuilderUtils.newResource(2,1);
    when(mockContainer.getResource()).thenReturn(resource);
    Container container=new ContainerImpl(conf,mockDispatcher,launchContext,mockContainer,null,mockMetrics,null);
    this.context.getContainers().put(firstContainerID,container);
  }
 else   if (heartBeatID == 2) {
    Assert.assertEquals("Number of applications should only be one!",1,nodeStatus.getContainersStatuses().size());
    Assert.assertEquals("Number of container for the app should be one!",1,appToContainers.get(applicationID).size());
    ConcurrentMap<ContainerId,Container> activeContainers=this.context.getContainers();
    Assert.assertEquals(1,activeContainers.size());
    applicationID.setId(heartBeatID);
    appAttemptID.setApplicationId(applicationID);
    secondContainerID.setApplicationAttemptId(appAttemptID);
    secondContainerID.setId(heartBeatID);
    ContainerLaunchContext launchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
    when(mockContainer.getId()).thenReturn(secondContainerID);
    Resource resource=BuilderUtils.newResource(3,1);
    when(mockContainer.getResource()).thenReturn(resource);
    Container container=new ContainerImpl(conf,mockDispatcher,launchContext,mockContainer,null,mockMetrics,null);
    this.context.getContainers().put(secondContainerID,container);
  }
 else   if (heartBeatID == 3) {
    Assert.assertEquals("Number of applications should only be one!",1,appToContainers.size());
    Assert.assertEquals("Number of container for the app should be two!",2,appToContainers.get(applicationID).size());
    ConcurrentMap<ContainerId,Container> activeContainers=this.context.getContainers();
    Assert.assertEquals(2,activeContainers.size());
  }
  NodeHeartbeatResponse nhResponse=YarnServerBuilderUtils.newNodeHeartbeatResponse(heartBeatID,null,null,null,null,1000L);
  return nhResponse;
}
