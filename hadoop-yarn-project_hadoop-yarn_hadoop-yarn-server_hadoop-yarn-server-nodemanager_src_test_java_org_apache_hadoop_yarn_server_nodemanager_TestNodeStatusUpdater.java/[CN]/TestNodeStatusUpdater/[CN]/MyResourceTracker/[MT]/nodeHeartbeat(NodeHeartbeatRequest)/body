{
  NodeStatus nodeStatus=request.getNodeStatus();
  LOG.info("Got heartbeat number " + heartBeatID);
  NodeManagerMetrics mockMetrics=mock(NodeManagerMetrics.class);
  Dispatcher mockDispatcher=mock(Dispatcher.class);
  EventHandler mockEventHandler=mock(EventHandler.class);
  when(mockDispatcher.getEventHandler()).thenReturn(mockEventHandler);
  nodeStatus.setResponseId(heartBeatID++);
  Map<ApplicationId,List<ContainerStatus>> appToContainers=getAppToContainerStatusMap(nodeStatus.getContainersStatuses());
  ApplicationId appId1=ApplicationId.newInstance(0,1);
  ApplicationId appId2=ApplicationId.newInstance(0,2);
  if (heartBeatID == 1) {
    Assert.assertEquals(0,nodeStatus.getContainersStatuses().size());
    ApplicationAttemptId appAttemptID=ApplicationAttemptId.newInstance(appId1,0);
    ContainerId firstContainerID=ContainerId.newInstance(appAttemptID,heartBeatID);
    ContainerLaunchContext launchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
    Resource resource=BuilderUtils.newResource(2,1);
    long currentTime=System.currentTimeMillis();
    String user="testUser";
    ContainerTokenIdentifier containerToken=BuilderUtils.newContainerTokenIdentifier(BuilderUtils.newContainerToken(firstContainerID,"127.0.0.1",1234,user,resource,currentTime + 10000,123,"password".getBytes(),currentTime));
    Container container=new ContainerImpl(conf,mockDispatcher,launchContext,null,mockMetrics,containerToken);
    this.context.getContainers().put(firstContainerID,container);
  }
 else   if (heartBeatID == 2) {
    Assert.assertEquals("Number of applications should only be one!",1,nodeStatus.getContainersStatuses().size());
    Assert.assertEquals("Number of container for the app should be one!",1,appToContainers.get(appId1).size());
    ConcurrentMap<ContainerId,Container> activeContainers=this.context.getContainers();
    Assert.assertEquals(1,activeContainers.size());
    ApplicationAttemptId appAttemptID=ApplicationAttemptId.newInstance(appId2,0);
    ContainerId secondContainerID=ContainerId.newInstance(appAttemptID,heartBeatID);
    ContainerLaunchContext launchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
    long currentTime=System.currentTimeMillis();
    String user="testUser";
    Resource resource=BuilderUtils.newResource(3,1);
    ContainerTokenIdentifier containerToken=BuilderUtils.newContainerTokenIdentifier(BuilderUtils.newContainerToken(secondContainerID,"127.0.0.1",1234,user,resource,currentTime + 10000,123,"password".getBytes(),currentTime));
    Container container=new ContainerImpl(conf,mockDispatcher,launchContext,null,mockMetrics,containerToken);
    this.context.getContainers().put(secondContainerID,container);
  }
 else   if (heartBeatID == 3) {
    Assert.assertEquals("Number of applications should only be one!",1,appToContainers.size());
    Assert.assertEquals("Number of container for the app should be two!",2,appToContainers.get(appId2).size());
    ConcurrentMap<ContainerId,Container> activeContainers=this.context.getContainers();
    Assert.assertEquals(2,activeContainers.size());
  }
  NodeHeartbeatResponse nhResponse=YarnServerBuilderUtils.newNodeHeartbeatResponse(heartBeatID,null,null,null,null,null,1000L);
  return nhResponse;
}
