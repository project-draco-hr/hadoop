{
  final long delta=50000;
  final long nmRmConnectionWaitMs=100;
  final long nmRmRetryInterval=100;
  final long connectionWaitMs=-1;
  final long connectionRetryIntervalMs=1000;
  final long rmStartIntervalMS=2 * 1000;
  conf.setLong(YarnConfiguration.NM_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,nmRmConnectionWaitMs);
  conf.setLong(YarnConfiguration.NM_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,nmRmRetryInterval);
  conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,connectionWaitMs);
  conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,connectionRetryIntervalMs);
  conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY,1);
  NodeManagerWithCustomNodeStatusUpdater nmWithUpdater;
  nm=nmWithUpdater=new NodeManagerWithCustomNodeStatusUpdater(){
    @Override protected NodeStatusUpdater createUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker){
      NodeStatusUpdater nodeStatusUpdater=new MyNodeStatusUpdater6(context,dispatcher,healthChecker,metrics,rmStartIntervalMS,true);
      return nodeStatusUpdater;
    }
  }
;
  nm.init(conf);
  long waitStartTime=System.currentTimeMillis();
  try {
    nm.start();
    Assert.fail("NM should have failed to start due to RM connect failure");
  }
 catch (  Exception e) {
    long t=System.currentTimeMillis();
    long duration=t - waitStartTime;
    boolean waitTimeValid=(duration >= nmRmConnectionWaitMs) && (duration < (connectionWaitMs + delta));
    if (!waitTimeValid) {
      throw new Exception("NM should have tried re-connecting to RM during " + "period of at least " + connectionWaitMs + " ms, but "+ "stopped retrying within "+ (connectionWaitMs + delta)+ " ms: "+ e,e);
    }
  }
}
