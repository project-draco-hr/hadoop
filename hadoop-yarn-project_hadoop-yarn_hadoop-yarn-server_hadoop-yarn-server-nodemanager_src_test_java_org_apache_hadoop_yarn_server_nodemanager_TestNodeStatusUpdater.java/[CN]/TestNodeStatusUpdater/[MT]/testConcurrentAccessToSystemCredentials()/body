{
  final Map<ApplicationId,ByteBuffer> testCredentials=new HashMap<>();
  ByteBuffer byteBuffer=ByteBuffer.wrap(new byte[300]);
  ApplicationId applicationId=ApplicationId.newInstance(123456,120);
  testCredentials.put(applicationId,byteBuffer);
  final List<Throwable> exceptions=Collections.synchronizedList(new ArrayList<Throwable>());
  final int NUM_THREADS=10;
  final CountDownLatch allDone=new CountDownLatch(NUM_THREADS);
  final ExecutorService threadPool=Executors.newFixedThreadPool(NUM_THREADS);
  final AtomicBoolean stop=new AtomicBoolean(false);
  try {
    for (int i=0; i < NUM_THREADS; i++) {
      threadPool.submit(new Runnable(){
        @Override public void run(){
          try {
            for (int i=0; i < 100 && !stop.get(); i++) {
              NodeHeartbeatResponse nodeHeartBeatResponse=newNodeHeartbeatResponse(0,NodeAction.NORMAL,null,null,null,null,0);
              nodeHeartBeatResponse.setSystemCredentialsForApps(testCredentials);
              NodeHeartbeatResponseProto proto=((NodeHeartbeatResponsePBImpl)nodeHeartBeatResponse).getProto();
              Assert.assertNotNull(proto);
            }
          }
 catch (          Throwable t) {
            exceptions.add(t);
            stop.set(true);
          }
 finally {
            allDone.countDown();
          }
        }
      }
);
    }
    int testTimeout=2;
    Assert.assertTrue("Timeout waiting for more than " + testTimeout + " "+ "seconds",allDone.await(testTimeout,TimeUnit.SECONDS));
  }
 catch (  InterruptedException ie) {
    exceptions.add(ie);
  }
 finally {
    threadPool.shutdownNow();
  }
  Assert.assertTrue("Test failed with exception(s)" + exceptions,exceptions.isEmpty());
}
