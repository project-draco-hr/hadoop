{
  final long delta=1500;
  final long connectionWaitSecs=5;
  final long connectionRetryIntervalSecs=1;
  final long rmStartIntervalMS=2 * 1000;
  YarnConfiguration conf=createNMConfig();
  conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,connectionWaitSecs);
  conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,connectionRetryIntervalSecs);
  nm=new NodeManager(){
    @Override protected NodeStatusUpdater createNodeStatusUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker){
      NodeStatusUpdater nodeStatusUpdater=new MyNodeStatusUpdater4(context,dispatcher,healthChecker,metrics,rmStartIntervalMS,true);
      return nodeStatusUpdater;
    }
  }
;
  nm.init(conf);
  long waitStartTime=System.currentTimeMillis();
  try {
    nm.start();
    Assert.fail("NM should have failed to start due to RM connect failure");
  }
 catch (  Exception e) {
    Assert.assertTrue("NM should have tried re-connecting to RM during " + "period of at least " + connectionWaitSecs + " seconds, but "+ "stopped retrying within "+ (connectionWaitSecs + delta / 1000)+ " seconds",(System.currentTimeMillis() - waitStartTime >= connectionWaitSecs * 1000) && (System.currentTimeMillis() - waitStartTime < (connectionWaitSecs * 1000 + delta)));
  }
  nm=new NodeManager(){
    @Override protected NodeStatusUpdater createNodeStatusUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker){
      NodeStatusUpdater nodeStatusUpdater=new MyNodeStatusUpdater4(context,dispatcher,healthChecker,metrics,rmStartIntervalMS,false);
      return nodeStatusUpdater;
    }
  }
;
  nm.init(conf);
  waitStartTime=System.currentTimeMillis();
  try {
    nm.start();
  }
 catch (  Exception ex) {
    Assert.fail("NM should have started successfully " + "after connecting to RM.");
  }
  Assert.assertTrue("NM should have connected to RM within " + delta / 1000 + " seconds of RM starting up.",(System.currentTimeMillis() - waitStartTime >= rmStartIntervalMS) && (System.currentTimeMillis() - waitStartTime < (rmStartIntervalMS + delta)));
}
