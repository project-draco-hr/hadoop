{
  final long delta=50000;
  final long connectionWaitSecs=5;
  final long connectionRetryIntervalSecs=1;
  final long rmStartIntervalMS=2 * 1000;
  YarnConfiguration conf=createNMConfig();
  conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_WAIT_SECS,connectionWaitSecs);
  conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,connectionRetryIntervalSecs);
  NodeManagerWithCustomNodeStatusUpdater nmWithUpdater;
  nm=nmWithUpdater=new NodeManagerWithCustomNodeStatusUpdater(){
    @Override protected NodeStatusUpdater createUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker){
      NodeStatusUpdater nodeStatusUpdater=new MyNodeStatusUpdater4(context,dispatcher,healthChecker,metrics,rmStartIntervalMS,true);
      return nodeStatusUpdater;
    }
  }
;
  nm.init(conf);
  long waitStartTime=System.currentTimeMillis();
  try {
    nm.start();
    Assert.fail("NM should have failed to start due to RM connect failure");
  }
 catch (  Exception e) {
    long t=System.currentTimeMillis();
    long duration=t - waitStartTime;
    boolean waitTimeValid=(duration >= connectionWaitSecs * 1000) && (duration < (connectionWaitSecs * 1000 + delta));
    if (!waitTimeValid) {
      throw new Exception("NM should have tried re-connecting to RM during " + "period of at least " + connectionWaitSecs + " seconds, but "+ "stopped retrying within "+ (connectionWaitSecs + delta / 1000)+ " seconds: "+ e,e);
    }
  }
  nm=nmWithUpdater=new NodeManagerWithCustomNodeStatusUpdater(){
    @Override protected NodeStatusUpdater createUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker){
      NodeStatusUpdater nodeStatusUpdater=new MyNodeStatusUpdater4(context,dispatcher,healthChecker,metrics,rmStartIntervalMS,false);
      return nodeStatusUpdater;
    }
  }
;
  nm.init(conf);
  NodeStatusUpdater updater=nmWithUpdater.getUpdater();
  Assert.assertNotNull("Updater not yet created ",updater);
  waitStartTime=System.currentTimeMillis();
  try {
    nm.start();
  }
 catch (  Exception ex) {
    LOG.error("NM should have started successfully " + "after connecting to RM.",ex);
    throw ex;
  }
  long duration=System.currentTimeMillis() - waitStartTime;
  MyNodeStatusUpdater4 myUpdater=(MyNodeStatusUpdater4)updater;
  Assert.assertTrue("Updater was never started",myUpdater.getWaitStartTime() > 0);
  Assert.assertTrue("NM started before updater triggered",myUpdater.isTriggered());
  Assert.assertTrue("NM should have connected to RM after " + "the start interval of " + rmStartIntervalMS + ": actual "+ duration+ " "+ myUpdater,(duration >= rmStartIntervalMS));
  Assert.assertTrue("NM should have connected to RM less than " + (rmStartIntervalMS + delta) + " milliseconds of RM starting up: actual "+ duration+ " "+ myUpdater,(duration < (rmStartIntervalMS + delta)));
}
