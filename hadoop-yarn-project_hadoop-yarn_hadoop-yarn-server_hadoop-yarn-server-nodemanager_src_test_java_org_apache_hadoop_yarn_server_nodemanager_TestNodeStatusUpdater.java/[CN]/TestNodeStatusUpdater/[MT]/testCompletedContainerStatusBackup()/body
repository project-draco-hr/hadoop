{
  nm=new NodeManager(){
    @Override protected NodeStatusUpdater createNodeStatusUpdater(    Context context,    Dispatcher dispatcher,    NodeHealthCheckerService healthChecker){
      MyNodeStatusUpdater2 myNodeStatusUpdater=new MyNodeStatusUpdater2(context,dispatcher,healthChecker,metrics);
      return myNodeStatusUpdater;
    }
    @Override protected NMContext createNMContext(    NMContainerTokenSecretManager containerTokenSecretManager,    NMTokenSecretManagerInNM nmTokenSecretManager,    NMStateStoreService store,    boolean isDistributedSchedulingEnabled,    Configuration config){
      return new MyNMContext(containerTokenSecretManager,nmTokenSecretManager,config);
    }
  }
;
  YarnConfiguration conf=createNMConfig();
  nm.init(conf);
  nm.start();
  int waitCount=0;
  while (heartBeatID <= 4 && waitCount++ != 20) {
    Thread.sleep(500);
  }
  if (heartBeatID <= 4) {
    Assert.fail("Failed to get all heartbeats in time, " + "heartbeatID:" + heartBeatID);
  }
  if (assertionFailedInThread.get()) {
    Assert.fail("ContainerStatus Backup failed");
  }
  Assert.assertNotNull(nm.getNMContext().getSystemCredentialsForApps().get(ApplicationId.newInstance(1234,1)).getToken(new Text("token1")));
  nm.stop();
}
