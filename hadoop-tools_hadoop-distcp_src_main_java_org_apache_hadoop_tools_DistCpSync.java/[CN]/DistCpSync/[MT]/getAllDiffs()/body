{
  List<Path> sourcePaths=inputOptions.getSourcePaths();
  final Path sourceDir=sourcePaths.get(0);
  try {
    DistributedFileSystem fs=(DistributedFileSystem)sourceDir.getFileSystem(conf);
    final String from=getSnapshotName(inputOptions.getFromSnapshot());
    final String to=getSnapshotName(inputOptions.getToSnapshot());
    SnapshotDiffReport report=fs.getSnapshotDiffReport(sourceDir,from,to);
    this.diffMap=new EnumMap<>(SnapshotDiffReport.DiffType.class);
    for (    SnapshotDiffReport.DiffType type : SnapshotDiffReport.DiffType.values()) {
      diffMap.put(type,new ArrayList<DiffInfo>());
    }
    for (    SnapshotDiffReport.DiffReportEntry entry : report.getDiffList()) {
      if (entry.getSourcePath().length <= 0) {
        continue;
      }
      List<DiffInfo> list=diffMap.get(entry.getType());
      if (entry.getType() == SnapshotDiffReport.DiffType.MODIFY || entry.getType() == SnapshotDiffReport.DiffType.CREATE || entry.getType() == SnapshotDiffReport.DiffType.DELETE) {
        final Path source=new Path(DFSUtil.bytes2String(entry.getSourcePath()));
        list.add(new DiffInfo(source,null,entry.getType()));
      }
 else       if (entry.getType() == SnapshotDiffReport.DiffType.RENAME) {
        final Path source=new Path(DFSUtil.bytes2String(entry.getSourcePath()));
        final Path target=new Path(DFSUtil.bytes2String(entry.getTargetPath()));
        list.add(new DiffInfo(source,target,entry.getType()));
      }
    }
    return true;
  }
 catch (  IOException e) {
    DistCp.LOG.warn("Failed to compute snapshot diff on " + sourceDir,e);
  }
  this.diffMap=null;
  return false;
}
