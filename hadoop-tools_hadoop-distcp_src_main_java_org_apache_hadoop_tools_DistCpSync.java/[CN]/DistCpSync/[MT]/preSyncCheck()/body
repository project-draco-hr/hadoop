{
  List<Path> sourcePaths=inputOptions.getSourcePaths();
  if (sourcePaths.size() != 1) {
    throw new IllegalArgumentException(sourcePaths.size() + " source paths are provided");
  }
  final Path sourceDir=sourcePaths.get(0);
  final Path targetDir=inputOptions.getTargetPath();
  final FileSystem sfs=sourceDir.getFileSystem(conf);
  final FileSystem tfs=targetDir.getFileSystem(conf);
  if (!(sfs instanceof DistributedFileSystem) || !(tfs instanceof DistributedFileSystem)) {
    throw new IllegalArgumentException("The FileSystems needs to" + " be DistributedFileSystem for using snapshot-diff-based distcp");
  }
  final DistributedFileSystem targetFs=(DistributedFileSystem)tfs;
  if (!checkNoChange(targetFs,targetDir)) {
    inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,inputOptions.getToSnapshot())));
    return false;
  }
  final String from=getSnapshotName(inputOptions.getFromSnapshot());
  final String to=getSnapshotName(inputOptions.getToSnapshot());
  try {
    final FileStatus fromSnapshotStat=sfs.getFileStatus(getSourceSnapshotPath(sourceDir,from));
    final FileStatus toSnapshotStat=sfs.getFileStatus(getSourceSnapshotPath(sourceDir,to));
    if (!to.equals("") && fromSnapshotStat.getModificationTime() > toSnapshotStat.getModificationTime()) {
      throw new HadoopIllegalArgumentException("Snapshot " + to + " should be newer than "+ from);
    }
  }
 catch (  FileNotFoundException nfe) {
    throw new InvalidInputException("Input snapshot is not found",nfe);
  }
  return true;
}
