{
  List<Path> sourcePaths=inputOptions.getSourcePaths();
  if (sourcePaths.size() != 1) {
    throw new IllegalArgumentException(sourcePaths.size() + " source paths are provided");
  }
  final Path sourceDir=sourcePaths.get(0);
  final Path targetDir=inputOptions.getTargetPath();
  final FileSystem sfs=sourceDir.getFileSystem(conf);
  final FileSystem tfs=targetDir.getFileSystem(conf);
  if (!(sfs instanceof DistributedFileSystem) || !(tfs instanceof DistributedFileSystem)) {
    throw new IllegalArgumentException("The FileSystems needs to" + " be DistributedFileSystem for using snapshot-diff-based distcp");
  }
  final DistributedFileSystem sourceFs=(DistributedFileSystem)sfs;
  final DistributedFileSystem targetFs=(DistributedFileSystem)tfs;
  if (!checkNoChange(inputOptions,targetFs,targetDir)) {
    inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,inputOptions.getToSnapshot())));
    return false;
  }
  Path tmpDir=null;
  try {
    tmpDir=createTargetTmpDir(targetFs,targetDir);
    DiffInfo[] diffs=getDiffs(inputOptions,sourceFs,sourceDir,targetDir);
    if (diffs == null) {
      return false;
    }
    syncDiff(diffs,targetFs,tmpDir);
    return true;
  }
 catch (  Exception e) {
    DistCp.LOG.warn("Failed to use snapshot diff for distcp",e);
    return false;
  }
 finally {
    deleteTargetTmpDir(targetFs,tmpDir);
    inputOptions.setSourcePaths(Arrays.asList(getSourceSnapshotPath(sourceDir,inputOptions.getToSnapshot())));
  }
}
