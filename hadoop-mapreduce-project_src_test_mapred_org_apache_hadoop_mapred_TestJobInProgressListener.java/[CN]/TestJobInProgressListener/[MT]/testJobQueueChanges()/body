{
  LOG.info("Testing job queue changes");
  myScheduler.stopInitializer();
  JobQueueJobInProgressListener myListener=new JobQueueJobInProgressListener();
  jobtracker.addJobInProgressListener(myListener);
  Path inDir=new Path(testDir,"input");
  Path outputDir1=new Path(testDir,"output1");
  Path outputDir2=new Path(testDir,"output2");
  RunningJob rJob1=UtilsForTests.runJob(conf,inDir,outputDir1,1,0);
  LOG.info("Running job " + rJob1.getID().toString());
  RunningJob rJob2=UtilsForTests.runJob(conf,inDir,outputDir2,1,0);
  LOG.info("Running job " + rJob2.getID().toString());
  LOG.info("Testing job priority changes");
  LOG.info("Increasing job2's priority to HIGH");
  rJob2.setJobPriority("HIGH");
  assertTrue("Priority change garbles the queue",myListener.getJobQueue().size() == 2);
  JobInProgress[] queue=myListener.getJobQueue().toArray(new JobInProgress[0]);
  assertTrue("Priority change failed to bump up job2 in the queue",queue[0].getJobID().equals(rJob2.getID()));
  assertTrue("Priority change failed to bump down job1 in the queue",queue[1].getJobID().equals(rJob1.getID()));
  assertEquals("Priority change has garbled the queue",2,queue.length);
  LOG.info("Testing job start-time changes");
  LOG.info("Increasing job2's priority to NORMAL");
  rJob2.setJobPriority("NORMAL");
  JobInProgress jip2=jobtracker.getJob(rJob2.getID());
  JobInProgress jip1=jobtracker.getJob(rJob1.getID());
  JobStatus prevStatus=(JobStatus)jip2.getStatus().clone();
  jip2.startTime=jip1.startTime - 1;
  jip2.status.setStartTime(jip2.startTime);
  JobStatus newStatus=(JobStatus)jip2.getStatus().clone();
  LOG.info("Updating the listener about job2's start-time change");
  JobStatusChangeEvent event=new JobStatusChangeEvent(jip2,EventType.START_TIME_CHANGED,prevStatus,newStatus);
  myListener.jobUpdated(event);
  assertTrue("Start time change garbles the queue",myListener.getJobQueue().size() == 2);
  queue=myListener.getJobQueue().toArray(new JobInProgress[0]);
  assertTrue("Start time change failed to bump up job2 in the queue",queue[0].getJobID().equals(rJob2.getID()));
  assertTrue("Start time change failed to bump down job1 in the queue",queue[1].getJobID().equals(rJob1.getID()));
  assertEquals("Start time change has garbled the queue",2,queue.length);
}
