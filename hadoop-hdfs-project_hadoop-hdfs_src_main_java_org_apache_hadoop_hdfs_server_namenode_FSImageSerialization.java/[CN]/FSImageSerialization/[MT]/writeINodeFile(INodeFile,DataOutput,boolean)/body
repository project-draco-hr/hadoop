{
  byte[] name=node.getLocalNameBytes();
  out.writeShort(name.length);
  out.write(name);
  INodeFile fileINode=node;
  out.writeShort(fileINode.getFileReplication());
  out.writeLong(fileINode.getModificationTime());
  out.writeLong(fileINode.getAccessTime());
  out.writeLong(fileINode.getPreferredBlockSize());
  if (writeBlock) {
    Block[] blocks=fileINode.getBlocks();
    out.writeInt(blocks.length);
    out.writeBoolean(true);
    for (    Block blk : blocks)     blk.write(out);
  }
 else {
    out.writeInt(0);
    out.writeBoolean(false);
  }
  if (node instanceof INodeFileSnapshot) {
    out.writeLong(((INodeFileSnapshot)node).computeFileSize(true));
  }
 else {
    out.writeLong(-1);
    out.writeBoolean(node instanceof INodeFileWithSnapshot);
  }
  FsPermission filePerm=TL_DATA.get().FILE_PERM;
  filePerm.fromShort(fileINode.getFsPermissionShort());
  PermissionStatus.write(out,fileINode.getUserName(),fileINode.getGroupName(),filePerm);
}
