{
  byte[] name=node.getLocalNameBytes();
  out.writeShort(name.length);
  out.write(name);
  out.writeLong(node.getId());
  FsPermission filePerm=TL_DATA.get().FILE_PERM;
  if (node.isDirectory()) {
    out.writeShort(0);
    out.writeLong(node.getModificationTime());
    out.writeLong(0);
    out.writeLong(0);
    out.writeInt(-1);
    out.writeLong(node.getNsQuota());
    out.writeLong(node.getDsQuota());
    filePerm.fromShort(node.getFsPermissionShort());
    PermissionStatus.write(out,node.getUserName(),node.getGroupName(),filePerm);
  }
 else   if (node.isSymlink()) {
    out.writeShort(0);
    out.writeLong(0);
    out.writeLong(0);
    out.writeLong(0);
    out.writeInt(-2);
    Text.writeString(out,((INodeSymlink)node).getSymlinkString());
    filePerm.fromShort(node.getFsPermissionShort());
    PermissionStatus.write(out,node.getUserName(),node.getGroupName(),filePerm);
  }
 else {
    INodeFile fileINode=(INodeFile)node;
    out.writeShort(fileINode.getBlockReplication());
    out.writeLong(fileINode.getModificationTime());
    out.writeLong(fileINode.getAccessTime());
    out.writeLong(fileINode.getPreferredBlockSize());
    Block[] blocks=fileINode.getBlocks();
    out.writeInt(blocks.length);
    for (    Block blk : blocks)     blk.write(out);
    filePerm.fromShort(fileINode.getFsPermissionShort());
    PermissionStatus.write(out,fileINode.getUserName(),fileINode.getGroupName(),filePerm);
  }
}
