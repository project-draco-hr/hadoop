{
  Path file1=new Path("TestNameEditsConfigs1");
  Path file2=new Path("TestNameEditsConfigs2");
  Path file3=new Path("TestNameEditsConfigs3");
  MiniDFSCluster cluster=null;
  Configuration conf=null;
  FileSystem fileSys=null;
  File nameOnlyDir=new File(base_dir,"name");
  File editsOnlyDir=new File(base_dir,"edits");
  File nameAndEditsDir=new File(base_dir,"name_and_edits");
  conf=new HdfsConfiguration();
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameAndEditsDir.getPath());
  conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,nameAndEditsDir.getPath());
  replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build();
    cluster.waitActive();
    assertTrue(new File(nameAndEditsDir,"current/VERSION").exists());
    fileSys=cluster.getFileSystem();
    assertTrue(!fileSys.exists(file1));
    writeFile(fileSys,file1,replication);
    checkFile(fileSys,file1,replication);
  }
  finally {
    fileSys.close();
    cluster.shutdown();
  }
  conf=new HdfsConfiguration();
  assertTrue(nameOnlyDir.mkdir());
  assertTrue(editsOnlyDir.mkdir());
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameAndEditsDir.getPath() + "," + nameOnlyDir.getPath());
  conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,nameAndEditsDir.getPath() + "," + editsOnlyDir.getPath());
  replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build();
    cluster.waitActive();
    assertTrue(new File(nameAndEditsDir,"current/VERSION").exists());
    assertTrue(new File(nameOnlyDir,"current/VERSION").exists());
    assertTrue(new File(editsOnlyDir,"current/VERSION").exists());
    fileSys=cluster.getFileSystem();
    assertTrue(fileSys.exists(file1));
    checkFile(fileSys,file1,replication);
    cleanupFile(fileSys,file1);
    writeFile(fileSys,file2,replication);
    checkFile(fileSys,file2,replication);
  }
  finally {
    fileSys.close();
    cluster.shutdown();
  }
  try {
    conf=new HdfsConfiguration();
    conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameOnlyDir.getPath());
    conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,editsOnlyDir.getPath());
    replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build();
    cluster.waitActive();
    fileSys=cluster.getFileSystem();
    assertFalse(fileSys.exists(file1));
    assertTrue(fileSys.exists(file2));
    checkFile(fileSys,file2,replication);
    cleanupFile(fileSys,file2);
    writeFile(fileSys,file3,replication);
    checkFile(fileSys,file3,replication);
  }
  finally {
    fileSys.close();
    cluster.shutdown();
  }
  conf=new HdfsConfiguration();
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameOnlyDir.getPath() + "," + nameAndEditsDir.getPath());
  conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,nameAndEditsDir.getPath());
  replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build();
    fail("Successfully started cluster but should not have been able to.");
  }
 catch (  IOException e) {
    LOG.info("EXPECTED: cluster start failed due to missing " + "latest edits dir",e);
  }
 finally {
    if (cluster != null) {
      cluster.shutdown();
    }
    cluster=null;
  }
  conf=new HdfsConfiguration();
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameAndEditsDir.getPath());
  conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,editsOnlyDir.getPath() + "," + nameAndEditsDir.getPath());
  replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build();
    fileSys=cluster.getFileSystem();
    assertFalse(fileSys.exists(file1));
    assertFalse(fileSys.exists(file2));
    assertTrue(fileSys.exists(file3));
    checkFile(fileSys,file3,replication);
    cleanupFile(fileSys,file3);
    writeFile(fileSys,file3,replication);
    checkFile(fileSys,file3,replication);
  }
  finally {
    fileSys.close();
    cluster.shutdown();
  }
}
