{
  JobConf conf=new JobConf();
  final Path inDir=new Path("/tmp/testing/wc/input");
  final Path outDir=new Path("/tmp/testing/wc/output");
  FileSystem fs=FileSystem.get(URI.create(namenode),conf);
  fs.delete(outDir,true);
  if (!fs.mkdirs(inDir)) {
    throw new IOException("Mkdirs failed to create " + inDir.toString());
  }
  DataOutputStream file=fs.create(new Path(inDir,"part-00000"));
  file.writeBytes("Sample text");
  file.close();
  FileSystem.setDefaultUri(conf,namenode);
  conf.set("mapred.job.tracker","localhost:" + miniMRCluster.getJobTrackerPort());
  conf.setJobName("wordcount");
  conf.setInputFormat(TextInputFormat.class);
  conf.setOutputKeyClass(Text.class);
  conf.setOutputValueClass(IntWritable.class);
  conf.setMapperClass(WordCount.MapClass.class);
  conf.setCombinerClass(WordCount.Reduce.class);
  conf.setReducerClass(WordCount.Reduce.class);
  FileInputFormat.setInputPaths(conf,inDir);
  FileOutputFormat.setOutputPath(conf,outDir);
  conf.setNumMapTasks(1);
  conf.setNumReduceTasks(0);
  if (pool != null) {
    conf.set(POOL_PROPERTY,pool);
  }
  JobClient.runJob(conf);
}
