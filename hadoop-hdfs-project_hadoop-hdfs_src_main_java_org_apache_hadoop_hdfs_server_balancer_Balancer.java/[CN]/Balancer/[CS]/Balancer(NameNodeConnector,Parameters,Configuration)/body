{
  final long movedWinWidth=getLong(conf,DFSConfigKeys.DFS_BALANCER_MOVEDWINWIDTH_KEY,DFSConfigKeys.DFS_BALANCER_MOVEDWINWIDTH_DEFAULT);
  final int moverThreads=getInt(conf,DFSConfigKeys.DFS_BALANCER_MOVERTHREADS_KEY,DFSConfigKeys.DFS_BALANCER_MOVERTHREADS_DEFAULT);
  final int dispatcherThreads=getInt(conf,DFSConfigKeys.DFS_BALANCER_DISPATCHERTHREADS_KEY,DFSConfigKeys.DFS_BALANCER_DISPATCHERTHREADS_DEFAULT);
  final int maxConcurrentMovesPerNode=getInt(conf,DFSConfigKeys.DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY,DFSConfigKeys.DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT);
  final long getBlocksSize=getLong(conf,DFSConfigKeys.DFS_BALANCER_GETBLOCKS_SIZE_KEY,DFSConfigKeys.DFS_BALANCER_GETBLOCKS_SIZE_DEFAULT);
  final long getBlocksMinBlockSize=getLong(conf,DFSConfigKeys.DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_KEY,DFSConfigKeys.DFS_BALANCER_GETBLOCKS_MIN_BLOCK_SIZE_DEFAULT);
  this.nnc=theblockpool;
  this.dispatcher=new Dispatcher(theblockpool,p.nodesToBeIncluded,p.nodesToBeExcluded,movedWinWidth,moverThreads,dispatcherThreads,maxConcurrentMovesPerNode,getBlocksSize,getBlocksMinBlockSize,conf);
  this.threshold=p.threshold;
  this.policy=p.policy;
  this.runDuringUpgrade=p.runDuringUpgrade;
  this.maxSizeToMove=getLong(conf,DFSConfigKeys.DFS_BALANCER_MAX_SIZE_TO_MOVE_KEY,DFSConfigKeys.DFS_BALANCER_MAX_SIZE_TO_MOVE_DEFAULT);
  this.defaultBlockSize=getLong(conf,DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DFSConfigKeys.DFS_BLOCK_SIZE_DEFAULT);
}
