{
  Set<String> excludedNodes=null;
  Set<String> includedNodes=null;
  BalancerParameters.Builder b=new BalancerParameters.Builder();
  if (args != null) {
    try {
      for (int i=0; i < args.length; i++) {
        if ("-threshold".equalsIgnoreCase(args[i])) {
          checkArgument(++i < args.length,"Threshold value is missing: args = " + Arrays.toString(args));
          try {
            double threshold=Double.parseDouble(args[i]);
            if (threshold < 1 || threshold > 100) {
              throw new IllegalArgumentException("Number out of range: threshold = " + threshold);
            }
            LOG.info("Using a threshold of " + threshold);
            b.setThreshold(threshold);
          }
 catch (          IllegalArgumentException e) {
            System.err.println("Expecting a number in the range of [1.0, 100.0]: " + args[i]);
            throw e;
          }
        }
 else         if ("-policy".equalsIgnoreCase(args[i])) {
          checkArgument(++i < args.length,"Policy value is missing: args = " + Arrays.toString(args));
          try {
            b.setBalancingPolicy(BalancingPolicy.parse(args[i]));
          }
 catch (          IllegalArgumentException e) {
            System.err.println("Illegal policy name: " + args[i]);
            throw e;
          }
        }
 else         if ("-exclude".equalsIgnoreCase(args[i])) {
          excludedNodes=new HashSet<>();
          i=processHostList(args,i,"exclude",excludedNodes);
          b.setExcludedNodes(excludedNodes);
        }
 else         if ("-include".equalsIgnoreCase(args[i])) {
          includedNodes=new HashSet<>();
          i=processHostList(args,i,"include",includedNodes);
          b.setIncludedNodes(includedNodes);
        }
 else         if ("-source".equalsIgnoreCase(args[i])) {
          Set<String> sourceNodes=new HashSet<>();
          i=processHostList(args,i,"source",sourceNodes);
          b.setSourceNodes(sourceNodes);
        }
 else         if ("-blockpools".equalsIgnoreCase(args[i])) {
          checkArgument(++i < args.length,"blockpools value is missing: args = " + Arrays.toString(args));
          Set<String> blockpools=parseBlockPoolList(args[i]);
          LOG.info("Balancer will run on the following blockpools: " + blockpools.toString());
          b.setBlockpools(blockpools);
        }
 else         if ("-idleiterations".equalsIgnoreCase(args[i])) {
          checkArgument(++i < args.length,"idleiterations value is missing: args = " + Arrays.toString(args));
          int maxIdleIteration=Integer.parseInt(args[i]);
          LOG.info("Using a idleiterations of " + maxIdleIteration);
          b.setMaxIdleIteration(maxIdleIteration);
        }
 else         if ("-runDuringUpgrade".equalsIgnoreCase(args[i])) {
          b.setRunDuringUpgrade(true);
          LOG.info("Will run the balancer even during an ongoing HDFS " + "upgrade. Most users will not want to run the balancer " + "during an upgrade since it will not affect used space "+ "on over-utilized machines.");
        }
 else {
          throw new IllegalArgumentException("args = " + Arrays.toString(args));
        }
      }
      checkArgument(excludedNodes == null || includedNodes == null,"-exclude and -include options cannot be specified together.");
    }
 catch (    RuntimeException e) {
      printUsage(System.err);
      throw e;
    }
  }
  return b.build();
}
