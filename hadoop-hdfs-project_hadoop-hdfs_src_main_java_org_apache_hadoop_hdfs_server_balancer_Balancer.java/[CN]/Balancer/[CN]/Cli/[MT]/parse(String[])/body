{
  BalancingPolicy policy=Parameters.DEFAULT.policy;
  double threshold=Parameters.DEFAULT.threshold;
  Set<String> nodesTobeExcluded=Parameters.DEFAULT.nodesToBeExcluded;
  Set<String> nodesTobeIncluded=Parameters.DEFAULT.nodesToBeIncluded;
  if (args != null) {
    try {
      for (int i=0; i < args.length; i++) {
        if ("-threshold".equalsIgnoreCase(args[i])) {
          checkArgument(++i < args.length,"Threshold value is missing: args = " + Arrays.toString(args));
          try {
            threshold=Double.parseDouble(args[i]);
            if (threshold < 1 || threshold > 100) {
              throw new IllegalArgumentException("Number out of range: threshold = " + threshold);
            }
            LOG.info("Using a threshold of " + threshold);
          }
 catch (          IllegalArgumentException e) {
            System.err.println("Expecting a number in the range of [1.0, 100.0]: " + args[i]);
            throw e;
          }
        }
 else         if ("-policy".equalsIgnoreCase(args[i])) {
          checkArgument(++i < args.length,"Policy value is missing: args = " + Arrays.toString(args));
          try {
            policy=BalancingPolicy.parse(args[i]);
          }
 catch (          IllegalArgumentException e) {
            System.err.println("Illegal policy name: " + args[i]);
            throw e;
          }
        }
 else         if ("-exclude".equalsIgnoreCase(args[i])) {
          checkArgument(++i < args.length,"List of nodes to exclude | -f <filename> is missing: args = " + Arrays.toString(args));
          if ("-f".equalsIgnoreCase(args[i])) {
            checkArgument(++i < args.length,"File containing nodes to exclude is not specified: args = " + Arrays.toString(args));
            nodesTobeExcluded=Util.getHostListFromFile(args[i]);
          }
 else {
            nodesTobeExcluded=Util.parseHostList(args[i]);
          }
        }
 else         if ("-include".equalsIgnoreCase(args[i])) {
          checkArgument(++i < args.length,"List of nodes to include | -f <filename> is missing: args = " + Arrays.toString(args));
          if ("-f".equalsIgnoreCase(args[i])) {
            checkArgument(++i < args.length,"File containing nodes to include is not specified: args = " + Arrays.toString(args));
            nodesTobeIncluded=Util.getHostListFromFile(args[i]);
          }
 else {
            nodesTobeIncluded=Util.parseHostList(args[i]);
          }
        }
 else {
          throw new IllegalArgumentException("args = " + Arrays.toString(args));
        }
      }
      checkArgument(nodesTobeExcluded.isEmpty() || nodesTobeIncluded.isEmpty(),"-exclude and -include options cannot be specified together.");
    }
 catch (    RuntimeException e) {
      printUsage(System.err);
      throw e;
    }
  }
  return new Parameters(policy,threshold,nodesTobeExcluded,nodesTobeIncluded);
}
