{
  Socket sock=new Socket();
  DataOutputStream out=null;
  DataInputStream in=null;
  try {
    sock.connect(NetUtils.createSocketAddr(target.getDatanode().getXferAddr()),HdfsServerConstants.READ_TIMEOUT);
    sock.setSoTimeout(BLOCK_MOVE_READ_TIMEOUT);
    sock.setKeepAlive(true);
    OutputStream unbufOut=sock.getOutputStream();
    InputStream unbufIn=sock.getInputStream();
    ExtendedBlock eb=new ExtendedBlock(nnc.blockpoolID,block.getBlock());
    Token<BlockTokenIdentifier> accessToken=nnc.getAccessToken(eb);
    IOStreamPair saslStreams=saslClient.socketSend(sock,unbufOut,unbufIn,nnc,accessToken,target.getDatanode());
    unbufOut=saslStreams.out;
    unbufIn=saslStreams.in;
    out=new DataOutputStream(new BufferedOutputStream(unbufOut,HdfsConstants.IO_FILE_BUFFER_SIZE));
    in=new DataInputStream(new BufferedInputStream(unbufIn,HdfsConstants.IO_FILE_BUFFER_SIZE));
    sendRequest(out,eb,StorageType.DEFAULT,accessToken);
    receiveResponse(in);
    bytesMoved.addAndGet(block.getNumBytes());
    LOG.info("Successfully moved " + this);
  }
 catch (  IOException e) {
    LOG.warn("Failed to move " + this + ": "+ e.getMessage());
    proxySource.activateDelay(DELAY_AFTER_ERROR);
    target.getBalancerDatanode().activateDelay(DELAY_AFTER_ERROR);
  }
 finally {
    IOUtils.closeStream(out);
    IOUtils.closeStream(in);
    IOUtils.closeSocket(sock);
    proxySource.removePendingBlock(this);
    target.getBalancerDatanode().removePendingBlock(this);
synchronized (this) {
      reset();
    }
synchronized (Balancer.this) {
      Balancer.this.notifyAll();
    }
  }
}
