{
  try {
    final List<DatanodeStorageReport> reports=dispatcher.init();
    final long bytesLeftToMove=init(reports);
    if (bytesLeftToMove == 0) {
      System.out.println("The cluster is balanced. Exiting...");
      return newResult(ExitStatus.SUCCESS,bytesLeftToMove,0);
    }
 else {
      LOG.info("Need to move " + StringUtils.byteDesc(bytesLeftToMove) + " to make the cluster balanced.");
    }
    if (!runDuringUpgrade && nnc.isUpgrading()) {
      System.err.println("Balancer exiting as upgrade is not finalized, " + "please finalize the HDFS upgrade before running the balancer.");
      LOG.error("Balancer exiting as upgrade is not finalized, " + "please finalize the HDFS upgrade before running the balancer.");
      return newResult(ExitStatus.UNFINALIZED_UPGRADE,bytesLeftToMove,-1);
    }
    final long bytesBeingMoved=chooseStorageGroups();
    if (bytesBeingMoved == 0) {
      System.out.println("No block can be moved. Exiting...");
      return newResult(ExitStatus.NO_MOVE_BLOCK,bytesLeftToMove,bytesBeingMoved);
    }
 else {
      LOG.info("Will move " + StringUtils.byteDesc(bytesBeingMoved) + " in this iteration");
    }
    if (!dispatcher.dispatchAndCheckContinue()) {
      return newResult(ExitStatus.NO_MOVE_PROGRESS,bytesLeftToMove,bytesBeingMoved);
    }
    return newResult(ExitStatus.IN_PROGRESS,bytesLeftToMove,bytesBeingMoved);
  }
 catch (  IllegalArgumentException e) {
    System.out.println(e + ".  Exiting ...");
    return newResult(ExitStatus.ILLEGAL_ARGUMENTS);
  }
catch (  IOException e) {
    System.out.println(e + ".  Exiting ...");
    return newResult(ExitStatus.IO_EXCEPTION);
  }
catch (  InterruptedException e) {
    System.out.println(e + ".  Exiting ...");
    return newResult(ExitStatus.INTERRUPTED);
  }
 finally {
    dispatcher.shutdownNow();
  }
}
