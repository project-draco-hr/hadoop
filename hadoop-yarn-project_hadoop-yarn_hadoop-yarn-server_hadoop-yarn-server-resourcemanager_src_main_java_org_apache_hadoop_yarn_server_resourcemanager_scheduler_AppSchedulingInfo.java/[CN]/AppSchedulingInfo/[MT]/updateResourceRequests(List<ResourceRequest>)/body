{
  QueueMetrics metrics=queue.getMetrics();
  for (  ResourceRequest request : requests) {
    Priority priority=request.getPriority();
    String resourceName=request.getResourceName();
    boolean updatePendingResources=false;
    ResourceRequest lastRequest=null;
    if (resourceName.equals(ResourceRequest.ANY)) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("update:" + " application=" + applicationId + " request="+ request);
      }
      updatePendingResources=true;
      if (request.getNumContainers() > 0) {
        activeUsersManager.activateApplication(user,applicationId);
      }
    }
    Map<String,ResourceRequest> asks=this.requests.get(priority);
    if (asks == null) {
      asks=new HashMap<String,ResourceRequest>();
      this.requests.put(priority,asks);
      this.priorities.add(priority);
    }
 else     if (updatePendingResources) {
      lastRequest=asks.get(resourceName);
    }
    asks.put(resourceName,request);
    if (updatePendingResources) {
      if (request.getNumContainers() <= 0) {
        LOG.info("checking for deactivate... ");
        checkForDeactivation();
      }
      int lastRequestContainers=lastRequest != null ? lastRequest.getNumContainers() : 0;
      Resource lastRequestCapability=lastRequest != null ? lastRequest.getCapability() : Resources.none();
      metrics.incrPendingResources(user,request.getNumContainers() - lastRequestContainers,Resources.subtractFrom(Resources.multiply(request.getCapability(),request.getNumContainers()),Resources.multiply(lastRequestCapability,lastRequestContainers)));
    }
  }
}
