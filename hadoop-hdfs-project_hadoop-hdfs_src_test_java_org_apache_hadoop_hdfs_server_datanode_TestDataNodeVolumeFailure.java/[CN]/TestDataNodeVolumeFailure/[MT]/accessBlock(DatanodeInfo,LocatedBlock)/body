{
  InetSocketAddress targetAddr=null;
  ExtendedBlock block=lblock.getBlock();
  targetAddr=NetUtils.createSocketAddr(datanode.getXferAddr());
  BlockReader blockReader=new BlockReaderFactory(new DfsClientConf(conf)).setInetSocketAddress(targetAddr).setBlock(block).setFileName(BlockReaderFactory.getFileName(targetAddr,"test-blockpoolid",block.getBlockId())).setBlockToken(lblock.getBlockToken()).setStartOffset(0).setLength(-1).setVerifyChecksum(true).setClientName("TestDataNodeVolumeFailure").setDatanodeInfo(datanode).setCachingStrategy(CachingStrategy.newDefaultStrategy()).setClientCacheContext(ClientContext.getFromConf(conf)).setConfiguration(conf).setRemotePeerFactory(new RemotePeerFactory(){
    @Override public Peer newConnectedPeer(    InetSocketAddress addr,    Token<BlockTokenIdentifier> blockToken,    DatanodeID datanodeId) throws IOException {
      Peer peer=null;
      Socket sock=NetUtils.getDefaultSocketFactory(conf).createSocket();
      try {
        sock.connect(addr,HdfsConstants.READ_TIMEOUT);
        sock.setSoTimeout(HdfsConstants.READ_TIMEOUT);
        peer=TcpPeerServer.peerFromSocket(sock);
      }
  finally {
        if (peer == null) {
          IOUtils.closeSocket(sock);
        }
      }
      return peer;
    }
  }
).build();
  blockReader.close();
}
