{
  Configuration conf=new Configuration();
  conf.set(YarnConfiguration.IPC_RPC_IMPL,HadoopYarnProtoRPC.class.getName());
  YarnRPC rpc=YarnRPC.create(conf);
  String bindAddr="localhost:0";
  InetSocketAddress addr=NetUtils.createSocketAddr(bindAddr);
  Server server=rpc.getServer(AggregatorNodemanagerProtocol.class,new DummyNMAggregatorService(),addr,conf,null,1);
  server.start();
  ApplicationClientProtocol unknownProxy=(ApplicationClientProtocol)rpc.getProxy(ApplicationClientProtocol.class,NetUtils.getConnectAddress(server),conf);
  try {
    unknownProxy.getNewApplication(Records.newRecord(GetNewApplicationRequest.class));
    Assert.fail("Excepted RPC call to fail with unknown method.");
  }
 catch (  YarnException e) {
    Assert.assertTrue(e.getMessage().matches("Unknown method getNewApplication called on.*" + "org.apache.hadoop.yarn.proto.ApplicationClientProtocol" + "\\$ApplicationClientProtocolService\\$BlockingInterface protocol."));
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  AggregatorNodemanagerProtocol proxy=(AggregatorNodemanagerProtocol)rpc.getProxy(AggregatorNodemanagerProtocol.class,NetUtils.getConnectAddress(server),conf);
  try {
    ReportNewAggregatorsInfoRequest request=ReportNewAggregatorsInfoRequest.newInstance(DEFAULT_APP_ID,DEFAULT_AGGREGATOR_ADDR);
    proxy.reportNewAggregatorInfo(request);
  }
 catch (  YarnException e) {
    Assert.fail("RPC call failured is not expected here.");
  }
  try {
    proxy.reportNewAggregatorInfo(Records.newRecord(ReportNewAggregatorsInfoRequest.class));
    Assert.fail("Excepted RPC call to fail with YarnException.");
  }
 catch (  YarnException e) {
    Assert.assertTrue(e.getMessage().contains(ILLEGAL_NUMBER_MESSAGE));
  }
  server.stop();
}
