{
  uri=req.getUri();
  final Channel client=ctx.channel();
  Bootstrap proxiedServer=new Bootstrap().group(client.eventLoop()).channel(NioSocketChannel.class).handler(new ChannelInitializer<SocketChannel>(){
    @Override protected void initChannel(    SocketChannel ch) throws Exception {
      ChannelPipeline p=ch.pipeline();
      p.addLast(new HttpRequestEncoder(),new Forwarder(uri,client));
    }
  }
);
  ChannelFuture f=proxiedServer.connect(host);
  proxiedChannel=f.channel();
  f.addListener(new ChannelFutureListener(){
    @Override public void operationComplete(    ChannelFuture future) throws Exception {
      if (future.isSuccess()) {
        ctx.channel().pipeline().remove(HttpResponseEncoder.class);
        HttpRequest newReq=new DefaultFullHttpRequest(HTTP_1_1,req.getMethod(),req.getUri());
        newReq.headers().add(req.headers());
        newReq.headers().set(CONNECTION,Values.CLOSE);
        future.channel().writeAndFlush(newReq);
      }
 else {
        DefaultHttpResponse resp=new DefaultHttpResponse(HTTP_1_1,INTERNAL_SERVER_ERROR);
        resp.headers().set(CONNECTION,Values.CLOSE);
        LOG.info("Proxy " + uri + " failed. Cause: ",future.cause());
        ctx.writeAndFlush(resp).addListener(ChannelFutureListener.CLOSE);
        client.close();
      }
    }
  }
);
}
