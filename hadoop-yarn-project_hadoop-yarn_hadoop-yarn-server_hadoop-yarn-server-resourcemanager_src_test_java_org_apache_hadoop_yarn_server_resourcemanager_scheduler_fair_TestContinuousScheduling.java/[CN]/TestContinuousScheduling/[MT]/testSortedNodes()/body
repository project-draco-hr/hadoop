{
  RMNode node1=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),1,"127.0.0.1");
  NodeAddedSchedulerEvent nodeEvent1=new NodeAddedSchedulerEvent(node1);
  scheduler.handle(nodeEvent1);
  RMNode node2=MockNodes.newNodeInfo(1,Resources.createResource(8 * 1024,8),2,"127.0.0.2");
  NodeAddedSchedulerEvent nodeEvent2=new NodeAddedSchedulerEvent(node2);
  scheduler.handle(nodeEvent2);
  Assert.assertEquals(scheduler.getClusterResource().getMemory(),16 * 1024);
  Assert.assertEquals(scheduler.getClusterResource().getVirtualCores(),16);
  ApplicationAttemptId appAttemptId=createAppAttemptId(this.APP_ID++,this.ATTEMPT_ID++);
  createMockRMApp(appAttemptId);
  scheduler.addApplication(appAttemptId.getApplicationId(),"queue11","user11",false);
  scheduler.addApplicationAttempt(appAttemptId,false,false);
  List<ResourceRequest> ask=new ArrayList<>();
  ResourceRequest request=createResourceRequest(1024,1,ResourceRequest.ANY,1,1,true);
  ask.add(request);
  scheduler.allocate(appAttemptId,ask,new ArrayList<ContainerId>(),null,null,null,null);
  triggerSchedulingAttempt();
  FSAppAttempt app=scheduler.getSchedulerApp(appAttemptId);
  checkAppConsumption(app,Resources.createResource(1024,1));
  request=createResourceRequest(1024,1,ResourceRequest.ANY,2,1,true);
  ask.clear();
  ask.add(request);
  scheduler.allocate(appAttemptId,ask,new ArrayList<ContainerId>(),null,null,null,null);
  triggerSchedulingAttempt();
  checkAppConsumption(app,Resources.createResource(2048,2));
  Set<NodeId> nodes=new HashSet<NodeId>();
  Iterator<RMContainer> it=app.getLiveContainers().iterator();
  while (it.hasNext()) {
    nodes.add(it.next().getContainer().getNodeId());
  }
  Assert.assertEquals(2,nodes.size());
}
