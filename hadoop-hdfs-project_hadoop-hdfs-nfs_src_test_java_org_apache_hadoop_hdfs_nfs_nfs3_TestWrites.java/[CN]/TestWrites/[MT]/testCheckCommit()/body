{
  DFSClient dfsClient=Mockito.mock(DFSClient.class);
  Nfs3FileAttributes attr=new Nfs3FileAttributes();
  HdfsDataOutputStream fos=Mockito.mock(HdfsDataOutputStream.class);
  Mockito.when(fos.getPos()).thenReturn((long)0);
  OpenFileCtx ctx=new OpenFileCtx(fos,attr,"/dumpFilePath",dfsClient,new IdUserGroup(new NfsConfiguration()));
  COMMIT_STATUS ret;
  ctx.setActiveStatusForTest(false);
  Channel ch=Mockito.mock(Channel.class);
  ret=ctx.checkCommit(dfsClient,0,ch,1,attr,false);
  Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_INACTIVE_CTX);
  ctx.getPendingWritesForTest().put(new OffsetRange(5,10),new WriteCtx(null,0,0,0,null,null,null,0,false,null));
  ret=ctx.checkCommit(dfsClient,0,ch,1,attr,false);
  Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_INACTIVE_WITH_PENDING_WRITE);
  ctx.setActiveStatusForTest(true);
  Mockito.when(fos.getPos()).thenReturn((long)10);
  COMMIT_STATUS status=ctx.checkCommitInternal(5,null,1,attr,false);
  Assert.assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);
  ret=ctx.checkCommit(dfsClient,5,ch,1,attr,false);
  Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);
  status=ctx.checkCommitInternal(10,ch,1,attr,false);
  Assert.assertTrue(status == COMMIT_STATUS.COMMIT_DO_SYNC);
  ret=ctx.checkCommit(dfsClient,10,ch,1,attr,false);
  Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);
  ConcurrentNavigableMap<Long,CommitCtx> commits=ctx.getPendingCommitsForTest();
  Assert.assertTrue(commits.size() == 0);
  ret=ctx.checkCommit(dfsClient,11,ch,1,attr,false);
  Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_WAIT);
  Assert.assertTrue(commits.size() == 1);
  long key=commits.firstKey();
  Assert.assertTrue(key == 11);
  commits.remove(new Long(11));
  ret=ctx.checkCommit(dfsClient,0,ch,1,attr,false);
  Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_WAIT);
  Assert.assertTrue(commits.size() == 1);
  key=commits.firstKey();
  Assert.assertTrue(key == 9);
  ctx.getPendingWritesForTest().remove(new OffsetRange(5,10));
  ret=ctx.checkCommit(dfsClient,0,ch,1,attr,false);
  Assert.assertTrue(ret == COMMIT_STATUS.COMMIT_FINISHED);
}
