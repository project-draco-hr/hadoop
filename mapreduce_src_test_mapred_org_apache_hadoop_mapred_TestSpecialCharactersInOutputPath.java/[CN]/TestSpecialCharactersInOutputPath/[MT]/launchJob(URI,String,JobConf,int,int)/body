{
  final Path inDir=new Path("/testing/input");
  final Path outDir=new Path("/testing/output");
  FileSystem fs=FileSystem.get(fileSys,conf);
  fs.delete(outDir,true);
  if (!fs.mkdirs(inDir)) {
    LOG.warn("Can't create " + inDir);
    return false;
  }
  DataOutputStream file=fs.create(new Path(inDir,"part-0"));
  file.writeBytes("foo foo2 foo3");
  file.close();
  FileSystem.setDefaultUri(conf,fileSys);
  conf.set(JTConfig.JT_IPC_ADDRESS,jobTracker);
  conf.setJobName("foo");
  conf.setInputFormat(TextInputFormat.class);
  conf.setOutputFormat(SpecialTextOutputFormat.class);
  conf.setOutputKeyClass(LongWritable.class);
  conf.setOutputValueClass(Text.class);
  conf.setMapperClass(IdentityMapper.class);
  conf.setReducerClass(IdentityReducer.class);
  FileInputFormat.setInputPaths(conf,inDir);
  FileOutputFormat.setOutputPath(conf,outDir);
  conf.setNumMapTasks(numMaps);
  conf.setNumReduceTasks(numReduces);
  RunningJob runningJob=JobClient.runJob(conf);
  try {
    assertTrue(runningJob.isComplete());
    assertTrue(runningJob.isSuccessful());
    assertTrue("Output folder not found!",fs.exists(new Path("/testing/output/" + OUTPUT_FILENAME)));
  }
 catch (  NullPointerException npe) {
    fail("A NPE should not have happened.");
  }
  LOG.info("job is complete: " + runningJob.isSuccessful());
  return (runningJob.isSuccessful());
}
