{
  final JobConf conf=new JobConf(context.getConf());
  conf.set(Constants.SERIALIZATION_FRAMEWORK,String.valueOf(SerializationFramework.WRITABLE_SERIALIZATION.getType()));
  String combinerClazz=conf.get(Constants.MAPRED_COMBINER_CLASS);
  if (null == combinerClazz) {
    combinerClazz=conf.get(MRJobConfig.COMBINE_CLASS_ATTR);
  }
  if (null == combinerClazz) {
    return null;
  }
 else {
    LOG.info("NativeTask Combiner is enabled, class = " + combinerClazz);
  }
  final Counter combineInputCounter=context.getTaskReporter().getCounter(TaskCounter.COMBINE_INPUT_RECORDS);
  final CombinerRunner<K,V> combinerRunner=CombinerRunner.create(conf,context.getTaskAttemptId(),combineInputCounter,context.getTaskReporter(),null);
  final INativeHandler nativeHandler=NativeBatchProcessor.create(NAME,conf,DataChannel.INOUT);
  @SuppressWarnings("unchecked") final BufferPusher<K,V> pusher=new BufferPusher<K,V>((Class<K>)context.getInputKeyClass(),(Class<V>)context.getInputValueClass(),nativeHandler);
  final BufferPuller puller=new BufferPuller(nativeHandler);
  return new CombinerHandler<K,V>(nativeHandler,combinerRunner,puller,pusher);
}
