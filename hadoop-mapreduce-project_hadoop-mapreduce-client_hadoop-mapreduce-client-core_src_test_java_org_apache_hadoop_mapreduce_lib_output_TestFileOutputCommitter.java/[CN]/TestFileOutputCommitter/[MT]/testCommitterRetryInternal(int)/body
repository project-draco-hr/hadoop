{
  Job job=Job.getInstance();
  FileOutputFormat.setOutputPath(job,outDir);
  Configuration conf=job.getConfiguration();
  conf.set(MRJobConfig.TASK_ATTEMPT_ID,attempt);
  conf.setInt(FileOutputCommitter.FILEOUTPUTCOMMITTER_ALGORITHM_VERSION,version);
  conf.setInt(FileOutputCommitter.FILEOUTPUTCOMMITTER_FAILURE_ATTEMPTS,1);
  JobContext jContext=new JobContextImpl(conf,taskID.getJobID());
  TaskAttemptContext tContext=new TaskAttemptContextImpl(conf,taskID);
  FileOutputCommitter committer=new CommitterWithFailedThenSucceed(outDir,tContext);
  committer.setupJob(jContext);
  committer.setupTask(tContext);
  TextOutputFormat theOutputFormat=new TextOutputFormat();
  RecordWriter theRecordWriter=theOutputFormat.getRecordWriter(tContext);
  writeOutput(theRecordWriter,tContext);
  committer.commitTask(tContext);
  try {
    committer.commitJob(jContext);
    Assert.fail("Commit successful: wrong behavior for the first time " + "commit.");
  }
 catch (  IOException e) {
    try {
      committer.commitJob(jContext);
      if (version == 1) {
        Assert.fail("Commit successful after retry: wrong behavior for " + "version 1.");
      }
    }
 catch (    FileNotFoundException ex) {
      if (version == 2) {
        Assert.fail("Commit failed after retry: wrong behavior for" + " version 2.");
      }
      assertTrue(ex.getMessage().contains(committer.getJobAttemptPath(jContext).toString() + " does not exist"));
    }
  }
  FileUtil.fullyDelete(new File(outDir.toString()));
}
