{
  ApplicationId mockAppId=mock(ApplicationId.class);
  when(mockAppId.getClusterTimestamp()).thenReturn(12345L);
  when(mockAppId.getId()).thenReturn(6789);
  ApplicationReport mockReport=mock(ApplicationReport.class);
  when(mockReport.getTrackingUrl()).thenReturn("dummy-tracking-url");
  when(mockReport.getApplicationId()).thenReturn(mockAppId);
  when(mockReport.getState()).thenReturn(ApplicationState.KILLED);
  when(mockReport.getUser()).thenReturn("dummy-user");
  when(mockReport.getQueue()).thenReturn("dummy-queue");
  String jobFile="dummy-path/job.xml";
  JobStatus status=TypeConverter.fromYarn(mockReport,jobFile);
  Assert.assertNotNull("fromYarn returned null status",status);
  Assert.assertEquals("jobFile set incorrectly","dummy-path/job.xml",status.getJobFile());
  Assert.assertEquals("queue set incorrectly","dummy-queue",status.getQueue());
  Assert.assertEquals("trackingUrl set incorrectly","dummy-tracking-url",status.getTrackingUrl());
  Assert.assertEquals("user set incorrectly","dummy-user",status.getUsername());
  Assert.assertEquals("schedulingInfo set incorrectly","dummy-tracking-url",status.getSchedulingInfo());
  Assert.assertEquals("jobId set incorrectly",6789,status.getJobID().getId());
  Assert.assertEquals("state set incorrectly",JobStatus.State.KILLED,status.getState());
}
