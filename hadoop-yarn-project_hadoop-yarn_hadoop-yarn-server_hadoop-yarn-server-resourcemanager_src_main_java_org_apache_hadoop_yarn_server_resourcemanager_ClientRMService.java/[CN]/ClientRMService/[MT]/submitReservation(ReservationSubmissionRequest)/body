{
  checkReservationSytem(AuditConstants.SUBMIT_RESERVATION_REQUEST);
  ReservationSubmissionResponse response=recordFactory.newRecordInstance(ReservationSubmissionResponse.class);
  ReservationId reservationId=request.getReservationId();
  Plan plan=rValidator.validateReservationSubmissionRequest(reservationSystem,request,reservationId);
  ReservationAllocation allocation=plan.getReservationById(reservationId);
  if (allocation != null) {
    boolean isNewDefinition=!allocation.getReservationDefinition().equals(request.getReservationDefinition());
    if (isNewDefinition) {
      String message="Reservation allocation already exists with the " + "reservation id " + reservationId.toString() + ", but a different"+ " reservation definition was provided. Please try again with a "+ "new reservation id, or consider updating the reservation instead.";
      throw RPCUtil.getRemoteException(message);
    }
 else {
      return response;
    }
  }
  String queueName=request.getQueue();
  String user=checkReservationACLs(queueName,AuditConstants.SUBMIT_RESERVATION_REQUEST,null);
  try {
    boolean result=plan.getReservationAgent().createReservation(reservationId,user,plan,request.getReservationDefinition());
    if (result) {
      reservationSystem.setQueueForReservation(reservationId,queueName);
      refreshScheduler(queueName,request.getReservationDefinition(),reservationId.toString());
    }
  }
 catch (  PlanningException e) {
    RMAuditLogger.logFailure(user,AuditConstants.SUBMIT_RESERVATION_REQUEST,e.getMessage(),"ClientRMService","Unable to create the reservation: " + reservationId);
    throw RPCUtil.getRemoteException(e);
  }
  RMAuditLogger.logSuccess(user,AuditConstants.SUBMIT_RESERVATION_REQUEST,"ClientRMService: " + reservationId);
  return response;
}
