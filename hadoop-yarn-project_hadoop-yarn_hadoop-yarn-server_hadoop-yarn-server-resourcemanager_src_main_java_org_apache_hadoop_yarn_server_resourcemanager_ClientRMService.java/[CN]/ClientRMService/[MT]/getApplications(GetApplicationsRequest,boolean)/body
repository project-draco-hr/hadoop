{
  UserGroupInformation callerUGI;
  try {
    callerUGI=UserGroupInformation.getCurrentUser();
  }
 catch (  IOException ie) {
    LOG.info("Error getting UGI ",ie);
    throw RPCUtil.getRemoteException(ie);
  }
  Set<String> applicationTypes=request.getApplicationTypes();
  EnumSet<YarnApplicationState> applicationStates=request.getApplicationStates();
  Set<String> users=request.getUsers();
  Set<String> queues=request.getQueues();
  Set<String> tags=request.getApplicationTags();
  long limit=request.getLimit();
  LongRange start=request.getStartRange();
  LongRange finish=request.getFinishRange();
  ApplicationsRequestScope scope=request.getScope();
  final Map<ApplicationId,RMApp> apps=rmContext.getRMApps();
  Iterator<RMApp> appsIter;
  if (queues != null && !queues.isEmpty()) {
    final List<List<ApplicationAttemptId>> queueAppLists=new ArrayList<List<ApplicationAttemptId>>();
    for (    String queue : queues) {
      List<ApplicationAttemptId> appsInQueue=scheduler.getAppsInQueue(queue);
      if (appsInQueue != null && !appsInQueue.isEmpty()) {
        queueAppLists.add(appsInQueue);
      }
    }
    appsIter=new Iterator<RMApp>(){
      Iterator<List<ApplicationAttemptId>> appListIter=queueAppLists.iterator();
      Iterator<ApplicationAttemptId> schedAppsIter;
      @Override public boolean hasNext(){
        return (schedAppsIter != null && schedAppsIter.hasNext()) || appListIter.hasNext();
      }
      @Override public RMApp next(){
        if (schedAppsIter == null || !schedAppsIter.hasNext()) {
          schedAppsIter=appListIter.next().iterator();
        }
        return apps.get(schedAppsIter.next().getApplicationId());
      }
      @Override public void remove(){
        throw new UnsupportedOperationException("Remove not supported");
      }
    }
;
  }
 else {
    appsIter=apps.values().iterator();
  }
  List<ApplicationReport> reports=new ArrayList<ApplicationReport>();
  while (appsIter.hasNext() && reports.size() < limit) {
    RMApp application=appsIter.next();
    if (scope == ApplicationsRequestScope.OWN && !callerUGI.getUserName().equals(application.getUser())) {
      continue;
    }
    if (applicationTypes != null && !applicationTypes.isEmpty()) {
      String appTypeToMatch=caseSensitive ? application.getApplicationType() : StringUtils.toLowerCase(application.getApplicationType());
      if (!applicationTypes.contains(appTypeToMatch)) {
        continue;
      }
    }
    if (applicationStates != null && !applicationStates.isEmpty()) {
      if (!applicationStates.contains(application.createApplicationState())) {
        continue;
      }
    }
    if (users != null && !users.isEmpty() && !users.contains(application.getUser())) {
      continue;
    }
    if (start != null && !start.containsLong(application.getStartTime())) {
      continue;
    }
    if (finish != null && !finish.containsLong(application.getFinishTime())) {
      continue;
    }
    if (tags != null && !tags.isEmpty()) {
      Set<String> appTags=application.getApplicationTags();
      if (appTags == null || appTags.isEmpty()) {
        continue;
      }
      boolean match=false;
      for (      String tag : tags) {
        if (appTags.contains(tag)) {
          match=true;
          break;
        }
      }
      if (!match) {
        continue;
      }
    }
    boolean allowAccess=checkAccess(callerUGI,application.getUser(),ApplicationAccessType.VIEW_APP,application);
    if (scope == ApplicationsRequestScope.VIEWABLE && !allowAccess) {
      continue;
    }
    reports.add(application.createAndGetApplicationReport(callerUGI.getUserName(),allowAccess));
  }
  GetApplicationsResponse response=recordFactory.newRecordInstance(GetApplicationsResponse.class);
  response.setApplicationList(reports);
  return response;
}
