{
  checkSpecs(job);
  Path jobStagingArea=JobSubmissionFiles.getStagingDir(cluster,job.getConfiguration());
  Configuration conf=job.getConfiguration();
  InetAddress ip=InetAddress.getLocalHost();
  if (ip != null) {
    submitHostAddress=ip.getHostAddress();
    submitHostName=ip.getHostName();
    conf.set(MRJobConfig.JOB_SUBMITHOST,submitHostName);
    conf.set(MRJobConfig.JOB_SUBMITHOSTADDR,submitHostAddress);
  }
  JobID jobId=submitClient.getNewJobID();
  job.setJobID(jobId);
  Path submitJobDir=new Path(jobStagingArea,jobId.toString());
  JobStatus status=null;
  try {
    conf.set("hadoop.http.filter.initializers","org.apache.hadoop.yarn.server.webproxy.amfilter.AmFilterInitializer");
    conf.set(MRJobConfig.MAPREDUCE_JOB_DIR,submitJobDir.toString());
    LOG.debug("Configuring job " + jobId + " with "+ submitJobDir+ " as the submit dir");
    TokenCache.obtainTokensForNamenodes(job.getCredentials(),new Path[]{submitJobDir},conf);
    populateTokenCache(conf,job.getCredentials());
    copyAndConfigureFiles(job,submitJobDir);
    Path submitJobFile=JobSubmissionFiles.getJobConfPath(submitJobDir);
    LOG.debug("Creating splits at " + jtFs.makeQualified(submitJobDir));
    int maps=writeSplits(job,submitJobDir);
    conf.setInt(MRJobConfig.NUM_MAPS,maps);
    LOG.info("number of splits:" + maps);
    String queue=conf.get(MRJobConfig.QUEUE_NAME,JobConf.DEFAULT_QUEUE_NAME);
    AccessControlList acl=submitClient.getQueueAdmins(queue);
    conf.set(toFullPropertyName(queue,QueueACL.ADMINISTER_JOBS.getAclName()),acl.getAclString());
    writeConf(conf,submitJobFile);
    printTokens(jobId,job.getCredentials());
    status=submitClient.submitJob(jobId,submitJobDir.toString(),job.getCredentials());
    if (status != null) {
      return status;
    }
 else {
      throw new IOException("Could not launch job");
    }
  }
  finally {
    if (status == null) {
      LOG.info("Cleaning up the staging area " + submitJobDir);
      if (jtFs != null && submitJobDir != null)       jtFs.delete(submitJobDir,true);
    }
  }
}
