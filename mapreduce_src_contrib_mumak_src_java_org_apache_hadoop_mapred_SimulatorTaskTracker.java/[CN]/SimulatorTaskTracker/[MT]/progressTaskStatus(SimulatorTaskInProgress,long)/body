{
  TaskStatus status=tip.getTaskStatus();
  if (status.getRunState() != State.RUNNING) {
    return;
  }
  boolean isMap=tip.isMapTask();
  long startTime=-1;
  long runTime=tip.getUserSpaceRunTime();
  float progress=0.0f;
  if (isMap) {
    startTime=status.getStartTime();
    progress=((float)(now - startTime)) / runTime;
  }
 else {
    Phase reducePhase=status.getPhase();
switch (reducePhase) {
case SHUFFLE:
      progress=0.0f;
    break;
case SORT:
  progress=1.0f / 3;
break;
case REDUCE:
{
startTime=status.getSortFinishTime();
progress=2.0f / 3 + (((float)(now - startTime)) / runTime) / 3.0f;
}
break;
default :
throw new IllegalArgumentException("Invalid reducePhase=" + reducePhase);
}
}
final float EPSILON=0.0001f;
if (progress < -EPSILON || progress > 1 + EPSILON) {
throw new IllegalStateException("Task progress out of range: " + progress);
}
progress=Math.max(Math.min(1.0f,progress),0.0f);
status.setProgress(progress);
if (LOG.isDebugEnabled()) {
LOG.debug("Updated task progress, taskId=" + status.getTaskID() + ", progress="+ status.getProgress());
}
}
