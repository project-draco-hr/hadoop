{
  createUserLocalDirs(localDirs,user);
  createUserCacheDirs(localDirs,user);
  createAppDirs(localDirs,user,appId);
  createAppLogDirs(appId,logDirs,user);
  Path appStorageDir=getFirstApplicationDir(localDirs,user,appId);
  String tokenFn=String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT,locId);
  Path tokenDst=new Path(appStorageDir,tokenFn);
  LOG.info("Copying from " + nmPrivateContainerTokens + " to "+ tokenDst);
  copyFile(nmPrivateContainerTokens,tokenDst,user);
  List<String> command;
  String[] commandArray;
  ShellCommandExecutor shExec;
  File cwdApp=new File(appStorageDir.toString());
  LOG.info(String.format("cwdApp: %s",cwdApp));
  command=new ArrayList<String>();
  command.add(Shell.WINUTILS);
  command.add("task");
  command.add("createAsUser");
  command.add("START_LOCALIZER_" + locId);
  command.add(user);
  command.add("nul:");
  File jvm=new File(new File(System.getProperty("java.home"),"bin"),"java.exe");
  command.add(jvm.toString());
  String classPath=System.getProperty("java.class.path");
  Map<String,String> env=new HashMap<String,String>(System.getenv());
  String classPathJar=FileUtil.createJarWithClassPath(classPath,appStorageDir,env);
  localizeClasspathJar(new Path(classPathJar),user);
  command.add("-classpath");
  command.add(classPathJar);
  String javaLibPath=System.getProperty("java.library.path");
  if (javaLibPath != null) {
    command.add("-Djava.library.path=" + javaLibPath);
  }
  ContainerLocalizer.buildMainArgs(command,user,appId,locId,nmAddr,localDirs);
  commandArray=command.toArray(new String[command.size()]);
  shExec=new ShellCommandExecutor(commandArray,cwdApp);
  shExec.execute();
}
