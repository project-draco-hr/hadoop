{
  if (expr == null || exprLength == 0) {
    return null;
  }
  boolean closingBracket=false;
  while (offset < exprLength) {
    char offsetChar=expr.charAt(offset);
switch (offsetChar) {
case TimelineParseConstants.SPACE_CHAR:
      handleSpaceChar();
    break;
case TimelineParseConstants.OPENING_BRACKET_CHAR:
  handleOpeningBracketChar();
break;
case TimelineParseConstants.CLOSING_BRACKET_CHAR:
handleClosingBracketChar();
closingBracket=true;
break;
default :
if (currentParseState == ParseState.PARSING_COMPAREOP) {
parseCompareOp();
}
 else if (currentParseState == ParseState.PARSING_OP) {
parseOp(closingBracket);
closingBracket=false;
}
 else {
offset++;
}
break;
}
}
if (!filterListStack.isEmpty()) {
filterListStack.clear();
throw new TimelineParseException("Encountered improper brackets while " + "parsing " + exprName + ".");
}
if (currentParseState == ParseState.PARSING_VALUE) {
setValueToCurrentFilter(parseValue(expr.substring(kvStartOffset,offset)));
}
if (filterList == null || filterList.getFilterList().isEmpty()) {
filterList=new TimelineFilterList(currentFilter);
}
 else if (currentFilter != null) {
filterList.addFilter(currentFilter);
}
return filterList;
}
