{
  CapacityScheduler cs=new CapacityScheduler();
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,true);
  RMContextImpl rmContext=new RMContextImpl(null,null,null,null,null,null,new RMContainerTokenSecretManager(conf),new NMTokenSecretManagerInRM(conf),new ClientToAMTokenSecretManagerInRM(),null);
  setupQueueConfiguration(conf);
  cs.setConf(new YarnConfiguration());
  cs.setRMContext(resourceManager.getRMContext());
  cs.init(conf);
  cs.start();
  cs.reinitialize(conf,rmContext);
  CSQueue rootQueue=cs.getRootQueue();
  CSQueue queueB=findQueue(rootQueue,B);
  CSQueue queueB2=findQueue(queueB,B2);
  assertFalse("queue " + B2 + " should default to preemptable",queueB2.getPreemptionDisabled());
  conf.setPreemptionDisabled(rootQueue.getQueuePath(),true);
  cs.reinitialize(conf,rmContext);
  assertTrue("queue " + B2 + " should have inherited non-preemptability from root",queueB2.getPreemptionDisabled());
  conf.setPreemptionDisabled(rootQueue.getQueuePath(),false);
  conf.setPreemptionDisabled(queueB.getQueuePath(),true);
  cs.reinitialize(conf,rmContext);
  assertTrue("queue " + B2 + " should have inherited non-preemptability from parent",queueB2.getPreemptionDisabled());
  conf.setPreemptionDisabled(queueB2.getQueuePath(),false);
  cs.reinitialize(conf,rmContext);
  assertFalse("queue " + B2 + " should have been preemptable",queueB2.getPreemptionDisabled());
}
