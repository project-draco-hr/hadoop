{
  CapacityScheduler cs=new CapacityScheduler();
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  setupQueueConfiguration(conf);
  cs.setConf(new YarnConfiguration());
  cs.setRMContext(resourceManager.getRMContext());
  cs.init(conf);
  cs.start();
  cs.reinitialize(conf,mockContext);
  checkQueueCapacities(cs,A_CAPACITY,B_CAPACITY);
  assertEquals("max allocation in CS",YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,cs.getMaximumResourceCapability().getMemorySize());
  assertEquals("max allocation for A1",YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,conf.getMaximumAllocationPerQueue(A1).getMemorySize());
  assertEquals("max allocation",YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB,conf.getMaximumAllocation().getMemorySize());
  CSQueue rootQueue=cs.getRootQueue();
  CSQueue queueA=findQueue(rootQueue,A);
  CSQueue queueA1=findQueue(queueA,A1);
  assertEquals("queue max allocation",((LeafQueue)queueA1).getMaximumAllocation().getMemorySize(),8192);
  setMaxAllocMb(conf,A1,4096);
  try {
    cs.reinitialize(conf,mockContext);
    fail("should have thrown exception");
  }
 catch (  IOException e) {
    assertTrue("max allocation exception",e.getCause().toString().contains("not be decreased"));
  }
  setMaxAllocMb(conf,A1,8192);
  cs.reinitialize(conf,mockContext);
  setMaxAllocVcores(conf,A1,YarnConfiguration.DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES - 1);
  try {
    cs.reinitialize(conf,mockContext);
    fail("should have thrown exception");
  }
 catch (  IOException e) {
    assertTrue("max allocation exception",e.getCause().toString().contains("not be decreased"));
  }
}
