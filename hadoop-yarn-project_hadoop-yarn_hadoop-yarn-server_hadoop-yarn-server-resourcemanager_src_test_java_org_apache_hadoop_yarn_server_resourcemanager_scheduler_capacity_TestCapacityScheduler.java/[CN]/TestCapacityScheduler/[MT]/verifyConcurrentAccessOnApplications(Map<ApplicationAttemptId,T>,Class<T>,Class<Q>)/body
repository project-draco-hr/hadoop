{
  final int size=10000;
  final ApplicationId appId=ApplicationId.newInstance(0,0);
  final Constructor<T> ctor=appClazz.getDeclaredConstructor(ApplicationAttemptId.class,String.class,queueClazz,ActiveUsersManager.class,RMContext.class);
  ApplicationAttemptId appAttemptId0=ApplicationAttemptId.newInstance(appId,0);
  applications.put(appAttemptId0,ctor.newInstance(appAttemptId0,null,mock(queueClazz),null,null));
  assertNotNull(applications.get(appAttemptId0));
  final AtomicBoolean finished=new AtomicBoolean(false);
  final AtomicBoolean failed=new AtomicBoolean(false);
  Thread t=new Thread(){
    @Override public void run(){
      for (int i=1; i <= size; ++i) {
        ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,i);
        try {
          applications.put(appAttemptId,ctor.newInstance(appAttemptId,null,mock(queueClazz),null,null));
        }
 catch (        Exception e) {
          failed.set(true);
          finished.set(true);
          return;
        }
      }
      for (int i=1; i <= size; ++i) {
        ApplicationAttemptId appAttemptId=ApplicationAttemptId.newInstance(appId,i);
        applications.remove(appAttemptId);
      }
      finished.set(true);
    }
  }
;
  t.start();
  while (!finished.get()) {
    assertNotNull(applications.get(appAttemptId0));
  }
  assertFalse(failed.get());
}
