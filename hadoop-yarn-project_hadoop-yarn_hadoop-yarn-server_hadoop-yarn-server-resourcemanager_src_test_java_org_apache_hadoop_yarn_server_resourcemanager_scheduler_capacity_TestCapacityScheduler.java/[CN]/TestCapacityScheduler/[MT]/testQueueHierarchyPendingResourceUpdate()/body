{
  Configuration conf=TestUtils.getConfigurationWithQueueLabels(new Configuration(false));
  conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
  final RMNodeLabelsManager mgr=new NullRMNodeLabelsManager();
  mgr.init(conf);
  mgr.addToCluserNodeLabelsWithDefaultExclusivity(ImmutableSet.of("x","y"));
  mgr.addLabelsToNode(ImmutableMap.of(NodeId.newInstance("h1",0),toSet("x")));
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm=new MockRM(conf,memStore){
    protected RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.start();
  MockNM nm1=new MockNM("h1:1234",200 * GB,rm.getResourceTrackerService());
  nm1.registerNode();
  MockNM nm2=new MockNM("h2:1234",200 * GB,rm.getResourceTrackerService());
  nm2.registerNode();
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"a1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm2);
  RMApp app2=rm.submitApp(8 * GB,"app","user",null,"b1");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm,nm2);
  am1.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(1),"*",Resources.createResource(1 * GB),8)),null);
  checkPendingResource(rm,"a1",8 * GB,null);
  checkPendingResource(rm,"a",8 * GB,null);
  checkPendingResource(rm,"root",8 * GB,null);
  am2.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(1),"*",Resources.createResource(1 * GB),8)),null);
  checkPendingResource(rm,"a1",8 * GB,null);
  checkPendingResource(rm,"a",8 * GB,null);
  checkPendingResource(rm,"b1",8 * GB,null);
  checkPendingResource(rm,"b",8 * GB,null);
  checkPendingResource(rm,"root",16 * GB,null);
  am2.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(2),"*",Resources.createResource(1 * GB),8)),null);
  checkPendingResource(rm,"a1",8 * GB,null);
  checkPendingResource(rm,"a",8 * GB,null);
  checkPendingResource(rm,"b1",16 * GB,null);
  checkPendingResource(rm,"b",16 * GB,null);
  checkPendingResource(rm,"root",24 * GB,null);
  am1.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(1),"*",Resources.createResource(4 * GB),1)),null);
  checkPendingResource(rm,"a1",4 * GB,null);
  checkPendingResource(rm,"a",4 * GB,null);
  checkPendingResource(rm,"b1",16 * GB,null);
  checkPendingResource(rm,"b",16 * GB,null);
  checkPendingResource(rm,"root",20 * GB,null);
  am1.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(2),"*",Resources.createResource(8 * GB),1,true,"x")),null);
  checkPendingResource(rm,"a1",4 * GB,null);
  checkPendingResource(rm,"a",4 * GB,null);
  checkPendingResource(rm,"a1",8 * GB,"x");
  checkPendingResource(rm,"a",8 * GB,"x");
  checkPendingResource(rm,"b1",16 * GB,null);
  checkPendingResource(rm,"b",16 * GB,null);
  checkPendingResource(rm,"root",20 * GB,null);
  checkPendingResource(rm,"root",8 * GB,"x");
  ContainerId containerId=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  Assert.assertTrue(rm.waitForState(nm1,containerId,RMContainerState.ALLOCATED,10 * 1000));
  containerId=ContainerId.newContainerId(am1.getApplicationAttemptId(),3);
  Assert.assertTrue(rm.waitForState(nm2,containerId,RMContainerState.ALLOCATED,10 * 1000));
  checkPendingResource(rm,"a1",0 * GB,null);
  checkPendingResource(rm,"a",0 * GB,null);
  checkPendingResource(rm,"a1",0 * GB,"x");
  checkPendingResource(rm,"a",0 * GB,"x");
  checkPendingResourceGreaterThanZero(rm,"b1",null);
  checkPendingResourceGreaterThanZero(rm,"b",null);
  checkPendingResourceGreaterThanZero(rm,"root",null);
  checkPendingResource(rm,"root",0 * GB,"x");
  AppAttemptRemovedSchedulerEvent appRemovedEvent=new AppAttemptRemovedSchedulerEvent(am2.getApplicationAttemptId(),RMAppAttemptState.FINISHED,false);
  rm.getResourceScheduler().handle(appRemovedEvent);
  checkPendingResource(rm,"a1",0 * GB,null);
  checkPendingResource(rm,"a",0 * GB,null);
  checkPendingResource(rm,"a1",0 * GB,"x");
  checkPendingResource(rm,"a",0 * GB,"x");
  checkPendingResource(rm,"b1",0 * GB,null);
  checkPendingResource(rm,"b",0 * GB,null);
  checkPendingResource(rm,"root",0 * GB,null);
  checkPendingResource(rm,"root",0 * GB,"x");
}
