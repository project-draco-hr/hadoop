{
  CapacityScheduler cs=new CapacityScheduler();
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  setupQueueConfiguration(conf);
  cs.setConf(new YarnConfiguration());
  cs.reinitialize(conf,new RMContextImpl(null,null,null,null,null,null,new RMContainerTokenSecretManager(conf),new NMTokenSecretManagerInRM(conf),new ClientToAMTokenSecretManagerInRM(),null));
  checkQueueCapacities(cs,A_CAPACITY,B_CAPACITY);
  String B4=B + ".b4";
  float B4_CAPACITY=10;
  B3_CAPACITY-=B4_CAPACITY;
  try {
    conf.setCapacity(A,80f);
    conf.setCapacity(B,20f);
    conf.setQueues(B,new String[]{"b1","b2","b3","b4"});
    conf.setCapacity(B1,B1_CAPACITY);
    conf.setCapacity(B2,B2_CAPACITY);
    conf.setCapacity(B3,B3_CAPACITY);
    conf.setCapacity(B4,B4_CAPACITY);
    cs.reinitialize(conf,null);
    checkQueueCapacities(cs,80f,20f);
    CSQueue rootQueue=cs.getRootQueue();
    CSQueue queueB=findQueue(rootQueue,B);
    CSQueue queueB4=findQueue(queueB,B4);
    assertEquals(queueB,queueB4.getParent());
  }
  finally {
    B3_CAPACITY+=B4_CAPACITY;
  }
}
