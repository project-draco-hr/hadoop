{
  resourceManager=new ResourceManager(){
    @Override protected RMNodeLabelsManager createNodeLabelManager(){
      RMNodeLabelsManager mgr=new NullRMNodeLabelsManager();
      mgr.init(getConfig());
      return mgr;
    }
  }
;
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  setupQueueConfiguration(csConf);
  StringBuilder qState=new StringBuilder();
  qState.append(CapacitySchedulerConfiguration.PREFIX).append(B).append(CapacitySchedulerConfiguration.DOT).append(CapacitySchedulerConfiguration.STATE);
  csConf.set(qState.toString(),QueueState.STOPPED.name());
  YarnConfiguration conf=new YarnConfiguration(csConf);
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  resourceManager.init(conf);
  resourceManager.getRMContext().getContainerTokenSecretManager().rollMasterKey();
  resourceManager.getRMContext().getNMTokenSecretManager().rollMasterKey();
  ((AsyncDispatcher)resourceManager.getRMContext().getDispatcher()).start();
  mockContext=mock(RMContext.class);
  when(mockContext.getConfigurationProvider()).thenReturn(new LocalConfigurationProvider());
  ResourceScheduler scheduler=resourceManager.getResourceScheduler();
  String host_0="host_0";
  NodeManager nm_0=registerNode(host_0,1234,2345,NetworkTopology.DEFAULT_RACK,Resources.createResource(6 * GB,1));
  Priority priority_0=org.apache.hadoop.yarn.server.resourcemanager.resource.Priority.create(0);
  Priority priority_1=org.apache.hadoop.yarn.server.resourcemanager.resource.Priority.create(1);
  Application application_0=new Application("user_0","a1",resourceManager);
  application_0.submit();
  application_0.addNodeManager(host_0,1234,nm_0);
  Resource capability_0_0=Resources.createResource(3 * GB,1);
  application_0.addResourceRequestSpec(priority_1,capability_0_0);
  Resource capability_0_1=Resources.createResource(2 * GB,1);
  application_0.addResourceRequestSpec(priority_0,capability_0_1);
  Task task_0_0=new Task(application_0,priority_1,new String[]{host_0});
  application_0.addTask(task_0_0);
  application_0.schedule();
  nodeUpdate(nm_0);
  application_0.schedule();
  checkApplicationResourceUsage(3 * GB,application_0);
  checkNodeResourceUsage(3 * GB,nm_0);
  scheduler.moveApplication(application_0.getApplicationId(),"b1");
}
