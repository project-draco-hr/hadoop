{
  MockRM rm=setUpMove();
  YarnScheduler scheduler=rm.getResourceScheduler();
  RMApp app=rm.submitApp(GB,"test-move-1","user_0",null,"a1");
  ApplicationAttemptId appAttemptId=rm.getApplicationReport(app.getApplicationId()).getCurrentApplicationAttemptId();
  List<ApplicationAttemptId> appsInA1=scheduler.getAppsInQueue("a1");
  assertEquals(1,appsInA1.size());
  List<ApplicationAttemptId> appsInA=scheduler.getAppsInQueue("a");
  assertTrue(appsInA.contains(appAttemptId));
  assertEquals(1,appsInA.size());
  List<ApplicationAttemptId> appsInRoot=scheduler.getAppsInQueue("root");
  assertTrue(appsInRoot.contains(appAttemptId));
  assertEquals(1,appsInRoot.size());
  List<ApplicationAttemptId> appsInB1=scheduler.getAppsInQueue("b1");
  assertTrue(appsInB1.isEmpty());
  List<ApplicationAttemptId> appsInB=scheduler.getAppsInQueue("b");
  assertTrue(appsInB.isEmpty());
  try {
    scheduler.moveAllApps("a1","DOES_NOT_EXIST");
    Assert.fail();
  }
 catch (  YarnException e) {
  }
  appsInA1=scheduler.getAppsInQueue("a1");
  assertEquals(1,appsInA1.size());
  appsInA=scheduler.getAppsInQueue("a");
  assertTrue(appsInA.contains(appAttemptId));
  assertEquals(1,appsInA.size());
  appsInRoot=scheduler.getAppsInQueue("root");
  assertTrue(appsInRoot.contains(appAttemptId));
  assertEquals(1,appsInRoot.size());
  appsInB1=scheduler.getAppsInQueue("b1");
  assertTrue(appsInB1.isEmpty());
  appsInB=scheduler.getAppsInQueue("b");
  assertTrue(appsInB.isEmpty());
  rm.stop();
}
