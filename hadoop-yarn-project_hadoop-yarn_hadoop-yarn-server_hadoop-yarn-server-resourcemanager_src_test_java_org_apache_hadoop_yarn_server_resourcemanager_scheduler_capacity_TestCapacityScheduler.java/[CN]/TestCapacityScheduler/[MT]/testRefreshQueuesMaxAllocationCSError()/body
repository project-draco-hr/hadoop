{
  CapacityScheduler cs=new CapacityScheduler();
  cs.setConf(new YarnConfiguration());
  cs.setRMContext(resourceManager.getRMContext());
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  setupQueueConfiguration(conf);
  setMaxAllocMb(conf,10240);
  setMaxAllocVcores(conf,10);
  setMaxAllocMb(conf,A1,4096);
  setMaxAllocVcores(conf,A1,4);
  cs.init(conf);
  cs.start();
  cs.reinitialize(conf,mockContext);
  checkQueueCapacities(cs,A_CAPACITY,B_CAPACITY);
  assertEquals("max allocation MB in CS",10240,cs.getMaximumResourceCapability().getMemory());
  assertEquals("max allocation vcores in CS",10,cs.getMaximumResourceCapability().getVirtualCores());
  setMaxAllocMb(conf,6144);
  try {
    cs.reinitialize(conf,mockContext);
    fail("should have thrown exception");
  }
 catch (  IOException e) {
    assertTrue("max allocation exception",e.getCause().toString().contains("not be decreased"));
  }
  setMaxAllocMb(conf,10240);
  cs.reinitialize(conf,mockContext);
  setMaxAllocVcores(conf,8);
  try {
    cs.reinitialize(conf,mockContext);
    fail("should have thrown exception");
  }
 catch (  IOException e) {
    assertTrue("max allocation exception",e.getCause().toString().contains("not be decreased"));
  }
}
