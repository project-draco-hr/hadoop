{
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{"a","b"});
  csConf.setCapacity(A,50);
  csConf.setMaximumCapacity(A,50);
  csConf.setCapacity(B,50);
  csConf.setQueues(A,new String[]{"a1","a2"});
  csConf.setCapacity(A1,50);
  csConf.setUserLimitFactor(A1,100.0f);
  csConf.setCapacity(A2,50);
  csConf.setUserLimitFactor(A2,100.0f);
  csConf.setCapacity(B1,B1_CAPACITY);
  csConf.setUserLimitFactor(B1,100.0f);
  YarnConfiguration conf=new YarnConfiguration(csConf);
  conf.setBoolean(CapacitySchedulerConfiguration.ENABLE_USER_METRICS,true);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",24 * GB,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"a1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  waitContainerAllocated(am1,4 * GB,2,2,rm1,nm1);
  RMApp app2=rm1.submitApp(2 * GB,"app","user",null,"a2");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm1);
  try {
    waitContainerAllocated(am2,2 * GB,1,2,rm1,nm1);
  }
 catch (  AssertionError failure) {
    return;
  }
  Assert.fail("Shouldn't successfully allocate containers for am2, " + "queue-a's max capacity will be violated if container allocated");
}
