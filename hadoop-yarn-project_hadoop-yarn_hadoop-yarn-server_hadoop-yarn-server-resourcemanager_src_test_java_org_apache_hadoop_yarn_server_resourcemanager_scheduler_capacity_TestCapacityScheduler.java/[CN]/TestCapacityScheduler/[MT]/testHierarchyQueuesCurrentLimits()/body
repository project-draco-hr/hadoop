{
  YarnConfiguration conf=new YarnConfiguration(setupQueueConfiguration(new CapacitySchedulerConfiguration()));
  conf.setBoolean(CapacitySchedulerConfiguration.ENABLE_USER_METRICS,true);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",100 * GB,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"b1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  waitContainerAllocated(am1,1 * GB,1,2,rm1,nm1);
  Assert.assertEquals(69 * GB,am1.doHeartbeat().getAvailableResources().getMemorySize());
  RMApp app2=rm1.submitApp(1 * GB,"app","user",null,"b2");
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm1);
  waitContainerAllocated(am2,8 * GB,5,2,rm1,nm1);
  waitContainerAllocated(am1,1 * GB,1,3,rm1,nm1);
  Assert.assertEquals(56 * GB,am1.doHeartbeat().getAvailableResources().getMemorySize());
  RMApp app3=rm1.submitApp(1 * GB,"app","user",null,"a1");
  MockAM am3=MockRM.launchAndRegisterAM(app3,rm1,nm1);
  waitContainerAllocated(am3,8 * GB,3,2,rm1,nm1);
  waitContainerAllocated(am1,1 * GB,1,4,rm1,nm1);
  Assert.assertEquals(30 * GB,am1.doHeartbeat().getAvailableResources().getMemorySize());
}
