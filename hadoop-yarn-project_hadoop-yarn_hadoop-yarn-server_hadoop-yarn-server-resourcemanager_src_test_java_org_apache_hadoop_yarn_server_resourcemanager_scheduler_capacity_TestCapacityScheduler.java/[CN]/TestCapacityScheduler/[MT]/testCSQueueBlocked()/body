{
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  setupBlockedQueueConfiguration(conf);
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  MockRM rm=new MockRM(conf);
  rm.start();
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  LeafQueue q=(LeafQueue)cs.getQueue("a");
  Assert.assertNotNull(q);
  String host="127.0.0.1";
  String host1="test";
  RMNode node=MockNodes.newNodeInfo(0,Resource.newInstance(8 * GB,8),1,host);
  RMNode node1=MockNodes.newNodeInfo(0,Resource.newInstance(8 * GB,8),2,host1);
  cs.handle(new NodeAddedSchedulerEvent(node));
  cs.handle(new NodeAddedSchedulerEvent(node1));
  ApplicationAttemptId appAttemptId1=appHelper(rm,cs,100,1,"a","user1");
  ApplicationAttemptId appAttemptId2=appHelper(rm,cs,100,2,"b","user2");
  RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
  Priority priority=TestUtils.createMockPriority(1);
  ResourceRequest r1=TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,priority,recordFactory);
  cs.allocate(appAttemptId1,Collections.<ResourceRequest>singletonList(r1),Collections.<ContainerId>emptyList(),null,null,null,null).getContainers().size();
  CapacityScheduler.schedule(cs);
  ResourceRequest r2=null;
  for (int i=0; i < 13; i++) {
    r2=TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory);
    cs.allocate(appAttemptId2,Collections.<ResourceRequest>singletonList(r2),Collections.<ContainerId>emptyList(),null,null,null,null);
    CapacityScheduler.schedule(cs);
  }
  assertEquals("A Used Resource should be 2 GB",2 * GB,cs.getQueue("a").getUsedResources().getMemorySize());
  assertEquals("B Used Resource should be 13 GB",13 * GB,cs.getQueue("b").getUsedResources().getMemorySize());
  r1=TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,priority,recordFactory);
  r2=TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory);
  cs.allocate(appAttemptId1,Collections.<ResourceRequest>singletonList(r1),Collections.<ContainerId>emptyList(),null,null,null,null).getContainers().size();
  CapacityScheduler.schedule(cs);
  cs.allocate(appAttemptId2,Collections.<ResourceRequest>singletonList(r2),Collections.<ContainerId>emptyList(),null,null,null,null);
  CapacityScheduler.schedule(cs);
  assertEquals("A Used Resource should be 2 GB",2 * GB,cs.getQueue("a").getUsedResources().getMemorySize());
  assertEquals("B Used Resource should be 13 GB",13 * GB,cs.getQueue("b").getUsedResources().getMemorySize());
  ContainerId containerId1=ContainerId.newContainerId(appAttemptId2,10);
  ContainerId containerId2=ContainerId.newContainerId(appAttemptId2,11);
  cs.handle(new ContainerExpiredSchedulerEvent(containerId1));
  rm.drainEvents();
  CapacityScheduler.schedule(cs);
  cs.handle(new ContainerExpiredSchedulerEvent(containerId2));
  CapacityScheduler.schedule(cs);
  rm.drainEvents();
  assertEquals("A Used Resource should be 4 GB",4 * GB,cs.getQueue("a").getUsedResources().getMemorySize());
  assertEquals("B Used Resource should be 12 GB",12 * GB,cs.getQueue("b").getUsedResources().getMemorySize());
  assertEquals("Used Resource on Root should be 16 GB",16 * GB,cs.getRootQueue().getUsedResources().getMemorySize());
  rm.stop();
}
