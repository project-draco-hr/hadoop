{
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  conf.setResourceComparator(DominantResourceCalculator.class);
  setupOtherBlockedQueueConfiguration(conf);
  conf.setClass(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class,ResourceScheduler.class);
  MockRM rm=new MockRM(conf);
  rm.start();
  CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
  ParentQueue q=(ParentQueue)cs.getQueue("p1");
  Assert.assertNotNull(q);
  String host="127.0.0.1";
  String host1="test";
  RMNode node=MockNodes.newNodeInfo(0,Resource.newInstance(8 * GB,8),1,host);
  RMNode node1=MockNodes.newNodeInfo(0,Resource.newInstance(8 * GB,8),2,host1);
  cs.handle(new NodeAddedSchedulerEvent(node));
  cs.handle(new NodeAddedSchedulerEvent(node1));
  ApplicationAttemptId appAttemptId1=appHelper(rm,cs,100,1,"x1","userX1");
  ApplicationAttemptId appAttemptId2=appHelper(rm,cs,100,2,"x2","userX2");
  ApplicationAttemptId appAttemptId3=appHelper(rm,cs,100,3,"y1","userY1");
  RecordFactory recordFactory=RecordFactoryProvider.getRecordFactory(null);
  Priority priority=TestUtils.createMockPriority(1);
  ResourceRequest y1Req=null;
  ResourceRequest x1Req=null;
  ResourceRequest x2Req=null;
  for (int i=0; i < 4; i++) {
    y1Req=TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory);
    cs.allocate(appAttemptId3,Collections.<ResourceRequest>singletonList(y1Req),Collections.<ContainerId>emptyList(),null,null,null,null);
    CapacityScheduler.schedule(cs);
  }
  assertEquals("Y1 Used Resource should be 4 GB",4 * GB,cs.getQueue("y1").getUsedResources().getMemorySize());
  assertEquals("P2 Used Resource should be 4 GB",4 * GB,cs.getQueue("p2").getUsedResources().getMemorySize());
  for (int i=0; i < 7; i++) {
    x1Req=TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory);
    cs.allocate(appAttemptId1,Collections.<ResourceRequest>singletonList(x1Req),Collections.<ContainerId>emptyList(),null,null,null,null);
    CapacityScheduler.schedule(cs);
  }
  assertEquals("X1 Used Resource should be 7 GB",7 * GB,cs.getQueue("x1").getUsedResources().getMemorySize());
  assertEquals("P1 Used Resource should be 7 GB",7 * GB,cs.getQueue("p1").getUsedResources().getMemorySize());
  x2Req=TestUtils.createResourceRequest(ResourceRequest.ANY,2 * GB,1,true,priority,recordFactory);
  cs.allocate(appAttemptId2,Collections.<ResourceRequest>singletonList(x2Req),Collections.<ContainerId>emptyList(),null,null,null,null);
  CapacityScheduler.schedule(cs);
  assertEquals("X2 Used Resource should be 0",0,cs.getQueue("x2").getUsedResources().getMemorySize());
  assertEquals("P1 Used Resource should be 7 GB",7 * GB,cs.getQueue("p1").getUsedResources().getMemorySize());
  x1Req=TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory);
  cs.allocate(appAttemptId1,Collections.<ResourceRequest>singletonList(x1Req),Collections.<ContainerId>emptyList(),null,null,null,null);
  CapacityScheduler.schedule(cs);
  assertEquals("X1 Used Resource should be 7 GB",7 * GB,cs.getQueue("x1").getUsedResources().getMemorySize());
  assertEquals("P1 Used Resource should be 7 GB",7 * GB,cs.getQueue("p1").getUsedResources().getMemorySize());
  for (int i=0; i < 4; i++) {
    y1Req=TestUtils.createResourceRequest(ResourceRequest.ANY,1 * GB,1,true,priority,recordFactory);
    cs.allocate(appAttemptId3,Collections.<ResourceRequest>singletonList(y1Req),Collections.<ContainerId>emptyList(),null,null,null,null);
    CapacityScheduler.schedule(cs);
  }
  assertEquals("P2 Used Resource should be 8 GB",8 * GB,cs.getQueue("p2").getUsedResources().getMemorySize());
  ContainerId containerId=ContainerId.newContainerId(appAttemptId1,2);
  cs.handle(new ContainerExpiredSchedulerEvent(containerId));
  CapacityScheduler.schedule(cs);
  assertEquals("X2 Used Resource should be 2 GB",2 * GB,cs.getQueue("x2").getUsedResources().getMemorySize());
  assertEquals("P1 Used Resource should be 8 GB",8 * GB,cs.getQueue("p1").getUsedResources().getMemorySize());
  assertEquals("P2 Used Resource should be 8 GB",8 * GB,cs.getQueue("p2").getUsedResources().getMemorySize());
  assertEquals("Root Used Resource should be 16 GB",16 * GB,cs.getRootQueue().getUsedResources().getMemorySize());
  rm.stop();
}
