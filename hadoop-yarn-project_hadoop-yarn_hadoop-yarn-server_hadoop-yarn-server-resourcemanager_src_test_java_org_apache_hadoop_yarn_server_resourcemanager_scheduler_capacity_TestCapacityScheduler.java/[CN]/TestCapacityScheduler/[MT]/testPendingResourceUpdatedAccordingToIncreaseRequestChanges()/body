{
  Configuration conf=TestUtils.getConfigurationWithQueueLabels(new Configuration(false));
  conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
  final RMNodeLabelsManager mgr=new NullRMNodeLabelsManager();
  mgr.init(conf);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm=new MockRM(conf,memStore){
    protected RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm.start();
  MockNM nm1=new MockNM("h1:1234",200 * GB,rm.getResourceTrackerService());
  nm1.registerNode();
  RMApp app1=rm.submitApp(1 * GB,"app","user",null,"a1");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm1);
  am1.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(1),"*",Resources.createResource(2 * GB),2)),null);
  ContainerId containerId1=ContainerId.newContainerId(am1.getApplicationAttemptId(),1);
  ContainerId containerId2=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  ContainerId containerId3=ContainerId.newContainerId(am1.getApplicationAttemptId(),3);
  Assert.assertTrue(rm.waitForState(nm1,containerId3,RMContainerState.ALLOCATED,10 * 1000));
  am1.allocate(null,null);
  sentRMContainerLaunched(rm,ContainerId.newContainerId(am1.getApplicationAttemptId(),1L));
  sentRMContainerLaunched(rm,ContainerId.newContainerId(am1.getApplicationAttemptId(),2L));
  sentRMContainerLaunched(rm,ContainerId.newContainerId(am1.getApplicationAttemptId(),3L));
  am1.sendContainerResizingRequest(Arrays.asList(ContainerResourceChangeRequest.newInstance(containerId1,Resources.createResource(3 * GB))),null);
  FiCaSchedulerApp app=getFiCaSchedulerApp(rm,app1.getApplicationId());
  Assert.assertEquals(2 * GB,app.getAppAttemptResourceUsage().getPending().getMemory());
  checkPendingResource(rm,"a1",2 * GB,null);
  checkPendingResource(rm,"a",2 * GB,null);
  checkPendingResource(rm,"root",2 * GB,null);
  am1.sendContainerResizingRequest(Arrays.asList(ContainerResourceChangeRequest.newInstance(containerId2,Resources.createResource(3 * GB)),ContainerResourceChangeRequest.newInstance(containerId3,Resources.createResource(5 * GB))),null);
  Assert.assertEquals(6 * GB,app.getAppAttemptResourceUsage().getPending().getMemory());
  checkPendingResource(rm,"a1",6 * GB,null);
  checkPendingResource(rm,"a",6 * GB,null);
  checkPendingResource(rm,"root",6 * GB,null);
  am1.sendContainerResizingRequest(Arrays.asList(ContainerResourceChangeRequest.newInstance(containerId1,Resources.createResource(3 * GB)),ContainerResourceChangeRequest.newInstance(containerId2,Resources.createResource(4 * GB)),ContainerResourceChangeRequest.newInstance(containerId3,Resources.createResource(2 * GB))),null);
  Assert.assertEquals(4 * GB,app.getAppAttemptResourceUsage().getPending().getMemory());
  checkPendingResource(rm,"a1",4 * GB,null);
  checkPendingResource(rm,"a",4 * GB,null);
  checkPendingResource(rm,"root",4 * GB,null);
}
