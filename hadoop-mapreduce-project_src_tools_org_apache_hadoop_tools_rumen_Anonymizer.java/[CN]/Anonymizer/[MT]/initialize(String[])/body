{
  try {
    for (int i=0; i < args.length; ++i) {
      if ("-trace".equals(args[i])) {
        anonymizeTrace=true;
        inputTracePath=new Path(args[i + 1]);
        outputTracePath=new Path(args[i + 2]);
        i+=2;
      }
      if ("-topology".equals(args[i])) {
        anonymizeTopology=true;
        inputTopologyPath=new Path(args[i + 1]);
        outputTopologyPath=new Path(args[i + 2]);
        i+=2;
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalArgumentException("Illegal arguments list!",e);
  }
  if (!anonymizeTopology && !anonymizeTrace) {
    throw new IllegalArgumentException("Invalid arguments list!");
  }
  statePool=new StatePool();
  statePool.initialize(getConf());
  outMapper=new ObjectMapper();
  SimpleModule module=new SimpleModule("Anonymization Serializer",new Version(0,1,1,"FINAL"));
  module.addSerializer(DataType.class,new DefaultRumenSerializer());
  module.addSerializer(String.class,new BlockingSerializer());
  module.addSerializer(ID.class,new ObjectStringSerializer<ID>());
  module.addSerializer(AnonymizableDataType.class,new DefaultAnonymizingRumenSerializer(statePool,getConf()));
  outMapper.registerModule(module);
  outFactory=outMapper.getJsonFactory();
}
