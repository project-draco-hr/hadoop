{
  statistics.incrementWriteOps(1);
  storageStatistics.incrementOpCounter(OpType.CREATE);
  Path absF=fixRelativePart(f);
  return new FileSystemLinkResolver<HdfsDataOutputStream>(){
    @Override public HdfsDataOutputStream doCall(    final Path p) throws IOException {
      final DFSOutputStream out=dfs.create(getPathName(f),permission,overwrite ? EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE) : EnumSet.of(CreateFlag.CREATE),true,replication,blockSize,progress,bufferSize,null,favoredNodes);
      return dfs.createWrappedOutputStream(out,statistics);
    }
    @Override public HdfsDataOutputStream next(    final FileSystem fs,    final Path p) throws IOException {
      if (fs instanceof DistributedFileSystem) {
        DistributedFileSystem myDfs=(DistributedFileSystem)fs;
        return myDfs.create(p,permission,overwrite,bufferSize,replication,blockSize,progress,favoredNodes);
      }
      throw new UnsupportedOperationException("Cannot create with" + " favoredNodes through a symlink to a non-DistributedFileSystem: " + f + " -> "+ p);
    }
  }
.resolve(this,absF);
}
