{
  statistics.incrementReadOps(1);
  storageStatistics.incrementOpCounter(OpType.GET_FILE_LINK_STATUS);
  final Path absF=fixRelativePart(f);
  FileStatus status=new FileSystemLinkResolver<FileStatus>(){
    @Override public FileStatus doCall(    final Path p) throws IOException {
      HdfsFileStatus fi=dfs.getFileLinkInfo(getPathName(p));
      if (fi != null) {
        return fi.makeQualified(getUri(),p);
      }
 else {
        throw new FileNotFoundException("File does not exist: " + p);
      }
    }
    @Override public FileStatus next(    final FileSystem fs,    final Path p) throws IOException {
      return fs.getFileLinkStatus(p);
    }
  }
.resolve(this,absF);
  if (status.isSymlink()) {
    Path targetQual=FSLinkResolver.qualifySymlinkTarget(this.getUri(),status.getPath(),status.getSymlink());
    status.setSymlink(targetQual);
  }
  return status;
}
