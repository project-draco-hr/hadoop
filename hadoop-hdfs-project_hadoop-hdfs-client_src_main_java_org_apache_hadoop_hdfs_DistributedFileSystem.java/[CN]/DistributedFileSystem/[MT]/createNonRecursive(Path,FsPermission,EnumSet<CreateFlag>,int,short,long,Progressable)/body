{
  statistics.incrementWriteOps(1);
  if (flag.contains(CreateFlag.OVERWRITE)) {
    flag.add(CreateFlag.CREATE);
  }
  Path absF=fixRelativePart(f);
  return new FileSystemLinkResolver<FSDataOutputStream>(){
    @Override public FSDataOutputStream doCall(    final Path p) throws IOException, UnresolvedLinkException {
      final DFSOutputStream dfsos=dfs.create(getPathName(p),permission,flag,false,replication,blockSize,progress,bufferSize,null);
      return dfs.createWrappedOutputStream(dfsos,statistics);
    }
    @Override public FSDataOutputStream next(    final FileSystem fs,    final Path p) throws IOException {
      return fs.createNonRecursive(p,permission,flag,bufferSize,replication,blockSize,progress);
    }
  }
.resolve(this,absF);
}
