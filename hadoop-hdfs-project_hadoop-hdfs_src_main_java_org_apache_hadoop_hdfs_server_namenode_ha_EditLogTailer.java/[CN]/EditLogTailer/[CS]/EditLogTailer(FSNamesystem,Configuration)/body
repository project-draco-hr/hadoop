{
  this.tailerThread=new EditLogTailerThread();
  this.conf=conf;
  this.namesystem=namesystem;
  this.editLog=namesystem.getEditLog();
  lastLoadTimeMs=monotonicNow();
  logRollPeriodMs=conf.getInt(DFSConfigKeys.DFS_HA_LOGROLL_PERIOD_KEY,DFSConfigKeys.DFS_HA_LOGROLL_PERIOD_DEFAULT) * 1000;
  List<RemoteNameNodeInfo> nns=Collections.emptyList();
  if (logRollPeriodMs >= 0) {
    try {
      nns=RemoteNameNodeInfo.getRemoteNameNodes(conf);
    }
 catch (    IOException e) {
      throw new IllegalArgumentException("Remote NameNodes not correctly configured!",e);
    }
    for (    RemoteNameNodeInfo info : nns) {
      InetSocketAddress ipc=NameNode.getServiceAddress(info.getConfiguration(),true);
      Preconditions.checkArgument(ipc.getPort() > 0,"Active NameNode must have an IPC port configured. " + "Got address '%s'",ipc);
      info.setIpcAddress(ipc);
    }
    LOG.info("Will roll logs on active node every " + (logRollPeriodMs / 1000) + " seconds.");
  }
 else {
    LOG.info("Not going to trigger log rolls on active node because " + DFSConfigKeys.DFS_HA_LOGROLL_PERIOD_KEY + " is negative.");
  }
  sleepTimeMs=conf.getInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_DEFAULT) * 1000;
  rollEditsTimeoutMs=conf.getInt(DFSConfigKeys.DFS_HA_TAILEDITS_ROLLEDITS_TIMEOUT_KEY,DFSConfigKeys.DFS_HA_TAILEDITS_ROLLEDITS_TIMEOUT_DEFAULT) * 1000;
  rollEditsRpcExecutor=Executors.newSingleThreadExecutor(new ThreadFactoryBuilder().setDaemon(true).build());
  maxRetries=conf.getInt(DFSConfigKeys.DFS_HA_TAILEDITS_ALL_NAMESNODES_RETRY_KEY,DFSConfigKeys.DFS_HA_TAILEDITS_ALL_NAMESNODES_RETRY_DEFAULT);
  if (maxRetries <= 0) {
    LOG.error("Specified a non-positive number of retries for the number of retries for the " + "namenode connection when manipulating the edit log (" + DFSConfigKeys.DFS_HA_TAILEDITS_ALL_NAMESNODES_RETRY_KEY + "), setting to default: "+ DFSConfigKeys.DFS_HA_TAILEDITS_ALL_NAMESNODES_RETRY_DEFAULT);
    maxRetries=DFSConfigKeys.DFS_HA_TAILEDITS_ALL_NAMESNODES_RETRY_DEFAULT;
  }
  inProgressOk=conf.getBoolean(DFSConfigKeys.DFS_HA_TAILEDITS_INPROGRESS_KEY,DFSConfigKeys.DFS_HA_TAILEDITS_INPROGRESS_DEFAULT);
  nnCount=nns.size();
  this.nnLookup=Iterators.cycle(nns);
  LOG.debug("logRollPeriodMs=" + logRollPeriodMs + " sleepTime="+ sleepTimeMs);
}
