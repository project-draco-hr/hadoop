{
  MiniMRCluster mr=null;
  try {
    mr=new MiniMRCluster(2,"file:///",3);
    mr.setInlineCleanupThreads();
    TestMiniMRWithDFS.runPI(mr,mr.createJobConf());
    JobConf job=mr.createJobConf();
    TestResult ret=MRCaching.launchMRCache(TEST_ROOT_DIR + "/wc/input",TEST_ROOT_DIR + "/wc/output",TEST_ROOT_DIR + "/cachedir",job,"The quick brown fox\n" + "has many silly\n" + "red fox sox\n");
    assertTrue("Failed test archives not matching",ret.isOutputOk);
    JobClient client=new JobClient(job);
    JobID jobid=ret.job.getID();
    TaskReport[] reports;
    reports=client.getSetupTaskReports(jobid);
    assertEquals("number of setups",2,reports.length);
    reports=client.getMapTaskReports(jobid);
    assertEquals("number of maps",1,reports.length);
    reports=client.getReduceTaskReports(jobid);
    assertEquals("number of reduces",1,reports.length);
    reports=client.getCleanupTaskReports(jobid);
    assertEquals("number of cleanups",2,reports.length);
    Counters counters=ret.job.getCounters();
    assertEquals("number of map inputs",3,counters.getCounter(TaskCounter.MAP_INPUT_RECORDS));
    assertEquals("number of reduce outputs",9,counters.getCounter(TaskCounter.REDUCE_OUTPUT_RECORDS));
    runCustomFormats(mr);
    runSecondarySort(mr.createJobConf());
  }
  finally {
    if (mr != null) {
      mr.shutdown();
    }
  }
}
