{
  int groupSize=dataBlkNum + parityBlkNum;
  long numBytes=CELLSIZE * dataBlkNum;
  UnderReplicatedBlocks queues=new UnderReplicatedBlocks();
  BlockInfo block1=genStripedBlockInfo(-100,numBytes);
  assertAdded(queues,block1,dataBlkNum,0,groupSize);
  assertEquals(1,queues.getUnderReplicatedBlockCount());
  assertEquals(1,queues.size());
  assertInLevel(queues,block1,UnderReplicatedBlocks.QUEUE_HIGHEST_PRIORITY);
  BlockInfo block2=genStripedBlockInfo(-200,numBytes);
  assertAdded(queues,block2,dataBlkNum + 1,0,groupSize);
  assertEquals(2,queues.getUnderReplicatedBlockCount());
  assertEquals(2,queues.size());
  assertInLevel(queues,block2,UnderReplicatedBlocks.QUEUE_VERY_UNDER_REPLICATED);
  BlockInfo block3=genStripedBlockInfo(-300,numBytes);
  assertAdded(queues,block3,dataBlkNum + 2,0,groupSize);
  assertEquals(3,queues.getUnderReplicatedBlockCount());
  assertEquals(3,queues.size());
  assertInLevel(queues,block3,UnderReplicatedBlocks.QUEUE_UNDER_REPLICATED);
  BlockInfo block_corrupt=genStripedBlockInfo(-400,numBytes);
  assertEquals(0,queues.getCorruptBlockSize());
  assertAdded(queues,block_corrupt,dataBlkNum - 1,0,groupSize);
  assertEquals(4,queues.size());
  assertEquals(3,queues.getUnderReplicatedBlockCount());
  assertEquals(1,queues.getCorruptBlockSize());
  assertInLevel(queues,block_corrupt,UnderReplicatedBlocks.QUEUE_WITH_CORRUPT_BLOCKS);
}
