{
  int groupSize=dataBlkNum + parityBlkNum;
  long numBytes=ecPolicy.getCellSize() * dataBlkNum;
  UnderReplicatedBlocks queues=new UnderReplicatedBlocks();
  int numUR=0;
  int numCorrupt=0;
  for (int i=0; dataBlkNum + i < groupSize; i++) {
    BlockInfo block=genStripedBlockInfo(-100 - 100 * i,numBytes);
    assertAdded(queues,block,dataBlkNum + i,0,groupSize);
    numUR++;
    assertEquals(numUR,queues.getUnderReplicatedBlockCount());
    assertEquals(numUR + numCorrupt,queues.size());
    if (i == 0) {
      assertInLevel(queues,block,UnderReplicatedBlocks.QUEUE_HIGHEST_PRIORITY);
    }
 else     if (i * 3 < parityBlkNum + 1) {
      assertInLevel(queues,block,UnderReplicatedBlocks.QUEUE_VERY_UNDER_REPLICATED);
    }
 else {
      assertInLevel(queues,block,UnderReplicatedBlocks.QUEUE_UNDER_REPLICATED);
    }
  }
  BlockInfo block_corrupt=genStripedBlockInfo(-10,numBytes);
  assertEquals(numCorrupt,queues.getCorruptBlockSize());
  assertAdded(queues,block_corrupt,dataBlkNum - 1,0,groupSize);
  numCorrupt++;
  assertEquals(numUR + numCorrupt,queues.size());
  assertEquals(numUR,queues.getUnderReplicatedBlockCount());
  assertEquals(numCorrupt,queues.getCorruptBlockSize());
  assertInLevel(queues,block_corrupt,UnderReplicatedBlocks.QUEUE_WITH_CORRUPT_BLOCKS);
}
