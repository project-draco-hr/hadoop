{
  final File TEST_DIR=GenericTestUtils.getTestDir("renameTest");
  assumeTrue(TEST_DIR.mkdirs());
  File nonExistentFile=new File(TEST_DIR,"nonexistent");
  File targetFile=new File(TEST_DIR,"target");
  try {
    NativeIO.renameTo(nonExistentFile,targetFile);
    Assert.fail();
  }
 catch (  NativeIOException e) {
    if (Path.WINDOWS) {
      Assert.assertEquals(String.format("The system cannot find the file specified.%n"),e.getMessage());
    }
 else {
      Assert.assertEquals(Errno.ENOENT,e.getErrno());
    }
  }
  File sourceFile=new File(TEST_DIR,"source");
  Assert.assertTrue(sourceFile.createNewFile());
  NativeIO.renameTo(sourceFile,sourceFile);
  NativeIO.renameTo(sourceFile,targetFile);
  sourceFile=new File(TEST_DIR,"source");
  Assert.assertTrue(sourceFile.createNewFile());
  File badTarget=new File(targetFile,"subdir");
  try {
    NativeIO.renameTo(sourceFile,badTarget);
    Assert.fail();
  }
 catch (  NativeIOException e) {
    if (Path.WINDOWS) {
      Assert.assertEquals(String.format("The parameter is incorrect.%n"),e.getMessage());
    }
 else {
      Assert.assertEquals(Errno.ENOTDIR,e.getErrno());
    }
  }
  FileUtils.deleteQuietly(TEST_DIR);
}
