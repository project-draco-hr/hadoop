{
  assumeTrue(NativeIO.isAvailable());
  assumeTrue(Shell.LINUX);
  final File TEST_FILE=new File(new File(System.getProperty("test.build.data","build/test/data")),"testMlockFile");
  final int BUF_LEN=12289;
  byte buf[]=new byte[BUF_LEN];
  int bufSum=0;
  for (int i=0; i < buf.length; i++) {
    buf[i]=(byte)(i % 60);
    bufSum+=buf[i];
  }
  FileOutputStream fos=new FileOutputStream(TEST_FILE);
  try {
    fos.write(buf);
    fos.getChannel().force(true);
  }
  finally {
    fos.close();
  }
  FileInputStream fis=null;
  FileChannel channel=null;
  try {
    fis=new FileInputStream(TEST_FILE);
    channel=fis.getChannel();
    long fileSize=channel.size();
    MappedByteBuffer mapbuf=channel.map(MapMode.READ_ONLY,0,fileSize);
    NativeIO.POSIX.mlock(mapbuf,fileSize);
    int sum=0;
    for (int i=0; i < fileSize; i++) {
      sum+=mapbuf.get(i);
    }
    assertEquals("Expected sums to be equal",bufSum,sum);
    NativeIO.POSIX.munlock(mapbuf,fileSize);
  }
  finally {
    if (channel != null) {
      channel.close();
    }
    if (fis != null) {
      fis.close();
    }
  }
}
