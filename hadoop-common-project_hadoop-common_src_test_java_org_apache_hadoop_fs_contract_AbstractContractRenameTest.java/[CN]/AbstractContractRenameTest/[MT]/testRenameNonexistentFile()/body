{
  describe("rename a file into a new file in the same directory");
  Path missing=path("testRenameNonexistentFileSrc");
  Path target=path("testRenameNonexistentFileDest");
  boolean renameReturnsFalseOnFailure=isSupported(ContractOptions.RENAME_RETURNS_FALSE_IF_SOURCE_MISSING);
  mkdirs(missing.getParent());
  try {
    boolean renamed=rename(missing,target);
    if (!renameReturnsFalseOnFailure) {
      String destDirLS=generateAndLogErrorListing(missing,target);
      fail("expected rename(" + missing + ", "+ target+ " ) to fail,"+ " got a result of "+ renamed+ " and a destination directory of "+ destDirLS);
    }
 else {
      getLog().warn("Rename returned {} renaming a nonexistent file",renamed);
      assertFalse("Renaming a missing file returned true",renamed);
    }
  }
 catch (  FileNotFoundException e) {
    if (renameReturnsFalseOnFailure) {
      ContractTestUtils.fail("Renaming a missing file unexpectedly threw an exception",e);
    }
    handleExpectedException(e);
  }
catch (  IOException e) {
    handleRelaxedException("rename nonexistent file","FileNotFoundException",e);
  }
  assertPathDoesNotExist("rename nonexistent file created a destination file",target);
}
