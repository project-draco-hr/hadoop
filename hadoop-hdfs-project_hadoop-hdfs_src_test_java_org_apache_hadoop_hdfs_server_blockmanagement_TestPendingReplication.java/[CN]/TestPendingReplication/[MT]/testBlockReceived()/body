{
  final Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,1024);
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(DATANODE_COUNT).build();
    cluster.waitActive();
    DistributedFileSystem hdfs=cluster.getFileSystem();
    FSNamesystem fsn=cluster.getNamesystem();
    BlockManager blkManager=fsn.getBlockManager();
    final String file="/tmp.txt";
    final Path filePath=new Path(file);
    short replFactor=1;
    DFSTestUtil.createFile(hdfs,filePath,1024L,replFactor,0);
    ArrayList<DataNode> datanodes=cluster.getDataNodes();
    for (int i=0; i < DATANODE_COUNT; i++) {
      DataNodeTestUtils.setHeartbeatsDisabledForTests(datanodes.get(i),true);
    }
    hdfs.setReplication(filePath,(short)DATANODE_COUNT);
    BlockManagerTestUtil.computeAllPendingWork(blkManager);
    assertEquals(1,blkManager.pendingReplications.size());
    INodeFile fileNode=fsn.getFSDirectory().getINode4Write(file).asFile();
    BlockInfo[] blocks=fileNode.getBlocks();
    assertEquals(DATANODE_COUNT - 1,blkManager.pendingReplications.getNumReplicas(blocks[0]));
    LocatedBlock locatedBlock=hdfs.getClient().getLocatedBlocks(file,0).get(0);
    DatanodeInfo existingDn=(locatedBlock.getLocations())[0];
    int reportDnNum=0;
    String poolId=cluster.getNamesystem().getBlockPoolId();
    for (int i=0; i < DATANODE_COUNT && reportDnNum < 2; i++) {
      if (!datanodes.get(i).getDatanodeId().equals(existingDn)) {
        DatanodeRegistration dnR=datanodes.get(i).getDNRegistrationForBP(poolId);
        StorageReceivedDeletedBlocks[] report={new StorageReceivedDeletedBlocks("Fake-storage-ID-Ignored",new ReceivedDeletedBlockInfo[]{new ReceivedDeletedBlockInfo(blocks[0],BlockStatus.RECEIVED_BLOCK,"")})};
        cluster.getNameNodeRpc().blockReceivedAndDeleted(dnR,poolId,report);
        reportDnNum++;
      }
    }
    assertEquals(DATANODE_COUNT - 3,blkManager.pendingReplications.getNumReplicas(blocks[0]));
    for (int i=0; i < DATANODE_COUNT && reportDnNum < 2; i++) {
      if (!datanodes.get(i).getDatanodeId().equals(existingDn)) {
        DatanodeRegistration dnR=datanodes.get(i).getDNRegistrationForBP(poolId);
        StorageReceivedDeletedBlocks[] report={new StorageReceivedDeletedBlocks("Fake-storage-ID-Ignored",new ReceivedDeletedBlockInfo[]{new ReceivedDeletedBlockInfo(blocks[0],BlockStatus.RECEIVED_BLOCK,"")})};
        cluster.getNameNodeRpc().blockReceivedAndDeleted(dnR,poolId,report);
        reportDnNum++;
      }
    }
    assertEquals(DATANODE_COUNT - 3,blkManager.pendingReplications.getNumReplicas(blocks[0]));
    for (int i=0; i < DATANODE_COUNT; i++) {
      DataNodeTestUtils.setHeartbeatsDisabledForTests(datanodes.get(i),false);
      DataNodeTestUtils.triggerHeartbeat(datanodes.get(i));
    }
    Thread.sleep(5000);
    assertEquals(0,blkManager.pendingReplications.size());
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
