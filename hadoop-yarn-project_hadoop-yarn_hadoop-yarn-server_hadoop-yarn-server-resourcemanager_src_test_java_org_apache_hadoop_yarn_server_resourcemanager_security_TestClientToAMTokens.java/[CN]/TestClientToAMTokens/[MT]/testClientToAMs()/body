{
  final Configuration conf=new Configuration();
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  UserGroupInformation.setConfiguration(conf);
  ContainerManagementProtocol containerManager=mock(ContainerManagementProtocol.class);
  StartContainersResponse mockResponse=mock(StartContainersResponse.class);
  when(containerManager.startContainers((StartContainersRequest)any())).thenReturn(mockResponse);
  final DrainDispatcher dispatcher=new DrainDispatcher();
  MockRM rm=new MockRMWithCustomAMLauncher(conf,containerManager){
    protected ClientRMService createClientRMService(){
      return new ClientRMService(this.rmContext,scheduler,this.rmAppManager,this.applicationACLsManager,this.rmDTSecretManager);
    }
    @Override protected Dispatcher createDispatcher(){
      return dispatcher;
    }
    @Override protected void doSecureLogin() throws IOException {
    }
  }
;
  rm.start();
  RMApp app=rm.submitApp(1024);
  MockNM nm1=rm.registerNode("localhost:1234",3072);
  nm1.nodeHeartbeat(true);
  dispatcher.await();
  nm1.nodeHeartbeat(true);
  dispatcher.await();
  GetApplicationReportRequest request=Records.newRecord(GetApplicationReportRequest.class);
  request.setApplicationId(app.getApplicationId());
  GetApplicationReportResponse reportResponse=rm.getClientRMService().getApplicationReport(request);
  ApplicationReport appReport=reportResponse.getApplicationReport();
  org.apache.hadoop.yarn.api.records.Token clientToAMToken=appReport.getClientToAMToken();
  ApplicationAttemptId appAttempt=app.getCurrentAppAttempt().getAppAttemptId();
  final MockAM mockAM=new MockAM(rm.getRMContext(),rm.getApplicationMasterService(),app.getCurrentAppAttempt().getAppAttemptId());
  UserGroupInformation appUgi=UserGroupInformation.createRemoteUser(appAttempt.toString());
  RegisterApplicationMasterResponse response=appUgi.doAs(new PrivilegedAction<RegisterApplicationMasterResponse>(){
    @Override public RegisterApplicationMasterResponse run(){
      RegisterApplicationMasterResponse response=null;
      try {
        response=mockAM.registerAppAttempt();
      }
 catch (      Exception e) {
        Assert.fail("Exception was not expected");
      }
      return response;
    }
  }
);
  Assert.assertNotNull(response.getClientToAMTokenMasterKey());
  Assert.assertTrue(response.getClientToAMTokenMasterKey().array().length > 0);
  ApplicationAttemptId appAttemptId=app.getAppAttempts().keySet().iterator().next();
  Assert.assertNotNull(appAttemptId);
  final CustomAM am=new CustomAM(appAttemptId,response.getClientToAMTokenMasterKey().array());
  am.init(conf);
  am.start();
  SecurityUtil.setSecurityInfoProviders(new CustomSecurityInfo());
  try {
    CustomProtocol client=(CustomProtocol)RPC.getProxy(CustomProtocol.class,1L,am.address,conf);
    client.ping();
    fail("Access by unauthenticated user should fail!!");
  }
 catch (  Exception e) {
    Assert.assertFalse(am.pinged);
  }
  UserGroupInformation ugi=UserGroupInformation.createRemoteUser("me");
  Token<ClientToAMTokenIdentifier> token=ConverterUtils.convertFromYarn(clientToAMToken,am.address);
  ClientToAMTokenIdentifier maliciousID=new ClientToAMTokenIdentifier(BuilderUtils.newApplicationAttemptId(BuilderUtils.newApplicationId(app.getApplicationId().getClusterTimestamp(),42),43));
  Token<ClientToAMTokenIdentifier> maliciousToken=new Token<ClientToAMTokenIdentifier>(maliciousID.getBytes(),token.getPassword(),token.getKind(),token.getService());
  ugi.addToken(maliciousToken);
  try {
    ugi.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try {
          CustomProtocol client=(CustomProtocol)RPC.getProxy(CustomProtocol.class,1L,am.address,conf);
          client.ping();
          fail("Connection initiation with illegally modified " + "tokens is expected to fail.");
          return null;
        }
 catch (        YarnException ex) {
          fail("Cannot get a YARN remote exception as " + "it will indicate RPC success");
          throw ex;
        }
      }
    }
);
  }
 catch (  Exception e) {
    Assert.assertEquals(RemoteException.class.getName(),e.getClass().getName());
    e=((RemoteException)e).unwrapRemoteException();
    Assert.assertEquals(SaslException.class.getCanonicalName(),e.getClass().getCanonicalName());
    Assert.assertTrue(e.getMessage().contains("DIGEST-MD5: digest response format violation. " + "Mismatched response."));
    Assert.assertFalse(am.pinged);
  }
  ugi=UserGroupInformation.createRemoteUser("me");
  ugi.addToken(token);
  ugi.doAs(new PrivilegedExceptionAction<Void>(){
    @Override public Void run() throws Exception {
      CustomProtocol client=(CustomProtocol)RPC.getProxy(CustomProtocol.class,1L,am.address,conf);
      client.ping();
      Assert.assertTrue(am.pinged);
      return null;
    }
  }
);
}
