{
  Token<ClientToAMTokenIdentifier> maliciousToken=new Token<ClientToAMTokenIdentifier>(maliciousID.getBytes(),token.getPassword(),token.getKind(),token.getService());
  ugi.addToken(maliciousToken);
  try {
    ugi.doAs(new PrivilegedExceptionAction<Void>(){
      @Override public Void run() throws Exception {
        try {
          CustomProtocol client=(CustomProtocol)RPC.getProxy(CustomProtocol.class,1L,am.address,conf);
          client.ping();
          fail("Connection initiation with illegally modified " + "tokens is expected to fail.");
          return null;
        }
 catch (        YarnException ex) {
          fail("Cannot get a YARN remote exception as " + "it will indicate RPC success");
          throw ex;
        }
      }
    }
);
  }
 catch (  Exception e) {
    Assert.assertEquals(RemoteException.class.getName(),e.getClass().getName());
    e=((RemoteException)e).unwrapRemoteException();
    Assert.assertEquals(SaslException.class.getCanonicalName(),e.getClass().getCanonicalName());
    Assert.assertTrue(e.getMessage().contains("DIGEST-MD5: digest response format violation. " + "Mismatched response."));
    Assert.assertFalse(am.pinged);
  }
}
