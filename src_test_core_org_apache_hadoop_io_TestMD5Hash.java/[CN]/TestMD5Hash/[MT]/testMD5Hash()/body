{
  MD5Hash md5Hash=getTestHash();
  final MD5Hash md5Hash00=new MD5Hash(D00);
  final MD5Hash md5HashFF=new MD5Hash(DFF);
  MD5Hash orderedHash=new MD5Hash(new byte[]{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16});
  MD5Hash backwardHash=new MD5Hash(new byte[]{-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16});
  MD5Hash closeHash1=new MD5Hash(new byte[]{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
  MD5Hash closeHash2=new MD5Hash(new byte[]{-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0});
  TestWritable.testWritable(md5Hash);
  TestWritable.testWritable(md5Hash00);
  TestWritable.testWritable(md5HashFF);
  assertEquals(md5Hash,md5Hash);
  assertEquals(md5Hash00,md5Hash00);
  assertEquals(md5HashFF,md5HashFF);
  assertTrue(md5Hash.compareTo(md5Hash) == 0);
  assertTrue(md5Hash00.compareTo(md5Hash) < 0);
  assertTrue(md5HashFF.compareTo(md5Hash) > 0);
  assertEquals(md5Hash,new MD5Hash(md5Hash.toString()));
  assertEquals(md5Hash00,new MD5Hash(md5Hash00.toString()));
  assertEquals(md5HashFF,new MD5Hash(md5HashFF.toString()));
  assertEquals(0x01020304,orderedHash.quarterDigest());
  assertEquals(0xfffefdfc,backwardHash.quarterDigest());
  assertEquals(0x0102030405060708L,orderedHash.halfDigest());
  assertEquals(0xfffefdfcfbfaf9f8L,backwardHash.halfDigest());
  assertTrue("hash collision",closeHash1.hashCode() != closeHash2.hashCode());
  Thread t1=new Thread(){
    public void run(){
      for (int i=0; i < 100; i++) {
        MD5Hash hash=new MD5Hash(DFF);
        assertEquals(hash,md5HashFF);
      }
    }
  }
;
  Thread t2=new Thread(){
    public void run(){
      for (int i=0; i < 100; i++) {
        MD5Hash hash=new MD5Hash(D00);
        assertEquals(hash,md5Hash00);
      }
    }
  }
;
  t1.start();
  t2.start();
  t1.join();
  t2.join();
}
