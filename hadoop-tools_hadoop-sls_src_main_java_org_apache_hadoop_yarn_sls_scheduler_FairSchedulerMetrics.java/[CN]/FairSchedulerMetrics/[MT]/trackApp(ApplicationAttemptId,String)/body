{
  super.trackApp(appAttemptId,oldAppId);
  FairScheduler fair=(FairScheduler)scheduler;
  final FSAppAttempt app=fair.getSchedulerApp(appAttemptId);
  metrics.register("variable.app." + oldAppId + ".demand.memory",new Gauge<Long>(){
    @Override public Long getValue(){
      return app.getDemand().getMemorySize();
    }
  }
);
  metrics.register("variable.app." + oldAppId + ".demand.vcores",new Gauge<Integer>(){
    @Override public Integer getValue(){
      return app.getDemand().getVirtualCores();
    }
  }
);
  metrics.register("variable.app." + oldAppId + ".usage.memory",new Gauge<Long>(){
    @Override public Long getValue(){
      return app.getResourceUsage().getMemorySize();
    }
  }
);
  metrics.register("variable.app." + oldAppId + ".usage.vcores",new Gauge<Integer>(){
    @Override public Integer getValue(){
      return app.getResourceUsage().getVirtualCores();
    }
  }
);
  metrics.register("variable.app." + oldAppId + ".minshare.memory",new Gauge<Long>(){
    @Override public Long getValue(){
      return app.getMinShare().getMemorySize();
    }
  }
);
  metrics.register("variable.app." + oldAppId + ".minshare.vcores",new Gauge<Long>(){
    @Override public Long getValue(){
      return app.getMinShare().getMemorySize();
    }
  }
);
  metrics.register("variable.app." + oldAppId + ".maxshare.memory",new Gauge<Long>(){
    @Override public Long getValue(){
      return Math.min(app.getMaxShare().getMemorySize(),totalMemoryMB);
    }
  }
);
  metrics.register("variable.app." + oldAppId + ".maxshare.vcores",new Gauge<Integer>(){
    @Override public Integer getValue(){
      return Math.min(app.getMaxShare().getVirtualCores(),totalVCores);
    }
  }
);
  metrics.register("variable.app." + oldAppId + ".fairshare.memory",new Gauge<Integer>(){
    @Override public Integer getValue(){
      return app.getFairShare().getVirtualCores();
    }
  }
);
  metrics.register("variable.app." + oldAppId + ".fairshare.vcores",new Gauge<Integer>(){
    @Override public Integer getValue(){
      return app.getFairShare().getVirtualCores();
    }
  }
);
}
