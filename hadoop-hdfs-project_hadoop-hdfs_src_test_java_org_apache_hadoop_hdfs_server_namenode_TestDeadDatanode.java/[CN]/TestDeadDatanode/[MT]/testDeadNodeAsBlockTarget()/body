{
  Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,500);
  conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1L);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  cluster.waitActive();
  String poolId=cluster.getNamesystem().getBlockPoolId();
  DataNode dn=cluster.getDataNodes().get(0);
  DatanodeRegistration reg=DataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(0),poolId);
  BlockManager bm=cluster.getNamesystem().getBlockManager();
  DatanodeManager dm=bm.getDatanodeManager();
  Node clientNode=dm.getDatanode(reg);
  DFSTestUtil.waitForDatanodeState(cluster,reg.getDatanodeUuid(),true,20000);
  dn.shutdown();
  DFSTestUtil.waitForDatanodeState(cluster,reg.getDatanodeUuid(),false,20000);
  DatanodeStorageInfo[] results=bm.chooseTarget4NewBlock("/hello",3,clientNode,new HashSet<Node>(),256 * 1024 * 1024L,null,(byte)7,false,null);
  for (  DatanodeStorageInfo datanodeStorageInfo : results) {
    assertFalse("Dead node should not be choosen",datanodeStorageInfo.getDatanodeDescriptor().equals(clientNode));
  }
}
