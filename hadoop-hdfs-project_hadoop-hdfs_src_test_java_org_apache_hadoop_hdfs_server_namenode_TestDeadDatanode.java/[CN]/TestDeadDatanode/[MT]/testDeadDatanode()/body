{
  Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,500);
  conf.setLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,1L);
  cluster=new MiniDFSCluster.Builder(conf).build();
  cluster.waitActive();
  String poolId=cluster.getNamesystem().getBlockPoolId();
  DataNode dn=cluster.getDataNodes().get(0);
  DatanodeRegistration reg=DataNodeTestUtils.getDNRegistrationForBP(cluster.getDataNodes().get(0),poolId);
  waitForDatanodeState(reg.getStorageID(),true,20000);
  dn.shutdown();
  waitForDatanodeState(reg.getStorageID(),false,20000);
  DatanodeProtocol dnp=cluster.getNameNodeRpc();
  ReceivedDeletedBlockInfo[] blocks={new ReceivedDeletedBlockInfo(new Block(0),ReceivedDeletedBlockInfo.BlockStatus.RECEIVED_BLOCK,null)};
  StorageReceivedDeletedBlocks[] storageBlocks={new StorageReceivedDeletedBlocks(reg.getStorageID(),blocks)};
  try {
    dnp.blockReceivedAndDeleted(reg,poolId,storageBlocks);
    fail("Expected IOException is not thrown");
  }
 catch (  IOException ex) {
  }
  StorageBlockReport[] report={new StorageBlockReport(new DatanodeStorage(reg.getStorageID()),new long[]{0L,0L,0L})};
  try {
    dnp.blockReport(reg,poolId,report);
    fail("Expected IOException is not thrown");
  }
 catch (  IOException ex) {
  }
  StorageReport[] rep={new StorageReport(reg.getStorageID(),false,0,0,0,0)};
  DatanodeCommand[] cmd=dnp.sendHeartbeat(reg,rep,0,0,0).getCommands();
  assertEquals(1,cmd.length);
  assertEquals(cmd[0].getAction(),RegisterCommand.REGISTER.getAction());
}
