{
  final int datanodeCount=2;
  final int interval=1;
  Configuration conf=new HdfsConfiguration();
  conf.set(DFSConfigKeys.DFS_METRICS_PERCENTILES_INTERVALS_KEY,"" + interval);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(datanodeCount).build();
  try {
    cluster.waitActive();
    FileSystem fs=cluster.getFileSystem();
    Path testFile=new Path("/testRoundTripAckMetric.txt");
    FSDataOutputStream fsout=fs.create(testFile,(short)datanodeCount);
    DFSOutputStream dout=(DFSOutputStream)fsout.getWrappedStream();
    dout.setChunksPerPacket(5);
    dout.setArtificialSlowdown(3000);
    fsout.write(new byte[10000]);
    DatanodeInfo[] pipeline=null;
    int count=0;
    while (pipeline == null && count < 5) {
      pipeline=dout.getPipeline();
      System.out.println("Waiting for pipeline to be created.");
      Thread.sleep(1000);
      count++;
    }
    DatanodeInfo headInfo=pipeline[0];
    DataNode headNode=null;
    for (    DataNode datanode : cluster.getDataNodes()) {
      if (datanode.getDatanodeId().equals(headInfo)) {
        headNode=datanode;
        break;
      }
    }
    assertNotNull("Could not find the head of the datanode write pipeline",headNode);
    Thread.sleep((interval + 1) * 1000);
    MetricsRecordBuilder dnMetrics=getMetrics(headNode.getMetrics().name());
    assertTrue("Expected non-zero number of acks",getLongCounter("PacketAckRoundTripTimeNanosNumOps",dnMetrics) > 0);
    assertQuantileGauges("PacketAckRoundTripTimeNanos" + interval + "s",dnMetrics);
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
