{
  Path subDir1=new Path("dir.1");
  Path file1=new Path("dir.1/foo.1");
  kosmosFileSystem.mkdirs(baseDir);
  assertTrue(kosmosFileSystem.isDirectory(baseDir));
  kosmosFileSystem.setWorkingDirectory(baseDir);
  kosmosFileSystem.mkdirs(subDir1);
  FSDataOutputStream s1=kosmosFileSystem.create(file1,true,4096,(short)1,(long)4096,null);
  int bufsz=4096;
  byte[] data=new byte[bufsz];
  for (int i=0; i < data.length; i++)   data[i]=(byte)(i % 16);
  s1.write(32);
  s1.write(32);
  s1.write(32);
  s1.write(32);
  s1.write(data,0,data.length);
  s1.close();
  FSDataInputStream s2=kosmosFileSystem.open(file1,4096);
  int v;
  long nread=0;
  v=s2.read();
  assertEquals(v,32);
  v=s2.read();
  assertEquals(v,32);
  v=s2.read();
  assertEquals(v,32);
  v=s2.read();
  assertEquals(v,32);
  assertEquals(s2.available(),data.length);
  byte[] buf=new byte[bufsz];
  s2.read(buf,0,buf.length);
  nread=s2.getPos();
  for (int i=0; i < data.length; i++)   assertEquals(data[i],buf[i]);
  assertEquals(s2.available(),0);
  s2.close();
  try {
    s1=kosmosFileSystem.append(file1);
    for (int i=0; i < data.length; i++)     data[i]=(byte)(i % 17);
    s1.write(data,0,data.length);
    s1.close();
    s2=kosmosFileSystem.open(file1,4096);
    s2.seek(nread);
    s2.read(buf,0,buf.length);
    for (int i=0; i < data.length; i++)     assertEquals(data[i],buf[i]);
    s2.close();
  }
 catch (  Exception e) {
    System.out.println("append isn't supported by the underlying fs");
  }
  kosmosFileSystem.delete(file1,true);
  assertFalse(kosmosFileSystem.exists(file1));
  kosmosFileSystem.delete(subDir1,true);
  assertFalse(kosmosFileSystem.exists(subDir1));
  kosmosFileSystem.delete(baseDir,true);
  assertFalse(kosmosFileSystem.exists(baseDir));
}
