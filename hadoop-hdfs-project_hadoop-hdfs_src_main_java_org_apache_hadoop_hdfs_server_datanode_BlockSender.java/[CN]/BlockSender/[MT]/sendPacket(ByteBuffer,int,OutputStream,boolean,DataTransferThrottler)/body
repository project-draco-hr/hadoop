{
  int dataLen=(int)Math.min(endOffset - offset,(chunkSize * (long)maxChunks));
  int numChunks=numberOfChunks(dataLen);
  int checksumDataLen=numChunks * checksumSize;
  int packetLen=dataLen + checksumDataLen + 4;
  boolean lastDataPacket=offset + dataLen == endOffset && dataLen > 0;
  int headerLen=writePacketHeader(pkt,dataLen,packetLen);
  int headerOff=pkt.position() - headerLen;
  int checksumOff=pkt.position();
  byte[] buf=pkt.array();
  if (checksumSize > 0 && checksumIn != null) {
    readChecksum(buf,checksumOff,checksumDataLen);
    if (lastDataPacket && lastChunkChecksum != null) {
      int start=checksumOff + checksumDataLen - checksumSize;
      byte[] updatedChecksum=lastChunkChecksum.getChecksum();
      if (updatedChecksum != null) {
        System.arraycopy(updatedChecksum,0,buf,start,checksumSize);
      }
    }
  }
  int dataOff=checksumOff + checksumDataLen;
  if (!transferTo) {
    IOUtils.readFully(blockIn,buf,dataOff,dataLen);
    if (verifyChecksum) {
      verifyChecksum(buf,dataOff,dataLen,numChunks,checksumOff);
    }
  }
  try {
    if (transferTo) {
      SocketOutputStream sockOut=(SocketOutputStream)out;
      sockOut.write(buf,headerOff,dataOff - headerOff);
      FileChannel fileCh=((FileInputStream)blockIn).getChannel();
      LongWritable waitTime=new LongWritable();
      LongWritable transferTime=new LongWritable();
      sockOut.transferToFully(fileCh,blockInPosition,dataLen,waitTime,transferTime);
      datanode.metrics.addSendDataPacketBlockedOnNetworkNanos(waitTime.get());
      datanode.metrics.addSendDataPacketTransferNanos(transferTime.get());
      blockInPosition+=dataLen;
    }
 else {
      out.write(buf,headerOff,dataOff + dataLen - headerOff);
    }
  }
 catch (  IOException e) {
    if (e instanceof SocketTimeoutException) {
    }
 else {
      String ioem=e.getMessage();
      if (!ioem.startsWith("Broken pipe") && !ioem.startsWith("Connection reset")) {
        LOG.error("BlockSender.sendChunks() exception: ",e);
        datanode.blockScanner.addBlock(block,true);
      }
    }
    throw ioeToSocketException(e);
  }
  if (throttler != null) {
    throttler.throttle(packetLen);
  }
  return dataLen;
}
