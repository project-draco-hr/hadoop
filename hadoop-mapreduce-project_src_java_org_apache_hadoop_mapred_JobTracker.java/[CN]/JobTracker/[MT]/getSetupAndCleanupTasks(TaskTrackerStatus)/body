{
  int maxMapTasks=taskTracker.getMaxMapSlots();
  int maxReduceTasks=taskTracker.getMaxReduceSlots();
  int numMaps=taskTracker.countOccupiedMapSlots();
  int numReduces=taskTracker.countOccupiedReduceSlots();
  int numTaskTrackers=getClusterStatus().getTaskTrackers();
  int numUniqueHosts=getNumberOfUniqueHosts();
  boolean hasFailedUncleanTask=hasFailedUncleanTask(taskTracker);
  Task t=null;
synchronized (jobs) {
    if (numMaps < maxMapTasks) {
      for (Iterator<JobInProgress> it=jobs.values().iterator(); it.hasNext(); ) {
        JobInProgress job=it.next();
        t=job.obtainJobCleanupTask(taskTracker,numTaskTrackers,numUniqueHosts,true);
        if (t != null) {
          return Collections.singletonList(t);
        }
      }
      if (!hasFailedUncleanTask) {
        for (Iterator<JobInProgress> it=jobs.values().iterator(); it.hasNext(); ) {
          JobInProgress job=it.next();
          t=job.obtainTaskCleanupTask(taskTracker,true);
          if (t != null) {
            return Collections.singletonList(t);
          }
        }
      }
      for (Iterator<JobInProgress> it=jobs.values().iterator(); it.hasNext(); ) {
        JobInProgress job=it.next();
        t=job.obtainJobSetupTask(taskTracker,numTaskTrackers,numUniqueHosts,true);
        if (t != null) {
          return Collections.singletonList(t);
        }
      }
    }
    if (numReduces < maxReduceTasks) {
      for (Iterator<JobInProgress> it=jobs.values().iterator(); it.hasNext(); ) {
        JobInProgress job=it.next();
        t=job.obtainJobCleanupTask(taskTracker,numTaskTrackers,numUniqueHosts,false);
        if (t != null) {
          return Collections.singletonList(t);
        }
      }
      if (!hasFailedUncleanTask) {
        for (Iterator<JobInProgress> it=jobs.values().iterator(); it.hasNext(); ) {
          JobInProgress job=it.next();
          t=job.obtainTaskCleanupTask(taskTracker,false);
          if (t != null) {
            return Collections.singletonList(t);
          }
        }
      }
      for (Iterator<JobInProgress> it=jobs.values().iterator(); it.hasNext(); ) {
        JobInProgress job=it.next();
        t=job.obtainJobSetupTask(taskTracker,numTaskTrackers,numUniqueHosts,false);
        if (t != null) {
          return Collections.singletonList(t);
        }
      }
    }
  }
  return null;
}
