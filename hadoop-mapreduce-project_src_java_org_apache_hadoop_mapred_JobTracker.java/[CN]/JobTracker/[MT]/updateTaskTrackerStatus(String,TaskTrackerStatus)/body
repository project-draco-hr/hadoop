{
  TaskTracker tt=getTaskTracker(trackerName);
  TaskTrackerStatus oldStatus=(tt == null) ? null : tt.getStatus();
  if (oldStatus != null) {
    totalMaps-=oldStatus.countMapTasks();
    totalReduces-=oldStatus.countReduceTasks();
    occupiedMapSlots-=oldStatus.countOccupiedMapSlots();
    occupiedReduceSlots-=oldStatus.countOccupiedReduceSlots();
    getInstrumentation().decRunningMaps(oldStatus.countMapTasks());
    getInstrumentation().decRunningReduces(oldStatus.countReduceTasks());
    getInstrumentation().decOccupiedMapSlots(oldStatus.countOccupiedMapSlots());
    getInstrumentation().decOccupiedReduceSlots(oldStatus.countOccupiedReduceSlots());
    if (!faultyTrackers.isBlacklisted(oldStatus.getHost())) {
      int mapSlots=oldStatus.getMaxMapSlots();
      totalMapTaskCapacity-=mapSlots;
      int reduceSlots=oldStatus.getMaxReduceSlots();
      totalReduceTaskCapacity-=reduceSlots;
    }
    if (status == null) {
      taskTrackers.remove(trackerName);
      Integer numTaskTrackersInHost=uniqueHostsMap.get(oldStatus.getHost());
      if (numTaskTrackersInHost != null) {
        numTaskTrackersInHost--;
        if (numTaskTrackersInHost > 0) {
          uniqueHostsMap.put(oldStatus.getHost(),numTaskTrackersInHost);
        }
 else {
          uniqueHostsMap.remove(oldStatus.getHost());
        }
      }
    }
  }
  if (status != null) {
    totalMaps+=status.countMapTasks();
    totalReduces+=status.countReduceTasks();
    occupiedMapSlots+=status.countOccupiedMapSlots();
    occupiedReduceSlots+=status.countOccupiedReduceSlots();
    getInstrumentation().addRunningMaps(status.countMapTasks());
    getInstrumentation().addRunningReduces(status.countReduceTasks());
    getInstrumentation().addOccupiedMapSlots(status.countOccupiedMapSlots());
    getInstrumentation().addOccupiedReduceSlots(status.countOccupiedReduceSlots());
    if (!faultyTrackers.isBlacklisted(status.getHost())) {
      int mapSlots=status.getMaxMapSlots();
      totalMapTaskCapacity+=mapSlots;
      int reduceSlots=status.getMaxReduceSlots();
      totalReduceTaskCapacity+=reduceSlots;
    }
    boolean alreadyPresent=false;
    TaskTracker taskTracker=taskTrackers.get(trackerName);
    if (taskTracker != null) {
      alreadyPresent=true;
    }
 else {
      taskTracker=new TaskTracker(trackerName);
    }
    taskTracker.setStatus(status);
    taskTrackers.put(trackerName,taskTracker);
    if (LOG.isDebugEnabled()) {
      int runningMaps=0, runningReduces=0;
      int commitPendingMaps=0, commitPendingReduces=0;
      int unassignedMaps=0, unassignedReduces=0;
      int miscMaps=0, miscReduces=0;
      List<TaskStatus> taskReports=status.getTaskReports();
      for (Iterator<TaskStatus> it=taskReports.iterator(); it.hasNext(); ) {
        TaskStatus ts=it.next();
        boolean isMap=ts.getIsMap();
        TaskStatus.State state=ts.getRunState();
        if (state == TaskStatus.State.RUNNING) {
          if (isMap) {
            ++runningMaps;
          }
 else {
            ++runningReduces;
          }
        }
 else         if (state == TaskStatus.State.UNASSIGNED) {
          if (isMap) {
            ++unassignedMaps;
          }
 else {
            ++unassignedReduces;
          }
        }
 else         if (state == TaskStatus.State.COMMIT_PENDING) {
          if (isMap) {
            ++commitPendingMaps;
          }
 else {
            ++commitPendingReduces;
          }
        }
 else {
          if (isMap) {
            ++miscMaps;
          }
 else {
            ++miscReduces;
          }
        }
      }
      LOG.debug(trackerName + ": Status -" + " running(m) = "+ runningMaps+ " unassigned(m) = "+ unassignedMaps+ " commit_pending(m) = "+ commitPendingMaps+ " misc(m) = "+ miscMaps+ " running(r) = "+ runningReduces+ " unassigned(r) = "+ unassignedReduces+ " commit_pending(r) = "+ commitPendingReduces+ " misc(r) = "+ miscReduces);
    }
    if (!alreadyPresent) {
      Integer numTaskTrackersInHost=uniqueHostsMap.get(status.getHost());
      if (numTaskTrackersInHost == null) {
        numTaskTrackersInHost=0;
      }
      numTaskTrackersInHost++;
      uniqueHostsMap.put(status.getHost(),numTaskTrackersInHost);
    }
  }
  getInstrumentation().setMapSlots(totalMapTaskCapacity);
  getInstrumentation().setReduceSlots(totalReduceTaskCapacity);
  return oldStatus != null;
}
