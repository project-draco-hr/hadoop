{
  int retryDelay=firstRetryDelay;
  int n=retryCount;
  int minDelay=Math.min(500,retryDelay * 1000);
  Random rng=new Random(System.nanoTime());
  while (!stopping) {
    try {
      queue.consumeAll(this);
      refreshQueueSizeGauge();
      retryDelay=firstRetryDelay;
      n=retryCount;
      inError=false;
    }
 catch (    InterruptedException e) {
      LOG.info(name + " thread interrupted.");
    }
catch (    Exception e) {
      if (n > 0) {
        int retryWindow=Math.max(0,1000 / 2 * retryDelay - minDelay);
        int awhile=rng.nextInt(retryWindow) + minDelay;
        if (!inError) {
          LOG.error("Got sink exception, retry in " + awhile + "ms",e);
        }
        retryDelay*=retryBackoff;
        try {
          Thread.sleep(awhile);
        }
 catch (        InterruptedException e2) {
          LOG.info(name + " thread interrupted while waiting for retry",e2);
        }
        --n;
      }
 else {
        if (!inError) {
          LOG.error("Got sink exception and over retry limit, " + "suppressing further error messages",e);
        }
        queue.clear();
        refreshQueueSizeGauge();
        inError=true;
      }
    }
  }
}
