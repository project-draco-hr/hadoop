{
  InetAddress dnAddress=Server.getRemoteIp();
  if (dnAddress != null) {
    String hostname=dnAddress.getHostName();
    String ip=dnAddress.getHostAddress();
    if (!isNameResolved(dnAddress)) {
      LOG.warn("Unresolved datanode registration from " + ip);
      throw new DisallowedDatanodeException(nodeReg);
    }
    nodeReg.setIpAddr(ip);
    nodeReg.setPeerHostName(hostname);
  }
  try {
    nodeReg.setExportedKeys(blockManager.getBlockKeys());
    if (!hostFileManager.isIncluded(nodeReg)) {
      throw new DisallowedDatanodeException(nodeReg);
    }
    NameNode.stateChangeLog.info("BLOCK* registerDatanode: from " + nodeReg + " storage "+ nodeReg.getStorageID());
    DatanodeDescriptor nodeS=datanodeMap.get(nodeReg.getStorageID());
    DatanodeDescriptor nodeN=host2DatanodeMap.getDatanodeByXferAddr(nodeReg.getIpAddr(),nodeReg.getXferPort());
    if (nodeN != null && nodeN != nodeS) {
      NameNode.LOG.info("BLOCK* registerDatanode: " + nodeN);
      removeDatanode(nodeN);
      wipeDatanode(nodeN);
      nodeN=null;
    }
    if (nodeS != null) {
      if (nodeN == nodeS) {
        if (NameNode.stateChangeLog.isDebugEnabled()) {
          NameNode.stateChangeLog.debug("BLOCK* registerDatanode: " + "node restarted.");
        }
      }
 else {
        NameNode.stateChangeLog.info("BLOCK* registerDatanode: " + nodeS + " is replaced by "+ nodeReg+ " with the same storageID "+ nodeReg.getStorageID());
      }
      boolean success=false;
      try {
        getNetworkTopology().remove(nodeS);
        if (shouldCountVersion(nodeS)) {
          decrementVersionCount(nodeS.getSoftwareVersion());
        }
        nodeS.updateRegInfo(nodeReg);
        nodeS.setSoftwareVersion(nodeReg.getSoftwareVersion());
        nodeS.setDisallowed(false);
        nodeS.setNetworkLocation(resolveNetworkLocation(nodeS));
        getNetworkTopology().add(nodeS);
        heartbeatManager.register(nodeS);
        incrementVersionCount(nodeS.getSoftwareVersion());
        checkDecommissioning(nodeS);
        success=true;
      }
  finally {
        if (!success) {
          removeDatanode(nodeS);
          wipeDatanode(nodeS);
          countSoftwareVersions();
        }
      }
      return;
    }
    if ("".equals(nodeReg.getStorageID())) {
      nodeReg.setStorageID(newStorageID());
      if (NameNode.stateChangeLog.isDebugEnabled()) {
        NameNode.stateChangeLog.debug("BLOCK* NameSystem.registerDatanode: " + "new storageID " + nodeReg.getStorageID() + " assigned.");
      }
    }
    DatanodeDescriptor nodeDescr=new DatanodeDescriptor(nodeReg,NetworkTopology.DEFAULT_RACK);
    boolean success=false;
    try {
      nodeDescr.setNetworkLocation(resolveNetworkLocation(nodeDescr));
      networktopology.add(nodeDescr);
      nodeDescr.setSoftwareVersion(nodeReg.getSoftwareVersion());
      addDatanode(nodeDescr);
      checkDecommissioning(nodeDescr);
      heartbeatManager.addDatanode(nodeDescr);
      success=true;
      incrementVersionCount(nodeReg.getSoftwareVersion());
    }
  finally {
      if (!success) {
        removeDatanode(nodeDescr);
        wipeDatanode(nodeDescr);
        countSoftwareVersions();
      }
    }
  }
 catch (  InvalidTopologyException e) {
    List<String> invalidNodeNames=new ArrayList<String>(3);
    invalidNodeNames.add(nodeReg.getIpAddr());
    invalidNodeNames.add(nodeReg.getHostName());
    invalidNodeNames.add(nodeReg.getPeerHostName());
    dnsToSwitchMapping.reloadCachedMappings(invalidNodeNames);
    throw e;
  }
}
