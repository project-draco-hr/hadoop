{
  InetAddress dnAddress=Server.getRemoteIp();
  if (dnAddress != null) {
    String hostname=dnAddress.getHostName();
    String ip=dnAddress.getHostAddress();
    if (!isNameResolved(dnAddress)) {
      LOG.warn("Unresolved datanode registration from " + ip);
      throw new DisallowedDatanodeException(nodeReg);
    }
    nodeReg.setIpAddr(ip);
    nodeReg.setPeerHostName(hostname);
  }
  nodeReg.setExportedKeys(blockManager.getBlockKeys());
  if (!inHostsList(nodeReg)) {
    throw new DisallowedDatanodeException(nodeReg);
  }
  NameNode.stateChangeLog.info("BLOCK* registerDatanode: from " + nodeReg + " storage "+ nodeReg.getStorageID());
  DatanodeDescriptor nodeS=datanodeMap.get(nodeReg.getStorageID());
  DatanodeDescriptor nodeN=host2DatanodeMap.getDatanodeByXferAddr(nodeReg.getIpAddr(),nodeReg.getXferPort());
  if (nodeN != null && nodeN != nodeS) {
    NameNode.LOG.info("BLOCK* registerDatanode: " + nodeN);
    removeDatanode(nodeN);
    wipeDatanode(nodeN);
    nodeN=null;
  }
  if (nodeS != null) {
    if (nodeN == nodeS) {
      if (NameNode.stateChangeLog.isDebugEnabled()) {
        NameNode.stateChangeLog.debug("BLOCK* registerDatanode: " + "node restarted.");
      }
    }
 else {
      NameNode.stateChangeLog.info("BLOCK* registerDatanode: " + nodeS + " is replaced by "+ nodeReg+ " with the same storageID "+ nodeReg.getStorageID());
    }
    getNetworkTopology().remove(nodeS);
    nodeS.updateRegInfo(nodeReg);
    nodeS.setDisallowed(false);
    resolveNetworkLocation(nodeS);
    getNetworkTopology().add(nodeS);
    heartbeatManager.register(nodeS);
    checkDecommissioning(nodeS);
    return;
  }
  if ("".equals(nodeReg.getStorageID())) {
    nodeReg.setStorageID(newStorageID());
    if (NameNode.stateChangeLog.isDebugEnabled()) {
      NameNode.stateChangeLog.debug("BLOCK* NameSystem.registerDatanode: " + "new storageID " + nodeReg.getStorageID() + " assigned.");
    }
  }
  DatanodeDescriptor nodeDescr=new DatanodeDescriptor(nodeReg,NetworkTopology.DEFAULT_RACK);
  resolveNetworkLocation(nodeDescr);
  addDatanode(nodeDescr);
  checkDecommissioning(nodeDescr);
  heartbeatManager.addDatanode(nodeDescr);
}
