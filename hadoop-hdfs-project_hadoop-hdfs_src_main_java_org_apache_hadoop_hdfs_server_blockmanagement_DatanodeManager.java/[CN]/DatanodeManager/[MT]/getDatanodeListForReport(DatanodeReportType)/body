{
  final boolean listLiveNodes=type == DatanodeReportType.ALL || type == DatanodeReportType.LIVE;
  final boolean listDeadNodes=type == DatanodeReportType.ALL || type == DatanodeReportType.DEAD;
  final boolean listDecommissioningNodes=type == DatanodeReportType.ALL || type == DatanodeReportType.DECOMMISSIONING;
  ArrayList<DatanodeDescriptor> nodes;
  final HostFileManager.HostSet foundNodes=new HostFileManager.HostSet();
  final HostFileManager.HostSet includedNodes=hostFileManager.getIncludes();
  final HostFileManager.HostSet excludedNodes=hostFileManager.getExcludes();
synchronized (datanodeMap) {
    nodes=new ArrayList<DatanodeDescriptor>(datanodeMap.size());
    for (    DatanodeDescriptor dn : datanodeMap.values()) {
      final boolean isDead=isDatanodeDead(dn);
      final boolean isDecommissioning=dn.isDecommissionInProgress();
      if ((listLiveNodes && !isDead) || (listDeadNodes && isDead) || (listDecommissioningNodes && isDecommissioning)) {
        nodes.add(dn);
      }
      foundNodes.add(HostFileManager.resolvedAddressFromDatanodeID(dn));
    }
  }
  if (listDeadNodes) {
    for (    InetSocketAddress addr : includedNodes) {
      if (foundNodes.matchedBy(addr) || excludedNodes.match(addr)) {
        continue;
      }
      DatanodeDescriptor dn=new DatanodeDescriptor(new DatanodeID(addr.getAddress().getHostAddress(),addr.getHostName(),"",addr.getPort() == 0 ? defaultXferPort : addr.getPort(),defaultInfoPort,defaultInfoSecurePort,defaultIpcPort));
      setDatanodeDead(dn);
      nodes.add(dn);
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("getDatanodeListForReport with " + "includedNodes = " + hostFileManager.getIncludes() + ", excludedNodes = "+ hostFileManager.getExcludes()+ ", foundNodes = "+ foundNodes+ ", nodes = "+ nodes);
  }
  return nodes;
}
