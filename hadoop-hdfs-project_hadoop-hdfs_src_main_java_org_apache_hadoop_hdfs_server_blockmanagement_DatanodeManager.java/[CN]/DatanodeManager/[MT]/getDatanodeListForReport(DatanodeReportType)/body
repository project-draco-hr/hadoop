{
  boolean listLiveNodes=type == DatanodeReportType.ALL || type == DatanodeReportType.LIVE;
  boolean listDeadNodes=type == DatanodeReportType.ALL || type == DatanodeReportType.DEAD;
  ArrayList<DatanodeDescriptor> nodes=null;
  final MutableEntrySet foundNodes=new MutableEntrySet();
synchronized (datanodeMap) {
    nodes=new ArrayList<DatanodeDescriptor>(datanodeMap.size());
    Iterator<DatanodeDescriptor> it=datanodeMap.values().iterator();
    while (it.hasNext()) {
      DatanodeDescriptor dn=it.next();
      final boolean isDead=isDatanodeDead(dn);
      if ((isDead && listDeadNodes) || (!isDead && listLiveNodes)) {
        nodes.add(dn);
      }
      foundNodes.add(dn);
    }
  }
  if (listDeadNodes) {
    final EntrySet includedNodes=hostFileManager.getIncludes();
    final EntrySet excludedNodes=hostFileManager.getExcludes();
    for (    Entry entry : includedNodes) {
      if ((foundNodes.find(entry) == null) && (excludedNodes.find(entry) == null)) {
        DatanodeDescriptor dn=new DatanodeDescriptor(new DatanodeID(entry.getIpAddress(),entry.getPrefix(),"",entry.getPort() == 0 ? defaultXferPort : entry.getPort(),defaultInfoPort,defaultInfoSecurePort,defaultIpcPort));
        dn.setLastUpdate(0);
        nodes.add(dn);
      }
    }
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("getDatanodeListForReport with " + "includedNodes = " + hostFileManager.getIncludes() + ", excludedNodes = "+ hostFileManager.getExcludes()+ ", foundNodes = "+ foundNodes+ ", nodes = "+ nodes);
  }
  return nodes;
}
