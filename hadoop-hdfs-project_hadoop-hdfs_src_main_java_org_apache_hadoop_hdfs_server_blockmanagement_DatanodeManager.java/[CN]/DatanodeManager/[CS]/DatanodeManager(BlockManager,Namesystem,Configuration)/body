{
  this.namesystem=namesystem;
  this.blockManager=blockManager;
  Class<? extends NetworkTopology> networkTopologyClass=conf.getClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_IMPL_KEY,NetworkTopology.class,NetworkTopology.class);
  networktopology=(NetworkTopology)ReflectionUtils.newInstance(networkTopologyClass,conf);
  this.heartbeatManager=new HeartbeatManager(namesystem,blockManager,conf);
  this.hostsReader=new HostsFileReader(conf.get(DFSConfigKeys.DFS_HOSTS,""),conf.get(DFSConfigKeys.DFS_HOSTS_EXCLUDE,""));
  this.dnsToSwitchMapping=ReflectionUtils.newInstance(conf.getClass(DFSConfigKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,ScriptBasedMapping.class,DNSToSwitchMapping.class),conf);
  if (dnsToSwitchMapping instanceof CachedDNSToSwitchMapping) {
    dnsToSwitchMapping.resolve(new ArrayList<String>(hostsReader.getHosts()));
  }
  final long heartbeatIntervalSeconds=conf.getLong(DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT);
  final int heartbeatRecheckInterval=conf.getInt(DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_KEY,DFSConfigKeys.DFS_NAMENODE_HEARTBEAT_RECHECK_INTERVAL_DEFAULT);
  this.heartbeatExpireInterval=2 * heartbeatRecheckInterval + 10 * 1000 * heartbeatIntervalSeconds;
  final int blockInvalidateLimit=Math.max(20 * (int)(heartbeatIntervalSeconds),DFSConfigKeys.DFS_BLOCK_INVALIDATE_LIMIT_DEFAULT);
  this.blockInvalidateLimit=conf.getInt(DFSConfigKeys.DFS_BLOCK_INVALIDATE_LIMIT_KEY,blockInvalidateLimit);
  LOG.info(DFSConfigKeys.DFS_BLOCK_INVALIDATE_LIMIT_KEY + "=" + this.blockInvalidateLimit);
  this.checkForStaleNodes=conf.getBoolean(DFSConfigKeys.DFS_NAMENODE_CHECK_STALE_DATANODE_KEY,DFSConfigKeys.DFS_NAMENODE_CHECK_STALE_DATANODE_DEFAULT);
  if (this.checkForStaleNodes) {
    this.staleInterval=conf.getLong(DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY,DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_MILLI_DEFAULT);
    if (this.staleInterval < DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_MILLI_DEFAULT) {
      LOG.warn("The given interval for marking stale datanode = " + this.staleInterval + ", which is smaller than the default value "+ DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_MILLI_DEFAULT+ ".");
    }
  }
}
