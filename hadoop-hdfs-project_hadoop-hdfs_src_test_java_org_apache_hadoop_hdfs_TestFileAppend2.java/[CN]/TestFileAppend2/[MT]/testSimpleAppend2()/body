{
  final Configuration conf=new HdfsConfiguration();
  if (simulatedStorage) {
    SimulatedFSDataset.setFactory(conf);
  }
  conf.setInt(DFSConfigKeys.DFS_DATANODE_HANDLER_COUNT_KEY,50);
  fileContents=AppendTestUtil.initBuffer(AppendTestUtil.FILE_SIZE);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  DistributedFileSystem fs=cluster.getFileSystem();
  try {
{
      Path file1=new Path("/simpleAppend.dat");
      FSDataOutputStream stm=AppendTestUtil.createFile(fs,file1,1);
      System.out.println("Created file simpleAppend.dat");
      int mid=186;
      System.out.println("Writing " + mid + " bytes to file "+ file1);
      stm.write(fileContents,0,mid);
      stm.close();
      System.out.println("Wrote and Closed first part of file.");
      int mid2=607;
      System.out.println("Writing " + mid + " bytes to file "+ file1);
      stm=fs.append(file1,EnumSet.of(CreateFlag.APPEND,CreateFlag.NEW_BLOCK),4096,null);
      stm.write(fileContents,mid,mid2 - mid);
      stm.close();
      System.out.println("Wrote and Closed second part of file.");
      stm=fs.append(file1,EnumSet.of(CreateFlag.APPEND,CreateFlag.NEW_BLOCK),4096,null);
      assertTrue(stm.getPos() > 0);
      System.out.println("Writing " + (AppendTestUtil.FILE_SIZE - mid2) + " bytes to file "+ file1);
      stm.write(fileContents,mid2,AppendTestUtil.FILE_SIZE - mid2);
      System.out.println("Written second part of file");
      stm.close();
      System.out.println("Wrote and Closed second part of file.");
      AppendTestUtil.checkFullFile(fs,file1,AppendTestUtil.FILE_SIZE,fileContents,"Read 2");
      List<LocatedBlock> blocks=fs.getClient().getLocatedBlocks(file1.toString(),0L).getLocatedBlocks();
      assertEquals(12,blocks.size());
      assertEquals(mid,blocks.get(0).getBlockSize());
      assertEquals(mid2 - mid,blocks.get(1).getBlockSize());
      for (int i=2; i < 11; i++) {
        assertEquals(AppendTestUtil.BLOCK_SIZE,blocks.get(i).getBlockSize());
      }
      assertEquals((AppendTestUtil.FILE_SIZE - mid2) % AppendTestUtil.BLOCK_SIZE,blocks.get(11).getBlockSize());
    }
{
      FSDataOutputStream out=null;
      try {
        out=fs.append(new Path("/non-existing.dat"),EnumSet.of(CreateFlag.APPEND,CreateFlag.NEW_BLOCK),4096,null);
        fail("Expected to have FileNotFoundException");
      }
 catch (      java.io.FileNotFoundException fnfe) {
        System.out.println("Good: got " + fnfe);
        fnfe.printStackTrace(System.out);
      }
 finally {
        IOUtils.closeStream(out);
      }
    }
{
      Path root=new Path("/");
      fs.setPermission(root,new FsPermission((short)0777));
      fs.close();
      final UserGroupInformation superuser=UserGroupInformation.getCurrentUser();
      String username="testappenduser";
      String group="testappendgroup";
      assertFalse(superuser.getShortUserName().equals(username));
      assertFalse(Arrays.asList(superuser.getGroupNames()).contains(group));
      UserGroupInformation appenduser=UserGroupInformation.createUserForTesting(username,new String[]{group});
      fs=(DistributedFileSystem)DFSTestUtil.getFileSystemAs(appenduser,conf);
      Path dir=new Path(root,getClass().getSimpleName());
      Path foo=new Path(dir,"foo.dat");
      FSDataOutputStream out=null;
      int offset=0;
      try {
        out=fs.create(foo);
        int len=10 + AppendTestUtil.nextInt(100);
        out.write(fileContents,offset,len);
        offset+=len;
      }
  finally {
        IOUtils.closeStream(out);
      }
      fs.setPermission(dir,new FsPermission((short)0100));
      fs.setPermission(foo,new FsPermission((short)0200));
      out=null;
      try {
        out=fs.append(foo,EnumSet.of(CreateFlag.APPEND,CreateFlag.NEW_BLOCK),4096,null);
        int len=10 + AppendTestUtil.nextInt(100);
        out.write(fileContents,offset,len);
        offset+=len;
      }
  finally {
        IOUtils.closeStream(out);
      }
      fs.setPermission(foo,new FsPermission((short)0577));
      fs.setPermission(dir,new FsPermission((short)0777));
      out=null;
      try {
        out=fs.append(foo,EnumSet.of(CreateFlag.APPEND,CreateFlag.NEW_BLOCK),4096,null);
        fail("Expected to have AccessControlException");
      }
 catch (      AccessControlException ace) {
        System.out.println("Good: got " + ace);
        ace.printStackTrace(System.out);
      }
 finally {
        IOUtils.closeStream(out);
      }
    }
  }
  finally {
    fs.close();
    cluster.shutdown();
  }
}
