{
  final Configuration conf=new HdfsConfiguration();
  if (simulatedStorage) {
    conf.setBoolean(SimulatedFSDataset.CONFIG_PROPERTY_SIMULATED,true);
  }
  conf.setInt(DFSConfigKeys.DFS_DATANODE_HANDLER_COUNT_KEY,50);
  conf.setBoolean(DFSConfigKeys.DFS_SUPPORT_APPEND_KEY,true);
  fileContents=AppendTestUtil.initBuffer(AppendTestUtil.FILE_SIZE);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  FileSystem fs=cluster.getFileSystem();
  try {
{
      Path file1=new Path("/simpleAppend.dat");
      FSDataOutputStream stm=AppendTestUtil.createFile(fs,file1,1);
      System.out.println("Created file simpleAppend.dat");
      int mid=186;
      System.out.println("Writing " + mid + " bytes to file "+ file1);
      stm.write(fileContents,0,mid);
      stm.close();
      System.out.println("Wrote and Closed first part of file.");
      int mid2=607;
      System.out.println("Writing " + mid + " bytes to file "+ file1);
      stm=fs.append(file1);
      stm.write(fileContents,mid,mid2 - mid);
      stm.close();
      System.out.println("Wrote and Closed second part of file.");
      stm=fs.append(file1);
      assertTrue(stm.getPos() > 0);
      System.out.println("Writing " + (AppendTestUtil.FILE_SIZE - mid2) + " bytes to file "+ file1);
      stm.write(fileContents,mid2,AppendTestUtil.FILE_SIZE - mid2);
      System.out.println("Written second part of file");
      stm.close();
      System.out.println("Wrote and Closed second part of file.");
      AppendTestUtil.checkFullFile(fs,file1,AppendTestUtil.FILE_SIZE,fileContents,"Read 2");
    }
{
      FSDataOutputStream out=null;
      try {
        out=fs.append(new Path("/non-existing.dat"));
        fail("Expected to have FileNotFoundException");
      }
 catch (      java.io.FileNotFoundException fnfe) {
        System.out.println("Good: got " + fnfe);
        fnfe.printStackTrace(System.out);
      }
 finally {
        IOUtils.closeStream(out);
      }
    }
{
      Path root=new Path("/");
      fs.setPermission(root,new FsPermission((short)0777));
      fs.close();
      final UserGroupInformation superuser=UserGroupInformation.getCurrentUser();
      String username="testappenduser";
      String group="testappendgroup";
      assertFalse(superuser.getShortUserName().equals(username));
      assertFalse(Arrays.asList(superuser.getGroupNames()).contains(group));
      UserGroupInformation appenduser=UserGroupInformation.createUserForTesting(username,new String[]{group});
      fs=DFSTestUtil.getFileSystemAs(appenduser,conf);
      Path dir=new Path(root,getClass().getSimpleName());
      Path foo=new Path(dir,"foo.dat");
      FSDataOutputStream out=null;
      int offset=0;
      try {
        out=fs.create(foo);
        int len=10 + AppendTestUtil.nextInt(100);
        out.write(fileContents,offset,len);
        offset+=len;
      }
  finally {
        IOUtils.closeStream(out);
      }
      fs.setPermission(dir,new FsPermission((short)0100));
      fs.setPermission(foo,new FsPermission((short)0200));
      out=null;
      try {
        out=fs.append(foo);
        int len=10 + AppendTestUtil.nextInt(100);
        out.write(fileContents,offset,len);
        offset+=len;
      }
  finally {
        IOUtils.closeStream(out);
      }
      fs.setPermission(foo,new FsPermission((short)0577));
      fs.setPermission(dir,new FsPermission((short)0777));
      out=null;
      try {
        out=fs.append(foo);
        fail("Expected to have AccessControlException");
      }
 catch (      AccessControlException ace) {
        System.out.println("Good: got " + ace);
        ace.printStackTrace(System.out);
      }
 finally {
        IOUtils.closeStream(out);
      }
    }
  }
 catch (  IOException e) {
    System.out.println("Exception :" + e);
    throw e;
  }
catch (  Throwable e) {
    System.out.println("Throwable :" + e);
    e.printStackTrace();
    throw new IOException("Throwable : " + e);
  }
 finally {
    fs.close();
    cluster.shutdown();
  }
}
