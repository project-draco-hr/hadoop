{
  if (output.size() < 2) {
    StringBuffer sb=new StringBuffer("Fewer lines of output than expected");
    if (output.size() > 0) {
      sb.append(": " + output.get(0));
    }
    throw new IOException(sb.toString());
  }
  String line=output.get(1);
  StringTokenizer tokens=new StringTokenizer(line," \t\n\r\f%");
  try {
    this.filesystem=tokens.nextToken();
  }
 catch (  NoSuchElementException e) {
    throw new IOException("Unexpected empty line");
  }
  if (!tokens.hasMoreTokens()) {
    if (output.size() > 2) {
      line=output.get(2);
    }
 else {
      throw new IOException("Expecting additional output after line: " + line);
    }
    tokens=new StringTokenizer(line," \t\n\r\f%");
  }
  try {
    Long.parseLong(tokens.nextToken());
    Long.parseLong(tokens.nextToken());
    Long.parseLong(tokens.nextToken());
    Integer.parseInt(tokens.nextToken());
    this.mount=tokens.nextToken();
  }
 catch (  NoSuchElementException e) {
    throw new IOException("Could not parse line: " + line);
  }
catch (  NumberFormatException e) {
    throw new IOException("Could not parse line: " + line);
  }
}
