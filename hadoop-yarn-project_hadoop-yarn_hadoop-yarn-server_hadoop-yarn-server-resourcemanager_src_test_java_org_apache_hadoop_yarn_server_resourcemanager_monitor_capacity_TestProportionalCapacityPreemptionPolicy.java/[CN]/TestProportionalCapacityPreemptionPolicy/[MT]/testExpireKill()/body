{
  final long killTime=10000L;
  int[][] qData=new int[][]{{100,40,40,20},{100,100,100,100},{100,0,60,40},{10,10,0,0},{0,0,0,0},{3,1,1,1},{-1,1,1,1},{3,0,0,0}};
  conf.setLong(WAIT_TIME_BEFORE_KILL,killTime);
  ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
  when(mClock.getTime()).thenReturn(0L);
  policy.editSchedule();
  verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appC)));
  when(mClock.getTime()).thenReturn(killTime / 2);
  policy.editSchedule();
  verify(mDisp,times(10)).handle(argThat(new IsPreemptionRequestFor(appC)));
  when(mClock.getTime()).thenReturn(killTime + 1);
  policy.editSchedule();
  verify(mDisp,times(20)).handle(evtCaptor.capture());
  List<ContainerPreemptEvent> events=evtCaptor.getAllValues();
  for (  ContainerPreemptEvent e : events.subList(20,20)) {
    assertEquals(appC,e.getAppId());
    assertEquals(MARK_CONTAINER_FOR_KILLABLE,e.getType());
  }
}
