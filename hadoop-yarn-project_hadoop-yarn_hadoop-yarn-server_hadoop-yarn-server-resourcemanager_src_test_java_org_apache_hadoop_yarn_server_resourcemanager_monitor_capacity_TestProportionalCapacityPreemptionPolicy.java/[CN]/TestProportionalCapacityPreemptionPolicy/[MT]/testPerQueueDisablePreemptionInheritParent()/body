{
  int[][] qData=new int[][]{{1000,500,200,200,100,500,200,200,100},{1000,1000,1000,1000,1000,1000,1000,1000,1000},{1000,700,0,350,350,300,0,200,100},{200,0,0,0,0,200,200,0,0},{0,0,0,0,0,0,0,0,0},{5,2,0,1,1,3,1,1,1},{-1,-1,1,1,1,-1,1,1,1},{2,3,0,0,0,3,0,0,0}};
  ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
  policy.editSchedule();
  verify(mDisp,times(16)).handle(argThat(new IsPreemptionRequestFor(appA)));
  verify(mDisp,times(182)).handle(argThat(new IsPreemptionRequestFor(appB)));
  setup();
  schedConf.setBoolean(BASE_YARN_RM_PREEMPTION + "root.queueA" + SUFFIX_DISABLE_PREEMPTION,true);
  ProportionalCapacityPreemptionPolicy policy2=buildPolicy(qData);
  policy2.editSchedule();
  verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
  verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appB)));
  verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appD)));
  verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appE)));
}
