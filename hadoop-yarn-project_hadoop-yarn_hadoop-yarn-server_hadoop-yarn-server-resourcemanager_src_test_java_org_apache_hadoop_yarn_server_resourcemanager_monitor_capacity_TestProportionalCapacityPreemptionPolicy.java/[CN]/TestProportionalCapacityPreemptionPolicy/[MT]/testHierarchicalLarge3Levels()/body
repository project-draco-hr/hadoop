{
  int[][] qData=new int[][]{{400,200,60,140,100,40,100,70,30,100,10,90},{400,400,400,400,400,400,400,400,400,400,400,400},{400,210,60,150,100,50,100,50,50,90,10,80},{10,0,0,0,0,0,0,0,0,0,0,10},{0,0,0,0,0,0,0,0,0,0,0,0},{7,3,1,2,1,1,2,1,1,2,1,1},{-1,-1,1,-1,1,1,-1,1,1,-1,1,1},{3,2,0,2,0,0,2,0,0,2,0,0}};
  ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
  policy.editSchedule();
  verify(mDisp,times(9)).handle(argThat(new IsPreemptionRequestFor(appC)));
  assertEquals(10,policy.getQueuePartitions().get("queueE").get("").preemptableExtra.getMemory());
  TempQueuePerPartition tempQueueAPartition=policy.getQueuePartitions().get("queueA").get("");
  assertEquals(0,tempQueueAPartition.untouchableExtra.getMemory());
  int extraForQueueA=tempQueueAPartition.current.getMemory() - tempQueueAPartition.guaranteed.getMemory();
  assertEquals(extraForQueueA,tempQueueAPartition.preemptableExtra.getMemory());
}
