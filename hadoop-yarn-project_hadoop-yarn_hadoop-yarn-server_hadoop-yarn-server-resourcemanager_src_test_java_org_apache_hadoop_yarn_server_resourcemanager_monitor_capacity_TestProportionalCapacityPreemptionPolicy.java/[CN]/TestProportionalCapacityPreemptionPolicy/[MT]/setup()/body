{
  conf=new Configuration(false);
  conf.setLong(WAIT_TIME_BEFORE_KILL,10000);
  conf.setLong(MONITORING_INTERVAL,3000);
  conf.setFloat(TOTAL_PREEMPTION_PER_ROUND,(float)1.0);
  conf.setFloat(NATURAL_TERMINATION_FACTOR,(float)1.0);
  conf.set(YarnConfiguration.RM_SCHEDULER_MONITOR_POLICIES,ProportionalCapacityPreemptionPolicy.class.getCanonicalName());
  conf.setBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,true);
  conf.set("yarn.resourcemanager.scheduler.class",CapacityScheduler.class.getName());
  mClock=mock(Clock.class);
  mCS=mock(CapacityScheduler.class);
  when(mCS.getResourceCalculator()).thenReturn(rc);
  lm=mock(RMNodeLabelsManager.class);
  schedConf=new CapacitySchedulerConfiguration();
  when(mCS.getConfiguration()).thenReturn(schedConf);
  rmContext=mock(RMContext.class);
  when(mCS.getRMContext()).thenReturn(rmContext);
  when(rmContext.getNodeLabelManager()).thenReturn(lm);
  mDisp=mock(EventHandler.class);
  rand=new Random();
  long seed=rand.nextLong();
  System.out.println(name.getMethodName() + " SEED: " + seed);
  rand.setSeed(seed);
  appAlloc=0;
}
