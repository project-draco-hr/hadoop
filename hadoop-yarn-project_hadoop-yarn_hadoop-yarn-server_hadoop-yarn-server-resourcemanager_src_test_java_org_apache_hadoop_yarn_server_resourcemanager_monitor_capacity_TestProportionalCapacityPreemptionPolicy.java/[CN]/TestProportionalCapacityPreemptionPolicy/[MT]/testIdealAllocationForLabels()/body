{
  int[][] qData=new int[][]{{80,40,40},{80,80,80},{80,80,0},{70,20,50},{0,0,0},{5,4,1},{-1,1,1},{2,0,0}};
  setAMContainer=true;
  setLabeledContainer=true;
  Map<NodeId,Set<String>> labels=new HashMap<NodeId,Set<String>>();
  NodeId node=NodeId.newInstance("node1",0);
  Set<String> labelSet=new HashSet<String>();
  labelSet.add("x");
  labels.put(node,labelSet);
  when(lm.getNodeLabels()).thenReturn(labels);
  ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
  when(lm.getResourceByLabel(anyString(),any(Resource.class))).thenReturn(Resources.clone(Resource.newInstance(80,0)));
  clusterResources.setMemory(100);
  policy.editSchedule();
  verify(mDisp,times(19)).handle(argThat(new IsPreemptionRequestFor(appD)));
  verify(mDisp,times(19)).handle(argThat(new IsPreemptionRequestFor(appC)));
  verify(mDisp,times(2)).handle(argThat(new IsPreemptionRequestFor(appB)));
  setAMContainer=false;
  setLabeledContainer=false;
}
