{
  LeafQueue lq=mock(LeafQueue.class);
  when(lq.getTotalResourcePending()).thenReturn(Resource.newInstance(pending[i],0));
  NavigableSet<FiCaSchedulerApp> qApps=new TreeSet<FiCaSchedulerApp>(new Comparator<FiCaSchedulerApp>(){
    @Override public int compare(    FiCaSchedulerApp a1,    FiCaSchedulerApp a2){
      return a1.getApplicationAttemptId().compareTo(a2.getApplicationAttemptId());
    }
  }
);
  if (apps[i] != 0) {
    int aUsed=used[i] / apps[i];
    int aPending=pending[i] / apps[i];
    int aReserve=reserved[i] / apps[i];
    for (int a=0; a < apps[i]; ++a) {
      qApps.add(mockApp(i,appAlloc,aUsed,aPending,aReserve,gran[i]));
      ++appAlloc;
    }
  }
  when(lq.getApplications()).thenReturn(qApps);
  if (setAMResourcePercent != 0.0f) {
    when(lq.getMaxAMResourcePerQueuePercent()).thenReturn(setAMResourcePercent);
  }
  p.getChildQueues().add(lq);
  return lq;
}
