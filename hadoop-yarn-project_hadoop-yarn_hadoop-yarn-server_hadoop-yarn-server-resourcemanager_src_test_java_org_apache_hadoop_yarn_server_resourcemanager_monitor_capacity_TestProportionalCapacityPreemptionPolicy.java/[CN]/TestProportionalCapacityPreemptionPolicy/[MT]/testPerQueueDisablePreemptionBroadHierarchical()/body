{
  int[][] qData=new int[][]{{1000,350,150,200,400,200,200,250,100,150},{1000,1000,1000,1000,1000,1000,1000,1000,1000,1000},{1000,400,200,200,400,250,150,200,150,50},{50,0,0,0,50,0,50,0,0,0},{0,0,0,0,0,0,0,0,0,0},{6,2,1,1,2,1,1,2,1,1},{-1,-1,1,1,-1,1,1,-1,1,1},{3,2,0,0,2,0,0,2,0,0}};
  ProportionalCapacityPreemptionPolicy policy=buildPolicy(qData);
  policy.editSchedule();
  verify(mDisp,times(28)).handle(argThat(new IsPreemptionRequestFor(appA)));
  verify(mDisp,times(22)).handle(argThat(new IsPreemptionRequestFor(appC)));
  setup();
  conf.setPreemptionDisabled("root.queueA.queueB",true);
  ProportionalCapacityPreemptionPolicy policy2=buildPolicy(qData);
  policy2.editSchedule();
  verify(mDisp,times(50)).handle(argThat(new IsPreemptionRequestFor(appC)));
  verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
  setup();
  conf.setPreemptionDisabled("root.queueD.queueE",true);
  conf.setPreemptionDisabled("root.queueA.queueB",true);
  ProportionalCapacityPreemptionPolicy policy3=buildPolicy(qData);
  policy3.editSchedule();
  verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appA)));
  verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appB)));
  verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appC)));
  verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appE)));
  verify(mDisp,never()).handle(argThat(new IsPreemptionRequestFor(appF)));
}
