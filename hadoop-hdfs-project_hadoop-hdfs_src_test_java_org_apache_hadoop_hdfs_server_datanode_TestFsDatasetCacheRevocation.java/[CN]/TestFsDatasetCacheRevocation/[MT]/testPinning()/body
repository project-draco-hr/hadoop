{
  Configuration conf=getDefaultConf();
  conf.setLong(DFSConfigKeys.DFS_DATANODE_CACHE_REVOCATION_TIMEOUT_MS,1800000L);
  conf.setLong(DFSConfigKeys.DFS_DATANODE_CACHE_REVOCATION_POLLING_MS,2L);
  MiniDFSCluster cluster=null;
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  cluster.waitActive();
  DistributedFileSystem dfs=cluster.getFileSystem();
  final String TEST_FILE="/test_file";
  DFSTestUtil.createFile(dfs,new Path(TEST_FILE),BLOCK_SIZE,(short)1,0xcafe);
  dfs.addCachePool(new CachePoolInfo("pool"));
  long cacheDirectiveId=dfs.addCacheDirective(new CacheDirectiveInfo.Builder().setPool("pool").setPath(new Path(TEST_FILE)).setReplication((short)1).build());
  FsDatasetSpi<?> fsd=cluster.getDataNodes().get(0).getFSDataset();
  DFSTestUtil.verifyExpectedCacheUsage(BLOCK_SIZE,1,fsd);
  FSDataInputStream in=dfs.open(new Path(TEST_FILE));
  ByteBuffer buf=in.read(null,BLOCK_SIZE,EnumSet.noneOf(ReadOption.class));
  dfs.removeCacheDirective(cacheDirectiveId);
  Thread.sleep(500);
  DFSTestUtil.verifyExpectedCacheUsage(BLOCK_SIZE,1,fsd);
  in.releaseBuffer(buf);
  DFSTestUtil.verifyExpectedCacheUsage(0,0,fsd);
  in.close();
  cluster.shutdown();
}
