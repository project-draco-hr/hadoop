{
  Path input=new Path(rootPath + "input/in.txt");
  input=input.makeQualified(fs.getUri(),fs.getWorkingDirectory());
  Path output=new Path(rootPath + "output/");
  output=output.makeQualified(fs.getUri(),fs.getWorkingDirectory());
  writeStringToFile(input,"first line\nsecond line\nthird line");
  Job job=Job.getInstance(conf,"word count");
  job.setJarByClass(WordCount.class);
  job.setMapperClass(WordCount.TokenizerMapper.class);
  job.setCombinerClass(WordCount.IntSumReducer.class);
  job.setReducerClass(WordCount.IntSumReducer.class);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(IntWritable.class);
  FileInputFormat.addInputPath(job,input);
  FileOutputFormat.setOutputPath(job,output);
  int exitCode=(job.waitForCompletion(true) ? 0 : 1);
  assertEquals("Returned error code.",0,exitCode);
  assertTrue(fs.exists(new Path(output,"_SUCCESS")));
  String outputAsStr=readStringFromFile(new Path(output,"part-r-00000"));
  Map<String,Integer> resAsMap=getResultAsMap(outputAsStr);
  assertEquals(4,resAsMap.size());
  assertEquals(1,(int)resAsMap.get("first"));
  assertEquals(1,(int)resAsMap.get("second"));
  assertEquals(1,(int)resAsMap.get("third"));
  assertEquals(3,(int)resAsMap.get("line"));
}
