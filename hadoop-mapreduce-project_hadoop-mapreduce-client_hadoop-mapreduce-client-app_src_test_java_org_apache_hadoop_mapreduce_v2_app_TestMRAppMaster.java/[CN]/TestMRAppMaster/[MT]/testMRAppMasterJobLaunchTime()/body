{
  String applicationAttemptIdStr="appattempt_1317529182569_0004_000002";
  String containerIdStr="container_1317529182569_0004_000002_1";
  String userName="TestAppMasterUser";
  JobConf conf=new JobConf();
  conf.set(MRJobConfig.MR_AM_STAGING_DIR,stagingDir);
  conf.setInt(MRJobConfig.NUM_REDUCES,0);
  conf.set(JHAdminConfig.MR_HS_JHIST_FORMAT,"json");
  ApplicationAttemptId applicationAttemptId=ConverterUtils.toApplicationAttemptId(applicationAttemptIdStr);
  JobId jobId=TypeConverter.toYarn(TypeConverter.fromYarn(applicationAttemptId.getApplicationId()));
  File dir=new File(MRApps.getStagingAreaDir(conf,userName).toString(),jobId.toString());
  dir.mkdirs();
  File historyFile=new File(JobHistoryUtils.getStagingJobHistoryFile(new Path(dir.toURI().toString()),jobId,(applicationAttemptId.getAttemptId() - 1)).toUri().getRawPath());
  historyFile.createNewFile();
  FSDataOutputStream out=new FSDataOutputStream(new FileOutputStream(historyFile),null);
  EventWriter writer=new EventWriter(out,EventWriter.WriteMode.JSON);
  writer.close();
  FileSystem fs=FileSystem.get(conf);
  JobSplitWriter.createSplitFiles(new Path(dir.getAbsolutePath()),conf,fs,new org.apache.hadoop.mapred.InputSplit[0]);
  ContainerId containerId=ConverterUtils.toContainerId(containerIdStr);
  MRAppMasterTestLaunchTime appMaster=new MRAppMasterTestLaunchTime(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis());
  MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
  appMaster.stop();
  assertTrue("Job launch time should not be negative.",appMaster.jobLaunchTime.get() >= 0);
}
