{
  Logger rootLogger=LogManager.getRootLogger();
  rootLogger.setLevel(Level.DEBUG);
  Credentials credentials=new Credentials();
  byte[] identifier="MyIdentifier".getBytes();
  byte[] password="MyPassword".getBytes();
  Text kind=new Text("MyTokenKind");
  Text service=new Text("host:port");
  Token<? extends TokenIdentifier> myToken=new Token<TokenIdentifier>(identifier,password,kind,service);
  Text tokenAlias=new Text("myToken");
  credentials.addToken(tokenAlias,myToken);
  Text keyAlias=new Text("mySecretKeyAlias");
  credentials.addSecretKey(keyAlias,"mySecretKey".getBytes());
  Token<? extends TokenIdentifier> storedToken=credentials.getToken(tokenAlias);
  JobConf conf=new JobConf();
  Path tokenFilePath=new Path(testDir.getAbsolutePath(),"tokens-file");
  Map<String,String> newEnv=new HashMap<String,String>();
  newEnv.put(UserGroupInformation.HADOOP_TOKEN_FILE_LOCATION,tokenFilePath.toUri().getPath());
  setNewEnvironmentHack(newEnv);
  credentials.writeTokenStorageFile(tokenFilePath,conf);
  ApplicationId appId=ApplicationId.newInstance(12345,56);
  ApplicationAttemptId applicationAttemptId=ApplicationAttemptId.newInstance(appId,1);
  ContainerId containerId=ContainerId.newInstance(applicationAttemptId,546);
  String userName=UserGroupInformation.getCurrentUser().getShortUserName();
  File stagingDir=new File(MRApps.getStagingAreaDir(conf,userName).toString());
  stagingDir.mkdirs();
  UserGroupInformation.setLoginUser(null);
  MRAppMasterTest appMaster=new MRAppMasterTest(applicationAttemptId,containerId,"host",-1,-1,System.currentTimeMillis(),1,false,true);
  MRAppMaster.initAndStartAppMaster(appMaster,conf,userName);
  Credentials appMasterCreds=appMaster.credentials;
  Assert.assertNotNull(appMasterCreds);
  Assert.assertEquals(1,appMasterCreds.numberOfSecretKeys());
  Assert.assertEquals(1,appMasterCreds.numberOfTokens());
  Token<? extends TokenIdentifier> usedToken=appMasterCreds.getToken(tokenAlias);
  Assert.assertNotNull(usedToken);
  Assert.assertEquals(storedToken,usedToken);
  byte[] usedKey=appMasterCreds.getSecretKey(keyAlias);
  Assert.assertNotNull(usedKey);
  Assert.assertEquals("mySecretKey",new String(usedKey));
  Credentials confCredentials=conf.getCredentials();
  Assert.assertEquals(1,confCredentials.numberOfSecretKeys());
  Assert.assertEquals(1,confCredentials.numberOfTokens());
  Assert.assertEquals(storedToken,confCredentials.getToken(tokenAlias));
  Assert.assertEquals("mySecretKey",new String(confCredentials.getSecretKey(keyAlias)));
}
