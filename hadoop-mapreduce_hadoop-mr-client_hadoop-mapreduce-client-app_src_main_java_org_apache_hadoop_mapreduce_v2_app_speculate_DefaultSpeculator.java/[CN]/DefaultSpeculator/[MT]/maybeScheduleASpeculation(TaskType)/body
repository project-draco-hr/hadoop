{
  int successes=0;
  long now=clock.getTime();
  ConcurrentMap<JobId,AtomicInteger> containerNeeds=type == TaskType.MAP ? mapContainerNeeds : reduceContainerNeeds;
  for (  ConcurrentMap.Entry<JobId,AtomicInteger> jobEntry : containerNeeds.entrySet()) {
    if (jobEntry.getValue().get() > 0) {
      continue;
    }
    int numberSpeculationsAlready=0;
    int numberRunningTasks=0;
    Job job=context.getJob(jobEntry.getKey());
    Map<TaskId,Task> tasks=job.getTasks(type);
    int numberAllowedSpeculativeTasks=(int)Math.max(MINIMUM_ALLOWED_SPECULATIVE_TASKS,PROPORTION_TOTAL_TASKS_SPECULATABLE * tasks.size());
    TaskId bestTaskID=null;
    long bestSpeculationValue=-1L;
    for (    Map.Entry<TaskId,Task> taskEntry : tasks.entrySet()) {
      long mySpeculationValue=speculationValue(taskEntry.getKey(),now);
      if (mySpeculationValue == ALREADY_SPECULATING) {
        ++numberSpeculationsAlready;
      }
      if (mySpeculationValue != NOT_RUNNING) {
        ++numberRunningTasks;
      }
      if (mySpeculationValue > bestSpeculationValue) {
        bestTaskID=taskEntry.getKey();
        bestSpeculationValue=mySpeculationValue;
      }
    }
    numberAllowedSpeculativeTasks=(int)Math.max(numberAllowedSpeculativeTasks,PROPORTION_RUNNING_TASKS_SPECULATABLE * numberRunningTasks);
    if (bestTaskID != null && numberAllowedSpeculativeTasks > numberSpeculationsAlready) {
      addSpeculativeAttempt(bestTaskID);
      ++successes;
    }
  }
  return successes;
}
