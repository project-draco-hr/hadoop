{
  Configuration conf=getConf();
  MiniDFSCluster cluster=null;
  FileSystem fileSys=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).build();
    cluster.waitActive();
    fileSys=cluster.getFileSystem();
    final FSNamesystem namesystem=cluster.getNamesystem();
    for (Iterator<URI> it=cluster.getNameDirs(0).iterator(); it.hasNext(); ) {
      File dir=new File(it.next().getPath());
      System.out.println(dir);
    }
    FSImage fsimage=namesystem.getFSImage();
    FSEditLog editLog=fsimage.getEditLog();
    editLog.setOutputBufferCapacity(initialSize);
    fsimage.rollEditLog(NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION);
    long originalLastInodeId=namesystem.dir.getLastInodeId();
    Thread threadId[]=new Thread[NUM_THREADS];
    for (int i=0; i < NUM_THREADS; i++) {
      Transactions trans=new Transactions(namesystem,NUM_TRANSACTIONS,i * NUM_TRANSACTIONS);
      threadId[i]=new Thread(trans,"TransactionThread-" + i);
      threadId[i].start();
    }
    for (int i=0; i < NUM_THREADS; i++) {
      try {
        threadId[i].join();
      }
 catch (      InterruptedException e) {
        i--;
      }
    }
    Transactions trans=new Transactions(namesystem,NUM_TRANSACTIONS,NUM_TRANSACTIONS / 2);
    trans.run();
    fsimage.rollEditLog(NameNodeLayoutVersion.CURRENT_LAYOUT_VERSION);
    long expectedTxns=((NUM_THREADS + 1) * 2 * NUM_TRANSACTIONS) + 2;
    namesystem.dir.resetLastInodeIdWithoutChecking(originalLastInodeId);
    for (Iterator<StorageDirectory> it=fsimage.getStorage().dirIterator(NameNodeDirType.EDITS); it.hasNext(); ) {
      FSEditLogLoader loader=new FSEditLogLoader(namesystem,0);
      File editFile=NNStorage.getFinalizedEditsFile(it.next(),3,3 + expectedTxns - 1);
      assertTrue("Expect " + editFile + " exists",editFile.exists());
      System.out.println("Verifying file: " + editFile);
      long numEdits=loader.loadFSEdits(new EditLogFileInputStream(editFile),3);
      int numLeases=namesystem.leaseManager.countLease();
      System.out.println("Number of outstanding leases " + numLeases);
      assertEquals(0,numLeases);
      assertTrue("Verification for " + editFile + " failed. "+ "Expected "+ expectedTxns+ " transactions. "+ "Found "+ numEdits+ " transactions.",numEdits == expectedTxns);
    }
  }
  finally {
    try {
      if (fileSys != null)       fileSys.close();
      if (cluster != null)       cluster.shutdown();
    }
 catch (    Throwable t) {
      LOG.error("Couldn't shut down cleanly",t);
    }
  }
}
