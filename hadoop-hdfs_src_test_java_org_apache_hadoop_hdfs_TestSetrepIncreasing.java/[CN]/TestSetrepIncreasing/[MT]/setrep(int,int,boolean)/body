{
  Configuration conf=new HdfsConfiguration();
  if (simulatedStorage) {
    conf.setBoolean(SimulatedFSDataset.CONFIG_PROPERTY_SIMULATED,true);
  }
  conf.set(DFSConfigKeys.DFS_REPLICATION_KEY,"" + fromREP);
  conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY,1000L);
  conf.set(DFSConfigKeys.DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY,Integer.toString(2));
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(10).build();
  FileSystem fs=cluster.getFileSystem();
  assertTrue("Not a HDFS: " + fs.getUri(),fs instanceof DistributedFileSystem);
  try {
    Path root=TestDFSShell.mkdir(fs,new Path("/test/setrep" + fromREP + "-"+ toREP));
    Path f=TestDFSShell.writeFile(fs,new Path(root,"foo"));
{
      String[] args={"-setrep","-w","" + toREP,"" + f};
      FsShell shell=new FsShell();
      shell.setConf(conf);
      try {
        assertEquals(0,shell.run(args));
      }
 catch (      Exception e) {
        assertTrue("-setrep " + e,false);
      }
    }
    fs=cluster.getFileSystem();
    FileStatus file=fs.getFileStatus(f);
    long len=file.getLen();
    for (    BlockLocation locations : fs.getFileBlockLocations(file,0,len)) {
      assertTrue(locations.getHosts().length == toREP);
    }
    TestDFSShell.show("done setrep waiting: " + root);
  }
  finally {
    try {
      fs.close();
    }
 catch (    Exception e) {
    }
    cluster.shutdown();
  }
}
