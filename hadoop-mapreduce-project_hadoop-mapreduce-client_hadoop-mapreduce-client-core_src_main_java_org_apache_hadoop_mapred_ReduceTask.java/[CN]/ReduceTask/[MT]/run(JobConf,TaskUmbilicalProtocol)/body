{
  job.setBoolean(JobContext.SKIP_RECORDS,isSkipping());
  if (isMapOrReduce()) {
    copyPhase=getProgress().addPhase("copy");
    sortPhase=getProgress().addPhase("sort");
    reducePhase=getProgress().addPhase("reduce");
  }
  TaskReporter reporter=startReporter(umbilical);
  boolean useNewApi=job.getUseNewReducer();
  initialize(job,getJobID(),reporter,useNewApi);
  if (jobCleanup) {
    runJobCleanupTask(umbilical,reporter);
    return;
  }
  if (jobSetup) {
    runJobSetupTask(umbilical,reporter);
    return;
  }
  if (taskCleanup) {
    runTaskCleanupTask(umbilical,reporter);
    return;
  }
  codec=initCodec();
  RawKeyValueIterator rIter=null;
  ShuffleConsumerPlugin shuffleConsumerPlugin=null;
  Class combinerClass=conf.getCombinerClass();
  CombineOutputCollector combineCollector=(null != combinerClass) ? new CombineOutputCollector(reduceCombineOutputCounter,reporter,conf) : null;
  Class<? extends ShuffleConsumerPlugin> clazz=job.getClass(MRConfig.SHUFFLE_CONSUMER_PLUGIN,Shuffle.class,ShuffleConsumerPlugin.class);
  shuffleConsumerPlugin=ReflectionUtils.newInstance(clazz,job);
  LOG.info("Using ShuffleConsumerPlugin: " + shuffleConsumerPlugin);
  ShuffleConsumerPlugin.Context shuffleContext=new ShuffleConsumerPlugin.Context(getTaskID(),job,FileSystem.getLocal(job),umbilical,super.lDirAlloc,reporter,codec,combinerClass,combineCollector,spilledRecordsCounter,reduceCombineInputCounter,shuffledMapsCounter,reduceShuffleBytes,failedShuffleCounter,mergedMapOutputsCounter,taskStatus,copyPhase,sortPhase,this,mapOutputFile,localMapFiles);
  shuffleConsumerPlugin.init(shuffleContext);
  rIter=shuffleConsumerPlugin.run();
  mapOutputFilesOnDisk.clear();
  sortPhase.complete();
  setPhase(TaskStatus.Phase.REDUCE);
  statusUpdate(umbilical);
  Class keyClass=job.getMapOutputKeyClass();
  Class valueClass=job.getMapOutputValueClass();
  RawComparator comparator=job.getOutputValueGroupingComparator();
  if (useNewApi) {
    runNewReducer(job,umbilical,reporter,rIter,comparator,keyClass,valueClass);
  }
 else {
    runOldReducer(job,umbilical,reporter,rIter,comparator,keyClass,valueClass);
  }
  shuffleConsumerPlugin.close();
  done(umbilical,reporter);
}
