{
  try {
    dataSet.recoverRbw(blocks[FINALIZED],blocks[FINALIZED].getGenerationStamp() + 1,0L,blocks[FINALIZED].getNumBytes());
    Assert.fail("Should not have recovered a finalized replica " + blocks[FINALIZED]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertTrue(e.getMessage().startsWith(ReplicaNotFoundException.NON_RBW_REPLICA));
  }
  try {
    dataSet.createRbw(StorageType.DEFAULT,blocks[FINALIZED],false);
    Assert.fail("Should not have created a replica that's already " + "finalized " + blocks[FINALIZED]);
  }
 catch (  ReplicaAlreadyExistsException e) {
  }
  try {
    dataSet.recoverRbw(blocks[TEMPORARY],blocks[TEMPORARY].getGenerationStamp() + 1,0L,blocks[TEMPORARY].getNumBytes());
    Assert.fail("Should not have recovered a temporary replica " + blocks[TEMPORARY]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertTrue(e.getMessage().startsWith(ReplicaNotFoundException.NON_RBW_REPLICA));
  }
  try {
    dataSet.createRbw(StorageType.DEFAULT,blocks[TEMPORARY],false);
    Assert.fail("Should not have created a replica that had created as " + "temporary " + blocks[TEMPORARY]);
  }
 catch (  ReplicaAlreadyExistsException e) {
  }
  dataSet.recoverRbw(blocks[RBW],blocks[RBW].getGenerationStamp() + 1,0L,blocks[RBW].getNumBytes());
  try {
    dataSet.createRbw(StorageType.DEFAULT,blocks[RBW],false);
    Assert.fail("Should not have created a replica that had created as RBW " + blocks[RBW]);
  }
 catch (  ReplicaAlreadyExistsException e) {
  }
  try {
    dataSet.recoverRbw(blocks[RWR],blocks[RWR].getGenerationStamp() + 1,0L,blocks[RWR].getNumBytes());
    Assert.fail("Should not have recovered a RWR replica " + blocks[RWR]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertTrue(e.getMessage().startsWith(ReplicaNotFoundException.NON_RBW_REPLICA));
  }
  try {
    dataSet.createRbw(StorageType.DEFAULT,blocks[RWR],false);
    Assert.fail("Should not have created a replica that was waiting to be " + "recovered " + blocks[RWR]);
  }
 catch (  ReplicaAlreadyExistsException e) {
  }
  try {
    dataSet.recoverRbw(blocks[RUR],blocks[RUR].getGenerationStamp() + 1,0L,blocks[RUR].getNumBytes());
    Assert.fail("Should not have recovered a RUR replica " + blocks[RUR]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertTrue(e.getMessage().startsWith(ReplicaNotFoundException.NON_RBW_REPLICA));
  }
  try {
    dataSet.createRbw(StorageType.DEFAULT,blocks[RUR],false);
    Assert.fail("Should not have created a replica that was under recovery " + blocks[RUR]);
  }
 catch (  ReplicaAlreadyExistsException e) {
  }
  try {
    dataSet.recoverRbw(blocks[NON_EXISTENT],blocks[NON_EXISTENT].getGenerationStamp() + 1,0L,blocks[NON_EXISTENT].getNumBytes());
    Assert.fail("Cannot recover a non-existent replica " + blocks[NON_EXISTENT]);
  }
 catch (  ReplicaNotFoundException e) {
    Assert.assertTrue(e.getMessage().contains(ReplicaNotFoundException.NON_EXISTENT_REPLICA));
  }
  dataSet.createRbw(StorageType.DEFAULT,blocks[NON_EXISTENT],false);
}
