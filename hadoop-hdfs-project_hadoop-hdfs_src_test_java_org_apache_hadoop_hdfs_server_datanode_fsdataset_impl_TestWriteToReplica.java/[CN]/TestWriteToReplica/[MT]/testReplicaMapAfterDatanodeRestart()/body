{
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleFederatedTopology(2)).build();
  try {
    cluster.waitActive();
    NameNode nn1=cluster.getNameNode(0);
    NameNode nn2=cluster.getNameNode(1);
    assertNotNull("cannot create nn1",nn1);
    assertNotNull("cannot create nn2",nn2);
    DataNode dn=cluster.getDataNodes().get(0);
    FsDatasetImpl dataSet=(FsDatasetImpl)DataNodeTestUtils.getFSDataset(dn);
    ReplicaMap replicaMap=dataSet.volumeMap;
    List<FsVolumeImpl> volumes=null;
    try (FsDatasetSpi.FsVolumeReferences referredVols=dataSet.getFsVolumeReferences()){
      assertEquals("number of volumes is wrong",2,referredVols.size());
      volumes=new ArrayList<>(referredVols.size());
      for (      FsVolumeSpi vol : referredVols) {
        volumes.add((FsVolumeImpl)vol);
      }
    }
     ArrayList<String> bpList=new ArrayList<String>(Arrays.asList(cluster.getNamesystem(0).getBlockPoolId(),cluster.getNamesystem(1).getBlockPoolId()));
    Assert.assertTrue("Cluster should have 2 block pools",bpList.size() == 2);
    createReplicas(bpList,volumes,replicaMap);
    ReplicaMap oldReplicaMap=new ReplicaMap(this);
    oldReplicaMap.addAll(replicaMap);
    cluster.restartDataNode(0);
    cluster.waitActive();
    dn=cluster.getDataNodes().get(0);
    dataSet=(FsDatasetImpl)dn.getFSDataset();
    testEqualityOfReplicaMap(oldReplicaMap,dataSet.volumeMap,bpList);
  }
  finally {
    cluster.shutdown();
  }
}
