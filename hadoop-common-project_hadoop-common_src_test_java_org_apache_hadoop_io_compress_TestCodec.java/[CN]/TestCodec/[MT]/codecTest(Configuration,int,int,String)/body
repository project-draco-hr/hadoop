{
  CompressionCodec codec=null;
  try {
    codec=(CompressionCodec)ReflectionUtils.newInstance(conf.getClassByName(codecClass),conf);
  }
 catch (  ClassNotFoundException cnfe) {
    throw new IOException("Illegal codec!");
  }
  LOG.info("Created a Codec object of type: " + codecClass);
  DataOutputBuffer data=new DataOutputBuffer();
  RandomDatum.Generator generator=new RandomDatum.Generator(seed);
  for (int i=0; i < count; ++i) {
    generator.next();
    RandomDatum key=generator.getKey();
    RandomDatum value=generator.getValue();
    key.write(data);
    value.write(data);
  }
  LOG.info("Generated " + count + " records");
  DataOutputBuffer compressedDataBuffer=new DataOutputBuffer();
  CompressionOutputStream deflateFilter=codec.createOutputStream(compressedDataBuffer);
  DataOutputStream deflateOut=new DataOutputStream(new BufferedOutputStream(deflateFilter));
  deflateOut.write(data.getData(),0,data.getLength());
  deflateOut.flush();
  deflateFilter.finish();
  LOG.info("Finished compressing data");
  DataInputBuffer deCompressedDataBuffer=new DataInputBuffer();
  deCompressedDataBuffer.reset(compressedDataBuffer.getData(),0,compressedDataBuffer.getLength());
  CompressionInputStream inflateFilter=codec.createInputStream(deCompressedDataBuffer);
  DataInputStream inflateIn=new DataInputStream(new BufferedInputStream(inflateFilter));
  DataInputBuffer originalData=new DataInputBuffer();
  originalData.reset(data.getData(),0,data.getLength());
  DataInputStream originalIn=new DataInputStream(new BufferedInputStream(originalData));
  for (int i=0; i < count; ++i) {
    RandomDatum k1=new RandomDatum();
    RandomDatum v1=new RandomDatum();
    k1.readFields(originalIn);
    v1.readFields(originalIn);
    RandomDatum k2=new RandomDatum();
    RandomDatum v2=new RandomDatum();
    k2.readFields(inflateIn);
    v2.readFields(inflateIn);
    assertTrue("original and compressed-then-decompressed-output not equal",k1.equals(k2) && v1.equals(v2));
    Map<RandomDatum,String> m=new HashMap<RandomDatum,String>();
    m.put(k1,k1.toString());
    m.put(v1,v1.toString());
    String result=m.get(k2);
    assertEquals("k1 and k2 hashcode not equal",result,k1.toString());
    result=m.get(v2);
    assertEquals("v1 and v2 hashcode not equal",result,v1.toString());
  }
  originalData.reset(data.getData(),0,data.getLength());
  deCompressedDataBuffer.reset(compressedDataBuffer.getData(),0,compressedDataBuffer.getLength());
  inflateFilter=codec.createInputStream(deCompressedDataBuffer);
  originalIn=new DataInputStream(new BufferedInputStream(originalData));
  int expected;
  do {
    expected=originalIn.read();
    assertEquals("Inflated stream read by byte does not match",expected,inflateFilter.read());
  }
 while (expected != -1);
  LOG.info("SUCCESS! Completed checking " + count + " records");
}
