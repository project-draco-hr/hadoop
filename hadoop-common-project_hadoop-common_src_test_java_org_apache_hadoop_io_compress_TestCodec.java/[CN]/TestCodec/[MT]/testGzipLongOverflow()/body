{
  LOG.info("testGzipLongOverflow");
  Configuration conf=new Configuration();
  conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY,false);
  assertFalse("ZlibFactory is using native libs against request",ZlibFactory.isNativeZlibLoaded(conf));
  Decompressor zlibDecompressor=ZlibFactory.getZlibDecompressor(conf);
  assertNotNull("zlibDecompressor is null!",zlibDecompressor);
  assertTrue("ZlibFactory returned unexpected inflator",zlibDecompressor instanceof BuiltInZlibInflater);
  CodecPool.returnDecompressor(zlibDecompressor);
  String tmpDir=System.getProperty("test.build.data","/tmp/");
  Path f=new Path(new Path(tmpDir),"testGzipLongOverflow.bin.gz");
  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(new GZIPOutputStream(new FileOutputStream(f.toString()))));
  final int NBUF=1024 * 4 + 1;
  final char[] buf=new char[1024 * 1024];
  for (int i=0; i < buf.length; i++)   buf[i]='\0';
  for (int i=0; i < NBUF; i++) {
    bw.write(buf);
  }
  bw.close();
  CompressionCodecFactory ccf=new CompressionCodecFactory(conf);
  CompressionCodec codec=ccf.getCodec(f);
  Decompressor decompressor=CodecPool.getDecompressor(codec);
  FileSystem fs=FileSystem.getLocal(conf);
  InputStream is=fs.open(f);
  is=codec.createInputStream(is,decompressor);
  BufferedReader br=new BufferedReader(new InputStreamReader(is));
  for (int j=0; j < NBUF; j++) {
    int n=br.read(buf);
    assertEquals("got wrong read length!",n,buf.length);
    for (int i=0; i < buf.length; i++)     assertEquals("got wrong byte!",buf[i],'\0');
  }
  br.close();
}
