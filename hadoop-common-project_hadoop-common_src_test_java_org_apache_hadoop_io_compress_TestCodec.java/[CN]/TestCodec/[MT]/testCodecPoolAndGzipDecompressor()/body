{
  Configuration conf=new Configuration();
  conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY,false);
  assertFalse("ZlibFactory is using native libs against request",ZlibFactory.isNativeZlibLoaded(conf));
  Decompressor zlibDecompressor=ZlibFactory.getZlibDecompressor(conf);
  assertNotNull("zlibDecompressor is null!",zlibDecompressor);
  assertTrue("ZlibFactory returned unexpected inflator",zlibDecompressor instanceof BuiltInZlibInflater);
  CompressionCodecFactory ccf=new CompressionCodecFactory(conf);
  CompressionCodec codec=ccf.getCodec(new Path("foo.gz"));
  assertTrue("Codec for .gz file is not GzipCodec",codec instanceof GzipCodec);
  Decompressor codecDecompressor=codec.createDecompressor();
  if (null == codecDecompressor) {
    fail("Got null codecDecompressor");
  }
  Decompressor poolDecompressor=CodecPool.getDecompressor(codec);
  if (null == poolDecompressor) {
    fail("Got null poolDecompressor");
  }
  CodecPool.returnDecompressor(zlibDecompressor);
  CodecPool.returnDecompressor(poolDecompressor);
  Decompressor poolDecompressor2=CodecPool.getDecompressor(codec);
  if (poolDecompressor.getClass() == BuiltInGzipDecompressor.class) {
    if (poolDecompressor == poolDecompressor2) {
      fail("Reused java gzip decompressor in pool");
    }
  }
 else {
    if (poolDecompressor != poolDecompressor2) {
      fail("Did not reuse native gzip decompressor in pool");
    }
  }
}
