{
  try (TraceScope ignored=tracer.newScope("BlockReaderLocal#fillBuffer(" + block.getBlockId() + ")")){
    int total=0;
    long startDataPos=dataPos;
    int startBufPos=buf.position();
    while (buf.hasRemaining()) {
      int nRead=dataIn.read(buf,dataPos);
      if (nRead < 0) {
        break;
      }
      dataPos+=nRead;
      total+=nRead;
    }
    if (canSkipChecksum) {
      freeChecksumBufIfExists();
      return total;
    }
    if (total > 0) {
      try {
        buf.limit(buf.position());
        buf.position(startBufPos);
        createChecksumBufIfNeeded();
        int checksumsNeeded=(total + bytesPerChecksum - 1) / bytesPerChecksum;
        checksumBuf.clear();
        checksumBuf.limit(checksumsNeeded * checksumSize);
        long checksumPos=BlockMetadataHeader.getHeaderSize() + ((startDataPos / bytesPerChecksum) * checksumSize);
        while (checksumBuf.hasRemaining()) {
          int nRead=checksumIn.read(checksumBuf,checksumPos);
          if (nRead < 0) {
            throw new IOException("Got unexpected checksum file EOF at " + checksumPos + ", block file position "+ startDataPos+ " for block "+ block+ " of file "+ filename);
          }
          checksumPos+=nRead;
        }
        checksumBuf.flip();
        checksum.verifyChunkedSums(buf,checksumBuf,filename,startDataPos);
      }
  finally {
        buf.position(buf.limit());
      }
    }
    return total;
  }
 }
