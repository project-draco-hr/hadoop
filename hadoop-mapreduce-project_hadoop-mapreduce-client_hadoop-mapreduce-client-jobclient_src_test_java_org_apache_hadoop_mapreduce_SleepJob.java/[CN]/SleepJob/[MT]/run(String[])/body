{
  if (args.length < 1) {
    return printUsage("number of arguments must be > 0");
  }
  int numMapper=1, numReducer=1;
  long mapSleepTime=100, reduceSleepTime=100, recSleepTime=100;
  int mapSleepCount=1, reduceSleepCount=1;
  for (int i=0; i < args.length; i++) {
    if (args[i].equals("-m")) {
      numMapper=Integer.parseInt(args[++i]);
      if (numMapper < 0) {
        return printUsage(numMapper + ": numMapper must be >= 0");
      }
    }
 else     if (args[i].equals("-r")) {
      numReducer=Integer.parseInt(args[++i]);
      if (numReducer < 0) {
        return printUsage(numReducer + ": numReducer must be >= 0");
      }
    }
 else     if (args[i].equals("-mt")) {
      mapSleepTime=Long.parseLong(args[++i]);
      if (mapSleepTime < 0) {
        return printUsage(mapSleepTime + ": mapSleepTime must be >= 0");
      }
    }
 else     if (args[i].equals("-rt")) {
      reduceSleepTime=Long.parseLong(args[++i]);
      if (reduceSleepTime < 0) {
        return printUsage(reduceSleepTime + ": reduceSleepTime must be >= 0");
      }
    }
 else     if (args[i].equals("-recordt")) {
      recSleepTime=Long.parseLong(args[++i]);
      if (recSleepTime < 0) {
        return printUsage(recSleepTime + ": recordSleepTime must be >= 0");
      }
    }
  }
  mapSleepCount=(int)Math.ceil(mapSleepTime / ((double)recSleepTime));
  reduceSleepCount=(int)Math.ceil(reduceSleepTime / ((double)recSleepTime));
  Job job=createJob(numMapper,numReducer,mapSleepTime,mapSleepCount,reduceSleepTime,reduceSleepCount);
  return job.waitForCompletion(true) ? 0 : 1;
}
