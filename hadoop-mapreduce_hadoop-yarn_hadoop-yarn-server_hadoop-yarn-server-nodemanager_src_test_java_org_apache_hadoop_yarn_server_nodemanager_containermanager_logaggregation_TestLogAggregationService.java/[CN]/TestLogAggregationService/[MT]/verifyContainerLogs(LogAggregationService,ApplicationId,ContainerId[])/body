{
  AggregatedLogFormat.LogReader reader=new AggregatedLogFormat.LogReader(this.conf,logAggregationService.getRemoteNodeLogFileForApp(appId));
  try {
    Map<String,Map<String,String>> logMap=new HashMap<String,Map<String,String>>();
    DataInputStream valueStream;
    LogKey key=new LogKey();
    valueStream=reader.next(key);
    while (valueStream != null) {
      LOG.info("Found container " + key.toString());
      Map<String,String> perContainerMap=new HashMap<String,String>();
      logMap.put(key.toString(),perContainerMap);
      while (true) {
        try {
          DataOutputBuffer dob=new DataOutputBuffer();
          LogReader.readAContainerLogsForALogType(valueStream,dob);
          DataInputBuffer dib=new DataInputBuffer();
          dib.reset(dob.getData(),dob.getLength());
          Assert.assertEquals("\nLogType:",dib.readUTF());
          String fileType=dib.readUTF();
          Assert.assertEquals("\nLogLength:",dib.readUTF());
          String fileLengthStr=dib.readUTF();
          long fileLength=Long.parseLong(fileLengthStr);
          Assert.assertEquals("\nLog Contents:\n",dib.readUTF());
          byte[] buf=new byte[(int)fileLength];
          dib.read(buf,0,(int)fileLength);
          perContainerMap.put(fileType,new String(buf));
          LOG.info("LogType:" + fileType);
          LOG.info("LogType:" + fileLength);
          LOG.info("Log Contents:\n" + perContainerMap.get(fileType));
        }
 catch (        EOFException eof) {
          break;
        }
      }
      key=new LogKey();
      valueStream=reader.next(key);
    }
    Assert.assertEquals(expectedContainerIds.length,logMap.size());
    for (    ContainerId cId : expectedContainerIds) {
      String containerStr=ConverterUtils.toString(cId);
      Map<String,String> thisContainerMap=logMap.remove(containerStr);
      Assert.assertEquals(3,thisContainerMap.size());
      for (      String fileType : new String[]{"stdout","stderr","syslog"}) {
        String expectedValue=containerStr + " Hello " + fileType+ "!";
        LOG.info("Expected log-content : " + new String(expectedValue));
        String foundValue=thisContainerMap.remove(fileType);
        Assert.assertNotNull(cId + " " + fileType+ " not present in aggregated log-file!",foundValue);
        Assert.assertEquals(expectedValue,foundValue);
      }
      Assert.assertEquals(0,thisContainerMap.size());
    }
    Assert.assertEquals(0,logMap.size());
  }
  finally {
    reader.close();
  }
}
