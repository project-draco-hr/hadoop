{
  if (nodes.length != original.length + 1) {
    throw new IOException("Failed to replace a bad datanode on the existing pipeline " + "due to no more good datanodes being available to try. " + "(Nodes: current=" + Arrays.asList(nodes) + ", original="+ Arrays.asList(original)+ "). "+ "The current failed datanode replacement policy is "+ dfsClient.dtpReplaceDatanodeOnFailure+ ", and a client may configure this via '"+ BlockWrite.ReplaceDatanodeOnFailure.POLICY_KEY+ "' in its configuration.");
  }
  for (int i=0; i < nodes.length; i++) {
    int j=0;
    for (; j < original.length && !nodes[i].equals(original[j]); j++)     ;
    if (j == original.length) {
      return i;
    }
  }
  throw new IOException("Failed: new datanode not found: nodes=" + Arrays.asList(nodes) + ", original="+ Arrays.asList(original));
}
