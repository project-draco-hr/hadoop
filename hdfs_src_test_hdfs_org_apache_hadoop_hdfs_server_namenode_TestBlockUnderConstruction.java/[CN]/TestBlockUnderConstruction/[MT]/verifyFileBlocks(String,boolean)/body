{
  FSNamesystem ns=cluster.getNamesystem();
  INodeFile inode=ns.dir.getFileINode(file);
  assertTrue("File does not exist: " + inode.toString(),inode != null);
  assertTrue("File " + inode.toString() + " isUnderConstruction = "+ inode.isUnderConstruction()+ " expected to be "+ isFileOpen,inode.isUnderConstruction() == isFileOpen);
  BlockInfo[] blocks=inode.getBlocks();
  assertTrue("File does not have blocks: " + inode.toString(),blocks != null && blocks.length > 0);
  int idx=0;
  BlockInfo curBlock;
  for (; idx < blocks.length - 2; idx++) {
    curBlock=blocks[idx];
    assertTrue("Block is not complete: " + curBlock,curBlock.isComplete());
    assertTrue("Block is not in BlocksMap: " + curBlock,ns.getBlockManager().getStoredBlock(curBlock) == curBlock);
  }
  if (idx > 0) {
    curBlock=blocks[idx - 1];
    assertTrue("Block " + curBlock + " isUnderConstruction = "+ inode.isUnderConstruction()+ " expected to be "+ isFileOpen,(isFileOpen && curBlock.isComplete()) || (!isFileOpen && !curBlock.isComplete() == (curBlock.getBlockUCState() == BlockUCState.COMMITTED)));
    assertTrue("Block is not in BlocksMap: " + curBlock,ns.getBlockManager().getStoredBlock(curBlock) == curBlock);
  }
  curBlock=blocks[idx];
  if (!isFileOpen) {
    assertTrue("Block " + curBlock + ", isFileOpen = "+ isFileOpen,curBlock.isComplete());
  }
  assertTrue("Block is not in BlocksMap: " + curBlock,ns.getBlockManager().getStoredBlock(curBlock) == curBlock);
}
