{
  Principal luser=Mockito.mock(Principal.class);
  Mockito.when(luser.getName()).thenReturn("luser");
  kmsAudit.unauthorized(luser,KMS.GENERATE_EEK,"k2");
  Thread.sleep(1000);
  kmsAudit.ok(luser,KMS.GENERATE_EEK,"k3","testmsg");
  kmsAudit.ok(luser,KMS.GENERATE_EEK,"k3","testmsg");
  kmsAudit.ok(luser,KMS.GENERATE_EEK,"k3","testmsg");
  kmsAudit.ok(luser,KMS.GENERATE_EEK,"k3","testmsg");
  kmsAudit.ok(luser,KMS.GENERATE_EEK,"k3","testmsg");
  kmsAudit.unauthorized(luser,KMS.GENERATE_EEK,"k3");
  kmsAudit.ok(luser,KMS.GENERATE_EEK,"k3","testmsg");
  Thread.sleep(2000);
  String out=getAndResetLogOutput();
  System.out.println(out);
  Assert.assertTrue(out.matches("UNAUTHORIZED\\[op=GENERATE_EEK, key=k2, user=luser\\] " + "OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg" + "OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=5, interval=[^m]{1,4}ms\\] testmsg"+ "UNAUTHORIZED\\[op=GENERATE_EEK, key=k3, user=luser\\] "+ "OK\\[op=GENERATE_EEK, key=k3, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"));
}
