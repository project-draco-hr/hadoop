{
  Principal luser=Mockito.mock(Principal.class);
  Mockito.when(luser.getName()).thenReturn("luser");
  kmsAudit.ok(luser,KMS.DECRYPT_EEK,"k1","testmsg");
  kmsAudit.ok(luser,KMS.DECRYPT_EEK,"k1","testmsg");
  kmsAudit.ok(luser,KMS.DECRYPT_EEK,"k1","testmsg");
  kmsAudit.ok(luser,KMS.DELETE_KEY,"k1","testmsg");
  kmsAudit.ok(luser,KMS.ROLL_NEW_VERSION,"k1","testmsg");
  kmsAudit.ok(luser,KMS.DECRYPT_EEK,"k1","testmsg");
  kmsAudit.ok(luser,KMS.DECRYPT_EEK,"k1","testmsg");
  kmsAudit.ok(luser,KMS.DECRYPT_EEK,"k1","testmsg");
  Thread.sleep(1500);
  kmsAudit.ok(luser,KMS.DECRYPT_EEK,"k1","testmsg");
  Thread.sleep(1500);
  String out=getAndResetLogOutput();
  System.out.println(out);
  Assert.assertTrue(out.matches("OK\\[op=DECRYPT_EEK, key=k1, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg" + "OK\\[op=DELETE_KEY, key=k1, user=luser\\] testmsg" + "OK\\[op=ROLL_NEW_VERSION, key=k1, user=luser\\] testmsg"+ "OK\\[op=DECRYPT_EEK, key=k1, user=luser, accessCount=6, interval=[^m]{1,4}ms\\] testmsg"+ "OK\\[op=DECRYPT_EEK, key=k1, user=luser, accessCount=1, interval=[^m]{1,4}ms\\] testmsg"));
}
