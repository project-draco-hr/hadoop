{
  html.style(".metrics {margin-bottom:5px}");
  ResourceScheduler rs=rm.getResourceScheduler();
  QueueMetrics metrics=rs.getRootQueueMetrics();
  int appsSubmitted=metrics.getAppsSubmitted();
  int reservedGB=metrics.getReservedGB();
  int availableGB=metrics.getAvailableGB();
  int allocatedGB=metrics.getAllocatedGB();
  int containersAllocated=metrics.getAllocatedContainers();
  int totalGB=availableGB + reservedGB + allocatedGB;
  ConcurrentMap<NodeId,RMNode> nodes=rmContext.getRMNodes();
  int totalNodes=nodes.size();
  int lostNodes=0;
  int unhealthyNodes=0;
  int decommissionedNodes=0;
  for (  RMNode node : nodes.values()) {
    if (node == null || node.getState() == null) {
      lostNodes++;
      continue;
    }
switch (node.getState()) {
case DECOMMISSIONED:
      decommissionedNodes++;
    break;
case LOST:
  lostNodes++;
break;
case UNHEALTHY:
unhealthyNodes++;
break;
}
}
DIV<Hamlet> div=html.div().$class("metrics");
div.table("#metricsoverview").thead().$class("ui-widget-header").tr().th().$class("ui-state-default")._("Apps Submitted")._().th().$class("ui-state-default")._("Containers Running")._().th().$class("ui-state-default")._("Memory Used")._().th().$class("ui-state-default")._("Memopry Total")._().th().$class("ui-state-default")._("Memory Reserved")._().th().$class("ui-state-default")._("Total Nodes")._().th().$class("ui-state-default")._("Decommissioned Nodes")._().th().$class("ui-state-default")._("Lost Nodes")._().th().$class("ui-state-default")._("Unhealthy Nodes")._()._()._().tbody().$class("ui-widget-content").tr().td(String.valueOf(appsSubmitted)).td(String.valueOf(containersAllocated)).td(StringUtils.byteDesc(allocatedGB * BYTES_IN_GB)).td(StringUtils.byteDesc(totalGB * BYTES_IN_GB)).td(StringUtils.byteDesc(reservedGB * BYTES_IN_GB)).td().a(url("nodes"),String.valueOf(totalNodes))._().td().a(url("nodes/DECOMMISSIONED"),String.valueOf(decommissionedNodes))._().td().a(url("nodes/LOST"),String.valueOf(lostNodes))._().td().a(url("nodes/UNHEALTHY"),String.valueOf(unhealthyNodes))._()._()._()._();
String user=request().getRemoteUser();
if (user != null) {
QueueMetrics userMetrics=metrics.getUserMetrics(user);
if (userMetrics != null) {
int myAppsSubmitted=userMetrics.getAppsSubmitted();
int myRunningContainers=userMetrics.getAllocatedContainers();
int myPendingContainers=userMetrics.getPendingContainers();
int myReservedContainers=userMetrics.getReservedContainers();
int myReservedGB=userMetrics.getReservedGB();
int myPendingGB=userMetrics.getPendingGB();
int myAllocatedGB=userMetrics.getAllocatedGB();
div.table("#usermetricsoverview").thead().$class("ui-widget-header").tr().th().$class("ui-state-default")._("Apps Submitted (" + user + ")")._().th().$class("ui-state-default")._("Containers Running (" + user + ")")._().th().$class("ui-state-default")._("Containers Pending (" + user + ")")._().th().$class("ui-state-default")._("Containers Reserved (" + user + ")")._().th().$class("ui-state-default")._("Memory Used (" + user + ")")._().th().$class("ui-state-default")._("Memory Pending (" + user + ")")._().th().$class("ui-state-default")._("Memory Reserved (" + user + ")")._()._()._().tbody().$class("ui-widget-content").tr().td(String.valueOf(myAppsSubmitted)).td(String.valueOf(myRunningContainers)).td(String.valueOf(myPendingContainers)).td(String.valueOf(myReservedContainers)).td(StringUtils.byteDesc(myAllocatedGB * BYTES_IN_GB)).td(StringUtils.byteDesc(myPendingGB * BYTES_IN_GB)).td(StringUtils.byteDesc(myReservedGB * BYTES_IN_GB))._()._()._();
}
}
div._();
}
