{
  XMLUtils.addSaxString(contentHandler,"LENGTH",Integer.toString(length));
  XMLUtils.addSaxString(contentHandler,"INODEID",Long.toString(inodeId));
  XMLUtils.addSaxString(contentHandler,"PATH",path);
  XMLUtils.addSaxString(contentHandler,"REPLICATION",Short.valueOf(replication).toString());
  XMLUtils.addSaxString(contentHandler,"MTIME",Long.toString(mtime));
  XMLUtils.addSaxString(contentHandler,"ATIME",Long.toString(atime));
  XMLUtils.addSaxString(contentHandler,"BLOCKSIZE",Long.toString(blockSize));
  XMLUtils.addSaxString(contentHandler,"LAZY_PERSIST",Boolean.toString(isLazyPersist));
  XMLUtils.addSaxString(contentHandler,"CLIENT_NAME",clientName);
  XMLUtils.addSaxString(contentHandler,"CLIENT_MACHINE",clientMachine);
  for (  Block b : blocks) {
    FSEditLogOp.blockToXml(contentHandler,b);
  }
  FSEditLogOp.permissionStatusToXml(contentHandler,permissions);
  if (this.opCode == OP_ADD) {
    if (aclEntries != null) {
      appendAclEntriesToXml(contentHandler,aclEntries);
    }
    appendRpcIdsToXml(contentHandler,rpcClientId,rpcCallId);
  }
}
