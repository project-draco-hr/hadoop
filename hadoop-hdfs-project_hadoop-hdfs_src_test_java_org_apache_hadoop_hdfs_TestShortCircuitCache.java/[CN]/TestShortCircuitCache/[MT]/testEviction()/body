{
  final ShortCircuitCache cache=new ShortCircuitCache(2,10000000,1,10000000,1,10000);
  final TestFileDescriptorPair pairs[]=new TestFileDescriptorPair[]{new TestFileDescriptorPair(),new TestFileDescriptorPair(),new TestFileDescriptorPair()};
  ShortCircuitReplicaInfo replicaInfos[]=new ShortCircuitReplicaInfo[]{null,null,null};
  for (int i=0; i < pairs.length; i++) {
    replicaInfos[i]=cache.fetchOrCreate(new ExtendedBlockId(i,"test_bp1"),new SimpleReplicaCreator(i,cache,pairs[i]));
    Preconditions.checkNotNull(replicaInfos[i].getReplica());
    Preconditions.checkState(replicaInfos[i].getInvalidTokenException() == null);
    pairs[i].compareWith(replicaInfos[i].getReplica().getDataStream(),replicaInfos[i].getReplica().getMetaStream());
  }
  for (int i=0; i < pairs.length; i++) {
    replicaInfos[i].getReplica().unref();
  }
  for (int i=1; i < pairs.length; i++) {
    final Integer iVal=new Integer(i);
    replicaInfos[i]=cache.fetchOrCreate(new ExtendedBlockId(i,"test_bp1"),new ShortCircuitReplicaCreator(){
      @Override public ShortCircuitReplicaInfo createShortCircuitReplicaInfo(){
        Assert.fail("expected to use existing entry for " + iVal);
        return null;
      }
    }
);
    Preconditions.checkNotNull(replicaInfos[i].getReplica());
    Preconditions.checkState(replicaInfos[i].getInvalidTokenException() == null);
    pairs[i].compareWith(replicaInfos[i].getReplica().getDataStream(),replicaInfos[i].getReplica().getMetaStream());
  }
  final MutableBoolean calledCreate=new MutableBoolean(false);
  replicaInfos[0]=cache.fetchOrCreate(new ExtendedBlockId(0,"test_bp1"),new ShortCircuitReplicaCreator(){
    @Override public ShortCircuitReplicaInfo createShortCircuitReplicaInfo(){
      calledCreate.setValue(true);
      return null;
    }
  }
);
  Preconditions.checkState(replicaInfos[0].getReplica() == null);
  Assert.assertTrue(calledCreate.isTrue());
  for (int i=1; i < pairs.length; i++) {
    replicaInfos[i].getReplica().unref();
  }
  for (int i=0; i < pairs.length; i++) {
    pairs[i].close();
  }
  cache.close();
}
