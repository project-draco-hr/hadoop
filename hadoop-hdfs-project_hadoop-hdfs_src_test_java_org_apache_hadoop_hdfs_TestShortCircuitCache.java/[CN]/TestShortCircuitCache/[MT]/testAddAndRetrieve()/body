{
  final ShortCircuitCache cache=new ShortCircuitCache(10,10000000,10,10000000,1,10000);
  final TestFileDescriptorPair pair=new TestFileDescriptorPair();
  ShortCircuitReplicaInfo replicaInfo1=cache.fetchOrCreate(new Key(123,"test_bp1"),new SimpleReplicaCreator(123,cache,pair));
  Preconditions.checkNotNull(replicaInfo1.getReplica());
  Preconditions.checkState(replicaInfo1.getInvalidTokenException() == null);
  pair.compareWith(replicaInfo1.getReplica().getDataStream(),replicaInfo1.getReplica().getMetaStream());
  ShortCircuitReplicaInfo replicaInfo2=cache.fetchOrCreate(new Key(123,"test_bp1"),new ShortCircuitReplicaCreator(){
    @Override public ShortCircuitReplicaInfo createShortCircuitReplicaInfo(){
      Assert.fail("expected to use existing entry.");
      return null;
    }
  }
);
  Preconditions.checkNotNull(replicaInfo2.getReplica());
  Preconditions.checkState(replicaInfo2.getInvalidTokenException() == null);
  Preconditions.checkState(replicaInfo1 == replicaInfo2);
  pair.compareWith(replicaInfo2.getReplica().getDataStream(),replicaInfo2.getReplica().getMetaStream());
  replicaInfo1.getReplica().unref();
  replicaInfo2.getReplica().unref();
  ShortCircuitReplicaInfo replicaInfo3=cache.fetchOrCreate(new Key(123,"test_bp1"),new ShortCircuitReplicaCreator(){
    @Override public ShortCircuitReplicaInfo createShortCircuitReplicaInfo(){
      Assert.fail("expected to use existing entry.");
      return null;
    }
  }
);
  Preconditions.checkNotNull(replicaInfo3.getReplica());
  Preconditions.checkState(replicaInfo3.getInvalidTokenException() == null);
  replicaInfo3.getReplica().unref();
  pair.close();
  cache.close();
}
