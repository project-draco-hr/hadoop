{
  List<?> ifaces=ClassUtils.getAllInterfaces(rpcServerClass);
  List<Class<?>> serverProtocols=new ArrayList<>(ifaces.size());
  for (  Object obj : ifaces) {
    Class<?> iface=(Class<?>)obj;
    if (iface.getSimpleName().endsWith("Protocol") && iface != ReconfigurationProtocol.class) {
      serverProtocols.add(iface);
    }
  }
  Collections.sort(serverProtocols,CLASS_NAME_COMPARATOR);
  LOG.info("Running test {} for RPC server {}.  Found server protocols {} " + "and policy provider protocols {}.",testName.getMethodName(),rpcServerClass.getName(),serverProtocols,policyProviderProtocols);
  assertFalse("Expected to find at least one protocol in server.",serverProtocols.isEmpty());
  assertTrue(String.format("Expected all protocols for server %s to be defined in " + "%s.  Server contains protocols %s.  Policy provider contains " + "protocols %s.",rpcServerClass.getName(),HDFSPolicyProvider.class.getName(),serverProtocols,policyProviderProtocols),policyProviderProtocols.containsAll(serverProtocols));
}
