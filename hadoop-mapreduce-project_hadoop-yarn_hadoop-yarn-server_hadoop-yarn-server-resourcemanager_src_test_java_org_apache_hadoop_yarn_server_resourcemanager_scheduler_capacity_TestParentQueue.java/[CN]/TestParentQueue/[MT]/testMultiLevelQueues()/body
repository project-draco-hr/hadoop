{
  setupMultiLevelQueues(csConf);
  Map<String,Queue> queues=new HashMap<String,Queue>();
  Queue root=CapacityScheduler.parseQueue(csContext,csConf,null,CapacityScheduler.ROOT,queues,queues,CapacityScheduler.queueComparator,CapacityScheduler.applicationComparator,TestUtils.spyHook);
  final int memoryPerNode=10;
  final int numNodes=3;
  SchedulerNode node_0=TestUtils.getMockNode("host_0",DEFAULT_RACK,0,memoryPerNode * GB);
  SchedulerNode node_1=TestUtils.getMockNode("host_1",DEFAULT_RACK,0,memoryPerNode * GB);
  SchedulerNode node_2=TestUtils.getMockNode("host_2",DEFAULT_RACK,0,memoryPerNode * GB);
  final Resource clusterResource=Resources.createResource(numNodes * (memoryPerNode * GB));
  when(csContext.getNumClusterNodes()).thenReturn(numNodes);
  Queue a=queues.get(A);
  Queue b=queues.get(B);
  Queue c=queues.get(C);
  Queue d=queues.get(D);
  Queue a1=queues.get(A1);
  Queue a2=queues.get(A2);
  Queue b1=queues.get(B1);
  Queue b2=queues.get(B2);
  Queue b3=queues.get(B3);
  final float delta=0.0001f;
  stubQueueAllocation(a,clusterResource,node_0,0 * GB);
  stubQueueAllocation(b,clusterResource,node_0,0 * GB);
  stubQueueAllocation(c,clusterResource,node_0,1 * GB);
  stubQueueAllocation(d,clusterResource,node_0,0 * GB);
  root.assignContainers(clusterResource,node_0);
  assertEquals(computeQueueUtilization(a,0 * GB,clusterResource),a.getUtilization(),delta);
  assertEquals(computeQueueUtilization(b,0 * GB,clusterResource),b.getUtilization(),delta);
  assertEquals(computeQueueUtilization(c,1 * GB,clusterResource),c.getUtilization(),delta);
  assertEquals(computeQueueUtilization(d,0 * GB,clusterResource),d.getUtilization(),delta);
  reset(a);
  reset(b);
  reset(c);
  stubQueueAllocation(a,clusterResource,node_1,0 * GB);
  stubQueueAllocation(b2,clusterResource,node_1,4 * GB);
  stubQueueAllocation(c,clusterResource,node_1,0 * GB);
  root.assignContainers(clusterResource,node_1);
  assertEquals(computeQueueUtilization(a,0 * GB,clusterResource),a.getUtilization(),delta);
  assertEquals(computeQueueUtilization(b,4 * GB,clusterResource),b.getUtilization(),delta);
  assertEquals(computeQueueUtilization(c,1 * GB,clusterResource),c.getUtilization(),delta);
  reset(a);
  reset(b);
  reset(c);
  stubQueueAllocation(a1,clusterResource,node_0,1 * GB);
  stubQueueAllocation(b3,clusterResource,node_0,2 * GB);
  stubQueueAllocation(c,clusterResource,node_0,2 * GB);
  root.assignContainers(clusterResource,node_0);
  InOrder allocationOrder=inOrder(a,c,b);
  allocationOrder.verify(a).assignContainers(eq(clusterResource),any(SchedulerNode.class));
  allocationOrder.verify(c).assignContainers(eq(clusterResource),any(SchedulerNode.class));
  allocationOrder.verify(b).assignContainers(eq(clusterResource),any(SchedulerNode.class));
  assertEquals(computeQueueUtilization(a,1 * GB,clusterResource),a.getUtilization(),delta);
  assertEquals(computeQueueUtilization(b,6 * GB,clusterResource),b.getUtilization(),delta);
  assertEquals(computeQueueUtilization(c,3 * GB,clusterResource),c.getUtilization(),delta);
  reset(a);
  reset(b);
  reset(c);
  LOG.info("here");
  ((ParentQueue)a).setMaxCapacity(.1f);
  stubQueueAllocation(a1,clusterResource,node_2,1 * GB);
  stubQueueAllocation(a2,clusterResource,node_2,2 * GB);
  stubQueueAllocation(b3,clusterResource,node_2,1 * GB);
  stubQueueAllocation(b1,clusterResource,node_2,1 * GB);
  stubQueueAllocation(c,clusterResource,node_2,1 * GB);
  root.assignContainers(clusterResource,node_2);
  allocationOrder=inOrder(a,a2,a1,b,c);
  allocationOrder.verify(a).assignContainers(eq(clusterResource),any(SchedulerNode.class));
  allocationOrder.verify(a2).assignContainers(eq(clusterResource),any(SchedulerNode.class));
  allocationOrder.verify(b).assignContainers(eq(clusterResource),any(SchedulerNode.class));
  allocationOrder.verify(c).assignContainers(eq(clusterResource),any(SchedulerNode.class));
  assertEquals(computeQueueUtilization(a,3 * GB,clusterResource),a.getUtilization(),delta);
  assertEquals(computeQueueUtilization(b,8 * GB,clusterResource),b.getUtilization(),delta);
  assertEquals(computeQueueUtilization(c,4 * GB,clusterResource),c.getUtilization(),delta);
  reset(a);
  reset(b);
  reset(c);
}
