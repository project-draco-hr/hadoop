{
  final Path file=new Path("/file");
  FSDataOutputStream out=null;
  try {
    out=dfs.create(file,(short)1);
    INodeFile fileNode=dir.getINode4Write(file.toString()).asFile();
    ExtendedBlock previous=null;
    Block newBlock=DFSTestUtil.addBlockToFile(false,cluster.getDataNodes(),dfs,cluster.getNamesystem(),file.toString(),fileNode,dfs.getClient().getClientName(),previous,0,100);
    Block newBlockClone=new Block(newBlock);
    previous=new ExtendedBlock(cluster.getNamesystem().getBlockPoolId(),newBlockClone);
    previous.setGenerationStamp(123);
    try {
      dfs.getClient().getNamenode().complete(file.toString(),dfs.getClient().getClientName(),previous,fileNode.getId());
      Assert.fail("should throw exception because invalid genStamp");
    }
 catch (    IOException e) {
      Assert.assertTrue(e.toString().contains("Commit block with mismatching GS. NN has " + newBlock + ", client submits "+ newBlockClone));
    }
    previous=new ExtendedBlock(cluster.getNamesystem().getBlockPoolId(),newBlock);
    boolean complete=dfs.getClient().getNamenode().complete(file.toString(),dfs.getClient().getClientName(),previous,fileNode.getId());
    Assert.assertTrue("should complete successfully",complete);
  }
  finally {
    IOUtils.cleanup(null,out);
  }
}
