{
  ApplicationClientProtocol client=getClientRMService();
  GetNewApplicationResponse resp=client.getNewApplication(Records.newRecord(GetNewApplicationRequest.class));
  ApplicationId appId=resp.getApplicationId();
  SubmitApplicationRequest req=Records.newRecord(SubmitApplicationRequest.class);
  ApplicationSubmissionContext sub=Records.newRecord(ApplicationSubmissionContext.class);
  sub.setKeepContainersAcrossApplicationAttempts(keepContainers);
  sub.setApplicationId(appId);
  sub.setApplicationName(name);
  sub.setMaxAppAttempts(maxAppAttempts);
  if (unmanaged) {
    sub.setUnmanagedAM(true);
  }
  if (queue != null) {
    sub.setQueue(queue);
  }
  sub.setApplicationType(appType);
  ContainerLaunchContext clc=Records.newRecord(ContainerLaunchContext.class);
  final Resource capability=Records.newRecord(Resource.class);
  capability.setMemory(masterMemory);
  sub.setResource(capability);
  clc.setApplicationACLs(acls);
  if (ts != null && UserGroupInformation.isSecurityEnabled()) {
    DataOutputBuffer dob=new DataOutputBuffer();
    ts.writeTokenStorageToStream(dob);
    ByteBuffer securityTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
    clc.setTokens(securityTokens);
  }
  sub.setAMContainerSpec(clc);
  req.setApplicationSubmissionContext(sub);
  UserGroupInformation fakeUser=UserGroupInformation.createUserForTesting(user,new String[]{"someGroup"});
  PrivilegedAction<SubmitApplicationResponse> action=new PrivilegedAction<SubmitApplicationResponse>(){
    ApplicationClientProtocol client;
    SubmitApplicationRequest req;
    @Override public SubmitApplicationResponse run(){
      try {
        return client.submitApplication(req);
      }
 catch (      YarnException e) {
        e.printStackTrace();
      }
catch (      IOException e) {
        e.printStackTrace();
      }
      return null;
    }
    PrivilegedAction<SubmitApplicationResponse> setClientReq(    ApplicationClientProtocol client,    SubmitApplicationRequest req){
      this.client=client;
      this.req=req;
      return this;
    }
  }
.setClientReq(client,req);
  fakeUser.doAs(action);
  if (waitForAccepted) {
    waitForState(appId,RMAppState.ACCEPTED);
  }
  return getRMContext().getRMApps().get(appId);
}
