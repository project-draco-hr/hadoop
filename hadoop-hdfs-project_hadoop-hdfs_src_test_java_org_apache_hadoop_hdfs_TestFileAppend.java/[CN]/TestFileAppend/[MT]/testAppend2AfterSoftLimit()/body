{
  Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY,1);
  final long softLimit=1L;
  final long hardLimit=9999999L;
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  cluster.setLeasePeriod(softLimit,hardLimit);
  cluster.waitActive();
  DistributedFileSystem fs=cluster.getFileSystem();
  DistributedFileSystem fs2=new DistributedFileSystem();
  fs2.initialize(fs.getUri(),conf);
  final Path testPath=new Path("/testAppendAfterSoftLimit");
  final byte[] fileContents=AppendTestUtil.initBuffer(32);
  FSDataOutputStream out=fs.create(testPath);
  out.write(fileContents);
  Thread.sleep(250);
  try {
    FSDataOutputStream appendStream2=fs2.append(testPath,EnumSet.of(CreateFlag.APPEND,CreateFlag.NEW_BLOCK),4096,null);
    appendStream2.write(fileContents);
    appendStream2.close();
    assertEquals(fileContents.length,fs.getFileStatus(testPath).getLen());
    LocatedBlocks blks=fs.getClient().getLocatedBlocks(testPath.toString(),0L);
    assertEquals(1,blks.getLocatedBlocks().size());
    for (    LocatedBlock blk : blks.getLocatedBlocks()) {
      assertEquals(fileContents.length,blk.getBlockSize());
    }
  }
  finally {
    fs.close();
    fs2.close();
    cluster.shutdown();
  }
}
