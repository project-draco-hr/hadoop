{
  Configuration conf=new HdfsConfiguration();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).build();
  FileSystem fs=cluster.getFileSystem();
  InetSocketAddress addr=new InetSocketAddress("localhost",cluster.getNameNodePort());
  DFSClient client=new DFSClient(addr,conf);
  try {
    Path file1=new Path("/filestatus.dat");
    FSDataOutputStream stm=AppendTestUtil.createFile(fs,file1,1);
    writeFile(stm);
    stm.close();
    DataNode[] dn=cluster.listDataNodes();
    assertTrue("There should be only one datanode but found " + dn.length,dn.length == 1);
    LocatedBlocks locations=client.getNamenode().getBlockLocations(file1.toString(),0,Long.MAX_VALUE);
    List<LocatedBlock> blocks=locations.getLocatedBlocks();
    final FsDatasetSpi<?> fsd=dn[0].getFSDataset();
    for (int i=0; i < blocks.size(); i=i + 2) {
      ExtendedBlock b=blocks.get(i).getBlock();
      final File f=FsDatasetTestUtil.getBlockFile(fsd,b.getBlockPoolId(),b.getLocalBlock());
      File link=new File(f.toString() + ".link");
      System.out.println("Creating hardlink for File " + f + " to "+ link);
      HardLink.createHardLink(f,link);
    }
    for (int i=0; i < blocks.size(); i++) {
      ExtendedBlock b=blocks.get(i).getBlock();
      System.out.println("breakHardlinksIfNeeded detaching block " + b);
      assertTrue("breakHardlinksIfNeeded(" + b + ") should have returned true",FsDatasetTestUtil.breakHardlinksIfNeeded(fsd,b));
    }
    for (int i=0; i < blocks.size(); i++) {
      ExtendedBlock b=blocks.get(i).getBlock();
      System.out.println("breakHardlinksIfNeeded re-attempting to " + "detach block " + b);
      assertTrue("breakHardlinksIfNeeded(" + b + ") should have returned false",FsDatasetTestUtil.breakHardlinksIfNeeded(fsd,b));
    }
  }
  finally {
    client.close();
    fs.close();
    cluster.shutdown();
  }
}
