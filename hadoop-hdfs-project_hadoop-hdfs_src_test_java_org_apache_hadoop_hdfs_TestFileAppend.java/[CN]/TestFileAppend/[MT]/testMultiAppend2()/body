{
  Configuration conf=new HdfsConfiguration();
  conf.set("dfs.client.block.write.replace-datanode-on-failure.enable","false");
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  DistributedFileSystem fs=null;
  final String hello="hello\n";
  try {
    fs=cluster.getFileSystem();
    Path path=new Path("/test");
    FSDataOutputStream out=fs.create(path);
    out.writeBytes(hello);
    out.close();
    DataNodeProperties dnProp=cluster.stopDataNode(0);
    String dnAddress=dnProp.datanode.getXferAddress().toString();
    if (dnAddress.startsWith("/")) {
      dnAddress=dnAddress.substring(1);
    }
    for (int i=0; i < 2; i++) {
      out=fs.append(path,EnumSet.of(CreateFlag.APPEND,CreateFlag.NEW_BLOCK),4096,null);
      out.writeBytes(hello);
      out.close();
    }
    out=fs.append(path,EnumSet.of(CreateFlag.APPEND,CreateFlag.NEW_BLOCK),4096,null);
    cluster.restartDataNode(dnProp,true);
    Thread.sleep(2000);
    out.writeBytes(hello);
    out.close();
    LocatedBlocks blocks=fs.getClient().getLocatedBlocks(path.toString(),0L);
    assertEquals(4,blocks.getLocatedBlocks().size());
    for (    LocatedBlock block : blocks.getLocatedBlocks()) {
      assertEquals(hello.length(),block.getBlockSize());
    }
    StringBuilder sb=new StringBuilder();
    for (int i=0; i < 4; i++) {
      sb.append(hello);
    }
    final byte[] content=sb.toString().getBytes();
    AppendTestUtil.checkFullFile(fs,path,content.length,content,"Read /test");
    cluster.restartNameNode(true);
    cluster.waitActive();
    AppendTestUtil.checkFullFile(fs,path,content.length,content,"Read /test");
    blocks=fs.getClient().getLocatedBlocks(path.toString(),0L);
    assertEquals(4,blocks.getLocatedBlocks().size());
    for (    LocatedBlock block : blocks.getLocatedBlocks()) {
      assertEquals(hello.length(),block.getBlockSize());
    }
  }
  finally {
    IOUtils.closeStream(fs);
    cluster.shutdown();
  }
}
