{
  Configuration conf=new HdfsConfiguration();
  conf.set("dfs.client.block.write.replace-datanode-on-failure.enable","false");
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  DistributedFileSystem fs=null;
  try {
    fs=cluster.getFileSystem();
    Path path=new Path("/test");
    FSDataOutputStream out=fs.create(path);
    out.writeBytes("hello\n");
    out.close();
    DataNodeProperties dnProp=cluster.stopDataNode(0);
    String dnAddress=dnProp.datanode.getXferAddress().toString();
    if (dnAddress.startsWith("/")) {
      dnAddress=dnAddress.substring(1);
    }
    for (int i=0; i < 2; i++) {
      out=fs.append(path);
      out.writeBytes("helloagain\n");
      out.close();
    }
    out=fs.append(path);
    cluster.restartDataNode(dnProp,true);
    Thread.sleep(2000);
    BlockLocation[] locations=fs.getFileBlockLocations(path,0,Long.MAX_VALUE);
    String[] names=locations[0].getNames();
    for (    String node : names) {
      if (node.equals(dnAddress)) {
        fail("Failed append should not be present in latest block locations.");
      }
    }
    out.close();
  }
  finally {
    IOUtils.closeStream(fs);
    cluster.shutdown();
  }
}
