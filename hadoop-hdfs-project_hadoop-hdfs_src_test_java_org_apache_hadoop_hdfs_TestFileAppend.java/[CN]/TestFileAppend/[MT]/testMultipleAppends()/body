{
  final long startTime=Time.monotonicNow();
  final Configuration conf=new HdfsConfiguration();
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_FILE_CLOSE_NUM_COMMITTED_ALLOWED_KEY,1);
  final MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(4).build();
  final DistributedFileSystem fs=cluster.getFileSystem();
  try {
    final Path p=new Path("/testMultipleAppend/foo");
    final int blockSize=1 << 16;
    final byte[] data=AppendTestUtil.initBuffer(blockSize);
    fs.create(p,true,4096,(short)3,blockSize).close();
    int fileLen=0;
    for (int i=0; i < 10 || Time.monotonicNow() - startTime < RANDOM_TEST_RUNTIME; i++) {
      int appendLen=ThreadLocalRandom.current().nextInt(100) + 1;
      if (fileLen + appendLen > data.length) {
        break;
      }
      AppendTestUtil.LOG.info(i + ") fileLen=" + fileLen+ ", appendLen="+ appendLen);
      final FSDataOutputStream out=fs.append(p);
      out.write(data,fileLen,appendLen);
      out.close();
      fileLen+=appendLen;
    }
    Assert.assertEquals(fileLen,fs.getFileStatus(p).getLen());
    final byte[] actual=new byte[fileLen];
    final FSDataInputStream in=fs.open(p);
    in.readFully(actual);
    in.close();
    for (int i=0; i < fileLen; i++) {
      Assert.assertEquals(data[i],actual[i]);
    }
  }
  finally {
    fs.close();
    cluster.shutdown();
  }
}
