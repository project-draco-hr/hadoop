{
  DatanodeDescriptor dn=new DatanodeDescriptor(new DatanodeID("127.0.0.1","localhost","abcd",5000,5001,5002,5003));
  CachedBlock[] blocks=new CachedBlock[]{new CachedBlock(0L,(short)1,true),new CachedBlock(1L,(short)1,true),new CachedBlock(2L,(short)1,true)};
  Assert.assertTrue("expected pending cached list to start off empty.",!dn.getPendingCached().iterator().hasNext());
  Assert.assertTrue("expected cached list to start off empty.",!dn.getCached().iterator().hasNext());
  Assert.assertTrue("expected pending uncached list to start off empty.",!dn.getPendingUncached().iterator().hasNext());
  Assert.assertTrue(dn.getCached().add(blocks[0]));
  Assert.assertTrue("expected pending cached list to still be empty.",!dn.getPendingCached().iterator().hasNext());
  Assert.assertEquals("failed to insert blocks[0]",blocks[0],dn.getCached().iterator().next());
  Assert.assertTrue("expected pending uncached list to still be empty.",!dn.getPendingUncached().iterator().hasNext());
  Assert.assertTrue(dn.getCached().add(blocks[1]));
  Iterator<CachedBlock> iter=dn.getCached().iterator();
  Assert.assertEquals(blocks[0],iter.next());
  Assert.assertEquals(blocks[1],iter.next());
  Assert.assertTrue(!iter.hasNext());
  Assert.assertTrue(dn.getCached().addFirst(blocks[2]));
  iter=dn.getCached().iterator();
  Assert.assertEquals(blocks[2],iter.next());
  Assert.assertEquals(blocks[0],iter.next());
  Assert.assertEquals(blocks[1],iter.next());
  Assert.assertTrue(!iter.hasNext());
  Assert.assertTrue(dn.getCached().remove(blocks[0]));
  iter=dn.getCached().iterator();
  Assert.assertEquals(blocks[2],iter.next());
  Assert.assertEquals(blocks[1],iter.next());
  Assert.assertTrue(!iter.hasNext());
  dn.getCached().clear();
  Assert.assertTrue("expected cached list to be empty after clear.",!dn.getPendingCached().iterator().hasNext());
}
