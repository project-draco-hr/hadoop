{
  ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(ApplicationId.newInstance(1,2),1);
  EventHandler handler=Mockito.mock(EventHandler.class);
  Dispatcher dispatcher=Mockito.mock(Dispatcher.class);
  Mockito.when(dispatcher.getEventHandler()).thenReturn(handler);
  RMContext rmContext=Mockito.mock(RMContext.class);
  Mockito.when(rmContext.getDispatcher()).thenReturn(dispatcher);
  ApplicationSubmissionContext appContext=Mockito.mock(ApplicationSubmissionContext.class);
  Mockito.when(appContext.getUnmanagedAM()).thenReturn(unmanaged);
  RMAppAttemptImpl attempt=new RMAppAttemptImpl(attemptId,rmContext,null,null,appContext,new YarnConfiguration(),null);
  RMAppAttemptRegistrationEvent event=Mockito.mock(RMAppAttemptRegistrationEvent.class);
  Mockito.when(event.getHost()).thenReturn("h");
  Mockito.when(event.getRpcport()).thenReturn(0);
  Mockito.when(event.getTrackingurl()).thenReturn(url);
  new RMAppAttemptImpl.AMRegisteredTransition().transition(attempt,event);
  if (unmanaged) {
    Assert.assertEquals(url,attempt.getTrackingUrl());
  }
 else {
    Assert.assertNotSame(url,attempt.getTrackingUrl());
    Assert.assertTrue(attempt.getTrackingUrl().contains(ProxyUriUtils.PROXY_SERVLET_NAME));
    Assert.assertTrue(attempt.getTrackingUrl().contains(attemptId.getApplicationId().toString()));
  }
}
