{
  final int NUM_THREAD_IDS=10;
  final int NUM_KEYS_PER_THREAD=1000;
  ScheduledThreadPoolExecutor executor=new ScheduledThreadPoolExecutor(2 * NUM_THREAD_IDS,new ThreadFactoryBuilder().setDaemon(true).setNameFormat("testConcurrentDeprecateAndManipulate modification thread %d").build());
  final CountDownLatch latch=new CountDownLatch(1);
  final AtomicInteger highestModificationThreadId=new AtomicInteger(1);
  List<Future<Void>> futures=new LinkedList<Future<Void>>();
  for (int i=0; i < NUM_THREAD_IDS; i++) {
    futures.add(executor.schedule(new Callable<Void>(){
      @Override public Void call() throws Exception {
        latch.await();
        int threadIndex=highestModificationThreadId.addAndGet(1);
        for (int i=0; i < NUM_KEYS_PER_THREAD; i++) {
          String testKey=getTestKeyName(threadIndex,i);
          String testNewKey=testKey + ".new";
          Configuration.addDeprecations(new DeprecationDelta[]{new DeprecationDelta(testKey,testNewKey)});
        }
        return null;
      }
    }
,0,TimeUnit.SECONDS));
  }
  final AtomicInteger highestAccessThreadId=new AtomicInteger(1);
  for (int i=0; i < NUM_THREAD_IDS; i++) {
    futures.add(executor.schedule(new Callable<Void>(){
      @Override public Void call() throws Exception {
        Configuration conf=new Configuration();
        latch.await();
        int threadIndex=highestAccessThreadId.addAndGet(1);
        for (int i=0; i < NUM_KEYS_PER_THREAD; i++) {
          String testNewKey=getTestKeyName(threadIndex,i) + ".new";
          String value="value." + threadIndex + "."+ i;
          conf.set(testNewKey,value);
          Assert.assertEquals(value,conf.get(testNewKey));
        }
        return null;
      }
    }
,0,TimeUnit.SECONDS));
  }
  latch.countDown();
  for (  Future<Void> future : futures) {
    Uninterruptibles.getUninterruptibly(future);
  }
}
