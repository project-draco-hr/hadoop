{
  this.nnc=theblockpool;
  this.keyManager=nnc.getKeyManager();
  this.excludedNodes=excludedNodes;
  this.includedNodes=includedNodes;
  final long movedWinWidth=conf.getLong(DFSConfigKeys.DFS_BALANCER_MOVEDWINWIDTH_KEY,DFSConfigKeys.DFS_BALANCER_MOVEDWINWIDTH_DEFAULT);
  movedBlocks=new MovedBlocks<BalancerDatanode.StorageGroup>(movedWinWidth);
  this.cluster=NetworkTopology.getInstance(conf);
  this.moveExecutor=Executors.newFixedThreadPool(conf.getInt(DFSConfigKeys.DFS_BALANCER_MOVERTHREADS_KEY,DFSConfigKeys.DFS_BALANCER_MOVERTHREADS_DEFAULT));
  this.dispatchExecutor=Executors.newFixedThreadPool(conf.getInt(DFSConfigKeys.DFS_BALANCER_DISPATCHERTHREADS_KEY,DFSConfigKeys.DFS_BALANCER_DISPATCHERTHREADS_DEFAULT));
  this.maxConcurrentMovesPerNode=conf.getInt(DFSConfigKeys.DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_KEY,DFSConfigKeys.DFS_DATANODE_BALANCE_MAX_NUM_CONCURRENT_MOVES_DEFAULT);
  final boolean fallbackToSimpleAuthAllowed=conf.getBoolean(CommonConfigurationKeys.IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_KEY,CommonConfigurationKeys.IPC_CLIENT_FALLBACK_TO_SIMPLE_AUTH_ALLOWED_DEFAULT);
  this.saslClient=new SaslDataTransferClient(DataTransferSaslUtil.getSaslPropertiesResolver(conf),TrustedChannelResolver.getInstance(conf),fallbackToSimpleAuthAllowed);
}
