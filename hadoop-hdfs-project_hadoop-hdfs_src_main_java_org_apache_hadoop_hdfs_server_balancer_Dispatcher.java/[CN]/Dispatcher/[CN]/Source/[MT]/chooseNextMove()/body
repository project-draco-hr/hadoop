{
  for (Iterator<Task> i=tasks.iterator(); i.hasNext(); ) {
    final Task task=i.next();
    final DDatanode target=task.target.getDDatanode();
    final PendingMove pendingBlock=new PendingMove(this,task.target);
    if (target.addPendingBlock(pendingBlock)) {
      if (pendingBlock.chooseBlockAndProxy()) {
        long blockSize=pendingBlock.reportedBlock.getNumBytes(this);
        incScheduledSize(-blockSize);
        task.size-=blockSize;
        if (task.size == 0) {
          i.remove();
        }
        return pendingBlock;
      }
 else {
        target.removePendingBlock(pendingBlock);
      }
    }
  }
  return null;
}
