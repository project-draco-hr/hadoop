{
  statusOutput.print("Usage: \n" + "administrative subcommands:\n" + "-v1                  specify version 1 of the jt logs\n"+ "-h or -help          print this message\n"+ "-d or -debug         print voluminous debug info during processing\n"+ "-collect-prefixes    collect the prefixes of log lines\n\n"+ "  job trace subcommands\n"+ "-write-job-trace     takes a filename.\n"+ "                     writes job trace in JSON to that filename\n"+ "-single-line-job-traces  omit prettyprinting of job trace\n"+ "-omit-task-details   leave out info about each task and attempt,\n"+ "                     so only statistical info is added to each job\n"+ "-write-topology      takes a filename.\n"+ "                     writes JSON file giving network topology\n"+ "-job-digest-spectra  takes a list of percentile points\n"+ "                     writes CDFs with min, max, and those percentiles\n\n"+ "subcommands for task statistical info\n"+ "-spreads             we have a mode where, for each job, we can\n"+ "                     develop the ratio of percentile B to percentile A\n"+ "                     of task run times.  Having developed that ratio,\n"+ "                     we can consider it to be a datum and we can\n"+ "                     build a CDF of those ratios.  -spreads turns\n"+ "                     this option on, and takes A and B\n"+ "-delays              tells us to gather and print CDFs for delays\n"+ "                     from job submit to job start\n"+ "-runtimes            prints CDFs of job wallclock times [launch\n"+ "                     to finish]\n"+ "-tasktimes           prints CDFs of job wallclock times [launch\n"+ "                     to finish]\n\n");
}
