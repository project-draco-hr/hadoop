{
  JobID jobId=JobID.forName(jobIdStr);
  Cluster mockCluster=mock(Cluster.class);
  Job job=mock(Job.class);
  CLI cli=spy(new CLI());
  doReturn(mockCluster).when(cli).createCluster();
  when(job.getTaskReports(TaskType.MAP)).thenReturn(getTaskReports(jobId,TaskType.MAP));
  when(job.getTaskReports(TaskType.REDUCE)).thenReturn(getTaskReports(jobId,TaskType.REDUCE));
  when(mockCluster.getJob(jobId)).thenReturn(job);
  int retCode_MAP=cli.run(new String[]{"-list-attempt-ids",jobIdStr,"MAP","running"});
  int retCode_map=cli.run(new String[]{"-list-attempt-ids",jobIdStr,"map","running"});
  int retCode_REDUCE=cli.run(new String[]{"-list-attempt-ids",jobIdStr,"REDUCE","running"});
  assertEquals("MAP is a valid input,exit code should be 0",0,retCode_MAP);
  assertEquals("map is a valid input,exit code should be 0",0,retCode_map);
  assertEquals("REDUCE is a valid input,exit code should be 0",0,retCode_REDUCE);
  verify(job,times(2)).getTaskReports(TaskType.MAP);
  verify(job,times(1)).getTaskReports(TaskType.REDUCE);
}
