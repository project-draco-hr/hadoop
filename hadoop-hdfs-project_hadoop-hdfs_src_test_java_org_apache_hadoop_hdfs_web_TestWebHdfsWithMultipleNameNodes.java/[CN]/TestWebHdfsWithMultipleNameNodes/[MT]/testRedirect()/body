{
  final String dir="/testRedirect/";
  final String filename="file";
  final Path p=new Path(dir,filename);
  final String[] writeStrings=createStrings("write to webhdfs ","write");
  final String[] appendStrings=createStrings("append to webhdfs ","append");
  for (int i=0; i < webhdfs.length; i++) {
    final FSDataOutputStream out=webhdfs[i].create(p);
    out.write(writeStrings[i].getBytes());
    out.close();
  }
  for (int i=0; i < webhdfs.length; i++) {
    final long expected=writeStrings[i].length();
    Assert.assertEquals(expected,webhdfs[i].getFileStatus(p).getLen());
  }
  for (int i=0; i < webhdfs.length; i++) {
    final FSDataInputStream in=webhdfs[i].open(p);
    for (int c, j=0; (c=in.read()) != -1; j++) {
      Assert.assertEquals(writeStrings[i].charAt(j),c);
    }
    in.close();
  }
  for (int i=0; i < webhdfs.length; i++) {
    final FSDataOutputStream out=webhdfs[i].append(p);
    out.write(appendStrings[i].getBytes());
    out.close();
  }
  for (int i=0; i < webhdfs.length; i++) {
    final long expected=writeStrings[i].length() + appendStrings[i].length();
    Assert.assertEquals(expected,webhdfs[i].getFileStatus(p).getLen());
  }
  for (int i=0; i < webhdfs.length; i++) {
    final StringBuilder b=new StringBuilder();
    final FSDataInputStream in=webhdfs[i].open(p);
    for (int c; (c=in.read()) != -1; ) {
      b.append((char)c);
    }
    final int wlen=writeStrings[i].length();
    Assert.assertEquals(writeStrings[i],b.substring(0,wlen));
    Assert.assertEquals(appendStrings[i],b.substring(wlen));
    in.close();
  }
}
