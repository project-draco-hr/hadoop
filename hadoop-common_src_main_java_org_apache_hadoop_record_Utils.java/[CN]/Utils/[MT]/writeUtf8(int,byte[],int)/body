{
  if (cpt >= 0 && cpt <= 0x7F) {
    bytes[offset]=(byte)cpt;
    return 1;
  }
  if (cpt >= 0x80 && cpt <= 0x07FF) {
    bytes[offset + 1]=(byte)(B10 | (cpt & 0x3F));
    cpt=cpt >> 6;
    bytes[offset]=(byte)(B110 | (cpt & 0x1F));
    return 2;
  }
  if ((cpt >= 0x0800 && cpt < 0xD800) || (cpt > 0xDFFF && cpt <= 0xFFFD)) {
    bytes[offset + 2]=(byte)(B10 | (cpt & 0x3F));
    cpt=cpt >> 6;
    bytes[offset + 1]=(byte)(B10 | (cpt & 0x3F));
    cpt=cpt >> 6;
    bytes[offset]=(byte)(B1110 | (cpt & 0x0F));
    return 3;
  }
  if (cpt >= 0x10000 && cpt <= 0x10FFFF) {
    bytes[offset + 3]=(byte)(B10 | (cpt & 0x3F));
    cpt=cpt >> 6;
    bytes[offset + 2]=(byte)(B10 | (cpt & 0x3F));
    cpt=cpt >> 6;
    bytes[offset + 1]=(byte)(B10 | (cpt & 0x3F));
    cpt=cpt >> 6;
    bytes[offset]=(byte)(B11110 | (cpt & 0x07));
    return 4;
  }
  throw new IOException("Illegal Unicode Codepoint " + Integer.toHexString(cpt) + " in string.");
}
