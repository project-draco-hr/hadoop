{
  HttpConfig.Policy policy=DFSUtil.getHttpPolicy(conf);
  boolean isSecure=UserGroupInformation.isSecurityEnabled();
  InetSocketAddress streamingAddr=DataNode.getStreamingAddr(conf);
  int socketWriteTimeout=conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,HdfsServerConstants.WRITE_TIMEOUT);
  ServerSocket ss=(socketWriteTimeout > 0) ? ServerSocketChannel.open().socket() : new ServerSocket();
  ss.bind(streamingAddr,0);
  if (ss.getLocalPort() != streamingAddr.getPort()) {
    throw new RuntimeException("Unable to bind on specified streaming port in secure " + "context. Needed " + streamingAddr.getPort() + ", got "+ ss.getLocalPort());
  }
  if (ss.getLocalPort() > 1023 && isSecure) {
    throw new RuntimeException("Cannot start secure datanode with unprivileged RPC ports");
  }
  System.err.println("Opened streaming server at " + streamingAddr);
  Connector listener=null;
  if (policy.isHttpEnabled()) {
    listener=HttpServer2.createDefaultChannelConnector();
    InetSocketAddress infoSocAddr=DataNode.getInfoAddr(conf);
    listener.setHost(infoSocAddr.getHostName());
    listener.setPort(infoSocAddr.getPort());
    listener.open();
    if (listener.getPort() != infoSocAddr.getPort()) {
      throw new RuntimeException("Unable to bind on specified info port in secure " + "context. Needed " + streamingAddr.getPort() + ", got "+ ss.getLocalPort());
    }
    System.err.println("Successfully obtained privileged resources (streaming port = " + ss + " ) (http listener port = "+ listener.getConnection()+ ")");
    if (listener.getPort() > 1023 && isSecure) {
      throw new RuntimeException("Cannot start secure datanode with unprivileged HTTP ports");
    }
    System.err.println("Opened info server at " + infoSocAddr);
  }
  return new SecureResources(ss,listener);
}
