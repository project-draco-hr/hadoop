{
  HttpConfig.Policy policy=DFSUtil.getHttpPolicy(conf);
  boolean isSecure=UserGroupInformation.isSecurityEnabled();
  InetSocketAddress streamingAddr=DataNode.getStreamingAddr(conf);
  int socketWriteTimeout=conf.getInt(DFSConfigKeys.DFS_DATANODE_SOCKET_WRITE_TIMEOUT_KEY,HdfsConstants.WRITE_TIMEOUT);
  int backlogLength=conf.getInt(CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_KEY,CommonConfigurationKeysPublic.IPC_SERVER_LISTEN_QUEUE_SIZE_DEFAULT);
  ServerSocket ss=(socketWriteTimeout > 0) ? ServerSocketChannel.open().socket() : new ServerSocket();
  ss.bind(streamingAddr,backlogLength);
  if (ss.getLocalPort() != streamingAddr.getPort()) {
    throw new RuntimeException("Unable to bind on specified streaming port in secure " + "context. Needed " + streamingAddr.getPort() + ", got "+ ss.getLocalPort());
  }
  if (!SecurityUtil.isPrivilegedPort(ss.getLocalPort()) && isSecure) {
    throw new RuntimeException("Cannot start secure datanode with unprivileged RPC ports");
  }
  System.err.println("Opened streaming server at " + streamingAddr);
  final ServerSocketChannel httpChannel;
  if (policy.isHttpEnabled()) {
    httpChannel=ServerSocketChannel.open();
    InetSocketAddress infoSocAddr=DataNode.getInfoAddr(conf);
    httpChannel.socket().bind(infoSocAddr);
    InetSocketAddress localAddr=(InetSocketAddress)httpChannel.socket().getLocalSocketAddress();
    if (localAddr.getPort() != infoSocAddr.getPort()) {
      throw new RuntimeException("Unable to bind on specified info port in secure " + "context. Needed " + streamingAddr.getPort() + ", got "+ ss.getLocalPort());
    }
    System.err.println("Successfully obtained privileged resources (streaming port = " + ss + " ) (http listener port = "+ localAddr.getPort()+ ")");
    if (localAddr.getPort() > 1023 && isSecure) {
      throw new RuntimeException("Cannot start secure datanode with unprivileged HTTP ports");
    }
    System.err.println("Opened info server at " + infoSocAddr);
  }
 else {
    httpChannel=null;
  }
  return new SecureResources(ss,httpChannel);
}
