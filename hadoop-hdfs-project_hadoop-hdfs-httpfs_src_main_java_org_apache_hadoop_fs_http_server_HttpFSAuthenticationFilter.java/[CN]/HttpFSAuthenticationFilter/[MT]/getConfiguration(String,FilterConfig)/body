{
  Properties props=new Properties();
  Configuration conf=HttpFSServerWebApp.get().getConfig();
  props.setProperty(AuthenticationFilter.COOKIE_PATH,"/");
  for (  Map.Entry<String,String> entry : conf) {
    String name=entry.getKey();
    if (name.startsWith(CONF_PREFIX)) {
      String value=conf.get(name);
      name=name.substring(CONF_PREFIX.length());
      props.setProperty(name,value);
    }
  }
  String signatureSecretFile=props.getProperty(SIGNATURE_SECRET_FILE,null);
  if (signatureSecretFile == null) {
    throw new RuntimeException("Undefined property: " + SIGNATURE_SECRET_FILE);
  }
  try {
    StringBuilder secret=new StringBuilder();
    Reader reader=new InputStreamReader(new FileInputStream(signatureSecretFile),Charsets.UTF_8);
    int c=reader.read();
    while (c > -1) {
      secret.append((char)c);
      c=reader.read();
    }
    reader.close();
    props.setProperty(AuthenticationFilter.SIGNATURE_SECRET,secret.toString());
  }
 catch (  IOException ex) {
    throw new RuntimeException("Could not read HttpFS signature secret file: " + signatureSecretFile);
  }
  setAuthHandlerClass(props);
  props.setProperty(KerberosDelegationTokenAuthenticationHandler.TOKEN_KIND,WebHdfsConstants.WEBHDFS_TOKEN_KIND.toString());
  return props;
}
