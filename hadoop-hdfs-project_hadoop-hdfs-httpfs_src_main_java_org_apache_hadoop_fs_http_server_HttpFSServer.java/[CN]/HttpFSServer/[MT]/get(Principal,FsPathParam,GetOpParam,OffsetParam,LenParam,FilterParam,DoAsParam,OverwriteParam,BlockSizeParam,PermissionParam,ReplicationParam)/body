{
  Response response=null;
  if (op == null) {
    throw new UnsupportedOperationException(MessageFormat.format("Missing [{0}] parameter",GetOpParam.NAME));
  }
 else {
    path.makeAbsolute();
    MDC.put(HttpFSFileSystem.OP_PARAM,op.value().name());
switch (op.value()) {
case OPEN:
{
        FSOperations.FSOpen command=new FSOperations.FSOpen(path.value());
        FileSystem fs=createFileSystem(user,doAs.value());
        InputStream is=command.execute(fs);
        AUDIT_LOG.info("[{}] offset [{}] len [{}]",new Object[]{path,offset,len});
        InputStreamEntity entity=new InputStreamEntity(is,offset.value(),len.value());
        response=Response.ok(entity).type(MediaType.APPLICATION_OCTET_STREAM).build();
        break;
      }
case GETFILESTATUS:
{
      FSOperations.FSFileStatus command=new FSOperations.FSFileStatus(path.value());
      Map json=fsExecute(user,doAs.value(),command);
      AUDIT_LOG.info("[{}]",path);
      response=Response.ok(json).type(MediaType.APPLICATION_JSON).build();
      break;
    }
case LISTSTATUS:
{
    FSOperations.FSListStatus command=new FSOperations.FSListStatus(path.value(),filter.value());
    Map json=fsExecute(user,doAs.value(),command);
    if (filter.value() == null) {
      AUDIT_LOG.info("[{}]",path);
    }
 else {
      AUDIT_LOG.info("[{}] filter [{}]",path,filter.value());
    }
    response=Response.ok(json).type(MediaType.APPLICATION_JSON).build();
    break;
  }
case GETHOMEDIR:
{
  FSOperations.FSHomeDir command=new FSOperations.FSHomeDir();
  JSONObject json=fsExecute(user,doAs.value(),command);
  AUDIT_LOG.info("");
  response=Response.ok(json).type(MediaType.APPLICATION_JSON).build();
  break;
}
case INSTRUMENTATION:
{
if (!path.value().equals("/")) {
  throw new UnsupportedOperationException(MessageFormat.format("Invalid path for {0}={1}, must be '/'",GetOpParam.NAME,HttpFSFileSystem.GetOpValues.INSTRUMENTATION));
}
Groups groups=HttpFSServerWebApp.get().get(Groups.class);
List<String> userGroups=groups.getGroups(user.getName());
if (!userGroups.contains(HttpFSServerWebApp.get().getAdminGroup())) {
  throw new AccessControlException("User not in HttpFSServer admin group");
}
Instrumentation instrumentation=HttpFSServerWebApp.get().get(Instrumentation.class);
Map snapshot=instrumentation.getSnapshot();
response=Response.ok(snapshot).build();
break;
}
case GETCONTENTSUMMARY:
{
FSOperations.FSContentSummary command=new FSOperations.FSContentSummary(path.value());
Map json=fsExecute(user,doAs.value(),command);
AUDIT_LOG.info("[{}]",path);
response=Response.ok(json).type(MediaType.APPLICATION_JSON).build();
break;
}
case GETFILECHECKSUM:
{
FSOperations.FSFileChecksum command=new FSOperations.FSFileChecksum(path.value());
Map json=fsExecute(user,doAs.value(),command);
AUDIT_LOG.info("[{}]",path);
response=Response.ok(json).type(MediaType.APPLICATION_JSON).build();
break;
}
case GETDELEGATIONTOKEN:
{
response=Response.status(Response.Status.BAD_REQUEST).build();
break;
}
case GETFILEBLOCKLOCATIONS:
{
response=Response.status(Response.Status.BAD_REQUEST).build();
break;
}
}
return response;
}
}
