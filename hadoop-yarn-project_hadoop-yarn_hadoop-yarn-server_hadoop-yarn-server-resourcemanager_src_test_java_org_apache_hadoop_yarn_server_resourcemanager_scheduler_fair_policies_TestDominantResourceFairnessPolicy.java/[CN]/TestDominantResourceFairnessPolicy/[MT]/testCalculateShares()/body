{
  Resource used=Resources.createResource(10,5);
  Resource capacity=Resources.createResource(100,10);
  ResourceType[] resourceOrder=new ResourceType[2];
  ResourceWeights shares=new ResourceWeights();
  DominantResourceFairnessPolicy.DominantResourceFairnessComparator comparator=new DominantResourceFairnessPolicy.DominantResourceFairnessComparator();
  comparator.calculateShares(used,capacity,shares,resourceOrder,ResourceWeights.NEUTRAL);
  assertEquals(.1,shares.getWeight(ResourceType.MEMORY),.00001);
  assertEquals(.5,shares.getWeight(ResourceType.CPU),.00001);
  assertEquals(ResourceType.CPU,resourceOrder[0]);
  assertEquals(ResourceType.MEMORY,resourceOrder[1]);
}
