{
  Configuration yarnConf=new YarnConfiguration();
  CapacityScheduler scheduler=new CapacityScheduler();
  scheduler.setConf(yarnConf);
  ConfigurationProvider configurationProvider=ConfigurationProviderFactory.getConfigurationProvider(yarnConf);
  configurationProvider.init(yarnConf);
  context.setConfigurationProvider(configurationProvider);
  RMNodeLabelsManager nlm=new RMNodeLabelsManager();
  nlm.init(yarnConf);
  nlm.start();
  context.setNodeLabelManager(nlm);
  scheduler.setRMContext(context);
  scheduler.init(yarnConf);
  scheduler.start();
  dispatcher.register(SchedulerEventType.class,scheduler);
  String hostname1="localhost1";
  Resource capability=BuilderUtils.newResource(4096,4);
  RegisterNodeManagerRequest request1=recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);
  NodeId nodeId1=NodeId.newInstance(hostname1,0);
  request1.setNodeId(nodeId1);
  request1.setHttpPort(0);
  request1.setResource(capability);
  resourceTrackerService.registerNodeManager(request1);
  Assert.assertNotNull(context.getRMNodes().get(nodeId1));
  Assert.assertTrue(scheduler.getSchedulerNode(nodeId1).getRMNode() == context.getRMNodes().get(nodeId1));
  Assert.assertEquals(context.getRMNodes().get(nodeId1).getTotalCapability(),capability);
  Resource capability1=BuilderUtils.newResource(2048,2);
  request1.setResource(capability1);
  resourceTrackerService.registerNodeManager(request1);
  Assert.assertNotNull(context.getRMNodes().get(nodeId1));
  Assert.assertTrue(scheduler.getSchedulerNode(nodeId1).getRMNode() == context.getRMNodes().get(nodeId1));
  Assert.assertEquals(context.getRMNodes().get(nodeId1).getTotalCapability(),capability1);
  nlm.stop();
  scheduler.stop();
}
