{
  NodeId nodeId=ConverterUtils.toNodeId(nodeIdStr);
  List<NodeReport> nodesReport=client.getNodeReports();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintWriter nodeReportStr=new PrintWriter(baos);
  NodeReport nodeReport=null;
  for (  NodeReport report : nodesReport) {
    if (!report.getNodeId().equals(nodeId)) {
      continue;
    }
    nodeReport=report;
    nodeReportStr.println("Node Report : ");
    nodeReportStr.print("\tNode-Id : ");
    nodeReportStr.println(nodeReport.getNodeId());
    nodeReportStr.print("\tRack : ");
    nodeReportStr.println(nodeReport.getRackName());
    nodeReportStr.print("\tNode-State : ");
    nodeReportStr.println(nodeReport.getNodeState());
    nodeReportStr.print("\tNode-Http-Address : ");
    nodeReportStr.println(nodeReport.getHttpAddress());
    nodeReportStr.print("\tLast-Health-Update : ");
    nodeReportStr.println(DateFormatUtils.format(new Date(nodeReport.getLastHealthReportTime()),"E dd/MMM/yy hh:mm:ss:SSzz"));
    nodeReportStr.print("\tHealth-Report : ");
    nodeReportStr.println(nodeReport.getHealthReport());
    nodeReportStr.print("\tContainers : ");
    nodeReportStr.println(nodeReport.getNumContainers());
    nodeReportStr.print("\tMemory-Used : ");
    nodeReportStr.println((nodeReport.getUsed() == null) ? "0MB" : (nodeReport.getUsed().getMemory() + "MB"));
    nodeReportStr.print("\tMemory-Capacity : ");
    nodeReportStr.println(nodeReport.getCapability().getMemory() + "MB");
    nodeReportStr.print("\tCPU-Used : ");
    nodeReportStr.println((nodeReport.getUsed() == null) ? "0 vcores" : (nodeReport.getUsed().getVirtualCores() + " vcores"));
    nodeReportStr.print("\tCPU-Capacity : ");
    nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + " vcores");
  }
  if (nodeReport == null) {
    nodeReportStr.print("Could not find the node report for node id : " + nodeIdStr);
  }
  nodeReportStr.close();
  sysout.println(baos.toString("UTF-8"));
}
