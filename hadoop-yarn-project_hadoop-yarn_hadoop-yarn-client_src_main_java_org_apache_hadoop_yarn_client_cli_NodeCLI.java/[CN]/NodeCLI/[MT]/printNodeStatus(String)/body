{
  NodeId nodeId=NodeId.fromString(nodeIdStr);
  List<NodeReport> nodesReport=client.getNodeReports();
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  PrintWriter nodeReportStr=new PrintWriter(new OutputStreamWriter(baos,Charset.forName("UTF-8")));
  NodeReport nodeReport=null;
  for (  NodeReport report : nodesReport) {
    if (!report.getNodeId().equals(nodeId)) {
      continue;
    }
    nodeReport=report;
    nodeReportStr.println("Node Report : ");
    nodeReportStr.print("\tNode-Id : ");
    nodeReportStr.println(nodeReport.getNodeId());
    nodeReportStr.print("\tRack : ");
    nodeReportStr.println(nodeReport.getRackName());
    nodeReportStr.print("\tNode-State : ");
    nodeReportStr.println(nodeReport.getNodeState());
    nodeReportStr.print("\tNode-Http-Address : ");
    nodeReportStr.println(nodeReport.getHttpAddress());
    nodeReportStr.print("\tLast-Health-Update : ");
    nodeReportStr.println(DateFormatUtils.format(new Date(nodeReport.getLastHealthReportTime()),"E dd/MMM/yy hh:mm:ss:SSzz"));
    nodeReportStr.print("\tHealth-Report : ");
    nodeReportStr.println(nodeReport.getHealthReport());
    nodeReportStr.print("\tContainers : ");
    nodeReportStr.println(nodeReport.getNumContainers());
    nodeReportStr.print("\tMemory-Used : ");
    nodeReportStr.println((nodeReport.getUsed() == null) ? "0MB" : (nodeReport.getUsed().getMemorySize() + "MB"));
    nodeReportStr.print("\tMemory-Capacity : ");
    nodeReportStr.println(nodeReport.getCapability().getMemorySize() + "MB");
    nodeReportStr.print("\tCPU-Used : ");
    nodeReportStr.println((nodeReport.getUsed() == null) ? "0 vcores" : (nodeReport.getUsed().getVirtualCores() + " vcores"));
    nodeReportStr.print("\tCPU-Capacity : ");
    nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + " vcores");
    nodeReportStr.print("\tNode-Labels : ");
    List<String> nodeLabelsList=new ArrayList<String>(report.getNodeLabels());
    Collections.sort(nodeLabelsList);
    nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(),','));
    nodeReportStr.print("\tResource Utilization by Node : ");
    if (nodeReport.getNodeUtilization() != null) {
      nodeReportStr.print("PMem:" + nodeReport.getNodeUtilization().getPhysicalMemory() + " MB, VMem:"+ nodeReport.getNodeUtilization().getVirtualMemory()+ " MB, VCores:"+ nodeReport.getNodeUtilization().getCPU());
    }
    nodeReportStr.println();
    nodeReportStr.print("\tResource Utilization by Containers : ");
    if (nodeReport.getAggregatedContainersUtilization() != null) {
      nodeReportStr.print("PMem:" + nodeReport.getAggregatedContainersUtilization().getPhysicalMemory() + " MB, VMem:"+ nodeReport.getAggregatedContainersUtilization().getVirtualMemory()+ " MB, VCores:"+ nodeReport.getAggregatedContainersUtilization().getCPU());
    }
    nodeReportStr.println();
  }
  if (nodeReport == null) {
    nodeReportStr.print("Could not find the node report for node id : " + nodeIdStr);
  }
  nodeReportStr.close();
  sysout.println(baos.toString("UTF-8"));
}
