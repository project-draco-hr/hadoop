{
  Options opts=new Options();
  opts.addOption(STATUS_CMD,true,"Prints the status report of the node.");
  opts.addOption(LIST_CMD,false,"List all running nodes. " + "Supports optional use of --states to filter nodes " + "based on node state, all --all to list all nodes.");
  Option nodeStateOpt=new Option(NODE_STATE_CMD,true,"Works with -list to filter nodes based on their states.");
  nodeStateOpt.setValueSeparator(',');
  nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);
  nodeStateOpt.setArgName("Comma-separated list of node states");
  opts.addOption(nodeStateOpt);
  Option allOpt=new Option(NODE_ALL,false,"Works with -list to list all nodes.");
  opts.addOption(allOpt);
  CommandLine cliParser=new GnuParser().parse(opts,args);
  int exitCode=-1;
  if (cliParser.hasOption("status")) {
    if (args.length != 2) {
      printUsage(opts);
      return exitCode;
    }
    printNodeStatus(cliParser.getOptionValue("status"));
  }
 else   if (cliParser.hasOption("list")) {
    Set<NodeState> nodeStates=new HashSet<NodeState>();
    if (cliParser.hasOption(NODE_ALL)) {
      for (      NodeState state : NodeState.values()) {
        nodeStates.add(state);
      }
    }
 else     if (cliParser.hasOption(NODE_STATE_CMD)) {
      String[] types=cliParser.getOptionValues(NODE_STATE_CMD);
      if (types != null) {
        for (        String type : types) {
          if (!type.trim().isEmpty()) {
            nodeStates.add(NodeState.valueOf(type.trim().toUpperCase()));
          }
        }
      }
    }
 else {
      nodeStates.add(NodeState.RUNNING);
    }
    listClusterNodes(nodeStates);
  }
 else {
    syserr.println("Invalid Command Usage : ");
    printUsage(opts);
  }
  return 0;
}
