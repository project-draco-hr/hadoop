{
  Options opts=new Options();
  opts.addOption(HELP_CMD,false,"Displays help for all commands.");
  opts.addOption(STATUS_CMD,true,"Prints the status report of the node.");
  opts.addOption(LIST_CMD,false,"List all running nodes. " + "Supports optional use of -states to filter nodes " + "based on node state, all -all to list all nodes, "+ "-showDetails to display more details about each node.");
  Option nodeStateOpt=new Option(NODE_STATE_CMD,true,"Works with -list to filter nodes based on input comma-separated " + "list of node states. " + getAllValidNodeStates());
  nodeStateOpt.setValueSeparator(',');
  nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);
  nodeStateOpt.setArgName("States");
  opts.addOption(nodeStateOpt);
  Option allOpt=new Option(NODE_ALL,false,"Works with -list to list all nodes.");
  opts.addOption(allOpt);
  Option showDetailsOpt=new Option(NODE_SHOW_DETAILS,false,"Works with -list to show more details about each node.");
  opts.addOption(showDetailsOpt);
  opts.getOption(STATUS_CMD).setArgName("NodeId");
  if (args != null && args.length > 0) {
    for (int i=args.length - 1; i >= 0; i--) {
      if (args[i].equalsIgnoreCase("-" + NODE_ALL)) {
        args[i]="-" + NODE_ALL;
      }
    }
  }
  int exitCode=-1;
  CommandLine cliParser=null;
  try {
    cliParser=new GnuParser().parse(opts,args);
  }
 catch (  MissingArgumentException ex) {
    sysout.println("Missing argument for options");
    printUsage(opts);
    return exitCode;
  }
  if (cliParser.hasOption("status")) {
    if (args.length != 2) {
      printUsage(opts);
      return exitCode;
    }
    printNodeStatus(cliParser.getOptionValue("status"));
  }
 else   if (cliParser.hasOption("list")) {
    Set<NodeState> nodeStates=new HashSet<NodeState>();
    if (cliParser.hasOption(NODE_ALL)) {
      for (      NodeState state : NodeState.values()) {
        nodeStates.add(state);
      }
    }
 else     if (cliParser.hasOption(NODE_STATE_CMD)) {
      String[] types=cliParser.getOptionValues(NODE_STATE_CMD);
      if (types != null) {
        for (        String type : types) {
          if (!type.trim().isEmpty()) {
            try {
              nodeStates.add(NodeState.valueOf(org.apache.hadoop.util.StringUtils.toUpperCase(type.trim())));
            }
 catch (            IllegalArgumentException ex) {
              sysout.println("The node state " + type + " is invalid.");
              sysout.println(getAllValidNodeStates());
              return exitCode;
            }
          }
        }
      }
    }
 else {
      nodeStates.add(NodeState.RUNNING);
    }
    if (cliParser.hasOption(NODE_SHOW_DETAILS)) {
      listDetailedClusterNodes(nodeStates);
    }
 else {
      listClusterNodes(nodeStates);
    }
  }
 else   if (cliParser.hasOption(HELP_CMD)) {
    printUsage(opts);
    return 0;
  }
 else {
    syserr.println("Invalid Command Usage : ");
    printUsage(opts);
  }
  return 0;
}
