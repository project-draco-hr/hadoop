{
  PrintWriter writer=new PrintWriter(new OutputStreamWriter(sysout,Charset.forName("UTF-8")));
  List<NodeReport> nodesReport=client.getNodeReports(nodeStates.toArray(new NodeState[0]));
  writer.println("Total Nodes:" + nodesReport.size());
  writer.printf(NODES_PATTERN,"Node-Id","Node-State","Node-Http-Address","Number-of-Running-Containers");
  for (  NodeReport nodeReport : nodesReport) {
    writer.printf(NODES_PATTERN,nodeReport.getNodeId(),nodeReport.getNodeState(),nodeReport.getHttpAddress(),nodeReport.getNumContainers());
    writer.println("Detailed Node Information :");
    writer.print("\tConfigured Resources : ");
    writer.println(nodeReport.getCapability());
    writer.print("\tAllocated Resources : ");
    if (nodeReport.getUsed() != null) {
      writer.print(nodeReport.getUsed());
    }
    writer.println();
    writer.print("\tResource Utilization by Node : ");
    if (nodeReport.getNodeUtilization() != null) {
      writer.print("PMem:" + nodeReport.getNodeUtilization().getPhysicalMemory() + " MB, VMem:"+ nodeReport.getNodeUtilization().getVirtualMemory()+ " MB, VCores:"+ nodeReport.getNodeUtilization().getCPU());
    }
    writer.println();
    writer.print("\tResource Utilization by Containers : ");
    if (nodeReport.getAggregatedContainersUtilization() != null) {
      writer.print("PMem:" + nodeReport.getAggregatedContainersUtilization().getPhysicalMemory() + " MB, VMem:"+ nodeReport.getAggregatedContainersUtilization().getVirtualMemory()+ " MB, VCores:"+ nodeReport.getAggregatedContainersUtilization().getCPU());
    }
    writer.println();
    writer.print("\tNode-Labels : ");
    List<String> nodeLabelsList=new ArrayList<String>(nodeReport.getNodeLabels());
    Collections.sort(nodeLabelsList);
    writer.println(StringUtils.join(nodeLabelsList.iterator(),','));
  }
  writer.flush();
}
