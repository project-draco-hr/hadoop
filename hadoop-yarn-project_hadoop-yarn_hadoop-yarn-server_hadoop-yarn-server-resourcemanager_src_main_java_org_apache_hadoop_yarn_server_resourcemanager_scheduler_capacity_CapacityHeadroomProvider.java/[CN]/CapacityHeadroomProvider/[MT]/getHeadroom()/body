{
  Resource queueCurrentLimit;
  Resource clusterResource;
synchronized (queueResourceLimitsInfo) {
    queueCurrentLimit=queueResourceLimitsInfo.getQueueCurrentLimit();
    clusterResource=queueResourceLimitsInfo.getClusterResource();
  }
  Set<String> requestedPartitions=application.getAppSchedulingInfo().getRequestedPartitions();
  Resource headroom;
  if (requestedPartitions.isEmpty() || (requestedPartitions.size() == 1 && requestedPartitions.contains(RMNodeLabelsManager.NO_LABEL))) {
    headroom=queue.getHeadroom(user,queueCurrentLimit,clusterResource,application);
  }
 else {
    headroom=Resource.newInstance(0,0);
    for (    String partition : requestedPartitions) {
      Resource partitionHeadRoom=queue.getHeadroom(user,queueCurrentLimit,clusterResource,application,partition);
      Resources.addTo(headroom,partitionHeadRoom);
    }
  }
  if (headroom.getMemory() < 0) {
    headroom.setMemory(0);
  }
  return headroom;
}
