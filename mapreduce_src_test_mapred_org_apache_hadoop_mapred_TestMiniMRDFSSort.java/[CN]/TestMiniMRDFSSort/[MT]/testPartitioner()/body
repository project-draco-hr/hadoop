{
  JobConf conf=mrCluster.createJobConf();
  conf.setPartitionerClass(BadPartitioner.class);
  conf.setNumReduceTasks(3);
  FileSystem fs=FileSystem.get(conf);
  Path testdir=new Path("blah").makeQualified(fs.getUri(),fs.getWorkingDirectory());
  Path inFile=new Path(testdir,"blah");
  DataOutputStream f=fs.create(inFile);
  f.writeBytes("blah blah blah\n");
  f.close();
  FileInputFormat.setInputPaths(conf,inFile);
  FileOutputFormat.setOutputPath(conf,new Path(testdir,"out"));
  conf.setMapperClass(IdentityMapper.class);
  conf.setReducerClass(IdentityReducer.class);
  conf.setOutputKeyClass(LongWritable.class);
  conf.setOutputValueClass(Text.class);
  conf.setMaxMapAttempts(1);
  conf.setBoolean("test.testmapred.badpartition",true);
  boolean pass=true;
  try {
    JobClient.runJob(conf);
  }
 catch (  IOException e) {
    pass=false;
  }
  assertFalse("should fail for partition < 0",pass);
  conf.setBoolean("test.testmapred.badpartition",false);
  pass=true;
  try {
    JobClient.runJob(conf);
  }
 catch (  IOException e) {
    pass=false;
  }
  assertFalse("should fail for partition >= numPartitions",pass);
}
