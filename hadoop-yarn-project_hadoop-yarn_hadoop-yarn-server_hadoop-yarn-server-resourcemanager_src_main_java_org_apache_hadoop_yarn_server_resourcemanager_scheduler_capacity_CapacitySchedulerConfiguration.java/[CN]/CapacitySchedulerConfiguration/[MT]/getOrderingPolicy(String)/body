{
  String policyType=get(getQueuePrefix(queue) + ORDERING_POLICY,DEFAULT_ORDERING_POLICY);
  OrderingPolicy<S> orderingPolicy;
  if (policyType.trim().equals(FIFO_ORDERING_POLICY)) {
    policyType=FifoOrderingPolicy.class.getName();
  }
  if (policyType.trim().equals(FAIR_ORDERING_POLICY)) {
    policyType=FairOrderingPolicy.class.getName();
  }
  try {
    orderingPolicy=(OrderingPolicy<S>)Class.forName(policyType).newInstance();
  }
 catch (  Exception e) {
    String message="Unable to construct ordering policy for: " + policyType + ", "+ e.getMessage();
    throw new RuntimeException(message,e);
  }
  Map<String,String> config=new HashMap<String,String>();
  String confPrefix=getQueuePrefix(queue) + ORDERING_POLICY + ".";
  for (  Map.Entry<String,String> kv : this) {
    if (kv.getKey().startsWith(confPrefix)) {
      config.put(kv.getKey().substring(confPrefix.length()),kv.getValue());
    }
  }
  orderingPolicy.configure(config);
  return orderingPolicy;
}
