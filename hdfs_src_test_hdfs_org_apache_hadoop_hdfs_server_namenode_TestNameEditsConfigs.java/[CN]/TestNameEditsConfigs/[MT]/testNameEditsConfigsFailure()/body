{
  Path file1=new Path("TestNameEditsConfigs1");
  Path file2=new Path("TestNameEditsConfigs2");
  Path file3=new Path("TestNameEditsConfigs3");
  MiniDFSCluster cluster=null;
  Configuration conf=null;
  FileSystem fileSys=null;
  File newNameDir=new File(base_dir,"name");
  File newEditsDir=new File(base_dir,"edits");
  File nameAndEdits=new File(base_dir,"name_and_edits");
  conf=new HdfsConfiguration();
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameAndEdits.getPath());
  conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,nameAndEdits.getPath());
  replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).manageNameDfsDirs(false).build();
  cluster.waitActive();
  assertTrue(new File(nameAndEdits,"current/VERSION").exists());
  fileSys=cluster.getFileSystem();
  try {
    assertTrue(!fileSys.exists(file1));
    writeFile(fileSys,file1,replication);
    checkFile(fileSys,file1,replication);
  }
  finally {
    fileSys.close();
    cluster.shutdown();
  }
  conf=new HdfsConfiguration();
  assertTrue(newNameDir.mkdir());
  assertTrue(newEditsDir.mkdir());
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameAndEdits.getPath() + "," + newNameDir.getPath());
  conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,nameAndEdits.getPath() + "," + newEditsDir.getPath());
  replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build();
  cluster.waitActive();
  assertTrue(new File(nameAndEdits,"current/VERSION").exists());
  assertTrue(new File(newNameDir,"current/VERSION").exists());
  assertTrue(new File(newEditsDir,"current/VERSION").exists());
  fileSys=cluster.getFileSystem();
  try {
    assertTrue(fileSys.exists(file1));
    checkFile(fileSys,file1,replication);
    cleanupFile(fileSys,file1);
    writeFile(fileSys,file2,replication);
    checkFile(fileSys,file2,replication);
  }
  finally {
    fileSys.close();
    cluster.shutdown();
  }
  conf=new HdfsConfiguration();
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,newNameDir.getPath());
  conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,newEditsDir.getPath());
  replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build();
  cluster.waitActive();
  fileSys=cluster.getFileSystem();
  try {
    assertTrue(!fileSys.exists(file1));
    assertTrue(fileSys.exists(file2));
    checkFile(fileSys,file2,replication);
    cleanupFile(fileSys,file2);
    writeFile(fileSys,file3,replication);
    checkFile(fileSys,file3,replication);
  }
  finally {
    fileSys.close();
    cluster.shutdown();
  }
  conf=new HdfsConfiguration();
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,newNameDir.getPath() + "," + nameAndEdits.getPath());
  conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,nameAndEdits.getPath());
  replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build();
    assertTrue(false);
  }
 catch (  IOException e) {
    System.out.println("cluster start failed due to missing " + "latest edits dir");
  }
 finally {
    cluster=null;
  }
  conf=new HdfsConfiguration();
  conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY,nameAndEdits.getPath());
  conf.set(DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_KEY,newEditsDir.getPath() + "," + nameAndEdits.getPath());
  replication=(short)conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATA_NODES).format(false).manageNameDfsDirs(false).build();
    assertTrue(!fileSys.exists(file1));
    assertTrue(fileSys.exists(file2));
    checkFile(fileSys,file2,replication);
    cleanupFile(fileSys,file2);
    writeFile(fileSys,file3,replication);
    checkFile(fileSys,file3,replication);
  }
 catch (  IOException e) {
    System.out.println("cluster start failed due to missing latest name dir");
  }
 finally {
    fileSys.close();
    cluster.shutdown();
  }
}
