{
  String jobId=TypeConverter.fromYarn(context.getApplicationID()).toString();
  String stagingDirStr=null;
  String doneDirStr=null;
  String userDoneDirStr=null;
  try {
    stagingDirStr=JobHistoryUtils.getConfiguredHistoryStagingDirPrefix(conf,jobId);
    doneDirStr=JobHistoryUtils.getConfiguredHistoryIntermediateDoneDirPrefix(conf);
    userDoneDirStr=JobHistoryUtils.getHistoryIntermediateDoneDirForUser(conf);
  }
 catch (  IOException e) {
    LOG.error("Failed while getting the configured log directories",e);
    throw new YarnRuntimeException(e);
  }
  try {
    stagingDirPath=FileContext.getFileContext(conf).makeQualified(new Path(stagingDirStr));
    stagingDirFS=FileSystem.get(stagingDirPath.toUri(),conf);
    mkdir(stagingDirFS,stagingDirPath,new FsPermission(JobHistoryUtils.HISTORY_STAGING_DIR_PERMISSIONS));
  }
 catch (  IOException e) {
    LOG.error("Failed while checking for/creating  history staging path: [" + stagingDirPath + "]",e);
    throw new YarnRuntimeException(e);
  }
  Path doneDirPath=null;
  try {
    doneDirPath=FileContext.getFileContext(conf).makeQualified(new Path(doneDirStr));
    doneDirFS=FileSystem.get(doneDirPath.toUri(),conf);
    if (!doneDirFS.exists(doneDirPath)) {
      if (JobHistoryUtils.shouldCreateNonUserDirectory(conf)) {
        LOG.info("Creating intermediate history logDir: [" + doneDirPath + "] + based on conf. Should ideally be created by the JobHistoryServer: "+ MRJobConfig.MR_AM_CREATE_JH_INTERMEDIATE_BASE_DIR);
        mkdir(doneDirFS,doneDirPath,new FsPermission(JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));
      }
 else {
        String message="Not creating intermediate history logDir: [" + doneDirPath + "] based on conf: "+ MRJobConfig.MR_AM_CREATE_JH_INTERMEDIATE_BASE_DIR+ ". Either set to true or pre-create this directory with"+ " appropriate permissions";
        LOG.error(message);
        throw new YarnRuntimeException(message);
      }
    }
  }
 catch (  IOException e) {
    LOG.error("Failed checking for the existance of history intermediate " + "done directory: [" + doneDirPath + "]");
    throw new YarnRuntimeException(e);
  }
  try {
    doneDirPrefixPath=FileContext.getFileContext(conf).makeQualified(new Path(userDoneDirStr));
    mkdir(doneDirFS,doneDirPrefixPath,new FsPermission(JobHistoryUtils.HISTORY_INTERMEDIATE_USER_DIR_PERMISSIONS));
  }
 catch (  IOException e) {
    LOG.error("Error creating user intermediate history done directory: [ " + doneDirPrefixPath + "]",e);
    throw new YarnRuntimeException(e);
  }
  maxUnflushedCompletionEvents=conf.getInt(MRJobConfig.MR_AM_HISTORY_MAX_UNFLUSHED_COMPLETE_EVENTS,MRJobConfig.DEFAULT_MR_AM_HISTORY_MAX_UNFLUSHED_COMPLETE_EVENTS);
  postJobCompletionMultiplier=conf.getInt(MRJobConfig.MR_AM_HISTORY_JOB_COMPLETE_UNFLUSHED_MULTIPLIER,MRJobConfig.DEFAULT_MR_AM_HISTORY_JOB_COMPLETE_UNFLUSHED_MULTIPLIER);
  flushTimeout=conf.getLong(MRJobConfig.MR_AM_HISTORY_COMPLETE_EVENT_FLUSH_TIMEOUT_MS,MRJobConfig.DEFAULT_MR_AM_HISTORY_COMPLETE_EVENT_FLUSH_TIMEOUT_MS);
  minQueueSizeForBatchingFlushes=conf.getInt(MRJobConfig.MR_AM_HISTORY_USE_BATCHED_FLUSH_QUEUE_SIZE_THRESHOLD,MRJobConfig.DEFAULT_MR_AM_HISTORY_USE_BATCHED_FLUSH_QUEUE_SIZE_THRESHOLD);
  if (conf.getBoolean(MRJobConfig.MAPREDUCE_JOB_EMIT_TIMELINE_DATA,MRJobConfig.DEFAULT_MAPREDUCE_JOB_EMIT_TIMELINE_DATA)) {
    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {
      timelineClient=TimelineClient.createTimelineClient();
      timelineClient.init(conf);
      LOG.info("Timeline service is enabled");
      LOG.info("Emitting job history data to the timeline server is enabled");
    }
 else {
      LOG.info("Timeline service is not enabled");
    }
  }
 else {
    LOG.info("Emitting job history data to the timeline server is not enabled");
  }
  String jhistFormat=conf.get(JHAdminConfig.MR_HS_JHIST_FORMAT,JHAdminConfig.DEFAULT_MR_HS_JHIST_FORMAT);
  if (jhistFormat.equals("json")) {
    jhistMode=EventWriter.WriteMode.JSON;
  }
 else   if (jhistFormat.equals("binary")) {
    jhistMode=EventWriter.WriteMode.BINARY;
  }
 else {
    LOG.warn("Unrecognized value '" + jhistFormat + "' for property "+ JHAdminConfig.MR_HS_JHIST_FORMAT+ ".  Valid values are "+ "'json' or 'binary'.  Falling back to default value '"+ JHAdminConfig.DEFAULT_MR_HS_JHIST_FORMAT+ "'.");
  }
  super.serviceInit(conf);
}
