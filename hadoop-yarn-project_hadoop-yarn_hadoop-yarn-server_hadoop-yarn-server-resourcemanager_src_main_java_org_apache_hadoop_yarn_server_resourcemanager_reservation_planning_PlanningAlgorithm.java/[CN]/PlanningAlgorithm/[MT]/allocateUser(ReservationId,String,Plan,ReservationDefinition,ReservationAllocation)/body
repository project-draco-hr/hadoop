{
  ReservationDefinition adjustedContract=adjustContract(plan,contract);
  RLESparseResourceAllocation allocation=computeJobAllocation(plan,reservationId,adjustedContract);
  if (allocation == null) {
    throw new PlanningException("The planning algorithm could not find a valid allocation" + " for your request");
  }
  long step=plan.getStep();
  long jobArrival=stepRoundUp(adjustedContract.getArrival(),step);
  long jobDeadline=stepRoundUp(adjustedContract.getDeadline(),step);
  Map<ReservationInterval,Resource> mapAllocations=allocationsToPaddedMap(allocation,jobArrival,jobDeadline);
  ReservationAllocation capReservation=new InMemoryReservationAllocation(reservationId,adjustedContract,user,plan.getQueueName(),findEarliestTime(mapAllocations.keySet()),findLatestTime(mapAllocations.keySet()),mapAllocations,plan.getResourceCalculator(),plan.getMinimumAllocation());
  if (oldReservation != null) {
    return plan.updateReservation(capReservation);
  }
 else {
    return plan.addReservation(capReservation);
  }
}
