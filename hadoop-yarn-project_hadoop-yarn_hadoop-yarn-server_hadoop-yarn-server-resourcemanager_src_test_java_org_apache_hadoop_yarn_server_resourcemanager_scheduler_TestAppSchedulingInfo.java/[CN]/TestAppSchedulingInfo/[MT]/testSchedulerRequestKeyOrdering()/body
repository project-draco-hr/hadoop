{
  TreeSet<SchedulerRequestKey> ts=new TreeSet<>();
  ts.add(TestUtils.toSchedulerKey(Priority.newInstance(1),1));
  ts.add(TestUtils.toSchedulerKey(Priority.newInstance(1),2));
  ts.add(TestUtils.toSchedulerKey(Priority.newInstance(0),4));
  ts.add(TestUtils.toSchedulerKey(Priority.newInstance(0),3));
  ts.add(TestUtils.toSchedulerKey(Priority.newInstance(2),5));
  ts.add(TestUtils.toSchedulerKey(Priority.newInstance(2),6));
  Iterator<SchedulerRequestKey> iter=ts.iterator();
  SchedulerRequestKey sk=iter.next();
  Assert.assertEquals(0,sk.getPriority().getPriority());
  Assert.assertEquals(3,sk.getAllocationRequestId());
  sk=iter.next();
  Assert.assertEquals(0,sk.getPriority().getPriority());
  Assert.assertEquals(4,sk.getAllocationRequestId());
  sk=iter.next();
  Assert.assertEquals(1,sk.getPriority().getPriority());
  Assert.assertEquals(1,sk.getAllocationRequestId());
  sk=iter.next();
  Assert.assertEquals(1,sk.getPriority().getPriority());
  Assert.assertEquals(2,sk.getAllocationRequestId());
  sk=iter.next();
  Assert.assertEquals(2,sk.getPriority().getPriority());
  Assert.assertEquals(5,sk.getAllocationRequestId());
  sk=iter.next();
  Assert.assertEquals(2,sk.getPriority().getPriority());
  Assert.assertEquals(6,sk.getAllocationRequestId());
}
