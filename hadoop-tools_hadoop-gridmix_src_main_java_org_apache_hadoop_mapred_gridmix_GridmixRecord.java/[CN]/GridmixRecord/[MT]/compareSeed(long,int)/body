{
  final int iSize=Math.max(0,getSize() - fixedBytes());
  final int seedLen=Math.min(iSize,jSize) + FIXED_BYTES;
  jSeed=maskSeed(jSeed,seedLen);
  long iSeed=maskSeed(seed,seedLen);
  final int cmplen=Math.min(iSize,jSize);
  for (int i=0; i < cmplen; i+=Byte.SIZE) {
    final int k=cmplen - i;
    for (long j=Long.SIZE - Byte.SIZE; j >= Math.max(0,Long.SIZE / Byte.SIZE - k) * Byte.SIZE; j-=Byte.SIZE) {
      final int xi=(int)((iSeed >>> j) & 0xFFL);
      final int xj=(int)((jSeed >>> j) & 0xFFL);
      if (xi != xj) {
        return xi - xj;
      }
    }
    iSeed=nextRand(iSeed);
    jSeed=nextRand(jSeed);
  }
  return iSize - jSize;
}
