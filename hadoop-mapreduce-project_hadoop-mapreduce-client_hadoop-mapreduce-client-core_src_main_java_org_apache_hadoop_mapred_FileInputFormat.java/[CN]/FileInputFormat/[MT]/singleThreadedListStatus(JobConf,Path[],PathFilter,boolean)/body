{
  List<FileStatus> result=new ArrayList<FileStatus>();
  List<IOException> errors=new ArrayList<IOException>();
  for (  Path p : dirs) {
    FileSystem fs=p.getFileSystem(job);
    FileStatus[] matches=fs.globStatus(p,inputFilter);
    if (matches == null) {
      errors.add(new IOException("Input path does not exist: " + p));
    }
 else     if (matches.length == 0) {
      errors.add(new IOException("Input Pattern " + p + " matches 0 files"));
    }
 else {
      for (      FileStatus globStat : matches) {
        if (globStat.isDirectory()) {
          RemoteIterator<LocatedFileStatus> iter=fs.listLocatedStatus(globStat.getPath());
          while (iter.hasNext()) {
            LocatedFileStatus stat=iter.next();
            if (inputFilter.accept(stat.getPath())) {
              if (recursive && stat.isDirectory()) {
                addInputPathRecursively(result,fs,stat.getPath(),inputFilter);
              }
 else {
                result.add(stat);
              }
            }
          }
        }
 else {
          result.add(globStat);
        }
      }
    }
  }
  if (!errors.isEmpty()) {
    throw new InvalidInputException(errors);
  }
  return result;
}
