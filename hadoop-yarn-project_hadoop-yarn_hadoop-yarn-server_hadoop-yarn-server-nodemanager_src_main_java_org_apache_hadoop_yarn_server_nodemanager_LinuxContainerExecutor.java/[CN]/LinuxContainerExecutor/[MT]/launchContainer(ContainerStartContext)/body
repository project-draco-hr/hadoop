{
  Container container=ctx.getContainer();
  Path nmPrivateContainerScriptPath=ctx.getNmPrivateContainerScriptPath();
  Path nmPrivateTokensPath=ctx.getNmPrivateTokensPath();
  String user=ctx.getUser();
  String appId=ctx.getAppId();
  Path containerWorkDir=ctx.getContainerWorkDir();
  List<String> localDirs=ctx.getLocalDirs();
  List<String> logDirs=ctx.getLogDirs();
  List<String> filecacheDirs=ctx.getFilecacheDirs();
  List<String> userLocalDirs=ctx.getUserLocalDirs();
  List<String> containerLocalDirs=ctx.getContainerLocalDirs();
  List<String> containerLogDirs=ctx.getContainerLogDirs();
  Map<Path,List<String>> localizedResources=ctx.getLocalizedResources();
  verifyUsernamePattern(user);
  String runAsUser=getRunAsUser(user);
  ContainerId containerId=container.getContainerId();
  String containerIdStr=containerId.toString();
  resourcesHandler.preExecute(containerId,container.getResource());
  String resourcesOptions=resourcesHandler.getResourcesOption(containerId);
  String tcCommandFile=null;
  try {
    if (resourceHandlerChain != null) {
      List<PrivilegedOperation> ops=resourceHandlerChain.preStart(container);
      if (ops != null) {
        List<PrivilegedOperation> resourceOps=new ArrayList<>();
        resourceOps.add(new PrivilegedOperation(PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,resourcesOptions));
        for (        PrivilegedOperation op : ops) {
switch (op.getOperationType()) {
case ADD_PID_TO_CGROUP:
            resourceOps.add(op);
          break;
case TC_MODIFY_STATE:
        tcCommandFile=op.getArguments().get(0);
      break;
default :
    LOG.warn("PrivilegedOperation type unsupported in launch: " + op.getOperationType());
}
}
if (resourceOps.size() > 1) {
try {
  PrivilegedOperation operation=PrivilegedOperationExecutor.squashCGroupOperations(resourceOps);
  resourcesOptions=operation.getArguments().get(0);
}
 catch (PrivilegedOperationException e) {
  LOG.error("Failed to squash cgroup operations!",e);
  throw new ResourceHandlerException("Failed to squash cgroup operations!");
}
}
}
}
}
 catch (ResourceHandlerException e) {
LOG.error("ResourceHandlerChain.preStart() failed!",e);
throw new IOException("ResourceHandlerChain.preStart() failed!",e);
}
try {
Path pidFilePath=getPidFilePath(containerId);
if (pidFilePath != null) {
List<String> prefixCommands=new ArrayList<>();
ContainerRuntimeContext.Builder builder=new ContainerRuntimeContext.Builder(container);
addSchedPriorityCommand(prefixCommands);
if (prefixCommands.size() > 0) {
builder.setExecutionAttribute(CONTAINER_LAUNCH_PREFIX_COMMANDS,prefixCommands);
}
builder.setExecutionAttribute(LOCALIZED_RESOURCES,localizedResources).setExecutionAttribute(RUN_AS_USER,runAsUser).setExecutionAttribute(USER,user).setExecutionAttribute(APPID,appId).setExecutionAttribute(CONTAINER_ID_STR,containerIdStr).setExecutionAttribute(CONTAINER_WORK_DIR,containerWorkDir).setExecutionAttribute(NM_PRIVATE_CONTAINER_SCRIPT_PATH,nmPrivateContainerScriptPath).setExecutionAttribute(NM_PRIVATE_TOKENS_PATH,nmPrivateTokensPath).setExecutionAttribute(PID_FILE_PATH,pidFilePath).setExecutionAttribute(LOCAL_DIRS,localDirs).setExecutionAttribute(LOG_DIRS,logDirs).setExecutionAttribute(FILECACHE_DIRS,filecacheDirs).setExecutionAttribute(USER_LOCAL_DIRS,userLocalDirs).setExecutionAttribute(CONTAINER_LOCAL_DIRS,containerLocalDirs).setExecutionAttribute(CONTAINER_LOG_DIRS,containerLogDirs).setExecutionAttribute(RESOURCES_OPTIONS,resourcesOptions);
if (tcCommandFile != null) {
builder.setExecutionAttribute(TC_COMMAND_FILE,tcCommandFile);
}
linuxContainerRuntime.launchContainer(builder.build());
}
 else {
LOG.info("Container was marked as inactive. Returning terminated error");
return ExitCode.TERMINATED.getExitCode();
}
}
 catch (ContainerExecutionException e) {
int exitCode=e.getExitCode();
LOG.warn("Exit code from container " + containerId + " is : "+ exitCode);
if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) {
LOG.warn("Exception from container-launch with container ID: " + containerId + " and exit code: "+ exitCode,e);
StringBuilder builder=new StringBuilder();
builder.append("Exception from container-launch.\n");
builder.append("Container id: " + containerId + "\n");
builder.append("Exit code: " + exitCode + "\n");
if (!Optional.fromNullable(e.getErrorOutput()).or("").isEmpty()) {
builder.append("Exception message: " + e.getErrorOutput() + "\n");
}
builder.append("Stack trace: " + StringUtils.stringifyException(e) + "\n");
if (!e.getOutput().isEmpty()) {
builder.append("Shell output: " + e.getOutput() + "\n");
}
String diagnostics=builder.toString();
logOutput(diagnostics);
container.handle(new ContainerDiagnosticsUpdateEvent(containerId,diagnostics));
}
 else {
container.handle(new ContainerDiagnosticsUpdateEvent(containerId,"Container killed on request. Exit code is " + exitCode));
}
return exitCode;
}
 finally {
resourcesHandler.postExecute(containerId);
try {
if (resourceHandlerChain != null) {
resourceHandlerChain.postComplete(containerId);
}
}
 catch (ResourceHandlerException e) {
LOG.warn("ResourceHandlerChain.postComplete failed for " + "containerId: " + containerId + ". Exception: "+ e);
}
}
return 0;
}
