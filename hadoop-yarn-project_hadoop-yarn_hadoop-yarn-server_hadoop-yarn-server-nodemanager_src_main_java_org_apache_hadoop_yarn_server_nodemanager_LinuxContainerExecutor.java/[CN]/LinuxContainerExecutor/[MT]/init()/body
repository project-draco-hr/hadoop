{
  List<String> command=new ArrayList<String>(Arrays.asList(containerExecutorExe,"--checksetup"));
  String[] commandArray=command.toArray(new String[command.size()]);
  ShellCommandExecutor shExec=new ShellCommandExecutor(commandArray);
  if (LOG.isDebugEnabled()) {
    LOG.debug("checkLinuxExecutorSetup: " + Arrays.toString(commandArray));
  }
  try {
    shExec.execute();
  }
 catch (  ExitCodeException e) {
    int exitCode=shExec.getExitCode();
    LOG.warn("Exit code from container executor initialization is : " + exitCode,e);
    logOutput(shExec.getOutput());
    throw new IOException("Linux container executor not configured properly" + " (error=" + exitCode + ")",e);
  }
  Configuration conf=super.getConf();
  try {
    resourceHandlerChain=ResourceHandlerModule.getConfiguredResourceHandlerChain(conf);
    if (resourceHandlerChain != null) {
      resourceHandlerChain.bootstrap(conf);
    }
  }
 catch (  ResourceHandlerException e) {
    LOG.error("Failed to bootstrap configured resource subsystems! ",e);
    throw new IOException("Failed to bootstrap configured resource subsystems!");
  }
  try {
    if (linuxContainerRuntime == null) {
      LinuxContainerRuntime runtime=new DelegatingLinuxContainerRuntime();
      runtime.initialize(conf);
      this.linuxContainerRuntime=runtime;
    }
  }
 catch (  ContainerExecutionException e) {
    throw new IOException("Failed to initialize linux container runtime(s)!");
  }
  resourcesHandler.init(this);
}
