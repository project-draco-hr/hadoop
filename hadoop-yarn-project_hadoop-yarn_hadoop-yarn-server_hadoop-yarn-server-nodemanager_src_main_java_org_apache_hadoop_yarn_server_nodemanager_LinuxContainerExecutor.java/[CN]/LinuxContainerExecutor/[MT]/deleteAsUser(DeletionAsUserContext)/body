{
  String user=ctx.getUser();
  Path dir=ctx.getSubDir();
  List<Path> baseDirs=ctx.getBasedirs();
  verifyUsernamePattern(user);
  String runAsUser=getRunAsUser(user);
  String dirString=dir == null ? "" : dir.toUri().getPath();
  List<String> command=new ArrayList<String>(Arrays.asList(containerExecutorExe,runAsUser,user,Integer.toString(Commands.DELETE_AS_USER.getValue()),dirString));
  List<String> pathsToDelete=new ArrayList<String>();
  if (baseDirs == null || baseDirs.size() == 0) {
    LOG.info("Deleting absolute path : " + dir);
    pathsToDelete.add(dirString);
  }
 else {
    for (    Path baseDir : baseDirs) {
      Path del=dir == null ? baseDir : new Path(baseDir,dir);
      LOG.info("Deleting path : " + del);
      pathsToDelete.add(del.toString());
      command.add(baseDir.toUri().getPath());
    }
  }
  String[] commandArray=command.toArray(new String[command.size()]);
  ShellCommandExecutor shExec=new ShellCommandExecutor(commandArray);
  if (LOG.isDebugEnabled()) {
    LOG.debug("deleteAsUser: " + Arrays.toString(commandArray));
  }
  try {
    shExec.execute();
    if (LOG.isDebugEnabled()) {
      logOutput(shExec.getOutput());
    }
  }
 catch (  IOException e) {
    int exitCode=shExec.getExitCode();
    LOG.error("DeleteAsUser for " + StringUtils.join(" ",pathsToDelete) + " returned with exit code: "+ exitCode,e);
    LOG.error("Output from LinuxContainerExecutor's deleteAsUser follows:");
    logOutput(shExec.getOutput());
  }
}
