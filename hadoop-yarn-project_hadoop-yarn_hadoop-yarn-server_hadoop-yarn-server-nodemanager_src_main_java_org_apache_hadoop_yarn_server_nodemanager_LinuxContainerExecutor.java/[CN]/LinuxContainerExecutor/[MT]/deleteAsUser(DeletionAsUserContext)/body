{
  String user=ctx.getUser();
  Path dir=ctx.getSubDir();
  List<Path> baseDirs=ctx.getBasedirs();
  verifyUsernamePattern(user);
  String runAsUser=getRunAsUser(user);
  String dirString=dir == null ? "" : dir.toUri().getPath();
  PrivilegedOperation deleteAsUserOp=new PrivilegedOperation(PrivilegedOperation.OperationType.DELETE_AS_USER,(String)null);
  deleteAsUserOp.appendArgs(runAsUser,user,Integer.toString(PrivilegedOperation.RunAsUserCommand.DELETE_AS_USER.getValue()),dirString);
  List<String> pathsToDelete=new ArrayList<String>();
  if (baseDirs == null || baseDirs.size() == 0) {
    LOG.info("Deleting absolute path : " + dir);
    pathsToDelete.add(dirString);
  }
 else {
    for (    Path baseDir : baseDirs) {
      Path del=dir == null ? baseDir : new Path(baseDir,dir);
      LOG.info("Deleting path : " + del);
      pathsToDelete.add(del.toString());
      deleteAsUserOp.appendArgs(baseDir.toUri().getPath());
    }
  }
  try {
    Configuration conf=super.getConf();
    PrivilegedOperationExecutor privilegedOperationExecutor=PrivilegedOperationExecutor.getInstance(conf);
    privilegedOperationExecutor.executePrivilegedOperation(deleteAsUserOp,false);
  }
 catch (  PrivilegedOperationException e) {
    int exitCode=e.getExitCode();
    LOG.error("DeleteAsUser for " + StringUtils.join(" ",pathsToDelete) + " returned with exit code: "+ exitCode,e);
  }
}
