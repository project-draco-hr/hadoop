{
  verifyUsernamePattern(user);
  String runAsUser=getRunAsUser(user);
  ContainerId containerId=container.getContainerId();
  String containerIdStr=ConverterUtils.toString(containerId);
  resourcesHandler.preExecute(containerId,container.getResource());
  String resourcesOptions=resourcesHandler.getResourcesOption(containerId);
  ShellCommandExecutor shExec=null;
  try {
    Path pidFilePath=getPidFilePath(containerId);
    if (pidFilePath != null) {
      List<String> command=new ArrayList<String>();
      addSchedPriorityCommand(command);
      command.addAll(Arrays.asList(containerExecutorExe,runAsUser,user,Integer.toString(Commands.LAUNCH_CONTAINER.getValue()),appId,containerIdStr,containerWorkDir.toString(),nmPrivateCotainerScriptPath.toUri().getPath().toString(),nmPrivateTokensPath.toUri().getPath().toString(),pidFilePath.toString(),StringUtils.join(",",localDirs),StringUtils.join(",",logDirs),resourcesOptions));
      String[] commandArray=command.toArray(new String[command.size()]);
      shExec=new ShellCommandExecutor(commandArray,null,container.getLaunchContext().getEnvironment());
      LOG.info("launchContainer: " + Arrays.toString(commandArray));
      shExec.execute();
      if (LOG.isDebugEnabled()) {
        logOutput(shExec.getOutput());
      }
    }
 else {
      LOG.info("Container was marked as inactive. Returning terminated error");
      return ExitCode.TERMINATED.getExitCode();
    }
  }
 catch (  ExitCodeException e) {
    if (null == shExec) {
      return -1;
    }
    int exitCode=shExec.getExitCode();
    LOG.warn("Exit code from container " + containerId + " is : "+ exitCode);
    if (exitCode != ExitCode.FORCE_KILLED.getExitCode() && exitCode != ExitCode.TERMINATED.getExitCode()) {
      LOG.warn("Exception from container-launch with container ID: " + containerId + " and exit code: "+ exitCode,e);
      logOutput(shExec.getOutput());
      String diagnostics="Exception from container-launch: \n" + StringUtils.stringifyException(e) + "\n"+ shExec.getOutput();
      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,diagnostics));
    }
 else {
      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,"Container killed on request. Exit code is " + exitCode));
    }
    return exitCode;
  }
 finally {
    resourcesHandler.postExecute(containerId);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Output from LinuxContainerExecutor's launchContainer follows:");
    logOutput(shExec.getOutput());
  }
  return 0;
}
