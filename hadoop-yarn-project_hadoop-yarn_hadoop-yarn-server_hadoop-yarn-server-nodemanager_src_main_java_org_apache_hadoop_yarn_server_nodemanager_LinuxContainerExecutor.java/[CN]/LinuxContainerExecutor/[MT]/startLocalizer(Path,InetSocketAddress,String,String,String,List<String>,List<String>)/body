{
  List<String> command=new ArrayList<String>(Arrays.asList(containerExecutorExe,user,Integer.toString(Commands.INITIALIZE_CONTAINER.getValue()),appId,nmPrivateContainerTokensPath.toUri().getPath().toString(),StringUtils.join(",",localDirs),StringUtils.join(",",logDirs)));
  File jvm=new File(new File(System.getProperty("java.home"),"bin"),"java");
  command.add(jvm.toString());
  command.add("-classpath");
  command.add(System.getProperty("java.class.path"));
  String javaLibPath=System.getProperty("java.library.path");
  if (javaLibPath != null) {
    command.add("-Djava.library.path=" + javaLibPath);
  }
  command.add(ContainerLocalizer.class.getName());
  command.add(user);
  command.add(appId);
  command.add(locId);
  command.add(nmAddr.getHostName());
  command.add(Integer.toString(nmAddr.getPort()));
  for (  String dir : localDirs) {
    command.add(dir);
  }
  String[] commandArray=command.toArray(new String[command.size()]);
  ShellCommandExecutor shExec=new ShellCommandExecutor(commandArray);
  LOG.info("initApplication: " + Arrays.toString(commandArray));
  if (LOG.isDebugEnabled()) {
    LOG.debug("initApplication: " + Arrays.toString(commandArray));
  }
  try {
    shExec.execute();
    if (LOG.isDebugEnabled()) {
      logOutput(shExec.getOutput());
    }
  }
 catch (  ExitCodeException e) {
    int exitCode=shExec.getExitCode();
    LOG.warn("Exit code from container is : " + exitCode);
    logOutput(shExec.getOutput());
    throw new IOException("App initialization failed (" + exitCode + ") with output: "+ shExec.getOutput(),e);
  }
}
