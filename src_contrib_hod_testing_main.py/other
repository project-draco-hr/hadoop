import unittest, os, sys, re
myPath = os.path.realpath(sys.argv[0])
rootDirectory = re.sub('/testing/.*', '', myPath)
testingDir = os.path.join(rootDirectory, 'testing')
sys.path.append(rootDirectory)
from testing.lib import printSeparator, printLine
moduleList = []
allList = []
excludes = []
for file in os.listdir(testingDir):
    if (re.search('.py$', file) and re.search('^test', file)):
        module = re.sub('^test', '', file)
        module = re.sub('.py$', '', module)
        allList.append(module)
        if (module not in excludes):
            moduleList.append(module)
printLine(('All testcases - %s' % allList))
printLine(('Excluding the testcases - %s' % excludes))
printLine(('Executing the testcases - %s' % moduleList))
testsResult = 0
for moduleBaseName in moduleList:
    try:
        module = ('testing.test' + moduleBaseName)
        suiteCaller = (('Run' + moduleBaseName) + 'Tests')
        printSeparator()
        printLine(('Running %s' % suiteCaller))
        imported_module = __import__(module, fromlist=[suiteCaller])
        testRes = getattr(imported_module, suiteCaller)()
        testsResult = (testsResult + testRes)
        printLine(('Finished %s. TestSuite Result : %s\n' % (suiteCaller, testRes)))
    except ImportError as i:
        printLine(i)
        testsResult = (testsResult + 1)
        pass
    except AttributeError as n:
        printLine(n)
        testsResult = (testsResult + 1)
        pass
    except Exception as e:
        printLine(('%s failed. \nReason : %s' % (suiteCaller, e)))
        printLine(('Skipping %s' % suiteCaller))
        testsResult = (testsResult + 1)
        pass
if (testsResult != 0):
    printSeparator()
    printLine(('Total testcases with failure or error : %s' % testsResult))
sys.exit(testsResult)
