{
  CapacityScheduler spyCs=new CapacityScheduler();
  cs=spy(spyCs);
  scheduler=cs;
  rmContext=TestUtils.getMockRMContext();
  spyRMContext=spy(rmContext);
  ConcurrentMap<ApplicationId,RMApp> spyApps=spy(new ConcurrentHashMap<ApplicationId,RMApp>());
  RMApp rmApp=mock(RMApp.class);
  when(rmApp.getRMAppAttempt((ApplicationAttemptId)Matchers.any())).thenReturn(null);
  Mockito.doReturn(rmApp).when(spyApps).get((ApplicationId)Matchers.any());
  when(spyRMContext.getRMApps()).thenReturn(spyApps);
  when(spyRMContext.getScheduler()).thenReturn(scheduler);
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration();
  ReservationSystemTestUtil.setupQueueConfiguration(csConf);
  cs.setConf(csConf);
  csContext=mock(CapacitySchedulerContext.class);
  when(csContext.getConfiguration()).thenReturn(csConf);
  when(csContext.getConf()).thenReturn(csConf);
  when(csContext.getMinimumResourceCapability()).thenReturn(minAlloc);
  when(csContext.getMaximumResourceCapability()).thenReturn(maxAlloc);
  when(csContext.getClusterResource()).thenReturn(Resources.createResource(100 * 16 * GB,100 * 32));
  when(scheduler.getClusterResource()).thenReturn(Resources.createResource(125 * GB,125));
  when(csContext.getResourceCalculator()).thenReturn(new DefaultResourceCalculator());
  RMContainerTokenSecretManager containerTokenSecretManager=new RMContainerTokenSecretManager(csConf);
  containerTokenSecretManager.rollMasterKey();
  when(csContext.getContainerTokenSecretManager()).thenReturn(containerTokenSecretManager);
  cs.setRMContext(spyRMContext);
  cs.init(csConf);
  cs.start();
  setupPlanFollower();
}
