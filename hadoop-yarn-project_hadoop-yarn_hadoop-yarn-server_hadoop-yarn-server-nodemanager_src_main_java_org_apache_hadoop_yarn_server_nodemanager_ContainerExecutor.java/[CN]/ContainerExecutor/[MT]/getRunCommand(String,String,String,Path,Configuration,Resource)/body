{
  boolean containerSchedPriorityIsSet=false;
  int containerSchedPriorityAdjustment=YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY;
  if (conf.get(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY) != null) {
    containerSchedPriorityIsSet=true;
    containerSchedPriorityAdjustment=conf.getInt(YarnConfiguration.NM_CONTAINER_EXECUTOR_SCHED_PRIORITY,YarnConfiguration.DEFAULT_NM_CONTAINER_EXECUTOR_SCHED_PRIORITY);
  }
  if (Shell.WINDOWS) {
    int cpuRate=-1;
    int memory=-1;
    if (resource != null) {
      if (conf.getBoolean(YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {
        memory=resource.getMemory();
      }
      if (conf.getBoolean(YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {
        int containerVCores=resource.getVirtualCores();
        int nodeVCores=NodeManagerHardwareUtils.getVCores(conf);
        int nodeCpuPercentage=NodeManagerHardwareUtils.getNodeCpuPercentage(conf);
        float containerCpuPercentage=(float)(nodeCpuPercentage * containerVCores) / nodeVCores;
        cpuRate=Math.min(10000,(int)(containerCpuPercentage * 100));
      }
    }
    return new String[]{Shell.getWinutilsPath(),"task","create","-m",String.valueOf(memory),"-c",String.valueOf(cpuRate),groupId,"cmd /c " + command};
  }
 else {
    List<String> retCommand=new ArrayList<String>();
    if (containerSchedPriorityIsSet) {
      retCommand.addAll(Arrays.asList("nice","-n",Integer.toString(containerSchedPriorityAdjustment)));
    }
    retCommand.addAll(Arrays.asList("bash",command));
    return retCommand.toArray(new String[retCommand.size()]);
  }
}
