{
  ContainerLaunch.ShellScriptBuilder sb=ContainerLaunch.ShellScriptBuilder.create();
  Set<String> whitelist=new HashSet<String>();
  whitelist.add(YarnConfiguration.NM_DOCKER_CONTAINER_EXECUTOR_IMAGE_NAME);
  whitelist.add(ApplicationConstants.Environment.HADOOP_YARN_HOME.name());
  whitelist.add(ApplicationConstants.Environment.HADOOP_COMMON_HOME.name());
  whitelist.add(ApplicationConstants.Environment.HADOOP_HDFS_HOME.name());
  whitelist.add(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());
  whitelist.add(ApplicationConstants.Environment.JAVA_HOME.name());
  if (environment != null) {
    for (    Map.Entry<String,String> env : environment.entrySet()) {
      if (!whitelist.contains(env.getKey())) {
        sb.env(env.getKey().toString(),env.getValue().toString());
      }
 else {
        sb.whitelistedEnv(env.getKey().toString(),env.getValue().toString());
      }
    }
  }
  if (resources != null) {
    for (    Map.Entry<Path,List<String>> entry : resources.entrySet()) {
      for (      String linkName : entry.getValue()) {
        sb.symlink(entry.getKey(),new Path(linkName));
      }
    }
  }
  sb.command(command);
  PrintStream pout=null;
  try {
    pout=new PrintStream(out,false,"UTF-8");
    sb.write(pout);
  }
  finally {
    if (out != null) {
      out.close();
    }
  }
}
