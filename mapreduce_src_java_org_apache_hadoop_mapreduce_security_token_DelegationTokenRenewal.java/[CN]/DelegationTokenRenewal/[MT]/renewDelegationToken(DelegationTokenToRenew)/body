{
  long newExpirationDate=System.currentTimeMillis() + 3600 * 1000;
  Token<DelegationTokenIdentifier> token=dttr.token;
  Configuration conf=dttr.conf;
  if (token.getKind().equals(kindHdfs)) {
    DistributedFileSystem dfs=null;
    try {
      dfs=getDFSForToken(token,conf);
    }
 catch (    IOException e) {
      LOG.info("couldn't get DFS to renew. Will retry over HTTPS");
      dfs=null;
    }
    try {
      if (dfs != null)       newExpirationDate=dfs.renewDelegationToken(token);
 else {
        newExpirationDate=renewDelegationTokenOverHttps(token,conf);
      }
    }
 catch (    InvalidToken ite) {
      LOG.warn("invalid token - not scheduling for renew");
      removeFailedDelegationToken(dttr);
      throw new IOException("failed to renew token",ite);
    }
catch (    AccessControlException ioe) {
      LOG.warn("failed to renew token:" + token,ioe);
      removeFailedDelegationToken(dttr);
      throw new IOException("failed to renew token",ioe);
    }
catch (    Exception e) {
      LOG.warn("failed to renew token:" + token,e);
    }
  }
 else {
    throw new Exception("unknown token type to renew:" + token.getKind());
  }
  return newExpirationDate;
}
