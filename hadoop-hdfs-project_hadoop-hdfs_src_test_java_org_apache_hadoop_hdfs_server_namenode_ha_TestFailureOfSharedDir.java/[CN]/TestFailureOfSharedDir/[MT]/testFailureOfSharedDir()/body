{
  Configuration conf=new Configuration();
  MiniDFSCluster cluster=null;
  int chmodSucceeded=-1;
  File sharedEditsDir=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(0).build();
    cluster.waitActive();
    cluster.transitionToActive(0);
    FileSystem fs=HATestUtil.configureFailoverFs(cluster,conf);
    assertTrue(fs.mkdirs(new Path("/test1")));
    URI sharedEditsUri=cluster.getSharedEditsDir(0,1);
    sharedEditsDir=new File(sharedEditsUri);
    chmodSucceeded=FileUtil.chmod(sharedEditsDir.getAbsolutePath(),"-w",true);
    if (chmodSucceeded != 0) {
      LOG.error("Failed to remove write permissions on shared edits dir:" + sharedEditsDir.getAbsolutePath());
    }
    NameNode nn0=cluster.getNameNode(0);
    try {
      nn0.getRpcServer().rollEditLog();
      fail("Succeeded in rolling edit log despite shared dir being deleted");
    }
 catch (    IOException ioe) {
      GenericTestUtils.assertExceptionContains("Unable to start log segment 4: too few journals successfully started",ioe);
      LOG.info("Got expected exception",ioe);
    }
    for (    URI editsUri : cluster.getNameEditsDirs(0)) {
      if (editsUri.equals(sharedEditsUri)) {
        continue;
      }
      File editsDir=new File(editsUri.getPath());
      File curDir=new File(editsDir,"current");
      GenericTestUtils.assertGlobEquals(curDir,"edits_.*",NNStorage.getInProgressEditsFileName(1));
    }
  }
  finally {
    if (chmodSucceeded == 0) {
      FileUtil.chmod(sharedEditsDir.getAbsolutePath(),"+w",true);
    }
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
