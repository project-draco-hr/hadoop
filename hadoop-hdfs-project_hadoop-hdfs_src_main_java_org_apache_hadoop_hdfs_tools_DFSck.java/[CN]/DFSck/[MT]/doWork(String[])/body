{
  final StringBuilder url=new StringBuilder();
  url.append("/fsck?ugi=").append(ugi.getShortUserName());
  String dir=null;
  boolean doListCorruptFileBlocks=false;
  for (int idx=0; idx < args.length; idx++) {
    if (args[idx].equals("-move")) {
      url.append("&move=1");
    }
 else     if (args[idx].equals("-delete")) {
      url.append("&delete=1");
    }
 else     if (args[idx].equals("-files")) {
      url.append("&files=1");
    }
 else     if (args[idx].equals("-openforwrite")) {
      url.append("&openforwrite=1");
    }
 else     if (args[idx].equals("-blocks")) {
      url.append("&blocks=1");
    }
 else     if (args[idx].equals("-locations")) {
      url.append("&locations=1");
    }
 else     if (args[idx].equals("-racks")) {
      url.append("&racks=1");
    }
 else     if (args[idx].equals("-showprogress")) {
      url.append("&showprogress=1");
    }
 else     if (args[idx].equals("-list-corruptfileblocks")) {
      url.append("&listcorruptfileblocks=1");
      doListCorruptFileBlocks=true;
    }
 else     if (args[idx].equals("-includeSnapshots")) {
      url.append("&includeSnapshots=1");
    }
 else     if (args[idx].equals("-blockId")) {
      StringBuilder sb=new StringBuilder();
      idx++;
      while (idx < args.length && !args[idx].startsWith("-")) {
        sb.append(args[idx]);
        sb.append(" ");
        idx++;
      }
      url.append("&blockId=").append(URLEncoder.encode(sb.toString(),"UTF-8"));
    }
 else     if (!args[idx].startsWith("-")) {
      if (null == dir) {
        dir=args[idx];
      }
 else {
        System.err.println("fsck: can only operate on one path at a time '" + args[idx] + "'");
        printUsage(System.err);
        return -1;
      }
    }
 else {
      System.err.println("fsck: Illegal option '" + args[idx] + "'");
      printUsage(System.err);
      return -1;
    }
  }
  if (null == dir) {
    dir="/";
  }
  final Path dirpath=new Path(dir);
  final URI namenodeAddress=getCurrentNamenodeAddress(dirpath);
  if (namenodeAddress == null) {
    System.err.println("DFSck exiting.");
    return 0;
  }
  url.insert(0,namenodeAddress.toString());
  url.append("&path=").append(URLEncoder.encode(Path.getPathWithoutSchemeAndAuthority(dirpath).toString(),"UTF-8"));
  System.err.println("Connecting to namenode via " + url.toString());
  if (doListCorruptFileBlocks) {
    return listCorruptFileBlocks(dir,url.toString());
  }
  URL path=new URL(url.toString());
  URLConnection connection;
  try {
    connection=connectionFactory.openConnection(path,isSpnegoEnabled);
  }
 catch (  AuthenticationException e) {
    throw new IOException(e);
  }
  InputStream stream=connection.getInputStream();
  BufferedReader input=new BufferedReader(new InputStreamReader(stream,"UTF-8"));
  String line=null;
  String lastLine=null;
  int errCode=-1;
  try {
    while ((line=input.readLine()) != null) {
      out.println(line);
      lastLine=line;
    }
  }
  finally {
    input.close();
  }
  if (lastLine.endsWith(NamenodeFsck.HEALTHY_STATUS)) {
    errCode=0;
  }
 else   if (lastLine.endsWith(NamenodeFsck.CORRUPT_STATUS)) {
    errCode=1;
  }
 else   if (lastLine.endsWith(NamenodeFsck.NONEXISTENT_STATUS)) {
    errCode=0;
  }
 else   if (lastLine.contains("Incorrect blockId format:")) {
    errCode=0;
  }
 else   if (lastLine.endsWith(NamenodeFsck.DECOMMISSIONED_STATUS)) {
    errCode=2;
  }
 else   if (lastLine.endsWith(NamenodeFsck.DECOMMISSIONING_STATUS)) {
    errCode=3;
  }
  return errCode;
}
