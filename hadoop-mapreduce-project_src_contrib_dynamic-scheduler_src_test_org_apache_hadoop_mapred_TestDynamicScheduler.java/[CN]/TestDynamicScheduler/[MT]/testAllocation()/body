{
  addQueues(QUEUES);
  setSpending("queue1",1.0f);
  setSpending("queue2",2.0f);
  setBudgets(QUEUES,new float[]{100.0f,100.0f});
  scheduler.allocations.setUsage("queue1",2,0);
  scheduler.allocations.setUsage("queue2",3,0);
  timer.runTask();
  assertNotNull(scheduler.allocations);
  assertNotNull(scheduler.allocations.allocation);
  assertNotNull(scheduler.allocations.allocation.get("queue1"));
  assertNotNull(scheduler.allocations.allocation.get("queue2"));
  Collection<BudgetQueue> budgetQueues=scheduler.allocations.store.getQueues();
  assertNotNull(budgetQueues);
  assertEquals(2,budgetQueues.size());
  BudgetQueue queue1Budget=null;
  BudgetQueue queue2Budget=null;
  for (  BudgetQueue queue : budgetQueues) {
    if (queue.name.equals("queue1")) {
      queue1Budget=queue;
    }
 else {
      queue2Budget=queue;
    }
  }
  assertNotNull(queue1Budget);
  assertNotNull(queue2Budget);
  assertEquals(98.0f,queue1Budget.budget,0.1f);
  assertEquals(94.0f,queue2Budget.budget,0.1f);
  assertEquals(1.0f,queue1Budget.spending,0.1f);
  assertEquals(2.0f,queue2Budget.spending,0.1f);
  Map<String,QueueAllocation> shares=scheduler.allocations.getAllocation();
  assertNotNull(shares);
  assertEquals(2,shares.size());
  assertNotNull(shares.get("queue1"));
  assertNotNull(shares.get("queue2"));
  assertEquals(1.0f / 3.0f,shares.get("queue1").getShare(),0.1f);
  assertEquals(2.0f / 3.0f,shares.get("queue2").getShare(),0.1f);
}
