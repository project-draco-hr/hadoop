{
{
    final String[] args={"-rollingUpgrade"};
    final StartupOption opt=NameNode.parseArguments(args);
    assertNull(opt);
  }
{
    final String[] args={"-rollingUpgrade","started"};
    final StartupOption opt=NameNode.parseArguments(args);
    assertEquals(StartupOption.ROLLINGUPGRADE,opt);
    assertEquals(RollingUpgradeStartupOption.STARTED,opt.getRollingUpgradeStartupOption());
    assertTrue(RollingUpgradeStartupOption.STARTED.matches(opt));
  }
{
    final String[] args={"-rollingUpgrade","downgrade"};
    final StartupOption opt=NameNode.parseArguments(args);
    assertEquals(StartupOption.ROLLINGUPGRADE,opt);
    assertEquals(RollingUpgradeStartupOption.DOWNGRADE,opt.getRollingUpgradeStartupOption());
    assertTrue(RollingUpgradeStartupOption.DOWNGRADE.matches(opt));
  }
{
    final String[] args={"-rollingUpgrade","rollback"};
    final StartupOption opt=NameNode.parseArguments(args);
    assertEquals(StartupOption.ROLLINGUPGRADE,opt);
    assertEquals(RollingUpgradeStartupOption.ROLLBACK,opt.getRollingUpgradeStartupOption());
    assertTrue(RollingUpgradeStartupOption.ROLLBACK.matches(opt));
  }
{
    final String[] args={"-rollingUpgrade","foo"};
    try {
      NameNode.parseArguments(args);
      Assert.fail();
    }
 catch (    IllegalArgumentException iae) {
    }
  }
}
