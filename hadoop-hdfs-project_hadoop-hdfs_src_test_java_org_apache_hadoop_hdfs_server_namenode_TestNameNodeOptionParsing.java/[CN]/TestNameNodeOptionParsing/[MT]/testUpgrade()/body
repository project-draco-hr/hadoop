{
  StartupOption opt=null;
  opt=NameNode.parseArguments(new String[]{"-upgrade"});
  assertEquals(opt,StartupOption.UPGRADE);
  assertNull(opt.getClusterId());
  assertTrue(FSImageFormat.renameReservedMap.isEmpty());
  opt=NameNode.parseArguments(new String[]{"-upgrade","-clusterid","mycid"});
  assertEquals(StartupOption.UPGRADE,opt);
  assertEquals("mycid",opt.getClusterId());
  assertTrue(FSImageFormat.renameReservedMap.isEmpty());
  opt=NameNode.parseArguments(new String[]{"-upgrade","-clusterid","mycid","-renameReserved",".snapshot=.my-snapshot,.reserved=.my-reserved"});
  assertEquals(StartupOption.UPGRADE,opt);
  assertEquals("mycid",opt.getClusterId());
  assertEquals(".my-snapshot",FSImageFormat.renameReservedMap.get(".snapshot"));
  assertEquals(".my-reserved",FSImageFormat.renameReservedMap.get(".reserved"));
  FSImageFormat.renameReservedMap.clear();
  opt=NameNode.parseArguments(new String[]{"-upgrade","-renameReserved",".reserved=.my-reserved,.snapshot=.my-snapshot","-clusterid","mycid"});
  assertEquals(StartupOption.UPGRADE,opt);
  assertEquals("mycid",opt.getClusterId());
  assertEquals(".my-snapshot",FSImageFormat.renameReservedMap.get(".snapshot"));
  assertEquals(".my-reserved",FSImageFormat.renameReservedMap.get(".reserved"));
  opt=NameNode.parseArguments(new String[]{"-upgrade","-renameReserved"});
  assertEquals(StartupOption.UPGRADE,opt);
  assertEquals(".snapshot." + HdfsConstants.NAMENODE_LAYOUT_VERSION + ".UPGRADE_RENAMED",FSImageFormat.renameReservedMap.get(".snapshot"));
  assertEquals(".reserved." + HdfsConstants.NAMENODE_LAYOUT_VERSION + ".UPGRADE_RENAMED",FSImageFormat.renameReservedMap.get(".reserved"));
  try {
    opt=NameNode.parseArguments(new String[]{"-upgrade","-renameReserved",".reserved=.my-reserved,.not-reserved=.my-not-reserved"});
  }
 catch (  IllegalArgumentException e) {
    assertExceptionContains("Unknown reserved path",e);
  }
  try {
    opt=NameNode.parseArguments(new String[]{"-upgrade","-renameReserved",".reserved=.my-reserved,.snapshot=.snapshot"});
  }
 catch (  IllegalArgumentException e) {
    assertExceptionContains("Invalid rename path",e);
  }
  try {
    opt=NameNode.parseArguments(new String[]{"-upgrade","-renameReserved",".snapshot=.reserved"});
  }
 catch (  IllegalArgumentException e) {
    assertExceptionContains("Invalid rename path",e);
  }
  opt=NameNode.parseArguments(new String[]{"-upgrade","-cid"});
  assertNull(opt);
}
