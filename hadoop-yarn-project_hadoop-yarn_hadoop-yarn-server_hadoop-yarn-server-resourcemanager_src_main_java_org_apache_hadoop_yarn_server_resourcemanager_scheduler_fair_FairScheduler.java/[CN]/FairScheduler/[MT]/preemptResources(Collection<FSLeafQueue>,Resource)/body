{
  if (scheds.isEmpty() || Resources.equals(toPreempt,Resources.none())) {
    return;
  }
  Map<RMContainer,FSSchedulerApp> apps=new HashMap<RMContainer,FSSchedulerApp>();
  Map<RMContainer,FSLeafQueue> queues=new HashMap<RMContainer,FSLeafQueue>();
  List<RMContainer> runningContainers=new ArrayList<RMContainer>();
  for (  FSLeafQueue sched : scheds) {
    if (Resources.greaterThan(RESOURCE_CALCULATOR,clusterCapacity,sched.getResourceUsage(),sched.getFairShare())) {
      for (      AppSchedulable as : sched.getRunnableAppSchedulables()) {
        for (        RMContainer c : as.getApp().getLiveContainers()) {
          runningContainers.add(c);
          apps.put(c,as.getApp());
          queues.put(c,sched);
        }
      }
    }
  }
  Collections.sort(runningContainers,new Comparator<RMContainer>(){
    public int compare(    RMContainer c1,    RMContainer c2){
      int ret=c1.getContainer().getPriority().compareTo(c2.getContainer().getPriority());
      if (ret == 0) {
        return c2.getContainerId().compareTo(c1.getContainerId());
      }
      return ret;
    }
  }
);
  Iterator<RMContainer> warnedIter=warnedContainers.iterator();
  Set<RMContainer> preemptedThisRound=new HashSet<RMContainer>();
  while (warnedIter.hasNext()) {
    RMContainer container=warnedIter.next();
    if (container.getState() == RMContainerState.RUNNING && Resources.greaterThan(RESOURCE_CALCULATOR,clusterCapacity,toPreempt,Resources.none())) {
      warnOrKillContainer(container,apps.get(container),queues.get(container));
      preemptedThisRound.add(container);
      Resources.subtractFrom(toPreempt,container.getContainer().getResource());
    }
 else {
      warnedIter.remove();
    }
  }
  Iterator<RMContainer> runningIter=runningContainers.iterator();
  while (runningIter.hasNext() && Resources.greaterThan(RESOURCE_CALCULATOR,clusterCapacity,toPreempt,Resources.none())) {
    RMContainer container=runningIter.next();
    FSLeafQueue sched=queues.get(container);
    if (!preemptedThisRound.contains(container) && Resources.greaterThan(RESOURCE_CALCULATOR,clusterCapacity,sched.getResourceUsage(),sched.getFairShare())) {
      warnOrKillContainer(container,apps.get(container),sched);
      warnedContainers.add(container);
      Resources.subtractFrom(toPreempt,container.getContainer().getResource());
    }
  }
}
