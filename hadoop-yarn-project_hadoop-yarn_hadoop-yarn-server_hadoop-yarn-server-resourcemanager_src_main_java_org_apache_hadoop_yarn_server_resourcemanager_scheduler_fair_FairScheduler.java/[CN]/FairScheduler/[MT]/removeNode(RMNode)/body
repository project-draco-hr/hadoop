{
  NodeId nodeId=rmNode.getNodeID();
  FSSchedulerNode node=nodeTracker.getNode(nodeId);
  if (node == null) {
    LOG.error("Attempting to remove non-existent node " + nodeId);
    return;
  }
  List<RMContainer> runningContainers=node.getCopiedListOfRunningContainers();
  for (  RMContainer container : runningContainers) {
    super.completedContainer(container,SchedulerUtils.createAbnormalContainerStatus(container.getContainerId(),SchedulerUtils.LOST_CONTAINER),RMContainerEventType.KILL);
  }
  RMContainer reservedContainer=node.getReservedContainer();
  if (reservedContainer != null) {
    super.completedContainer(reservedContainer,SchedulerUtils.createAbnormalContainerStatus(reservedContainer.getContainerId(),SchedulerUtils.LOST_CONTAINER),RMContainerEventType.KILL);
  }
  nodeTracker.removeNode(nodeId);
  Resource clusterResource=getClusterResource();
  queueMgr.getRootQueue().setSteadyFairShare(clusterResource);
  queueMgr.getRootQueue().recomputeSteadyShares();
  updateRootQueueMetrics();
  triggerUpdate();
  LOG.info("Removed node " + rmNode.getNodeAddress() + " cluster capacity: "+ clusterResource);
}
