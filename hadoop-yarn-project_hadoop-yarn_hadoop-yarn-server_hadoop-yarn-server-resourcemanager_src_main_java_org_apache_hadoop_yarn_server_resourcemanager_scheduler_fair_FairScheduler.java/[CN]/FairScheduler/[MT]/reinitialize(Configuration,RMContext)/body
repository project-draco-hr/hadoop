{
  if (!initialized) {
    this.conf=new FairSchedulerConfiguration(conf);
    validateConf(this.conf);
    minimumAllocation=this.conf.getMinimumAllocation();
    maximumAllocation=this.conf.getMaximumAllocation();
    incrAllocation=this.conf.getIncrementAllocation();
    continuousSchedulingEnabled=this.conf.isContinuousSchedulingEnabled();
    continuousSchedulingSleepMs=this.conf.getContinuousSchedulingSleepMs();
    nodeLocalityThreshold=this.conf.getLocalityThresholdNode();
    rackLocalityThreshold=this.conf.getLocalityThresholdRack();
    nodeLocalityDelayMs=this.conf.getLocalityDelayNodeMs();
    rackLocalityDelayMs=this.conf.getLocalityDelayRackMs();
    preemptionEnabled=this.conf.getPreemptionEnabled();
    preemptionUtilizationThreshold=this.conf.getPreemptionUtilizationThreshold();
    assignMultiple=this.conf.getAssignMultiple();
    maxAssign=this.conf.getMaxAssign();
    sizeBasedWeight=this.conf.getSizeBasedWeight();
    preemptionInterval=this.conf.getPreemptionInterval();
    waitTimeBeforeKill=this.conf.getWaitTimeBeforeKill();
    usePortForNodeName=this.conf.getUsePortForNodeName();
    rootMetrics=FSQueueMetrics.forQueue("root",null,true,conf);
    this.rmContext=rmContext;
    this.applications=new ConcurrentHashMap<ApplicationId,SchedulerApplication<FSSchedulerApp>>();
    this.eventLog=new FairSchedulerEventLog();
    eventLog.init(this.conf);
    initialized=true;
    allocConf=new AllocationConfiguration(conf);
    try {
      queueMgr.initialize(conf);
    }
 catch (    Exception e) {
      throw new IOException("Failed to start FairScheduler",e);
    }
    Thread updateThread=new Thread(new UpdateThread());
    updateThread.setName("FairSchedulerUpdateThread");
    updateThread.setDaemon(true);
    updateThread.start();
    if (continuousSchedulingEnabled) {
      Thread schedulingThread=new Thread(new Runnable(){
        @Override public void run(){
          continuousScheduling();
        }
      }
);
      schedulingThread.setName("ContinuousScheduling");
      schedulingThread.setDaemon(true);
      schedulingThread.start();
    }
    allocsLoader.init(conf);
    allocsLoader.setReloadListener(new AllocationReloadListener());
    try {
      allocsLoader.reloadAllocations();
    }
 catch (    Exception e) {
      throw new IOException("Failed to initialize FairScheduler",e);
    }
    allocsLoader.start();
  }
 else {
    try {
      allocsLoader.reloadAllocations();
    }
 catch (    Exception e) {
      LOG.error("Failed to reload allocations file",e);
    }
  }
}
