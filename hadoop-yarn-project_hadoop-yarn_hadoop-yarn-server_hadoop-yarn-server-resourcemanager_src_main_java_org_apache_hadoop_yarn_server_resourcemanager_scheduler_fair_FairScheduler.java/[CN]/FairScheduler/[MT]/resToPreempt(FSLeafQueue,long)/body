{
  String queue=sched.getName();
  long minShareTimeout=allocConf.getMinSharePreemptionTimeout(queue);
  long fairShareTimeout=allocConf.getFairSharePreemptionTimeout();
  Resource resDueToMinShare=Resources.none();
  Resource resDueToFairShare=Resources.none();
  if (curTime - sched.getLastTimeAtMinShare() > minShareTimeout) {
    Resource target=Resources.min(RESOURCE_CALCULATOR,clusterResource,sched.getMinShare(),sched.getDemand());
    resDueToMinShare=Resources.max(RESOURCE_CALCULATOR,clusterResource,Resources.none(),Resources.subtract(target,sched.getResourceUsage()));
  }
  if (curTime - sched.getLastTimeAtHalfFairShare() > fairShareTimeout) {
    Resource target=Resources.min(RESOURCE_CALCULATOR,clusterResource,sched.getFairShare(),sched.getDemand());
    resDueToFairShare=Resources.max(RESOURCE_CALCULATOR,clusterResource,Resources.none(),Resources.subtract(target,sched.getResourceUsage()));
  }
  Resource resToPreempt=Resources.max(RESOURCE_CALCULATOR,clusterResource,resDueToMinShare,resDueToFairShare);
  if (Resources.greaterThan(RESOURCE_CALCULATOR,clusterResource,resToPreempt,Resources.none())) {
    String message="Should preempt " + resToPreempt + " res for queue "+ sched.getName()+ ": resDueToMinShare = "+ resDueToMinShare+ ", resDueToFairShare = "+ resDueToFairShare;
    LOG.info(message);
  }
  return resToPreempt;
}
