{
  long minShareTimeout=sched.getMinSharePreemptionTimeout();
  long fairShareTimeout=sched.getFairSharePreemptionTimeout();
  Resource resDueToMinShare=Resources.none();
  Resource resDueToFairShare=Resources.none();
  ResourceCalculator calc=sched.getPolicy().getResourceCalculator();
  if (curTime - sched.getLastTimeAtMinShare() > minShareTimeout) {
    Resource target=Resources.componentwiseMin(sched.getMinShare(),sched.getDemand());
    resDueToMinShare=Resources.max(calc,clusterResource,Resources.none(),Resources.subtract(target,sched.getResourceUsage()));
  }
  if (curTime - sched.getLastTimeAtFairShareThreshold() > fairShareTimeout) {
    Resource target=Resources.componentwiseMin(sched.getFairShare(),sched.getDemand());
    resDueToFairShare=Resources.max(calc,clusterResource,Resources.none(),Resources.subtract(target,sched.getResourceUsage()));
  }
  Resource deficit=Resources.max(calc,clusterResource,resDueToMinShare,resDueToFairShare);
  if (Resources.greaterThan(calc,clusterResource,deficit,Resources.none())) {
    String message="Should preempt " + deficit + " res for queue "+ sched.getName()+ ": resDueToMinShare = "+ resDueToMinShare+ ", resDueToFairShare = "+ resDueToFairShare;
    LOG.info(message);
  }
  return deficit;
}
