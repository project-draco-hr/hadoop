{
  ApplicationAttemptId applicationAttemptId=request.getApplicationAttemptId();
  authorizeRequest(applicationAttemptId);
  ApplicationId appID=applicationAttemptId.getApplicationId();
  AllocateResponse lastResponse=responseMap.get(applicationAttemptId);
  if (lastResponse == null) {
    String message="Application doesn't exist in cache " + applicationAttemptId;
    LOG.error(message);
    RMAuditLogger.logFailure(this.rmContext.getRMApps().get(appID).getUser(),AuditConstants.REGISTER_AM,message,"ApplicationMasterService","Error in registering application master",appID,applicationAttemptId);
    throw RPCUtil.getRemoteException(message);
  }
synchronized (lastResponse) {
    LOG.info("AM registration " + applicationAttemptId);
    this.amLivelinessMonitor.receivedPing(applicationAttemptId);
    this.rmContext.getDispatcher().getEventHandler().handle(new RMAppAttemptRegistrationEvent(applicationAttemptId,request.getHost(),request.getRpcPort(),request.getTrackingUrl()));
    RMApp app=this.rmContext.getRMApps().get(appID);
    RMAuditLogger.logSuccess(app.getUser(),AuditConstants.REGISTER_AM,"ApplicationMasterService",appID,applicationAttemptId);
    RegisterApplicationMasterResponse response=recordFactory.newRecordInstance(RegisterApplicationMasterResponse.class);
    response.setMaximumResourceCapability(rScheduler.getMaximumResourceCapability());
    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId).getSubmissionContext().getAMContainerSpec().getApplicationACLs());
    return response;
  }
}
