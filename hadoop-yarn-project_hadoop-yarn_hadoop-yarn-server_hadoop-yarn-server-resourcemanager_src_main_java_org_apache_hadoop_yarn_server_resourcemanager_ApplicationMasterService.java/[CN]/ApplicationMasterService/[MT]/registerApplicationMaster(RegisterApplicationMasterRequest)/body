{
  ApplicationAttemptId applicationAttemptId=authorizeRequest();
  ApplicationId appID=applicationAttemptId.getApplicationId();
  AllocateResponseLock lock=responseMap.get(applicationAttemptId);
  if (lock == null) {
    RMAuditLogger.logFailure(this.rmContext.getRMApps().get(appID).getUser(),AuditConstants.REGISTER_AM,"Application doesn't exist in cache " + applicationAttemptId,"ApplicationMasterService","Error in registering application master",appID,applicationAttemptId);
    throwApplicationDoesNotExistInCacheException(applicationAttemptId);
  }
synchronized (lock) {
    AllocateResponse lastResponse=lock.getAllocateResponse();
    if (hasApplicationMasterRegistered(applicationAttemptId)) {
      String message="Application Master is already registered : " + applicationAttemptId.getApplicationId();
      LOG.warn(message);
      RMAuditLogger.logFailure(this.rmContext.getRMApps().get(applicationAttemptId.getApplicationId()).getUser(),AuditConstants.REGISTER_AM,"","ApplicationMasterService",message,applicationAttemptId.getApplicationId(),applicationAttemptId);
      throw new InvalidApplicationMasterRequestException(message);
    }
    this.amLivelinessMonitor.receivedPing(applicationAttemptId);
    RMApp app=this.rmContext.getRMApps().get(appID);
    lastResponse.setResponseId(0);
    lock.setAllocateResponse(lastResponse);
    LOG.info("AM registration " + applicationAttemptId);
    this.rmContext.getDispatcher().getEventHandler().handle(new RMAppAttemptRegistrationEvent(applicationAttemptId,request.getHost(),request.getRpcPort(),request.getTrackingUrl()));
    RMAuditLogger.logSuccess(app.getUser(),AuditConstants.REGISTER_AM,"ApplicationMasterService",appID,applicationAttemptId);
    RegisterApplicationMasterResponse response=recordFactory.newRecordInstance(RegisterApplicationMasterResponse.class);
    response.setMaximumResourceCapability(rScheduler.getMaximumResourceCapability());
    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId).getSubmissionContext().getAMContainerSpec().getApplicationACLs());
    if (UserGroupInformation.isSecurityEnabled()) {
      LOG.info("Setting client token master key");
      response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(rmContext.getClientToAMTokenSecretManager().getMasterKey(applicationAttemptId).getEncoded()));
    }
    return response;
  }
}
