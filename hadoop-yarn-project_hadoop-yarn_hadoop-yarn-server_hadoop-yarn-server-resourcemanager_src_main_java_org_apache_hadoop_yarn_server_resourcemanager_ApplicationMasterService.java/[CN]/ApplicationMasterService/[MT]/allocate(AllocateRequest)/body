{
  AMRMTokenIdentifier amrmTokenIdentifier=authorizeRequest();
  ApplicationAttemptId appAttemptId=amrmTokenIdentifier.getApplicationAttemptId();
  ApplicationId applicationId=appAttemptId.getApplicationId();
  this.amLivelinessMonitor.receivedPing(appAttemptId);
  AllocateResponseLock lock=responseMap.get(appAttemptId);
  if (lock == null) {
    LOG.error("AppAttemptId doesnt exist in cache " + appAttemptId);
    return shutdown;
  }
synchronized (lock) {
    AllocateResponse lastResponse=lock.getAllocateResponse();
    if (!hasApplicationMasterRegistered(appAttemptId)) {
      String message="Application Master is not registered for known application: " + applicationId + ". Let AM resync.";
      LOG.info(message);
      RMAuditLogger.logFailure(this.rmContext.getRMApps().get(applicationId).getUser(),AuditConstants.REGISTER_AM,"","ApplicationMasterService",message,applicationId,appAttemptId);
      return resync;
    }
    if ((request.getResponseId() + 1) == lastResponse.getResponseId()) {
      return lastResponse;
    }
 else     if (request.getResponseId() + 1 < lastResponse.getResponseId()) {
      LOG.error("Invalid responseid from appAttemptId " + appAttemptId);
      return resync;
    }
    float filteredProgress=request.getProgress();
    if (Float.isNaN(filteredProgress) || filteredProgress == Float.NEGATIVE_INFINITY || filteredProgress < 0) {
      request.setProgress(0);
    }
 else     if (filteredProgress > 1 || filteredProgress == Float.POSITIVE_INFINITY) {
      request.setProgress(1);
    }
    this.rmContext.getDispatcher().getEventHandler().handle(new RMAppAttemptStatusupdateEvent(appAttemptId,request.getProgress()));
    List<ResourceRequest> ask=request.getAskList();
    List<ContainerId> release=request.getReleaseList();
    ResourceBlacklistRequest blacklistRequest=request.getResourceBlacklistRequest();
    List<String> blacklistAdditions=(blacklistRequest != null) ? blacklistRequest.getBlacklistAdditions() : Collections.EMPTY_LIST;
    List<String> blacklistRemovals=(blacklistRequest != null) ? blacklistRequest.getBlacklistRemovals() : Collections.EMPTY_LIST;
    RMApp app=this.rmContext.getRMApps().get(applicationId);
    ApplicationSubmissionContext asc=app.getApplicationSubmissionContext();
    for (    ResourceRequest req : ask) {
      if (null == req.getNodeLabelExpression()) {
        req.setNodeLabelExpression(asc.getNodeLabelExpression());
      }
    }
    try {
      RMServerUtils.validateResourceRequests(ask,rScheduler.getMaximumResourceCapability(),app.getQueue(),rScheduler);
    }
 catch (    InvalidResourceRequestException e) {
      LOG.warn("Invalid resource ask by application " + appAttemptId,e);
      throw e;
    }
    try {
      RMServerUtils.validateBlacklistRequest(blacklistRequest);
    }
 catch (    InvalidResourceBlacklistRequestException e) {
      LOG.warn("Invalid blacklist request by application " + appAttemptId,e);
      throw e;
    }
    if (!app.getApplicationSubmissionContext().getKeepContainersAcrossApplicationAttempts()) {
      try {
        RMServerUtils.validateContainerReleaseRequest(release,appAttemptId);
      }
 catch (      InvalidContainerReleaseException e) {
        LOG.warn("Invalid container release by application " + appAttemptId,e);
        throw e;
      }
    }
    Allocation allocation=this.rScheduler.allocate(appAttemptId,ask,release,blacklistAdditions,blacklistRemovals);
    if (!blacklistAdditions.isEmpty() || !blacklistRemovals.isEmpty()) {
      LOG.info("blacklist are updated in Scheduler." + "blacklistAdditions: " + blacklistAdditions + ", "+ "blacklistRemovals: "+ blacklistRemovals);
    }
    RMAppAttempt appAttempt=app.getRMAppAttempt(appAttemptId);
    AllocateResponse allocateResponse=recordFactory.newRecordInstance(AllocateResponse.class);
    if (!allocation.getContainers().isEmpty()) {
      allocateResponse.setNMTokens(allocation.getNMTokens());
    }
    List<RMNode> updatedNodes=new ArrayList<RMNode>();
    if (app.pullRMNodeUpdates(updatedNodes) > 0) {
      List<NodeReport> updatedNodeReports=new ArrayList<NodeReport>();
      for (      RMNode rmNode : updatedNodes) {
        SchedulerNodeReport schedulerNodeReport=rScheduler.getNodeReport(rmNode.getNodeID());
        Resource used=BuilderUtils.newResource(0,0);
        int numContainers=0;
        if (schedulerNodeReport != null) {
          used=schedulerNodeReport.getUsedResource();
          numContainers=schedulerNodeReport.getNumContainers();
        }
        NodeReport report=BuilderUtils.newNodeReport(rmNode.getNodeID(),rmNode.getState(),rmNode.getHttpAddress(),rmNode.getRackName(),used,rmNode.getTotalCapability(),numContainers,rmNode.getHealthReport(),rmNode.getLastHealthReportTime());
        updatedNodeReports.add(report);
      }
      allocateResponse.setUpdatedNodes(updatedNodeReports);
    }
    allocateResponse.setAllocatedContainers(allocation.getContainers());
    allocateResponse.setCompletedContainersStatuses(appAttempt.pullJustFinishedContainers());
    allocateResponse.setResponseId(lastResponse.getResponseId() + 1);
    allocateResponse.setAvailableResources(allocation.getResourceLimit());
    allocateResponse.setNumClusterNodes(this.rScheduler.getNumClusterNodes());
    allocateResponse.setPreemptionMessage(generatePreemptionMessage(allocation));
    MasterKeyData nextMasterKey=this.rmContext.getAMRMTokenSecretManager().getNextMasterKeyData();
    if (nextMasterKey != null && nextMasterKey.getMasterKey().getKeyId() != amrmTokenIdentifier.getKeyId()) {
      Token<AMRMTokenIdentifier> amrmToken=rmContext.getAMRMTokenSecretManager().createAndGetAMRMToken(appAttemptId);
      ((RMAppAttemptImpl)appAttempt).setAMRMToken(amrmToken);
      allocateResponse.setAMRMToken(org.apache.hadoop.yarn.api.records.Token.newInstance(amrmToken.getIdentifier(),amrmToken.getKind().toString(),amrmToken.getPassword(),amrmToken.getService().toString()));
      LOG.info("The AMRMToken has been rolled-over. Send new AMRMToken back" + " to application: " + applicationId);
    }
    lock.setAllocateResponse(allocateResponse);
    return allocateResponse;
  }
}
