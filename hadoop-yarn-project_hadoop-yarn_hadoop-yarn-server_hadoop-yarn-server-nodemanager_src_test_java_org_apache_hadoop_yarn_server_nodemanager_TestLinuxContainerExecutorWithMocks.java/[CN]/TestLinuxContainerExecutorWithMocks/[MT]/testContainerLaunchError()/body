{
  File f=new File("./src/test/resources/mock-container-executer-with-error");
  if (!f.canExecute()) {
    f.setExecutable(true);
  }
  String executorPath=f.getAbsolutePath();
  Configuration conf=new Configuration();
  conf.set(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH,executorPath);
  conf.set(YarnConfiguration.NM_LOCAL_DIRS,"file:///bin/echo");
  conf.set(YarnConfiguration.NM_LOG_DIRS,"file:///dev/null");
  mockExec=new LinuxContainerExecutor();
  dirsHandler=new LocalDirsHandlerService();
  dirsHandler.init(conf);
  mockExec.setConf(conf);
  String appSubmitter="nobody";
  String cmd=String.valueOf(LinuxContainerExecutor.Commands.LAUNCH_CONTAINER.getValue());
  String appId="APP_ID";
  String containerId="CONTAINER_ID";
  Container container=mock(Container.class);
  ContainerId cId=mock(ContainerId.class);
  ContainerLaunchContext context=mock(ContainerLaunchContext.class);
  HashMap<String,String> env=new HashMap<String,String>();
  when(container.getContainerID()).thenReturn(cId);
  when(container.getLaunchContext()).thenReturn(context);
  when(cId.toString()).thenReturn(containerId);
  when(context.getEnvironment()).thenReturn(env);
  Path scriptPath=new Path("file:///bin/echo");
  Path tokensPath=new Path("file:///dev/null");
  Path workDir=new Path("/tmp");
  Path pidFile=new Path(workDir,"pid.txt");
  mockExec.activateContainer(cId,pidFile);
  int ret=mockExec.launchContainer(container,scriptPath,tokensPath,appSubmitter,appId,workDir,dirsHandler.getLocalDirs(),dirsHandler.getLogDirs());
  Assert.assertNotSame(0,ret);
  assertEquals(Arrays.asList(appSubmitter,cmd,appId,containerId,workDir.toString(),"/bin/echo","/dev/null",pidFile.toString(),StringUtils.join(",",dirsHandler.getLocalDirs()),StringUtils.join(",",dirsHandler.getLogDirs()),"cgroups=none"),readMockParams());
}
