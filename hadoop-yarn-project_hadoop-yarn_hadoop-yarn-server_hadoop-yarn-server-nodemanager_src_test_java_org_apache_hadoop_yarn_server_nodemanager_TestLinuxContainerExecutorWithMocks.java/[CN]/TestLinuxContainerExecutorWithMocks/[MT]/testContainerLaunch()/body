{
  String appSubmitter="nobody";
  String cmd=String.valueOf(LinuxContainerExecutor.Commands.LAUNCH_CONTAINER.getValue());
  String appId="APP_ID";
  String containerId="CONTAINER_ID";
  Container container=mock(Container.class);
  ContainerId cId=mock(ContainerId.class);
  ContainerLaunchContext context=mock(ContainerLaunchContext.class);
  HashMap<String,String> env=new HashMap<String,String>();
  when(container.getContainerId()).thenReturn(cId);
  when(container.getLaunchContext()).thenReturn(context);
  when(cId.toString()).thenReturn(containerId);
  when(context.getEnvironment()).thenReturn(env);
  Path scriptPath=new Path("file:///bin/echo");
  Path tokensPath=new Path("file:///dev/null");
  Path workDir=new Path("/tmp");
  Path pidFile=new Path(workDir,"pid.txt");
  mockExec.activateContainer(cId,pidFile);
  int ret=mockExec.launchContainer(new ContainerStartContext.Builder().setContainer(container).setNmPrivateContainerScriptPath(scriptPath).setNmPrivateTokensPath(tokensPath).setUser(appSubmitter).setAppId(appId).setContainerWorkDir(workDir).setLocalDirs(dirsHandler.getLocalDirs()).setLogDirs(dirsHandler.getLogDirs()).build());
  assertEquals(0,ret);
  assertEquals(Arrays.asList(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER,appSubmitter,cmd,appId,containerId,workDir.toString(),"/bin/echo","/dev/null",pidFile.toString(),StringUtils.join(",",dirsHandler.getLocalDirs()),StringUtils.join(",",dirsHandler.getLogDirs()),"cgroups=none"),readMockParams());
}
