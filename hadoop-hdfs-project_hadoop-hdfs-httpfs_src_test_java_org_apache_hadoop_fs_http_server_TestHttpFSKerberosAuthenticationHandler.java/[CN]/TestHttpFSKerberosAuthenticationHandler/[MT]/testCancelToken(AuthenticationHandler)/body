{
  DelegationTokenOperation op=DelegationTokenOperation.CANCELDELEGATIONTOKEN;
  HttpServletRequest request=Mockito.mock(HttpServletRequest.class);
  HttpServletResponse response=Mockito.mock(HttpServletResponse.class);
  Mockito.when(request.getParameter(HttpFSFileSystem.OP_PARAM)).thenReturn(op.toString());
  Mockito.when(request.getMethod()).thenReturn(op.getHttpMethod());
  Assert.assertFalse(handler.managementOperation(null,request,response));
  Mockito.verify(response).sendError(Mockito.eq(HttpServletResponse.SC_BAD_REQUEST),Mockito.contains("requires the parameter [token]"));
  Mockito.reset(response);
  Token<DelegationTokenIdentifier> token=HttpFSServerWebApp.get().get(DelegationTokenManager.class).createToken(UserGroupInformation.getCurrentUser(),"foo");
  Mockito.when(request.getParameter(HttpFSKerberosAuthenticator.TOKEN_PARAM)).thenReturn(token.encodeToUrlString());
  Assert.assertFalse(handler.managementOperation(null,request,response));
  Mockito.verify(response).setStatus(HttpServletResponse.SC_OK);
  try {
    HttpFSServerWebApp.get().get(DelegationTokenManager.class).verifyToken(token);
    Assert.fail();
  }
 catch (  DelegationTokenManagerException ex) {
    Assert.assertTrue(ex.toString().contains("DT01"));
  }
}
