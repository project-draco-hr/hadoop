{
  CompressionCodecFactory factory=new CompressionCodecFactory(new Configuration());
  CompressionCodec codec=factory.getCodec(new Path("/tmp/foo.bar"));
  assertEquals("default factory foo codec",null,codec);
  codec=factory.getCodecByClassName(BarCodec.class.getCanonicalName());
  assertEquals("default factory foo codec",null,codec);
  codec=factory.getCodec(new Path("/tmp/foo.gz"));
  checkCodec("default factory for .gz",GzipCodec.class,codec);
  codec=factory.getCodecByClassName(GzipCodec.class.getCanonicalName());
  checkCodec("default factory for gzip codec",GzipCodec.class,codec);
  codec=factory.getCodecByName("gzip");
  checkCodec("default factory for gzip codec",GzipCodec.class,codec);
  codec=factory.getCodecByName("GZIP");
  checkCodec("default factory for gzip codec",GzipCodec.class,codec);
  codec=factory.getCodecByName("GZIPCodec");
  checkCodec("default factory for gzip codec",GzipCodec.class,codec);
  codec=factory.getCodecByName("gzipcodec");
  checkCodec("default factory for gzip codec",GzipCodec.class,codec);
  Class klass=factory.getCodecClassByName("gzipcodec");
  assertEquals(GzipCodec.class,klass);
  codec=factory.getCodec(new Path("/tmp/foo.bz2"));
  checkCodec("default factory for .bz2",BZip2Codec.class,codec);
  codec=factory.getCodecByClassName(BZip2Codec.class.getCanonicalName());
  checkCodec("default factory for bzip2 codec",BZip2Codec.class,codec);
  codec=factory.getCodecByName("bzip2");
  checkCodec("default factory for bzip2 codec",BZip2Codec.class,codec);
  codec=factory.getCodecByName("bzip2codec");
  checkCodec("default factory for bzip2 codec",BZip2Codec.class,codec);
  codec=factory.getCodecByName("BZIP2");
  checkCodec("default factory for bzip2 codec",BZip2Codec.class,codec);
  codec=factory.getCodecByName("BZIP2CODEC");
  checkCodec("default factory for bzip2 codec",BZip2Codec.class,codec);
  codec=factory.getCodecByClassName(DeflateCodec.class.getCanonicalName());
  checkCodec("default factory for deflate codec",DeflateCodec.class,codec);
  codec=factory.getCodecByName("deflate");
  checkCodec("default factory for deflate codec",DeflateCodec.class,codec);
  codec=factory.getCodecByName("deflatecodec");
  checkCodec("default factory for deflate codec",DeflateCodec.class,codec);
  codec=factory.getCodecByName("DEFLATE");
  checkCodec("default factory for deflate codec",DeflateCodec.class,codec);
  codec=factory.getCodecByName("DEFLATECODEC");
  checkCodec("default factory for deflate codec",DeflateCodec.class,codec);
  factory=setClasses(new Class[0]);
  codec=factory.getCodec(new Path("/tmp/foo.bar"));
  assertEquals("empty factory bar codec",null,codec);
  codec=factory.getCodecByClassName(BarCodec.class.getCanonicalName());
  assertEquals("empty factory bar codec",null,codec);
  codec=factory.getCodec(new Path("/tmp/foo.gz"));
  checkCodec("empty factory gz codec",GzipCodec.class,codec);
  codec=factory.getCodecByClassName(GzipCodec.class.getCanonicalName());
  checkCodec("empty factory gz codec",GzipCodec.class,codec);
  codec=factory.getCodec(new Path("/tmp/foo.bz2"));
  checkCodec("empty factory for .bz2",BZip2Codec.class,codec);
  codec=factory.getCodecByClassName(BZip2Codec.class.getCanonicalName());
  checkCodec("empty factory for bzip2 codec",BZip2Codec.class,codec);
  codec=factory.getCodec(new Path("/tmp/foo.snappy"));
  checkCodec("empty factory snappy codec",SnappyCodec.class,codec);
  codec=factory.getCodecByClassName(SnappyCodec.class.getCanonicalName());
  checkCodec("empty factory snappy codec",SnappyCodec.class,codec);
  codec=factory.getCodec(new Path("/tmp/foo.lz4"));
  checkCodec("empty factory lz4 codec",Lz4Codec.class,codec);
  codec=factory.getCodecByClassName(Lz4Codec.class.getCanonicalName());
  checkCodec("empty factory lz4 codec",Lz4Codec.class,codec);
  factory=setClasses(new Class[]{BarCodec.class,FooCodec.class,FooBarCodec.class});
  codec=factory.getCodec(new Path("/tmp/.foo.bar.gz"));
  checkCodec("full factory gz codec",GzipCodec.class,codec);
  codec=factory.getCodecByClassName(GzipCodec.class.getCanonicalName());
  checkCodec("full codec gz codec",GzipCodec.class,codec);
  codec=factory.getCodec(new Path("/tmp/foo.bz2"));
  checkCodec("full factory for .bz2",BZip2Codec.class,codec);
  codec=factory.getCodecByClassName(BZip2Codec.class.getCanonicalName());
  checkCodec("full codec bzip2 codec",BZip2Codec.class,codec);
  codec=factory.getCodec(new Path("/tmp/foo.bar"));
  checkCodec("full factory bar codec",BarCodec.class,codec);
  codec=factory.getCodecByClassName(BarCodec.class.getCanonicalName());
  checkCodec("full factory bar codec",BarCodec.class,codec);
  codec=factory.getCodecByName("bar");
  checkCodec("full factory bar codec",BarCodec.class,codec);
  codec=factory.getCodecByName("BAR");
  checkCodec("full factory bar codec",BarCodec.class,codec);
  codec=factory.getCodec(new Path("/tmp/foo/baz.foo.bar"));
  checkCodec("full factory foo bar codec",FooBarCodec.class,codec);
  codec=factory.getCodecByClassName(FooBarCodec.class.getCanonicalName());
  checkCodec("full factory foo bar codec",FooBarCodec.class,codec);
  codec=factory.getCodecByName("foobar");
  checkCodec("full factory foo bar codec",FooBarCodec.class,codec);
  codec=factory.getCodecByName("FOOBAR");
  checkCodec("full factory foo bar codec",FooBarCodec.class,codec);
  codec=factory.getCodec(new Path("/tmp/foo.foo"));
  checkCodec("full factory foo codec",FooCodec.class,codec);
  codec=factory.getCodecByClassName(FooCodec.class.getCanonicalName());
  checkCodec("full factory foo codec",FooCodec.class,codec);
  codec=factory.getCodecByName("foo");
  checkCodec("full factory foo codec",FooCodec.class,codec);
  codec=factory.getCodecByName("FOO");
  checkCodec("full factory foo codec",FooCodec.class,codec);
  factory=setClasses(new Class[]{NewGzipCodec.class});
  codec=factory.getCodec(new Path("/tmp/foo.gz"));
  checkCodec("overridden factory for .gz",NewGzipCodec.class,codec);
  codec=factory.getCodecByClassName(NewGzipCodec.class.getCanonicalName());
  checkCodec("overridden factory for gzip codec",NewGzipCodec.class,codec);
  Configuration conf=new Configuration();
  conf.set(CommonConfigurationKeys.IO_COMPRESSION_CODECS_KEY,"   org.apache.hadoop.io.compress.GzipCodec   , " + "    org.apache.hadoop.io.compress.DefaultCodec  , " + " org.apache.hadoop.io.compress.BZip2Codec   ");
  try {
    CompressionCodecFactory.getCodecClasses(conf);
  }
 catch (  IllegalArgumentException e) {
    fail("IllegalArgumentException is unexpected");
  }
}
