{
  Map<DatanodeStorage,BlockListAsLongs> perVolumeBlockLists=dn.getFSDataset().getBlockReports(bpid);
  StorageBlockReport[] reports=new StorageBlockReport[perVolumeBlockLists.size()];
  boolean corruptedGs=false;
  boolean corruptedLen=false;
  int reportIndex=0;
  for (  Map.Entry<DatanodeStorage,BlockListAsLongs> kvPair : perVolumeBlockLists.entrySet()) {
    DatanodeStorage dnStorage=kvPair.getKey();
    BlockListAsLongs blockList=kvPair.getValue();
    BlockListAsLongs.Builder builder=BlockListAsLongs.builder();
    for (    BlockReportReplica block : blockList) {
      if (corruptOneBlockGs && !corruptedGs) {
        long gsOld=block.getGenerationStamp();
        long gsNew;
        do {
          gsNew=rand.nextInt();
        }
 while (gsNew == gsOld);
        block.setGenerationStamp(gsNew);
        LOG.info("Corrupted the GS for block ID " + block);
        corruptedGs=true;
      }
 else       if (corruptOneBlockLen && !corruptedLen) {
        long lenOld=block.getNumBytes();
        long lenNew;
        do {
          lenNew=rand.nextInt((int)lenOld - 1);
        }
 while (lenNew == lenOld);
        block.setNumBytes(lenNew);
        LOG.info("Corrupted the length for block ID " + block);
        corruptedLen=true;
      }
      builder.add(new BlockReportReplica(block));
    }
    reports[reportIndex++]=new StorageBlockReport(dnStorage,builder.build());
  }
  return reports;
}
