{
  RMNode node=rm.getRMContext().getRMNodes().get(nm.getNodeId());
  NodeHealthStatus health=node.getNodeHealthStatus();
  ResourceScheduler sched=rm.getResourceScheduler();
  SchedulerNodeReport report=sched.getNodeReport(nm.getNodeId());
  WebServicesTestUtils.checkStringMatch("state",node.getState().toString(),state);
  WebServicesTestUtils.checkStringMatch("rack",node.getRackName(),rack);
  WebServicesTestUtils.checkStringMatch("healthStatus","Healthy",healthStatus);
  WebServicesTestUtils.checkStringMatch("id",nm.getNodeId().toString(),id);
  WebServicesTestUtils.checkStringMatch("nodeHostName",nm.getNodeId().getHost(),nodeHostName);
  WebServicesTestUtils.checkStringMatch("healthReport",String.valueOf(health.getHealthReport()),healthReport);
  String expectedHttpAddress=nm.getNodeId().getHost() + ":" + nm.getHttpPort();
  WebServicesTestUtils.checkStringMatch("nodeHTTPAddress",expectedHttpAddress,nodeHTTPAddress);
  long expectedHealthUpdate=health.getLastHealthReportTime();
  assertEquals("lastHealthUpdate doesn't match, got: " + lastHealthUpdate + " expected: "+ expectedHealthUpdate,expectedHealthUpdate,lastHealthUpdate);
  if (report != null) {
    assertEquals("numContainers doesn't match: " + numContainers,report.getNumContainers(),numContainers);
    assertEquals("usedMemoryMB doesn't match: " + usedMemoryMB,report.getUsedResource().getMemory(),usedMemoryMB);
    assertEquals("availMemoryMB doesn't match: " + availMemoryMB,report.getAvailableResource().getMemory(),availMemoryMB);
  }
}
