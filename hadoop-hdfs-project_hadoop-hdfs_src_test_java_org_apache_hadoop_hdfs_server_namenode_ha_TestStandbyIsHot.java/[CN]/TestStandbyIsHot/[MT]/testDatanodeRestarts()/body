{
  Configuration conf=new Configuration();
  conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,1024);
  HAUtil.setAllowStandbyReads(conf,true);
  conf.setInt(DFSConfigKeys.DFS_HA_TAILEDITS_PERIOD_KEY,1);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(1).build();
  try {
    NameNode nn0=cluster.getNameNode(0);
    NameNode nn1=cluster.getNameNode(1);
    cluster.transitionToActive(0);
    DFSTestUtil.createFile(cluster.getFileSystem(0),TEST_FILE_PATH,5 * 1024,(short)1,1L);
    HATestUtil.waitForStandbyToCatchUp(nn0,nn1);
    DataNode dn=cluster.getDataNodes().get(0);
    String dnName=dn.getDatanodeId().getName();
    DataNodeProperties dnProps=cluster.stopDataNode(0);
    BlockManagerTestUtil.noticeDeadDatanode(nn0,dnName);
    BlockManagerTestUtil.noticeDeadDatanode(nn1,dnName);
    BlockManagerTestUtil.updateState(nn0.getNamesystem().getBlockManager());
    BlockManagerTestUtil.updateState(nn1.getNamesystem().getBlockManager());
    assertEquals(5,nn0.getNamesystem().getUnderReplicatedBlocks());
    assertEquals(0,nn1.getNamesystem().getUnderReplicatedBlocks());
    LocatedBlocks locs=nn1.getRpcServer().getBlockLocations(TEST_FILE,0,1);
    assertEquals("Standby should have registered that the block has no replicas",0,locs.get(0).getLocations().length);
    cluster.restartDataNode(dnProps);
    cluster.waitActive(0);
    cluster.waitActive(1);
    BlockManagerTestUtil.updateState(nn0.getNamesystem().getBlockManager());
    BlockManagerTestUtil.updateState(nn1.getNamesystem().getBlockManager());
    assertEquals(0,nn0.getNamesystem().getUnderReplicatedBlocks());
    assertEquals(0,nn1.getNamesystem().getUnderReplicatedBlocks());
    locs=nn1.getRpcServer().getBlockLocations(TEST_FILE,0,1);
    assertEquals("Standby should have registered that the block has replicas again",1,locs.get(0).getLocations().length);
  }
  finally {
    cluster.shutdown();
  }
}
