{
  Configuration conf=new Configuration();
  HAUtil.setAllowStandbyReads(conf,true);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).nnTopology(MiniDFSNNTopology.simpleHATopology()).numDataNodes(3).build();
  Runtime mockRuntime=mock(Runtime.class);
  try {
    cluster.waitActive();
    cluster.transitionToActive(0);
    NameNode nn1=cluster.getNameNode(0);
    NameNode nn2=cluster.getNameNode(1);
    nn2.getNamesystem().getEditLogTailer().setRuntime(mockRuntime);
    nn2.getNamesystem().getEditLogTailer().setSleepTime(250);
    nn2.getNamesystem().getEditLogTailer().interrupt();
    FileSystem fs=TestDFSClientFailover.configureFailoverFs(cluster,conf);
    Thread.sleep(1000);
    System.err.println("==================================");
    DFSTestUtil.writeFile(fs,TEST_FILE_PATH,TEST_FILE_DATA);
    nn1.getRpcServer().rollEditLog();
    System.err.println("==================================");
    LOG.info("Waiting for block locations to appear on standby node");
    waitForBlockLocations(cluster,nn2,TEST_FILE,3);
    cluster.triggerHeartbeats();
    cluster.triggerBlockReports();
    LOG.info("Changing replication to 1");
    fs.setReplication(TEST_FILE_PATH,(short)1);
    waitForBlockLocations(cluster,nn1,TEST_FILE,1);
    nn1.getRpcServer().rollEditLog();
    LOG.info("Waiting for lowered replication to show up on standby");
    waitForBlockLocations(cluster,nn2,TEST_FILE,1);
    LOG.info("Changing replication to 3");
    fs.setReplication(TEST_FILE_PATH,(short)3);
    nn1.getRpcServer().rollEditLog();
    LOG.info("Waiting for higher replication to show up on standby");
    waitForBlockLocations(cluster,nn2,TEST_FILE,3);
  }
  finally {
    verify(mockRuntime,times(0)).exit(anyInt());
    cluster.shutdown();
  }
}
