{
  AclEntry[] expected=new AclEntry[]{aclEntry(ACCESS,USER,"diana",ALL),aclEntry(ACCESS,GROUP,NONE)};
  AclStatus s=hdfs.getAclStatus(filePath);
  AclEntry[] returned=s.getEntries().toArray(new AclEntry[0]);
  assertArrayEquals(expected,returned);
  assertPermission((short)02570,filePath);
  assertFilePermissionDenied(fsAsBruce,BRUCE,filePath);
  assertFilePermissionGranted(fsAsDiana,DIANA,filePath);
  s=hdfs.getAclStatus(subdirPath);
  returned=s.getEntries().toArray(new AclEntry[0]);
  assertArrayEquals(expected,returned);
  assertPermission((short)02570,subdirPath);
  assertDirPermissionDenied(fsAsBruce,BRUCE,subdirPath);
  assertDirPermissionGranted(fsAsDiana,DIANA,subdirPath);
  expected=new AclEntry[]{aclEntry(ACCESS,USER,"bruce",READ_EXECUTE),aclEntry(ACCESS,GROUP,NONE)};
  s=hdfs.getAclStatus(fileSnapshotPath);
  returned=s.getEntries().toArray(new AclEntry[0]);
  assertArrayEquals(expected,returned);
  assertPermission((short)02550,fileSnapshotPath);
  assertFilePermissionGranted(fsAsBruce,BRUCE,fileSnapshotPath);
  assertFilePermissionDenied(fsAsDiana,DIANA,fileSnapshotPath);
  s=hdfs.getAclStatus(subdirSnapshotPath);
  returned=s.getEntries().toArray(new AclEntry[0]);
  assertArrayEquals(expected,returned);
  assertPermission((short)02550,subdirSnapshotPath);
  assertDirPermissionGranted(fsAsBruce,BRUCE,subdirSnapshotPath);
  assertDirPermissionDenied(fsAsDiana,DIANA,subdirSnapshotPath);
}
