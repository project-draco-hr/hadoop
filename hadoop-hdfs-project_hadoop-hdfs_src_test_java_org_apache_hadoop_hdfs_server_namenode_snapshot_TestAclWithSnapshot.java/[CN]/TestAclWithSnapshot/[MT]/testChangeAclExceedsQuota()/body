{
  Path filePath=new Path(path,"file1");
  Path fileSnapshotPath=new Path(snapshotPath,"file1");
  FileSystem.mkdirs(hdfs,path,FsPermission.createImmutable((short)0755));
  hdfs.allowSnapshot(path);
  hdfs.setQuota(path,3,HdfsConstants.QUOTA_DONT_SET);
  FileSystem.create(hdfs,filePath,FsPermission.createImmutable((short)0600)).close();
  hdfs.setPermission(filePath,FsPermission.createImmutable((short)0600));
  List<AclEntry> aclSpec=Lists.newArrayList(aclEntry(ACCESS,USER,"bruce",READ_WRITE));
  hdfs.modifyAclEntries(filePath,aclSpec);
  hdfs.createSnapshot(path,snapshotName);
  AclStatus s=hdfs.getAclStatus(filePath);
  AclEntry[] returned=s.getEntries().toArray(new AclEntry[0]);
  assertArrayEquals(new AclEntry[]{aclEntry(ACCESS,USER,"bruce",READ_WRITE),aclEntry(ACCESS,GROUP,NONE)},returned);
  assertPermission((short)010660,filePath);
  s=hdfs.getAclStatus(fileSnapshotPath);
  returned=s.getEntries().toArray(new AclEntry[0]);
  assertArrayEquals(new AclEntry[]{aclEntry(ACCESS,USER,"bruce",READ_WRITE),aclEntry(ACCESS,GROUP,NONE)},returned);
  assertPermission((short)010660,filePath);
  aclSpec=Lists.newArrayList(aclEntry(ACCESS,USER,"bruce",READ));
  exception.expect(NSQuotaExceededException.class);
  hdfs.modifyAclEntries(filePath,aclSpec);
}
