{
  String aid=$(APPLICATION_ID);
  if (aid.isEmpty()) {
    puts("Bad request: requires application ID");
    return;
  }
  ApplicationId appID=null;
  try {
    appID=Apps.toAppID(aid);
  }
 catch (  Exception e) {
    puts("Invalid Application ID: " + aid);
    return;
  }
  RMContext context=this.rm.getRMContext();
  RMApp rmApp=context.getRMApps().get(appID);
  if (rmApp == null) {
    puts("Application not found: " + aid);
    return;
  }
  AppInfo app=new AppInfo(rm,rmApp,true,WebAppUtils.getHttpSchemePrefix(conf));
  String remoteUser=request().getRemoteUser();
  UserGroupInformation callerUGI=null;
  if (remoteUser != null) {
    callerUGI=UserGroupInformation.createRemoteUser(remoteUser);
  }
  if (callerUGI != null && !(this.rm.getApplicationACLsManager().checkAccess(callerUGI,ApplicationAccessType.VIEW_APP,app.getUser(),appID) || this.rm.getQueueACLsManager().checkAccess(callerUGI,QueueACL.ADMINISTER_QUEUE,app.getQueue()))) {
    puts("You (User " + remoteUser + ") are not authorized to view application "+ appID);
    return;
  }
  setTitle(join("Application ",aid));
  RMAppMetrics appMerics=rmApp.getRMAppMetrics();
  RMAppAttemptMetrics attemptMetrics;
  if (null == rmApp.getCurrentAppAttempt()) {
    attemptMetrics=null;
  }
 else {
    attemptMetrics=rmApp.getCurrentAppAttempt().getRMAppAttemptMetrics();
  }
  Resource attemptResourcePreempted=attemptMetrics == null ? Resources.none() : attemptMetrics.getResourcePreempted();
  int attemptNumNonAMContainerPreempted=attemptMetrics == null ? 0 : attemptMetrics.getNumNonAMContainersPreempted();
  info("Application Overview")._("User:",app.getUser())._("Name:",app.getName())._("Application Type:",app.getApplicationType())._("Application Tags:",app.getApplicationTags())._("YarnApplicationState:",clarifyAppState(app.getState()))._("FinalStatus Reported by AM:",clairfyAppFinalStatus(app.getFinalStatus()))._("Started:",Times.format(app.getStartTime()))._("Elapsed:",StringUtils.formatTime(Times.elapsed(app.getStartTime(),app.getFinishTime())))._("Tracking URL:",!app.isTrackingUrlReady() ? "#" : app.getTrackingUrlPretty(),app.getTrackingUI())._("Diagnostics:",app.getNote());
  DIV<Hamlet> pdiv=html._(InfoBlock.class).div(_INFO_WRAP);
  info("Application Overview").clear();
  info("Application Metrics")._("Total Resource Preempted:",appMerics.getResourcePreempted())._("Total Number of Non-AM Containers Preempted:",String.valueOf(appMerics.getNumNonAMContainersPreempted()))._("Total Number of AM Containers Preempted:",String.valueOf(appMerics.getNumAMContainersPreempted()))._("Resource Preempted from Current Attempt:",attemptResourcePreempted)._("Number of Non-AM Containers Preempted from Current Attempt:",attemptNumNonAMContainerPreempted)._("Aggregate Resource Allocation:",String.format("%d MB-seconds, %d vcore-seconds",appMerics.getMemorySeconds(),appMerics.getVcoreSeconds()));
  pdiv._();
  Collection<RMAppAttempt> attempts=rmApp.getAppAttempts().values();
  String amString=attempts.size() == 1 ? "ApplicationMaster" : "ApplicationMasters";
  DIV<Hamlet> div=html._(InfoBlock.class).div(_INFO_WRAP);
  TABLE<DIV<Hamlet>> table=div.table("#app");
  table.tr().th(amString)._().tr().th(_TH,"Attempt Number").th(_TH,"Start Time").th(_TH,"Node").th(_TH,"Logs")._();
  boolean odd=false;
  for (  RMAppAttempt attempt : attempts) {
    AppAttemptInfo attemptInfo=new AppAttemptInfo(attempt,app.getUser());
    table.tr((odd=!odd) ? _ODD : _EVEN).td(String.valueOf(attemptInfo.getAttemptId())).td(Times.format(attemptInfo.getStartTime())).td().a(".nodelink",url("//",attemptInfo.getNodeHttpAddress()),attemptInfo.getNodeHttpAddress())._().td().a(".logslink",url(attemptInfo.getLogsLink()),"logs")._()._();
  }
  table._();
  div._();
  createContainerLocalityTable(html,attemptMetrics);
  createResourceRequestsTable(html,app);
}
