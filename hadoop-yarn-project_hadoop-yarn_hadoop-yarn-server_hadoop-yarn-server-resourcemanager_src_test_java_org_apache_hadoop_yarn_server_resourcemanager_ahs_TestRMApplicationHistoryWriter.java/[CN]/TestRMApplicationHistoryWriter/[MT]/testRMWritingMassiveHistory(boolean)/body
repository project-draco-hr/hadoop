{
  YarnConfiguration conf=new YarnConfiguration();
  if (isFS) {
    conf.setBoolean(FairSchedulerConfiguration.ASSIGN_MULTIPLE,true);
    conf.set("yarn.resourcemanager.scheduler.class",FairScheduler.class.getName());
  }
 else {
    conf.set("yarn.resourcemanager.scheduler.class",CapacityScheduler.class.getName());
  }
  MockRM rm=new MockRM(conf){
    @Override protected RMApplicationHistoryWriter createRMApplicationHistoryWriter(){
      return new RMApplicationHistoryWriter(){
        @Override public void applicationStarted(        RMApp app){
        }
        @Override public void applicationFinished(        RMApp app,        RMAppState finalState){
        }
        @Override public void applicationAttemptStarted(        RMAppAttempt appAttempt){
        }
        @Override public void applicationAttemptFinished(        RMAppAttempt appAttempt,        RMAppAttemptState finalState){
        }
        @Override public void containerStarted(        RMContainer container){
        }
        @Override public void containerFinished(        RMContainer container){
        }
      }
;
    }
  }
;
  long startTime1=System.currentTimeMillis();
  testRMWritingMassiveHistory(rm);
  long finishTime1=System.currentTimeMillis();
  long elapsedTime1=finishTime1 - startTime1;
  rm=new MockRM(conf);
  long startTime2=System.currentTimeMillis();
  testRMWritingMassiveHistory(rm);
  long finishTime2=System.currentTimeMillis();
  long elapsedTime2=finishTime2 - startTime2;
  Assert.assertTrue(elapsedTime2 - elapsedTime1 < elapsedTime1 / 10);
}
