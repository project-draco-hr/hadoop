{
  proto.addCachePool(new CachePoolInfo("pool1").setMode(new FsPermission((short)0777)));
  proto.addCachePool(new CachePoolInfo("pool2").setMode(new FsPermission((short)0777)));
  proto.addCachePool(new CachePoolInfo("pool3").setMode(new FsPermission((short)0777)));
  proto.addCachePool(new CachePoolInfo("pool4").setMode(new FsPermission((short)0)));
  PathBasedCacheDirective alpha=new PathBasedCacheDirective.Builder().setPath(new Path("/alpha")).setPool("pool1").build();
  PathBasedCacheDirective beta=new PathBasedCacheDirective.Builder().setPath(new Path("/beta")).setPool("pool2").build();
  PathBasedCacheDirective delta=new PathBasedCacheDirective.Builder().setPath(new Path("/delta")).setPool("pool1").build();
  long alphaId=addAsUnprivileged(alpha);
  long alphaId2=addAsUnprivileged(alpha);
  assertFalse("Expected to get unique directives when re-adding an " + "existing PathBasedCacheDirective",alphaId == alphaId2);
  long betaId=addAsUnprivileged(beta);
  try {
    addAsUnprivileged(new PathBasedCacheDirective.Builder().setPath(new Path("/unicorn")).setPool("no_such_pool").build());
    fail("expected an error when adding to a non-existent pool.");
  }
 catch (  InvalidRequestException ioe) {
    GenericTestUtils.assertExceptionContains("Unknown pool",ioe);
  }
  try {
    addAsUnprivileged(new PathBasedCacheDirective.Builder().setPath(new Path("/blackhole")).setPool("pool4").build());
    fail("expected an error when adding to a pool with " + "mode 0 (no permissions for anyone).");
  }
 catch (  AccessControlException e) {
    GenericTestUtils.assertExceptionContains("Permission denied while accessing pool",e);
  }
  try {
    addAsUnprivileged(new PathBasedCacheDirective.Builder().setPath(new Path("/illegal:path/")).setPool("pool1").build());
    fail("expected an error when adding a malformed path " + "to the cache directives.");
  }
 catch (  IllegalArgumentException e) {
    GenericTestUtils.assertExceptionContains("is not a valid DFS filename",e);
  }
  try {
    addAsUnprivileged(new PathBasedCacheDirective.Builder().setPath(new Path("/emptypoolname")).setReplication((short)1).setPool("").build());
    fail("expected an error when adding a PathBasedCache " + "directive with an empty pool name.");
  }
 catch (  InvalidRequestException e) {
    GenericTestUtils.assertExceptionContains("Invalid empty pool name",e);
  }
  long deltaId=addAsUnprivileged(delta);
  long relativeId=addAsUnprivileged(new PathBasedCacheDirective.Builder().setPath(new Path("relative")).setPool("pool1").build());
  RemoteIterator<PathBasedCacheDirective> iter;
  iter=dfs.listPathBasedCacheDirectives(null);
  validateListAll(iter,alphaId,alphaId2,betaId,deltaId,relativeId);
  iter=dfs.listPathBasedCacheDirectives(new PathBasedCacheDirective.Builder().setPool("pool3").build());
  assertFalse(iter.hasNext());
  iter=dfs.listPathBasedCacheDirectives(new PathBasedCacheDirective.Builder().setPool("pool1").build());
  validateListAll(iter,alphaId,alphaId2,deltaId,relativeId);
  iter=dfs.listPathBasedCacheDirectives(new PathBasedCacheDirective.Builder().setPool("pool2").build());
  validateListAll(iter,betaId);
  dfs.removePathBasedCacheDirective(betaId);
  iter=dfs.listPathBasedCacheDirectives(new PathBasedCacheDirective.Builder().setPool("pool2").build());
  assertFalse(iter.hasNext());
  try {
    dfs.removePathBasedCacheDirective(betaId);
    fail("expected an error when removing a non-existent ID");
  }
 catch (  InvalidRequestException e) {
    GenericTestUtils.assertExceptionContains("No directive with ID",e);
  }
  try {
    proto.removePathBasedCacheDirective(-42l);
    fail("expected an error when removing a negative ID");
  }
 catch (  InvalidRequestException e) {
    GenericTestUtils.assertExceptionContains("Invalid negative ID",e);
  }
  try {
    proto.removePathBasedCacheDirective(43l);
    fail("expected an error when removing a non-existent ID");
  }
 catch (  InvalidRequestException e) {
    GenericTestUtils.assertExceptionContains("No directive with ID",e);
  }
  dfs.removePathBasedCacheDirective(alphaId);
  dfs.removePathBasedCacheDirective(alphaId2);
  dfs.removePathBasedCacheDirective(deltaId);
  dfs.modifyPathBasedCacheDirective(new PathBasedCacheDirective.Builder().setId(relativeId).setReplication((short)555).build());
  iter=dfs.listPathBasedCacheDirectives(null);
  assertTrue(iter.hasNext());
  PathBasedCacheDirective modified=iter.next();
  assertEquals(relativeId,modified.getId().longValue());
  assertEquals((short)555,modified.getReplication().shortValue());
  dfs.removePathBasedCacheDirective(relativeId);
  iter=dfs.listPathBasedCacheDirectives(null);
  assertFalse(iter.hasNext());
  PathBasedCacheDirective directive=new PathBasedCacheDirective.Builder().setPath(new Path(".")).setPool("pool1").build();
  long id=dfs.addPathBasedCacheDirective(directive);
  dfs.modifyPathBasedCacheDirective(new PathBasedCacheDirective.Builder(directive).setId(id).setReplication((short)2).build());
  dfs.removePathBasedCacheDirective(id);
}
