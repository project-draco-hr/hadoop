{
  final FSNamesystem namesystem=nn.getNamesystem();
  final CacheManager cacheManager=namesystem.getCacheManager();
  LOG.info("Waiting for " + expectedCachedBlocks + " blocks with "+ expectedCachedReplicas+ " replicas.");
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      int numCachedBlocks=0, numCachedReplicas=0;
      namesystem.readLock();
      try {
        GSet<CachedBlock,CachedBlock> cachedBlocks=cacheManager.getCachedBlocks();
        if (cachedBlocks != null) {
          for (Iterator<CachedBlock> iter=cachedBlocks.iterator(); iter.hasNext(); ) {
            CachedBlock cachedBlock=iter.next();
            numCachedBlocks++;
            numCachedReplicas+=cachedBlock.getDatanodes(Type.CACHED).size();
          }
        }
      }
  finally {
        namesystem.readUnlock();
      }
      if ((numCachedBlocks == expectedCachedBlocks) && (numCachedReplicas == expectedCachedReplicas)) {
        return true;
      }
 else {
        LOG.info("cached blocks: have " + numCachedBlocks + " / "+ expectedCachedBlocks);
        LOG.info("cached replicas: have " + numCachedReplicas + " / "+ expectedCachedReplicas);
        return false;
      }
    }
  }
,500,60000);
}
