{
  Assume.assumeTrue(canTestDatanodeCaching());
  HdfsConfiguration conf=createCachingConf();
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build();
  try {
    cluster.waitActive();
    DistributedFileSystem dfs=cluster.getFileSystem();
    NameNode namenode=cluster.getNameNode();
    final String pool="friendlyPool";
    dfs.addCachePool(new CachePoolInfo(pool));
    final List<Path> paths=new LinkedList<Path>();
    paths.add(new Path("/foo/bar"));
    paths.add(new Path("/foo/baz"));
    paths.add(new Path("/foo2/bar2"));
    paths.add(new Path("/foo2/baz2"));
    dfs.mkdir(new Path("/foo"),FsPermission.getDirDefault());
    dfs.mkdir(new Path("/foo2"),FsPermission.getDirDefault());
    final int numBlocksPerFile=2;
    for (    Path path : paths) {
      FileSystemTestHelper.createFile(dfs,path,numBlocksPerFile,(int)BLOCK_SIZE,(short)3,false);
    }
    waitForCachedBlocks(namenode,0,0,"testReplicationFactor:0");
    checkNumCachedReplicas(dfs,paths,0,0);
    long id=dfs.addPathBasedCacheDirective(new PathBasedCacheDirective.Builder().setPath(new Path("/foo")).setReplication((short)1).setPool(pool).build());
    waitForCachedBlocks(namenode,4,4,"testReplicationFactor:1");
    checkNumCachedReplicas(dfs,paths,4,4);
    for (int i=2; i <= 3; i++) {
      dfs.modifyPathBasedCacheDirective(new PathBasedCacheDirective.Builder().setId(id).setReplication((short)i).build());
      waitForCachedBlocks(namenode,4,4 * i,"testReplicationFactor:2");
      checkNumCachedReplicas(dfs,paths,4,4 * i);
    }
    for (int i=2; i >= 1; i--) {
      dfs.modifyPathBasedCacheDirective(new PathBasedCacheDirective.Builder().setId(id).setReplication((short)i).build());
      waitForCachedBlocks(namenode,4,4 * i,"testReplicationFactor:3");
      checkNumCachedReplicas(dfs,paths,4,4 * i);
    }
    dfs.removePathBasedCacheDirective(id);
    waitForCachedBlocks(namenode,0,0,"testReplicationFactor:4");
    checkNumCachedReplicas(dfs,paths,0,0);
  }
  finally {
    cluster.shutdown();
  }
}
