{
  String poolName="pool1";
  String ownerName="abc";
  String groupName="123";
  FsPermission mode=new FsPermission((short)0755);
  int weight=150;
  dfs.addCachePool(new CachePoolInfo(poolName).setOwnerName(ownerName).setGroupName(groupName).setMode(mode).setWeight(weight));
  RemoteIterator<CachePoolInfo> iter=dfs.listCachePools();
  CachePoolInfo info=iter.next();
  assertEquals(poolName,info.getPoolName());
  assertEquals(ownerName,info.getOwnerName());
  assertEquals(groupName,info.getGroupName());
  ownerName="def";
  groupName="456";
  mode=new FsPermission((short)0700);
  weight=151;
  dfs.modifyCachePool(new CachePoolInfo(poolName).setOwnerName(ownerName).setGroupName(groupName).setMode(mode).setWeight(weight));
  iter=dfs.listCachePools();
  info=iter.next();
  assertEquals(poolName,info.getPoolName());
  assertEquals(ownerName,info.getOwnerName());
  assertEquals(groupName,info.getGroupName());
  assertEquals(mode,info.getMode());
  assertEquals(Integer.valueOf(weight),info.getWeight());
  dfs.removeCachePool(poolName);
  iter=dfs.listCachePools();
  assertFalse("expected no cache pools after deleting pool",iter.hasNext());
  proto.listCachePools(null);
  try {
    proto.removeCachePool("pool99");
    Assert.fail("expected to get an exception when " + "removing a non-existent pool.");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("can't remove non-existent",ioe);
  }
  try {
    proto.removeCachePool(poolName);
    Assert.fail("expected to get an exception when " + "removing a non-existent pool.");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("can't remove non-existent",ioe);
  }
  iter=dfs.listCachePools();
  assertFalse("expected no cache pools after deleting pool",iter.hasNext());
}
