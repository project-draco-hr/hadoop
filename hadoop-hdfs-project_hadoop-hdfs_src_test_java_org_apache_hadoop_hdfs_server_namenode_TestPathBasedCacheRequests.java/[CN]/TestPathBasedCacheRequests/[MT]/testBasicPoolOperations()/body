{
  final String poolName="pool1";
  CachePoolInfo info=new CachePoolInfo(poolName).setOwnerName("bob").setGroupName("bobgroup").setMode(new FsPermission((short)0755)).setWeight(150);
  dfs.addCachePool(info);
  try {
    dfs.addCachePool(info);
    fail("added the pool with the same name twice");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("pool1 already exists",ioe);
  }
  try {
    dfs.addCachePool(new CachePoolInfo(""));
    fail("added empty pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("invalid empty cache pool name",ioe);
  }
  try {
    dfs.addCachePool(null);
    fail("added null pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("CachePoolInfo is null",ioe);
  }
  try {
    proto.addCachePool(new CachePoolInfo(""));
    fail("added empty pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("invalid empty cache pool name",ioe);
  }
  try {
    proto.addCachePool(null);
    fail("added null pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("CachePoolInfo is null",ioe);
  }
  info.setOwnerName("jane").setGroupName("janegroup").setMode(new FsPermission((short)0700)).setWeight(314);
  dfs.modifyCachePool(info);
  try {
    dfs.modifyCachePool(new CachePoolInfo("fool"));
    fail("modified non-existent cache pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("fool does not exist",ioe);
  }
  try {
    dfs.modifyCachePool(new CachePoolInfo(""));
    fail("modified empty pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("invalid empty cache pool name",ioe);
  }
  try {
    dfs.modifyCachePool(null);
    fail("modified null pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("CachePoolInfo is null",ioe);
  }
  try {
    proto.modifyCachePool(new CachePoolInfo(""));
    fail("modified empty pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("invalid empty cache pool name",ioe);
  }
  try {
    proto.modifyCachePool(null);
    fail("modified null pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("CachePoolInfo is null",ioe);
  }
  dfs.removeCachePool(poolName);
  try {
    dfs.removeCachePool("pool99");
    fail("expected to get an exception when " + "removing a non-existent pool.");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Cannot remove " + "non-existent cache pool",ioe);
  }
  try {
    dfs.removeCachePool(poolName);
    fail("expected to get an exception when " + "removing a non-existent pool.");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("Cannot remove " + "non-existent cache pool",ioe);
  }
  try {
    dfs.removeCachePool("");
    fail("removed empty pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("invalid empty cache pool name",ioe);
  }
  try {
    dfs.removeCachePool(null);
    fail("removed null pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("invalid empty cache pool name",ioe);
  }
  try {
    proto.removeCachePool("");
    fail("removed empty pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("invalid empty cache pool name",ioe);
  }
  try {
    proto.removeCachePool(null);
    fail("removed null pool");
  }
 catch (  IOException ioe) {
    GenericTestUtils.assertExceptionContains("invalid empty cache pool name",ioe);
  }
  info=new CachePoolInfo("pool2");
  dfs.addCachePool(info);
}
