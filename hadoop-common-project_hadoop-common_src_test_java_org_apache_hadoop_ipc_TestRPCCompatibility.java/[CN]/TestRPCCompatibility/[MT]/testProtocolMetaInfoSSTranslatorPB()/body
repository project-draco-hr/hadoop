{
  TestImpl1 impl=new TestImpl1();
  server=RPC.getServer(TestProtocol1.class,impl,ADDRESS,0,2,false,conf,null);
  server.addProtocol(RPC.RpcKind.RPC_WRITABLE,TestProtocol0.class,impl);
  server.start();
  ProtocolMetaInfoServerSideTranslatorPB xlator=new ProtocolMetaInfoServerSideTranslatorPB(server);
  GetProtocolSignatureResponseProto resp=xlator.getProtocolSignature(null,createGetProtocolSigRequestProto(TestProtocol1.class,RPC.RpcKind.RPC_PROTOCOL_BUFFER));
  Assert.assertEquals(0,resp.getProtocolSignatureCount());
  resp=xlator.getProtocolSignature(null,createGetProtocolSigRequestProto(TestProtocol1.class,RPC.RpcKind.RPC_WRITABLE));
  Assert.assertEquals(1,resp.getProtocolSignatureCount());
  ProtocolSignatureProto sig=resp.getProtocolSignatureList().get(0);
  Assert.assertEquals(TestProtocol1.versionID,sig.getVersion());
  boolean found=false;
  int expected=ProtocolSignature.getFingerprint(TestProtocol1.class.getMethod("echo",String.class));
  for (  int m : sig.getMethodsList()) {
    if (expected == m) {
      found=true;
      break;
    }
  }
  Assert.assertTrue(found);
}
