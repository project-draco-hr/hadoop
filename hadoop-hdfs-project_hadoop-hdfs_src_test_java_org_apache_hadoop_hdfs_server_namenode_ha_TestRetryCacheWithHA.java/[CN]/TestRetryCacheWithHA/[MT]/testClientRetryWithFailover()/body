{
  final String dir="/test";
  final Path dirPath=new Path(dir);
  final String sName="s1";
  final String dirSnapshot=dir + HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR + Path.SEPARATOR+ sName;
  dfs.mkdirs(dirPath);
  dfs.allowSnapshot(dirPath);
  final DFSClient client=genClientWithDummyHandler();
  DummyRetryInvocationHandler.block.set(true);
  new Thread(){
    @Override public void run(){
      try {
        final String snapshotPath=client.createSnapshot(dir,"s1");
        assertEquals(dirSnapshot,snapshotPath);
        LOG.info("Created snapshot " + snapshotPath);
synchronized (TestRetryCacheWithHA.this) {
          results.put("createSnapshot",snapshotPath);
          TestRetryCacheWithHA.this.notifyAll();
        }
      }
 catch (      IOException e) {
        LOG.info("Got IOException " + e + " while creating snapshot");
      }
 finally {
        IOUtils.cleanup(null,client);
      }
    }
  }
.start();
  boolean snapshotCreated=dfs.exists(new Path(dirSnapshot));
  while (!snapshotCreated) {
    Thread.sleep(1000);
    snapshotCreated=dfs.exists(new Path(dirSnapshot));
  }
  cluster.transitionToStandby(0);
  cluster.transitionToActive(1);
  LOG.info("Setting block to false");
  DummyRetryInvocationHandler.block.set(false);
synchronized (this) {
    while (!results.containsKey("createSnapshot")) {
      this.wait();
    }
    LOG.info("Got the result of createSnapshot: " + results.get("createSnapshot"));
  }
}
