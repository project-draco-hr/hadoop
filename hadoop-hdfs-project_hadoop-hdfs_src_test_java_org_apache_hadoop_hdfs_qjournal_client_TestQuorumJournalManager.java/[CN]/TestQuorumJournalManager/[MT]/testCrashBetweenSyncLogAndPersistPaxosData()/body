{
  JournalFaultInjector faultInjector=JournalFaultInjector.instance=Mockito.mock(JournalFaultInjector.class);
  setupLoggers345();
  qjm=createSpyingQJM();
  spies=qjm.getLoggerSetForTests().getLoggersForTests();
  cluster.getJournalNode(2).stopAndJoin(0);
  injectIOE().when(spies.get(1)).acceptRecovery(Mockito.<SegmentStateProto>any(),Mockito.<URL>any());
  tryRecoveryExpectingFailure();
  cluster.restartJournalNode(2);
  qjm=createSpyingQJM();
  spies=qjm.getLoggerSetForTests().getLoggersForTests();
  injectIOE().when(spies.get(0)).prepareRecovery(Mockito.eq(1L));
  Mockito.doThrow(new IOException("Injected")).when(faultInjector).beforePersistPaxosData();
  tryRecoveryExpectingFailure();
  Mockito.reset(faultInjector);
  cluster.getJournalNode(2).stopAndJoin(0);
  qjm=createSpyingQJM();
  try {
    long recovered=QJMTestUtil.recoverAndReturnLastTxn(qjm);
    assertTrue(recovered >= 4);
  }
  finally {
    qjm.close();
  }
}
