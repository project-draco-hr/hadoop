{
  int nodeWithEmptySegment=(nodeWithOneTxn + 1) % 3;
  int nodeMissingSegment=(nodeWithOneTxn + 2) % 3;
  writeSegment(cluster,qjm,1,3,true);
  waitForAllPendingCalls(qjm.getLoggerSetForTests());
  cluster.getJournalNode(nodeMissingSegment).stopAndJoin(0);
  EditLogOutputStream stm=qjm.startLogSegment(4);
  try {
    waitForAllPendingCalls(qjm.getLoggerSetForTests());
    failLoggerAtTxn(spies.get(nodeWithEmptySegment),4);
    try {
      writeTxns(stm,4,1);
      fail("Did not fail even though 2/3 failed");
    }
 catch (    QuorumException qe) {
      GenericTestUtils.assertExceptionContains("mock failure",qe);
    }
  }
  finally {
    stm.abort();
  }
  cluster.restartJournalNode(nodeMissingSegment);
  GenericTestUtils.assertGlobEquals(cluster.getCurrentDir(nodeWithEmptySegment,JID),"edits_.*",NNStorage.getFinalizedEditsFileName(1,3),NNStorage.getInProgressEditsFileName(4));
  GenericTestUtils.assertGlobEquals(cluster.getCurrentDir(nodeWithOneTxn,JID),"edits_.*",NNStorage.getFinalizedEditsFileName(1,3),NNStorage.getInProgressEditsFileName(4));
  GenericTestUtils.assertGlobEquals(cluster.getCurrentDir(nodeMissingSegment,JID),"edits_.*",NNStorage.getFinalizedEditsFileName(1,3));
  cluster.getJournalNode(2).stopAndJoin(0);
  qjm=createSpyingQJM();
  qjm.recoverUnfinalizedSegments();
  if (nodeWithOneTxn == 0 || nodeWithOneTxn == 1) {
    checkRecovery(cluster,4,4);
    writeSegment(cluster,qjm,5,3,true);
  }
 else {
    checkRecovery(cluster,1,3);
    writeSegment(cluster,qjm,4,3,true);
  }
}
