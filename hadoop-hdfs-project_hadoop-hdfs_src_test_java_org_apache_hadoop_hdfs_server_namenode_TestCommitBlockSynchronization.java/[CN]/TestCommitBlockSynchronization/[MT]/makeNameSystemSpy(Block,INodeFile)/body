{
  Configuration conf=new Configuration();
  FSEditLog editlog=mock(FSEditLog.class);
  FSImage image=new FSImage(conf);
  Whitebox.setInternalState(image,"editLog",editlog);
  final DatanodeStorageInfo[] targets={};
  FSNamesystem namesystem=new FSNamesystem(conf,image);
  namesystem.setImageLoaded(true);
  if (file.getParent() == null) {
    INodeDirectory mparent=mock(INodeDirectory.class);
    INodeDirectory parent=new INodeDirectory(mparent.getId(),new byte[0],mparent.getPermissionStatus(),mparent.getAccessTime());
    parent.setLocalName(new byte[0]);
    parent.addChild(file);
    file.setParent(parent);
  }
  namesystem.dir.getINodeMap().put(file);
  FSNamesystem namesystemSpy=spy(namesystem);
  BlockInfoContiguousUnderConstruction blockInfo=new BlockInfoContiguousUnderConstruction(block,(short)1,HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION,targets);
  blockInfo.setBlockCollection(file);
  blockInfo.setGenerationStamp(genStamp);
  blockInfo.initializeBlockRecovery(genStamp);
  doReturn(blockInfo).when(file).removeLastBlock(any(Block.class));
  doReturn(true).when(file).isUnderConstruction();
  doReturn(blockInfo).when(namesystemSpy).getStoredBlock(any(Block.class));
  doReturn(blockInfo).when(file).getLastBlock();
  doReturn("").when(namesystemSpy).closeFileCommitBlocks(any(INodeFile.class),any(BlockInfoContiguous.class));
  doReturn(mock(FSEditLog.class)).when(namesystemSpy).getEditLog();
  return namesystemSpy;
}
