{
  conf=new Configuration();
  conf.set(SpanReceiverHost.SPAN_RECEIVERS_CONF_KEY,TestTracing.SetSpanReceiver.class.getName());
  conf.setLong("dfs.blocksize",100 * 1024);
  conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY,true);
  conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY,false);
  conf.set(DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY,"testShortCircuitTraceHooks._PORT");
  conf.set(DFSConfigKeys.DFS_CHECKSUM_TYPE_KEY,"CRC32C");
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
  dfs=cluster.getFileSystem();
  try {
    spanReceiverHost=SpanReceiverHost.getInstance(conf);
    DFSTestUtil.createFile(dfs,TEST_PATH,TEST_LENGTH,(short)1,5678L);
    TraceScope ts=Trace.startSpan("testShortCircuitTraceHooks",Sampler.ALWAYS);
    FSDataInputStream stream=dfs.open(TEST_PATH);
    byte buf[]=new byte[TEST_LENGTH];
    IOUtils.readFully(stream,buf,0,TEST_LENGTH);
    stream.close();
    ts.close();
    String[] expectedSpanNames={"OpRequestShortCircuitAccessProto","ShortCircuitShmRequestProto"};
    TestTracing.assertSpanNamesFound(expectedSpanNames);
  }
  finally {
    dfs.close();
    cluster.shutdown();
  }
}
