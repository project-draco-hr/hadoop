{
  final File testDir=TestKMS.getTestDir();
  Configuration conf=createBaseKMSConf(testDir);
  TestingServer zkServer=new TestingServer();
  zkServer.start();
  MiniKMS kms1=null;
  MiniKMS kms2=null;
  conf.set(KMSAuthenticationFilter.CONFIG_PREFIX + AuthenticationFilter.SIGNER_SECRET_PROVIDER,"zookeeper");
  conf.set(KMSAuthenticationFilter.CONFIG_PREFIX + ZKSignerSecretProvider.ZOOKEEPER_CONNECTION_STRING,zkServer.getConnectString());
  conf.set(KMSAuthenticationFilter.CONFIG_PREFIX + ZKSignerSecretProvider.ZOOKEEPER_PATH,"/secret");
  TestKMS.writeConf(testDir,conf);
  try {
    kms1=new MiniKMS.Builder().setKmsConfDir(testDir).setLog4jConfFile("log4j.properties").build();
    kms1.start();
    kms2=new MiniKMS.Builder().setKmsConfDir(testDir).setLog4jConfFile("log4j.properties").build();
    kms2.start();
    final URL url1=new URL(kms1.getKMSUrl().toExternalForm() + KMSRESTConstants.SERVICE_VERSION + "/"+ KMSRESTConstants.KEYS_NAMES_RESOURCE);
    final URL url2=new URL(kms2.getKMSUrl().toExternalForm() + KMSRESTConstants.SERVICE_VERSION + "/"+ KMSRESTConstants.KEYS_NAMES_RESOURCE);
    final DelegationTokenAuthenticatedURL.Token token=new DelegationTokenAuthenticatedURL.Token();
    final DelegationTokenAuthenticatedURL aUrl=new DelegationTokenAuthenticatedURL();
    UserGroupInformation ugiFoo=UserGroupInformation.createUserForTesting("foo",new String[]{"gfoo"});
    UserGroupInformation ugiBar=UserGroupInformation.createUserForTesting("bar",new String[]{"gBar"});
    ugiFoo.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        HttpURLConnection conn=aUrl.openConnection(url1,token);
        Assert.assertEquals(HttpURLConnection.HTTP_OK,conn.getResponseCode());
        return null;
      }
    }
);
    ugiBar.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        HttpURLConnection conn=aUrl.openConnection(url2,token);
        Assert.assertEquals(HttpURLConnection.HTTP_OK,conn.getResponseCode());
        return null;
      }
    }
);
    ugiBar.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws Exception {
        final DelegationTokenAuthenticatedURL.Token emptyToken=new DelegationTokenAuthenticatedURL.Token();
        HttpURLConnection conn=aUrl.openConnection(url2,emptyToken);
        Assert.assertEquals(HttpURLConnection.HTTP_FORBIDDEN,conn.getResponseCode());
        return null;
      }
    }
);
  }
  finally {
    if (kms2 != null) {
      kms2.stop();
    }
    if (kms1 != null) {
      kms1.stop();
    }
    zkServer.stop();
  }
}
