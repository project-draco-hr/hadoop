{
  int depth=prefix.getLength();
  if (depth >= maxDepth || lower == upper) {
    return new LeafTrieNode(depth,splits,lower,upper);
  }
  InnerTrieNode result=new InnerTrieNode(depth);
  Text trial=new Text(prefix);
  trial.append(new byte[1],0,1);
  int currentBound=lower;
  for (int ch=0; ch < 255; ++ch) {
    trial.getBytes()[depth]=(byte)(ch + 1);
    lower=currentBound;
    while (currentBound < upper) {
      if (splits[currentBound].compareTo(trial) >= 0) {
        break;
      }
      currentBound+=1;
    }
    trial.getBytes()[depth]=(byte)ch;
    result.child[ch]=buildTrie(splits,lower,currentBound,trial,maxDepth);
  }
  trial.getBytes()[depth]=(byte)255;
  result.child[255]=buildTrie(splits,currentBound,upper,trial,maxDepth);
  return result;
}
