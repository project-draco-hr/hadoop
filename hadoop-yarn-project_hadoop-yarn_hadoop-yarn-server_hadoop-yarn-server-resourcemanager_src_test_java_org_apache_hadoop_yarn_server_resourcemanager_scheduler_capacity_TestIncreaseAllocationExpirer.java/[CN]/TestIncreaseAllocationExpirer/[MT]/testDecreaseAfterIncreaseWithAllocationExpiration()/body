{
  conf.setLong(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,5000);
  MockRM rm1=new MockRM(conf);
  rm1.start();
  MockNM nm1=rm1.registerNode("127.0.0.1:1234",20 * GB);
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"default");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  nm1.nodeHeartbeat(app1.getCurrentAppAttempt().getAppAttemptId(),1,ContainerState.RUNNING);
  am1.allocate("127.0.0.1",3 * GB,3,new ArrayList<ContainerId>());
  ContainerId containerId2=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  rm1.waitForState(nm1,containerId2,RMContainerState.ALLOCATED);
  ContainerId containerId3=ContainerId.newContainerId(am1.getApplicationAttemptId(),3);
  rm1.waitForState(nm1,containerId3,RMContainerState.ALLOCATED);
  ContainerId containerId4=ContainerId.newContainerId(am1.getApplicationAttemptId(),4);
  rm1.waitForState(nm1,containerId4,RMContainerState.ALLOCATED);
  List<Container> containers=am1.allocate(null,null).getAllocatedContainers();
  Assert.assertEquals(3,containers.size());
  Assert.assertNotNull(containers.get(0).getContainerToken());
  Assert.assertNotNull(containers.get(1).getContainerToken());
  Assert.assertNotNull(containers.get(2).getContainerToken());
  nm1.nodeHeartbeat(app1.getCurrentAppAttempt().getAppAttemptId(),2,ContainerState.RUNNING);
  nm1.nodeHeartbeat(app1.getCurrentAppAttempt().getAppAttemptId(),3,ContainerState.RUNNING);
  nm1.nodeHeartbeat(app1.getCurrentAppAttempt().getAppAttemptId(),4,ContainerState.RUNNING);
  rm1.waitForState(nm1,containerId2,RMContainerState.RUNNING);
  rm1.waitForState(nm1,containerId3,RMContainerState.RUNNING);
  rm1.waitForState(nm1,containerId4,RMContainerState.RUNNING);
  List<ContainerResourceChangeRequest> increaseRequests=new ArrayList<>();
  increaseRequests.add(ContainerResourceChangeRequest.newInstance(containerId2,Resources.createResource(6 * GB)));
  increaseRequests.add(ContainerResourceChangeRequest.newInstance(containerId3,Resources.createResource(6 * GB)));
  increaseRequests.add(ContainerResourceChangeRequest.newInstance(containerId4,Resources.createResource(6 * GB)));
  am1.sendContainerResizingRequest(increaseRequests,null);
  nm1.nodeHeartbeat(true);
  Thread.sleep(1000);
  am1.allocate(null,null);
  List<ContainerResourceChangeRequest> decreaseRequests=new ArrayList<>();
  decreaseRequests.add(ContainerResourceChangeRequest.newInstance(containerId2,Resources.createResource(2 * GB)));
  decreaseRequests.add(ContainerResourceChangeRequest.newInstance(containerId3,Resources.createResource(4 * GB)));
  decreaseRequests.add(ContainerResourceChangeRequest.newInstance(containerId4,Resources.createResource(4 * GB)));
  AllocateResponse response=am1.sendContainerResizingRequest(null,decreaseRequests);
  Assert.assertEquals(3,response.getDecreasedContainers().size());
  nm1.containerIncreaseStatus(getContainer(rm1,containerId4,Resources.createResource(6 * GB)));
  Thread.sleep(10000);
  Assert.assertEquals(2 * GB,rm1.getResourceScheduler().getRMContainer(containerId2).getAllocatedResource().getMemorySize());
  Assert.assertEquals(3 * GB,rm1.getResourceScheduler().getRMContainer(containerId3).getAllocatedResource().getMemorySize());
  Assert.assertEquals(4 * GB,rm1.getResourceScheduler().getRMContainer(containerId4).getAllocatedResource().getMemorySize());
  List<Container> containersToDecrease=nm1.nodeHeartbeat(true).getContainersToDecrease();
  Assert.assertEquals(2,containersToDecrease.size());
  Collections.sort(containersToDecrease);
  Assert.assertEquals(3 * GB,containersToDecrease.get(0).getResource().getMemorySize());
  Assert.assertEquals(4 * GB,containersToDecrease.get(1).getResource().getMemorySize());
  rm1.stop();
}
