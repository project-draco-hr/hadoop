{
  conf.setLong(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,5000);
  MockRM rm1=new MockRM(conf);
  rm1.start();
  MockNM nm1=rm1.registerNode("127.0.0.1:1234",20 * GB);
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"default");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  nm1.nodeHeartbeat(app1.getCurrentAppAttempt().getAppAttemptId(),1,ContainerState.RUNNING);
  am1.allocate("127.0.0.1",1 * GB,1,new ArrayList<ContainerId>());
  ContainerId containerId2=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  rm1.waitForState(nm1,containerId2,RMContainerState.ALLOCATED);
  am1.allocate(null,null).getAllocatedContainers();
  nm1.nodeHeartbeat(app1.getCurrentAppAttempt().getAppAttemptId(),2,ContainerState.RUNNING);
  rm1.waitForState(nm1,containerId2,RMContainerState.RUNNING);
  am1.sendContainerResizingRequest(Collections.singletonList(ContainerResourceChangeRequest.newInstance(containerId2,Resources.createResource(3 * GB))),null);
  nm1.nodeHeartbeat(true);
  Thread.sleep(1000);
  am1.allocate(null,null);
  Resource resource1=Resources.clone(rm1.getResourceScheduler().getRMContainer(containerId2).getAllocatedResource());
  am1.sendContainerResizingRequest(Collections.singletonList(ContainerResourceChangeRequest.newInstance(containerId2,Resources.createResource(5 * GB))),null);
  nm1.nodeHeartbeat(true);
  Thread.sleep(1000);
  am1.allocate(null,null);
  checkUsedResource(rm1,"default",6 * GB,null);
  FiCaSchedulerApp app=TestUtils.getFiCaSchedulerApp(rm1,app1.getApplicationId());
  Assert.assertEquals(6 * GB,app.getAppAttemptResourceUsage().getUsed().getMemory());
  verifyAvailableResourceOfSchedulerNode(rm1,nm1.getNodeId(),14 * GB);
  nm1.containerIncreaseStatus(getContainer(rm1,containerId2,resource1));
  Thread.sleep(10000);
  Assert.assertEquals(3 * GB,rm1.getResourceScheduler().getRMContainer(containerId2).getAllocatedResource().getMemory());
  checkUsedResource(rm1,"default",4 * GB,null);
  Assert.assertEquals(4 * GB,app.getAppAttemptResourceUsage().getUsed().getMemory());
  verifyAvailableResourceOfSchedulerNode(rm1,nm1.getNodeId(),16 * GB);
  List<Container> containersToDecrease=nm1.nodeHeartbeat(true).getContainersToDecrease();
  Assert.assertEquals(1,containersToDecrease.size());
  Assert.assertEquals(3 * GB,containersToDecrease.get(0).getResource().getMemory());
  rm1.stop();
}
