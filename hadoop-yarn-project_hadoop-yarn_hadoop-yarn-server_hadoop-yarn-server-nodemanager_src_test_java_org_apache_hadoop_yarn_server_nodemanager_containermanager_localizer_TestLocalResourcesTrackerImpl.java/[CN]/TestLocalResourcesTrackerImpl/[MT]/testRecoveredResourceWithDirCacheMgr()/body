{
  final String user="someuser";
  final ApplicationId appId=ApplicationId.newInstance(1,1);
  final Path localDirRoot=new Path("/tmp/localdir");
  Configuration conf=new YarnConfiguration();
  DrainDispatcher dispatcher=null;
  dispatcher=createDispatcher(conf);
  EventHandler<LocalizerEvent> localizerEventHandler=mock(EventHandler.class);
  EventHandler<LocalizerEvent> containerEventHandler=mock(EventHandler.class);
  dispatcher.register(LocalizerEventType.class,localizerEventHandler);
  dispatcher.register(ContainerEventType.class,containerEventHandler);
  NMStateStoreService stateStore=mock(NMStateStoreService.class);
  try {
    LocalResourcesTrackerImpl tracker=new LocalResourcesTrackerImpl(user,appId,dispatcher,true,conf,stateStore);
    LocalResourceRequest lr1=createLocalResourceRequest(user,1,1,LocalResourceVisibility.PUBLIC);
    Assert.assertNull(tracker.getLocalizedResource(lr1));
    final long localizedId1=52;
    Path hierarchicalPath1=new Path(localDirRoot + "/4/2",Long.toString(localizedId1));
    Path localizedPath1=new Path(hierarchicalPath1,"resource.jar");
    tracker.handle(new ResourceRecoveredEvent(lr1,localizedPath1,120));
    dispatcher.await();
    Assert.assertNotNull(tracker.getLocalizedResource(lr1));
    LocalCacheDirectoryManager dirMgrRoot=tracker.getDirectoryManager(localDirRoot);
    Assert.assertEquals(0,dirMgrRoot.getDirectory("").getCount());
    Assert.assertEquals(1,dirMgrRoot.getDirectory("4/2").getCount());
    LocalResourceRequest lr2=createLocalResourceRequest(user,2,2,LocalResourceVisibility.PUBLIC);
    Assert.assertNull(tracker.getLocalizedResource(lr2));
    final long localizedId2=localizedId1 + 1;
    Path hierarchicalPath2=new Path(localDirRoot + "/4/2",Long.toString(localizedId2));
    Path localizedPath2=new Path(hierarchicalPath2,"resource.jar");
    tracker.handle(new ResourceRecoveredEvent(lr2,localizedPath2,120));
    dispatcher.await();
    Assert.assertNotNull(tracker.getLocalizedResource(lr2));
    Assert.assertEquals(0,dirMgrRoot.getDirectory("").getCount());
    Assert.assertEquals(2,dirMgrRoot.getDirectory("4/2").getCount());
    LocalResourceRequest lr3=createLocalResourceRequest(user,3,3,LocalResourceVisibility.PUBLIC);
    Assert.assertNull(tracker.getLocalizedResource(lr3));
    final long localizedId3=128;
    Path hierarchicalPath3=new Path(localDirRoot + "/4/3",Long.toString(localizedId3));
    Path localizedPath3=new Path(hierarchicalPath3,"resource.jar");
    tracker.handle(new ResourceRecoveredEvent(lr3,localizedPath3,120));
    dispatcher.await();
    Assert.assertNotNull(tracker.getLocalizedResource(lr3));
    Assert.assertEquals(0,dirMgrRoot.getDirectory("").getCount());
    Assert.assertEquals(2,dirMgrRoot.getDirectory("4/2").getCount());
    Assert.assertEquals(1,dirMgrRoot.getDirectory("4/3").getCount());
    LocalResourceRequest lr4=createLocalResourceRequest(user,4,4,LocalResourceVisibility.PUBLIC);
    Assert.assertNull(tracker.getLocalizedResource(lr4));
    final long localizedId4=256;
    Path hierarchicalPath4=new Path(localDirRoot + "/4",Long.toString(localizedId4));
    Path localizedPath4=new Path(hierarchicalPath4,"resource.jar");
    tracker.handle(new ResourceRecoveredEvent(lr4,localizedPath4,120));
    dispatcher.await();
    Assert.assertNotNull(tracker.getLocalizedResource(lr4));
    Assert.assertEquals(0,dirMgrRoot.getDirectory("").getCount());
    Assert.assertEquals(1,dirMgrRoot.getDirectory("4").getCount());
    Assert.assertEquals(2,dirMgrRoot.getDirectory("4/2").getCount());
    Assert.assertEquals(1,dirMgrRoot.getDirectory("4/3").getCount());
  }
  finally {
    if (dispatcher != null) {
      dispatcher.stop();
    }
  }
}
