{
  FileContext lfs=FileContext.getLocalFSFileContext();
  Path base_path=new Path("target",TestLocalResourcesTrackerImpl.class.getSimpleName());
  final String user="someuser";
  final ApplicationId appId=ApplicationId.newInstance(1,1);
  Configuration conf=new YarnConfiguration();
  DrainDispatcher dispatcher=null;
  dispatcher=createDispatcher(conf);
  EventHandler<LocalizerEvent> localizerEventHandler=mock(EventHandler.class);
  EventHandler<LocalizerEvent> containerEventHandler=mock(EventHandler.class);
  dispatcher.register(LocalizerEventType.class,localizerEventHandler);
  dispatcher.register(ContainerEventType.class,containerEventHandler);
  NMStateStoreService stateStore=mock(NMStateStoreService.class);
  DeletionService delService=mock(DeletionService.class);
  try {
    LocalResourceRequest req1=createLocalResourceRequest(user,1,1,LocalResourceVisibility.PUBLIC);
    LocalizedResource lr1=createLocalizedResource(req1,dispatcher);
    ConcurrentMap<LocalResourceRequest,LocalizedResource> localrsrc=new ConcurrentHashMap<LocalResourceRequest,LocalizedResource>();
    localrsrc.put(req1,lr1);
    LocalResourcesTrackerImpl tracker=new LocalResourcesTrackerImpl(user,appId,dispatcher,localrsrc,true,conf,stateStore,null);
    Path conflictPath=new Path(base_path,"10");
    Path qualifiedConflictPath=lfs.makeQualified(conflictPath);
    lfs.mkdir(qualifiedConflictPath,null,true);
    Path rPath=tracker.getPathForLocalization(req1,base_path,delService);
    Assert.assertFalse(lfs.util().exists(rPath));
    verify(delService,times(1)).delete(eq(user),eq(conflictPath));
  }
  finally {
    lfs.delete(base_path,true);
    if (dispatcher != null) {
      dispatcher.stop();
    }
  }
}
