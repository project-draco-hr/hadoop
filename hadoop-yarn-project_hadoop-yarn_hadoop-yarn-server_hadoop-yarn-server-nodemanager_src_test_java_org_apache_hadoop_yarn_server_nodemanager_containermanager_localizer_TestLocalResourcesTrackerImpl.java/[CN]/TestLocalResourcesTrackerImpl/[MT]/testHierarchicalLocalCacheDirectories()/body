{
  String user="testuser";
  DrainDispatcher dispatcher=null;
  try {
    Configuration conf=new Configuration();
    conf.set(YarnConfiguration.NM_LOCAL_CACHE_MAX_FILES_PER_DIRECTORY,"37");
    dispatcher=createDispatcher(conf);
    EventHandler<LocalizerEvent> localizerEventHandler=mock(EventHandler.class);
    EventHandler<LocalizerEvent> containerEventHandler=mock(EventHandler.class);
    dispatcher.register(LocalizerEventType.class,localizerEventHandler);
    dispatcher.register(ContainerEventType.class,containerEventHandler);
    DeletionService mockDelService=mock(DeletionService.class);
    ConcurrentMap<LocalResourceRequest,LocalizedResource> localrsrc=new ConcurrentHashMap<LocalResourceRequest,LocalizedResource>();
    LocalResourcesTracker tracker=new LocalResourcesTrackerImpl(user,dispatcher,localrsrc,true,conf);
    Path localDir=new Path("/tmp");
    ContainerId cId1=BuilderUtils.newContainerId(1,1,1,1);
    LocalResourceRequest lr1=createLocalResourceRequest(user,1,1,LocalResourceVisibility.PUBLIC);
    LocalizerContext lc1=new LocalizerContext(user,cId1,null);
    ResourceEvent reqEvent1=new ResourceRequestEvent(lr1,LocalResourceVisibility.PUBLIC,lc1);
    tracker.handle(reqEvent1);
    Path hierarchicalPath1=tracker.getPathForLocalization(lr1,localDir);
    ResourceLocalizedEvent rle=new ResourceLocalizedEvent(lr1,new Path(hierarchicalPath1.toUri().toString() + Path.SEPARATOR + "file1"),120);
    tracker.handle(rle);
    tracker.localizationCompleted(lr1,true);
    LocalResourceRequest lr2=createLocalResourceRequest(user,3,3,LocalResourceVisibility.PUBLIC);
    Path hierarchicalPath2=tracker.getPathForLocalization(lr2,localDir);
    tracker.localizationCompleted(lr2,false);
    Assert.assertNotSame(hierarchicalPath1,hierarchicalPath2);
    LocalResourceRequest lr3=createLocalResourceRequest(user,2,2,LocalResourceVisibility.PUBLIC);
    ResourceEvent reqEvent3=new ResourceRequestEvent(lr3,LocalResourceVisibility.PUBLIC,lc1);
    tracker.handle(reqEvent3);
    Path hierarchicalPath3=tracker.getPathForLocalization(lr3,localDir);
    tracker.localizationCompleted(lr3,true);
    Assert.assertEquals(hierarchicalPath3.toUri().toString(),hierarchicalPath1.toUri().toString() + Path.SEPARATOR + "0");
    ResourceEvent relEvent1=new ResourceReleaseEvent(lr1,cId1);
    tracker.handle(relEvent1);
    int resources=0;
    Iterator<LocalizedResource> iter=tracker.iterator();
    while (iter.hasNext()) {
      iter.next();
      resources++;
    }
    Assert.assertEquals(2,resources);
    iter=tracker.iterator();
    while (iter.hasNext()) {
      LocalizedResource rsrc=iter.next();
      if (rsrc.getRefCount() == 0) {
        Assert.assertTrue(tracker.remove(rsrc,mockDelService));
        resources--;
      }
    }
    Assert.assertEquals(1,resources);
  }
  finally {
    if (dispatcher != null) {
      dispatcher.stop();
    }
  }
}
