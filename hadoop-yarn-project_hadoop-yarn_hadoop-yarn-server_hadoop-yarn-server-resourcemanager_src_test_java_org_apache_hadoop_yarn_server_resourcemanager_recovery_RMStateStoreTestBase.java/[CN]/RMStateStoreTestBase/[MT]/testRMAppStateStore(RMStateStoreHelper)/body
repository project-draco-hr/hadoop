{
  long submitTime=System.currentTimeMillis();
  long startTime=System.currentTimeMillis() + 1234;
  Configuration conf=new YarnConfiguration();
  RMStateStore store=stateStoreHelper.getRMStateStore();
  TestDispatcher dispatcher=new TestDispatcher();
  store.setRMDispatcher(dispatcher);
  RMContext rmContext=mock(RMContext.class);
  when(rmContext.getStateStore()).thenReturn(store);
  AMRMTokenSecretManager appTokenMgr=spy(new AMRMTokenSecretManager(conf,rmContext));
  MasterKeyData masterKeyData=appTokenMgr.createNewMasterKey();
  when(appTokenMgr.getMasterKey()).thenReturn(masterKeyData);
  ClientToAMTokenSecretManagerInRM clientToAMTokenMgr=new ClientToAMTokenSecretManagerInRM();
  ApplicationAttemptId attemptId1=ConverterUtils.toApplicationAttemptId("appattempt_1352994193343_0001_000001");
  ApplicationId appId1=attemptId1.getApplicationId();
  storeApp(store,appId1,submitTime,startTime);
  Token<AMRMTokenIdentifier> appAttemptToken1=generateAMRMToken(attemptId1,appTokenMgr);
  HashSet<Token<?>> attemptTokenSet1=new HashSet<Token<?>>();
  attemptTokenSet1.add(appAttemptToken1);
  SecretKey clientTokenKey1=clientToAMTokenMgr.createMasterKey(attemptId1);
  ContainerId containerId1=storeAttempt(store,attemptId1,"container_1352994193343_0001_01_000001",appAttemptToken1,clientTokenKey1,dispatcher);
  String appAttemptIdStr2="appattempt_1352994193343_0001_000002";
  ApplicationAttemptId attemptId2=ConverterUtils.toApplicationAttemptId(appAttemptIdStr2);
  Token<AMRMTokenIdentifier> appAttemptToken2=generateAMRMToken(attemptId2,appTokenMgr);
  HashSet<Token<?>> attemptTokenSet2=new HashSet<Token<?>>();
  attemptTokenSet2.add(appAttemptToken2);
  SecretKey clientTokenKey2=clientToAMTokenMgr.createMasterKey(attemptId2);
  ContainerId containerId2=storeAttempt(store,attemptId2,"container_1352994193343_0001_02_000001",appAttemptToken2,clientTokenKey2,dispatcher);
  ApplicationAttemptId attemptIdRemoved=ConverterUtils.toApplicationAttemptId("appattempt_1352994193343_0002_000001");
  ApplicationId appIdRemoved=attemptIdRemoved.getApplicationId();
  storeApp(store,appIdRemoved,submitTime,startTime);
  storeAttempt(store,attemptIdRemoved,"container_1352994193343_0002_01_000001",null,null,dispatcher);
  RMApp mockRemovedApp=mock(RMApp.class);
  HashMap<ApplicationAttemptId,RMAppAttempt> attempts=new HashMap<ApplicationAttemptId,RMAppAttempt>();
  ApplicationSubmissionContext context=new ApplicationSubmissionContextPBImpl();
  context.setApplicationId(appIdRemoved);
  when(mockRemovedApp.getSubmitTime()).thenReturn(submitTime);
  when(mockRemovedApp.getApplicationSubmissionContext()).thenReturn(context);
  when(mockRemovedApp.getAppAttempts()).thenReturn(attempts);
  RMAppAttempt mockRemovedAttempt=mock(RMAppAttempt.class);
  when(mockRemovedAttempt.getAppAttemptId()).thenReturn(attemptIdRemoved);
  attempts.put(attemptIdRemoved,mockRemovedAttempt);
  store.removeApplication(mockRemovedApp);
  storeApp(store,appIdRemoved,submitTime,startTime);
  storeAttempt(store,attemptIdRemoved,"container_1352994193343_0002_01_000001",null,null,dispatcher);
  store.removeApplication(mockRemovedApp);
  Thread.sleep(1000);
  store.close();
  modifyAppState();
  store=stateStoreHelper.getRMStateStore();
  store.setRMDispatcher(dispatcher);
  RMState state=store.loadState();
  Map<ApplicationId,ApplicationState> rmAppState=state.getApplicationState();
  ApplicationState appState=rmAppState.get(appId1);
  assertNotNull(appState);
  assertEquals(submitTime,appState.getSubmitTime());
  assertEquals(startTime,appState.getStartTime());
  assertEquals(appId1,appState.getApplicationSubmissionContext().getApplicationId());
  ApplicationAttemptState attemptState=appState.getAttempt(attemptId1);
  assertNotNull(attemptState);
  assertEquals(attemptId1,attemptState.getAttemptId());
  assertEquals(-1000,attemptState.getAMContainerExitStatus());
  assertEquals(containerId1,attemptState.getMasterContainer().getId());
  HashSet<Token<?>> savedTokens=new HashSet<Token<?>>();
  savedTokens.addAll(attemptState.getAppAttemptCredentials().getAllTokens());
  assertEquals(attemptTokenSet1,savedTokens);
  assertArrayEquals(clientTokenKey1.getEncoded(),attemptState.getAppAttemptCredentials().getSecretKey(RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME));
  attemptState=appState.getAttempt(attemptId2);
  assertNotNull(attemptState);
  assertEquals(attemptId2,attemptState.getAttemptId());
  assertEquals(containerId2,attemptState.getMasterContainer().getId());
  savedTokens.clear();
  savedTokens.addAll(attemptState.getAppAttemptCredentials().getAllTokens());
  assertEquals(attemptTokenSet2,savedTokens);
  assertArrayEquals(clientTokenKey2.getEncoded(),attemptState.getAppAttemptCredentials().getSecretKey(RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME));
  ApplicationState appState2=new ApplicationState(appState.submitTime,appState.startTime,appState.context,appState.user,RMAppState.FINISHED,"appDiagnostics",1234);
  appState2.attempts.putAll(appState.attempts);
  store.updateApplicationState(appState2);
  ApplicationAttemptState oldAttemptState=attemptState;
  ApplicationAttemptState newAttemptState=new ApplicationAttemptState(oldAttemptState.getAttemptId(),oldAttemptState.getMasterContainer(),oldAttemptState.getAppAttemptCredentials(),oldAttemptState.getStartTime(),RMAppAttemptState.FINISHED,"myTrackingUrl","attemptDiagnostics",FinalApplicationStatus.SUCCEEDED,100);
  store.updateApplicationAttemptState(newAttemptState);
  ApplicationId dummyAppId=ApplicationId.newInstance(1234,10);
  ApplicationSubmissionContext dummyContext=new ApplicationSubmissionContextPBImpl();
  dummyContext.setApplicationId(dummyAppId);
  ApplicationState dummyApp=new ApplicationState(appState.submitTime,appState.startTime,dummyContext,appState.user,RMAppState.FINISHED,"appDiagnostics",1234);
  store.updateApplicationState(dummyApp);
  ApplicationAttemptId dummyAttemptId=ApplicationAttemptId.newInstance(dummyAppId,6);
  ApplicationAttemptState dummyAttempt=new ApplicationAttemptState(dummyAttemptId,oldAttemptState.getMasterContainer(),oldAttemptState.getAppAttemptCredentials(),oldAttemptState.getStartTime(),RMAppAttemptState.FINISHED,"myTrackingUrl","attemptDiagnostics",FinalApplicationStatus.SUCCEEDED,111);
  store.updateApplicationAttemptState(dummyAttempt);
  Thread.sleep(1000);
  store.close();
  store=stateStoreHelper.getRMStateStore();
  store.setRMDispatcher(dispatcher);
  RMState newRMState=store.loadState();
  Map<ApplicationId,ApplicationState> newRMAppState=newRMState.getApplicationState();
  assertNotNull(newRMAppState.get(dummyApp.getAppId()));
  ApplicationState updatedAppState=newRMAppState.get(appId1);
  assertEquals(appState.getAppId(),updatedAppState.getAppId());
  assertEquals(appState.getSubmitTime(),updatedAppState.getSubmitTime());
  assertEquals(appState.getStartTime(),updatedAppState.getStartTime());
  assertEquals(appState.getUser(),updatedAppState.getUser());
  assertEquals(RMAppState.FINISHED,updatedAppState.getState());
  assertEquals("appDiagnostics",updatedAppState.getDiagnostics());
  assertEquals(1234,updatedAppState.getFinishTime());
  assertNotNull(newRMAppState.get(dummyApp.getAppId()).getAttempt(dummyAttemptId));
  ApplicationAttemptState updatedAttemptState=updatedAppState.getAttempt(newAttemptState.getAttemptId());
  assertEquals(oldAttemptState.getAttemptId(),updatedAttemptState.getAttemptId());
  assertEquals(containerId2,updatedAttemptState.getMasterContainer().getId());
  assertArrayEquals(clientTokenKey2.getEncoded(),updatedAttemptState.getAppAttemptCredentials().getSecretKey(RMStateStore.AM_CLIENT_TOKEN_MASTER_KEY_NAME));
  assertEquals(RMAppAttemptState.FINISHED,updatedAttemptState.getState());
  assertEquals("myTrackingUrl",updatedAttemptState.getFinalTrackingUrl());
  assertEquals("attemptDiagnostics",updatedAttemptState.getDiagnostics());
  assertEquals(100,updatedAttemptState.getAMContainerExitStatus());
  assertEquals(FinalApplicationStatus.SUCCEEDED,updatedAttemptState.getFinalApplicationStatus());
  assertTrue(stateStoreHelper.isFinalStateValid());
  store.close();
}
