{
  RMStateStore store=stateStoreHelper.getRMStateStore();
  TestDispatcher dispatcher=new TestDispatcher();
  store.setRMDispatcher(dispatcher);
  RMContext rmContext=mock(RMContext.class);
  when(rmContext.getStateStore()).thenReturn(store);
  long ts=System.currentTimeMillis();
  ReservationId r1=ReservationId.newInstance(ts,1);
  int start=1;
  int[] alloc={10,10,10,10,10};
  ResourceCalculator res=new DefaultResourceCalculator();
  Resource minAlloc=Resource.newInstance(1024,1);
  boolean hasGang=true;
  String planName="dedicated";
  ReservationDefinition rDef=ReservationSystemTestUtil.createSimpleReservationDefinition(start,start + alloc.length + 1,alloc.length);
  ReservationAllocation allocation=new InMemoryReservationAllocation(r1,rDef,"u3",planName,0,0 + alloc.length,ReservationSystemTestUtil.generateAllocation(0L,1L,alloc),res,minAlloc,hasGang);
  ReservationAllocationStateProto allocationStateProto=ReservationSystemUtil.buildStateProto(allocation);
  assertAllocationStateEqual(allocation,allocationStateProto);
  store=stateStoreHelper.getRMStateStore();
  when(rmContext.getStateStore()).thenReturn(store);
  store.setRMDispatcher(dispatcher);
  RMState state=store.loadState();
  Map<String,Map<ReservationId,ReservationAllocationStateProto>> reservationState=state.getReservationState();
  Assert.assertNotNull(reservationState);
  String reservationIdName=r1.toString();
  rmContext.getStateStore().storeNewReservation(allocationStateProto,planName,reservationIdName);
  validateStoredReservation(stateStoreHelper,dispatcher,rmContext,r1,planName,allocation,allocationStateProto);
  alloc=new int[]{6,6,6};
  hasGang=false;
  allocation=new InMemoryReservationAllocation(r1,rDef,"u3",planName,2,2 + alloc.length,ReservationSystemTestUtil.generateAllocation(1L,2L,alloc),res,minAlloc,hasGang);
  allocationStateProto=ReservationSystemUtil.buildStateProto(allocation);
  rmContext.getStateStore().updateReservation(allocationStateProto,planName,reservationIdName);
  validateStoredReservation(stateStoreHelper,dispatcher,rmContext,r1,planName,allocation,allocationStateProto);
  ReservationId r2=ReservationId.newInstance(ts,2);
  ReservationAllocation allocation2=new InMemoryReservationAllocation(r2,rDef,"u3",planName,0,0 + alloc.length,ReservationSystemTestUtil.generateAllocation(0L,1L,alloc),res,minAlloc,hasGang);
  ReservationAllocationStateProto allocationStateProto2=ReservationSystemUtil.buildStateProto(allocation2);
  String reservationIdName2=r2.toString();
  rmContext.getStateStore().storeNewReservation(allocationStateProto2,planName,reservationIdName2);
  rmContext.getStateStore().removeReservation(planName,reservationIdName);
  Map<ReservationId,ReservationAllocationStateProto> reservations;
  store=stateStoreHelper.getRMStateStore();
  when(rmContext.getStateStore()).thenReturn(store);
  store.setRMDispatcher(dispatcher);
  state=store.loadState();
  reservationState=state.getReservationState();
  Assert.assertNotNull(reservationState);
  reservations=reservationState.get(planName);
  Assert.assertNotNull(reservations);
  ReservationAllocationStateProto storedReservationAllocation=reservations.get(r1);
  Assert.assertNull("Removed reservation should not be available in store",storedReservationAllocation);
  storedReservationAllocation=reservations.get(r2);
  assertAllocationStateEqual(allocationStateProto2,storedReservationAllocation);
  assertAllocationStateEqual(allocation2,storedReservationAllocation);
  rmContext.getStateStore().removeReservation(planName,reservationIdName2);
  store=stateStoreHelper.getRMStateStore();
  when(rmContext.getStateStore()).thenReturn(store);
  store.setRMDispatcher(dispatcher);
  state=store.loadState();
  reservationState=state.getReservationState();
  Assert.assertNotNull(reservationState);
  reservations=reservationState.get(planName);
  Assert.assertNull(reservations);
}
