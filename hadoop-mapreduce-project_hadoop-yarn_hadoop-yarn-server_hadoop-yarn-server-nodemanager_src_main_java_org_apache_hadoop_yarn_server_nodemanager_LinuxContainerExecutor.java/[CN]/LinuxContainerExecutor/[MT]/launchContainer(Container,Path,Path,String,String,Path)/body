{
  ContainerId containerId=container.getContainerID();
  String containerIdStr=ConverterUtils.toString(containerId);
  List<String> command=new ArrayList<String>(Arrays.asList(containerExecutorExe,user,Integer.toString(Commands.LAUNCH_CONTAINER.getValue()),appId,containerIdStr,containerWorkDir.toString(),nmPrivateCotainerScriptPath.toUri().getPath().toString(),nmPrivateTokensPath.toUri().getPath().toString()));
  String[] commandArray=command.toArray(new String[command.size()]);
  ShellCommandExecutor shExec=new ShellCommandExecutor(commandArray);
  launchCommandObjs.put(containerId,shExec);
  LOG.info("launchContainer: " + Arrays.toString(commandArray));
  String output=shExec.getOutput();
  try {
    shExec.execute();
    if (LOG.isDebugEnabled()) {
      logOutput(output);
    }
  }
 catch (  ExitCodeException e) {
    int exitCode=shExec.getExitCode();
    LOG.warn("Exit code from container is : " + exitCode);
    if (exitCode != 143 && exitCode != 137) {
      LOG.warn("Exception from container-launch : ",e);
      logOutput(output);
      String diagnostics="Exception from container-launch: \n" + StringUtils.stringifyException(e) + "\n"+ output;
      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,diagnostics));
    }
 else {
      container.handle(new ContainerDiagnosticsUpdateEvent(containerId,"Container killed on request. Exit code is " + exitCode));
    }
    return exitCode;
  }
 finally {
    launchCommandObjs.remove(containerId);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Output from LinuxContainerExecutor's launchContainer follows:");
    logOutput(output);
  }
  return 0;
}
