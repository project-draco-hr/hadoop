{
  commandString=command;
  String sessionUser=System.getProperty("user.name");
  String userHome=System.getProperty("user.home");
  if (user != null) {
    sessionUser=user;
    userHome=getHomeDir() + FS + user;
  }
  String dotSSHDir=userHome + FS + ".ssh";
  String sessionIdentity=dotSSHDir + FS + DEFAULT_IDENTITY;
  if (identityFile != null) {
    sessionIdentity=identityFile;
  }
  JSch jsch=new JSch();
  Session session=jsch.getSession(sessionUser,remoteHostName,portNumber);
  jsch.setKnownHosts(dotSSHDir + FS + DEFAULT_KNOWNHOSTS);
  jsch.addIdentity(sessionIdentity);
  Properties config=new Properties();
  config.put("StrictHostKeyChecking","no");
  session.setConfig(config);
  session.connect(30000);
  Channel channel=session.openChannel("exec");
  ((ChannelExec)channel).setCommand(command);
  channel.setInputStream(null);
  final BufferedReader errReader=new BufferedReader(new InputStreamReader(((ChannelExec)channel).getErrStream()));
  BufferedReader inReader=new BufferedReader(new InputStreamReader(channel.getInputStream()));
  channel.connect();
  Thread errorThread=new Thread(){
    @Override public void run(){
      try {
        String line=errReader.readLine();
        while ((line != null) && !isInterrupted()) {
          errorMessage.append(line);
          errorMessage.append(LS);
          line=errReader.readLine();
        }
      }
 catch (      IOException ioe) {
        LOG.warn("Error reading the error stream",ioe);
      }
    }
  }
;
  try {
    errorThread.start();
  }
 catch (  IllegalStateException e) {
    LOG.debug(e);
  }
  try {
    parseExecResult(inReader);
    String line=inReader.readLine();
    while (line != null) {
      line=inReader.readLine();
    }
    if (channel.isClosed()) {
      exitCode=channel.getExitStatus();
      LOG.debug("exit-status: " + exitCode);
    }
    try {
      errorThread.join();
    }
 catch (    InterruptedException ie) {
      LOG.warn("Interrupted while reading the error stream",ie);
    }
  }
 catch (  Exception ie) {
    throw new IOException(ie.toString());
  }
 finally {
    try {
      inReader.close();
    }
 catch (    IOException ioe) {
      LOG.warn("Error while closing the input stream",ioe);
    }
    try {
      errReader.close();
    }
 catch (    IOException ioe) {
      LOG.warn("Error while closing the error stream",ioe);
    }
    channel.disconnect();
    session.disconnect();
  }
}
