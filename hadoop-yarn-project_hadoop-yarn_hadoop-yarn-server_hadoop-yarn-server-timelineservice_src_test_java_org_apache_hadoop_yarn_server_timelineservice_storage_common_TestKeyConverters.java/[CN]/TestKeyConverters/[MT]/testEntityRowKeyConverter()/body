{
  String entityId="!ent!ity!!id!";
  String entityType="entity!Type";
  byte[] byteRowKey=EntityRowKeyConverter.getInstance().encode(new EntityRowKey(CLUSTER,USER,FLOW_NAME,FLOW_RUN_ID,APPLICATION_ID,entityType,entityId));
  EntityRowKey rowKey=EntityRowKeyConverter.getInstance().decode(byteRowKey);
  assertEquals(CLUSTER,rowKey.getClusterId());
  assertEquals(USER,rowKey.getUserId());
  assertEquals(FLOW_NAME,rowKey.getFlowName());
  assertEquals(FLOW_RUN_ID,rowKey.getFlowRunId());
  assertEquals(APPLICATION_ID,rowKey.getAppId());
  assertEquals(entityType,rowKey.getEntityType());
  assertEquals(entityId,rowKey.getEntityId());
  byte[] byteRowKeyPrefix=EntityRowKeyConverter.getInstance().encode(new EntityRowKey(CLUSTER,USER,FLOW_NAME,FLOW_RUN_ID,APPLICATION_ID,entityType,null));
  byte[][] splits=Separator.QUALIFIERS.split(byteRowKeyPrefix,new int[]{Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Bytes.SIZEOF_LONG,AppIdKeyConverter.getKeySize(),Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE});
  assertEquals(7,splits.length);
  assertEquals(0,splits[6].length);
  assertEquals(APPLICATION_ID,AppIdKeyConverter.getInstance().decode(splits[4]));
  assertEquals(entityType,Separator.QUALIFIERS.decode(Bytes.toString(splits[5])));
  verifyRowPrefixBytes(byteRowKeyPrefix);
  byteRowKeyPrefix=EntityRowKeyConverter.getInstance().encode(new EntityRowKey(CLUSTER,USER,FLOW_NAME,FLOW_RUN_ID,APPLICATION_ID,null,null));
  splits=Separator.QUALIFIERS.split(byteRowKeyPrefix,new int[]{Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Separator.VARIABLE_SIZE,Bytes.SIZEOF_LONG,AppIdKeyConverter.getKeySize(),Separator.VARIABLE_SIZE});
  assertEquals(6,splits.length);
  assertEquals(0,splits[5].length);
  assertEquals(APPLICATION_ID,AppIdKeyConverter.getInstance().decode(splits[4]));
  verifyRowPrefixBytes(byteRowKeyPrefix);
}
