{
  final Configuration conf=new HdfsConfiguration();
  conf.setBoolean(DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY,true);
  conf.set(FsPermission.UMASK_LABEL,"000");
  MiniDFSCluster cluster=null;
  FileSystem fs=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
    cluster.waitActive();
    FileContext fc=FileContext.getFileContext(conf);
    fs=FileSystem.get(conf);
    final Path testDir=new Path("/symtest");
    final Path target=new Path(testDir,"target");
    final Path link=new Path(testDir,"link");
    fs.mkdirs(testDir);
    DFSTestUtil.createFile(fs,target,1024,(short)3,0xBEEFl);
    fc.createSymlink(target,link,false);
    final UserGroupInformation user=UserGroupInformation.createRemoteUser("myuser");
    fs.setPermission(testDir,new FsPermission((short)0555));
    try {
      user.doAs(new PrivilegedExceptionAction<Object>(){
        @Override public Object run() throws IOException {
          FileContext myfc=FileContext.getFileContext(conf);
          myfc.delete(link,false);
          return null;
        }
      }
);
      fail("Deleted symlink without write permissions on parent!");
    }
 catch (    AccessControlException e) {
      GenericTestUtils.assertExceptionContains("Permission denied",e);
    }
    fs.setPermission(target,new FsPermission((short)0000));
    try {
      user.doAs(new PrivilegedExceptionAction<Object>(){
        @Override public Object run() throws IOException {
          FileContext myfc=FileContext.getFileContext(conf);
          myfc.open(link).read();
          return null;
        }
      }
);
      fail("Read link target even though target does not have" + " read permissions!");
    }
 catch (    IOException e) {
      GenericTestUtils.assertExceptionContains("Permission denied",e);
    }
    fs.setPermission(testDir,new FsPermission((short)0777));
    user.doAs(new PrivilegedExceptionAction<Object>(){
      @Override public Object run() throws IOException {
        FileContext myfc=FileContext.getFileContext(conf);
        myfc.delete(link,false);
        return null;
      }
    }
);
    assertTrue("Target should not have been deleted!",fc.util().exists(target));
    assertFalse("Link should have been deleted!",fc.util().exists(link));
  }
  finally {
    try {
      if (fs != null)       fs.close();
    }
 catch (    Exception e) {
      LOG.error(StringUtils.stringifyException(e));
    }
    try {
      if (cluster != null)       cluster.shutdown();
    }
 catch (    Exception e) {
      LOG.error(StringUtils.stringifyException(e));
    }
  }
}
