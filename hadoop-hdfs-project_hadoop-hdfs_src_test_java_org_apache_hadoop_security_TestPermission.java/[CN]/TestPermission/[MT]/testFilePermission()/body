{
  final Configuration conf=new HdfsConfiguration();
  conf.setBoolean(DFSConfigKeys.DFS_PERMISSIONS_ENABLED_KEY,true);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(3).build();
  cluster.waitActive();
  try {
    FileSystem nnfs=FileSystem.get(conf);
    assertFalse(nnfs.exists(CHILD_FILE1));
    try {
      nnfs.setOwner(CHILD_FILE1,"foo","bar");
      assertTrue(false);
    }
 catch (    java.io.FileNotFoundException e) {
      LOG.info("GOOD: got " + e);
    }
    try {
      nnfs.setPermission(CHILD_FILE1,new FsPermission((short)0777));
      assertTrue(false);
    }
 catch (    java.io.FileNotFoundException e) {
      LOG.info("GOOD: got " + e);
    }
    FSDataOutputStream out=nnfs.create(CHILD_FILE1,new FsPermission((short)0777),true,1024,(short)1,1024,null);
    FileStatus status=nnfs.getFileStatus(CHILD_FILE1);
    assertTrue(status.getPermission().toString().equals("rwxr-xr-x"));
    nnfs.delete(CHILD_FILE1,false);
    nnfs.mkdirs(CHILD_DIR1);
    status=nnfs.getFileStatus(CHILD_DIR1);
    assertThat("Expect 755 = 777 (default dir) - 022 (default umask)",status.getPermission().toString(),is("rwxr-xr-x"));
    out=nnfs.create(CHILD_FILE1);
    status=nnfs.getFileStatus(CHILD_FILE1);
    assertTrue(status.getPermission().toString().equals("rw-r--r--"));
    byte data[]=new byte[FILE_LEN];
    RAN.nextBytes(data);
    out.write(data);
    out.close();
    nnfs.setPermission(CHILD_FILE1,new FsPermission("700"));
    status=nnfs.getFileStatus(CHILD_FILE1);
    assertTrue(status.getPermission().toString().equals("rwx------"));
    nnfs.mkdirs(CHILD_DIR3,null);
    status=nnfs.getFileStatus(CHILD_DIR3);
    assertThat("Expect 755 = 777 (default dir) - 022 (default umask)",status.getPermission().toString(),is("rwxr-xr-x"));
    byte dataIn[]=new byte[FILE_LEN];
    FSDataInputStream fin=nnfs.open(CHILD_FILE1);
    int bytesRead=fin.read(dataIn);
    assertTrue(bytesRead == FILE_LEN);
    for (int i=0; i < FILE_LEN; i++) {
      assertEquals(data[i],dataIn[i]);
    }
    nnfs.setPermission(CHILD_FILE1,new FsPermission("755"));
    status=nnfs.getFileStatus(CHILD_FILE1);
    assertTrue(status.getPermission().toString().equals("rwxr-xr-x"));
    nnfs.setPermission(CHILD_FILE1,new FsPermission("744"));
    status=nnfs.getFileStatus(CHILD_FILE1);
    assertTrue(status.getPermission().toString().equals("rwxr--r--"));
    nnfs.setPermission(CHILD_FILE1,new FsPermission("700"));
    UserGroupInformation userGroupInfo=UserGroupInformation.createUserForTesting(USER_NAME,GROUP_NAMES);
    FileSystem userfs=DFSTestUtil.getFileSystemAs(userGroupInfo,conf);
    userfs.mkdirs(CHILD_DIR1);
    assertTrue(!canMkdirs(userfs,CHILD_DIR2));
    assertTrue(!canCreate(userfs,CHILD_FILE2));
    assertTrue(!canOpen(userfs,CHILD_FILE1));
    nnfs.setPermission(ROOT_PATH,new FsPermission((short)0755));
    nnfs.setPermission(CHILD_DIR1,new FsPermission("777"));
    nnfs.setPermission(new Path("/"),new FsPermission((short)0777));
    final Path RENAME_PATH=new Path("/foo/bar");
    userfs.mkdirs(RENAME_PATH);
    assertTrue(canRename(userfs,RENAME_PATH,CHILD_DIR1));
    assertFalse(userfs.exists(CHILD_FILE3));
    try {
      userfs.setOwner(CHILD_FILE3,"foo","bar");
      fail("setOwner should fail for non-exist file");
    }
 catch (    java.io.FileNotFoundException ignored) {
    }
    try {
      userfs.setPermission(CHILD_FILE3,new FsPermission((short)0777));
      fail("setPermission should fail for non-exist file");
    }
 catch (    java.io.FileNotFoundException ignored) {
    }
  }
  finally {
    cluster.shutdown();
  }
}
