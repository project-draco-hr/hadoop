{
  ClientProtocol mockNN=mock(ClientProtocol.class);
  FSNamesystem mockNameSys=mock(FSNamesystem.class);
  DelegationTokenSecretManager sm=new DelegationTokenSecretManager(DFSConfigKeys.DFS_NAMENODE_DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT,DFSConfigKeys.DFS_NAMENODE_DELEGATION_KEY_UPDATE_INTERVAL_DEFAULT,DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_MAX_LIFETIME_DEFAULT,3600000,mockNameSys);
  sm.startThreads();
  final Server server=RPC.getServer(ClientProtocol.class,mockNN,ADDRESS,0,5,true,conf,sm);
  server.start();
  final UserGroupInformation current=UserGroupInformation.getCurrentUser();
  final InetSocketAddress addr=NetUtils.getConnectAddress(server);
  String user=current.getUserName();
  Text owner=new Text(user);
  DelegationTokenIdentifier dtId=new DelegationTokenIdentifier(owner,owner,null);
  Token<DelegationTokenIdentifier> token=new Token<DelegationTokenIdentifier>(dtId,sm);
  Text host=new Text(addr.getAddress().getHostAddress() + ":" + addr.getPort());
  token.setService(host);
  LOG.info("Service IP address for token is " + host);
  current.addToken(token);
  current.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      ClientProtocol proxy=null;
      try {
        proxy=(ClientProtocol)RPC.getProxy(ClientProtocol.class,ClientProtocol.versionID,addr,conf);
        proxy.getServerDefaults();
      }
  finally {
        server.stop();
        if (proxy != null) {
          RPC.stopProxy(proxy);
        }
      }
      return null;
    }
  }
);
}
