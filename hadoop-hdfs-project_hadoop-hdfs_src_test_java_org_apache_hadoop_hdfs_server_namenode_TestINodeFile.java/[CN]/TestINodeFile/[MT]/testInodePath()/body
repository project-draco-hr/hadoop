{
  String path="/a/b/c";
  INode inode=createTreeOfInodes(path);
  FSDirectory fsd=Mockito.mock(FSDirectory.class);
  Mockito.doReturn(inode).when(fsd).getInode(Mockito.anyLong());
  String resolvedPath=FSDirectory.resolvePath(path,fsd);
  assertEquals(path,resolvedPath);
  String testPath="/.reserved/.inodes/1";
  resolvedPath=FSDirectory.resolvePath(testPath,fsd);
  assertEquals(path,resolvedPath);
  testPath="/.reserved/.inodes/1/";
  resolvedPath=FSDirectory.resolvePath(testPath,fsd);
  assertEquals(path,resolvedPath);
  testPath="/.reserved/.inodes/1/d/e/f";
  resolvedPath=FSDirectory.resolvePath(testPath,fsd);
  assertEquals("/a/b/c/d/e/f",resolvedPath);
  testPath="/.reserved/.inodes";
  resolvedPath=FSDirectory.resolvePath(testPath,fsd);
  assertEquals(testPath,resolvedPath);
  testPath="/.reserved/.inodes/" + INodeId.ROOT_INODE_ID;
  resolvedPath=FSDirectory.resolvePath(testPath,fsd);
  assertEquals("/",resolvedPath);
  testPath="/.invalid/.inodes/1";
  resolvedPath=FSDirectory.resolvePath(testPath,fsd);
  assertEquals(testPath,resolvedPath);
  Mockito.doReturn(null).when(fsd).getInode(Mockito.anyLong());
  testPath="/.reserved/.inodes/1234";
  try {
    String realPath=FSDirectory.resolvePath(testPath,fsd);
    fail("Path should not be resolved:" + realPath);
  }
 catch (  IOException e) {
    assertTrue(e instanceof FileNotFoundException);
  }
}
