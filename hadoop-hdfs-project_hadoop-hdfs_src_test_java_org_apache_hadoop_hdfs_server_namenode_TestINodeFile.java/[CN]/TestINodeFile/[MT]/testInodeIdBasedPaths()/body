{
  Configuration conf=new Configuration();
  conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_DEFAULT);
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
    DistributedFileSystem fs=cluster.getFileSystem();
    NamenodeProtocols nnRpc=cluster.getNameNodeRpc();
    Path baseDir=getInodePath(INodeId.ROOT_INODE_ID,"testInodeIdBasedPaths");
    Path baseDirRegPath=new Path("/testInodeIdBasedPaths");
    fs.mkdirs(baseDir);
    fs.exists(baseDir);
    long baseDirFileId=nnRpc.getFileInfo(baseDir.toString()).getFileId();
    Path testFileInodePath=getInodePath(baseDirFileId,"test1");
    Path testFileRegularPath=new Path(baseDir,"test1");
    final int testFileBlockSize=1024;
    FileSystemTestHelper.createFile(fs,testFileInodePath,1,testFileBlockSize);
    assertTrue(fs.exists(testFileInodePath));
    FsPermission perm=new FsPermission((short)0666);
    fs.setPermission(testFileInodePath,perm);
    FileStatus fileStatus=fs.getFileStatus(testFileInodePath);
    assertEquals(perm,fileStatus.getPermission());
    fs.setOwner(testFileInodePath,fileStatus.getOwner(),fileStatus.getGroup());
    fs.setTimes(testFileInodePath,0,0);
    fileStatus=fs.getFileStatus(testFileInodePath);
    assertEquals(0,fileStatus.getModificationTime());
    assertEquals(0,fileStatus.getAccessTime());
    fs.setReplication(testFileInodePath,(short)3);
    fileStatus=fs.getFileStatus(testFileInodePath);
    assertEquals(3,fileStatus.getReplication());
    fs.setReplication(testFileInodePath,(short)1);
    assertEquals(testFileBlockSize,nnRpc.getPreferredBlockSize(testFileInodePath.toString()));
    String invalidTarget=new Path(baseDir,"invalidTarget").toString();
    String link=new Path(baseDir,"link").toString();
    testInvalidSymlinkTarget(nnRpc,invalidTarget,link);
    String validTarget="/validtarget";
    testValidSymlinkTarget(nnRpc,validTarget,link);
    fs.append(testFileInodePath);
    fs.recoverLease(testFileInodePath);
    LocatedBlocks l1=nnRpc.getBlockLocations(testFileInodePath.toString(),0,Long.MAX_VALUE);
    LocatedBlocks l2=nnRpc.getBlockLocations(testFileRegularPath.toString(),0,Long.MAX_VALUE);
    checkEquals(l1,l2);
    Path renameDst=getInodePath(baseDirFileId,"test2");
    fileStatus=fs.getFileStatus(testFileInodePath);
    fs.rename(testFileInodePath,renameDst);
    fs.rename(renameDst,testFileInodePath);
    assertEquals(fileStatus,fs.getFileStatus(testFileInodePath));
    fs.rename(testFileInodePath,renameDst,Rename.OVERWRITE);
    fs.rename(renameDst,testFileInodePath,Rename.OVERWRITE);
    assertEquals(fileStatus,fs.getFileStatus(testFileInodePath));
    assertEquals(fs.getContentSummary(testFileRegularPath).toString(),fs.getContentSummary(testFileInodePath).toString());
    checkEquals(fs.listFiles(baseDirRegPath,false),fs.listFiles(baseDir,false));
    fs.delete(testFileInodePath,true);
    assertFalse(fs.exists(testFileInodePath));
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
