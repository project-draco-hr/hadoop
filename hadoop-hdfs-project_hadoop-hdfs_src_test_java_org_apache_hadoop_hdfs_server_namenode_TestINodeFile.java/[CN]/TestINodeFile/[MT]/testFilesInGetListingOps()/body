{
  final Configuration conf=new Configuration();
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
    final DistributedFileSystem hdfs=cluster.getFileSystem();
    final FSDirectory fsdir=cluster.getNamesystem().getFSDirectory();
    hdfs.mkdirs(new Path("/tmp"));
    DFSTestUtil.createFile(hdfs,new Path("/tmp/f1"),0,(short)1,0);
    DFSTestUtil.createFile(hdfs,new Path("/tmp/f2"),0,(short)1,0);
    DFSTestUtil.createFile(hdfs,new Path("/tmp/f3"),0,(short)1,0);
    DirectoryListing dl=cluster.getNameNodeRpc().getListing("/tmp",HdfsFileStatus.EMPTY_NAME,false);
    assertTrue(dl.getPartialListing().length == 3);
    String f2=new String("f2");
    dl=cluster.getNameNodeRpc().getListing("/tmp",f2.getBytes(),false);
    assertTrue(dl.getPartialListing().length == 1);
    INode f2INode=fsdir.getINode("/tmp/f2");
    String f2InodePath="/.reserved/.inodes/" + f2INode.getId();
    dl=cluster.getNameNodeRpc().getListing("/tmp",f2InodePath.getBytes(),false);
    assertTrue(dl.getPartialListing().length == 1);
    hdfs.delete(new Path("/tmp/f2"),false);
    try {
      dl=cluster.getNameNodeRpc().getListing("/tmp",f2InodePath.getBytes(),false);
      fail("Didn't get exception for the deleted startAfter token.");
    }
 catch (    IOException e) {
      assertTrue(e instanceof DirectoryListingStartAfterNotFoundException);
    }
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
