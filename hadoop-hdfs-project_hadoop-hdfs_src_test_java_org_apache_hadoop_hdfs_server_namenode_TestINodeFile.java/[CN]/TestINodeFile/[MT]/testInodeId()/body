{
  Configuration conf=new Configuration();
  conf.setInt(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_DEFAULT);
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(1).build();
    cluster.waitActive();
    FSNamesystem fsn=cluster.getNamesystem();
    long lastId=fsn.getLastInodeId();
    int inodeCount=1;
    long expectedLastInodeId=INodeId.ROOT_INODE_ID;
    assertEquals(fsn.dir.rootDir.getId(),INodeId.ROOT_INODE_ID);
    assertEquals(expectedLastInodeId,lastId);
    assertEquals(inodeCount,fsn.dir.getInodeMapSize());
    FileSystem fs=cluster.getFileSystem();
    Path path=new Path("/test1");
    assertTrue(fs.mkdirs(path));
    assertEquals(++expectedLastInodeId,fsn.getLastInodeId());
    assertEquals(++inodeCount,fsn.dir.getInodeMapSize());
    NamenodeProtocols nnrpc=cluster.getNameNodeRpc();
    DFSTestUtil.createFile(fs,new Path("/test1/file"),1024,(short)1,0);
    assertEquals(++expectedLastInodeId,fsn.getLastInodeId());
    assertEquals(++inodeCount,fsn.dir.getInodeMapSize());
    HdfsFileStatus fileStatus=nnrpc.getFileInfo("/test1/file");
    assertEquals(expectedLastInodeId,fileStatus.getFileId());
    Path renamedPath=new Path("/test2");
    assertTrue(fs.rename(path,renamedPath));
    assertEquals(expectedLastInodeId,fsn.getLastInodeId());
    assertEquals(inodeCount,fsn.dir.getInodeMapSize());
    assertTrue(fs.delete(renamedPath,true));
    inodeCount-=2;
    assertEquals(inodeCount,fsn.dir.getInodeMapSize());
    String file1="/test1/file1";
    String file2="/test1/file2";
    DFSTestUtil.createFile(fs,new Path(file1),512,(short)1,0);
    DFSTestUtil.createFile(fs,new Path(file2),512,(short)1,0);
    inodeCount+=3;
    expectedLastInodeId+=3;
    assertEquals(inodeCount,fsn.dir.getInodeMapSize());
    assertEquals(expectedLastInodeId,fsn.getLastInodeId());
    nnrpc.concat(file2,new String[]{file1});
    inodeCount--;
    assertEquals(inodeCount,fsn.dir.getInodeMapSize());
    assertEquals(expectedLastInodeId,fsn.getLastInodeId());
    assertTrue(fs.delete(new Path("/test1"),true));
    inodeCount-=2;
    assertEquals(inodeCount,fsn.dir.getInodeMapSize());
    cluster.restartNameNode();
    cluster.waitActive();
    fsn=cluster.getNamesystem();
    assertEquals(expectedLastInodeId,fsn.getLastInodeId());
    assertEquals(inodeCount,fsn.dir.getInodeMapSize());
    DFSTestUtil.createFile(fs,new Path("/test2/file2"),1024,(short)1,0);
    expectedLastInodeId+=2;
    inodeCount+=2;
    assertEquals(expectedLastInodeId,fsn.getLastInodeId());
    assertEquals(inodeCount,fsn.dir.getInodeMapSize());
    FSDataOutputStream outStream=fs.create(new Path("/test3/file"));
    assertTrue(outStream != null);
    expectedLastInodeId+=2;
    inodeCount+=2;
    assertEquals(expectedLastInodeId,fsn.getLastInodeId());
    assertEquals(inodeCount,fsn.dir.getInodeMapSize());
    fsn.enterSafeMode(false);
    fsn.saveNamespace();
    fsn.leaveSafeMode();
    outStream.close();
    cluster.restartNameNode();
    cluster.waitActive();
    fsn=cluster.getNamesystem();
    assertEquals(expectedLastInodeId,fsn.getLastInodeId());
    assertEquals(inodeCount,fsn.dir.getInodeMapSize());
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
