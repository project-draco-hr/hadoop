{
  long fileLen=1024;
  replication=3;
  Configuration conf=new Configuration();
  MiniDFSCluster cluster=null;
  try {
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(replication).build();
    cluster.waitActive();
    FSNamesystem fsn=cluster.getNamesystem();
    FSDirectory fsdir=fsn.getFSDirectory();
    DistributedFileSystem dfs=cluster.getFileSystem();
    final Path dir=new Path("/dir");
    final Path file=new Path(dir,"file");
    DFSTestUtil.createFile(dfs,file,fileLen,replication,0L);
    INode fnode=fsdir.getINode(file.toString());
    assertEquals(file.toString(),fnode.getFullPathName());
    dfs.setQuota(dir,Long.MAX_VALUE - 1,replication * fileLen * 10);
    INodeDirectory dirNode=getDir(fsdir,dir);
    assertEquals(dir.toString(),dirNode.getFullPathName());
    assertTrue(dirNode.isWithQuota());
    final Path newDir=new Path("/newdir");
    final Path newFile=new Path(newDir,"file");
    dfs.rename(dir,newDir,Options.Rename.OVERWRITE);
    fnode=fsdir.getINode(newFile.toString());
    assertEquals(newFile.toString(),fnode.getFullPathName());
  }
  finally {
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
