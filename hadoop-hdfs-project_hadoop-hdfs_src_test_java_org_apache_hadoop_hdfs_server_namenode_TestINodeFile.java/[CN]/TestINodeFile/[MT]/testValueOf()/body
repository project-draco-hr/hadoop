{
  final String path="/testValueOf";
  final short replication=3;
{
    final INode from=null;
    try {
      INodeFile.valueOf(from,path);
      fail();
    }
 catch (    FileNotFoundException fnfe) {
      assertTrue(fnfe.getMessage().contains("File does not exist"));
    }
    try {
      INodeDirectory.valueOf(from,path);
      fail();
    }
 catch (    FileNotFoundException e) {
      assertTrue(e.getMessage().contains("Directory does not exist"));
    }
  }
{
    final INode from=createINodeFile(replication,preferredBlockSize);
    final INodeFile f=INodeFile.valueOf(from,path);
    assertTrue(f == from);
    try {
      INodeDirectory.valueOf(from,path);
      fail();
    }
 catch (    PathIsNotDirectoryException e) {
    }
  }
{
    final INode from=new INodeFile(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L,0L,null,replication,1024L);
    from.asFile().toUnderConstruction("client","machine");
    final INodeFile f=INodeFile.valueOf(from,path);
    assertTrue(f == from);
    try {
      INodeDirectory.valueOf(from,path);
      fail();
    }
 catch (    PathIsNotDirectoryException expected) {
    }
  }
{
    final INode from=new INodeDirectory(HdfsConstants.GRANDFATHER_INODE_ID,null,perm,0L);
    try {
      INodeFile.valueOf(from,path);
      fail();
    }
 catch (    FileNotFoundException fnfe) {
      assertTrue(fnfe.getMessage().contains("Path is not a file"));
    }
    final INodeDirectory d=INodeDirectory.valueOf(from,path);
    assertTrue(d == from);
  }
}
