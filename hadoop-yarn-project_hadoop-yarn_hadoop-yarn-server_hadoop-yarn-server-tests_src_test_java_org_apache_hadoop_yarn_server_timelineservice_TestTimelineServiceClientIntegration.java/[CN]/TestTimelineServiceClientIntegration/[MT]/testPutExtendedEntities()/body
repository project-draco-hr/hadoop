{
  ApplicationId appId=ApplicationId.newInstance(0,1);
  TimelineClient client=TimelineClient.createTimelineClient(appId);
  try {
    client.setTimelineServiceAddress(collectorManager.getRestServerBindAddress());
    client.init(new YarnConfiguration());
    client.start();
    ClusterEntity cluster=new ClusterEntity();
    cluster.setId(YarnConfiguration.DEFAULT_RM_CLUSTER_ID);
    FlowEntity flow=new FlowEntity();
    flow.setUser(UserGroupInformation.getCurrentUser().getShortUserName());
    flow.setName("test_flow_name");
    flow.setVersion("test_flow_version");
    flow.setRunId(1L);
    flow.setParent(cluster.getType(),cluster.getId());
    ApplicationEntity app=new ApplicationEntity();
    app.setId(appId.toString());
    flow.addChild(app.getType(),app.getId());
    ApplicationAttemptId attemptId=ApplicationAttemptId.newInstance(appId,1);
    ApplicationAttemptEntity appAttempt=new ApplicationAttemptEntity();
    appAttempt.setId(attemptId.toString());
    ContainerId containerId=ContainerId.newContainerId(attemptId,1);
    ContainerEntity container=new ContainerEntity();
    container.setId(containerId.toString());
    UserEntity user=new UserEntity();
    user.setId(UserGroupInformation.getCurrentUser().getShortUserName());
    QueueEntity queue=new QueueEntity();
    queue.setId("default_queue");
    client.putEntities(cluster,flow,app,appAttempt,container,user,queue);
    client.putEntitiesAsync(cluster,flow,app,appAttempt,container,user,queue);
  }
  finally {
    client.stop();
  }
}
