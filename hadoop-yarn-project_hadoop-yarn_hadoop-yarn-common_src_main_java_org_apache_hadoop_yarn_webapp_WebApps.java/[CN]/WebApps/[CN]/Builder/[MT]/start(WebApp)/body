{
  if (webapp == null) {
    webapp=new WebApp(){
      @Override public void setup(){
      }
    }
;
  }
  webapp.setName(name);
  webapp.setWebServices(wsName);
  String basePath="/" + name;
  webapp.setRedirectPath(basePath);
  List<String> pathList=new ArrayList<String>();
  if (basePath.equals("/")) {
    webapp.addServePathSpec("/*");
    pathList.add("/*");
  }
 else {
    webapp.addServePathSpec(basePath);
    webapp.addServePathSpec(basePath + "/*");
    pathList.add(basePath + "/*");
  }
  if (wsName != null && !wsName.equals(basePath)) {
    if (wsName.equals("/")) {
      webapp.addServePathSpec("/*");
      pathList.add("/*");
    }
 else {
      webapp.addServePathSpec("/" + wsName);
      webapp.addServePathSpec("/" + wsName + "/*");
      pathList.add("/" + wsName + "/*");
    }
  }
  if (conf == null) {
    conf=new Configuration();
  }
  try {
    if (application != null) {
      webapp.setHostClass(application.getClass());
    }
 else {
      String cls=inferHostClass();
      LOG.debug("setting webapp host class to {}",cls);
      webapp.setHostClass(Class.forName(cls));
    }
    if (devMode) {
      if (port > 0) {
        try {
          new URL("http://localhost:" + port + "/__stop").getContent();
          LOG.info("stopping existing webapp instance");
          Thread.sleep(100);
        }
 catch (        ConnectException e) {
          LOG.info("no existing webapp instance found: {}",e.toString());
        }
catch (        Exception e) {
          LOG.warn("error stopping existing instance: {}",e.toString());
        }
      }
 else {
        LOG.error("dev mode does NOT work with ephemeral port!");
        System.exit(1);
      }
    }
    HttpServer2.Builder builder=new HttpServer2.Builder().setName(name).addEndpoint(URI.create("http://" + bindAddress + ":"+ port)).setConf(conf).setFindPort(findPort).setACL(new AdminACLsManager(conf).getAdminAcl()).setPathSpec(pathList.toArray(new String[0]));
    boolean hasSpnegoConf=spnegoPrincipalKey != null && conf.get(spnegoPrincipalKey) != null && spnegoKeytabKey != null && conf.get(spnegoKeytabKey) != null;
    if (hasSpnegoConf) {
      builder.setUsernameConfKey(spnegoPrincipalKey).setKeytabConfKey(spnegoKeytabKey).setSecurityEnabled(UserGroupInformation.isSecurityEnabled());
    }
    HttpServer2 server=builder.build();
    for (    ServletStruct struct : servlets) {
      server.addServlet(struct.name,struct.spec,struct.clazz);
    }
    for (    Map.Entry<String,Object> entry : attributes.entrySet()) {
      server.setAttribute(entry.getKey(),entry.getValue());
    }
    HttpServer2.defineFilter(server.getWebAppContext(),"guice",GuiceFilter.class.getName(),null,new String[]{"/*"});
    webapp.setConf(conf);
    webapp.setHttpServer(server);
    server.start();
    LOG.info("Web app /" + name + " started at "+ server.getConnectorAddress(0).getPort());
  }
 catch (  ClassNotFoundException e) {
    throw new WebAppException("Error starting http server",e);
  }
catch (  IOException e) {
    throw new WebAppException("Error starting http server",e);
  }
  Injector injector=Guice.createInjector(webapp,new AbstractModule(){
    @Override protected void configure(){
      if (api != null) {
        bind(api).toInstance(application);
      }
    }
  }
);
  LOG.info("Registered webapp guice modules");
  webapp.setGuiceFilter(injector.getInstance(GuiceFilter.class));
  if (devMode) {
    injector.getInstance(Dispatcher.class).setDevMode(devMode);
    LOG.info("in dev mode!");
  }
  return webapp;
}
