{
  Configuration conf=getConf();
  JobClient client=new JobClient(conf);
  ClusterStatus cluster=client.getClusterStatus();
  int num_reduces=(int)(cluster.getMaxReduceTasks() * 0.9);
  String sort_reduces=conf.get(REDUCES_PER_HOST);
  if (sort_reduces != null) {
    num_reduces=cluster.getTaskTrackers() * Integer.parseInt(sort_reduces);
  }
  Class<? extends InputFormat> inputFormatClass=SequenceFileInputFormat.class;
  Class<? extends OutputFormat> outputFormatClass=SequenceFileOutputFormat.class;
  Class<? extends WritableComparable> outputKeyClass=BytesWritable.class;
  Class<? extends Writable> outputValueClass=BytesWritable.class;
  List<String> otherArgs=new ArrayList<String>();
  InputSampler.Sampler<K,V> sampler=null;
  for (int i=0; i < args.length; ++i) {
    try {
      if ("-r".equals(args[i])) {
        num_reduces=Integer.parseInt(args[++i]);
      }
 else       if ("-inFormat".equals(args[i])) {
        inputFormatClass=Class.forName(args[++i]).asSubclass(InputFormat.class);
      }
 else       if ("-outFormat".equals(args[i])) {
        outputFormatClass=Class.forName(args[++i]).asSubclass(OutputFormat.class);
      }
 else       if ("-outKey".equals(args[i])) {
        outputKeyClass=Class.forName(args[++i]).asSubclass(WritableComparable.class);
      }
 else       if ("-outValue".equals(args[i])) {
        outputValueClass=Class.forName(args[++i]).asSubclass(Writable.class);
      }
 else       if ("-totalOrder".equals(args[i])) {
        double pcnt=Double.parseDouble(args[++i]);
        int numSamples=Integer.parseInt(args[++i]);
        int maxSplits=Integer.parseInt(args[++i]);
        if (0 >= maxSplits)         maxSplits=Integer.MAX_VALUE;
        sampler=new InputSampler.RandomSampler<K,V>(pcnt,numSamples,maxSplits);
      }
 else {
        otherArgs.add(args[i]);
      }
    }
 catch (    NumberFormatException except) {
      System.out.println("ERROR: Integer expected instead of " + args[i]);
      return printUsage();
    }
catch (    ArrayIndexOutOfBoundsException except) {
      System.out.println("ERROR: Required parameter missing from " + args[i - 1]);
      return printUsage();
    }
  }
  job=Job.getInstance(conf);
  job.setJobName("sorter");
  job.setJarByClass(Sort.class);
  job.setMapperClass(Mapper.class);
  job.setReducerClass(Reducer.class);
  job.setNumReduceTasks(num_reduces);
  job.setInputFormatClass(inputFormatClass);
  job.setOutputFormatClass(outputFormatClass);
  job.setOutputKeyClass(outputKeyClass);
  job.setOutputValueClass(outputValueClass);
  if (otherArgs.size() != 2) {
    System.out.println("ERROR: Wrong number of parameters: " + otherArgs.size() + " instead of 2.");
    return printUsage();
  }
  FileInputFormat.setInputPaths(job,otherArgs.get(0));
  FileOutputFormat.setOutputPath(job,new Path(otherArgs.get(1)));
  if (sampler != null) {
    System.out.println("Sampling input to effect total-order sort...");
    job.setPartitionerClass(TotalOrderPartitioner.class);
    Path inputDir=FileInputFormat.getInputPaths(job)[0];
    inputDir=inputDir.makeQualified(inputDir.getFileSystem(conf));
    Path partitionFile=new Path(inputDir,"_sortPartitioning");
    TotalOrderPartitioner.setPartitionFile(conf,partitionFile);
    InputSampler.<K,V>writePartitionFile(job,sampler);
    URI partitionUri=new URI(partitionFile.toString() + "#" + "_sortPartitioning");
    DistributedCache.addCacheFile(partitionUri,conf);
  }
  System.out.println("Running on " + cluster.getTaskTrackers() + " nodes to sort from "+ FileInputFormat.getInputPaths(job)[0]+ " into "+ FileOutputFormat.getOutputPath(job)+ " with "+ num_reduces+ " reduces.");
  Date startTime=new Date();
  System.out.println("Job started: " + startTime);
  int ret=job.waitForCompletion(true) ? 0 : 1;
  Date end_time=new Date();
  System.out.println("Job ended: " + end_time);
  System.out.println("The job took " + (end_time.getTime() - startTime.getTime()) / 1000 + " seconds.");
  return ret;
}
