{
  LOG.debug("Creating directory: {}",f.toString());
  if (containsColon(f)) {
    throw new IOException("Cannot create directory " + f + " through WASB that has colons in the name");
  }
  Path absolutePath=makeAbsolute(f);
  PermissionStatus permissionStatus=null;
  if (noUmask) {
    permissionStatus=createPermissionStatus(applyUMask(FsPermission.createImmutable((short)(permission.toShort() | USER_WX_PERMISION)),UMaskApplyMode.NewDirectoryNoUmask));
  }
 else {
    permissionStatus=createPermissionStatus(applyUMask(permission,UMaskApplyMode.NewDirectory));
  }
  ArrayList<String> keysToCreateAsFolder=new ArrayList<String>();
  ArrayList<String> keysToUpdateAsFolder=new ArrayList<String>();
  boolean childCreated=false;
  for (Path current=absolutePath, parent=current.getParent(); parent != null; current=parent, parent=current.getParent()) {
    String currentKey=pathToKey(current);
    FileMetadata currentMetadata=store.retrieveMetadata(currentKey);
    if (currentMetadata != null && !currentMetadata.isDir()) {
      throw new FileAlreadyExistsException("Cannot create directory " + f + " because "+ current+ " is an existing file.");
    }
 else     if (currentMetadata == null) {
      keysToCreateAsFolder.add(currentKey);
      childCreated=true;
    }
 else {
      if (childCreated) {
        keysToUpdateAsFolder.add(currentKey);
      }
      childCreated=false;
    }
  }
  for (  String currentKey : keysToCreateAsFolder) {
    store.storeEmptyFolder(currentKey,permissionStatus);
  }
  instrumentation.directoryCreated();
  return true;
}
