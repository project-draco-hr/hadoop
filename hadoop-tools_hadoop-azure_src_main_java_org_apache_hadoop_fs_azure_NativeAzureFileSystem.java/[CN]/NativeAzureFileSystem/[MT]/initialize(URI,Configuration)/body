{
  uri=reconstructAuthorityIfNeeded(uri,conf);
  if (null == uri.getAuthority()) {
    final String errMsg=String.format("Cannot initialize WASB file system, URI authority not recognized.");
    throw new IllegalArgumentException(errMsg);
  }
  super.initialize(uri,conf);
  if (store == null) {
    store=createDefaultStore(conf);
  }
  instrumentation=new AzureFileSystemInstrumentation(conf);
  if (!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME,false)) {
    AzureFileSystemMetricsSystem.fileSystemStarted();
    metricsSourceName=newMetricsSourceName();
    String sourceDesc="Azure Storage Volume File System metrics";
    AzureFileSystemMetricsSystem.registerSource(metricsSourceName,sourceDesc,instrumentation);
  }
  store.initialize(uri,conf,instrumentation);
  setConf(conf);
  this.uri=URI.create(uri.getScheme() + "://" + uri.getAuthority());
  this.workingDir=new Path("/user",UserGroupInformation.getCurrentUser().getShortUserName()).makeQualified(getUri(),getWorkingDirectory());
  this.blockSize=conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,MAX_AZURE_BLOCK_SIZE);
  this.appendSupportEnabled=conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME,false);
  LOG.debug("NativeAzureFileSystem. Initializing.");
  LOG.debug("  blockSize  = {}",conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,MAX_AZURE_BLOCK_SIZE));
}
