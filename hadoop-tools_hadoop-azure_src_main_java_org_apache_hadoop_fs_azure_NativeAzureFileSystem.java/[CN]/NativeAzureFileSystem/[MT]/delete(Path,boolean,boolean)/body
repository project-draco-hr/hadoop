{
  LOG.debug("Deleting file: {}",f.toString());
  Path absolutePath=makeAbsolute(f);
  String key=pathToKey(absolutePath);
  FileMetadata metaFile=null;
  try {
    metaFile=store.retrieveMetadata(key);
  }
 catch (  IOException e) {
    Throwable innerException=NativeAzureFileSystemHelper.checkForAzureStorageException(e);
    if (innerException instanceof StorageException && NativeAzureFileSystemHelper.isFileNotFoundException((StorageException)innerException)) {
      return false;
    }
    throw e;
  }
  if (null == metaFile) {
    return false;
  }
  if (!metaFile.isDir()) {
    Path parentPath=absolutePath.getParent();
    if (parentPath.getParent() != null) {
      String parentKey=pathToKey(parentPath);
      FileMetadata parentMetadata=null;
      try {
        parentMetadata=store.retrieveMetadata(parentKey);
      }
 catch (      IOException e) {
        Throwable innerException=NativeAzureFileSystemHelper.checkForAzureStorageException(e);
        if (innerException instanceof StorageException) {
          if (NativeAzureFileSystemHelper.isFileNotFoundException((StorageException)innerException)) {
            throw new IOException("File " + f + " has a parent directory "+ parentPath+ " whose metadata cannot be retrieved. Can't resolve");
          }
        }
        throw e;
      }
      if (parentMetadata == null) {
        throw new IOException("File " + f + " has a parent directory "+ parentPath+ " whose metadata cannot be retrieved. Can't resolve");
      }
      if (!parentMetadata.isDir()) {
        throw new AzureException("File " + f + " has a parent directory "+ parentPath+ " which is also a file. Can't resolve.");
      }
      if (parentMetadata.getBlobMaterialization() == BlobMaterialization.Implicit) {
        LOG.debug("Found an implicit parent directory while trying to" + " delete the file {}. Creating the directory blob for" + " it in {}.",f,parentKey);
        store.storeEmptyFolder(parentKey,createPermissionStatus(FsPermission.getDefault()));
      }
 else {
        if (!skipParentFolderLastModifidedTimeUpdate) {
          updateParentFolderLastModifiedTime(key);
        }
      }
    }
    try {
      store.delete(key);
      instrumentation.fileDeleted();
    }
 catch (    IOException e) {
      Throwable innerException=NativeAzureFileSystemHelper.checkForAzureStorageException(e);
      if (innerException instanceof StorageException && NativeAzureFileSystemHelper.isFileNotFoundException((StorageException)innerException)) {
        return false;
      }
      throw e;
    }
  }
 else {
    LOG.debug("Directory Delete encountered: {}",f.toString());
    Path parentPath=absolutePath.getParent();
    if (parentPath.getParent() != null) {
      String parentKey=pathToKey(parentPath);
      FileMetadata parentMetadata=null;
      try {
        parentMetadata=store.retrieveMetadata(parentKey);
      }
 catch (      IOException e) {
        Throwable innerException=NativeAzureFileSystemHelper.checkForAzureStorageException(e);
        if (innerException instanceof StorageException) {
          if (NativeAzureFileSystemHelper.isFileNotFoundException((StorageException)innerException)) {
            throw new IOException("File " + f + " has a parent directory "+ parentPath+ " whose metadata cannot be retrieved. Can't resolve");
          }
        }
        throw e;
      }
      if (parentMetadata == null) {
        throw new IOException("File " + f + " has a parent directory "+ parentPath+ " whose metadata cannot be retrieved. Can't resolve");
      }
      if (parentMetadata.getBlobMaterialization() == BlobMaterialization.Implicit) {
        LOG.debug("Found an implicit parent directory while trying to" + " delete the directory {}. Creating the directory blob for" + " it in {}. ",f,parentKey);
        store.storeEmptyFolder(parentKey,createPermissionStatus(FsPermission.getDefault()));
      }
    }
    String priorLastKey=null;
    long start=Time.monotonicNow();
    ArrayList<FileMetadata> fileMetadataList=new ArrayList<FileMetadata>();
    do {
      try {
        PartialListing listing=store.listAll(key,AZURE_LIST_ALL,AZURE_UNBOUNDED_DEPTH,priorLastKey);
        for (        FileMetadata file : listing.getFiles()) {
          fileMetadataList.add(file);
        }
        priorLastKey=listing.getPriorLastKey();
      }
 catch (      IOException e) {
        Throwable innerException=NativeAzureFileSystemHelper.checkForAzureStorageException(e);
        if (innerException instanceof StorageException && NativeAzureFileSystemHelper.isFileNotFoundException((StorageException)innerException)) {
          return false;
        }
        throw e;
      }
    }
 while (priorLastKey != null);
    long end=Time.monotonicNow();
    LOG.debug("Time taken to list {} blobs for delete operation: {} ms",fileMetadataList.size(),(end - start));
    final FileMetadata[] contents=fileMetadataList.toArray(new FileMetadata[fileMetadataList.size()]);
    if (!recursive && contents.length > 0) {
      throw new IOException("Non-recursive delete of non-empty directory " + f.toString());
    }
    AzureFileSystemThreadTask task=new AzureFileSystemThreadTask(){
      @Override public boolean execute(      FileMetadata file) throws IOException {
        return deleteFile(file.getKey(),file.isDir());
      }
    }
;
    AzureFileSystemThreadPoolExecutor executor=getThreadPoolExecutor(this.deleteThreadCount,"AzureBlobDeleteThread","Delete",key,AZURE_DELETE_THREADS);
    if (!executor.executeParallel(contents,task)) {
      LOG.error("Failed to delete files / subfolders in blob {}",key);
      return false;
    }
    if (!deleteFile(metaFile.getKey(),metaFile.isDir())) {
      LOG.error("Failed delete directory {}",f.toString());
      return false;
    }
    Path parent=absolutePath.getParent();
    if (parent != null && parent.getParent() != null) {
      if (!skipParentFolderLastModifidedTimeUpdate) {
        updateParentFolderLastModifiedTime(key);
      }
    }
  }
  LOG.debug("Delete Successful for : {}",f.toString());
  return true;
}
