{
  FolderRenamePending renamePending=null;
  LOG.debug("Moving {} to {}",src,dst);
  if (containsColon(dst)) {
    throw new IOException("Cannot rename to file " + dst + " through WASB that has colons in the name");
  }
  String srcKey=pathToKey(makeAbsolute(src));
  if (srcKey.length() == 0) {
    return false;
  }
  Path absoluteDst=makeAbsolute(dst);
  String dstKey=pathToKey(absoluteDst);
  FileMetadata dstMetadata=null;
  try {
    dstMetadata=store.retrieveMetadata(dstKey);
  }
 catch (  IOException ex) {
    Throwable innerException=NativeAzureFileSystemHelper.checkForAzureStorageException(ex);
    if (innerException instanceof StorageException) {
      if (NativeAzureFileSystemHelper.isFileNotFoundException((StorageException)innerException)) {
        LOG.debug("BlobNotFound exception encountered for Destination key : {}. " + "Swallowin the exception to handle race condition gracefully",dstKey);
      }
    }
 else {
      throw ex;
    }
  }
  if (dstMetadata != null && dstMetadata.isDir()) {
    dstKey=pathToKey(makeAbsolute(new Path(dst,src.getName())));
    LOG.debug("Destination {} " + " is a directory, adjusted the destination to be {}",dst,dstKey);
  }
 else   if (dstMetadata != null) {
    LOG.debug("Destination {}" + " is an already existing file, failing the rename.",dst);
    return false;
  }
 else {
    FileMetadata parentOfDestMetadata=null;
    try {
      parentOfDestMetadata=store.retrieveMetadata(pathToKey(absoluteDst.getParent()));
    }
 catch (    IOException ex) {
      Throwable innerException=NativeAzureFileSystemHelper.checkForAzureStorageException(ex);
      if (innerException instanceof StorageException && NativeAzureFileSystemHelper.isFileNotFoundException((StorageException)innerException)) {
        LOG.debug("Parent of destination {} doesn't exists. Failing rename",dst);
        return false;
      }
      throw ex;
    }
    if (parentOfDestMetadata == null) {
      LOG.debug("Parent of the destination {}" + " doesn't exist, failing the rename.",dst);
      return false;
    }
 else     if (!parentOfDestMetadata.isDir()) {
      LOG.debug("Parent of the destination {}" + " is a file, failing the rename.",dst);
      return false;
    }
  }
  FileMetadata srcMetadata=null;
  try {
    srcMetadata=store.retrieveMetadata(srcKey);
  }
 catch (  IOException ex) {
    Throwable innerException=NativeAzureFileSystemHelper.checkForAzureStorageException(ex);
    if (innerException instanceof StorageException && NativeAzureFileSystemHelper.isFileNotFoundException((StorageException)innerException)) {
      LOG.debug("Source {} doesn't exists. Failing rename",src);
      return false;
    }
    throw ex;
  }
  if (srcMetadata == null) {
    LOG.debug("Source {} doesn't exist, failing the rename.",src);
    return false;
  }
 else   if (!srcMetadata.isDir()) {
    LOG.debug("Source {} found as a file, renaming.",src);
    try {
      store.rename(srcKey,dstKey);
    }
 catch (    IOException ex) {
      Throwable innerException=NativeAzureFileSystemHelper.checkForAzureStorageException(ex);
      if (innerException instanceof StorageException && NativeAzureFileSystemHelper.isFileNotFoundException((StorageException)innerException)) {
        LOG.debug("BlobNotFoundException encountered. Failing rename",src);
        return false;
      }
      throw ex;
    }
  }
 else {
    renamePending=prepareAtomicFolderRename(srcKey,dstKey);
    renamePending.execute();
    LOG.debug("Renamed {} to {} successfully.",src,dst);
    renamePending.cleanup();
    return true;
  }
  updateParentFolderLastModifiedTime(srcKey);
  updateParentFolderLastModifiedTime(dstKey);
  LOG.debug("Renamed {} to {} successfully.",src,dst);
  return true;
}
