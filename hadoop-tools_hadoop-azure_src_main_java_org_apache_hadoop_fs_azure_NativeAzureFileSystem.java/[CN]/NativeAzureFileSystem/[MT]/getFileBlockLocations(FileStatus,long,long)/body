{
  if (file == null) {
    return null;
  }
  if ((start < 0) || (len < 0)) {
    throw new IllegalArgumentException("Invalid start or len parameter");
  }
  if (file.getLen() < start) {
    return new BlockLocation[0];
  }
  final String blobLocationHost=getConf().get(AZURE_BLOCK_LOCATION_HOST_PROPERTY_NAME,AZURE_BLOCK_LOCATION_HOST_DEFAULT);
  final String[] name={blobLocationHost};
  final String[] host={blobLocationHost};
  long blockSize=file.getBlockSize();
  if (blockSize <= 0) {
    throw new IllegalArgumentException("The block size for the given file is not a positive number: " + blockSize);
  }
  int numberOfLocations=(int)(len / blockSize) + ((len % blockSize == 0) ? 0 : 1);
  BlockLocation[] locations=new BlockLocation[numberOfLocations];
  for (int i=0; i < locations.length; i++) {
    long currentOffset=start + (i * blockSize);
    long currentLength=Math.min(blockSize,start + len - currentOffset);
    locations[i]=new BlockLocation(name,host,currentOffset,currentLength);
  }
  return locations;
}
