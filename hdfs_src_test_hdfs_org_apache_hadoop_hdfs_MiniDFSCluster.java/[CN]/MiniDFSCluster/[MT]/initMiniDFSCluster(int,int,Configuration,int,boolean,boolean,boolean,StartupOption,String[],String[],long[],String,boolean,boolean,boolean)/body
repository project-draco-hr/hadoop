{
  this.conf=conf;
  base_dir=new File(getBaseDirectory());
  data_dir=new File(base_dir,"data");
  this.federation=federation;
  this.waitSafeMode=waitSafeMode;
  String rpcEngineName=System.getProperty("hdfs.rpc.engine");
  if (rpcEngineName != null && !"".equals(rpcEngineName)) {
    System.out.println("HDFS using RPCEngine: " + rpcEngineName);
    try {
      Class<?> rpcEngine=conf.getClassByName(rpcEngineName);
      setRpcEngine(conf,NamenodeProtocols.class,rpcEngine);
      setRpcEngine(conf,NamenodeProtocol.class,rpcEngine);
      setRpcEngine(conf,ClientProtocol.class,rpcEngine);
      setRpcEngine(conf,DatanodeProtocol.class,rpcEngine);
      setRpcEngine(conf,RefreshAuthorizationPolicyProtocol.class,rpcEngine);
      setRpcEngine(conf,RefreshUserMappingsProtocol.class,rpcEngine);
      setRpcEngine(conf,GetUserMappingsProtocol.class,rpcEngine);
    }
 catch (    ClassNotFoundException e) {
      throw new RuntimeException(e);
    }
    conf.setBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION,false);
  }
  int replication=conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,3);
  conf.setInt(DFSConfigKeys.DFS_REPLICATION_KEY,Math.min(replication,numDataNodes));
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_SAFEMODE_EXTENSION_KEY,0);
  conf.setInt(DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,3);
  conf.setClass(DFSConfigKeys.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY,StaticMapping.class,DNSToSwitchMapping.class);
  Collection<String> nameserviceIds=DFSUtil.getNameServiceIds(conf);
  if (nameserviceIds.size() > 1)   federation=true;
  if (!federation) {
    conf.set(DFSConfigKeys.FS_DEFAULT_NAME_KEY,"127.0.0.1:" + nameNodePort);
    conf.set(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY,"127.0.0.1:" + nameNodeHttpPort);
    NameNode nn=createNameNode(0,conf,numDataNodes,manageNameDfsDirs,format,operation,clusterId);
    nameNodes[0]=new NameNodeInfo(nn,conf);
    FileSystem.setDefaultUri(conf,getURI(0));
  }
 else {
    if (nameserviceIds.isEmpty()) {
      for (int i=0; i < nameNodes.length; i++) {
        nameserviceIds.add(NAMESERVICE_ID_PREFIX + i);
      }
    }
    initFederationConf(conf,nameserviceIds,numDataNodes,nameNodePort);
    createFederationNamenodes(conf,nameserviceIds,manageNameDfsDirs,format,operation,clusterId);
  }
  if (format) {
    if (data_dir.exists() && !FileUtil.fullyDelete(data_dir)) {
      throw new IOException("Cannot remove data directory: " + data_dir);
    }
  }
  startDataNodes(conf,numDataNodes,manageDataDfsDirs,operation,racks,hosts,simulatedCapacities,setupHostsFile);
  waitClusterUp();
  ProxyUsers.refreshSuperUserGroupsConfiguration(conf);
}
