{
  try {
    String principal=config.getProperty(PRINCIPAL);
    if (principal == null || principal.trim().length() == 0) {
      throw new ServletException("Principal not defined in configuration");
    }
    keytab=config.getProperty(KEYTAB,keytab);
    if (keytab == null || keytab.trim().length() == 0) {
      throw new ServletException("Keytab not defined in configuration");
    }
    if (!new File(keytab).exists()) {
      throw new ServletException("Keytab does not exist: " + keytab);
    }
    final String[] spnegoPrincipals;
    if (principal.equals("*")) {
      spnegoPrincipals=KerberosUtil.getPrincipalNames(keytab,Pattern.compile("HTTP/.*"));
      if (spnegoPrincipals.length == 0) {
        throw new ServletException("Principals do not exist in the keytab");
      }
    }
 else {
      spnegoPrincipals=new String[]{principal};
    }
    String nameRules=config.getProperty(NAME_RULES,null);
    if (nameRules != null) {
      KerberosName.setRules(nameRules);
    }
    for (    String spnegoPrincipal : spnegoPrincipals) {
      LOG.info("Login using keytab {}, for principal {}",keytab,principal);
      final KerberosConfiguration kerberosConfiguration=new KerberosConfiguration(keytab,spnegoPrincipal);
      final LoginContext loginContext=new LoginContext("",serverSubject,null,kerberosConfiguration);
      try {
        loginContext.login();
      }
 catch (      LoginException le) {
        LOG.warn("Failed to login as [{}]",spnegoPrincipal,le);
        throw new AuthenticationException(le);
      }
      loginContexts.add(loginContext);
    }
    try {
      gssManager=Subject.doAs(serverSubject,new PrivilegedExceptionAction<GSSManager>(){
        @Override public GSSManager run() throws Exception {
          return GSSManager.getInstance();
        }
      }
);
    }
 catch (    PrivilegedActionException ex) {
      throw ex.getException();
    }
  }
 catch (  Exception ex) {
    throw new ServletException(ex);
  }
}
