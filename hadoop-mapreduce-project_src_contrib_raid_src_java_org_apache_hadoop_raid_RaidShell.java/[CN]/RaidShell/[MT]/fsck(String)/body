{
  FileSystem fs=(new Path(path)).getFileSystem(conf);
  if (fs instanceof DistributedRaidFileSystem) {
    fs=((DistributedRaidFileSystem)fs).getFileSystem();
  }
  if (!(fs instanceof DistributedFileSystem)) {
    throw new IOException("expected DistributedFileSystem but got " + fs.getClass().getName());
  }
  final DistributedFileSystem dfs=(DistributedFileSystem)fs;
  String xorPrefix=RaidNode.xorDestinationPath(conf).toUri().getPath();
  String rsPrefix=RaidNode.rsDestinationPath(conf).toUri().getPath();
  if (!xorPrefix.endsWith("/")) {
    xorPrefix=xorPrefix + "/";
  }
  if (!rsPrefix.endsWith("/")) {
    rsPrefix=rsPrefix + "/";
  }
  LOG.debug("prefixes: " + xorPrefix + ", "+ rsPrefix);
  final String[] files=RaidDFSUtil.getCorruptFiles(dfs);
  final List<Path> corruptFileCandidates=new LinkedList<Path>();
  for (  final String f : files) {
    final Path p=new Path(f);
    if (!p.toString().startsWith(xorPrefix) && !p.toString().startsWith(rsPrefix) && p.toString().startsWith(path)) {
      corruptFileCandidates.add(p);
    }
  }
  RaidUtils.filterTrash(conf,corruptFileCandidates);
  int numberOfCorruptFiles=0;
  for (  final Path corruptFileCandidate : corruptFileCandidates) {
    if (isFileCorrupt(dfs,corruptFileCandidate)) {
      System.out.println(corruptFileCandidate.toString());
      numberOfCorruptFiles++;
    }
  }
  return numberOfCorruptFiles;
}
