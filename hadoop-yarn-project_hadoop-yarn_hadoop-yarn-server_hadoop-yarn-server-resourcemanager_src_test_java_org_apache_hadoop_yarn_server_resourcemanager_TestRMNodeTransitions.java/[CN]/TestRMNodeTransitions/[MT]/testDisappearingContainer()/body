{
  ContainerId cid1=BuilderUtils.newContainerId(BuilderUtils.newApplicationAttemptId(BuilderUtils.newApplicationId(1,1),1),1);
  ContainerId cid2=BuilderUtils.newContainerId(BuilderUtils.newApplicationAttemptId(BuilderUtils.newApplicationId(2,2),2),2);
  ArrayList<ContainerStatus> containerStats=new ArrayList<ContainerStatus>();
  containerStats.add(ContainerStatus.newInstance(cid1,ContainerState.RUNNING,"",-1));
  containerStats.add(ContainerStatus.newInstance(cid2,ContainerState.RUNNING,"",-1));
  node=getRunningNode();
  node.handle(getMockRMNodeStatusEvent(containerStats));
  assertEquals("unexpected number of running containers",2,node.getLaunchedContainers().size());
  Assert.assertTrue("first container not running",node.getLaunchedContainers().contains(cid1));
  Assert.assertTrue("second container not running",node.getLaunchedContainers().contains(cid2));
  assertEquals("already completed containers",0,completedContainers.size());
  containerStats.remove(0);
  node.handle(getMockRMNodeStatusEvent(containerStats));
  assertEquals("expected one container to be completed",1,completedContainers.size());
  ContainerStatus cs=completedContainers.get(0);
  assertEquals("first container not the one that completed",cid1,cs.getContainerId());
  assertEquals("completed container not marked complete",ContainerState.COMPLETE,cs.getState());
  assertEquals("completed container not marked aborted",ContainerExitStatus.ABORTED,cs.getExitStatus());
  Assert.assertTrue("completed container not marked missing",cs.getDiagnostics().contains("not reported"));
  assertEquals("unexpected number of running containers",1,node.getLaunchedContainers().size());
  Assert.assertTrue("second container not running",node.getLaunchedContainers().contains(cid2));
}
