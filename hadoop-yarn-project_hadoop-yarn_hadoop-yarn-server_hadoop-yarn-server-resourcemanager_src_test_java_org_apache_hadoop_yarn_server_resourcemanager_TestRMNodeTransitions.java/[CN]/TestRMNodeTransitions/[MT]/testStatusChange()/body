{
  node.handle(new RMNodeEvent(null,RMNodeEventType.STARTED));
  node.setNextHeartBeat(false);
  ContainerId completedContainerId1=BuilderUtils.newContainerId(BuilderUtils.newApplicationAttemptId(BuilderUtils.newApplicationId(0,0),0),0);
  ContainerId completedContainerId2=BuilderUtils.newContainerId(BuilderUtils.newApplicationAttemptId(BuilderUtils.newApplicationId(1,1),1),1);
  RMNodeStatusEvent statusEvent1=getMockRMNodeStatusEvent();
  RMNodeStatusEvent statusEvent2=getMockRMNodeStatusEvent();
  ContainerStatus containerStatus1=mock(ContainerStatus.class);
  ContainerStatus containerStatus2=mock(ContainerStatus.class);
  doReturn(completedContainerId1).when(containerStatus1).getContainerId();
  doReturn(Collections.singletonList(containerStatus1)).when(statusEvent1).getContainers();
  doReturn(completedContainerId2).when(containerStatus2).getContainerId();
  doReturn(Collections.singletonList(containerStatus2)).when(statusEvent2).getContainers();
  verify(scheduler,times(1)).handle(any(NodeUpdateSchedulerEvent.class));
  node.handle(statusEvent1);
  node.handle(statusEvent2);
  verify(scheduler,times(1)).handle(any(NodeUpdateSchedulerEvent.class));
  Assert.assertEquals(2,node.getQueueSize());
  node.handle(new RMNodeEvent(node.getNodeID(),RMNodeEventType.EXPIRE));
  Assert.assertEquals(0,node.getQueueSize());
}
