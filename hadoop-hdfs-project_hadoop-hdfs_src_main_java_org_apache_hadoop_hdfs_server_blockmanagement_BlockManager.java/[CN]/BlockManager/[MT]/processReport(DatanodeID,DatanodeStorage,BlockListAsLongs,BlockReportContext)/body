{
  namesystem.writeLock();
  final long startTime=Time.monotonicNow();
  final long endTime;
  DatanodeDescriptor node;
  Collection<Block> invalidatedBlocks=Collections.emptyList();
  try {
    node=datanodeManager.getDatanode(nodeID);
    if (node == null || !node.isRegistered()) {
      throw new IOException("ProcessReport from dead or unregistered node: " + nodeID);
    }
    DatanodeStorageInfo storageInfo=node.getStorageInfo(storage.getStorageID());
    if (storageInfo == null) {
      storageInfo=node.updateStorage(storage);
    }
    if (namesystem.isInStartupSafeMode() && storageInfo.getBlockReportCount() > 0) {
      blockLog.info("BLOCK* processReport: " + "discarded non-initial block report from {}" + " because namenode still in startup phase",nodeID);
      blockReportLeaseManager.removeLease(node);
      return !node.hasStaleStorages();
    }
    if (context != null) {
      if (!blockReportLeaseManager.checkLease(node,startTime,context.getLeaseId())) {
        return false;
      }
    }
    if (storageInfo.getBlockReportCount() == 0) {
      LOG.info("Processing first storage report for " + storageInfo.getStorageID() + " from datanode "+ nodeID.getDatanodeUuid());
      processFirstBlockReport(storageInfo,newReport);
    }
 else {
      invalidatedBlocks=processReport(storageInfo,newReport,context != null ? context.isSorted() : false);
    }
    storageInfo.receivedBlockReport();
    if (context != null) {
      if (context.getTotalRpcs() == context.getCurRpc() + 1) {
        long leaseId=this.getBlockReportLeaseManager().removeLease(node);
        BlockManagerFaultInjector.getInstance().removeBlockReportLease(node,leaseId);
      }
      LOG.debug("Processing RPC with index {} out of total {} RPCs in " + "processReport 0x{}",context.getCurRpc(),context.getTotalRpcs(),Long.toHexString(context.getReportId()));
    }
  }
  finally {
    endTime=Time.monotonicNow();
    namesystem.writeUnlock();
  }
  for (  Block b : invalidatedBlocks) {
    blockLog.debug("BLOCK* processReport: {} on node {} size {} does not " + "belong to any file",b,node,b.getNumBytes());
  }
  final NameNodeMetrics metrics=NameNode.getNameNodeMetrics();
  if (metrics != null) {
    metrics.addBlockReport((int)(endTime - startTime));
  }
  blockLog.info("BLOCK* processReport: from storage {} node {}, " + "blocks: {}, hasStaleStorage: {}, processing time: {} msecs, " + "invalidatedBlocks: {}",storage.getStorageID(),nodeID,newReport.getNumberOfBlocks(),node.hasStaleStorages(),(endTime - startTime),invalidatedBlocks.size());
  return !node.hasStaleStorages();
}
