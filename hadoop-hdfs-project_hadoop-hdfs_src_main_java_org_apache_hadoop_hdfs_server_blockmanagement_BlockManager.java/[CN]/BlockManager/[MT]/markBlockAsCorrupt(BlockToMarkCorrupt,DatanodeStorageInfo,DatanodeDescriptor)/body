{
  if (b.getStored().isDeleted()) {
    blockLog.debug("BLOCK markBlockAsCorrupt: {} cannot be marked as" + " corrupt as it does not belong to any file",b);
    addToInvalidates(b.getCorrupted(),node);
    return;
  }
  short expectedReplicas=getExpectedReplicaNum(b.getStored());
  if (storageInfo != null) {
    storageInfo.addBlock(b.getStored(),b.getCorrupted());
  }
  Block corrupted=new Block(b.getCorrupted());
  if (b.getStored().isStriped()) {
    corrupted.setBlockId(b.getStored().getBlockId());
  }
  corruptReplicas.addToCorruptReplicasMap(corrupted,node,b.getReason(),b.getReasonCode());
  NumberReplicas numberOfReplicas=countNodes(b.getStored());
  boolean hasEnoughLiveReplicas=numberOfReplicas.liveReplicas() >= expectedReplicas;
  boolean minReplicationSatisfied=hasMinStorage(b.getStored(),numberOfReplicas.liveReplicas());
  boolean hasMoreCorruptReplicas=minReplicationSatisfied && (numberOfReplicas.liveReplicas() + numberOfReplicas.corruptReplicas()) > expectedReplicas;
  boolean corruptedDuringWrite=minReplicationSatisfied && b.isCorruptedDuringWrite();
  if (hasEnoughLiveReplicas || hasMoreCorruptReplicas || corruptedDuringWrite) {
    invalidateBlock(b,node,numberOfReplicas);
  }
 else   if (namesystem.isPopulatingReplQueues()) {
    updateNeededReplications(b.getStored(),-1,0);
  }
}
