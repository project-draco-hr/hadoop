{
  final DatanodeDescriptor node=getDatanodeManager().getDatanode(datanode);
  if (node == null) {
    blockLog.warn("BLOCK* getBlocks: Asking for blocks from an" + " unrecorded node {}",datanode);
    throw new HadoopIllegalArgumentException("Datanode " + datanode + " not found.");
  }
  int numBlocks=node.numBlocks();
  if (numBlocks == 0) {
    return new BlocksWithLocations(new BlockWithLocations[0]);
  }
  Iterator<BlockInfoContiguous> iter=node.getBlockIterator();
  int startBlock=DFSUtil.getRandom().nextInt(numBlocks);
  for (int i=0; i < startBlock; i++) {
    iter.next();
  }
  List<BlockWithLocations> results=new ArrayList<BlockWithLocations>();
  long totalSize=0;
  BlockInfoContiguous curBlock;
  while (totalSize < size && iter.hasNext()) {
    curBlock=iter.next();
    if (!curBlock.isComplete())     continue;
    totalSize+=addBlock(curBlock,results);
  }
  if (totalSize < size) {
    iter=node.getBlockIterator();
    for (int i=0; i < startBlock && totalSize < size; i++) {
      curBlock=iter.next();
      if (!curBlock.isComplete())       continue;
      totalSize+=addBlock(curBlock,results);
    }
  }
  return new BlocksWithLocations(results.toArray(new BlockWithLocations[results.size()]));
}
