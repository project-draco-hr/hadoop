{
  int scheduledWork=0;
  final List<ReplicationWork> work=new LinkedList<>();
  namesystem.writeLock();
  try {
synchronized (neededReplications) {
      for (int priority=0; priority < blocksToReplicate.size(); priority++) {
        for (        BlockInfo block : blocksToReplicate.get(priority)) {
          ReplicationWork rw=scheduleReplication(block,priority);
          if (rw != null) {
            work.add(rw);
          }
        }
      }
    }
  }
  finally {
    namesystem.writeUnlock();
  }
  final Set<Node> excludedNodes=new HashSet<>();
  for (  ReplicationWork rw : work) {
    excludedNodes.clear();
    for (    DatanodeDescriptor dn : rw.getContainingNodes()) {
      excludedNodes.add(dn);
    }
    rw.chooseTargets(blockplacement,storagePolicySuite,excludedNodes);
  }
  namesystem.writeLock();
  try {
    for (    ReplicationWork rw : work) {
      final DatanodeStorageInfo[] targets=rw.getTargets();
      if (targets == null || targets.length == 0) {
        rw.resetTargets();
        continue;
      }
synchronized (neededReplications) {
        if (validateReplicationWork(rw)) {
          scheduledWork++;
        }
      }
    }
  }
  finally {
    namesystem.writeUnlock();
  }
  if (blockLog.isInfoEnabled()) {
    for (    ReplicationWork rw : work) {
      DatanodeStorageInfo[] targets=rw.getTargets();
      if (targets != null && targets.length != 0) {
        StringBuilder targetList=new StringBuilder("datanode(s)");
        for (        DatanodeStorageInfo target : targets) {
          targetList.append(' ');
          targetList.append(target.getDatanodeDescriptor());
        }
        blockLog.debug("BLOCK* ask {} to replicate {} to {}",rw.getSrcNode(),rw.getBlock(),targetList);
      }
    }
  }
  if (blockLog.isDebugEnabled()) {
    blockLog.debug("BLOCK* neededReplications = {} pendingReplications = {}",neededReplications.size(),pendingReplications.size());
  }
  return scheduledWork;
}
