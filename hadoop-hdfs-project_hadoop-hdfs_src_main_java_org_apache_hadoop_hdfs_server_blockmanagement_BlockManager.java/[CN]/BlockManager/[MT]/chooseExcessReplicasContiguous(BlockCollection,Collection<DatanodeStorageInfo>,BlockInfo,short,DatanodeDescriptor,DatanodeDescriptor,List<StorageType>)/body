{
  BlockPlacementPolicy replicator=placementPolicies.getPolicy(false);
  final Map<String,List<DatanodeStorageInfo>> rackMap=new HashMap<>();
  final List<DatanodeStorageInfo> moreThanOne=new ArrayList<>();
  final List<DatanodeStorageInfo> exactlyOne=new ArrayList<>();
  replicator.splitNodesWithRack(nonExcess,rackMap,moreThanOne,exactlyOne);
  boolean firstOne=true;
  final DatanodeStorageInfo delNodeHintStorage=DatanodeStorageInfo.getDatanodeStorageInfo(nonExcess,delNodeHint);
  final DatanodeStorageInfo addedNodeStorage=DatanodeStorageInfo.getDatanodeStorageInfo(nonExcess,addedNode);
  while (nonExcess.size() - replication > 0) {
    final DatanodeStorageInfo cur;
    if (useDelHint(firstOne,delNodeHintStorage,addedNodeStorage,moreThanOne,excessTypes)) {
      cur=delNodeHintStorage;
    }
 else {
      cur=replicator.chooseReplicaToDelete(bc,storedBlock,replication,moreThanOne,exactlyOne,excessTypes);
    }
    firstOne=false;
    replicator.adjustSetsWithChosenReplica(rackMap,moreThanOne,exactlyOne,cur);
    processChosenExcessReplica(nonExcess,cur,storedBlock);
  }
}
