{
  Collection<BlockInfoContiguous> toAdd=new LinkedList<BlockInfoContiguous>();
  Collection<Block> toRemove=new TreeSet<Block>();
  Collection<Block> toInvalidate=new LinkedList<Block>();
  Collection<BlockToMarkCorrupt> toCorrupt=new LinkedList<BlockToMarkCorrupt>();
  Collection<StatefulBlockInfo> toUC=new LinkedList<StatefulBlockInfo>();
  reportDiff(storageInfo,report,toAdd,toRemove,toInvalidate,toCorrupt,toUC);
  DatanodeDescriptor node=storageInfo.getDatanodeDescriptor();
  for (  StatefulBlockInfo b : toUC) {
    addStoredBlockUnderConstruction(b,storageInfo);
  }
  for (  Block b : toRemove) {
    removeStoredBlock(b,node);
  }
  int numBlocksLogged=0;
  for (  BlockInfoContiguous b : toAdd) {
    addStoredBlock(b,storageInfo,null,numBlocksLogged < maxNumBlocksToLog);
    numBlocksLogged++;
  }
  if (numBlocksLogged > maxNumBlocksToLog) {
    blockLog.info("BLOCK* processReport: logged info for {} of {} " + "reported.",maxNumBlocksToLog,numBlocksLogged);
  }
  for (  Block b : toInvalidate) {
    addToInvalidates(b,node);
  }
  for (  BlockToMarkCorrupt b : toCorrupt) {
    markBlockAsCorrupt(b,storageInfo,node);
  }
  return toInvalidate;
}
