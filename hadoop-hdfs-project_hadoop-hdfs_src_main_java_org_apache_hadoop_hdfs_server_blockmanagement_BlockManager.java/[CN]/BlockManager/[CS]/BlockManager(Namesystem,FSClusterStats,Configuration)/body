{
  this.namesystem=namesystem;
  datanodeManager=new DatanodeManager(this,namesystem,conf);
  heartbeatManager=datanodeManager.getHeartbeatManager();
  final long pendingPeriod=conf.getLong(DFSConfigKeys.DFS_NAMENODE_STARTUP_DELAY_BLOCK_DELETION_SEC_KEY,DFSConfigKeys.DFS_NAMENODE_STARTUP_DELAY_BLOCK_DELETION_SEC_DEFAULT) * 1000L;
  invalidateBlocks=new InvalidateBlocks(datanodeManager.blockInvalidateLimit,pendingPeriod);
  blocksMap=new BlocksMap(LightWeightGSet.computeCapacity(2.0,"BlocksMap"));
  blockplacement=BlockPlacementPolicy.getInstance(conf,stats,datanodeManager.getNetworkTopology(),datanodeManager.getHost2DatanodeMap());
  storagePolicySuite=BlockStoragePolicySuite.createDefaultSuite();
  pendingReplications=new PendingReplicationBlocks(conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY,DFSConfigKeys.DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_DEFAULT) * 1000L);
  blockTokenSecretManager=createBlockTokenSecretManager(conf);
  this.maxCorruptFilesReturned=conf.getInt(DFSConfigKeys.DFS_DEFAULT_MAX_CORRUPT_FILES_RETURNED_KEY,DFSConfigKeys.DFS_DEFAULT_MAX_CORRUPT_FILES_RETURNED);
  this.defaultReplication=conf.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,DFSConfigKeys.DFS_REPLICATION_DEFAULT);
  final int maxR=conf.getInt(DFSConfigKeys.DFS_REPLICATION_MAX_KEY,DFSConfigKeys.DFS_REPLICATION_MAX_DEFAULT);
  final int minR=conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY,DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_DEFAULT);
  if (minR <= 0)   throw new IOException("Unexpected configuration parameters: " + DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY + " = "+ minR+ " <= 0");
  if (maxR > Short.MAX_VALUE)   throw new IOException("Unexpected configuration parameters: " + DFSConfigKeys.DFS_REPLICATION_MAX_KEY + " = "+ maxR+ " > "+ Short.MAX_VALUE);
  if (minR > maxR)   throw new IOException("Unexpected configuration parameters: " + DFSConfigKeys.DFS_NAMENODE_REPLICATION_MIN_KEY + " = "+ minR+ " > "+ DFSConfigKeys.DFS_REPLICATION_MAX_KEY+ " = "+ maxR);
  this.minReplication=(short)minR;
  this.maxReplication=(short)maxR;
  this.maxReplicationStreams=conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_MAX_STREAMS_KEY,DFSConfigKeys.DFS_NAMENODE_REPLICATION_MAX_STREAMS_DEFAULT);
  this.replicationStreamsHardLimit=conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_STREAMS_HARD_LIMIT_KEY,DFSConfigKeys.DFS_NAMENODE_REPLICATION_STREAMS_HARD_LIMIT_DEFAULT);
  this.shouldCheckForEnoughRacks=conf.get(DFSConfigKeys.NET_TOPOLOGY_SCRIPT_FILE_NAME_KEY) == null ? false : true;
  this.blocksInvalidateWorkPct=DFSUtil.getInvalidateWorkPctPerIteration(conf);
  this.blocksReplWorkMultiplier=DFSUtil.getReplWorkMultiplier(conf);
  this.replicationRecheckInterval=conf.getInt(DFSConfigKeys.DFS_NAMENODE_REPLICATION_INTERVAL_KEY,DFSConfigKeys.DFS_NAMENODE_REPLICATION_INTERVAL_DEFAULT) * 1000L;
  this.encryptDataTransfer=conf.getBoolean(DFSConfigKeys.DFS_ENCRYPT_DATA_TRANSFER_KEY,DFSConfigKeys.DFS_ENCRYPT_DATA_TRANSFER_DEFAULT);
  this.maxNumBlocksToLog=conf.getLong(DFSConfigKeys.DFS_MAX_NUM_BLOCKS_TO_LOG_KEY,DFSConfigKeys.DFS_MAX_NUM_BLOCKS_TO_LOG_DEFAULT);
  this.numBlocksPerIteration=conf.getInt(DFSConfigKeys.DFS_BLOCK_MISREPLICATION_PROCESSING_LIMIT,DFSConfigKeys.DFS_BLOCK_MISREPLICATION_PROCESSING_LIMIT_DEFAULT);
  LOG.info("defaultReplication         = " + defaultReplication);
  LOG.info("maxReplication             = " + maxReplication);
  LOG.info("minReplication             = " + minReplication);
  LOG.info("maxReplicationStreams      = " + maxReplicationStreams);
  LOG.info("shouldCheckForEnoughRacks  = " + shouldCheckForEnoughRacks);
  LOG.info("replicationRecheckInterval = " + replicationRecheckInterval);
  LOG.info("encryptDataTransfer        = " + encryptDataTransfer);
  LOG.info("maxNumBlocksToLog          = " + maxNumBlocksToLog);
}
