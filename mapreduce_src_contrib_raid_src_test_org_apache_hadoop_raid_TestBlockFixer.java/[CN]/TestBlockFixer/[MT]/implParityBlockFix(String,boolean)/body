{
  LOG.info("Test " + testName + " started.");
  long blockSize=8192L;
  int stripeLength=3;
  mySetup(stripeLength,-1);
  Path file1=new Path("/user/dhruba/raidtest/file1");
  Path destPath=new Path("/destraid/user/dhruba/raidtest");
  Path parityFile=new Path("/destraid/user/dhruba/raidtest/file1");
  TestRaidDfs.createTestFilePartialLastBlock(fileSys,file1,1,7,blockSize);
  LOG.info("Test " + testName + " created test files");
  Configuration localConf=new Configuration(conf);
  localConf.set(RaidNode.RAID_LOCATION_KEY,"/destraid");
  localConf.setInt("raid.blockfix.interval",1000);
  if (local) {
    localConf.set("raid.blockfix.classname","org.apache.hadoop.raid.LocalBlockFixer");
  }
 else {
    localConf.set("raid.blockfix.classname","org.apache.hadoop.raid.DistBlockFixer");
  }
  localConf.setLong("raid.blockfix.filespertask",2L);
  try {
    cnode=RaidNode.createRaidNode(null,localConf);
    TestRaidDfs.waitForFileRaided(LOG,fileSys,file1,destPath);
    cnode.stop();
    cnode.join();
    long parityCRC=getCRC(fileSys,parityFile);
    FileStatus parityStat=fileSys.getFileStatus(parityFile);
    DistributedFileSystem dfs=(DistributedFileSystem)fileSys;
    LocatedBlocks locs=RaidDFSUtil.getBlockLocations(dfs,parityFile.toUri().getPath(),0,parityStat.getLen());
    String[] corruptFiles=RaidDFSUtil.getCorruptFiles(dfs);
    assertEquals("no corrupt files expected",0,corruptFiles.length);
    assertEquals("filesFixed() should return 0 before fixing files",0,cnode.blockFixer.filesFixed());
    int[] corruptBlockIdxs=new int[]{0,1,2};
    for (    int idx : corruptBlockIdxs)     corruptBlock(locs.get(idx).getBlock());
    reportCorruptBlocks(dfs,parityFile,corruptBlockIdxs,blockSize);
    corruptFiles=RaidDFSUtil.getCorruptFiles(dfs);
    assertEquals("file not corrupted",1,corruptFiles.length);
    assertEquals("wrong file corrupted",corruptFiles[0],parityFile.toUri().getPath());
    cnode=RaidNode.createRaidNode(null,localConf);
    long start=System.currentTimeMillis();
    while (cnode.blockFixer.filesFixed() < 1 && System.currentTimeMillis() - start < 120000) {
      LOG.info("Test " + testName + " waiting for files to be fixed.");
      Thread.sleep(1000);
    }
    assertEquals("file not fixed",1,cnode.blockFixer.filesFixed());
    long checkCRC=getCRC(fileSys,parityFile);
    assertEquals("file not fixed",parityCRC,checkCRC);
  }
 catch (  Exception e) {
    LOG.info("Test " + testName + " Exception "+ e+ StringUtils.stringifyException(e));
    throw e;
  }
 finally {
    myTearDown();
  }
  LOG.info("Test " + testName + " completed.");
}
