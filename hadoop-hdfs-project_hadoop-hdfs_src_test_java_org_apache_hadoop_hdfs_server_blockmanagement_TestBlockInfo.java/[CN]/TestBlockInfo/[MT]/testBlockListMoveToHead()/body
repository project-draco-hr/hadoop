{
  LOG.info("BlockInfo moveToHead tests...");
  final int MAX_BLOCKS=10;
  DatanodeDescriptor dd=DFSTestUtil.getLocalDatanodeDescriptor();
  ArrayList<Block> blockList=new ArrayList<Block>(MAX_BLOCKS);
  ArrayList<BlockInfo> blockInfoList=new ArrayList<BlockInfo>();
  int headIndex;
  int curIndex;
  LOG.info("Building block list...");
  for (int i=0; i < MAX_BLOCKS; i++) {
    blockList.add(new Block(i,0,GenerationStamp.FIRST_VALID_STAMP));
    blockInfoList.add(new BlockInfo(blockList.get(i),3));
    dd.addBlock(blockInfoList.get(i));
    assertEquals("Find datanode should be 0",0,blockInfoList.get(i).findDatanode(dd));
  }
  LOG.info("Checking list length...");
  assertEquals("Length should be MAX_BLOCK",MAX_BLOCKS,dd.numBlocks());
  Iterator<BlockInfo> it=dd.getBlockIterator();
  int len=0;
  while (it.hasNext()) {
    it.next();
    len++;
  }
  assertEquals("There should be MAX_BLOCK blockInfo's",MAX_BLOCKS,len);
  headIndex=dd.getHead().findDatanode(dd);
  LOG.info("Moving each block to the head of the list...");
  for (int i=0; i < MAX_BLOCKS; i++) {
    curIndex=blockInfoList.get(i).findDatanode(dd);
    headIndex=dd.moveBlockToHead(blockInfoList.get(i),curIndex,headIndex);
    assertEquals("Block should be at the head of the list now.",blockInfoList.get(i),dd.getHead());
  }
  LOG.info("Moving head to the head...");
  BlockInfo temp=dd.getHead();
  curIndex=0;
  headIndex=0;
  dd.moveBlockToHead(temp,curIndex,headIndex);
  assertEquals("Moving head to the head of the list shopuld not change the list",temp,dd.getHead());
  LOG.info("Checking elements of the list...");
  temp=dd.getHead();
  assertNotNull("Head should not be null",temp);
  int c=MAX_BLOCKS - 1;
  while (temp != null) {
    assertEquals("Expected element is not on the list",blockInfoList.get(c--),temp);
    temp=temp.getNext(0);
  }
  LOG.info("Moving random blocks to the head of the list...");
  headIndex=dd.getHead().findDatanode(dd);
  Random rand=new Random();
  for (int i=0; i < MAX_BLOCKS; i++) {
    int j=rand.nextInt(MAX_BLOCKS);
    curIndex=blockInfoList.get(j).findDatanode(dd);
    headIndex=dd.moveBlockToHead(blockInfoList.get(j),curIndex,headIndex);
    assertEquals("Block should be at the head of the list now.",blockInfoList.get(j),dd.getHead());
  }
}
