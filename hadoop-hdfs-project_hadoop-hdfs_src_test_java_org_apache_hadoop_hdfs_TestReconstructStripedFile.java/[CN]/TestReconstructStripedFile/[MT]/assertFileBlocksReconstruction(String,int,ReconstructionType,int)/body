{
  if (toRecoverBlockNum < 1 || toRecoverBlockNum > parityBlkNum) {
    Assert.fail("toRecoverBlockNum should be between 1 ~ " + parityBlkNum);
  }
  assertTrue("File length must be positive.",fileLen > 0);
  Path file=new Path(fileName);
  final byte[] data=new byte[fileLen];
  Arrays.fill(data,(byte)1);
  DFSTestUtil.writeFile(fs,file,data);
  StripedFileTestUtil.waitBlockGroupsReported(fs,fileName);
  LocatedBlocks locatedBlocks=StripedFileTestUtil.getLocatedBlocks(file,fs);
  assertEquals(locatedBlocks.getFileLength(),fileLen);
  LocatedStripedBlock lastBlock=(LocatedStripedBlock)locatedBlocks.getLastLocatedBlock();
  DatanodeInfo[] storageInfos=lastBlock.getLocations();
  byte[] indices=lastBlock.getBlockIndices();
  BitSet bitset=new BitSet(dnNum);
  for (  DatanodeInfo storageInfo : storageInfos) {
    bitset.set(dnMap.get(storageInfo));
  }
  int[] dead=generateDeadDnIndices(type,toRecoverBlockNum,indices);
  LOG.info("Note: indices == " + Arrays.toString(indices) + ". Generate errors on datanodes: "+ Arrays.toString(dead));
  DatanodeInfo[] dataDNs=new DatanodeInfo[toRecoverBlockNum];
  int[] deadDnIndices=new int[toRecoverBlockNum];
  ExtendedBlock[] blocks=new ExtendedBlock[toRecoverBlockNum];
  File[] replicas=new File[toRecoverBlockNum];
  long[] replicaLengths=new long[toRecoverBlockNum];
  File[] metadatas=new File[toRecoverBlockNum];
  byte[][] replicaContents=new byte[toRecoverBlockNum][];
  Map<ExtendedBlock,DataNode> errorMap=new HashMap<>(dead.length);
  for (int i=0; i < toRecoverBlockNum; i++) {
    dataDNs[i]=storageInfos[dead[i]];
    deadDnIndices[i]=dnMap.get(dataDNs[i]);
    blocks[i]=StripedBlockUtil.constructInternalBlock(lastBlock.getBlock(),cellSize,dataBlkNum,indices[dead[i]]);
    errorMap.put(blocks[i],cluster.getDataNodes().get(deadDnIndices[i]));
    replicas[i]=cluster.getBlockFile(deadDnIndices[i],blocks[i]);
    replicaLengths[i]=replicas[i].length();
    metadatas[i]=cluster.getBlockMetadataFile(deadDnIndices[i],blocks[i]);
    assertEquals(replicaLengths[i],StripedBlockUtil.getInternalBlockLength(lastBlock.getBlockSize(),cellSize,dataBlkNum,indices[dead[i]]));
    assertTrue(metadatas[i].getName().endsWith(blocks[i].getGenerationStamp() + ".meta"));
    LOG.info("replica " + i + " locates in file: "+ replicas[i]);
    replicaContents[i]=DFSTestUtil.readFileAsBytes(replicas[i]);
  }
  int lastGroupDataLen=fileLen % (dataBlkNum * blockSize);
  int lastGroupNumBlk=lastGroupDataLen == 0 ? dataBlkNum : Math.min(dataBlkNum,((lastGroupDataLen - 1) / cellSize + 1));
  int groupSize=lastGroupNumBlk + parityBlkNum;
  int stoppedDN=generateErrors(errorMap,type);
  locatedBlocks=StripedFileTestUtil.getLocatedBlocks(file,fs);
  lastBlock=(LocatedStripedBlock)locatedBlocks.getLastLocatedBlock();
  storageInfos=lastBlock.getLocations();
  assertEquals(storageInfos.length,groupSize - stoppedDN);
  int[] targetDNs=new int[dnNum - groupSize];
  int n=0;
  for (int i=0; i < dnNum; i++) {
    if (!bitset.get(i)) {
      targetDNs[n++]=i;
    }
  }
  StripedFileTestUtil.waitForReconstructionFinished(file,fs,groupSize);
  targetDNs=sortTargetsByReplicas(blocks,targetDNs);
  for (int i=0; i < toRecoverBlockNum; i++) {
    File replicaAfterReconstruction=cluster.getBlockFile(targetDNs[i],blocks[i]);
    LOG.info("replica after reconstruction " + replicaAfterReconstruction);
    File metadataAfterReconstruction=cluster.getBlockMetadataFile(targetDNs[i],blocks[i]);
    assertEquals(replicaLengths[i],replicaAfterReconstruction.length());
    LOG.info("replica before " + replicas[i]);
    assertTrue(metadataAfterReconstruction.getName().endsWith(blocks[i].getGenerationStamp() + ".meta"));
    byte[] replicaContentAfterReconstruction=DFSTestUtil.readFileAsBytes(replicaAfterReconstruction);
    Assert.assertArrayEquals(replicaContents[i],replicaContentAfterReconstruction);
  }
}
