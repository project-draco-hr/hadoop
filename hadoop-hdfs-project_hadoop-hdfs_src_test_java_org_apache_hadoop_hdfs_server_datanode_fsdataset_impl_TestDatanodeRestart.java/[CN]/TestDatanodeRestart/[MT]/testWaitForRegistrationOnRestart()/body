{
  Configuration conf=new HdfsConfiguration();
  conf.setLong(DFSConfigKeys.DFS_DATANODE_BP_READY_TIMEOUT_KEY,5);
  conf.setInt(HdfsClientConfigKeys.DFS_CLIENT_SOCKET_TIMEOUT_KEY,5000);
  DataNodeFaultInjector dnFaultInjector=new DataNodeFaultInjector(){
    @Override public void noRegistration() throws IOException {
      throw new IOException("no reg found for testing");
    }
  }
;
  DataNodeFaultInjector oldDnInjector=DataNodeFaultInjector.get();
  DataNodeFaultInjector.set(dnFaultInjector);
  MiniDFSCluster cluster=null;
  long start=0;
  Path file=new Path("/reg");
  try {
    int numDNs=1;
    cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDNs).build();
    cluster.waitActive();
    start=System.currentTimeMillis();
    FileSystem fileSys=cluster.getFileSystem();
    try {
      DFSTestUtil.createFile(fileSys,file,10240L,(short)1,0L);
      throw new IOException("Did not fail!");
    }
 catch (    org.apache.hadoop.ipc.RemoteException e) {
      long elapsed=System.currentTimeMillis() - start;
      if (elapsed < 5000 || elapsed > 10000) {
        throw new IOException(elapsed + " seconds passed.",e);
      }
    }
    DataNodeFaultInjector.set(oldDnInjector);
    DFSTestUtil.createFile(fileSys,file,10240L,(short)1,0L);
    fileSys.append(file);
    DataNodeFaultInjector.set(dnFaultInjector);
    byte[] buffer=new byte[8];
    start=System.currentTimeMillis();
    try {
      fileSys.open(file).read(0L,buffer,0,1);
      throw new IOException("Did not fail!");
    }
 catch (    IOException e) {
      long elapsed=System.currentTimeMillis() - start;
      if (e.getMessage().contains("readBlockLength")) {
        throw new IOException("Failed, but with unexpected exception:",e);
      }
      if (elapsed < 5000 || elapsed > 10000) {
        throw new IOException(elapsed + " seconds passed.",e);
      }
    }
    DataNodeFaultInjector.set(oldDnInjector);
    fileSys.open(file).read(0L,buffer,0,1);
  }
  finally {
    DataNodeFaultInjector.set(oldDnInjector);
    if (cluster != null) {
      cluster.shutdown();
    }
  }
}
