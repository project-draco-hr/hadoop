{
  try {
    fc=FileContext.getFileContext(getConf());
  }
 catch (  IOException ioe) {
    System.err.println("Can not initialize the file system: " + ioe.getLocalizedMessage());
    return -1;
  }
  int hostHashCode=hostname.hashCode();
  boolean scriptSpecified=false;
  try {
    for (int i=0; i < args.length; i++) {
      if (args[i].equals("-scriptFile")) {
        if (loadScriptFile(args[++i]) == -1)         return -1;
        scriptSpecified=true;
      }
 else       if (args[i].equals("-readProbability")) {
        if (scriptSpecified) {
          System.err.println("Can't specify probabilities and use script.");
          return -1;
        }
        readProbs[0]=Double.parseDouble(args[++i]);
        if (readProbs[0] < 0 || readProbs[0] > 1) {
          System.err.println("The read probability must be [0, 1]: " + readProbs[0]);
          return -1;
        }
      }
 else       if (args[i].equals("-writeProbability")) {
        if (scriptSpecified) {
          System.err.println("Can't specify probabilities and use script.");
          return -1;
        }
        writeProbs[0]=Double.parseDouble(args[++i]);
        if (writeProbs[0] < 0 || writeProbs[0] > 1) {
          System.err.println("The write probability must be [0, 1]: " + writeProbs[0]);
          return -1;
        }
      }
 else       if (args[i].equals("-root")) {
        root=new Path(args[++i]);
      }
 else       if (args[i].equals("-maxDelayBetweenOps")) {
        maxDelayBetweenOps=Integer.parseInt(args[++i]);
      }
 else       if (args[i].equals("-numOfThreads")) {
        numOfThreads=Integer.parseInt(args[++i]);
        if (numOfThreads <= 0) {
          System.err.println("Number of threads must be positive: " + numOfThreads);
          return -1;
        }
      }
 else       if (args[i].equals("-startTime")) {
        startTime=Long.parseLong(args[++i]);
      }
 else       if (args[i].equals("-elapsedTime")) {
        if (scriptSpecified) {
          System.err.println("Can't specify elapsedTime and use script.");
          return -1;
        }
        durations[0]=Long.parseLong(args[++i]);
      }
 else       if (args[i].equals("-seed")) {
        r=new Random(Long.parseLong(args[++i]) + hostHashCode);
      }
 else {
        System.err.println(USAGE);
        ToolRunner.printGenericCommandUsage(System.err);
        return -1;
      }
    }
  }
 catch (  NumberFormatException e) {
    System.err.println("Illegal parameter: " + e.getLocalizedMessage());
    System.err.println(USAGE);
    return -1;
  }
  for (int i=0; i < readProbs.length; i++) {
    if (readProbs[i] + writeProbs[i] < 0 || readProbs[i] + writeProbs[i] > 1) {
      System.err.println("The sum of read probability and write probability must be [0, 1]: " + readProbs[i] + " "+ writeProbs[i]);
      return -1;
    }
  }
  if (r == null) {
    r=new Random(Time.now() + hostHashCode);
  }
  return initFileDirTables();
}
