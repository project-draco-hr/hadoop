{
  if (remoteUser == null) {
    LOG.warn("Received null remoteUser while authorizing access to getImage servlet");
    return false;
  }
  Set<String> validRequestors=new HashSet<String>();
  validRequestors.add(SecurityUtil.getServerPrincipal(conf.get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),NameNode.getAddress(conf).getHostName()));
  try {
    validRequestors.add(SecurityUtil.getServerPrincipal(conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),SecondaryNameNode.getHttpAddress(conf).getHostName()));
  }
 catch (  Exception e) {
    LOG.debug("SecondaryNameNode principal could not be added",e);
    String msg=String.format("SecondaryNameNode principal not considered, %s = %s, %s = %s",DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,conf.getTrimmed(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));
    LOG.warn(msg);
  }
  if (HAUtil.isHAEnabled(conf,DFSUtil.getNamenodeNameServiceId(conf))) {
    List<Configuration> otherNnConfs=HAUtil.getConfForOtherNodes(conf);
    for (    Configuration otherNnConf : otherNnConfs) {
      validRequestors.add(SecurityUtil.getServerPrincipal(otherNnConf.get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY),NameNode.getAddress(otherNnConf).getHostName()));
    }
  }
  for (  String v : validRequestors) {
    if (v != null && v.equals(remoteUser)) {
      LOG.info("ImageServlet allowing checkpointer: " + remoteUser);
      return true;
    }
  }
  if (HttpServer2.userHasAdministratorAccess(context,remoteUser)) {
    LOG.info("ImageServlet allowing administrator: " + remoteUser);
    return true;
  }
  LOG.info("ImageServlet rejecting: " + remoteUser);
  return false;
}
