{
  final AtomicReference<Call> deferredCall=new AtomicReference<Call>();
  final AtomicInteger count=new AtomicInteger();
  final Writable wait0=new IntWritable(0);
  final Writable wait1=new IntWritable(1);
  final Writable wait2=new IntWritable(2);
  Server server=new Server(ADDRESS,0,IntWritable.class,1,conf){
    @Override public Writable call(    RPC.RpcKind rpcKind,    String protocol,    Writable waitCount,    long receiveTime) throws IOException {
      Call call=Server.getCurCall().get();
      int wait=((IntWritable)waitCount).get();
      while (wait-- > 0) {
        call.postponeResponse();
        deferredCall.set(call);
      }
      return new IntWritable(count.getAndIncrement());
    }
  }
;
  server.start();
  final InetSocketAddress address=NetUtils.getConnectAddress(server);
  final Client client=new Client(IntWritable.class,conf);
  Call[] waitingCalls=new Call[2];
  assertEquals(0,((IntWritable)client.call(wait0,address)).get());
  assertEquals(1,((IntWritable)client.call(wait0,address)).get());
  final ExecutorService exec=Executors.newCachedThreadPool();
  Future<Integer> future1=exec.submit(new Callable<Integer>(){
    @Override public Integer call() throws IOException {
      return ((IntWritable)client.call(wait1,address)).get();
    }
  }
);
  try {
    future1.get(1,TimeUnit.SECONDS);
    Assert.fail("ipc shouldn't have responded");
  }
 catch (  TimeoutException te) {
  }
catch (  Exception ex) {
    Assert.fail("unexpected exception:" + ex);
  }
  assertFalse(future1.isDone());
  waitingCalls[0]=deferredCall.get();
  assertNotNull(waitingCalls[0]);
  assertEquals(3,((IntWritable)client.call(wait0,address)).get());
  Future<Integer> future2=exec.submit(new Callable<Integer>(){
    @Override public Integer call() throws IOException {
      return ((IntWritable)client.call(wait2,address)).get();
    }
  }
);
  try {
    future2.get(1,TimeUnit.SECONDS);
    Assert.fail("ipc shouldn't have responded");
  }
 catch (  TimeoutException te) {
  }
catch (  Exception ex) {
    Assert.fail("unexpected exception:" + ex);
  }
  assertFalse(future2.isDone());
  waitingCalls[1]=deferredCall.get();
  assertNotNull(waitingCalls[1]);
  assertFalse(future1.isDone());
  assertFalse(future2.isDone());
  waitingCalls[0].sendResponse();
  waitingCalls[1].sendResponse();
  try {
    int val=future1.get(1,TimeUnit.SECONDS);
    assertEquals(2,val);
  }
 catch (  Exception ex) {
    Assert.fail("unexpected exception:" + ex);
  }
  try {
    future2.get(1,TimeUnit.SECONDS);
    Assert.fail("ipc shouldn't have responded");
  }
 catch (  TimeoutException te) {
  }
catch (  Exception ex) {
    Assert.fail("unexpected exception:" + ex);
  }
  assertFalse(future2.isDone());
  assertEquals(5,((IntWritable)client.call(wait0,address)).get());
  waitingCalls[1].sendResponse();
  try {
    int val=future2.get(1,TimeUnit.SECONDS);
    assertEquals(4,val);
  }
 catch (  Exception ex) {
    Assert.fail("unexpected exception:" + ex);
  }
  server.stop();
}
