{
  LOG.info("in register: sid=" + bpRegistration.getStorageID() + ";SI="+ bpRegistration.storageInfo);
  String nsBuildVer=bpNamenode.versionRequest().getBuildVersion();
  String stBuildVer=Storage.getBuildVersion();
  if (!nsBuildVer.equals(stBuildVer)) {
    LOG.warn("Data-node and name-node Build versions must be " + "the same. Namenode build version: " + nsBuildVer + "Datanode "+ "build version: "+ stBuildVer);
    throw new IncorrectVersionException(nsBuildVer,"namenode",stBuildVer);
  }
  if (HdfsConstants.LAYOUT_VERSION != bpNSInfo.getLayoutVersion()) {
    LOG.warn("Data-node and name-node layout versions must be " + "the same. Expected: " + HdfsConstants.LAYOUT_VERSION + " actual "+ bpNSInfo.getLayoutVersion());
    throw new IncorrectVersionException(bpNSInfo.getLayoutVersion(),"namenode");
  }
  while (dn.shouldRun && shouldServiceRun) {
    try {
      bpRegistration=bpNamenode.registerDatanode(bpRegistration);
      LOG.info("bpReg after =" + bpRegistration.storageInfo + ";sid="+ bpRegistration.storageID+ ";name="+ bpRegistration.getName());
      break;
    }
 catch (    SocketTimeoutException e) {
      LOG.info("Problem connecting to server: " + nnAddr);
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ie) {
      }
    }
  }
  dn.bpRegistrationSucceeded(bpRegistration,blockPoolId);
  LOG.info("in register:" + ";bpDNR=" + bpRegistration.storageInfo);
  scheduleBlockReport(dn.initialBlockReportDelay);
}
