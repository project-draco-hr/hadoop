{
  if (cmd == null)   return true;
  final BlockCommand bcmd=cmd instanceof BlockCommand ? (BlockCommand)cmd : null;
switch (cmd.getAction()) {
case DatanodeProtocol.DNA_TRANSFER:
    dn.transferBlocks(bcmd.getBlockPoolId(),bcmd.getBlocks(),bcmd.getTargets());
  dn.metrics.incrBlocksReplicated(bcmd.getBlocks().length);
break;
case DatanodeProtocol.DNA_INVALIDATE:
Block toDelete[]=bcmd.getBlocks();
try {
if (dn.blockScanner != null) {
dn.blockScanner.deleteBlocks(bcmd.getBlockPoolId(),toDelete);
}
dn.data.invalidate(bcmd.getBlockPoolId(),toDelete);
}
 catch (IOException e) {
dn.checkDiskError();
throw e;
}
dn.metrics.incrBlocksRemoved(toDelete.length);
break;
case DatanodeProtocol.DNA_SHUTDOWN:
shouldServiceRun=false;
return false;
case DatanodeProtocol.DNA_REGISTER:
LOG.info("DatanodeCommand action: DNA_REGISTER");
if (dn.shouldRun && shouldServiceRun) {
register();
}
break;
case DatanodeProtocol.DNA_FINALIZE:
dn.storage.finalizeUpgrade(((FinalizeCommand)cmd).getBlockPoolId());
break;
case UpgradeCommand.UC_ACTION_START_UPGRADE:
processDistributedUpgradeCommand((UpgradeCommand)cmd);
break;
case DatanodeProtocol.DNA_RECOVERBLOCK:
dn.recoverBlocks(((BlockRecoveryCommand)cmd).getRecoveringBlocks());
break;
case DatanodeProtocol.DNA_ACCESSKEYUPDATE:
LOG.info("DatanodeCommand action: DNA_ACCESSKEYUPDATE");
if (dn.isBlockTokenEnabled) {
dn.blockPoolTokenSecretManager.setKeys(blockPoolId,((KeyUpdateCommand)cmd).getExportedKeys());
}
break;
case DatanodeProtocol.DNA_BALANCERBANDWIDTHUPDATE:
LOG.info("DatanodeCommand action: DNA_BALANCERBANDWIDTHUPDATE");
long bandwidth=((BalancerBandwidthCommand)cmd).getBalancerBandwidthValue();
if (bandwidth > 0) {
DataXceiverServer dxcs=(DataXceiverServer)dn.dataXceiverServer.getRunnable();
dxcs.balanceThrottler.setBandwidth(bandwidth);
}
break;
default :
LOG.warn("Unknown DatanodeCommand action: " + cmd.getAction());
}
return true;
}
