{
  InetSocketAddress ipcAddr=NetUtils.createSocketAddr(getConf().getTrimmed(DFS_DATANODE_IPC_ADDRESS_KEY));
  RPC.setProtocolEngine(getConf(),ClientDatanodeProtocolPB.class,ProtobufRpcEngine.class);
  ClientDatanodeProtocolServerSideTranslatorPB clientDatanodeProtocolXlator=new ClientDatanodeProtocolServerSideTranslatorPB(this);
  BlockingService service=ClientDatanodeProtocolService.newReflectiveBlockingService(clientDatanodeProtocolXlator);
  ipcServer=new RPC.Builder(getConf()).setProtocol(ClientDatanodeProtocolPB.class).setInstance(service).setBindAddress(ipcAddr.getHostName()).setPort(ipcAddr.getPort()).setNumHandlers(getConf().getInt(DFS_DATANODE_HANDLER_COUNT_KEY,DFS_DATANODE_HANDLER_COUNT_DEFAULT)).setVerbose(false).setSecretManager(blockPoolTokenSecretManager).build();
  ReconfigurationProtocolServerSideTranslatorPB reconfigurationProtocolXlator=new ReconfigurationProtocolServerSideTranslatorPB(this);
  service=ReconfigurationProtocolService.newReflectiveBlockingService(reconfigurationProtocolXlator);
  DFSUtil.addPBProtocol(getConf(),ReconfigurationProtocolPB.class,service,ipcServer);
  InterDatanodeProtocolServerSideTranslatorPB interDatanodeProtocolXlator=new InterDatanodeProtocolServerSideTranslatorPB(this);
  service=InterDatanodeProtocolService.newReflectiveBlockingService(interDatanodeProtocolXlator);
  DFSUtil.addPBProtocol(getConf(),InterDatanodeProtocolPB.class,service,ipcServer);
  TraceAdminProtocolServerSideTranslatorPB traceAdminXlator=new TraceAdminProtocolServerSideTranslatorPB(this);
  BlockingService traceAdminService=TraceAdminService.newReflectiveBlockingService(traceAdminXlator);
  DFSUtil.addPBProtocol(getConf(),TraceAdminProtocolPB.class,traceAdminService,ipcServer);
  LOG.info("Opened IPC server at " + ipcServer.getListenerAddress());
  if (getConf().getBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION,false)) {
    ipcServer.refreshServiceAcl(getConf(),new HDFSPolicyProvider());
  }
}
