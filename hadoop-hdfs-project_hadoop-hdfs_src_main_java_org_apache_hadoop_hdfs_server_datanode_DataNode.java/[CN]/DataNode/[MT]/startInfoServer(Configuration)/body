{
  InetSocketAddress infoSocAddr=DataNode.getInfoAddr(conf);
  String infoHost=infoSocAddr.getHostName();
  int tmpInfoPort=infoSocAddr.getPort();
  HttpServer.Builder builder=new HttpServer.Builder().setName("datanode").setBindAddress(infoHost).setPort(tmpInfoPort).setFindPort(tmpInfoPort == 0).setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN," ")));
  this.infoServer=(secureResources == null) ? builder.build() : builder.setConnector(secureResources.getListener()).build();
  LOG.info("Opened info server at " + infoHost + ":"+ tmpInfoPort);
  if (conf.getBoolean(DFS_HTTPS_ENABLE_KEY,false)) {
    boolean needClientAuth=conf.getBoolean(DFS_CLIENT_HTTPS_NEED_AUTH_KEY,DFS_CLIENT_HTTPS_NEED_AUTH_DEFAULT);
    InetSocketAddress secInfoSocAddr=NetUtils.createSocketAddr(conf.get(DFS_DATANODE_HTTPS_ADDRESS_KEY,infoHost + ":" + 0));
    Configuration sslConf=new HdfsConfiguration(false);
    sslConf.addResource(conf.get(DFSConfigKeys.DFS_SERVER_HTTPS_KEYSTORE_RESOURCE_KEY,"ssl-server.xml"));
    this.infoServer.addSslListener(secInfoSocAddr,sslConf,needClientAuth);
    if (LOG.isDebugEnabled()) {
      LOG.debug("Datanode listening for SSL on " + secInfoSocAddr);
    }
    infoSecurePort=secInfoSocAddr.getPort();
  }
  this.infoServer.addInternalServlet(null,"/streamFile/*",StreamFile.class);
  this.infoServer.addInternalServlet(null,"/getFileChecksum/*",FileChecksumServlets.GetServlet.class);
  this.infoServer.setAttribute("datanode",this);
  this.infoServer.setAttribute(JspHelper.CURRENT_CONF,conf);
  this.infoServer.addServlet(null,"/blockScannerReport",DataBlockScanner.Servlet.class);
  if (WebHdfsFileSystem.isEnabled(conf,LOG)) {
    infoServer.addJerseyResourcePackage(DatanodeWebHdfsMethods.class.getPackage().getName() + ";" + Param.class.getPackage().getName(),WebHdfsFileSystem.PATH_PREFIX + "/*");
  }
  this.infoServer.start();
}
