{
  HttpServer2.Builder builder=new HttpServer2.Builder().setName("datanode").setConf(conf).setACL(new AccessControlList(conf.get(DFS_ADMIN," ")));
  HttpConfig.Policy policy=DFSUtil.getHttpPolicy(conf);
  if (policy.isHttpEnabled()) {
    if (secureResources == null) {
      InetSocketAddress infoSocAddr=DataNode.getInfoAddr(conf);
      int port=infoSocAddr.getPort();
      builder.addEndpoint(URI.create("http://" + NetUtils.getHostPortString(infoSocAddr)));
      if (port == 0) {
        builder.setFindPort(true);
      }
    }
 else {
      builder.setConnector(secureResources.getListener());
    }
  }
  if (policy.isHttpsEnabled()) {
    InetSocketAddress secInfoSocAddr=NetUtils.createSocketAddr(conf.get(DFS_DATANODE_HTTPS_ADDRESS_KEY,DFS_DATANODE_HTTPS_ADDRESS_DEFAULT));
    Configuration sslConf=DFSUtil.loadSslConfiguration(conf);
    DFSUtil.loadSslConfToHttpServerBuilder(builder,sslConf);
    int port=secInfoSocAddr.getPort();
    if (port == 0) {
      builder.setFindPort(true);
    }
    builder.addEndpoint(URI.create("https://" + NetUtils.getHostPortString(secInfoSocAddr)));
  }
  this.infoServer=builder.build();
  this.infoServer.setAttribute("datanode",this);
  this.infoServer.setAttribute(JspHelper.CURRENT_CONF,conf);
  this.infoServer.addServlet(null,"/blockScannerReport",DataBlockScanner.Servlet.class);
  if (WebHdfsFileSystem.isEnabled(conf,LOG)) {
    infoServer.addJerseyResourcePackage(DatanodeWebHdfsMethods.class.getPackage().getName() + ";" + Param.class.getPackage().getName(),WebHdfsFileSystem.PATH_PREFIX + "/*");
  }
  this.infoServer.start();
  int connIdx=0;
  if (policy.isHttpEnabled()) {
    infoPort=infoServer.getConnectorAddress(connIdx++).getPort();
  }
  if (policy.isHttpsEnabled()) {
    infoSecurePort=infoServer.getConnectorAddress(connIdx).getPort();
  }
}
