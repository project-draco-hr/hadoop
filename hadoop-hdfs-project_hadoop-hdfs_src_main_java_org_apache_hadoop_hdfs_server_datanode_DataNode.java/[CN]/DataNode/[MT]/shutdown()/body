{
  stopMetricsLogger();
  if (plugins != null) {
    for (    ServicePlugin p : plugins) {
      try {
        p.stop();
        LOG.info("Stopped plug-in " + p);
      }
 catch (      Throwable t) {
        LOG.warn("ServicePlugin " + p + " could not be stopped",t);
      }
    }
  }
  List<BPOfferService> bposArray=(this.blockPoolManager == null) ? new ArrayList<BPOfferService>() : this.blockPoolManager.getAllNamenodeThreads();
  if (!shutdownForUpgrade) {
    shouldRun=false;
  }
  if (dataXceiverServer != null) {
    try {
      xserver.sendOOBToPeers();
      ((DataXceiverServer)this.dataXceiverServer.getRunnable()).kill();
      this.dataXceiverServer.interrupt();
    }
 catch (    Exception e) {
      LOG.trace("Exception interrupting DataXceiverServer: ",e);
    }
  }
  if (this.checkDiskErrorThread != null) {
    this.checkDiskErrorThread.interrupt();
  }
  long timeNotified=Time.monotonicNow();
  if (localDataXceiverServer != null) {
    ((DataXceiverServer)this.localDataXceiverServer.getRunnable()).kill();
    this.localDataXceiverServer.interrupt();
  }
  shutdownPeriodicScanners();
  shutdownDiskBalancer();
  if (httpServer != null) {
    try {
      httpServer.close();
    }
 catch (    Exception e) {
      LOG.warn("Exception shutting down DataNode HttpServer",e);
    }
  }
  if (pauseMonitor != null) {
    pauseMonitor.stop();
  }
  this.shouldRun=false;
  shutdownReconfigurationTask();
  if (this.threadGroup != null) {
    int sleepMs=2;
    while (true) {
      if (!this.shutdownForUpgrade || (this.shutdownForUpgrade && (Time.monotonicNow() - timeNotified > 1000))) {
        this.threadGroup.interrupt();
        break;
      }
      LOG.info("Waiting for threadgroup to exit, active threads is " + this.threadGroup.activeCount());
      if (this.threadGroup.activeCount() == 0) {
        break;
      }
      try {
        Thread.sleep(sleepMs);
      }
 catch (      InterruptedException e) {
      }
      sleepMs=sleepMs * 3 / 2;
      if (sleepMs > 200) {
        sleepMs=200;
      }
    }
    this.threadGroup=null;
  }
  if (this.dataXceiverServer != null) {
    try {
      this.dataXceiverServer.join();
    }
 catch (    InterruptedException ie) {
    }
  }
  if (this.localDataXceiverServer != null) {
    try {
      this.localDataXceiverServer.join();
    }
 catch (    InterruptedException ie) {
    }
  }
  if (metrics != null) {
    metrics.setDataNodeActiveXceiversCount(0);
  }
  if (ipcServer != null) {
    ipcServer.stop();
  }
  if (blockPoolManager != null) {
    try {
      this.blockPoolManager.shutDownAll(bposArray);
    }
 catch (    InterruptedException ie) {
      LOG.warn("Received exception in BlockPoolManager#shutDownAll: ",ie);
    }
  }
  if (storage != null) {
    try {
      this.storage.unlockAll();
    }
 catch (    IOException ie) {
      LOG.warn("Exception when unlocking storage: " + ie,ie);
    }
  }
  if (data != null) {
    data.shutdown();
  }
  if (metrics != null) {
    metrics.shutdown();
  }
  if (dataNodeInfoBeanName != null) {
    MBeans.unregister(dataNodeInfoBeanName);
    dataNodeInfoBeanName=null;
  }
  if (shortCircuitRegistry != null)   shortCircuitRegistry.shutdown();
  LOG.info("Shutdown complete.");
synchronized (this) {
    this.shouldRun=false;
    notifyAll();
  }
  tracer.close();
}
