{
  Configuration conf=getConf();
  conf.set(DFS_DATANODE_DATA_DIR_KEY,newVolumes);
  int numOldDataDirs=dataDirs.size();
  ChangedVolumes changedVolumes=parseChangedVolumes(newVolumes);
  StringBuilder errorMessageBuilder=new StringBuilder();
  List<String> effectiveVolumes=Lists.newArrayList();
  for (  StorageLocation sl : changedVolumes.unchangedLocations) {
    effectiveVolumes.add(sl.toString());
  }
  try {
    if (numOldDataDirs + changedVolumes.newLocations.size() - changedVolumes.deactivateLocations.size() <= 0) {
      throw new IOException("Attempt to remove all volumes.");
    }
    if (!changedVolumes.newLocations.isEmpty()) {
      LOG.info("Adding new volumes: " + Joiner.on(",").join(changedVolumes.newLocations));
      final List<NamespaceInfo> nsInfos=Lists.newArrayList();
      for (      BPOfferService bpos : blockPoolManager.getAllNamenodeThreads()) {
        nsInfos.add(bpos.getNamespaceInfo());
      }
      ExecutorService service=Executors.newFixedThreadPool(changedVolumes.newLocations.size());
      List<Future<IOException>> exceptions=Lists.newArrayList();
      for (      final StorageLocation location : changedVolumes.newLocations) {
        exceptions.add(service.submit(new Callable<IOException>(){
          @Override public IOException call(){
            try {
              data.addVolume(location,nsInfos);
            }
 catch (            IOException e) {
              return e;
            }
            return null;
          }
        }
));
      }
      for (int i=0; i < changedVolumes.newLocations.size(); i++) {
        StorageLocation volume=changedVolumes.newLocations.get(i);
        Future<IOException> ioExceptionFuture=exceptions.get(i);
        try {
          IOException ioe=ioExceptionFuture.get();
          if (ioe != null) {
            errorMessageBuilder.append(String.format("FAILED TO ADD: %s: %s%n",volume,ioe.getMessage()));
            LOG.error("Failed to add volume: " + volume,ioe);
          }
 else {
            effectiveVolumes.add(volume.toString());
            LOG.info("Successfully added volume: " + volume);
          }
        }
 catch (        Exception e) {
          errorMessageBuilder.append(String.format("FAILED to ADD: %s: %s%n",volume,e.toString()));
          LOG.error("Failed to add volume: " + volume,e);
        }
      }
    }
    try {
      removeVolumes(changedVolumes.deactivateLocations);
    }
 catch (    IOException e) {
      errorMessageBuilder.append(e.getMessage());
      LOG.error("Failed to remove volume: " + e.getMessage(),e);
    }
    if (errorMessageBuilder.length() > 0) {
      throw new IOException(errorMessageBuilder.toString());
    }
  }
  finally {
    conf.set(DFS_DATANODE_DATA_DIR_KEY,Joiner.on(",").join(effectiveVolumes));
    dataDirs=getStorageLocations(conf);
    triggerBlockReport(new BlockReportOptions.Factory().setIncremental(false).build());
  }
}
