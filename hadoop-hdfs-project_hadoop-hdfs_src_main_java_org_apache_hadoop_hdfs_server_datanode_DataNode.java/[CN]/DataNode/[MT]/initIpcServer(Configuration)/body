{
  InetSocketAddress ipcAddr=NetUtils.createSocketAddr(conf.get(DFS_DATANODE_IPC_ADDRESS_KEY));
  RPC.setProtocolEngine(conf,ClientDatanodeProtocolPB.class,ProtobufRpcEngine.class);
  ClientDatanodeProtocolServerSideTranslatorPB clientDatanodeProtocolXlator=new ClientDatanodeProtocolServerSideTranslatorPB(this);
  BlockingService service=ClientDatanodeProtocolService.newReflectiveBlockingService(clientDatanodeProtocolXlator);
  ipcServer=RPC.getServer(ClientDatanodeProtocolPB.class,service,ipcAddr.getHostName(),ipcAddr.getPort(),conf.getInt(DFS_DATANODE_HANDLER_COUNT_KEY,DFS_DATANODE_HANDLER_COUNT_DEFAULT),false,conf,blockPoolTokenSecretManager);
  InterDatanodeProtocolServerSideTranslatorPB interDatanodeProtocolXlator=new InterDatanodeProtocolServerSideTranslatorPB(this);
  service=InterDatanodeProtocolService.newReflectiveBlockingService(interDatanodeProtocolXlator);
  DFSUtil.addPBProtocol(conf,InterDatanodeProtocolPB.class,service,ipcServer);
  LOG.info("Opened IPC server at " + ipcServer.getListenerAddress());
  if (conf.getBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION,false)) {
    ipcServer.refreshServiceAcl(conf,new HDFSPolicyProvider());
  }
}
