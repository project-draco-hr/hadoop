{
  if (UserGroupInformation.isSecurityEnabled() && resources == null) {
    if (!conf.getBoolean("ignore.secure.ports.for.testing",false)) {
      throw new RuntimeException("Cannot start secure cluster without " + "privileged resources.");
    }
  }
  this.secureResources=resources;
  this.dataDirs=dataDirs;
  this.conf=conf;
  this.dnConf=new DNConf(conf);
  if (dnConf.maxLockedMemory > 0) {
    if (!NativeIO.POSIX.getCacheManipulator().verifyCanMlock()) {
      throw new RuntimeException(String.format("Cannot start datanode because the configured max locked memory" + " size (%s) is greater than zero and native code is not available.",DFS_DATANODE_MAX_LOCKED_MEMORY_KEY));
    }
    long ulimit=NativeIO.POSIX.getCacheManipulator().getMemlockLimit();
    if (dnConf.maxLockedMemory > ulimit) {
      throw new RuntimeException(String.format("Cannot start datanode because the configured max locked memory" + " size (%s) of %d bytes is more than the datanode's available" + " RLIMIT_MEMLOCK ulimit of %d bytes.",DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,dnConf.maxLockedMemory,ulimit));
    }
  }
  LOG.info("Starting DataNode with maxLockedMemory = " + dnConf.maxLockedMemory);
  storage=new DataStorage();
  registerMXBean();
  initDataXceiver(conf);
  startInfoServer(conf);
  pauseMonitor=new JvmPauseMonitor(conf);
  pauseMonitor.start();
  this.blockPoolTokenSecretManager=new BlockPoolTokenSecretManager();
  initIpcServer(conf);
  metrics=DataNodeMetrics.create(conf,getDisplayName());
  blockPoolManager=new BlockPoolManager(this);
  blockPoolManager.refreshNamenodes(conf);
  readaheadPool=ReadaheadPool.getInstance();
}
