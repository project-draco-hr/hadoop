{
  this.secureResources=resources;
synchronized (this) {
    this.dataDirs=dataDirectories;
  }
  this.dnConf=new DNConf(this);
  checkSecureConfig(dnConf,getConf(),resources);
  if (dnConf.maxLockedMemory > 0) {
    if (!NativeIO.POSIX.getCacheManipulator().verifyCanMlock()) {
      throw new RuntimeException(String.format("Cannot start datanode because the configured max locked memory" + " size (%s) is greater than zero and native code is not available.",DFS_DATANODE_MAX_LOCKED_MEMORY_KEY));
    }
    if (Path.WINDOWS) {
      NativeIO.Windows.extendWorkingSetSize(dnConf.maxLockedMemory);
    }
 else {
      long ulimit=NativeIO.POSIX.getCacheManipulator().getMemlockLimit();
      if (dnConf.maxLockedMemory > ulimit) {
        throw new RuntimeException(String.format("Cannot start datanode because the configured max locked memory" + " size (%s) of %d bytes is more than the datanode's available" + " RLIMIT_MEMLOCK ulimit of %d bytes.",DFS_DATANODE_MAX_LOCKED_MEMORY_KEY,dnConf.maxLockedMemory,ulimit));
      }
    }
  }
  LOG.info("Starting DataNode with maxLockedMemory = " + dnConf.maxLockedMemory);
  int volFailuresTolerated=dnConf.getVolFailuresTolerated();
  int volsConfigured=dnConf.getVolsConfigured();
  if (volFailuresTolerated < 0 || volFailuresTolerated >= volsConfigured) {
    throw new DiskErrorException("Invalid value configured for " + "dfs.datanode.failed.volumes.tolerated - " + volFailuresTolerated + ". Value configured is either less than 0 or >= "+ "to the number of configured volumes ("+ volsConfigured+ ").");
  }
  storage=new DataStorage();
  registerMXBean();
  initDataXceiver();
  startInfoServer();
  pauseMonitor=new JvmPauseMonitor();
  pauseMonitor.init(getConf());
  pauseMonitor.start();
  this.blockPoolTokenSecretManager=new BlockPoolTokenSecretManager();
  dnUserName=UserGroupInformation.getCurrentUser().getShortUserName();
  LOG.info("dnUserName = " + dnUserName);
  LOG.info("supergroup = " + supergroup);
  initIpcServer();
  metrics=DataNodeMetrics.create(getConf(),getDisplayName());
  metrics.getJvmMetrics().setPauseMonitor(pauseMonitor);
  ecWorker=new ErasureCodingWorker(getConf(),this);
  blockRecoveryWorker=new BlockRecoveryWorker(this);
  blockPoolManager=new BlockPoolManager(this);
  blockPoolManager.refreshNamenodes(getConf());
  readaheadPool=ReadaheadPool.getInstance();
  saslClient=new SaslDataTransferClient(dnConf.getConf(),dnConf.saslPropsResolver,dnConf.trustedChannelResolver);
  saslServer=new SaslDataTransferServer(dnConf,blockPoolTokenSecretManager);
  startMetricsLogger();
}
