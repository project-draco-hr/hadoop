{
  try {
    HAUtil.verifyAndSetConfiguration(conf);
  }
 catch (  YarnRuntimeException e) {
    fail("Should not throw any exceptions.");
  }
  assertEquals("Should be saved as Trimmed collection",StringUtils.getStringCollection(RM_NODE_IDS),HAUtil.getRMHAIds(conf));
  assertEquals("Should be saved as Trimmed string",RM1_NODE_ID,HAUtil.getRMHAId(conf));
  for (  String confKey : YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS) {
    assertEquals("RPC address not set for " + confKey,RM1_ADDRESS,conf.get(confKey));
  }
  conf.clear();
  conf.set(YarnConfiguration.RM_HA_IDS,RM1_NODE_ID);
  try {
    HAUtil.verifyAndSetConfiguration(conf);
  }
 catch (  YarnRuntimeException e) {
    assertEquals("YarnRuntimeException by verifyAndSetRMHAIds()",HAUtil.BAD_CONFIG_MESSAGE_PREFIX + HAUtil.getInvalidValueMessage(YarnConfiguration.RM_HA_IDS,conf.get(YarnConfiguration.RM_HA_IDS) + "\nHA mode requires atleast two RMs"),e.getMessage());
  }
  conf.clear();
  conf.set(YarnConfiguration.RM_HA_IDS,RM1_NODE_ID + "," + RM2_NODE_ID);
  for (  String confKey : YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS) {
    conf.set(HAUtil.addSuffix(confKey,RM1_NODE_ID),RM1_ADDRESS);
    conf.set(HAUtil.addSuffix(confKey,RM2_NODE_ID),RM2_ADDRESS);
  }
  try {
    HAUtil.verifyAndSetConfiguration(conf);
  }
 catch (  YarnRuntimeException e) {
    assertEquals("YarnRuntimeException by getRMId()",HAUtil.BAD_CONFIG_MESSAGE_PREFIX + HAUtil.getNeedToSetValueMessage(YarnConfiguration.RM_HA_ID),e.getMessage());
  }
  conf.clear();
  conf.set(YarnConfiguration.RM_HA_ID,RM_INVALID_NODE_ID);
  conf.set(YarnConfiguration.RM_HA_IDS,RM_INVALID_NODE_ID + "," + RM1_NODE_ID);
  for (  String confKey : YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS) {
    conf.set(confKey + RM_INVALID_NODE_ID,RM_INVALID_NODE_ID);
  }
  try {
    HAUtil.verifyAndSetConfiguration(conf);
  }
 catch (  YarnRuntimeException e) {
    assertEquals("YarnRuntimeException by addSuffix()",HAUtil.BAD_CONFIG_MESSAGE_PREFIX + HAUtil.getInvalidValueMessage(YarnConfiguration.RM_HA_ID,RM_INVALID_NODE_ID),e.getMessage());
  }
  conf.clear();
  conf.set(YarnConfiguration.RM_HA_ID,RM1_NODE_ID);
  conf.set(YarnConfiguration.RM_HA_IDS,RM1_NODE_ID + "," + RM2_NODE_ID);
  try {
    HAUtil.verifyAndSetConfiguration(conf);
    fail("Should throw YarnRuntimeException. by Configuration#set()");
  }
 catch (  YarnRuntimeException e) {
    String confKey=HAUtil.addSuffix(YarnConfiguration.RM_ADDRESS,RM1_NODE_ID);
    assertEquals("YarnRuntimeException by Configuration#set()",HAUtil.BAD_CONFIG_MESSAGE_PREFIX + HAUtil.getNeedToSetValueMessage(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME,RM1_NODE_ID) + " or " + confKey),e.getMessage());
  }
  conf.clear();
  conf.set(YarnConfiguration.RM_HA_IDS,RM2_NODE_ID + "," + RM3_NODE_ID);
  conf.set(YarnConfiguration.RM_HA_ID,RM1_NODE_ID_UNTRIMMED);
  for (  String confKey : YarnConfiguration.RM_SERVICES_ADDRESS_CONF_KEYS) {
    conf.set(HAUtil.addSuffix(confKey,RM1_NODE_ID),RM1_ADDRESS_UNTRIMMED);
    conf.set(HAUtil.addSuffix(confKey,RM2_NODE_ID),RM2_ADDRESS);
    conf.set(HAUtil.addSuffix(confKey,RM3_NODE_ID),RM3_ADDRESS);
  }
  try {
    HAUtil.verifyAndSetConfiguration(conf);
  }
 catch (  YarnRuntimeException e) {
    assertEquals("YarnRuntimeException by getRMId()'s validation",HAUtil.BAD_CONFIG_MESSAGE_PREFIX + HAUtil.getRMHAIdNeedToBeIncludedMessage("[rm2, rm3]",RM1_NODE_ID),e.getMessage());
  }
}
