{
  return new OpportunisticContainerAllocatorAMService(rmContext,null){
    @Override public RegisterApplicationMasterResponse registerApplicationMaster(    RegisterApplicationMasterRequest request) throws YarnException, IOException {
      RegisterApplicationMasterResponse resp=factory.newRecordInstance(RegisterApplicationMasterResponse.class);
      resp.setQueue("dummyQueue");
      return resp;
    }
    @Override public FinishApplicationMasterResponse finishApplicationMaster(    FinishApplicationMasterRequest request) throws YarnException, IOException {
      FinishApplicationMasterResponse resp=factory.newRecordInstance(FinishApplicationMasterResponse.class);
      resp.setIsUnregistered(false);
      return resp;
    }
    @Override public AllocateResponse allocate(    AllocateRequest request) throws YarnException, IOException {
      AllocateResponse response=factory.newRecordInstance(AllocateResponse.class);
      response.setNumClusterNodes(12345);
      response.setAllocatedContainers(Arrays.asList(c));
      return response;
    }
    @Override public RegisterDistributedSchedulingAMResponse registerApplicationMasterForDistributedScheduling(    RegisterApplicationMasterRequest request) throws YarnException, IOException {
      RegisterDistributedSchedulingAMResponse resp=factory.newRecordInstance(RegisterDistributedSchedulingAMResponse.class);
      resp.setContainerIdStart(54321L);
      resp.setMaxContainerResource(Resource.newInstance(4096,4));
      resp.setMinContainerResource(Resource.newInstance(1024,1));
      resp.setIncrContainerResource(Resource.newInstance(2048,2));
      return resp;
    }
    @Override public DistributedSchedulingAllocateResponse allocateForDistributedScheduling(    DistributedSchedulingAllocateRequest request) throws YarnException, IOException {
      List<ResourceRequest> askList=request.getAllocateRequest().getAskList();
      List<Container> allocatedContainers=request.getAllocatedContainers();
      Assert.assertEquals(1,allocatedContainers.size());
      Assert.assertEquals(ExecutionType.OPPORTUNISTIC,allocatedContainers.get(0).getExecutionType());
      Assert.assertEquals(1,askList.size());
      Assert.assertTrue(askList.get(0).getExecutionTypeRequest().getEnforceExecutionType());
      DistributedSchedulingAllocateResponse resp=factory.newRecordInstance(DistributedSchedulingAllocateResponse.class);
      resp.setNodesForScheduling(Arrays.asList(NodeId.newInstance("h1",1234)));
      return resp;
    }
  }
;
}
