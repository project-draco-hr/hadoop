{
  if (request.getAskList() != null && request.getAskList().size() > 0 && request.getReleaseList() != null && request.getReleaseList().size() > 0) {
    Assert.fail("The mock RM implementation does not support receiving " + "askList and releaseList in the same heartbeat");
  }
  String amrmToken=getAppIdentifier();
  ArrayList<Container> containerList=new ArrayList<Container>();
  if (request.getAskList() != null) {
    for (    ResourceRequest rr : request.getAskList()) {
      for (int i=0; i < rr.getNumContainers(); i++) {
        ContainerId containerId=ContainerId.newInstance(getApplicationAttemptId(1),containerIndex.incrementAndGet());
        Container container=Records.newRecord(Container.class);
        container.setId(containerId);
        container.setPriority(rr.getPriority());
        NodeId nodeId=NodeId.newInstance(!Strings.isEmpty(rr.getResourceName()) ? rr.getResourceName() : "dummy",1000);
        container.setNodeId(nodeId);
        container.setResource(rr.getCapability());
        containerList.add(container);
synchronized (applicationContainerIdMap) {
          Assert.assertTrue("The application id is Not registered before allocate(): " + amrmToken,applicationContainerIdMap.containsKey(amrmToken));
          List<ContainerId> ids=applicationContainerIdMap.get(amrmToken);
          ids.add(containerId);
          this.allocatedContainerMap.put(containerId,container);
        }
      }
    }
  }
  if (request.getReleaseList() != null && request.getReleaseList().size() > 0) {
    Log.info("Releasing containers: " + request.getReleaseList().size());
synchronized (applicationContainerIdMap) {
      Assert.assertTrue("The application id is not registered before allocate(): " + amrmToken,applicationContainerIdMap.containsKey(amrmToken));
      List<ContainerId> ids=applicationContainerIdMap.get(amrmToken);
      for (      ContainerId id : request.getReleaseList()) {
        boolean found=false;
        for (        ContainerId c : ids) {
          if (c.equals(id)) {
            found=true;
            break;
          }
        }
        Assert.assertTrue("ContainerId " + id + " being released is not valid for application: "+ conf.get("AMRMTOKEN"),found);
        ids.remove(id);
        ContainerId fakeContainerId=ContainerId.newInstance(getApplicationAttemptId(1),containerIndex.incrementAndGet());
        Container fakeContainer=allocatedContainerMap.get(id);
        fakeContainer.setId(fakeContainerId);
        containerList.add(fakeContainer);
      }
    }
  }
  Log.info("Allocating containers: " + containerList.size() + " for application attempt: "+ conf.get("AMRMTOKEN"));
  return AllocateResponse.newInstance(0,new ArrayList<ContainerStatus>(),containerList,new ArrayList<NodeReport>(),null,AMCommand.AM_RESYNC,1,null,new ArrayList<NMToken>(),new ArrayList<Container>(),new ArrayList<Container>());
}
