{
  CapacitySchedulerConfiguration conf=new CapacitySchedulerConfiguration();
  setupQueueConfiguration(conf);
  CapacityScheduler cs=Mockito.spy(new CapacityScheduler());
  cs.setConf(new YarnConfiguration());
  RMContext mockRmContext=Mockito.spy(new RMContextImpl(null,null,null,null,null,null,new RMContainerTokenSecretManager(conf),new NMTokenSecretManagerInRM(conf),new ClientToAMTokenSecretManagerInRM(),null));
  RMNodeLabelsManager nlm=mock(RMNodeLabelsManager.class);
  when(nlm.getQueueResource(any(String.class),any(Set.class),any(Resource.class))).thenAnswer(new Answer<Resource>(){
    @Override public Resource answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      return (Resource)args[2];
    }
  }
);
  when(nlm.getResourceByLabel(any(String.class),any(Resource.class))).thenAnswer(new Answer<Resource>(){
    @Override public Resource answer(    InvocationOnMock invocation) throws Throwable {
      Object[] args=invocation.getArguments();
      return (Resource)args[1];
    }
  }
);
  mockRmContext.setNodeLabelManager(nlm);
  cs.setRMContext(mockRmContext);
  try {
    cs.serviceInit(conf);
  }
 catch (  Exception e) {
    Assert.fail(e.getMessage());
  }
  when(mockRmContext.getScheduler()).thenReturn(cs);
  Resource r=Resource.newInstance(numContainers * 1024,numContainers);
  doReturn(r).when(cs).getClusterResource();
  return cs;
}
