{
  super.chooseFavouredNodes(src,numOfReplicas,favoredNodes,favoriteAndExcludedNodes,blocksize,maxNodesPerRack,results,avoidStaleNodes,storageTypes);
  if (results.size() < numOfReplicas) {
    for (int i=0; i < favoredNodes.size() && results.size() < numOfReplicas; i++) {
      DatanodeDescriptor favoredNode=favoredNodes.get(i);
      boolean chosenNode=isNodeChosen(results,favoredNode);
      if (chosenNode) {
        continue;
      }
      NetworkTopologyWithNodeGroup clusterMapNodeGroup=(NetworkTopologyWithNodeGroup)clusterMap;
      DatanodeStorageInfo target=null;
      String scope=clusterMapNodeGroup.getNodeGroup(favoredNode.getNetworkLocation());
      try {
        target=chooseRandom(scope,favoriteAndExcludedNodes,blocksize,maxNodesPerRack,results,avoidStaleNodes,storageTypes);
      }
 catch (      NotEnoughReplicasException e) {
        continue;
      }
      if (target == null) {
        LOG.warn("Could not find a target for file " + src + " within nodegroup of favored node "+ favoredNode);
        continue;
      }
      favoriteAndExcludedNodes.add(target.getDatanodeDescriptor());
    }
  }
}
