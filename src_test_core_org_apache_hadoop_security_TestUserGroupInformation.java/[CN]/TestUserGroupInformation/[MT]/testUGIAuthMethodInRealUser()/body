{
  final UserGroupInformation ugi=UserGroupInformation.getCurrentUser();
  UserGroupInformation proxyUgi=UserGroupInformation.createProxyUser("proxy",ugi);
  final AuthenticationMethod am=AuthenticationMethod.KERBEROS;
  ugi.setAuthenticationMethod(am);
  Assert.assertEquals(am,ugi.getAuthenticationMethod());
  Assert.assertEquals(null,proxyUgi.getAuthenticationMethod());
  proxyUgi.setAuthenticationMethod(AuthenticationMethod.PROXY);
  proxyUgi.doAs(new PrivilegedExceptionAction<Object>(){
    public Object run() throws IOException {
      Assert.assertEquals(AuthenticationMethod.PROXY,UserGroupInformation.getCurrentUser().getAuthenticationMethod());
      Assert.assertEquals(am,UserGroupInformation.getCurrentUser().getRealUser().getAuthenticationMethod());
      return null;
    }
  }
);
  UserGroupInformation proxyUgi2=UserGroupInformation.createProxyUser("proxy",ugi);
  proxyUgi2.setAuthenticationMethod(AuthenticationMethod.PROXY);
  Assert.assertEquals(proxyUgi,proxyUgi2);
  UserGroupInformation realugi=UserGroupInformation.getCurrentUser();
  UserGroupInformation proxyUgi3=UserGroupInformation.createProxyUser("proxyAnother",realugi);
  UserGroupInformation proxyUgi4=UserGroupInformation.createProxyUser("proxyAnother",realugi);
  Assert.assertEquals(proxyUgi3,proxyUgi4);
}
