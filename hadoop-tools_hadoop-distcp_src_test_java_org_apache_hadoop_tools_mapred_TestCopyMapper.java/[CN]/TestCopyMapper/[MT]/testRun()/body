{
  try {
    deleteState();
    createSourceData();
    FileSystem fs=cluster.getFileSystem();
    CopyMapper copyMapper=new CopyMapper();
    StubContext stubContext=new StubContext(getConfiguration(),null,0);
    Mapper<Text,FileStatus,Text,Text>.Context context=stubContext.getContext();
    copyMapper.setup(context);
    for (    Path path : pathList) {
      copyMapper.map(new Text(DistCpUtils.getRelativePath(new Path(SOURCE_PATH),path)),fs.getFileStatus(path),context);
    }
    for (    Path path : pathList) {
      final Path targetPath=new Path(path.toString().replaceAll(SOURCE_PATH,TARGET_PATH));
      Assert.assertTrue(fs.exists(targetPath));
      Assert.assertTrue(fs.isFile(targetPath) == fs.isFile(path));
      Assert.assertEquals(fs.getFileStatus(path).getReplication(),fs.getFileStatus(targetPath).getReplication());
      Assert.assertEquals(fs.getFileStatus(path).getBlockSize(),fs.getFileStatus(targetPath).getBlockSize());
      Assert.assertTrue(!fs.isFile(targetPath) || fs.getFileChecksum(targetPath).equals(fs.getFileChecksum(path)));
    }
    Assert.assertEquals(pathList.size(),stubContext.getReporter().getCounter(CopyMapper.Counter.COPY).getValue());
    Assert.assertEquals(nFiles * FILE_SIZE,stubContext.getReporter().getCounter(CopyMapper.Counter.BYTESCOPIED).getValue());
    testCopyingExistingFiles(fs,copyMapper,context);
    for (    Text value : stubContext.getWriter().values()) {
      Assert.assertTrue(value.toString() + " is not skipped",value.toString().startsWith("SKIP:"));
    }
  }
 catch (  Exception e) {
    LOG.error("Unexpected exception: ",e);
    Assert.assertTrue(false);
  }
}
