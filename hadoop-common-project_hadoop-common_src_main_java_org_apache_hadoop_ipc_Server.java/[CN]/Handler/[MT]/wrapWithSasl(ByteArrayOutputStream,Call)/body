{
  if (call.connection.saslServer != null) {
    byte[] token=response.toByteArray();
synchronized (call.connection.saslServer) {
      token=call.connection.saslServer.wrap(token,0,token.length);
    }
    if (LOG.isDebugEnabled())     LOG.debug("Adding saslServer wrapped token of size " + token.length + " as call response.");
    response.reset();
    RpcResponseHeaderProto saslHeader=RpcResponseHeaderProto.newBuilder().setCallId(AuthProtocol.SASL.callId).setStatus(RpcStatusProto.SUCCESS).build();
    RpcSaslProto saslMessage=RpcSaslProto.newBuilder().setState(SaslState.WRAP).setToken(ByteString.copyFrom(token,0,token.length)).build();
    RpcResponseMessageWrapper saslResponse=new RpcResponseMessageWrapper(saslHeader,saslMessage);
    DataOutputStream out=new DataOutputStream(response);
    out.writeInt(saslResponse.getLength());
    saslResponse.write(out);
  }
}
