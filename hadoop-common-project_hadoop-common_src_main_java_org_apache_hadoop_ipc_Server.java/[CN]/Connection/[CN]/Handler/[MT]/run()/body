{
  LOG.debug(Thread.currentThread().getName() + ": starting");
  SERVER.set(Server.this);
  while (running) {
    TraceScope traceScope=null;
    try {
      final Call call=callQueue.take();
      if (LOG.isDebugEnabled()) {
        LOG.debug(Thread.currentThread().getName() + ": " + call+ " for RpcKind "+ call.rpcKind);
      }
      CurCall.set(call);
      if (call.traceScope != null) {
        call.traceScope.reattach();
        traceScope=call.traceScope;
        traceScope.getSpan().addTimelineAnnotation("called");
      }
      CallerContext.setCurrent(call.callerContext);
      UserGroupInformation remoteUser=call.getRemoteUser();
      if (remoteUser != null) {
        remoteUser.doAs(call);
      }
 else {
        call.run();
      }
    }
 catch (    InterruptedException e) {
      if (running) {
        LOG.info(Thread.currentThread().getName() + " unexpectedly interrupted",e);
        if (traceScope != null) {
          traceScope.getSpan().addTimelineAnnotation("unexpectedly interrupted: " + StringUtils.stringifyException(e));
        }
      }
    }
catch (    Exception e) {
      LOG.info(Thread.currentThread().getName() + " caught an exception",e);
      if (traceScope != null) {
        traceScope.getSpan().addTimelineAnnotation("Exception: " + StringUtils.stringifyException(e));
      }
    }
 finally {
      CurCall.set(null);
      IOUtils.cleanup(LOG,traceScope);
    }
  }
  LOG.debug(Thread.currentThread().getName() + ": exiting");
}
