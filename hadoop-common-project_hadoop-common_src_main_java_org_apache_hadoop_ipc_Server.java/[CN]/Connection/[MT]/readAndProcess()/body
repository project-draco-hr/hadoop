{
  while (true) {
    int count=-1;
    if (dataLengthBuffer.remaining() > 0) {
      count=channelRead(channel,dataLengthBuffer);
      if (count < 0 || dataLengthBuffer.remaining() > 0)       return count;
    }
    if (!connectionHeaderRead) {
      if (connectionHeaderBuf == null) {
        connectionHeaderBuf=ByteBuffer.allocate(3);
      }
      count=channelRead(channel,connectionHeaderBuf);
      if (count < 0 || connectionHeaderBuf.remaining() > 0) {
        return count;
      }
      int version=connectionHeaderBuf.get(0);
      this.setServiceClass(connectionHeaderBuf.get(1));
      dataLengthBuffer.flip();
      if (HTTP_GET_BYTES.equals(dataLengthBuffer)) {
        setupHttpRequestOnIpcPortResponse();
        return -1;
      }
      if (!HEADER.equals(dataLengthBuffer) || version != CURRENT_VERSION) {
        LOG.warn("Incorrect header or version mismatch from " + hostAddress + ":"+ remotePort+ " got version "+ version+ " expected version "+ CURRENT_VERSION);
        setupBadVersionResponse(version);
        return -1;
      }
      authProtocol=initializeAuthContext(connectionHeaderBuf.get(2));
      dataLengthBuffer.clear();
      connectionHeaderBuf=null;
      connectionHeaderRead=true;
      continue;
    }
    if (data == null) {
      dataLengthBuffer.flip();
      dataLength=dataLengthBuffer.getInt();
      if ((dataLength == Client.PING_CALL_ID) && (!useWrap)) {
        dataLengthBuffer.clear();
        return 0;
      }
      if (dataLength < 0) {
        LOG.warn("Unexpected data length " + dataLength + "!! from "+ getHostAddress());
      }
      data=ByteBuffer.allocate(dataLength);
    }
    count=channelRead(channel,data);
    if (data.remaining() == 0) {
      dataLengthBuffer.clear();
      data.flip();
      boolean isHeaderRead=connectionContextRead;
      if (authProtocol == AuthProtocol.SASL) {
        if (skipInitialSaslHandshake) {
          authProtocol=AuthProtocol.NONE;
        }
 else {
          saslReadAndProcess(data.array());
        }
      }
 else {
        processOneRpc(data.array());
      }
      data=null;
      if (!isHeaderRead) {
        continue;
      }
    }
    return count;
  }
}
