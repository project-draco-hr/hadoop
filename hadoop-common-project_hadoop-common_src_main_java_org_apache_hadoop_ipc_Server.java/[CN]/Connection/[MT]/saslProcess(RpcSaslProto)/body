{
  if (saslContextEstablished) {
    throw new WrappedRpcServerException(RpcErrorCodeProto.FATAL_INVALID_RPC_HEADER,new SaslException("Negotiation is already complete"));
  }
  RpcSaslProto saslResponse=null;
  try {
    try {
      saslResponse=processSaslMessage(saslMessage);
    }
 catch (    IOException e) {
      rpcMetrics.incrAuthenticationFailures();
      AUDITLOG.warn(AUTH_FAILED_FOR + this.toString() + ":"+ attemptingUser+ " ("+ e.getLocalizedMessage()+ ")");
      throw (IOException)getTrueCause(e);
    }
    if (saslServer != null && saslServer.isComplete()) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("SASL server context established. Negotiated QoP is " + saslServer.getNegotiatedProperty(Sasl.QOP));
      }
      user=getAuthorizedUgi(saslServer.getAuthorizationID());
      if (LOG.isDebugEnabled()) {
        LOG.debug("SASL server successfully authenticated client: " + user);
      }
      rpcMetrics.incrAuthenticationSuccesses();
      AUDITLOG.info(AUTH_SUCCESSFUL_FOR + user);
      saslContextEstablished=true;
    }
  }
 catch (  WrappedRpcServerException wrse) {
    throw wrse;
  }
catch (  IOException ioe) {
    throw new WrappedRpcServerException(RpcErrorCodeProto.FATAL_UNAUTHORIZED,ioe);
  }
  if (saslResponse != null) {
    doSaslReply(saslResponse);
  }
  if (saslContextEstablished) {
    String qop=(String)saslServer.getNegotiatedProperty(Sasl.QOP);
    useWrap=(qop != null && !"auth".equalsIgnoreCase(qop));
  }
}
