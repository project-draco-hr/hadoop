{
  SaslServer saslServer=null;
  String hostname=null;
  String saslProtocol=null;
  CallbackHandler saslCallback=null;
switch (authMethod) {
case SIMPLE:
{
      throw new AccessControlException("Authorization (" + CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION + ") is enabled but authentication ("+ CommonConfigurationKeys.HADOOP_SECURITY_AUTHENTICATION+ ") is configured as simple. Please configure another method "+ "like kerberos or digest.");
    }
case DIGEST:
{
    if (secretManager == null) {
      throw new AccessControlException("Server is not configured to do DIGEST authentication.");
    }
    secretManager.checkAvailableForRead();
    hostname=SaslRpcServer.SASL_DEFAULT_REALM;
    saslCallback=new SaslDigestCallbackHandler(secretManager,this);
    break;
  }
case KERBEROS:
{
  String fullName=UserGroupInformation.getCurrentUser().getUserName();
  if (LOG.isDebugEnabled())   LOG.debug("Kerberos principal name is " + fullName);
  KerberosName krbName=new KerberosName(fullName);
  hostname=krbName.getHostName();
  if (hostname == null) {
    throw new AccessControlException("Kerberos principal name does NOT have the expected " + "hostname part: " + fullName);
  }
  saslProtocol=krbName.getServiceName();
  saslCallback=new SaslGssCallbackHandler();
  break;
}
default :
throw new AccessControlException("Server does not support SASL " + authMethod);
}
String mechanism=authMethod.getMechanismName();
saslServer=Sasl.createSaslServer(mechanism,saslProtocol,hostname,SaslRpcServer.SASL_PROPS,saslCallback);
if (saslServer == null) {
throw new AccessControlException("Unable to find SASL server implementation for " + mechanism);
}
if (LOG.isDebugEnabled()) {
LOG.debug("Created SASL server with mechanism = " + mechanism);
}
return saslServer;
}
