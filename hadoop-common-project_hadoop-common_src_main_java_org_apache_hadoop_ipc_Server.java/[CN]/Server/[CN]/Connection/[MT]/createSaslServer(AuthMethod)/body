{
  String hostname=null;
  String saslProtocol=null;
  CallbackHandler saslCallback=null;
switch (authMethod) {
case SIMPLE:
{
      return null;
    }
case DIGEST:
{
    secretManager.checkAvailableForRead();
    hostname=SaslRpcServer.SASL_DEFAULT_REALM;
    saslCallback=new SaslDigestCallbackHandler(secretManager,this);
    break;
  }
case KERBEROS:
{
  String fullName=UserGroupInformation.getCurrentUser().getUserName();
  if (LOG.isDebugEnabled())   LOG.debug("Kerberos principal name is " + fullName);
  KerberosName krbName=new KerberosName(fullName);
  hostname=krbName.getHostName();
  if (hostname == null) {
    throw new AccessControlException("Kerberos principal name does NOT have the expected " + "hostname part: " + fullName);
  }
  saslProtocol=krbName.getServiceName();
  saslCallback=new SaslGssCallbackHandler();
  break;
}
default :
throw new AccessControlException("Server does not support SASL " + authMethod);
}
return createSaslServer(authMethod.getMechanismName(),saslProtocol,hostname,saslCallback);
}
