{
  LOG.debug(getName() + ": starting");
  SERVER.set(Server.this);
  ByteArrayOutputStream buf=new ByteArrayOutputStream(INITIAL_RESP_BUF_SIZE);
  while (running) {
    try {
      final Call call=callQueue.take();
      if (LOG.isDebugEnabled()) {
        LOG.debug(getName() + ": has Call#" + call.callId+ "for RpcKind "+ call.rpcKind+ " from "+ call.connection);
      }
      String errorClass=null;
      String error=null;
      Writable value=null;
      CurCall.set(call);
      try {
        if (call.connection.user == null) {
          value=call(call.rpcKind,call.connection.protocolName,call.rpcRequest,call.timestamp);
        }
 else {
          value=call.connection.user.doAs(new PrivilegedExceptionAction<Writable>(){
            @Override public Writable run() throws Exception {
              return call(call.rpcKind,call.connection.protocolName,call.rpcRequest,call.timestamp);
            }
          }
);
        }
      }
 catch (      Throwable e) {
        String logMsg=getName() + ", call " + call+ ": error: "+ e;
        if (e instanceof RuntimeException || e instanceof Error) {
          LOG.warn(logMsg,e);
        }
 else         if (e instanceof StandbyException) {
          LOG.info(logMsg);
        }
 else {
          LOG.info(logMsg,e);
        }
        errorClass=e.getClass().getName();
        error=StringUtils.stringifyException(e);
        String exceptionHdr=errorClass + ": ";
        if (error.startsWith(exceptionHdr)) {
          error=error.substring(exceptionHdr.length());
        }
      }
      CurCall.set(null);
synchronized (call.connection.responseQueue) {
        setupResponse(buf,call,(error == null) ? RpcStatusProto.SUCCESS : RpcStatusProto.ERROR,value,errorClass,error);
        if (buf.size() > maxRespSize) {
          LOG.warn("Large response size " + buf.size() + " for call "+ call.toString());
          buf=new ByteArrayOutputStream(INITIAL_RESP_BUF_SIZE);
        }
        responder.doRespond(call);
      }
    }
 catch (    InterruptedException e) {
      if (running) {
        LOG.info(getName() + " unexpectedly interrupted",e);
      }
    }
catch (    Exception e) {
      LOG.info(getName() + " caught an exception",e);
    }
  }
  LOG.debug(getName() + ": exiting");
}
