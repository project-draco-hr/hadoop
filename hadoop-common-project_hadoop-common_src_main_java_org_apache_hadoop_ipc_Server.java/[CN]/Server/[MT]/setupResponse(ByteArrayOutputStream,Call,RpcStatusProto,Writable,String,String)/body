{
  responseBuf.reset();
  DataOutputStream out=new DataOutputStream(responseBuf);
  RpcResponseHeaderProto.Builder headerBuilder=RpcResponseHeaderProto.newBuilder();
  headerBuilder.setCallId(call.callId);
  headerBuilder.setStatus(status);
  headerBuilder.setServerIpcVersionNum(Server.CURRENT_VERSION);
  if (status == RpcStatusProto.SUCCESS) {
    RpcResponseHeaderProto header=headerBuilder.build();
    final int headerLen=header.getSerializedSize();
    int fullLength=CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;
    try {
      if (rv instanceof ProtobufRpcEngine.RpcWrapper) {
        ProtobufRpcEngine.RpcWrapper resWrapper=(ProtobufRpcEngine.RpcWrapper)rv;
        fullLength+=resWrapper.getLength();
        out.writeInt(fullLength);
        header.writeDelimitedTo(out);
        rv.write(out);
      }
 else {
        final DataOutputBuffer buf=new DataOutputBuffer();
        rv.write(buf);
        byte[] data=buf.getData();
        fullLength+=buf.getLength();
        out.writeInt(fullLength);
        header.writeDelimitedTo(out);
        out.write(data,0,buf.getLength());
      }
    }
 catch (    Throwable t) {
      LOG.warn("Error serializing call response for call " + call,t);
      setupResponse(responseBuf,call,RpcStatusProto.ERROR,null,t.getClass().getName(),StringUtils.stringifyException(t));
      return;
    }
  }
 else {
    headerBuilder.setExceptionClassName(errorClass);
    headerBuilder.setErrorMsg(error);
    RpcResponseHeaderProto header=headerBuilder.build();
    int headerLen=header.getSerializedSize();
    final int fullLength=CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;
    out.writeInt(fullLength);
    header.writeDelimitedTo(out);
  }
  if (call.connection.useWrap) {
    wrapWithSasl(responseBuf,call);
  }
  call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));
}
