{
  describe("Test recursive list operations");
  final Path scaleTestDir=getTestPath();
  final Path listDir=new Path(scaleTestDir,"lists");
  int scale=getConf().getInt(KEY_DIRECTORY_COUNT,DEFAULT_DIRECTORY_COUNT);
  int width=scale;
  int depth=scale;
  int files=scale;
  MetricDiff metadataRequests=new MetricDiff(fs,OBJECT_METADATA_REQUESTS);
  MetricDiff listRequests=new MetricDiff(fs,OBJECT_LIST_REQUESTS);
  MetricDiff listStatusCalls=new MetricDiff(fs,INVOCATION_LIST_FILES);
  MetricDiff getFileStatusCalls=new MetricDiff(fs,INVOCATION_GET_FILE_STATUS);
  NanoTimer createTimer=new NanoTimer();
  TreeScanResults created=createSubdirs(fs,listDir,depth,width,files,0);
  int emptyDepth=1 * scale;
  int emptyWidth=3 * scale;
  created.add(createSubdirs(fs,listDir,emptyDepth,emptyWidth,0,0,"empty","f-",""));
  createTimer.end("Time to create %s",created);
  LOG.info("Time per operation: {}",toHuman(createTimer.nanosPerOperation(created.totalCount())));
  printThenReset(LOG,metadataRequests,listRequests,listStatusCalls,getFileStatusCalls);
  try {
    MetricDiff treewalkMetadataRequests=new MetricDiff(fs,OBJECT_METADATA_REQUESTS);
    MetricDiff treewalkListRequests=new MetricDiff(fs,OBJECT_LIST_REQUESTS);
    MetricDiff treewalkListStatusCalls=new MetricDiff(fs,INVOCATION_LIST_FILES);
    MetricDiff treewalkGetFileStatusCalls=new MetricDiff(fs,INVOCATION_GET_FILE_STATUS);
    NanoTimer treeWalkTimer=new NanoTimer();
    TreeScanResults treewalkResults=treeWalk(fs,listDir);
    treeWalkTimer.end("List status via treewalk");
    print(LOG,treewalkMetadataRequests,treewalkListRequests,treewalkListStatusCalls,treewalkGetFileStatusCalls);
    assertEquals("Files found in listFiles(recursive=true) " + " created=" + created + " listed="+ treewalkResults,created.getFileCount(),treewalkResults.getFileCount());
    NanoTimer listFilesRecursiveTimer=new NanoTimer();
    TreeScanResults listFilesResults=new TreeScanResults(fs.listFiles(listDir,true));
    listFilesRecursiveTimer.end("listFiles(recursive=true) of %s",created);
    assertEquals("Files found in listFiles(recursive=true) " + " created=" + created + " listed="+ listFilesResults,created.getFileCount(),listFilesResults.getFileCount());
    treewalkListRequests.assertDiffEquals(listRequests);
    printThenReset(LOG,metadataRequests,listRequests,listStatusCalls,getFileStatusCalls);
    NanoTimer globStatusTimer=new NanoTimer();
    FileStatus[] globStatusFiles=fs.globStatus(listDir);
    globStatusTimer.end("Time to globStatus() %s",globStatusTimer);
    LOG.info("Time for glob status {} entries: {}",globStatusFiles.length,toHuman(createTimer.duration()));
    printThenReset(LOG,metadataRequests,listRequests,listStatusCalls,getFileStatusCalls);
  }
  finally {
    NanoTimer deleteTimer=new NanoTimer();
    fs.delete(listDir,true);
    deleteTimer.end("Deleting directory tree");
    printThenReset(LOG,metadataRequests,listRequests,listStatusCalls,getFileStatusCalls);
  }
}
