{
  if (Shell.WINDOWS) {
    BASE_TMP_PATH=new Path(new File("target").getAbsolutePath(),TestDefaultContainerExecutor.class.getSimpleName());
  }
  Path localDir=new Path(BASE_TMP_PATH,"localDir");
  List<String> localDirs=new ArrayList<String>();
  localDirs.add(localDir.toString());
  List<String> logDirs=new ArrayList<String>();
  Path logDir=new Path(BASE_TMP_PATH,"logDir");
  logDirs.add(logDir.toString());
  Configuration conf=new Configuration();
  conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY,"077");
  conf.set(YarnConfiguration.NM_LOCAL_DIRS,localDir.toString());
  conf.set(YarnConfiguration.NM_LOG_DIRS,logDir.toString());
  FileContext lfs=FileContext.getLocalFSFileContext(conf);
  DefaultContainerExecutor mockExec=spy(new DefaultContainerExecutor(lfs));
  mockExec.setConf(conf);
  doAnswer(new Answer(){
    @Override public Object answer(    InvocationOnMock invocationOnMock) throws Throwable {
      String diagnostics=(String)invocationOnMock.getArguments()[0];
      assertTrue("Invalid Diagnostics message: " + diagnostics,diagnostics.contains("No such file or directory"));
      return null;
    }
  }
).when(mockExec).logOutput(any(String.class));
  String appSubmitter="nobody";
  String appId="APP_ID";
  String containerId="CONTAINER_ID";
  Container container=mock(Container.class);
  ContainerId cId=mock(ContainerId.class);
  ContainerLaunchContext context=mock(ContainerLaunchContext.class);
  HashMap<String,String> env=new HashMap<String,String>();
  when(container.getContainerId()).thenReturn(cId);
  when(container.getLaunchContext()).thenReturn(context);
  try {
    doAnswer(new Answer(){
      @Override public Object answer(      InvocationOnMock invocationOnMock) throws Throwable {
        ContainerDiagnosticsUpdateEvent event=(ContainerDiagnosticsUpdateEvent)invocationOnMock.getArguments()[0];
        assertTrue("Invalid Diagnostics message: " + event.getDiagnosticsUpdate(),event.getDiagnosticsUpdate().contains("No such file or directory"));
        return null;
      }
    }
).when(container).handle(any(ContainerDiagnosticsUpdateEvent.class));
    when(cId.toString()).thenReturn(containerId);
    when(cId.getApplicationAttemptId()).thenReturn(ApplicationAttemptId.newInstance(ApplicationId.newInstance(0,1),0));
    when(context.getEnvironment()).thenReturn(env);
    mockExec.createUserLocalDirs(localDirs,appSubmitter);
    mockExec.createUserCacheDirs(localDirs,appSubmitter);
    mockExec.createAppDirs(localDirs,appSubmitter,appId);
    mockExec.createAppLogDirs(appId,logDirs,appSubmitter);
    Path scriptPath=new Path("file:///bin/echo");
    Path tokensPath=new Path("file:///dev/null");
    if (Shell.WINDOWS) {
      File tmp=new File(BASE_TMP_PATH.toString(),"test_echo.cmd");
      BufferedWriter output=new BufferedWriter(new FileWriter(tmp));
      output.write("Exit 1");
      output.write("Echo No such file or directory 1>&2");
      output.close();
      scriptPath=new Path(tmp.getAbsolutePath());
      tmp=new File(BASE_TMP_PATH.toString(),"tokens");
      tmp.createNewFile();
      tokensPath=new Path(tmp.getAbsolutePath());
    }
    Path workDir=localDir;
    Path pidFile=new Path(workDir,"pid.txt");
    mockExec.init();
    mockExec.activateContainer(cId,pidFile);
    int ret=mockExec.launchContainer(container,scriptPath,tokensPath,appSubmitter,appId,workDir,localDirs,localDirs);
    Assert.assertNotSame(0,ret);
  }
  finally {
    mockExec.deleteAsUser(appSubmitter,localDir);
    mockExec.deleteAsUser(appSubmitter,logDir);
  }
}
