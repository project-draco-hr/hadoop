{
  StateChangeRequestInfo req=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  String rootPath=YarnConfiguration.DEFAULT_ZK_RM_STATE_STORE_PARENT_PATH + "/" + ZKRMStateStore.ROOT_ZNODE_NAME;
  Configuration conf=createHARMConf("rm1,rm2","rm1",1234);
  conf.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  ResourceManager rm=new MockRM(conf);
  rm.start();
  rm.getRMContext().getRMAdminService().transitionToActive(req);
  List<ACL> acls=((ZKRMStateStore)rm.getRMContext().getStateStore()).getACL(rootPath);
  assertEquals(acls.size(),2);
  verifyZKACL("digest","localhost",Perms.CREATE | Perms.DELETE,acls);
  verifyZKACL("world","anyone",Perms.ALL ^ (Perms.CREATE | Perms.DELETE),acls);
  rm.close();
  conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,false);
  rm=new MockRM(conf);
  rm.start();
  rm.getRMContext().getRMAdminService().transitionToActive(req);
  acls=((ZKRMStateStore)rm.getRMContext().getStateStore()).getACL(rootPath);
  assertEquals(acls.size(),1);
  verifyZKACL("world","anyone",Perms.ALL,acls);
  rm.close();
  conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
  rm=new MockRM(conf);
  rm.start();
  rm.getRMContext().getRMAdminService().transitionToActive(req);
  acls=((ZKRMStateStore)rm.getRMContext().getStateStore()).getACL(rootPath);
  assertEquals(acls.size(),2);
  verifyZKACL("digest","localhost",Perms.CREATE | Perms.DELETE,acls);
  verifyZKACL("world","anyone",Perms.ALL ^ (Perms.CREATE | Perms.DELETE),acls);
  rm.close();
}
