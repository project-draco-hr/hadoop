{
  StateChangeRequestInfo req=new StateChangeRequestInfo(HAServiceProtocol.RequestSource.REQUEST_BY_USER);
  Configuration conf1=createHARMConf("rm1,rm2","rm1",1234);
  conf1.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  ResourceManager rm1=new MockRM(conf1);
  rm1.start();
  rm1.getRMContext().getRMAdminService().transitionToActive(req);
  assertEquals("RM with ZKStore didn't start",Service.STATE.STARTED,rm1.getServiceState());
  assertEquals("RM should be Active",HAServiceProtocol.HAServiceState.ACTIVE,rm1.getRMContext().getRMAdminService().getServiceStatus().getState());
  Configuration conf2=createHARMConf("rm1,rm2","rm2",5678);
  conf2.setBoolean(YarnConfiguration.AUTO_FAILOVER_ENABLED,false);
  ResourceManager rm2=new MockRM(conf2);
  rm2.start();
  rm2.getRMContext().getRMAdminService().transitionToActive(req);
  assertEquals("RM with ZKStore didn't start",Service.STATE.STARTED,rm2.getServiceState());
  assertEquals("RM should be Active",HAServiceProtocol.HAServiceState.ACTIVE,rm2.getRMContext().getRMAdminService().getServiceStatus().getState());
  for (int i=0; i < ZK_TIMEOUT_MS / 50; i++) {
    if (HAServiceProtocol.HAServiceState.ACTIVE == rm1.getRMContext().getRMAdminService().getServiceStatus().getState()) {
      Thread.sleep(100);
    }
  }
  assertEquals("RM should have been fenced",HAServiceProtocol.HAServiceState.STANDBY,rm1.getRMContext().getRMAdminService().getServiceStatus().getState());
  assertEquals("RM should be Active",HAServiceProtocol.HAServiceState.ACTIVE,rm2.getRMContext().getRMAdminService().getServiceStatus().getState());
}
