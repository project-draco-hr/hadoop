{
  TestZKRMStateStoreTester zkTester=new TestZKRMStateStoreTester();
  RMStateStore store=zkTester.getRMStateStore();
  store.updateFencedState();
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  long submitTime=System.currentTimeMillis();
  long startTime=submitTime + 1000;
  RMApp mockApp=mock(RMApp.class);
  ApplicationSubmissionContext context=new ApplicationSubmissionContextPBImpl();
  when(mockApp.getSubmitTime()).thenReturn(submitTime);
  when(mockApp.getStartTime()).thenReturn(startTime);
  when(mockApp.getApplicationSubmissionContext()).thenReturn(context);
  when(mockApp.getUser()).thenReturn("test");
  store.storeNewApplication(mockApp);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  ClientToAMTokenSecretManagerInRM clientToAMTokenMgr=new ClientToAMTokenSecretManagerInRM();
  ApplicationAttemptId attemptId=ConverterUtils.toApplicationAttemptId("appattempt_1234567894321_0001_000001");
  SecretKey clientTokenMasterKey=clientToAMTokenMgr.createMasterKey(attemptId);
  RMAppAttemptMetrics mockRmAppAttemptMetrics=mock(RMAppAttemptMetrics.class);
  Container container=new ContainerPBImpl();
  container.setId(ConverterUtils.toContainerId("container_1234567891234_0001_01_000001"));
  RMAppAttempt mockAttempt=mock(RMAppAttempt.class);
  when(mockAttempt.getAppAttemptId()).thenReturn(attemptId);
  when(mockAttempt.getMasterContainer()).thenReturn(container);
  when(mockAttempt.getClientTokenMasterKey()).thenReturn(clientTokenMasterKey);
  when(mockAttempt.getRMAppAttemptMetrics()).thenReturn(mockRmAppAttemptMetrics);
  when(mockRmAppAttemptMetrics.getAggregateAppResourceUsage()).thenReturn(new AggregateAppResourceUsage(0,0));
  store.storeNewApplicationAttempt(mockAttempt);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  long finishTime=submitTime + 1000;
  ApplicationAttemptStateData newAttemptState=ApplicationAttemptStateData.newInstance(attemptId,container,store.getCredentialsFromAppAttempt(mockAttempt),startTime,RMAppAttemptState.FINISHED,"testUrl","test",FinalApplicationStatus.SUCCEEDED,100,finishTime,0,0);
  store.updateApplicationAttemptState(newAttemptState);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  ApplicationStateData appState=ApplicationStateData.newInstance(submitTime,startTime,context,"test");
  store.updateApplicationState(appState);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  store.removeApplication(mockApp);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  RMDelegationTokenIdentifier dtId1=new RMDelegationTokenIdentifier(new Text("owner1"),new Text("renewer1"),new Text("realuser1"));
  Long renewDate1=new Long(System.currentTimeMillis());
  int sequenceNumber=1111;
  store.storeRMDelegationTokenAndSequenceNumber(dtId1,renewDate1,sequenceNumber);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  store.updateRMDelegationTokenAndSequenceNumber(dtId1,renewDate1,sequenceNumber);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  store.removeRMDelegationToken(dtId1,sequenceNumber);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  DelegationKey key=new DelegationKey(1234,4321,"keyBytes".getBytes());
  store.storeRMDTMasterKey(key);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  store.removeRMDTMasterKey(key);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  store.storeOrUpdateAMRMTokenSecretManager(null,false);
  assertEquals("RMStateStore should have been in fenced state",true,store.isFencedState());
  store.close();
}
