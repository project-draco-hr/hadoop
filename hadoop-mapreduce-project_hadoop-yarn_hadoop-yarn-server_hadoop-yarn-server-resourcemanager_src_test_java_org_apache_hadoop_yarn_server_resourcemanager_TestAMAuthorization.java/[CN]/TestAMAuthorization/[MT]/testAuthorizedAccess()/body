{
  MyContainerManager containerManager=new MyContainerManager();
  MockRM rm=new MockRMWithAMS(containerManager);
  rm.start();
  MockNM nm1=rm.registerNode("localhost:1234",5120);
  Map<ApplicationAccessType,String> acls=new HashMap<ApplicationAccessType,String>(2);
  acls.put(ApplicationAccessType.VIEW_APP,"*");
  RMApp app=rm.submitApp(1024,"appname","appuser",acls);
  nm1.nodeHeartbeat(true);
  int waitCount=0;
  while (containerManager.containerEnv == null && waitCount++ < 20) {
    LOG.info("Waiting for AM Launch to happen..");
    Thread.sleep(1000);
  }
  Assert.assertNotNull(containerManager.containerEnv);
  RMAppAttempt attempt=app.getCurrentAppAttempt();
  ApplicationAttemptId applicationAttemptId=attempt.getAppAttemptId();
  waitForLaunchedState(attempt);
  final Configuration conf=rm.getConfig();
  final YarnRPC rpc=YarnRPC.create(conf);
  final String serviceAddr=conf.get(YarnConfiguration.RM_SCHEDULER_ADDRESS,YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS);
  UserGroupInformation currentUser=UserGroupInformation.createRemoteUser(applicationAttemptId.toString());
  String tokenURLEncodedStr=containerManager.containerEnv.get(ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);
  LOG.info("AppMasterToken is " + tokenURLEncodedStr);
  Token<? extends TokenIdentifier> token=new Token<TokenIdentifier>();
  token.decodeFromUrlString(tokenURLEncodedStr);
  currentUser.addToken(token);
  AMRMProtocol client=currentUser.doAs(new PrivilegedAction<AMRMProtocol>(){
    @Override public AMRMProtocol run(){
      return (AMRMProtocol)rpc.getProxy(AMRMProtocol.class,NetUtils.createSocketAddr(serviceAddr),conf);
    }
  }
);
  RegisterApplicationMasterRequest request=Records.newRecord(RegisterApplicationMasterRequest.class);
  request.setApplicationAttemptId(applicationAttemptId);
  RegisterApplicationMasterResponse response=client.registerApplicationMaster(request);
  Assert.assertEquals("Register response has bad ACLs","*",response.getApplicationACLs().get(ApplicationAccessType.VIEW_APP));
  rm.stop();
}
