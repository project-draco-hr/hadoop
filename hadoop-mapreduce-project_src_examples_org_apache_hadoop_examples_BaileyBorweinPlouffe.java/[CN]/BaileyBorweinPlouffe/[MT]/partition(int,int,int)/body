{
  final int[] parts=new int[nParts];
  final long total=workload(offset,size);
  final int remainder=offset % 4;
  parts[0]=offset;
  for (int i=1; i < nParts; i++) {
    final long target=offset + i * (total / nParts) + i * (total % nParts) / nParts;
    int low=parts[i - 1];
    int high=offset + size;
    for (; high > low + 4; ) {
      final int mid=(high + low - 2 * remainder) / 8 * 4 + remainder;
      final long midvalue=workload(mid);
      if (midvalue == target)       high=low=mid;
 else       if (midvalue > target)       high=mid;
 else       low=mid;
    }
    parts[i]=high == low ? high : workload(high) - target > target - workload(low) ? low : high;
  }
  return parts;
}
