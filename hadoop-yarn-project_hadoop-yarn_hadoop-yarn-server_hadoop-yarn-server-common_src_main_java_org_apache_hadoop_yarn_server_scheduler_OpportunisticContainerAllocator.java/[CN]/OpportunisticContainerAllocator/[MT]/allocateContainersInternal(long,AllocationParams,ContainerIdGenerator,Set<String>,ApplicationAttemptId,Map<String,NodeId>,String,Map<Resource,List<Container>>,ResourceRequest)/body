{
  int toAllocate=anyAsk.getNumContainers() - (containers.isEmpty() ? 0 : containers.get(anyAsk.getCapability()).size());
  List<NodeId> nodesForScheduling=new ArrayList<>();
  for (  Entry<String,NodeId> nodeEntry : allNodes.entrySet()) {
    if (blacklist.contains(nodeEntry.getKey())) {
      continue;
    }
    nodesForScheduling.add(nodeEntry.getValue());
  }
  int numAllocated=0;
  int nextNodeToSchedule=0;
  for (int numCont=0; numCont < toAllocate; numCont++) {
    nextNodeToSchedule++;
    nextNodeToSchedule%=nodesForScheduling.size();
    NodeId nodeId=nodesForScheduling.get(nextNodeToSchedule);
    Container container=buildContainer(rmIdentifier,appParams,idCounter,anyAsk,id,userName,nodeId);
    List<Container> cList=containers.get(anyAsk.getCapability());
    if (cList == null) {
      cList=new ArrayList<>();
      containers.put(anyAsk.getCapability(),cList);
    }
    cList.add(container);
    numAllocated++;
    LOG.info("Allocated [" + container.getId() + "] as opportunistic.");
  }
  LOG.info("Allocated " + numAllocated + " opportunistic containers.");
}
