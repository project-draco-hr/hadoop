{
  DFSClientFaultInjector.get().startFetchFromDatanode();
  int refetchToken=1;
  int refetchEncryptionKey=1;
  final int len=(int)(endInBlk - startInBlk + 1);
  checkReadPortions(offsets,lengths,len);
  while (true) {
    LocatedBlock block=getBlockAt(blockStartOffset);
    BlockReader reader=null;
    try {
      DFSClientFaultInjector.get().fetchFromDatanodeException();
      reader=getBlockReader(block,startInBlk,len,datanode.addr,datanode.storageType,datanode.info);
      for (int i=0; i < offsets.length; i++) {
        int nread=reader.readAll(buf,offsets[i],lengths[i]);
        updateReadStatistics(readStatistics,nread,reader);
        if (nread != lengths[i]) {
          throw new IOException("truncated return from reader.read(): " + "excpected " + lengths[i] + ", got "+ nread);
        }
      }
      DFSClientFaultInjector.get().readFromDatanodeDelay();
      return;
    }
 catch (    ChecksumException e) {
      String msg="fetchBlockByteRange(). Got a checksum exception for " + src + " at "+ block.getBlock()+ ":"+ e.getPos()+ " from "+ datanode.info;
      DFSClient.LOG.warn(msg);
      addIntoCorruptedBlockMap(block.getBlock(),datanode.info,corruptedBlockMap);
      addToDeadNodes(datanode.info);
      throw new IOException(msg);
    }
catch (    IOException e) {
      if (e instanceof InvalidEncryptionKeyException && refetchEncryptionKey > 0) {
        DFSClient.LOG.info("Will fetch a new encryption key and retry, " + "encryption key was invalid when connecting to " + datanode.addr + " : "+ e);
        refetchEncryptionKey--;
        dfsClient.clearDataEncryptionKey();
      }
 else       if (refetchToken > 0 && tokenRefetchNeeded(e,datanode.addr)) {
        refetchToken--;
        try {
          fetchBlockAt(block.getStartOffset());
        }
 catch (        IOException fbae) {
        }
      }
 else {
        String msg="Failed to connect to " + datanode.addr + " for file "+ src+ " for block "+ block.getBlock()+ ":"+ e;
        DFSClient.LOG.warn("Connection failure: " + msg,e);
        addToDeadNodes(datanode.info);
        throw new IOException(msg);
      }
    }
 finally {
      if (reader != null) {
        reader.close();
      }
    }
  }
}
