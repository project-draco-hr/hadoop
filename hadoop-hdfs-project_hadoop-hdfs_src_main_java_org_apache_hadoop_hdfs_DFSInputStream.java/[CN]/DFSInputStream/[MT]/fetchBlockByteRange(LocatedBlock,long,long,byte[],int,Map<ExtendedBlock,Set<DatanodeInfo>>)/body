{
  int refetchToken=1;
  int refetchEncryptionKey=1;
  while (true) {
    block=getBlockAt(block.getStartOffset(),false);
    DNAddrPair retval=chooseDataNode(block);
    DatanodeInfo chosenNode=retval.info;
    InetSocketAddress targetAddr=retval.addr;
    BlockReader reader=null;
    try {
      Token<BlockTokenIdentifier> blockToken=block.getBlockToken();
      int len=(int)(end - start + 1);
      reader=getBlockReader(targetAddr,chosenNode,src,block.getBlock(),blockToken,start,len,buffersize,verifyChecksum,dfsClient.clientName);
      int nread=reader.readAll(buf,offset,len);
      if (nread != len) {
        throw new IOException("truncated return from reader.read(): " + "excpected " + len + ", got "+ nread);
      }
      return;
    }
 catch (    ChecksumException e) {
      DFSClient.LOG.warn("fetchBlockByteRange(). Got a checksum exception for " + src + " at "+ block.getBlock()+ ":"+ e.getPos()+ " from "+ chosenNode);
      addIntoCorruptedBlockMap(block.getBlock(),chosenNode,corruptedBlockMap);
    }
catch (    AccessControlException ex) {
      DFSClient.LOG.warn("Short circuit access failed " + ex);
      dfsClient.disableLegacyBlockReaderLocal();
      continue;
    }
catch (    IOException e) {
      if (e instanceof InvalidEncryptionKeyException && refetchEncryptionKey > 0) {
        DFSClient.LOG.info("Will fetch a new encryption key and retry, " + "encryption key was invalid when connecting to " + targetAddr + " : "+ e);
        refetchEncryptionKey--;
        dfsClient.clearDataEncryptionKey();
      }
 else       if (e instanceof InvalidBlockTokenException && refetchToken > 0) {
        DFSClient.LOG.info("Will get a new access token and retry, " + "access token was invalid when connecting to " + targetAddr + " : "+ e);
        refetchToken--;
        fetchBlockAt(block.getStartOffset());
        continue;
      }
 else {
        DFSClient.LOG.warn("Failed to connect to " + targetAddr + " for file "+ src+ " for block "+ block.getBlock()+ ":"+ e);
        if (DFSClient.LOG.isDebugEnabled()) {
          DFSClient.LOG.debug("Connection failure ",e);
        }
      }
    }
 finally {
      if (reader != null) {
        reader.close(peerCache,fileInputStreamCache);
      }
    }
    addToDeadNodes(chosenNode);
  }
}
