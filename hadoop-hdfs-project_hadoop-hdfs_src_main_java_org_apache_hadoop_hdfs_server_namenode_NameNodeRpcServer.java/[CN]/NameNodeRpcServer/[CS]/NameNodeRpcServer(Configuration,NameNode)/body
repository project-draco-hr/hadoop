{
  this.nn=nn;
  this.namesystem=nn.getNamesystem();
  this.retryCache=namesystem.getRetryCache();
  this.metrics=NameNode.getNameNodeMetrics();
  int handlerCount=conf.getInt(DFS_NAMENODE_HANDLER_COUNT_KEY,DFS_NAMENODE_HANDLER_COUNT_DEFAULT);
  RPC.setProtocolEngine(conf,ClientNamenodeProtocolPB.class,ProtobufRpcEngine.class);
  ClientNamenodeProtocolServerSideTranslatorPB clientProtocolServerTranslator=new ClientNamenodeProtocolServerSideTranslatorPB(this);
  BlockingService clientNNPbService=ClientNamenodeProtocol.newReflectiveBlockingService(clientProtocolServerTranslator);
  DatanodeProtocolServerSideTranslatorPB dnProtoPbTranslator=new DatanodeProtocolServerSideTranslatorPB(this);
  BlockingService dnProtoPbService=DatanodeProtocolService.newReflectiveBlockingService(dnProtoPbTranslator);
  NamenodeProtocolServerSideTranslatorPB namenodeProtocolXlator=new NamenodeProtocolServerSideTranslatorPB(this);
  BlockingService NNPbService=NamenodeProtocolService.newReflectiveBlockingService(namenodeProtocolXlator);
  RefreshAuthorizationPolicyProtocolServerSideTranslatorPB refreshAuthPolicyXlator=new RefreshAuthorizationPolicyProtocolServerSideTranslatorPB(this);
  BlockingService refreshAuthService=RefreshAuthorizationPolicyProtocolService.newReflectiveBlockingService(refreshAuthPolicyXlator);
  RefreshUserMappingsProtocolServerSideTranslatorPB refreshUserMappingXlator=new RefreshUserMappingsProtocolServerSideTranslatorPB(this);
  BlockingService refreshUserMappingService=RefreshUserMappingsProtocolService.newReflectiveBlockingService(refreshUserMappingXlator);
  RefreshCallQueueProtocolServerSideTranslatorPB refreshCallQueueXlator=new RefreshCallQueueProtocolServerSideTranslatorPB(this);
  BlockingService refreshCallQueueService=RefreshCallQueueProtocolService.newReflectiveBlockingService(refreshCallQueueXlator);
  GenericRefreshProtocolServerSideTranslatorPB genericRefreshXlator=new GenericRefreshProtocolServerSideTranslatorPB(this);
  BlockingService genericRefreshService=GenericRefreshProtocolService.newReflectiveBlockingService(genericRefreshXlator);
  GetUserMappingsProtocolServerSideTranslatorPB getUserMappingXlator=new GetUserMappingsProtocolServerSideTranslatorPB(this);
  BlockingService getUserMappingService=GetUserMappingsProtocolService.newReflectiveBlockingService(getUserMappingXlator);
  HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator=new HAServiceProtocolServerSideTranslatorPB(this);
  BlockingService haPbService=HAServiceProtocolService.newReflectiveBlockingService(haServiceProtocolXlator);
  TraceAdminProtocolServerSideTranslatorPB traceAdminXlator=new TraceAdminProtocolServerSideTranslatorPB(this);
  BlockingService traceAdminService=TraceAdminService.newReflectiveBlockingService(traceAdminXlator);
  WritableRpcEngine.ensureInitialized();
  InetSocketAddress serviceRpcAddr=nn.getServiceRpcServerAddress(conf);
  if (serviceRpcAddr != null) {
    String bindHost=nn.getServiceRpcServerBindHost(conf);
    if (bindHost == null) {
      bindHost=serviceRpcAddr.getHostName();
    }
    LOG.info("Service RPC server is binding to " + bindHost + ":"+ serviceRpcAddr.getPort());
    int serviceHandlerCount=conf.getInt(DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY,DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT);
    serviceRpcServer=new RPC.Builder(conf).setProtocol(org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB.class).setInstance(clientNNPbService).setBindAddress(bindHost).setPort(serviceRpcAddr.getPort()).setNumHandlers(serviceHandlerCount).setVerbose(false).setSecretManager(namesystem.getDelegationTokenSecretManager()).build();
    DFSUtil.addPBProtocol(conf,HAServiceProtocolPB.class,haPbService,serviceRpcServer);
    DFSUtil.addPBProtocol(conf,NamenodeProtocolPB.class,NNPbService,serviceRpcServer);
    DFSUtil.addPBProtocol(conf,DatanodeProtocolPB.class,dnProtoPbService,serviceRpcServer);
    DFSUtil.addPBProtocol(conf,RefreshAuthorizationPolicyProtocolPB.class,refreshAuthService,serviceRpcServer);
    DFSUtil.addPBProtocol(conf,RefreshUserMappingsProtocolPB.class,refreshUserMappingService,serviceRpcServer);
    DFSUtil.addPBProtocol(conf,RefreshCallQueueProtocolPB.class,refreshCallQueueService,serviceRpcServer);
    DFSUtil.addPBProtocol(conf,GenericRefreshProtocolPB.class,genericRefreshService,serviceRpcServer);
    DFSUtil.addPBProtocol(conf,GetUserMappingsProtocolPB.class,getUserMappingService,serviceRpcServer);
    DFSUtil.addPBProtocol(conf,TraceAdminProtocolPB.class,traceAdminService,serviceRpcServer);
    InetSocketAddress listenAddr=serviceRpcServer.getListenerAddress();
    serviceRPCAddress=new InetSocketAddress(serviceRpcAddr.getHostName(),listenAddr.getPort());
    nn.setRpcServiceServerAddress(conf,serviceRPCAddress);
  }
 else {
    serviceRpcServer=null;
    serviceRPCAddress=null;
  }
  InetSocketAddress lifelineRpcAddr=nn.getLifelineRpcServerAddress(conf);
  if (lifelineRpcAddr != null) {
    RPC.setProtocolEngine(conf,HAServiceProtocolPB.class,ProtobufRpcEngine.class);
    String bindHost=nn.getLifelineRpcServerBindHost(conf);
    if (bindHost == null) {
      bindHost=lifelineRpcAddr.getHostName();
    }
    LOG.info("Lifeline RPC server is binding to {}:{}",bindHost,lifelineRpcAddr.getPort());
    int lifelineHandlerCount=conf.getInt(DFS_NAMENODE_LIFELINE_HANDLER_COUNT_KEY,DFS_NAMENODE_LIFELINE_HANDLER_COUNT_DEFAULT);
    lifelineRpcServer=new RPC.Builder(conf).setProtocol(HAServiceProtocolPB.class).setInstance(haPbService).setBindAddress(bindHost).setPort(lifelineRpcAddr.getPort()).setNumHandlers(lifelineHandlerCount).setVerbose(false).setSecretManager(namesystem.getDelegationTokenSecretManager()).build();
    InetSocketAddress listenAddr=lifelineRpcServer.getListenerAddress();
    lifelineRPCAddress=new InetSocketAddress(lifelineRpcAddr.getHostName(),listenAddr.getPort());
    nn.setRpcLifelineServerAddress(conf,lifelineRPCAddress);
  }
 else {
    lifelineRpcServer=null;
    lifelineRPCAddress=null;
  }
  InetSocketAddress rpcAddr=nn.getRpcServerAddress(conf);
  String bindHost=nn.getRpcServerBindHost(conf);
  if (bindHost == null) {
    bindHost=rpcAddr.getHostName();
  }
  LOG.info("RPC server is binding to " + bindHost + ":"+ rpcAddr.getPort());
  clientRpcServer=new RPC.Builder(conf).setProtocol(org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolPB.class).setInstance(clientNNPbService).setBindAddress(bindHost).setPort(rpcAddr.getPort()).setNumHandlers(handlerCount).setVerbose(false).setSecretManager(namesystem.getDelegationTokenSecretManager()).build();
  DFSUtil.addPBProtocol(conf,HAServiceProtocolPB.class,haPbService,clientRpcServer);
  DFSUtil.addPBProtocol(conf,NamenodeProtocolPB.class,NNPbService,clientRpcServer);
  DFSUtil.addPBProtocol(conf,DatanodeProtocolPB.class,dnProtoPbService,clientRpcServer);
  DFSUtil.addPBProtocol(conf,RefreshAuthorizationPolicyProtocolPB.class,refreshAuthService,clientRpcServer);
  DFSUtil.addPBProtocol(conf,RefreshUserMappingsProtocolPB.class,refreshUserMappingService,clientRpcServer);
  DFSUtil.addPBProtocol(conf,RefreshCallQueueProtocolPB.class,refreshCallQueueService,clientRpcServer);
  DFSUtil.addPBProtocol(conf,GenericRefreshProtocolPB.class,genericRefreshService,clientRpcServer);
  DFSUtil.addPBProtocol(conf,GetUserMappingsProtocolPB.class,getUserMappingService,clientRpcServer);
  DFSUtil.addPBProtocol(conf,TraceAdminProtocolPB.class,traceAdminService,clientRpcServer);
  if (serviceAuthEnabled=conf.getBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION,false)) {
    clientRpcServer.refreshServiceAcl(conf,new HDFSPolicyProvider());
    if (serviceRpcServer != null) {
      serviceRpcServer.refreshServiceAcl(conf,new HDFSPolicyProvider());
    }
    if (lifelineRpcServer != null) {
      lifelineRpcServer.refreshServiceAcl(conf,new HDFSPolicyProvider());
    }
  }
  InetSocketAddress listenAddr=clientRpcServer.getListenerAddress();
  clientRpcAddress=new InetSocketAddress(rpcAddr.getHostName(),listenAddr.getPort());
  nn.setRpcServerAddress(conf,clientRpcAddress);
  minimumDataNodeVersion=conf.get(DFSConfigKeys.DFS_NAMENODE_MIN_SUPPORTED_DATANODE_VERSION_KEY,DFSConfigKeys.DFS_NAMENODE_MIN_SUPPORTED_DATANODE_VERSION_DEFAULT);
  clientRpcServer.addTerseExceptions(SafeModeException.class,FileNotFoundException.class,HadoopIllegalArgumentException.class,FileAlreadyExistsException.class,InvalidPathException.class,ParentNotDirectoryException.class,UnresolvedLinkException.class,AlreadyBeingCreatedException.class,QuotaExceededException.class,RecoveryInProgressException.class,AccessControlException.class,InvalidToken.class,LeaseExpiredException.class,NSQuotaExceededException.class,DSQuotaExceededException.class,QuotaByStorageTypeExceededException.class,AclException.class,FSLimitException.PathComponentTooLongException.class,FSLimitException.MaxDirectoryItemsExceededException.class,UnresolvedPathException.class);
  clientRpcServer.setTracer(nn.tracer);
  if (serviceRpcServer != null) {
    serviceRpcServer.setTracer(nn.tracer);
  }
  if (lifelineRpcServer != null) {
    lifelineRpcServer.setTracer(nn.tracer);
  }
}
