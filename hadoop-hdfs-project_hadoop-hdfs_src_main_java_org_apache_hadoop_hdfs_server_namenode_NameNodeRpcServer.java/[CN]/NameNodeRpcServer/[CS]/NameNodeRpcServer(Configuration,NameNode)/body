{
  this.nn=nn;
  this.namesystem=nn.getNamesystem();
  this.metrics=NameNode.getNameNodeMetrics();
  int handlerCount=conf.getInt(DFS_DATANODE_HANDLER_COUNT_KEY,DFS_DATANODE_HANDLER_COUNT_DEFAULT);
  InetSocketAddress socAddr=nn.getRpcServerAddress(conf);
  ClientNamenodeProtocolServerSideTranslatorR23 clientProtocolServerTranslator=new ClientNamenodeProtocolServerSideTranslatorR23(this);
  InetSocketAddress dnSocketAddr=nn.getServiceRpcServerAddress(conf);
  if (dnSocketAddr != null) {
    int serviceHandlerCount=conf.getInt(DFS_NAMENODE_SERVICE_HANDLER_COUNT_KEY,DFS_NAMENODE_SERVICE_HANDLER_COUNT_DEFAULT);
    this.serviceRpcServer=RPC.getServer(org.apache.hadoop.hdfs.protocolR23Compatible.ClientNamenodeWireProtocol.class,clientProtocolServerTranslator,dnSocketAddr.getHostName(),dnSocketAddr.getPort(),serviceHandlerCount,false,conf,namesystem.getDelegationTokenSecretManager());
    this.serviceRpcServer.addProtocol(DatanodeProtocol.class,this);
    this.serviceRpcServer.addProtocol(NamenodeProtocol.class,this);
    this.serviceRpcServer.addProtocol(RefreshAuthorizationPolicyProtocol.class,this);
    this.serviceRpcServer.addProtocol(RefreshUserMappingsProtocol.class,this);
    this.serviceRpcServer.addProtocol(GetUserMappingsProtocol.class,this);
    this.serviceRpcServer.addProtocol(HAServiceProtocol.class,this);
    this.serviceRPCAddress=this.serviceRpcServer.getListenerAddress();
    nn.setRpcServiceServerAddress(conf,serviceRPCAddress);
  }
 else {
    serviceRpcServer=null;
    serviceRPCAddress=null;
  }
  this.clientRpcServer=RPC.getServer(org.apache.hadoop.hdfs.protocolR23Compatible.ClientNamenodeWireProtocol.class,clientProtocolServerTranslator,socAddr.getHostName(),socAddr.getPort(),handlerCount,false,conf,namesystem.getDelegationTokenSecretManager());
  this.clientRpcServer.addProtocol(DatanodeProtocol.class,this);
  this.clientRpcServer.addProtocol(NamenodeProtocol.class,this);
  this.clientRpcServer.addProtocol(RefreshAuthorizationPolicyProtocol.class,this);
  this.clientRpcServer.addProtocol(RefreshUserMappingsProtocol.class,this);
  this.clientRpcServer.addProtocol(GetUserMappingsProtocol.class,this);
  if (serviceAuthEnabled=conf.getBoolean(CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION,false)) {
    this.clientRpcServer.refreshServiceAcl(conf,new HDFSPolicyProvider());
    if (this.serviceRpcServer != null) {
      this.serviceRpcServer.refreshServiceAcl(conf,new HDFSPolicyProvider());
    }
  }
  this.clientRpcAddress=this.clientRpcServer.getListenerAddress();
  nn.setRpcServerAddress(conf,clientRpcAddress);
}
