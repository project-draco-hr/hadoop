{
  Configuration conf=getConfig();
  createEnsembleProvider();
  int sessionTimeout=conf.getInt(KEY_REGISTRY_ZK_SESSION_TIMEOUT,DEFAULT_ZK_SESSION_TIMEOUT);
  int connectionTimeout=conf.getInt(KEY_REGISTRY_ZK_CONNECTION_TIMEOUT,DEFAULT_ZK_CONNECTION_TIMEOUT);
  int retryTimes=conf.getInt(KEY_REGISTRY_ZK_RETRY_TIMES,DEFAULT_ZK_RETRY_TIMES);
  int retryInterval=conf.getInt(KEY_REGISTRY_ZK_RETRY_INTERVAL,DEFAULT_ZK_RETRY_INTERVAL);
  int retryCeiling=conf.getInt(KEY_REGISTRY_ZK_RETRY_CEILING,DEFAULT_ZK_RETRY_CEILING);
  if (LOG.isDebugEnabled()) {
    LOG.debug("Creating CuratorService with connection {}",connectionDescription);
  }
  CuratorFramework framework;
synchronized (CuratorService.class) {
    CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder();
    builder.ensembleProvider(ensembleProvider).connectionTimeoutMs(connectionTimeout).sessionTimeoutMs(sessionTimeout).retryPolicy(new BoundedExponentialBackoffRetry(retryInterval,retryCeiling,retryTimes));
    registrySecurity.applySecurityEnvironment(builder);
    securityConnectionDiagnostics=buildSecurityDiagnostics();
    framework=builder.build();
    framework.start();
  }
  return framework;
}
