{
  ByteBuffer assembled=ByteBuffer.allocate(BLK_GROUP_STRIPE_NUM * FULL_STRIPE_SIZE);
  for (  int bgSize : blockGroupSizes) {
    LocatedStripedBlock blockGroup=createDummyLocatedBlock(bgSize);
    byte[][] internalBlkBufs=createInternalBlkBuffers(bgSize);
    for (    int brStart : byteRangeStartOffsets) {
      for (      int brSize : byteRangeSizes) {
        if (brStart + brSize > bgSize) {
          continue;
        }
        AlignedStripe[] stripes=divideByteRangeIntoStripes(EC_POLICY,CELLSIZE,blockGroup,brStart,brStart + brSize - 1,assembled);
        for (        AlignedStripe stripe : stripes) {
          for (int i=0; i < DATA_BLK_NUM; i++) {
            StripingChunk chunk=stripe.chunks[i];
            if (chunk == null || chunk.state != StripingChunk.REQUESTED) {
              continue;
            }
            int done=0;
            int len;
            for (            ByteBuffer slice : chunk.getChunkBuffer().getSlices()) {
              len=slice.remaining();
              slice.put(internalBlkBufs[i],(int)stripe.getOffsetInBlock() + done,len);
              done+=len;
            }
          }
        }
        for (int i=0; i < brSize; i++) {
          if (hashIntToByte(brStart + i) != assembled.get(i)) {
            System.out.println("Oops");
          }
          assertEquals("Byte at " + (brStart + i) + " should be the same",hashIntToByte(brStart + i),assembled.get(i));
        }
      }
    }
  }
}
