{
  String remotePrincipal=request.getUserPrincipal().getName();
  String remoteShortName=request.getRemoteUser();
  if (remotePrincipal == null) {
    LOG.warn("Received null remoteUser while authorizing access to " + "GetJournalEditServlet");
    return false;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("Validating request made by " + remotePrincipal + " / "+ remoteShortName+ ". This user is: "+ UserGroupInformation.getLoginUser());
  }
  Set<String> validRequestors=new HashSet<String>();
  validRequestors.addAll(DFSUtil.getAllNnPrincipals(conf));
  try {
    validRequestors.add(SecurityUtil.getServerPrincipal(conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),SecondaryNameNode.getHttpAddress(conf).getHostName()));
  }
 catch (  Exception e) {
    LOG.debug("SecondaryNameNode principal could not be added",e);
    String msg=String.format("SecondaryNameNode principal not considered, %s = %s, %s = %s",DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY,conf.get(DFSConfigKeys.DFS_SECONDARY_NAMENODE_KERBEROS_PRINCIPAL_KEY),DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,conf.get(DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_KEY,DFSConfigKeys.DFS_NAMENODE_SECONDARY_HTTP_ADDRESS_DEFAULT));
    LOG.warn(msg);
  }
  for (  String v : validRequestors) {
    if (LOG.isDebugEnabled())     LOG.debug("isValidRequestor is comparing to valid requestor: " + v);
    if (v != null && v.equals(remotePrincipal)) {
      if (LOG.isDebugEnabled())       LOG.debug("isValidRequestor is allowing: " + remotePrincipal);
      return true;
    }
  }
  if (remoteShortName.equals(UserGroupInformation.getLoginUser().getShortUserName())) {
    if (LOG.isDebugEnabled())     LOG.debug("isValidRequestor is allowing other JN principal: " + remotePrincipal);
    return true;
  }
  if (LOG.isDebugEnabled())   LOG.debug("isValidRequestor is rejecting: " + remotePrincipal);
  return false;
}
