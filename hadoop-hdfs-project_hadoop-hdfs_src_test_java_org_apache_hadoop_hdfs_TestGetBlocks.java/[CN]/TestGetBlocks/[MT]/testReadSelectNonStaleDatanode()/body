{
  HdfsConfiguration conf=new HdfsConfiguration();
  conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_READ_KEY,true);
  long staleInterval=30 * 1000 * 60;
  conf.setLong(DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY,staleInterval);
  MiniDFSCluster cluster=new MiniDFSCluster.Builder(conf).numDataNodes(numDatanodes).racks(racks).build();
  cluster.waitActive();
  InetSocketAddress addr=new InetSocketAddress("localhost",cluster.getNameNodePort());
  DFSClient client=new DFSClient(addr,conf);
  List<DatanodeDescriptor> nodeInfoList=cluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getDatanodeListForReport(DatanodeReportType.LIVE);
  assertEquals("Unexpected number of datanodes",numDatanodes,nodeInfoList.size());
  FileSystem fileSys=cluster.getFileSystem();
  FSDataOutputStream stm=null;
  try {
    final Path fileName=new Path("/file1");
    stm=fileSys.create(fileName,true,fileSys.getConf().getInt(CommonConfigurationKeys.IO_FILE_BUFFER_SIZE_KEY,4096),(short)3,blockSize);
    stm.write(new byte[(blockSize * 3) / 2]);
    stm.hflush();
    LocatedBlocks blocks=client.getNamenode().getBlockLocations(fileName.toString(),0,blockSize);
    DatanodeInfo[] nodes=blocks.get(0).getLocations();
    assertEquals(nodes.length,3);
    DataNode staleNode=null;
    DatanodeDescriptor staleNodeInfo=null;
    staleNode=this.stopDataNodeHeartbeat(cluster,nodes[0].getHostName());
    assertNotNull(staleNode);
    staleNodeInfo=cluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getDatanode(staleNode.getDatanodeId());
    staleNodeInfo.setLastUpdate(Time.now() - staleInterval - 1);
    LocatedBlocks blocksAfterStale=client.getNamenode().getBlockLocations(fileName.toString(),0,blockSize);
    DatanodeInfo[] nodesAfterStale=blocksAfterStale.get(0).getLocations();
    assertEquals(nodesAfterStale.length,3);
    assertEquals(nodesAfterStale[2].getHostName(),nodes[0].getHostName());
    DataNodeTestUtils.setHeartbeatsDisabledForTests(staleNode,false);
    staleNodeInfo.setLastUpdate(Time.now());
    LocatedBlock lastBlock=client.getLocatedBlocks(fileName.toString(),0,Long.MAX_VALUE).getLastLocatedBlock();
    nodes=lastBlock.getLocations();
    assertEquals(nodes.length,3);
    staleNode=this.stopDataNodeHeartbeat(cluster,nodes[0].getHostName());
    assertNotNull(staleNode);
    cluster.getNameNode().getNamesystem().getBlockManager().getDatanodeManager().getDatanode(staleNode.getDatanodeId()).setLastUpdate(Time.now() - staleInterval - 1);
    LocatedBlock lastBlockAfterStale=client.getLocatedBlocks(fileName.toString(),0,Long.MAX_VALUE).getLastLocatedBlock();
    nodesAfterStale=lastBlockAfterStale.getLocations();
    assertEquals(nodesAfterStale.length,3);
    assertEquals(nodesAfterStale[2].getHostName(),nodes[0].getHostName());
  }
  finally {
    if (stm != null) {
      stm.close();
    }
    if (client != null) {
      client.close();
    }
    cluster.shutdown();
  }
}
