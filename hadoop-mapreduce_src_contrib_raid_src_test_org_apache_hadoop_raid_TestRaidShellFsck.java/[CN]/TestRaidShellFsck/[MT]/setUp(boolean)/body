{
  final int timeBeforeHar;
  if (doHar) {
    timeBeforeHar=0;
  }
 else {
    timeBeforeHar=-1;
  }
  new File(TEST_DIR).mkdirs();
  conf=new Configuration();
  conf.set("raid.config.file",CONFIG_FILE);
  conf.setBoolean("raid.config.reload",true);
  conf.setLong("raid.config.reload.interval",RELOAD_INTERVAL);
  conf.setLong("raid.policy.rescan.interval",5000);
  conf.set("fs.shell.delete.classname","org.apache.hadoop.hdfs.DFSClient");
  conf.set("raid.classname","org.apache.hadoop.raid.LocalRaidNode");
  conf.set("raid.blockfix.classname","org.apache.hadoop.raid.LocalBlockFixer");
  conf.set("raid.server.address","localhost:0");
  conf.setInt("hdfs.raid.stripeLength",STRIPE_BLOCKS);
  conf.set("hdfs.raid.locations",RAID_DIR);
  conf.setInt("dfs.corruptfilesreturned.max",500);
  conf.setBoolean("dfs.permissions",false);
  cluster=new MiniDFSCluster.Builder(conf).numDataNodes(NUM_DATANODES).build();
  cluster.waitActive();
  dfs=(DistributedFileSystem)cluster.getFileSystem();
  String namenode=dfs.getUri().toString();
  FileSystem.setDefaultUri(conf,namenode);
  FileWriter fileWriter=new FileWriter(CONFIG_FILE);
  fileWriter.write("<?xml version=\"1.0\"?>\n");
  String str="<configuration> " + "  <srcPath prefix=\"" + DIR_PATH + "\"> "+ "    <policy name = \"RaidTest1\"> "+ "      <erasureCode>xor</erasureCode> "+ "      <destPath> "+ RAID_DIR+ " </destPath> "+ "      <property> "+ "        <name>targetReplication</name> "+ "        <value>1</value> "+ "        <description>after RAIDing, decrease the replication "+ "factor of a file to this value.</description> "+ "      </property> "+ "      <property> "+ "        <name>metaReplication</name> "+ "        <value>1</value> "+ "        <description> replication factor of parity file</description> "+ "      </property> "+ "      <property> "+ "        <name>modTimePeriod</name> "+ "        <value>2000</value> "+ "        <description>time (milliseconds) after a file is modified "+ "to make it a candidate for RAIDing</description> "+ "      </property> ";
  if (timeBeforeHar >= 0) {
    str+="      <property> " + "        <name>time_before_har</name> " + "        <value>" + timeBeforeHar + "</value> "+ "        <description> amount of time waited before har'ing parity "+ "files</description> "+ "     </property> ";
  }
  str+="    </policy>" + "  </srcPath>" + "</configuration>";
  fileWriter.write(str);
  fileWriter.close();
  createTestFile(FILE_PATH0);
  createTestFile(FILE_PATH1);
  Path[] filePaths={FILE_PATH0,FILE_PATH1};
  raidTestFiles(RAID_PATH,filePaths,doHar);
  clientConf=new Configuration(raidConf);
  clientConf.set("fs.hdfs.impl","org.apache.hadoop.hdfs.DistributedRaidFileSystem");
  clientConf.set("fs.raid.underlyingfs.impl","org.apache.hadoop.hdfs.DistributedFileSystem");
  shell=new RaidShell(clientConf);
  args=new String[2];
  args[0]="-fsck";
  args[1]=DIR_PATH;
}
