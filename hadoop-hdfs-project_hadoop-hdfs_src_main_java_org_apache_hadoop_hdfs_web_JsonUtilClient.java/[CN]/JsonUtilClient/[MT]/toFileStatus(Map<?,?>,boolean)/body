{
  if (json == null) {
    return null;
  }
  final Map<?,?> m=includesType ? (Map<?,?>)json.get(FileStatus.class.getSimpleName()) : json;
  final String localName=(String)m.get("pathSuffix");
  final WebHdfsConstants.PathType type=WebHdfsConstants.PathType.valueOf((String)m.get("type"));
  final byte[] symlink=type != WebHdfsConstants.PathType.SYMLINK ? null : DFSUtil.string2Bytes((String)m.get("symlink"));
  final long len=((Number)m.get("length")).longValue();
  final String owner=(String)m.get("owner");
  final String group=(String)m.get("group");
  final FsPermission permission=toFsPermission((String)m.get("permission"),(Boolean)m.get("aclBit"),(Boolean)m.get("encBit"));
  final long aTime=((Number)m.get("accessTime")).longValue();
  final long mTime=((Number)m.get("modificationTime")).longValue();
  final long blockSize=((Number)m.get("blockSize")).longValue();
  final short replication=((Number)m.get("replication")).shortValue();
  final long fileId=m.containsKey("fileId") ? ((Number)m.get("fileId")).longValue() : HdfsConstantsClient.GRANDFATHER_INODE_ID;
  final int childrenNum=getInt(m,"childrenNum",-1);
  final byte storagePolicy=m.containsKey("storagePolicy") ? (byte)((Number)m.get("storagePolicy")).longValue() : HdfsConstantsClient.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED;
  return new HdfsFileStatus(len,type == WebHdfsConstants.PathType.DIRECTORY,replication,blockSize,mTime,aTime,permission,owner,group,symlink,DFSUtil.string2Bytes(localName),fileId,childrenNum,null,storagePolicy);
}
