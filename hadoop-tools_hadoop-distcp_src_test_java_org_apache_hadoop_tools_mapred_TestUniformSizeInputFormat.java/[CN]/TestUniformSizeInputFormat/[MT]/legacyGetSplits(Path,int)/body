{
  FileSystem fs=cluster.getFileSystem();
  FileStatus srcst=fs.getFileStatus(listFile);
  Configuration conf=fs.getConf();
  ArrayList<InputSplit> splits=new ArrayList<InputSplit>(numSplits);
  FileStatus value=new FileStatus();
  Text key=new Text();
  final long targetsize=totalFileSize / numSplits;
  long pos=0L;
  long last=0L;
  long acc=0L;
  long cbrem=srcst.getLen();
  SequenceFile.Reader sl=null;
  LOG.info("Average bytes per map: " + targetsize + ", Number of maps: "+ numSplits+ ", total size: "+ totalFileSize);
  try {
    sl=new SequenceFile.Reader(conf,SequenceFile.Reader.file(listFile));
    for (; sl.next(key,value); last=sl.getPosition()) {
      if (acc + value.getLen() > targetsize && acc != 0) {
        long splitsize=last - pos;
        FileSplit fileSplit=new FileSplit(listFile,pos,splitsize,null);
        LOG.info("Creating split : " + fileSplit + ", bytes in split: "+ splitsize);
        splits.add(fileSplit);
        cbrem-=splitsize;
        pos=last;
        acc=0L;
      }
      acc+=value.getLen();
    }
  }
  finally {
    IOUtils.closeStream(sl);
  }
  if (cbrem != 0) {
    FileSplit fileSplit=new FileSplit(listFile,pos,cbrem,null);
    LOG.info("Creating split : " + fileSplit + ", bytes in split: "+ cbrem);
    splits.add(fileSplit);
  }
  return splits;
}
