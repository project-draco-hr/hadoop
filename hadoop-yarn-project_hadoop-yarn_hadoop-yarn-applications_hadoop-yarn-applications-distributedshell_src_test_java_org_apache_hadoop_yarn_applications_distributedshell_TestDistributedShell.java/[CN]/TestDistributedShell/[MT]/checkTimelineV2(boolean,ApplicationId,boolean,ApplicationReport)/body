{
  LOG.info("Started checkTimelineV2 ");
  String tmpRoot=FileSystemTimelineWriterImpl.DEFAULT_TIMELINE_SERVICE_STORAGE_DIR_ROOT + "/entities/";
  File tmpRootFolder=new File(tmpRoot);
  try {
    Assert.assertTrue(tmpRootFolder.isDirectory());
    String basePath=tmpRoot + YarnConfiguration.DEFAULT_RM_CLUSTER_ID + "/"+ UserGroupInformation.getCurrentUser().getShortUserName()+ (defaultFlow ? "/" + appReport.getName() + "/"+ TimelineUtils.DEFAULT_FLOW_VERSION+ "/"+ appReport.getStartTime()+ "/" : "/test_flow_name/test_flow_version/12345678/")+ appId.toString();
    LOG.info("basePath: " + basePath);
    String appTimestampFileName="appattempt_" + appId.getClusterTimestamp() + "_000"+ appId.getId()+ "_000001"+ FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;
    verifyEntityTypeFileExists(basePath,"DS_APP_ATTEMPT",appTimestampFileName);
    String containerTimestampFileName="container_" + appId.getClusterTimestamp() + "_000"+ appId.getId()+ "_01_000002.thist";
    verifyEntityTypeFileExists(basePath,"DS_CONTAINER",containerTimestampFileName);
    String containerMetricsTimestampFileName="container_" + appId.getClusterTimestamp() + "_000"+ appId.getId()+ "_01_000001"+ FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;
    File containerEntityFile=verifyEntityTypeFileExists(basePath,TimelineEntityType.YARN_CONTAINER.toString(),containerMetricsTimestampFileName);
    Assert.assertEquals("Container created event needs to be published atleast once",1,getNumOfStringOccurences(containerEntityFile,ContainerMetricsConstants.CREATED_EVENT_TYPE));
    long numOfContainerFinishedOccurences=0;
    for (int i=0; i < 4; i++) {
      numOfContainerFinishedOccurences=getNumOfStringOccurences(containerEntityFile,ContainerMetricsConstants.FINISHED_EVENT_TYPE);
      if (numOfContainerFinishedOccurences > 0) {
        break;
      }
 else {
        Thread.sleep(500l);
      }
    }
    Assert.assertEquals("Container finished event needs to be published atleast once",1,numOfContainerFinishedOccurences);
    String appMetricsTimestampFileName="application_" + appId.getClusterTimestamp() + "_000"+ appId.getId()+ FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;
    File appEntityFile=verifyEntityTypeFileExists(basePath,TimelineEntityType.YARN_APPLICATION.toString(),appMetricsTimestampFileName);
    Assert.assertEquals("Application created event should be published atleast once",1,getNumOfStringOccurences(appEntityFile,ApplicationMetricsConstants.CREATED_EVENT_TYPE));
    long numOfStringOccurences=0;
    for (int i=0; i < 4; i++) {
      numOfStringOccurences=getNumOfStringOccurences(appEntityFile,ApplicationMetricsConstants.FINISHED_EVENT_TYPE);
      if (numOfStringOccurences > 0) {
        break;
      }
 else {
        Thread.sleep(500l);
      }
    }
    Assert.assertEquals("Application finished event should be published atleast once",1,numOfStringOccurences);
    String appAttemptMetricsTimestampFileName="appattempt_" + appId.getClusterTimestamp() + "_000"+ appId.getId()+ "_000001"+ FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;
    File appAttemptEntityFile=verifyEntityTypeFileExists(basePath,TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString(),appAttemptMetricsTimestampFileName);
    Assert.assertEquals("AppAttempt register event should be published atleast once",1,getNumOfStringOccurences(appAttemptEntityFile,AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE));
    Assert.assertEquals("AppAttempt finished event should be published atleast once",1,getNumOfStringOccurences(appAttemptEntityFile,AppAttemptMetricsConstants.FINISHED_EVENT_TYPE));
  }
  finally {
    FileUtils.deleteDirectory(tmpRootFolder.getParentFile());
  }
}
