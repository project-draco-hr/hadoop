{
  LOG.info("Starting up YARN cluster");
  conf=new YarnConfiguration();
  conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,128);
  conf.set("yarn.log.dir","target");
  conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,true);
  conf.set(YarnConfiguration.NM_AUX_SERVICES,"");
  conf.setBoolean(YarnConfiguration.SYSTEM_METRICS_PUBLISHER_ENABLED,true);
  conf.set(YarnConfiguration.NM_VMEM_PMEM_RATIO,"8");
  conf.set(YarnConfiguration.RM_SCHEDULER,CapacityScheduler.class.getName());
  conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED,true);
  conf.set("mapreduce.jobhistory.address","0.0.0.0:" + ServerSocketUtil.getPort(10021,10));
  conf.set(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR,LinuxResourceCalculatorPlugin.class.getName());
  conf.set(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE,ProcfsBasedProcessTree.class.getName());
  conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED,true);
  conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED,true);
  conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING,true);
  conf.setBoolean(YarnConfiguration.RM_SYSTEM_METRICS_PUBLISHER_ENABLED,true);
  if (timelineVersion == 1.0f) {
    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION,1.0f);
    conf.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY,CommonConfigurationKeysPublic.FS_DEFAULT_NAME_DEFAULT);
  }
 else   if (timelineVersion == 1.5f) {
    if (hdfsCluster == null) {
      HdfsConfiguration hdfsConfig=new HdfsConfiguration();
      hdfsCluster=new MiniDFSCluster.Builder(hdfsConfig).numDataNodes(1).build();
    }
    fs=hdfsCluster.getFileSystem();
    PluginStoreTestUtils.prepareFileSystemForPluginStore(fs);
    PluginStoreTestUtils.prepareConfiguration(conf,hdfsCluster);
    conf.set(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES,DistributedShellTimelinePlugin.class.getName());
  }
 else   if (timelineVersion == 2.0f) {
    conf.set(YarnConfiguration.NM_AUX_SERVICES,TIMELINE_AUX_SERVICE_NAME);
    conf.set(YarnConfiguration.NM_AUX_SERVICES + "." + TIMELINE_AUX_SERVICE_NAME+ ".class",PerNodeTimelineCollectorsAuxService.class.getName());
    conf.setBoolean(YarnConfiguration.SYSTEM_METRICS_PUBLISHER_ENABLED,true);
    conf.setBoolean(YarnConfiguration.RM_SYSTEM_METRICS_PUBLISHER_ENABLED,false);
  }
 else {
    Assert.fail("Wrong timeline version number: " + timelineVersion);
  }
  if (yarnCluster == null) {
    yarnCluster=new MiniYARNCluster(TestDistributedShell.class.getSimpleName(),1,numNodeManager,1,1);
    yarnCluster.init(conf);
    yarnCluster.start();
    conf.set(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,MiniYARNCluster.getHostname() + ":" + yarnCluster.getApplicationHistoryServer().getPort());
    waitForNMsToRegister();
    URL url=Thread.currentThread().getContextClassLoader().getResource("yarn-site.xml");
    if (url == null) {
      throw new RuntimeException("Could not find 'yarn-site.xml' dummy file in classpath");
    }
    Configuration yarnClusterConfig=yarnCluster.getConfig();
    yarnClusterConfig.set("yarn.application.classpath",new File(url.getPath()).getParent());
    ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();
    yarnClusterConfig.writeXml(bytesOut);
    bytesOut.close();
    OutputStream os=new FileOutputStream(new File(url.getPath()));
    os.write(bytesOut.toByteArray());
    os.close();
  }
  FileContext fsContext=FileContext.getLocalFSFileContext();
  fsContext.delete(new Path(conf.get("yarn.timeline-service.leveldb-timeline-store.path")),true);
  try {
    Thread.sleep(2000);
  }
 catch (  InterruptedException e) {
    LOG.info("setup thread sleep interrupted. message=" + e.getMessage());
  }
}
