def testDeallocateInvalidDirectory(self):
    clusterDir = os.path.join(TMP_DIR_PREFIX, 'testDeallocateInvalidDirectory')
    jobid = '789.dummy.id'
    userState = {clusterDir: jobid, }
    self.__setupClusterState(userState)
    self.client._op_deallocate(['deallocate', clusterDir])
    self.assertTrue(self.cluster.wasOperationPerformed('delete_job', jobid))
    self.assertTrue(self.log.hasMessage(("Cannot find information for cluster with id '%s' in previously allocated cluster directory '%s'." % (userState[clusterDir], clusterDir)), 'critical'))
    self.assertTrue(self.log.hasMessage('Freeing resources allocated to the cluster.', 'critical'))
    userState = self.state.read(TEST_CLUSTER_DATA_FILE)
    self.assertFalse((clusterDir in userState.keys()))
    clusterDir = os.path.join(TMP_DIR_PREFIX, 'testDeallocateEmptyDirectory')
    os.makedirs(clusterDir)
    self.assertTrue(os.path.isdir(clusterDir))
    jobid = '789.dummy.id1'
    userState = {clusterDir: jobid, }
    self.__setupClusterState(userState, False)
    self.client._op_deallocate(['deallocate', clusterDir])
    self.assertTrue(self.cluster.wasOperationPerformed('delete_job', jobid))
    self.assertTrue(self.log.hasMessage(("Cannot find information for cluster with id '%s' in previously allocated cluster directory '%s'." % (userState[clusterDir], clusterDir)), 'critical'))
    self.assertTrue(self.log.hasMessage('Freeing resources allocated to the cluster.', 'critical'))
    userState = self.state.read(TEST_CLUSTER_DATA_FILE)
    self.assertFalse((clusterDir in userState.keys()))
    os.rmdir(clusterDir)
