{
  ApplicationId applicationId=resMgrDelegate.getApplicationId();
  Resource capability=recordFactory.newRecordInstance(Resource.class);
  capability.setMemory(conf.getInt(MRJobConfig.MR_AM_VMEM_MB,MRJobConfig.DEFAULT_MR_AM_VMEM_MB));
  LOG.debug("AppMaster capability = " + capability);
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  Path jobConfPath=new Path(jobSubmitDir,MRJobConfig.JOB_CONF_FILE);
  URL yarnUrlForJobSubmitDir=ConverterUtils.getYarnUrlFromPath(defaultFileContext.getDefaultFileSystem().resolvePath(defaultFileContext.makeQualified(new Path(jobSubmitDir))));
  LOG.debug("Creating setup context, jobSubmitDir url is " + yarnUrlForJobSubmitDir);
  localResources.put(MRJobConfig.JOB_CONF_FILE,createApplicationResource(defaultFileContext,jobConfPath,LocalResourceType.FILE));
  if (jobConf.get(MRJobConfig.JAR) != null) {
    Path jobJarPath=new Path(jobConf.get(MRJobConfig.JAR));
    LocalResource rc=createApplicationResource(defaultFileContext,jobJarPath,LocalResourceType.PATTERN);
    String pattern=conf.getPattern(JobContext.JAR_UNPACK_PATTERN,JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern();
    rc.setPattern(pattern);
    localResources.put(MRJobConfig.JOB_JAR,rc);
  }
 else {
    LOG.info("Job jar is not present. " + "Not adding any jar to the list of resources.");
  }
  for (  String s : new String[]{MRJobConfig.JOB_SPLIT,MRJobConfig.JOB_SPLIT_METAINFO,MRJobConfig.APPLICATION_TOKENS_FILE}) {
    localResources.put(MRJobConfig.JOB_SUBMIT_DIR + "/" + s,createApplicationResource(defaultFileContext,new Path(jobSubmitDir,s),LocalResourceType.FILE));
  }
  DataOutputBuffer dob=new DataOutputBuffer();
  ts.writeTokenStorageToStream(dob);
  ByteBuffer securityTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  List<String> vargs=new ArrayList<String>(8);
  vargs.add(Environment.JAVA_HOME.$() + "/bin/java");
  long logSize=TaskLog.getTaskLogLength(new JobConf(conf));
  String logLevel=jobConf.get(MRJobConfig.MR_AM_LOG_LEVEL,MRJobConfig.DEFAULT_MR_AM_LOG_LEVEL);
  MRApps.addLog4jSystemProperties(logLevel,logSize,vargs);
  vargs.add(conf.get(MRJobConfig.MR_AM_COMMAND_OPTS,MRJobConfig.DEFAULT_MR_AM_COMMAND_OPTS));
  vargs.add(MRJobConfig.APPLICATION_MASTER_CLASS);
  vargs.add("1>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR+ ApplicationConstants.STDOUT);
  vargs.add("2>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR+ ApplicationConstants.STDERR);
  Vector<String> vargsFinal=new Vector<String>(8);
  StringBuilder mergedCommand=new StringBuilder();
  for (  CharSequence str : vargs) {
    mergedCommand.append(str).append(" ");
  }
  vargsFinal.add(mergedCommand.toString());
  LOG.debug("Command to launch container for ApplicationMaster is : " + mergedCommand);
  Map<String,String> environment=new HashMap<String,String>();
  MRApps.setClasspath(environment,conf);
  MRApps.setEnvFromInputString(environment,conf.get(MRJobConfig.MR_AM_ENV));
  MRApps.setupDistributedCache(jobConf,localResources);
  Map<ApplicationAccessType,String> acls=new HashMap<ApplicationAccessType,String>(2);
  acls.put(ApplicationAccessType.VIEW_APP,jobConf.get(MRJobConfig.JOB_ACL_VIEW_JOB,MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB));
  acls.put(ApplicationAccessType.MODIFY_APP,jobConf.get(MRJobConfig.JOB_ACL_MODIFY_JOB,MRJobConfig.DEFAULT_JOB_ACL_MODIFY_JOB));
  ContainerLaunchContext amContainer=BuilderUtils.newContainerLaunchContext(null,UserGroupInformation.getCurrentUser().getShortUserName(),capability,localResources,environment,vargsFinal,null,securityTokens,acls);
  ApplicationSubmissionContext appContext=recordFactory.newRecordInstance(ApplicationSubmissionContext.class);
  appContext.setApplicationId(applicationId);
  appContext.setUser(UserGroupInformation.getCurrentUser().getShortUserName());
  appContext.setQueue(jobConf.get(JobContext.QUEUE_NAME,YarnConfiguration.DEFAULT_QUEUE_NAME));
  appContext.setApplicationName(jobConf.get(JobContext.JOB_NAME,YarnConfiguration.DEFAULT_APPLICATION_NAME));
  appContext.setCancelTokensWhenComplete(conf.getBoolean(MRJobConfig.JOB_CANCEL_DELEGATION_TOKEN,true));
  appContext.setAMContainerSpec(amContainer);
  return appContext;
}
