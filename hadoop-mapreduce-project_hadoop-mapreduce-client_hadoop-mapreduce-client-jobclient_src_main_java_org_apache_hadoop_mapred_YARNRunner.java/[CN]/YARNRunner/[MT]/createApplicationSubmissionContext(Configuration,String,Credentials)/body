{
  ApplicationId applicationId=resMgrDelegate.getApplicationId();
  Resource capability=recordFactory.newRecordInstance(Resource.class);
  capability.setMemory(conf.getInt(MRJobConfig.MR_AM_VMEM_MB,MRJobConfig.DEFAULT_MR_AM_VMEM_MB));
  capability.setVirtualCores(conf.getInt(MRJobConfig.MR_AM_CPU_VCORES,MRJobConfig.DEFAULT_MR_AM_CPU_VCORES));
  LOG.debug("AppMaster capability = " + capability);
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  Path jobConfPath=new Path(jobSubmitDir,MRJobConfig.JOB_CONF_FILE);
  URL yarnUrlForJobSubmitDir=ConverterUtils.getYarnUrlFromPath(defaultFileContext.getDefaultFileSystem().resolvePath(defaultFileContext.makeQualified(new Path(jobSubmitDir))));
  LOG.debug("Creating setup context, jobSubmitDir url is " + yarnUrlForJobSubmitDir);
  localResources.put(MRJobConfig.JOB_CONF_FILE,createApplicationResource(defaultFileContext,jobConfPath,LocalResourceType.FILE));
  if (jobConf.get(MRJobConfig.JAR) != null) {
    Path jobJarPath=new Path(jobConf.get(MRJobConfig.JAR));
    LocalResource rc=createApplicationResource(FileContext.getFileContext(jobJarPath.toUri(),jobConf),jobJarPath,LocalResourceType.PATTERN);
    String pattern=conf.getPattern(JobContext.JAR_UNPACK_PATTERN,JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern();
    rc.setPattern(pattern);
    localResources.put(MRJobConfig.JOB_JAR,rc);
  }
 else {
    LOG.info("Job jar is not present. " + "Not adding any jar to the list of resources.");
  }
  for (  String s : new String[]{MRJobConfig.JOB_SPLIT,MRJobConfig.JOB_SPLIT_METAINFO}) {
    localResources.put(MRJobConfig.JOB_SUBMIT_DIR + "/" + s,createApplicationResource(defaultFileContext,new Path(jobSubmitDir,s),LocalResourceType.FILE));
  }
  DataOutputBuffer dob=new DataOutputBuffer();
  ts.writeTokenStorageToStream(dob);
  ByteBuffer securityTokens=ByteBuffer.wrap(dob.getData(),0,dob.getLength());
  List<String> vargs=new ArrayList<String>(8);
  vargs.add(MRApps.crossPlatformifyMREnv(jobConf,Environment.JAVA_HOME) + "/bin/java");
  MRApps.addLog4jSystemProperties(null,vargs,conf);
  warnForJavaLibPath(conf.get(MRJobConfig.MAP_JAVA_OPTS,""),"map",MRJobConfig.MAP_JAVA_OPTS,MRJobConfig.MAP_ENV);
  warnForJavaLibPath(conf.get(MRJobConfig.MAPRED_MAP_ADMIN_JAVA_OPTS,""),"map",MRJobConfig.MAPRED_MAP_ADMIN_JAVA_OPTS,MRJobConfig.MAPRED_ADMIN_USER_ENV);
  warnForJavaLibPath(conf.get(MRJobConfig.REDUCE_JAVA_OPTS,""),"reduce",MRJobConfig.REDUCE_JAVA_OPTS,MRJobConfig.REDUCE_ENV);
  warnForJavaLibPath(conf.get(MRJobConfig.MAPRED_REDUCE_ADMIN_JAVA_OPTS,""),"reduce",MRJobConfig.MAPRED_REDUCE_ADMIN_JAVA_OPTS,MRJobConfig.MAPRED_ADMIN_USER_ENV);
  String mrAppMasterAdminOptions=conf.get(MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS,MRJobConfig.DEFAULT_MR_AM_ADMIN_COMMAND_OPTS);
  warnForJavaLibPath(mrAppMasterAdminOptions,"app master",MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS,MRJobConfig.MR_AM_ADMIN_USER_ENV);
  vargs.add(mrAppMasterAdminOptions);
  String mrAppMasterUserOptions=conf.get(MRJobConfig.MR_AM_COMMAND_OPTS,MRJobConfig.DEFAULT_MR_AM_COMMAND_OPTS);
  warnForJavaLibPath(mrAppMasterUserOptions,"app master",MRJobConfig.MR_AM_COMMAND_OPTS,MRJobConfig.MR_AM_ENV);
  vargs.add(mrAppMasterUserOptions);
  if (jobConf.getBoolean(MRJobConfig.MR_AM_PROFILE,MRJobConfig.DEFAULT_MR_AM_PROFILE)) {
    final String profileParams=jobConf.get(MRJobConfig.MR_AM_PROFILE_PARAMS,MRJobConfig.DEFAULT_TASK_PROFILE_PARAMS);
    if (profileParams != null) {
      vargs.add(String.format(profileParams,ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR + TaskLog.LogName.PROFILE));
    }
  }
  vargs.add(MRJobConfig.APPLICATION_MASTER_CLASS);
  vargs.add("1>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR+ ApplicationConstants.STDOUT);
  vargs.add("2>" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR+ ApplicationConstants.STDERR);
  Vector<String> vargsFinal=new Vector<String>(8);
  StringBuilder mergedCommand=new StringBuilder();
  for (  CharSequence str : vargs) {
    mergedCommand.append(str).append(" ");
  }
  vargsFinal.add(mergedCommand.toString());
  LOG.debug("Command to launch container for ApplicationMaster is : " + mergedCommand);
  Map<String,String> environment=new HashMap<String,String>();
  MRApps.setClasspath(environment,conf);
  environment.put(Environment.SHELL.name(),conf.get(MRJobConfig.MAPRED_ADMIN_USER_SHELL,MRJobConfig.DEFAULT_SHELL));
  MRApps.addToEnvironment(environment,Environment.LD_LIBRARY_PATH.name(),MRApps.crossPlatformifyMREnv(conf,Environment.PWD),conf);
  MRApps.setEnvFromInputString(environment,conf.get(MRJobConfig.MR_AM_ADMIN_USER_ENV),conf);
  MRApps.setEnvFromInputString(environment,conf.get(MRJobConfig.MR_AM_ENV),conf);
  MRApps.setupDistributedCache(jobConf,localResources);
  Map<ApplicationAccessType,String> acls=new HashMap<ApplicationAccessType,String>(2);
  acls.put(ApplicationAccessType.VIEW_APP,jobConf.get(MRJobConfig.JOB_ACL_VIEW_JOB,MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB));
  acls.put(ApplicationAccessType.MODIFY_APP,jobConf.get(MRJobConfig.JOB_ACL_MODIFY_JOB,MRJobConfig.DEFAULT_JOB_ACL_MODIFY_JOB));
  ContainerLaunchContext amContainer=ContainerLaunchContext.newInstance(localResources,environment,vargsFinal,null,securityTokens,acls);
  Collection<String> tagsFromConf=jobConf.getTrimmedStringCollection(MRJobConfig.JOB_TAGS);
  ApplicationSubmissionContext appContext=recordFactory.newRecordInstance(ApplicationSubmissionContext.class);
  appContext.setApplicationId(applicationId);
  appContext.setQueue(jobConf.get(JobContext.QUEUE_NAME,YarnConfiguration.DEFAULT_QUEUE_NAME));
  ReservationId reservationID=null;
  try {
    reservationID=ReservationId.parseReservationId(jobConf.get(JobContext.RESERVATION_ID));
  }
 catch (  NumberFormatException e) {
    String errMsg="Invalid reservationId: " + jobConf.get(JobContext.RESERVATION_ID) + " specified for the app: "+ applicationId;
    LOG.warn(errMsg);
    throw new IOException(errMsg);
  }
  if (reservationID != null) {
    appContext.setReservationID(reservationID);
    LOG.info("SUBMITTING ApplicationSubmissionContext app:" + applicationId + " to queue:"+ appContext.getQueue()+ " with reservationId:"+ appContext.getReservationID());
  }
  appContext.setApplicationName(jobConf.get(JobContext.JOB_NAME,YarnConfiguration.DEFAULT_APPLICATION_NAME));
  appContext.setCancelTokensWhenComplete(conf.getBoolean(MRJobConfig.JOB_CANCEL_DELEGATION_TOKEN,true));
  appContext.setAMContainerSpec(amContainer);
  appContext.setMaxAppAttempts(conf.getInt(MRJobConfig.MR_AM_MAX_ATTEMPTS,MRJobConfig.DEFAULT_MR_AM_MAX_ATTEMPTS));
  appContext.setResource(capability);
  String amNodelabelExpression=conf.get(MRJobConfig.AM_NODE_LABEL_EXP);
  if (null != amNodelabelExpression && amNodelabelExpression.trim().length() != 0) {
    ResourceRequest amResourceRequest=recordFactory.newRecordInstance(ResourceRequest.class);
    amResourceRequest.setPriority(AM_CONTAINER_PRIORITY);
    amResourceRequest.setResourceName(ResourceRequest.ANY);
    amResourceRequest.setCapability(capability);
    amResourceRequest.setNumContainers(1);
    amResourceRequest.setNodeLabelExpression(amNodelabelExpression.trim());
    appContext.setAMContainerResourceRequest(amResourceRequest);
  }
  appContext.setNodeLabelExpression(jobConf.get(JobContext.JOB_NODE_LABEL_EXP));
  appContext.setApplicationType(MRJobConfig.MR_APPLICATION_TYPE);
  if (tagsFromConf != null && !tagsFromConf.isEmpty()) {
    appContext.setApplicationTags(new HashSet<String>(tagsFromConf));
  }
  return appContext;
}
