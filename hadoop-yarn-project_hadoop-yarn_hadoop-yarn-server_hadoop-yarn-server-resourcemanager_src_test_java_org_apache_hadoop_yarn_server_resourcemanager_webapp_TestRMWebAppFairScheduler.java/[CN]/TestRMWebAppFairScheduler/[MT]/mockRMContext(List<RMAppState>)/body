{
  final ConcurrentMap<ApplicationId,RMApp> applicationsMaps=Maps.newConcurrentMap();
  int i=0;
  for (  RMAppState state : states) {
    MockRMApp app=new MockRMApp(i,i,state){
      @Override public RMAppMetrics getRMAppMetrics(){
        return new RMAppMetrics(Resource.newInstance(0,0),0,0,0,0);
      }
      @Override public YarnApplicationState createApplicationState(){
        return YarnApplicationState.ACCEPTED;
      }
    }
;
    RMAppAttempt attempt=mock(RMAppAttempt.class);
    app.setCurrentAppAttempt(attempt);
    applicationsMaps.put(app.getApplicationId(),app);
    i++;
  }
  RMContextImpl rmContext=new RMContextImpl(null,null,null,null,null,null,null,null,null,null){
    @Override public ConcurrentMap<ApplicationId,RMApp> getRMApps(){
      return applicationsMaps;
    }
    @Override public ResourceScheduler getScheduler(){
      return mock(AbstractYarnScheduler.class);
    }
  }
;
  return rmContext;
}
