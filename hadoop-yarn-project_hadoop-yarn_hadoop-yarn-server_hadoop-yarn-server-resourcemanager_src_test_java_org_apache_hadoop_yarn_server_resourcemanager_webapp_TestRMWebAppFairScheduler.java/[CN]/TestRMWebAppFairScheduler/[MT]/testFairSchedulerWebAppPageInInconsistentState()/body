{
  List<RMAppState> appStates=Arrays.asList(RMAppState.NEW,RMAppState.NEW_SAVING,RMAppState.SUBMITTED,RMAppState.RUNNING,RMAppState.FINAL_SAVING,RMAppState.ACCEPTED,RMAppState.FINISHED);
  final RMContext rmContext=mockRMContext(appStates);
  Injector injector=WebAppTests.createMockInjector(RMContext.class,rmContext,new Module(){
    @Override public void configure(    Binder binder){
      try {
        ResourceManager mockRmWithFairScheduler=mockRmWithApps(rmContext);
        binder.bind(ResourceManager.class).toInstance(mockRmWithFairScheduler);
        binder.bind(ApplicationBaseProtocol.class).toInstance(mockRmWithFairScheduler.getClientRMService());
      }
 catch (      IOException e) {
        throw new IllegalStateException(e);
      }
    }
  }
);
  FairSchedulerPage fsViewInstance=injector.getInstance(FairSchedulerPage.class);
  try {
    fsViewInstance.render();
  }
 catch (  Exception e) {
    Assert.fail("Failed to render FairSchedulerPage: " + StringUtils.stringifyException(e));
  }
  WebAppTests.flushOutput(injector);
}
