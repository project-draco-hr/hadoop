{
  Preconditions.checkArgument(fromSvc.getFencer() != null,"failover requires a fencer");
  preFailoverChecks(toSvc,forceActive);
  boolean tryFence=true;
  if (tryGracefulFence(new Configuration(),fromSvc)) {
    tryFence=forceFence;
  }
  if (tryFence) {
    if (!fromSvc.getFencer().fence(fromSvc)) {
      throw new FailoverFailedException("Unable to fence " + fromSvc + ". Fencing failed.");
    }
  }
  boolean failed=false;
  Throwable cause=null;
  try {
    HAServiceProtocolHelper.transitionToActive(toSvc.getProxy());
  }
 catch (  ServiceFailedException sfe) {
    LOG.error("Unable to make " + toSvc + " active ("+ sfe.getMessage()+ "). Failing back.");
    failed=true;
    cause=sfe;
  }
catch (  IOException ioe) {
    LOG.error("Unable to make " + toSvc + " active (unable to connect). Failing back.",ioe);
    failed=true;
    cause=ioe;
  }
  if (failed) {
    String msg="Unable to failover to " + toSvc;
    if (!tryFence) {
      try {
        failover(toSvc,fromSvc,true,true);
      }
 catch (      FailoverFailedException ffe) {
        msg+=". Failback to " + fromSvc + " failed ("+ ffe.getMessage()+ ")";
        LOG.fatal(msg);
      }
    }
    throw new FailoverFailedException(msg,cause);
  }
}
