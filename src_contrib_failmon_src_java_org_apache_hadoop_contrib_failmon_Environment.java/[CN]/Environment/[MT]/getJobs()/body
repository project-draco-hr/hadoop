{
  ArrayList<MonitorJob> monitors=new ArrayList<MonitorJob>();
  int timeInt=0;
  String[] fnames_r=getProperty("log.hadoop.filenames").split(",\\s*");
  String tmp=getProperty("log.hadoop.enabled");
  String[] fnames=expandDirs(fnames_r,".*(.log).*");
  timeInt=setValue("log.hadoop.interval",DEFAULT_LOG_INTERVAL);
  if ("true".equalsIgnoreCase(tmp) && fnames[0] != null)   for (  String fname : fnames) {
    File f=new File(fname);
    if (f.exists() && f.canRead()) {
      monitors.add(new MonitorJob(new HadoopLogParser(fname),"hadoopLog",timeInt));
      logInfo("Created Monitor for Hadoop log file: " + f.getAbsolutePath());
    }
 else     if (!f.exists())     logInfo("Skipping Hadoop log file " + fname + " (file not found)");
 else     logInfo("Skipping Hadoop log file " + fname + " (permission denied)");
  }
  fnames_r=getProperty("log.system.filenames").split(",\\s*");
  tmp=getProperty("log.system.enabled");
  fnames=expandDirs(fnames_r,".*(messages).*");
  timeInt=setValue("log.system.interval",DEFAULT_LOG_INTERVAL);
  if ("true".equalsIgnoreCase(tmp))   for (  String fname : fnames) {
    File f=new File(fname);
    if (f.exists() && f.canRead()) {
      monitors.add(new MonitorJob(new SystemLogParser(fname),"systemLog",timeInt));
      logInfo("Created Monitor for System log file: " + f.getAbsolutePath());
    }
 else     if (!f.exists())     logInfo("Skipping system log file " + fname + " (file not found)");
 else     logInfo("Skipping system log file " + fname + " (permission denied)");
  }
  tmp=getProperty("nic.enabled");
  timeInt=setValue("nics.interval",DEFAULT_POLL_INTERVAL);
  if ("true".equalsIgnoreCase(tmp)) {
    monitors.add(new MonitorJob(new NICParser(),"nics",timeInt));
    logInfo("Created Monitor for NICs");
  }
  tmp=getProperty("cpu.enabled");
  timeInt=setValue("cpu.interval",DEFAULT_POLL_INTERVAL);
  if ("true".equalsIgnoreCase(tmp)) {
    monitors.add(new MonitorJob(new CPUParser(),"cpu",timeInt));
    logInfo("Created Monitor for CPUs");
  }
  tmp=getProperty("disks.enabled");
  timeInt=setValue("disks.interval",DEFAULT_POLL_INTERVAL);
  if ("true".equalsIgnoreCase(tmp)) {
    boolean smart_present=checkExistence("smartctl");
    int disks_ok=0;
    String devicesStr=getProperty("disks.list");
    String[] devices=null;
    if (devicesStr != null)     devices=devicesStr.split(",\\s*");
    for (int i=0; i < devices.length; i++) {
      boolean file_present=false;
      boolean disk_present=false;
      String fileloc=getProperty("disks." + devices[i] + ".source");
      if (fileloc != null && fileloc.equalsIgnoreCase("true"))       file_present=true;
      if (!file_present)       if (superuser) {
        CharSequence sb=runCommandGeneric("sudo smartctl -i " + devices[i]);
        String patternStr="[(failed)(device not supported)]";
        Pattern pattern=Pattern.compile(patternStr);
        Matcher matcher=pattern.matcher(sb.toString());
        if (matcher.find(0))         disk_present=false;
 else         disk_present=true;
      }
      if (file_present || (disk_present && smart_present)) {
        disks_ok++;
      }
 else       devices[i]=null;
    }
    StringBuilder resetSB=new StringBuilder();
    for (int j=0; j < devices.length; j++) {
      resetSB.append(devices[j] == null ? "" : devices[j] + ", ");
      if (devices[j] != null)       logInfo("Found S.M.A.R.T. attributes for disk " + devices[j]);
    }
    if (resetSB.length() >= 2)     setProperty("disks.list",resetSB.substring(0,resetSB.length() - 2));
    if (disks_ok > 0) {
      monitors.add(new MonitorJob(new SMARTParser(),"disks",timeInt));
      logInfo("Created Monitor for S.M.A.R.T disk attributes");
    }
  }
  tmp=getProperty("sensors.enabled");
  timeInt=setValue("sensors.interval",DEFAULT_POLL_INTERVAL);
  if ("true".equalsIgnoreCase(tmp) && checkExistence("sensors")) {
    monitors.add(new MonitorJob(new SensorsParser(),"sensors",timeInt));
    logInfo("Created Monitor for lm-sensors output");
  }
  return monitors;
}
