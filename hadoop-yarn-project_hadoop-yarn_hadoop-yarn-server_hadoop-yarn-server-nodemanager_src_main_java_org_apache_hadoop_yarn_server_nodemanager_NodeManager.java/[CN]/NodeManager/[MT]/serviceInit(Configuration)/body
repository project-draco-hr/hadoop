{
  conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,true);
  rmWorkPreservingRestartEnabled=conf.getBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,YarnConfiguration.DEFAULT_RM_WORK_PRESERVING_RECOVERY_ENABLED);
  initAndStartRecoveryStore(conf);
  NMContainerTokenSecretManager containerTokenSecretManager=new NMContainerTokenSecretManager(conf,nmStore);
  NMTokenSecretManagerInNM nmTokenSecretManager=new NMTokenSecretManagerInNM(nmStore);
  recoverTokens(nmTokenSecretManager,containerTokenSecretManager);
  this.aclsManager=new ApplicationACLsManager(conf);
  ContainerExecutor exec=ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.NM_CONTAINER_EXECUTOR,DefaultContainerExecutor.class,ContainerExecutor.class),conf);
  try {
    exec.init();
  }
 catch (  IOException e) {
    throw new YarnRuntimeException("Failed to initialize container executor",e);
  }
  DeletionService del=createDeletionService(exec);
  addService(del);
  this.dispatcher=new AsyncDispatcher();
  dirsHandler=new LocalDirsHandlerService();
  nodeHealthChecker=new NodeHealthCheckerService(getNodeHealthScriptRunner(conf),dirsHandler);
  addService(nodeHealthChecker);
  this.context=createNMContext(containerTokenSecretManager,nmTokenSecretManager,nmStore);
  nodeLabelsProvider=createNodeLabelsProvider(conf);
  if (null == nodeLabelsProvider) {
    nodeStatusUpdater=createNodeStatusUpdater(context,dispatcher,nodeHealthChecker);
  }
 else {
    addService(nodeLabelsProvider);
    nodeStatusUpdater=createNodeStatusUpdater(context,dispatcher,nodeHealthChecker,nodeLabelsProvider);
  }
  NodeResourceMonitor nodeResourceMonitor=createNodeResourceMonitor();
  addService(nodeResourceMonitor);
  containerManager=createContainerManager(context,exec,del,nodeStatusUpdater,this.aclsManager,dirsHandler);
  addService(containerManager);
  ((NMContext)context).setContainerManager(containerManager);
  WebServer webServer=createWebServer(context,containerManager.getContainersMonitor(),this.aclsManager,dirsHandler);
  addService(webServer);
  ((NMContext)context).setWebServer(webServer);
  dispatcher.register(ContainerManagerEventType.class,containerManager);
  dispatcher.register(NodeManagerEventType.class,this);
  addService(dispatcher);
  DefaultMetricsSystem.initialize("NodeManager");
  addService(nodeStatusUpdater);
  super.serviceInit(conf);
}
