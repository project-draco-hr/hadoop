{
  cb.append("private static void setupRtiFields()\n{\n");
  cb.append("if (null == " + Consts.RTI_FILTER + ") return;\n");
  cb.append("// we may already have done this\n");
  cb.append("if (null != " + Consts.RTI_FILTER_FIELDS + ") return;\n");
  cb.append("int " + Consts.RIO_PREFIX + "i, "+ Consts.RIO_PREFIX+ "j;\n");
  cb.append(Consts.RTI_FILTER_FIELDS + " = new int [" + Consts.RIO_PREFIX+ "rtiFilter.getFieldTypeInfos().size()];\n");
  cb.append("for (" + Consts.RIO_PREFIX + "i=0; "+ Consts.RIO_PREFIX+ "i<"+ Consts.RTI_FILTER_FIELDS+ ".length; "+ Consts.RIO_PREFIX+ "i++) {\n");
  cb.append(Consts.RTI_FILTER_FIELDS + "[" + Consts.RIO_PREFIX+ "i] = 0;\n");
  cb.append("}\n");
  cb.append("java.util.Iterator<org.apache.hadoop.record.meta." + "FieldTypeInfo> " + Consts.RIO_PREFIX + "itFilter = "+ Consts.RIO_PREFIX+ "rtiFilter.getFieldTypeInfos().iterator();\n");
  cb.append(Consts.RIO_PREFIX + "i=0;\n");
  cb.append("while (" + Consts.RIO_PREFIX + "itFilter.hasNext()) {\n");
  cb.append("org.apache.hadoop.record.meta.FieldTypeInfo " + Consts.RIO_PREFIX + "tInfoFilter = "+ Consts.RIO_PREFIX+ "itFilter.next();\n");
  cb.append("java.util.Iterator<org.apache.hadoop.record.meta." + "FieldTypeInfo> " + Consts.RIO_PREFIX + "it = "+ Consts.RTI_VAR+ ".getFieldTypeInfos().iterator();\n");
  cb.append(Consts.RIO_PREFIX + "j=1;\n");
  cb.append("while (" + Consts.RIO_PREFIX + "it.hasNext()) {\n");
  cb.append("org.apache.hadoop.record.meta.FieldTypeInfo " + Consts.RIO_PREFIX + "tInfo = "+ Consts.RIO_PREFIX+ "it.next();\n");
  cb.append("if (" + Consts.RIO_PREFIX + "tInfo.equals("+ Consts.RIO_PREFIX+ "tInfoFilter)) {\n");
  cb.append(Consts.RTI_FILTER_FIELDS + "[" + Consts.RIO_PREFIX+ "i] = "+ Consts.RIO_PREFIX+ "j;\n");
  cb.append("break;\n");
  cb.append("}\n");
  cb.append(Consts.RIO_PREFIX + "j++;\n");
  cb.append("}\n");
  cb.append(Consts.RIO_PREFIX + "i++;\n");
  cb.append("}\n");
  cb.append("}\n");
}
