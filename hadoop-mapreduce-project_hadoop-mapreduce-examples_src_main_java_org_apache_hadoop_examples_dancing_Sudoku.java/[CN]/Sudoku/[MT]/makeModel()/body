{
  DancingLinks<ColumnName> model=new DancingLinks<ColumnName>();
  for (int x=0; x < size; ++x) {
    for (int num=1; num <= size; ++num) {
      model.addColumn(new ColumnConstraint(num,x));
    }
  }
  for (int y=0; y < size; ++y) {
    for (int num=1; num <= size; ++num) {
      model.addColumn(new RowConstraint(num,y));
    }
  }
  for (int x=0; x < squareYSize; ++x) {
    for (int y=0; y < squareXSize; ++y) {
      for (int num=1; num <= size; ++num) {
        model.addColumn(new SquareConstraint(num,x,y));
      }
    }
  }
  for (int x=0; x < size; ++x) {
    for (int y=0; y < size; ++y) {
      model.addColumn(new CellConstraint(x,y));
    }
  }
  boolean[] rowValues=new boolean[size * size * 4];
  for (int x=0; x < size; ++x) {
    for (int y=0; y < size; ++y) {
      if (board[y][x] == -1) {
        for (int num=1; num <= size; ++num) {
          model.addRow(generateRow(rowValues,x,y,num));
        }
      }
 else {
        model.addRow(generateRow(rowValues,x,y,board[y][x]));
      }
    }
  }
  return model;
}
