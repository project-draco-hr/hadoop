{
  File testDir=new File(System.getProperty("test.build.data","target/test-dir"));
  Configuration conf=new Configuration();
  final String ourUrl=JavaKeyStoreProvider.SCHEME_NAME + "://file/" + testDir+ "/test.jks";
  File file=new File(testDir,"test.jks");
  file.delete();
  conf.set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,ourUrl);
  CredentialProvider provider=CredentialProviderFactory.getProviders(conf).get(0);
  char[] bindpass={'b','i','n','d','p','a','s','s'};
  char[] storepass={'s','t','o','r','e','p','a','s','s'};
  assertEquals(null,provider.getCredentialEntry(LdapGroupsMapping.BIND_PASSWORD_KEY));
  assertEquals(null,provider.getCredentialEntry(LdapGroupsMapping.LDAP_KEYSTORE_PASSWORD_KEY));
  try {
    provider.createCredentialEntry(LdapGroupsMapping.BIND_PASSWORD_KEY,bindpass);
    provider.createCredentialEntry(LdapGroupsMapping.LDAP_KEYSTORE_PASSWORD_KEY,storepass);
    provider.flush();
  }
 catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
  assertArrayEquals(bindpass,provider.getCredentialEntry(LdapGroupsMapping.BIND_PASSWORD_KEY).getCredential());
  assertArrayEquals(storepass,provider.getCredentialEntry(LdapGroupsMapping.LDAP_KEYSTORE_PASSWORD_KEY).getCredential());
  LdapGroupsMapping mapping=new LdapGroupsMapping();
  Assert.assertEquals("bindpass",mapping.getPassword(conf,LdapGroupsMapping.BIND_PASSWORD_KEY,""));
  Assert.assertEquals("storepass",mapping.getPassword(conf,LdapGroupsMapping.LDAP_KEYSTORE_PASSWORD_KEY,""));
  Assert.assertEquals("",mapping.getPassword(conf,"invalid-alias",""));
}
