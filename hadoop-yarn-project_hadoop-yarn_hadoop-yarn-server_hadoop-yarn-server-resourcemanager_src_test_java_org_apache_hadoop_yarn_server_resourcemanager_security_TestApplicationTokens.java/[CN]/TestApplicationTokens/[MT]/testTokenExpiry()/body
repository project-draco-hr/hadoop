{
  MyContainerManager containerManager=new MyContainerManager();
  final MockRM rm=new MockRMWithAMS(new Configuration(),containerManager);
  rm.start();
  final Configuration conf=rm.getConfig();
  final YarnRPC rpc=YarnRPC.create(conf);
  AMRMProtocol rmClient=null;
  try {
    MockNM nm1=rm.registerNode("localhost:1234",5120);
    RMApp app=rm.submitApp(1024);
    nm1.nodeHeartbeat(true);
    int waitCount=0;
    while (containerManager.amContainerEnv == null && waitCount++ < 20) {
      LOG.info("Waiting for AM Launch to happen..");
      Thread.sleep(1000);
    }
    Assert.assertNotNull(containerManager.amContainerEnv);
    RMAppAttempt attempt=app.getCurrentAppAttempt();
    ApplicationAttemptId applicationAttemptId=attempt.getAppAttemptId();
    UserGroupInformation currentUser=UserGroupInformation.createRemoteUser(applicationAttemptId.toString());
    String tokenURLEncodedStr=containerManager.amContainerEnv.get(ApplicationConstants.APPLICATION_MASTER_TOKEN_ENV_NAME);
    LOG.info("AppMasterToken is " + tokenURLEncodedStr);
    Token<? extends TokenIdentifier> token=new Token<TokenIdentifier>();
    token.decodeFromUrlString(tokenURLEncodedStr);
    currentUser.addToken(token);
    rmClient=createRMClient(rm,conf,rpc,currentUser);
    RegisterApplicationMasterRequest request=Records.newRecord(RegisterApplicationMasterRequest.class);
    request.setApplicationAttemptId(applicationAttemptId);
    rmClient.registerApplicationMaster(request);
    FinishApplicationMasterRequest finishAMRequest=Records.newRecord(FinishApplicationMasterRequest.class);
    finishAMRequest.setAppAttemptId(applicationAttemptId);
    finishAMRequest.setFinishApplicationStatus(FinalApplicationStatus.SUCCEEDED);
    finishAMRequest.setDiagnostics("diagnostics");
    finishAMRequest.setTrackingUrl("url");
    rmClient.finishApplicationMaster(finishAMRequest);
    rpc.stopProxy(rmClient,conf);
    rmClient=createRMClient(rm,conf,rpc,currentUser);
    request.setApplicationAttemptId(BuilderUtils.newApplicationAttemptId(BuilderUtils.newApplicationId(12345,78),987));
    AllocateRequest allocateRequest=Records.newRecord(AllocateRequest.class);
    allocateRequest.setApplicationAttemptId(applicationAttemptId);
    try {
      rmClient.allocate(allocateRequest);
      Assert.fail("You got to be kidding me! " + "Using App tokens after app-finish should fail!");
    }
 catch (    Throwable t) {
      LOG.info("Exception found is ",t);
      Assert.assertTrue(t.getCause().getMessage().contains("Password not found for ApplicationAttempt " + applicationAttemptId.toString()));
    }
  }
  finally {
    rm.stop();
    if (rmClient != null) {
      rpc.stopProxy(rmClient,conf);
    }
  }
}
