{
  final String pool="friendlyPool";
  nnRpc.addCachePool(new CachePoolInfo("friendlyPool"));
  final int numFiles=2;
  final int numBlocksPerFile=2;
  final List<String> paths=new ArrayList<String>(numFiles);
  for (int i=0; i < numFiles; i++) {
    Path p=new Path(rootDir,"testCachePaths-" + i);
    FileSystemTestHelper.createFile(dfs,p,numBlocksPerFile,(int)BLOCK_SIZE);
    paths.add(p.toUri().getPath());
  }
  int expected=0;
  waitForExpectedNumCachedBlocks(expected);
  for (int i=0; i < numFiles; i++) {
    PathBasedCacheDirective directive=new PathBasedCacheDirective(paths.get(i),pool);
    PathBasedCacheDescriptor descriptor=nnRpc.addPathBasedCacheDirective(directive);
    assertEquals("Descriptor does not match requested path",paths.get(i),descriptor.getPath());
    assertEquals("Descriptor does not match requested pool",pool,descriptor.getPool());
    expected+=numBlocksPerFile;
    waitForExpectedNumCachedBlocks(expected);
  }
  RemoteIterator<PathBasedCacheDescriptor> entries=nnRpc.listPathBasedCacheDescriptors(0,null,null);
  for (int i=0; i < numFiles; i++) {
    PathBasedCacheDescriptor descriptor=entries.next();
    nnRpc.removePathBasedCacheDescriptor(descriptor.getEntryId());
    expected-=numBlocksPerFile;
    waitForExpectedNumCachedBlocks(expected);
  }
}
