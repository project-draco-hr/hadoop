{
  final String pool="friendlyPool";
  nnRpc.addCachePool(new CachePoolInfo("friendlyPool"));
  final int numFiles=2;
  final int numBlocksPerFile=2;
  final List<String> paths=new ArrayList<String>(numFiles);
  for (int i=0; i < numFiles; i++) {
    Path p=new Path(rootDir,"testCachePaths-" + i);
    FileSystemTestHelper.createFile(dfs,p,numBlocksPerFile,(int)BLOCK_SIZE);
    paths.add(p.toUri().getPath());
  }
  int expected=0;
  waitForExpectedNumCachedBlocks(expected);
  for (int i=0; i < numFiles; i++) {
    PathBasedCacheDirective directive=new PathBasedCacheDirective.Builder().setPath(new Path(paths.get(i))).setPool(pool).build();
    PathBasedCacheDescriptor descriptor=nnRpc.addPathBasedCacheDirective(directive);
    assertEquals("Descriptor does not match requested path",paths.get(i),descriptor.getPath().toUri().getPath());
    assertEquals("Descriptor does not match requested pool",pool,descriptor.getPool());
    expected+=numBlocksPerFile;
    waitForExpectedNumCachedBlocks(expected);
    HdfsBlockLocation[] locations=(HdfsBlockLocation[])dfs.getFileBlockLocations(new Path(paths.get(i)),0,numBlocksPerFile * BLOCK_SIZE);
    assertEquals("Unexpected number of locations",numBlocksPerFile,locations.length);
    for (    HdfsBlockLocation loc : locations) {
      assertEquals("Block should be present on all datanodes",3,loc.getHosts().length);
      DatanodeInfo[] cachedLocs=loc.getLocatedBlock().getCachedLocations();
      assertEquals("Block should be cached on all datanodes",loc.getHosts().length,cachedLocs.length);
    }
  }
  RemoteIterator<PathBasedCacheDescriptor> entries=nnRpc.listPathBasedCacheDescriptors(0,null,null);
  for (int i=0; i < numFiles; i++) {
    PathBasedCacheDescriptor descriptor=entries.next();
    nnRpc.removePathBasedCacheDescriptor(descriptor.getEntryId());
    expected-=numBlocksPerFile;
    waitForExpectedNumCachedBlocks(expected);
  }
}
