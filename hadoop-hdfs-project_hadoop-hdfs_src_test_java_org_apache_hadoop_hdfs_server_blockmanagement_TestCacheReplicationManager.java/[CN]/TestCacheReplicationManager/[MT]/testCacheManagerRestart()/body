{
  final String pool="poolparty";
  String groupName="partygroup";
  FsPermission mode=new FsPermission((short)0777);
  int weight=747;
  dfs.addCachePool(new CachePoolInfo(pool).setGroupName(groupName).setMode(mode).setWeight(weight));
  RemoteIterator<CachePoolInfo> pit=dfs.listCachePools();
  assertTrue("No cache pools found",pit.hasNext());
  CachePoolInfo info=pit.next();
  assertEquals(pool,info.getPoolName());
  assertEquals(groupName,info.getGroupName());
  assertEquals(mode,info.getMode());
  assertEquals(weight,(int)info.getWeight());
  assertFalse("Unexpected # of cache pools found",pit.hasNext());
  int numEntries=10;
  String entryPrefix="/party-";
  for (int i=0; i < numEntries; i++) {
    dfs.addPathBasedCacheDirective(new PathBasedCacheDirective(entryPrefix + i,pool));
  }
  RemoteIterator<PathBasedCacheDescriptor> dit=dfs.listPathBasedCacheDescriptors(null,null);
  for (int i=0; i < numEntries; i++) {
    assertTrue("Unexpected # of cache entries: " + i,dit.hasNext());
    PathBasedCacheDescriptor cd=dit.next();
    assertEquals(i + 1,cd.getEntryId());
    assertEquals(entryPrefix + i,cd.getPath());
    assertEquals(pool,cd.getPool());
  }
  assertFalse("Unexpected # of cache descriptors found",dit.hasNext());
  cluster.restartNameNode();
  pit=dfs.listCachePools();
  assertTrue("No cache pools found",pit.hasNext());
  info=pit.next();
  assertEquals(pool,info.getPoolName());
  assertEquals(pool,info.getPoolName());
  assertEquals(groupName,info.getGroupName());
  assertEquals(mode,info.getMode());
  assertEquals(weight,(int)info.getWeight());
  assertFalse("Unexpected # of cache pools found",pit.hasNext());
  dit=dfs.listPathBasedCacheDescriptors(null,null);
  for (int i=0; i < numEntries; i++) {
    assertTrue("Unexpected # of cache entries: " + i,dit.hasNext());
    PathBasedCacheDescriptor cd=dit.next();
    assertEquals(i + 1,cd.getEntryId());
    assertEquals(entryPrefix + i,cd.getPath());
    assertEquals(pool,cd.getPool());
  }
  assertFalse("Unexpected # of cache descriptors found",dit.hasNext());
}
