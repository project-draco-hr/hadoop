{
  RpcCallCache cache=new RpcCallCache("Test",10);
  int size=0;
  for (int clientId=0; clientId < 20; clientId++) {
    InetAddress clientIp=InetAddress.getByName("1.1.1." + clientId);
    System.out.println("Adding " + clientIp);
    cache.checkOrAddToCache(clientIp,0);
    size=Math.min(++size,10);
    System.out.println("Cache size " + cache.size());
    assertEquals(size,cache.size());
    int startEntry=Math.max(clientId - 10 + 1,0);
    Iterator<Entry<ClientRequest,CacheEntry>> iterator=cache.iterator();
    for (int i=0; i < size; i++) {
      ClientRequest key=iterator.next().getKey();
      System.out.println("Entry " + key.getClientId());
      assertEquals(InetAddress.getByName("1.1.1." + (startEntry + i)),key.getClientId());
    }
    for (int i=0; i < size; i++) {
      CacheEntry e=cache.checkOrAddToCache(InetAddress.getByName("1.1.1." + (startEntry + i)),0);
      assertNotNull(e);
      assertTrue(e.isInProgress());
      assertFalse(e.isCompleted());
    }
  }
}
