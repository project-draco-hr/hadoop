{
  Configuration conf=taskContext.getConfiguration();
  final int count=conf.getInt(MAP_SLEEP_COUNT,1);
  if (count < 0)   throw new IOException("Invalid map count: " + count);
  final int redcount=conf.getInt(REDUCE_SLEEP_COUNT,1);
  if (redcount < 0)   throw new IOException("Invalid reduce count: " + redcount);
  final int emitPerMapTask=(redcount * taskContext.getNumReduceTasks());
  return new RecordReader<IntWritable,IntWritable>(){
    private int records=0;
    private int emitCount=0;
    private IntWritable key=null;
    private IntWritable value=null;
    public void initialize(    InputSplit split,    TaskAttemptContext context){
    }
    public boolean nextKeyValue() throws IOException {
      if (count == 0) {
        return false;
      }
      key=new IntWritable();
      key.set(emitCount);
      int emit=emitPerMapTask / count;
      if ((emitPerMapTask) % count > records) {
        ++emit;
      }
      emitCount+=emit;
      value=new IntWritable();
      value.set(emit);
      return records++ < count;
    }
    public IntWritable getCurrentKey(){
      return key;
    }
    public IntWritable getCurrentValue(){
      return value;
    }
    public void close() throws IOException {
    }
    public float getProgress() throws IOException {
      return count == 0 ? 100 : records / ((float)count);
    }
  }
;
}
