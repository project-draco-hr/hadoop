{
  rm.start();
  MockNM amNodeManager=rm.registerNode("amNM:1234",2048);
  rm.submitApp(1024);
  amNodeManager.nodeHeartbeat(true);
  WebResource r=resource();
  try {
    r.path("ws").path("v1").path("cluster").path("apps").path("application_invalid_12").accept("application/json").get(JSONObject.class);
    fail("should have thrown exception on invalid appid");
  }
 catch (  UniformInterfaceException ue) {
    ClientResponse response=ue.getResponse();
    assertEquals(Status.BAD_REQUEST,response.getClientResponseStatus());
    JSONObject msg=response.getEntity(JSONObject.class);
    JSONObject exception=msg.getJSONObject("RemoteException");
    assertEquals("correct number of elements",3,exception.length());
    String message=exception.getString("message");
    String type=exception.getString("exception");
    String classname=exception.getString("javaClassName");
    checkStringMatch("exception message","For input string: \"invalid\"",message);
    checkStringMatch("exception type","NumberFormatException",type);
    checkStringMatch("exception classname","java.lang.NumberFormatException",classname);
  }
 finally {
    rm.stop();
  }
}
