{
  final DFSClient mockClient1=createMockClient();
  Mockito.doReturn(false).when(mockClient1).renewLease();
  assertSame(renewer,LeaseRenewer.getInstance(FAKE_AUTHORITY,FAKE_UGI_A,mockClient1));
  DFSOutputStream mockStream1=Mockito.mock(DFSOutputStream.class);
  long fileId=456L;
  renewer.put(fileId,mockStream1,mockClient1);
  final DFSClient mockClient2=createMockClient();
  Mockito.doReturn(true).when(mockClient2).renewLease();
  assertSame(renewer,LeaseRenewer.getInstance(FAKE_AUTHORITY,FAKE_UGI_A,mockClient2));
  DFSOutputStream mockStream2=Mockito.mock(DFSOutputStream.class);
  renewer.put(fileId,mockStream2,mockClient2);
  GenericTestUtils.waitFor(new Supplier<Boolean>(){
    @Override public Boolean get(){
      try {
        Mockito.verify(mockClient1,Mockito.atLeastOnce()).renewLease();
        Mockito.verify(mockClient2,Mockito.atLeastOnce()).renewLease();
        return true;
      }
 catch (      AssertionError err) {
        LeaseRenewer.LOG.warn("Not yet satisfied",err);
        return false;
      }
catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
,100,10000);
  renewer.closeFile(fileId,mockClient1);
  renewer.closeFile(fileId,mockClient2);
}
