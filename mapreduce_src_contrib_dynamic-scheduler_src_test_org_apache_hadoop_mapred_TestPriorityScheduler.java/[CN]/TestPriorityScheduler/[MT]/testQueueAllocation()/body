{
  addQueues(QUEUES);
  setSpending("queue1",1.0f);
  setSpending("queue2",2.0f);
  setBudgets(QUEUES,new float[]{100.0f,100.0f});
  scheduler.allocations.setUsage("queue1",2,0);
  scheduler.allocations.setUsage("queue2",3,0);
  timer.runTask();
  Map<String,PriorityScheduler.QueueQuota> queueQuota=((PriorityScheduler)scheduler.scheduler).getQueueQuota(100,10,PriorityScheduler.MAP);
  assertEquals(2,queueQuota.size());
  for (  PriorityScheduler.QueueQuota quota : queueQuota.values()) {
    if (quota.name.equals("queue1")) {
      assertEquals(Math.round(100 * 1.0f / 3.0f),quota.quota,0.1f);
    }
 else {
      assertEquals(Math.round(100 * 2.0f / 3.0f),quota.quota,0.1f);
    }
    assertTrue(quota.mappers == quota.quota);
  }
  queueQuota=((PriorityScheduler)scheduler.scheduler).getQueueQuota(100,10,PriorityScheduler.REDUCE);
  assertEquals(2,queueQuota.size());
  for (  PriorityScheduler.QueueQuota quota : queueQuota.values()) {
    if (quota.name.equals("queue1")) {
      assertEquals(Math.round(10 * 1.0f / 3.0f),quota.quota,0.1f);
    }
 else {
      assertEquals(Math.round(10 * 2.0f / 3.0f),quota.quota,0.1f);
    }
    assertTrue(quota.reducers == quota.quota);
  }
}
