{
  final Server jetty=createJettyServer();
  Context context=new Context();
  context.setContextPath("/foo");
  jetty.setHandler(context);
  context.addFilter(new FilterHolder(AFilter.class),"/*",0);
  context.addServlet(new ServletHolder(PingServlet.class),"/bar");
  try {
    jetty.start();
    URL nonAuthURL=new URL(getJettyURL() + "/foo/bar");
    URL authURL=new URL(getJettyURL() + "/foo/bar?authenticated=foo");
    URL authURL2=new URL(getJettyURL() + "/foo/bar?authenticated=bar");
    DelegationTokenAuthenticatedURL.Token token=new DelegationTokenAuthenticatedURL.Token();
    DelegationTokenAuthenticatedURL aUrl=new DelegationTokenAuthenticatedURL();
    try {
      aUrl.getDelegationToken(nonAuthURL,token,FOO_USER);
      Assert.fail();
    }
 catch (    Exception ex) {
      Assert.assertTrue(ex.getMessage().contains("401"));
    }
    aUrl.getDelegationToken(authURL,token,FOO_USER);
    Assert.assertNotNull(token.getDelegationToken());
    Assert.assertEquals(new Text("token-kind"),token.getDelegationToken().getKind());
    aUrl.renewDelegationToken(authURL,token);
    try {
      aUrl.renewDelegationToken(nonAuthURL,token);
      Assert.fail();
    }
 catch (    Exception ex) {
      Assert.assertTrue(ex.getMessage().contains("401"));
    }
    aUrl.getDelegationToken(authURL,token,FOO_USER);
    try {
      aUrl.renewDelegationToken(authURL2,token);
      Assert.fail();
    }
 catch (    Exception ex) {
      Assert.assertTrue(ex.getMessage().contains("403"));
    }
    aUrl.getDelegationToken(authURL,token,FOO_USER);
    aUrl.cancelDelegationToken(authURL,token);
    aUrl.getDelegationToken(authURL,token,FOO_USER);
    aUrl.cancelDelegationToken(nonAuthURL,token);
    aUrl.getDelegationToken(authURL,token,FOO_USER);
    try {
      aUrl.renewDelegationToken(nonAuthURL,token);
    }
 catch (    Exception ex) {
      Assert.assertTrue(ex.getMessage().contains("401"));
    }
  }
  finally {
    jetty.stop();
  }
}
