{
  assertGauge("SnapshottableDirectories",0,getMetrics(NS_METRICS));
  assertCounter("AllowSnapshotOps",0L,getMetrics(NN_METRICS));
  assertCounter("DisallowSnapshotOps",0L,getMetrics(NN_METRICS));
  hdfs.allowSnapshot(sub1.toString());
  assertGauge("SnapshottableDirectories",1,getMetrics(NS_METRICS));
  assertCounter("AllowSnapshotOps",1L,getMetrics(NN_METRICS));
  Path sub2=new Path(dir,"sub2");
  Path file=new Path(sub2,"file");
  DFSTestUtil.createFile(hdfs,file,1024,REPLICATION,seed);
  hdfs.allowSnapshot(sub2.toString());
  assertGauge("SnapshottableDirectories",2,getMetrics(NS_METRICS));
  assertCounter("AllowSnapshotOps",2L,getMetrics(NN_METRICS));
  Path subsub1=new Path(sub1,"sub1sub1");
  Path subfile=new Path(subsub1,"file");
  DFSTestUtil.createFile(hdfs,subfile,1024,REPLICATION,seed);
  hdfs.allowSnapshot(subsub1.toString());
  assertGauge("SnapshottableDirectories",3,getMetrics(NS_METRICS));
  assertCounter("AllowSnapshotOps",3L,getMetrics(NN_METRICS));
  hdfs.allowSnapshot(sub1.toString());
  assertGauge("SnapshottableDirectories",3,getMetrics(NS_METRICS));
  assertCounter("AllowSnapshotOps",4L,getMetrics(NN_METRICS));
  hdfs.disallowSnapshot(sub1.toString());
  assertGauge("SnapshottableDirectories",2,getMetrics(NS_METRICS));
  assertCounter("DisallowSnapshotOps",1L,getMetrics(NN_METRICS));
  hdfs.delete(subsub1,true);
  assertGauge("SnapshottableDirectories",1,getMetrics(NS_METRICS));
  SnapshottableDirectoryStatus[] status=hdfs.getSnapshottableDirListing();
  assertEquals(1,status.length);
  assertCounter("ListSnapshottableDirOps",1L,getMetrics(NN_METRICS));
}
