{
  assertGauge("Snapshots",0L,getMetrics(NS_METRICS));
  assertCounter("CreateSnapshotOps",0L,getMetrics(NN_METRICS));
  try {
    hdfs.createSnapshot(sub1,"s1");
  }
 catch (  Exception e) {
  }
  assertGauge("Snapshots",0L,getMetrics(NS_METRICS));
  assertCounter("CreateSnapshotOps",1L,getMetrics(NN_METRICS));
  hdfs.allowSnapshot(sub1.toString());
  hdfs.createSnapshot(sub1,"s1");
  assertGauge("Snapshots",1L,getMetrics(NS_METRICS));
  assertCounter("CreateSnapshotOps",2L,getMetrics(NN_METRICS));
  hdfs.createSnapshot(sub1,"s2");
  assertGauge("Snapshots",2L,getMetrics(NS_METRICS));
  assertCounter("CreateSnapshotOps",3L,getMetrics(NN_METRICS));
  hdfs.getSnapshotDiffReport(sub1,"s1","s2");
  assertCounter("SnapshotDiffReportOps",1L,getMetrics(NN_METRICS));
  Path subsub1=new Path(sub1,"sub1sub1");
  Path subfile=new Path(subsub1,"file");
  DFSTestUtil.createFile(hdfs,subfile,1024,REPLICATION,seed);
  hdfs.allowSnapshot(subsub1.toString());
  hdfs.createSnapshot(subsub1,"s11");
  assertGauge("Snapshots",3L,getMetrics(NS_METRICS));
  assertCounter("CreateSnapshotOps",4L,getMetrics(NN_METRICS));
  hdfs.deleteSnapshot(sub1,"s2");
  assertGauge("Snapshots",2L,getMetrics(NS_METRICS));
  assertCounter("DeleteSnapshotOps",1L,getMetrics(NN_METRICS));
  hdfs.renameSnapshot(sub1,"s1","NewS1");
  assertGauge("Snapshots",2L,getMetrics(NS_METRICS));
  assertCounter("RenameSnapshotOps",1L,getMetrics(NN_METRICS));
}
