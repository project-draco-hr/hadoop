{
  YarnConfiguration conf=new YarnConfiguration();
  UserGroupInformation.setConfiguration(conf);
  conf.set(YarnConfiguration.RECOVERY_ENABLED,"true");
  conf.set(YarnConfiguration.RM_STORE,MemoryRMStateStore.class.getName());
  conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED,true);
  conf.setInt(YarnConfiguration.RM_AM_EXPIRY_INTERVAL_MS,6000);
  final ControlledClock clock=new ControlledClock(new SystemClock());
  clock.setTime(0);
  MemoryRMStateStore memStore=new MemoryRMStateStore(){
    @Override public synchronized RMState loadState() throws Exception {
      clock.setTime(8000);
      return super.loadState();
    }
  }
;
  memStore.init(conf);
  final ApplicationAttemptId attemptId=mock(ApplicationAttemptId.class);
  final Dispatcher dispatcher=mock(Dispatcher.class);
  final boolean[] expired=new boolean[]{false};
  final AMLivelinessMonitor monitor=new AMLivelinessMonitor(dispatcher,clock){
    @Override protected void expire(    ApplicationAttemptId id){
      Assert.assertEquals(id,attemptId);
      expired[0]=true;
    }
  }
;
  monitor.register(attemptId);
  MockRM rm=new MockRM(conf,memStore){
    @Override protected AMLivelinessMonitor createAMLivelinessMonitor(){
      return monitor;
    }
  }
;
  rm.start();
  while (monitor.getServiceState() != Service.STATE.STARTED) {
    Thread.sleep(100);
  }
  Assert.assertFalse(expired[0]);
  rm.stop();
}
