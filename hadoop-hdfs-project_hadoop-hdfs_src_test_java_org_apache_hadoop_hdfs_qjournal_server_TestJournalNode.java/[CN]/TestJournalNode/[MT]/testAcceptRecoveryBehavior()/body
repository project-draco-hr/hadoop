{
  try {
    ch.prepareRecovery(1L).get();
    fail("Did not throw IllegalState when trying to run paxos without an epoch");
  }
 catch (  ExecutionException ise) {
    GenericTestUtils.assertExceptionContains("bad epoch",ise);
  }
  ch.newEpoch(1).get();
  ch.setEpoch(1);
  PrepareRecoveryResponseProto prep=ch.prepareRecovery(1L).get();
  System.err.println("Prep: " + prep);
  assertFalse(prep.hasAcceptedInEpoch());
  assertFalse(prep.hasSegmentState());
  ch.startLogSegment(1L).get();
  ch.sendEdits(1L,1L,1,QJMTestUtil.createTxnData(1,1)).get();
  prep=ch.prepareRecovery(1L).get();
  System.err.println("Prep: " + prep);
  assertFalse(prep.hasAcceptedInEpoch());
  assertTrue(prep.hasSegmentState());
  ch.acceptRecovery(prep.getSegmentState(),new URL("file:///dev/null")).get();
  ch.newEpoch(2);
  ch.setEpoch(2);
  prep=ch.prepareRecovery(1L).get();
  assertEquals(1L,prep.getAcceptedInEpoch());
  assertEquals(1L,prep.getSegmentState().getEndTxId());
  ch.setEpoch(1);
  try {
    ch.prepareRecovery(1L).get();
    fail("prepare from earlier epoch not rejected");
  }
 catch (  ExecutionException ioe) {
    GenericTestUtils.assertExceptionContains("epoch 1 is less than the last promised epoch 2",ioe);
  }
  try {
    ch.acceptRecovery(prep.getSegmentState(),new URL("file:///dev/null")).get();
    fail("accept from earlier epoch not rejected");
  }
 catch (  ExecutionException ioe) {
    GenericTestUtils.assertExceptionContains("epoch 1 is less than the last promised epoch 2",ioe);
  }
}
