{
  InetSocketAddress addr=jn.getBoundHttpAddress();
  assertTrue(addr.getPort() > 0);
  String urlRoot="http://localhost:" + addr.getPort();
  String pageContents=DFSTestUtil.urlGet(new URL(urlRoot + "/jmx"));
  assertTrue("Bad contents: " + pageContents,pageContents.contains("Hadoop:service=JournalNode,name=JvmMetrics"));
  pageContents=DFSTestUtil.urlGet(new URL(urlRoot + "/journalstatus.jsp"));
  assertTrue(pageContents.contains("JournalNode"));
  byte[] EDITS_DATA=QJMTestUtil.createTxnData(1,3);
  IPCLoggerChannel ch=new IPCLoggerChannel(conf,FAKE_NSINFO,journalId,jn.getBoundIpcAddress());
  ch.newEpoch(1).get();
  ch.setEpoch(1);
  ch.startLogSegment(1).get();
  ch.sendEdits(1L,1,3,EDITS_DATA).get();
  ch.finalizeLogSegment(1,3).get();
  byte[] retrievedViaHttp=DFSTestUtil.urlGetBytes(new URL(urlRoot + "/getJournal?segmentTxId=1&jid=" + journalId));
  byte[] expected=Bytes.concat(Ints.toByteArray(HdfsConstants.LAYOUT_VERSION),EDITS_DATA);
  assertArrayEquals(expected,retrievedViaHttp);
  URL badUrl=new URL(urlRoot + "/getJournal?segmentTxId=12345&jid=" + journalId);
  HttpURLConnection connection=(HttpURLConnection)badUrl.openConnection();
  try {
    assertEquals(404,connection.getResponseCode());
  }
  finally {
    connection.disconnect();
  }
}
