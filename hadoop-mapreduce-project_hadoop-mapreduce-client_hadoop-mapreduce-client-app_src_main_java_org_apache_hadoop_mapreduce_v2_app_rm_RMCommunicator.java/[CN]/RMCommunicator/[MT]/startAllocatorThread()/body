{
  allocatorThread=new Thread(new Runnable(){
    @SuppressWarnings("unchecked") @Override public void run(){
      while (!stopped.get() && !Thread.currentThread().isInterrupted()) {
        try {
          Thread.sleep(rmPollInterval);
          try {
            heartbeat();
          }
 catch (          YarnRuntimeException e) {
            LOG.error("Error communicating with RM: " + e.getMessage(),e);
            return;
          }
catch (          InvalidToken e) {
            eventHandler.handle(new JobEvent(job.getID(),JobEventType.JOB_AM_REBOOT));
            LOG.error("Error in authencating with RM: ",e);
            return;
          }
catch (          Exception e) {
            LOG.error("ERROR IN CONTACTING RM. ",e);
            continue;
          }
          lastHeartbeatTime=context.getClock().getTime();
          executeHeartbeatCallbacks();
        }
 catch (        InterruptedException e) {
          if (!stopped.get()) {
            LOG.warn("Allocated thread interrupted. Returning.");
          }
          return;
        }
      }
    }
  }
);
  allocatorThread.setName("RMCommunicator Allocator");
  allocatorThread.start();
}
