{
  setShardGeneration(conf,shards);
  IndexUpdateConfiguration iconf=new IndexUpdateConfiguration(conf);
  Shard.setIndexShards(iconf,shards);
  iconf.setIOSortMB(iconf.getIOSortMB() / 2);
  JobConf jobConf=new JobConf(conf,IndexUpdater.class);
  jobConf.setJobName(this.getClass().getName() + "_" + System.currentTimeMillis());
  FileInputFormat.setInputPaths(jobConf,inputPaths);
  FileOutputFormat.setOutputPath(jobConf,outputPath);
  jobConf.setNumMapTasks(numMapTasks);
  jobConf.setNumReduceTasks(shards.length);
  jobConf.setInputFormat(iconf.getIndexInputFormatClass());
  Path[] inputs=FileInputFormat.getInputPaths(jobConf);
  StringBuilder buffer=new StringBuilder(inputs[0].toString());
  for (int i=1; i < inputs.length; i++) {
    buffer.append(",");
    buffer.append(inputs[i].toString());
  }
  LOG.info("mapred.input.dir = " + buffer.toString());
  LOG.info("mapreduce.output.fileoutputformat.outputdir = " + FileOutputFormat.getOutputPath(jobConf).toString());
  LOG.info("mapreduce.job.maps = " + jobConf.getNumMapTasks());
  LOG.info("mapreduce.job.reduces = " + jobConf.getNumReduceTasks());
  LOG.info(shards.length + " shards = " + iconf.getIndexShards());
  LOG.info("mapred.input.format.class = " + jobConf.getInputFormat().getClass().getName());
  jobConf.setMapOutputKeyClass(IndexUpdateMapper.getMapOutputKeyClass());
  jobConf.setMapOutputValueClass(IndexUpdateMapper.getMapOutputValueClass());
  jobConf.setOutputKeyClass(IndexUpdateReducer.getOutputKeyClass());
  jobConf.setOutputValueClass(IndexUpdateReducer.getOutputValueClass());
  jobConf.setMapperClass(IndexUpdateMapper.class);
  jobConf.setPartitionerClass(IndexUpdatePartitioner.class);
  jobConf.setCombinerClass(IndexUpdateCombiner.class);
  jobConf.setReducerClass(IndexUpdateReducer.class);
  jobConf.setOutputFormat(IndexUpdateOutputFormat.class);
  return jobConf;
}
