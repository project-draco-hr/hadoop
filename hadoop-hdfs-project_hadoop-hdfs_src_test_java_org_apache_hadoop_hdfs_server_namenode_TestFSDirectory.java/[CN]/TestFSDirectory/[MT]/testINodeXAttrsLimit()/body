{
  List<XAttr> existingXAttrs=Lists.newArrayListWithCapacity(2);
  XAttr xAttr1=(new XAttr.Builder()).setNameSpace(XAttr.NameSpace.USER).setName("a1").setValue(new byte[]{0x31,0x32,0x33}).build();
  XAttr xAttr2=(new XAttr.Builder()).setNameSpace(XAttr.NameSpace.USER).setName("a2").setValue(new byte[]{0x31,0x31,0x31}).build();
  existingXAttrs.add(xAttr1);
  existingXAttrs.add(xAttr2);
  XAttr newXAttr=(new XAttr.Builder()).setNameSpace(XAttr.NameSpace.SYSTEM).setName("a3").setValue(new byte[]{0x33,0x33,0x33}).build();
  List<XAttr> xAttrs=fsdir.setINodeXAttr(existingXAttrs,newXAttr,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
  Assert.assertEquals(xAttrs.size(),3);
  XAttr newXAttr1=(new XAttr.Builder()).setNameSpace(XAttr.NameSpace.TRUSTED).setName("a4").setValue(new byte[]{0x34,0x34,0x34}).build();
  try {
    fsdir.setINodeXAttr(existingXAttrs,newXAttr1,EnumSet.of(XAttrSetFlag.CREATE,XAttrSetFlag.REPLACE));
    Assert.fail("Setting user visable xattr on inode should fail if " + "reaching limit.");
  }
 catch (  IOException e) {
    GenericTestUtils.assertExceptionContains("Cannot add additional XAttr " + "to inode, would exceed limit",e);
  }
}
