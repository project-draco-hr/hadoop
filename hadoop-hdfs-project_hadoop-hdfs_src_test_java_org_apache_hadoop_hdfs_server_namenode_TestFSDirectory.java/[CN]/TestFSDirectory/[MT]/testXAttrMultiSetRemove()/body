{
  List<XAttr> existingXAttrs=Lists.newArrayListWithCapacity(0);
  final Random rand=new Random(0xFEEDA);
  int numExpectedXAttrs=0;
  while (numExpectedXAttrs < numGeneratedXAttrs) {
    LOG.info("Currently have " + numExpectedXAttrs + " xattrs");
    final int numToAdd=rand.nextInt(5) + 1;
    List<XAttr> toAdd=Lists.newArrayListWithCapacity(numToAdd);
    for (int i=0; i < numToAdd; i++) {
      if (numExpectedXAttrs >= numGeneratedXAttrs) {
        break;
      }
      toAdd.add(generatedXAttrs.get(numExpectedXAttrs));
      numExpectedXAttrs++;
    }
    LOG.info("Attempting to add " + toAdd.size() + " XAttrs");
    for (int i=0; i < toAdd.size(); i++) {
      LOG.info("Will add XAttr " + toAdd.get(i));
    }
    List<XAttr> newXAttrs=FSDirXAttrOp.setINodeXAttrs(fsdir,existingXAttrs,toAdd,EnumSet.of(XAttrSetFlag.CREATE));
    verifyXAttrsPresent(newXAttrs,numExpectedXAttrs);
    existingXAttrs=newXAttrs;
  }
  while (numExpectedXAttrs > 0) {
    LOG.info("Currently have " + numExpectedXAttrs + " xattrs");
    final int numToRemove=rand.nextInt(5) + 1;
    List<XAttr> toRemove=Lists.newArrayListWithCapacity(numToRemove);
    for (int i=0; i < numToRemove; i++) {
      if (numExpectedXAttrs == 0) {
        break;
      }
      toRemove.add(generatedXAttrs.get(numExpectedXAttrs - 1));
      numExpectedXAttrs--;
    }
    final int expectedNumToRemove=toRemove.size();
    LOG.info("Attempting to remove " + expectedNumToRemove + " XAttrs");
    List<XAttr> removedXAttrs=Lists.newArrayList();
    List<XAttr> newXAttrs=FSDirXAttrOp.filterINodeXAttrs(existingXAttrs,toRemove,removedXAttrs);
    assertEquals("Unexpected number of removed XAttrs",expectedNumToRemove,removedXAttrs.size());
    verifyXAttrsPresent(newXAttrs,numExpectedXAttrs);
    existingXAttrs=newXAttrs;
  }
}
