{
  final INode root=fsdir.getINode("/");
  LOG.info("Original tree");
  final StringBuffer b1=root.dumpTreeRecursively();
  System.out.println("b1=" + b1);
  final BufferedReader in=new BufferedReader(new StringReader(b1.toString()));
  String line=in.readLine();
  checkClassName(line);
  for (; (line=in.readLine()) != null; ) {
    line=line.trim();
    if (!line.contains("snapshot")) {
      Assert.assertTrue(line.startsWith(INodeDirectory.DUMPTREE_LAST_ITEM) || line.startsWith(INodeDirectory.DUMPTREE_EXCEPT_LAST_ITEM));
      checkClassName(line);
    }
  }
  LOG.info("Create a new file " + file4);
  DFSTestUtil.createFile(hdfs,file4,1024,REPLICATION,seed);
  final StringBuffer b2=root.dumpTreeRecursively();
  System.out.println("b2=" + b2);
  int i=0;
  int j=b1.length() - 1;
  for (; b1.charAt(i) == b2.charAt(i); i++)   ;
  int k=b2.length() - 1;
  for (; b1.charAt(j) == b2.charAt(k); j--, k--)   ;
  final String diff=b2.substring(i,k + 1);
  System.out.println("i=" + i + ", j="+ j+ ", k="+ k);
  System.out.println("diff=" + diff);
  Assert.assertTrue(i > j);
  Assert.assertTrue(diff.contains(file4.getName()));
}
