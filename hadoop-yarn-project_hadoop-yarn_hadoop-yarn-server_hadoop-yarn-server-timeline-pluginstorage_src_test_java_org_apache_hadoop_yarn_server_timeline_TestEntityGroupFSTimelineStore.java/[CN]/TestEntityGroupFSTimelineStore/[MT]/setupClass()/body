{
  config.setBoolean(YarnConfiguration.TIMELINE_SERVICE_TTL_ENABLE,false);
  config.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_ENTITY_TYPES,"YARN_APPLICATION,YARN_APPLICATION_ATTEMPT,YARN_CONTAINER");
  config.setInt(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_APP_CACHE_SIZE,CACHE_TEST_CACHE_SIZE);
  config.set(MiniDFSCluster.HDFS_MINIDFS_BASEDIR,TEST_ROOT_DIR.toString());
  HdfsConfiguration hdfsConfig=new HdfsConfiguration();
  hdfsCluster=new MiniDFSCluster.Builder(hdfsConfig).numDataNodes(1).build();
  fs=hdfsCluster.getFileSystem();
  fc=FileContext.getFileContext(hdfsCluster.getURI(0),config);
  sampleAppIds=new ArrayList<>(CACHE_TEST_CACHE_SIZE + 1);
  for (int i=0; i < CACHE_TEST_CACHE_SIZE + 1; i++) {
    ApplicationId appId=ApplicationId.fromString(ConverterUtils.APPLICATION_PREFIX + "_" + SAMPLE_APP_PREFIX_CACHE_TEST+ i);
    sampleAppIds.add(appId);
  }
  mainTestAppId=sampleAppIds.get(0);
  mainTestAppDirPath=getTestRootPath(mainTestAppId.toString());
  mainEntityLogFileName=EntityGroupFSTimelineStore.ENTITY_LOG_PREFIX + EntityGroupPlugInForTest.getStandardTimelineGroupId(mainTestAppId);
  testDoneDirPath=getTestRootPath("done");
  config.set(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR,testDoneDirPath.toString());
}
