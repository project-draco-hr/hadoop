{
  Thread mainThread=Thread.currentThread();
  mainThread.setName("testMain");
  assertEquals(EntityGroupPlugInForTest.class.getName(),store.getConfig().get(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES));
  EntityGroupFSTimelineStore.AppLogs appLogs=store.new AppLogs(mainTestAppId,mainTestAppDirPath,AppState.COMPLETED);
  final EntityCacheItem cacheItem=new EntityCacheItem(EntityGroupPlugInForTest.getStandardTimelineGroupId(mainTestAppId),config);
  cacheItem.setAppLogs(appLogs);
  store.setCachedLogs(EntityGroupPlugInForTest.getStandardTimelineGroupId(mainTestAppId),cacheItem);
  ExecutorService threadExecutor=Executors.newSingleThreadExecutor();
  FutureTask<TimelineEntity> blockingReader=new FutureTask<>(new Callable<TimelineEntity>(){
    public TimelineEntity call() throws Exception {
      Thread currThread=Thread.currentThread();
      currThread.setName("blockingReader");
      return store.getEntityBlocking(mainTestAppId.toString(),"type_3",EnumSet.allOf(TimelineReader.Field.class));
    }
  }
);
  threadExecutor.execute(blockingReader);
  try {
    while (!store.testCacheReferenced) {
      Thread.sleep(300);
    }
  }
 catch (  InterruptedException e) {
    fail("Interrupted on exception " + e);
  }
  for (  ApplicationId appId : sampleAppIds) {
    if (appId.equals(mainTestAppId)) {
      continue;
    }
    EntityGroupFSTimelineStore.AppLogs currAppLog=store.new AppLogs(appId,getTestRootPath(appId.toString()),AppState.COMPLETED);
    EntityCacheItem item=new EntityCacheItem(EntityGroupPlugInForTest.getStandardTimelineGroupId(appId),config);
    item.setAppLogs(currAppLog);
    store.setCachedLogs(EntityGroupPlugInForTest.getStandardTimelineGroupId(appId),item);
  }
  assertEquals(1,cacheItem.getRefCount());
  store.testCanProceed=true;
  TimelineEntity entity3=blockingReader.get();
  assertNotNull(entity3);
  assertEquals(entityNew.getStartTime(),entity3.getStartTime());
  assertEquals(0,cacheItem.getRefCount());
  threadExecutor.shutdownNow();
}
