{
  ExecutorService exec=Executors.newFixedThreadPool(NUM_THREADS);
  List<Future<Void>> futures=new ArrayList<Future<Void>>(NUM_THREADS);
  for (int i=0; i < NUM_THREADS; i++) {
    futures.add(exec.submit(new Callable<Void>(){
      public Void call() throws Exception {
        JobConf jobConf=mr.createJobConf();
        runSleepJob(jobConf);
        return null;
      }
    }
));
  }
  JobClient jc=new JobClient(mr.createJobConf(null));
  for (  Future<Void> future : futures) {
    while (true) {
      try {
        future.get(3,TimeUnit.SECONDS);
        break;
      }
 catch (      TimeoutException te) {
      }
      checkServlet(true);
      checkServlet(false);
      JobStatus jobs[]=jc.getAllJobs();
      if (jobs == null) {
        System.err.println("No jobs running, not checking tasklog servlet");
        continue;
      }
      for (      JobStatus j : jobs) {
        System.err.println("Checking task graph for " + j.getJobID());
        try {
          checkTaskGraphServlet(j.getJobID());
        }
 catch (        AssertionError err) {
          RunningJob rj=jc.getJob(j.getJobID());
          if (!rj.isRetired()) {
            throw err;
          }
        }
      }
    }
  }
}
