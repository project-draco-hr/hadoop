{
  rm.start();
  MockNM nm=new MockNM("127.0.0.1:1234",24 * 1024,rm.getResourceTrackerService());
  nm.registerNode();
  try {
    RMApp app1=rm.submitApp(10,"app1","user1",null,"b1");
    WebResource r=resource();
    MultivaluedMapImpl params=new MultivaluedMapImpl();
    params.add("nodeId","127.0.0.1");
    ClientResponse response=r.path("ws").path("v1").path("cluster").path("scheduler/activities").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    JSONObject json=response.getEntity(JSONObject.class);
    nm.nodeHeartbeat(true);
    Thread.sleep(1000);
    response=r.path("ws").path("v1").path("cluster").path("scheduler/activities").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    json=response.getEntity(JSONObject.class);
    verifyNumberOfAllocations(json,1);
    JSONObject allocations=json.getJSONObject("allocations");
    verifyStateOfAllocations(allocations,"finalAllocationState","ALLOCATED");
    verifyNumberOfNodes(allocations,6);
    verifyQueueOrder(json.getJSONObject("allocations"),"root-a-b-b1");
  }
  finally {
    rm.stop();
  }
}
