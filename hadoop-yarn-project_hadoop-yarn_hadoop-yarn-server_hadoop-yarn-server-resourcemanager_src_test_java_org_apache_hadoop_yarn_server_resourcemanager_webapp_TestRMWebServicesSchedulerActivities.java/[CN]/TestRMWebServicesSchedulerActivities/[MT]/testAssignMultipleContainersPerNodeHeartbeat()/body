{
  rm.start();
  MockNM nm=new MockNM("127.0.0.1:1234",24 * 1024,rm.getResourceTrackerService());
  nm.registerNode();
  try {
    RMApp app1=rm.submitApp(10,"app1","user1",null,"b1");
    MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm);
    am1.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.UNDEFINED,"127.0.0.1",Resources.createResource(1024),10),ResourceRequest.newInstance(Priority.UNDEFINED,"/default-rack",Resources.createResource(1024),10),ResourceRequest.newInstance(Priority.UNDEFINED,"*",Resources.createResource(1024),10)),null);
    WebResource r=resource();
    MultivaluedMapImpl params=new MultivaluedMapImpl();
    params.add("nodeId","127.0.0.1:1234");
    ClientResponse response=r.path("ws").path("v1").path("cluster").path("scheduler/activities").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    JSONObject json=response.getEntity(JSONObject.class);
    nm.nodeHeartbeat(true);
    Thread.sleep(1000);
    response=r.path("ws").path("v1").path("cluster").path("scheduler/activities").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    json=response.getEntity(JSONObject.class);
    verifyNumberOfAllocations(json,11);
    JSONArray allocations=json.getJSONArray("allocations");
    for (int i=0; i < allocations.length(); i++) {
      if (i != allocations.length() - 1) {
        verifyStateOfAllocations(allocations.getJSONObject(i),"finalAllocationState","ALLOCATED");
        verifyQueueOrder(allocations.getJSONObject(i),"root-a-b-b2-b3-b1");
      }
 else {
        verifyStateOfAllocations(allocations.getJSONObject(i),"finalAllocationState","SKIPPED");
        verifyQueueOrder(allocations.getJSONObject(i),"root-a-b");
      }
    }
  }
  finally {
    rm.stop();
  }
}
