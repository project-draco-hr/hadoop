{
  rm.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",4 * 1024,rm.getResourceTrackerService());
  MockNM nm2=new MockNM("127.0.0.2:1234",4 * 1024,rm.getResourceTrackerService());
  nm1.registerNode();
  nm2.registerNode();
  try {
    RMApp app1=rm.submitApp(10,"app1","user1",null,"b1");
    MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm1);
    RMApp app2=rm.submitApp(10,"app2","user1",null,"b2");
    MockAM am2=MockRM.launchAndRegisterAM(app2,rm,nm2);
    am1.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.UNDEFINED,"*",Resources.createResource(4096),10)),null);
    WebResource r=resource();
    MultivaluedMapImpl params=new MultivaluedMapImpl();
    params.add("appId",app1.getApplicationId().toString());
    ClientResponse response=r.path("ws").path("v1").path("cluster").path("scheduler/app-activities").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    JSONObject json=response.getEntity(JSONObject.class);
    nm2.nodeHeartbeat(true);
    Thread.sleep(1000);
    response=r.path("ws").path("v1").path("cluster").path("scheduler/app-activities").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    json=response.getEntity(JSONObject.class);
    verifyNumberOfAllocations(json,1);
    r=resource();
    params=new MultivaluedMapImpl();
    params.add("appId",app1.getApplicationId().toString());
    response=r.path("ws").path("v1").path("cluster").path("scheduler/app-activities").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    json=response.getEntity(JSONObject.class);
    nm2.nodeHeartbeat(true);
    Thread.sleep(1000);
    response=r.path("ws").path("v1").path("cluster").path("scheduler/app-activities").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    json=response.getEntity(JSONObject.class);
    verifyNumberOfAllocations(json,2);
    CapacityScheduler cs=(CapacityScheduler)rm.getResourceScheduler();
    ContainerId containerId=ContainerId.newContainerId(am2.getApplicationAttemptId(),1);
    cs.completedContainer(cs.getRMContainer(containerId),ContainerStatus.newInstance(containerId,ContainerState.COMPLETE,"",0),RMContainerEventType.FINISHED);
    r=resource();
    params=new MultivaluedMapImpl();
    params.add("appId",app1.getApplicationId().toString());
    response=r.path("ws").path("v1").path("cluster").path("scheduler/app-activities").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    json=response.getEntity(JSONObject.class);
    nm2.nodeHeartbeat(true);
    Thread.sleep(1000);
    response=r.path("ws").path("v1").path("cluster").path("scheduler/app-activities").queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    json=response.getEntity(JSONObject.class);
    verifyNumberOfAllocations(json,3);
  }
  finally {
    rm.stop();
  }
}
