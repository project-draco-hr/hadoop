{
  JSONObject jsonQueuesObject=queueCJson.getJSONObject("queues");
  JSONArray queuesArray=jsonQueuesObject.getJSONArray("queue");
  for (int i=0; i < queuesArray.length(); i++) {
    JSONObject queueJson=queuesArray.getJSONObject(i);
    String queue=queueJson.getString("queueName");
    JSONObject capacitiesJsonObject=queueJson.getJSONObject(CAPACITIES);
    JSONArray partitionsCapsArray=capacitiesJsonObject.getJSONArray(QUEUE_CAPACITIES_BY_PARTITION);
switch (queue) {
case LEAF_QUEUE_C1:
      verifyAccesibleNodeLabels(queueJson,ImmutableSet.of(LABEL_LX,LABEL_LY));
    assertEquals("Invalid default Label expression",LABEL_LX,queueJson.getString("defaultNodeLabelExpression"));
  verifyQcPartitionsCapacityInfoJson(partitionsCapsArray,40,100,28,100,50,75,50,75,50,60,20,30);
break;
case LEAF_QUEUE_C2:
verifyAccesibleNodeLabels(queueJson,ImmutableSet.of(LABEL_LX,LABEL_LY));
assertEquals("Invalid default Label expression",LABEL_LY,queueJson.getString("defaultNodeLabelExpression"));
verifyQcPartitionsCapacityInfoJson(partitionsCapsArray,60,100,42,100,50,75,50,75,50,70,20,35);
break;
default :
Assert.fail("Unexpected queue" + queue);
}
}
}
