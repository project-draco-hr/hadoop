{
  NodeList children=queueElem.getChildNodes();
  for (int j=0; j < children.getLength(); j++) {
    Element queueChildElem=(Element)children.item(j);
    if (queueChildElem.getTagName().equals(CAPACITIES)) {
      verifyQcCapacitiesInfoXML(queueChildElem,70,100,70,100,100,100,100,100,40,50,40,50);
    }
 else     if (queueChildElem.getTagName().equals("resources")) {
      verifyResourceUsageInfoXML(queueChildElem);
    }
 else     if (queueChildElem.getTagName().equals("queues")) {
      NodeList qListInfos=queueChildElem.getChildNodes();
      for (int k=0; k < qListInfos.getLength(); k++) {
        Element qElem2=(Element)qListInfos.item(k);
        String queue=WebServicesTestUtils.getXmlString(qElem2,"queueName");
switch (queue) {
case LEAF_QUEUE_C1:
          assertEquals("Invalid default Label expression",LABEL_LX,WebServicesTestUtils.getXmlString(qElem2,"defaultNodeLabelExpression"));
        NodeList queuec1Children=qElem2.getChildNodes();
      for (int l=0; l < queuec1Children.getLength(); l++) {
        Element queueC1ChildElem=(Element)queuec1Children.item(l);
        if (queueC1ChildElem.getTagName().equals(CAPACITIES)) {
          verifyQcCapacitiesInfoXML(queueC1ChildElem,40,100,28,100,50,75,50,75,50,60,20,30);
        }
      }
    break;
case LEAF_QUEUE_C2:
  assertEquals("Invalid default Label expression",LABEL_LY,WebServicesTestUtils.getXmlString(qElem2,"defaultNodeLabelExpression"));
NodeList queuec2Children=qElem2.getChildNodes();
for (int l=0; l < queuec2Children.getLength(); l++) {
Element queueC2ChildElem=(Element)queuec2Children.item(l);
if (queueC2ChildElem.getTagName().equals(CAPACITIES)) {
  verifyQcCapacitiesInfoXML(queueC2ChildElem,60,100,42,100,50,75,50,75,50,70,20,35);
}
}
break;
default :
Assert.fail("Unexpected queue" + queue);
}
}
}
}
}
