{
  NodeList scheduler=dom.getElementsByTagName("scheduler");
  assertEquals("incorrect number of elements",1,scheduler.getLength());
  NodeList schedulerInfo=dom.getElementsByTagName("schedulerInfo");
  assertEquals("incorrect number of elements",1,schedulerInfo.getLength());
  for (int i=0; i < schedulerInfo.getLength(); i++) {
    Element element=(Element)schedulerInfo.item(i);
    NodeList children=element.getChildNodes();
    for (int j=0; j < children.getLength(); j++) {
      Element schedulerInfoElem=(Element)children.item(j);
      if (schedulerInfoElem.getTagName().equals("queues")) {
        NodeList qListInfos=schedulerInfoElem.getChildNodes();
        for (int k=0; k < qListInfos.getLength(); k++) {
          Element qElem2=(Element)qListInfos.item(k);
          String queue=WebServicesTestUtils.getXmlString(qElem2,"queueName");
switch (queue) {
case QUEUE_A:
            verifyQueueAInfoXML(qElem2);
          break;
case QUEUE_B:
        verifyQueueBInfoXML(qElem2);
      break;
case QUEUE_C:
    verifyQueueCInfoXML(qElem2);
  break;
default :
Assert.fail("Unexpected queue" + queue);
}
}
}
 else if (schedulerInfoElem.getTagName().equals(CAPACITIES)) {
NodeList capacitiesListInfos=schedulerInfoElem.getChildNodes();
assertEquals("incorrect number of partitions",3,capacitiesListInfos.getLength());
for (int k=0; k < capacitiesListInfos.getLength(); k++) {
Element partitionCapacitiesInfo=(Element)capacitiesListInfos.item(k);
String partitionName=WebServicesTestUtils.getXmlString(partitionCapacitiesInfo,"partitionName");
assertTrue("invalid PartitionCapacityInfo",CLUSTER_LABELS.contains(partitionName));
verifyPartitionCapacityInfoXML(partitionCapacitiesInfo,100,0,100,100,0,100);
}
}
}
}
}
