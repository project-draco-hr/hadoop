{
  assertEquals("Invalid default Label expression",LABEL_LX,WebServicesTestUtils.getXmlString(queueElem,"defaultNodeLabelExpression"));
  NodeList children=queueElem.getChildNodes();
  for (int j=0; j < children.getLength(); j++) {
    Element queueChildElem=(Element)children.item(j);
    if (queueChildElem.getTagName().equals(CAPACITIES)) {
      NodeList capacitiesListInfos=queueChildElem.getChildNodes();
      assertEquals("incorrect number of partitions",2,capacitiesListInfos.getLength());
      for (int k=0; k < capacitiesListInfos.getLength(); k++) {
        Element partitionCapacitiesInfo=(Element)capacitiesListInfos.item(k);
        String partitionName=WebServicesTestUtils.getXmlString(partitionCapacitiesInfo,"partitionName");
switch (partitionName) {
case LABEL_LX:
          verifyPartitionCapacityInfoXML(partitionCapacitiesInfo,30,0,100,30,0,100);
        break;
case DEFAULT_PARTITION:
      verifyPartitionCapacityInfoXML(partitionCapacitiesInfo,30,0,50,30,0,50);
    break;
default :
  Assert.fail("Unexpected partition" + partitionName);
}
}
}
 else if (queueChildElem.getTagName().equals("resources")) {
verifyResourceUsageInfoXML(queueChildElem);
}
}
assertEquals("Node Labels are not matching",LABEL_LX,WebServicesTestUtils.getXmlString(queueElem,"nodeLabels"));
}
