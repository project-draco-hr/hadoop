{
  final String kvstr="Unexpected tuple: " + stringify(k,v);
  assertTrue(kvstr,v.size() == tupleSize);
  int key=k.get();
  IntWritable val0=null;
  IntWritable val1=null;
  LongWritable val2=null;
  if (firstTuple) {
    TupleWritable v0=((TupleWritable)v.get(0));
    if (key % 2 == 0 && key / 2 <= ITEMS) {
      val0=(IntWritable)v0.get(0);
    }
 else {
      assertFalse(kvstr,v0.has(0));
    }
    if (key % 3 == 0 && key / 3 <= ITEMS) {
      val1=(IntWritable)v0.get(1);
    }
 else {
      assertFalse(kvstr,v0.has(1));
    }
    if (key % 4 == 0 && key / 4 <= ITEMS) {
      val2=(LongWritable)v.get(1);
    }
 else {
      assertFalse(kvstr,v.has(2));
    }
  }
 else   if (secondTuple) {
    if (key % 2 == 0 && key / 2 <= ITEMS) {
      val0=(IntWritable)v.get(0);
    }
 else {
      assertFalse(kvstr,v.has(0));
    }
    TupleWritable v1=((TupleWritable)v.get(1));
    if (key % 3 == 0 && key / 3 <= ITEMS) {
      val1=(IntWritable)v1.get(0);
    }
 else {
      assertFalse(kvstr,v1.has(0));
    }
    if (key % 4 == 0 && key / 4 <= ITEMS) {
      val2=(LongWritable)v1.get(1);
    }
 else {
      assertFalse(kvstr,v1.has(1));
    }
  }
 else {
    if (key % 2 == 0 && key / 2 <= ITEMS) {
      val0=(IntWritable)v.get(0);
    }
 else {
      assertFalse(kvstr,v.has(0));
    }
    if (key % 3 == 0 && key / 3 <= ITEMS) {
      val1=(IntWritable)v.get(1);
    }
 else {
      assertFalse(kvstr,v.has(1));
    }
    if (key % 4 == 0 && key / 4 <= ITEMS) {
      val2=(LongWritable)v.get(2);
    }
 else {
      assertFalse(kvstr,v.has(2));
    }
  }
  if (val0 != null) {
    assertTrue(kvstr,val0.get() == 0);
  }
  if (val1 != null) {
    assertTrue(kvstr,val1.get() == 1);
  }
  if (val2 != null) {
    assertTrue(kvstr,val2.get() == 2);
  }
}
