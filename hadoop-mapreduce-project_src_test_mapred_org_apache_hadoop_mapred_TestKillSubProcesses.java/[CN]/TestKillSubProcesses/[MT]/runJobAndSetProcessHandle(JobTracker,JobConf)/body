{
  RunningJob job=runJob(conf);
  while (job.getJobState() != JobStatus.RUNNING) {
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      break;
    }
  }
  pid=null;
  jobClient=new JobClient(conf);
  TaskReport[] mapReports=jobClient.getMapTaskReports(job.getID());
  JobInProgress jip=jt.getJob(job.getID());
  for (  TaskReport tr : mapReports) {
    TaskInProgress tip=jip.getTaskInProgress(tr.getTaskID());
    while (tip.getActiveTasks().size() == 0) {
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException ie) {
        LOG.warn("sleep is interrupted:" + ie);
        break;
      }
    }
    for (Iterator<TaskAttemptID> it=tip.getActiveTasks().keySet().iterator(); it.hasNext(); ) {
      TaskAttemptID id=it.next();
      LOG.info("taskAttemptID of map task is " + id);
      while (pid == null) {
        pid=mr.getTaskTrackerRunner(0).getTaskTracker().getPid(id);
        if (pid == null) {
          try {
            Thread.sleep(500);
          }
 catch (          InterruptedException e) {
          }
        }
      }
      LOG.info("pid of map task is " + pid);
      assertTrue("Map is no more alive",isAlive(pid));
      LOG.info("The map task is alive before Job completion, as expected.");
    }
  }
  if (ProcessTree.isSetsidAvailable) {
    String childPid=TestProcfsBasedProcessTree.getPidFromPidFile(scriptDirName + "/childPidFile" + 0);
    while (childPid == null) {
      LOG.warn(scriptDirName + "/childPidFile" + 0+ " is null; Sleeping...");
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException ie) {
        LOG.warn("sleep is interrupted:" + ie);
        break;
      }
      childPid=TestProcfsBasedProcessTree.getPidFromPidFile(scriptDirName + "/childPidFile" + 0);
    }
    for (int i=0; i <= numLevelsOfSubProcesses; i++) {
      childPid=TestProcfsBasedProcessTree.getPidFromPidFile(scriptDirName + "/childPidFile" + i);
      LOG.info("pid of the descendant process at level " + i + "in the subtree of processes(with the map task as the root)"+ " is "+ childPid);
      assertTrue("Unexpected: The subprocess at level " + i + " in the subtree is not alive before Job completion",isAlive(childPid));
    }
  }
  return job;
}
