{
  int numWorkers=10;
  final ProducerConsumer<Integer,Integer> worker=new ProducerConsumer<Integer,Integer>(numWorkers);
  for (int i=0; i < numWorkers; i++) {
    worker.addWorker(new CopyProcessor());
  }
class SourceThread extends Thread {
    public void run(){
      while (true) {
        try {
          worker.put(new WorkRequest<Integer>(42));
          Thread.sleep(1);
        }
 catch (        InterruptedException ie) {
          return;
        }
      }
    }
  }
  ;
  SourceThread source=new SourceThread();
  source.start();
class SinkThread extends Thread {
    public void run(){
      try {
        while (true) {
          WorkReport<Integer> report=worker.take();
          Assert.assertEquals(42,report.getItem().intValue());
        }
      }
 catch (      InterruptedException ie) {
        return;
      }
    }
  }
  ;
  SinkThread sink=new SinkThread();
  sink.start();
  Thread.sleep(1000);
  source.interrupt();
  while (worker.hasWork()) {
    Thread.sleep(1);
  }
  worker.shutdown();
  GenericTestUtils.waitForThreadTermination("pool-.*-thread.*",100,10000);
  sink.interrupt();
  source.join();
  sink.join();
}
