{
  File target=new File(System.getProperty("test.dir","target"));
  kdcWorkDir=new File(target,"kdc");
  kdcWorkDir.mkdirs();
  if (!kdcWorkDir.mkdirs()) {
    assertTrue(kdcWorkDir.isDirectory());
  }
  kdcConf=MiniKdc.createConf();
  kdcConf.setProperty(MiniKdc.DEBUG,"true");
  kdc=new MiniKdc(kdcConf,kdcWorkDir);
  kdc.start();
  keytab_zk=createKeytab(ZOOKEEPER,"zookeeper.keytab");
  keytab_alice=createKeytab(ALICE,"alice.keytab");
  keytab_bob=createKeytab(BOB,"bob.keytab");
  zkServerPrincipal=Shell.WINDOWS ? ZOOKEEPER_1270001 : ZOOKEEPER_LOCALHOST;
  StringBuilder jaas=new StringBuilder(1024);
  jaas.append(registrySecurity.createJAASEntry(ZOOKEEPER_CLIENT_CONTEXT,ZOOKEEPER,keytab_zk));
  jaas.append(registrySecurity.createJAASEntry(ZOOKEEPER_SERVER_CONTEXT,zkServerPrincipal,keytab_zk));
  jaas.append(registrySecurity.createJAASEntry(ALICE_CLIENT_CONTEXT,ALICE_LOCALHOST,keytab_alice));
  jaas.append(registrySecurity.createJAASEntry(BOB_CLIENT_CONTEXT,BOB_LOCALHOST,keytab_bob));
  jaasFile=new File(kdcWorkDir,"jaas.txt");
  FileUtils.write(jaasFile,jaas.toString());
  LOG.info("\n" + jaas);
  RegistrySecurity.bindJVMtoJAASFile(jaasFile);
}
