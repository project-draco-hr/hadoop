{
  maybeInitBuilder();
  builder.clearNodeToLabels();
  if (nodeToLabels == null) {
    return;
  }
  Iterable<NodeIdToLabelsInfoProto> iterable=new Iterable<NodeIdToLabelsInfoProto>(){
    @Override public Iterator<NodeIdToLabelsInfoProto> iterator(){
      return new Iterator<NodeIdToLabelsInfoProto>(){
        Iterator<Entry<NodeId,Set<NodeLabel>>> iter=nodeToLabels.entrySet().iterator();
        @Override public void remove(){
          throw new UnsupportedOperationException();
        }
        @Override public NodeIdToLabelsInfoProto next(){
          Entry<NodeId,Set<NodeLabel>> now=iter.next();
          Set<NodeLabelProto> labelProtoList=new HashSet<NodeLabelProto>();
          for (          NodeLabel l : now.getValue()) {
            labelProtoList.add(convertToProtoFormat(l));
          }
          return NodeIdToLabelsInfoProto.newBuilder().setNodeId(convertToProtoFormat(now.getKey())).addAllNodeLabels(labelProtoList).build();
        }
        @Override public boolean hasNext(){
          return iter.hasNext();
        }
      }
;
    }
  }
;
  builder.addAllNodeToLabels(iterable);
}
