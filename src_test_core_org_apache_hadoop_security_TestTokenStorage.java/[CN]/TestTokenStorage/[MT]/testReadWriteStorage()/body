{
  TokenStorage ts=new TokenStorage();
  Token<T> token1=new Token();
  Token<T> token2=new Token();
  Text service1=new Text("service1");
  Text service2=new Text("service2");
  Collection<Text> services=new ArrayList<Text>();
  services.add(service1);
  services.add(service2);
  token1.setService(service1);
  token2.setService(service2);
  ts.addToken(new Text("sometoken1"),token1);
  ts.addToken(new Text("sometoken2"),token2);
  final KeyGenerator kg=KeyGenerator.getInstance(DEFAULT_HMAC_ALGORITHM);
  String alias="alias";
  Map<Text,byte[]> m=new HashMap<Text,byte[]>(10);
  for (int i=0; i < 10; i++) {
    Key key=kg.generateKey();
    m.put(new Text(alias + i),key.getEncoded());
    ts.addSecretKey(new Text(alias + i),key.getEncoded());
  }
  File tmpFileName=new File(tmpDir,"tokenStorageTest");
  DataOutputStream dos=new DataOutputStream(new FileOutputStream(tmpFileName));
  ts.write(dos);
  dos.close();
  DataInputStream dis=new DataInputStream(new FileInputStream(tmpFileName));
  ts=new TokenStorage();
  ts.readFields(dis);
  dis.close();
  Collection<Token<? extends TokenIdentifier>> list=ts.getAllTokens();
  assertEquals("getAllTokens should return collection of size 2",list.size(),2);
  boolean foundFirst=false;
  boolean foundSecond=false;
  for (  Token<? extends TokenIdentifier> token : list) {
    if (token.getService().equals(service1)) {
      foundFirst=true;
    }
    if (token.getService().equals(service2)) {
      foundSecond=true;
    }
  }
  assertTrue("Tokens for services service1 and service2 must be present",foundFirst && foundSecond);
  int mapLen=m.size();
  assertEquals("wrong number of keys in the Storage",mapLen,ts.numberOfSecretKeys());
  for (  Text a : m.keySet()) {
    byte[] kTS=ts.getSecretKey(a);
    byte[] kLocal=m.get(a);
    assertTrue("keys don't match for " + a,WritableComparator.compareBytes(kTS,0,kTS.length,kLocal,0,kLocal.length) == 0);
  }
}
