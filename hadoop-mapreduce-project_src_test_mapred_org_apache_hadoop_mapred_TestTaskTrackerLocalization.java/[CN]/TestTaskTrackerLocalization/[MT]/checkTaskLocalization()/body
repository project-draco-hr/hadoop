{
  for (  String childMapredLocalDir : localizedTaskConf.getStrings(MRConfig.LOCAL_DIR)) {
    assertTrue("Local dir " + childMapredLocalDir + " is not sandboxed !!",childMapredLocalDir.endsWith(TaskTracker.getLocalTaskDir(task.getUser(),jobId.toString(),taskId.toString(),task.isTaskCleanupTask())));
  }
  assertTrue(task.getJobFile().endsWith(TaskTracker.getTaskConfFile(task.getUser(),jobId.toString(),taskId.toString(),task.isTaskCleanupTask())));
  assertTrue("tmp dir is not created in workDir " + attemptWorkDir.toUri().getPath(),new File(attemptWorkDir.toUri().getPath(),"tmp").exists());
  File logDir=TaskLog.getAttemptDir(taskId,task.isTaskCleanupTask());
  assertTrue("task's log dir " + logDir.toString() + " doesn't exist!",logDir.exists());
  checkFilePermissions(logDir.getAbsolutePath(),"drwx------",task.getUser(),taskTrackerUGI.getGroupNames()[0]);
  File expectedStdout=new File(logDir,TaskLog.LogName.STDOUT.toString());
  assertTrue("stdout log file is improper. Expected : " + expectedStdout.toString() + " Observed : "+ attemptLogFiles[0].toString(),expectedStdout.toString().equals(attemptLogFiles[0].toString()));
  File expectedStderr=new File(logDir,Path.SEPARATOR + TaskLog.LogName.STDERR.toString());
  assertTrue("stderr log file is improper. Expected : " + expectedStderr.toString() + " Observed : "+ attemptLogFiles[1].toString(),expectedStderr.toString().equals(attemptLogFiles[1].toString()));
}
