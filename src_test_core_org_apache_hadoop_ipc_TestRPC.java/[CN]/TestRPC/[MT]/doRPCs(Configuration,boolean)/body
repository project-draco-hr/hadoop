{
  ServiceAuthorizationManager.refresh(conf,new TestPolicyProvider());
  Server server=RPC.getServer(TestProtocol.class,new TestImpl(),ADDRESS,0,5,true,conf,null);
  TestProtocol proxy=null;
  server.start();
  InetSocketAddress addr=NetUtils.getConnectAddress(server);
  try {
    proxy=(TestProtocol)RPC.getProxy(TestProtocol.class,TestProtocol.versionID,addr,conf);
    proxy.ping();
    if (expectFailure) {
      fail("Expect RPC.getProxy to fail with AuthorizationException!");
    }
  }
 catch (  RemoteException e) {
    if (expectFailure) {
      assertTrue(e.unwrapRemoteException() instanceof AuthorizationException);
    }
 else {
      throw e;
    }
  }
 finally {
    server.stop();
    if (proxy != null) {
      RPC.stopProxy(proxy);
    }
    if (expectFailure) {
      assertTrue("Expected 1 but got " + server.getRpcMetrics().authorizationFailures.getCurrentIntervalValue(),server.getRpcMetrics().authorizationFailures.getCurrentIntervalValue() == 1);
    }
 else {
      assertTrue("Expected 1 but got " + server.getRpcMetrics().authorizationSuccesses.getCurrentIntervalValue(),server.getRpcMetrics().authorizationSuccesses.getCurrentIntervalValue() == 1);
    }
    assertTrue("Expected 0 but got " + server.getRpcMetrics().authenticationFailures.getCurrentIntervalValue(),server.getRpcMetrics().authenticationFailures.getCurrentIntervalValue() == 0);
    assertTrue("Expected greater than 0 but got " + server.getRpcMetrics().authenticationSuccesses.getCurrentIntervalValue(),server.getRpcMetrics().authenticationSuccesses.getCurrentIntervalValue() > 0);
  }
}
