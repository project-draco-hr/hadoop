{
  YarnConfiguration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.NM_RECOVERY_ENABLED,true);
  final NodeId nodeId=NodeId.newInstance("somehost",1234);
  final ContainerId cid1=BuilderUtils.newContainerId(1,1,1,1);
  final ContainerId cid2=BuilderUtils.newContainerId(2,2,2,2);
  ContainerTokenKeyGeneratorForTest keygen=new ContainerTokenKeyGeneratorForTest(conf);
  NMMemoryStateStoreService stateStore=new NMMemoryStateStoreService();
  stateStore.init(conf);
  stateStore.start();
  NMContainerTokenSecretManager secretMgr=new NMContainerTokenSecretManager(conf,stateStore);
  secretMgr.setNodeId(nodeId);
  MasterKey currentKey=keygen.generateKey();
  secretMgr.setMasterKey(currentKey);
  ContainerTokenIdentifier tokenId1=createContainerTokenId(cid1,nodeId,"user1",secretMgr);
  ContainerTokenIdentifier tokenId2=createContainerTokenId(cid2,nodeId,"user2",secretMgr);
  assertNotNull(secretMgr.retrievePassword(tokenId1));
  assertNotNull(secretMgr.retrievePassword(tokenId2));
  secretMgr=new NMContainerTokenSecretManager(conf,stateStore);
  secretMgr.setNodeId(nodeId);
  secretMgr.recover();
  assertEquals(currentKey,secretMgr.getCurrentKey());
  assertTrue(secretMgr.isValidStartContainerRequest(tokenId1));
  assertTrue(secretMgr.isValidStartContainerRequest(tokenId2));
  assertNotNull(secretMgr.retrievePassword(tokenId1));
  assertNotNull(secretMgr.retrievePassword(tokenId2));
  secretMgr.startContainerSuccessful(tokenId2);
  currentKey=keygen.generateKey();
  secretMgr.setMasterKey(currentKey);
  secretMgr=new NMContainerTokenSecretManager(conf,stateStore);
  secretMgr.setNodeId(nodeId);
  secretMgr.recover();
  assertEquals(currentKey,secretMgr.getCurrentKey());
  assertTrue(secretMgr.isValidStartContainerRequest(tokenId1));
  assertFalse(secretMgr.isValidStartContainerRequest(tokenId2));
  assertNotNull(secretMgr.retrievePassword(tokenId1));
  assertNotNull(secretMgr.retrievePassword(tokenId2));
  currentKey=keygen.generateKey();
  secretMgr.setMasterKey(currentKey);
  secretMgr=new NMContainerTokenSecretManager(conf,stateStore);
  secretMgr.setNodeId(nodeId);
  secretMgr.recover();
  assertEquals(currentKey,secretMgr.getCurrentKey());
  assertTrue(secretMgr.isValidStartContainerRequest(tokenId1));
  assertFalse(secretMgr.isValidStartContainerRequest(tokenId2));
  try {
    secretMgr.retrievePassword(tokenId1);
    fail("token should not be valid");
  }
 catch (  InvalidToken e) {
  }
  try {
    secretMgr.retrievePassword(tokenId2);
    fail("token should not be valid");
  }
 catch (  InvalidToken e) {
  }
  stateStore.close();
}
