{
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("  <queue name=\"queueA\">");
  out.println("    <maxRunningApps>1</maxRunningApps>");
  out.println("  </queue>");
  out.println("  <queue name=\"queueB\" />");
  out.println("  <queuePlacementPolicy>");
  out.println("    <rule name='default' />");
  out.println("  </queuePlacementPolicy>");
  out.println("</allocations>");
  out.close();
  MockClock clock=new MockClock();
  Configuration conf=new Configuration();
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  AllocationFileLoaderService allocLoader=new AllocationFileLoaderService(clock);
  allocLoader.reloadIntervalMs=5;
  allocLoader.init(conf);
  ReloadListener confHolder=new ReloadListener();
  allocLoader.setReloadListener(confHolder);
  allocLoader.reloadAllocations();
  AllocationConfiguration allocConf=confHolder.allocConf;
  QueuePlacementPolicy policy=allocConf.getPlacementPolicy();
  List<QueuePlacementRule> rules=policy.getRules();
  assertEquals(1,rules.size());
  assertEquals(QueuePlacementRule.Default.class,rules.get(0).getClass());
  assertEquals(1,allocConf.getQueueMaxApps("root.queueA"));
  assertEquals(2,allocConf.getConfiguredQueues().get(FSQueueType.LEAF).size());
  assertTrue(allocConf.getConfiguredQueues().get(FSQueueType.LEAF).contains("root.queueA"));
  assertTrue(allocConf.getConfiguredQueues().get(FSQueueType.LEAF).contains("root.queueB"));
  confHolder.allocConf=null;
  out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("  <queue name=\"queueB\">");
  out.println("    <maxRunningApps>3</maxRunningApps>");
  out.println("  </queue>");
  out.println("  <queuePlacementPolicy>");
  out.println("    <rule name='specified' />");
  out.println("    <rule name='nestedUserQueue' >");
  out.println("         <rule name='primaryGroup' />");
  out.println("    </rule>");
  out.println("    <rule name='default' />");
  out.println("  </queuePlacementPolicy>");
  out.println("</allocations>");
  out.close();
  clock.tick(System.currentTimeMillis() + AllocationFileLoaderService.ALLOC_RELOAD_WAIT_MS + 10000);
  allocLoader.start();
  while (confHolder.allocConf == null) {
    Thread.sleep(20);
  }
  allocConf=confHolder.allocConf;
  policy=allocConf.getPlacementPolicy();
  rules=policy.getRules();
  assertEquals(3,rules.size());
  assertEquals(QueuePlacementRule.Specified.class,rules.get(0).getClass());
  assertEquals(QueuePlacementRule.NestedUserQueue.class,rules.get(1).getClass());
  assertEquals(QueuePlacementRule.PrimaryGroup.class,((NestedUserQueue)(rules.get(1))).nestedRule.getClass());
  assertEquals(QueuePlacementRule.Default.class,rules.get(2).getClass());
  assertEquals(3,allocConf.getQueueMaxApps("root.queueB"));
  assertEquals(1,allocConf.getConfiguredQueues().get(FSQueueType.LEAF).size());
  assertTrue(allocConf.getConfiguredQueues().get(FSQueueType.LEAF).contains("root.queueB"));
}
