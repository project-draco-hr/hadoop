{
  Configuration conf=new Configuration();
  conf.set(FairSchedulerConfiguration.ALLOCATION_FILE,ALLOC_FILE);
  AllocationFileLoaderService allocLoader=new AllocationFileLoaderService();
  PrintWriter out=new PrintWriter(new FileWriter(ALLOC_FILE));
  out.println("<?xml version=\"1.0\"?>");
  out.println("<allocations>");
  out.println("<queue name=\"queueA\">");
  out.println("<minResources>1024mb,0vcores</minResources>");
  out.println("</queue>");
  out.println("<queue name=\"queueB\">");
  out.println("<minResources>2048mb,0vcores</minResources>");
  out.println("<aclAdministerApps>alice,bob admins</aclAdministerApps>");
  out.println("<schedulingPolicy>fair</schedulingPolicy>");
  out.println("</queue>");
  out.println("<queue name=\"queueC\">");
  out.println("<aclSubmitApps>alice,bob admins</aclSubmitApps>");
  out.println("</queue>");
  out.println("<queue name=\"queueD\">");
  out.println("<maxRunningApps>3</maxRunningApps>");
  out.println("<maxAMShare>0.4</maxAMShare>");
  out.println("</queue>");
  out.println("<queue name=\"queueE\">");
  out.println("<minSharePreemptionTimeout>60</minSharePreemptionTimeout>");
  out.println("</queue>");
  out.println("<queue name=\"queueF\" type=\"parent\" >");
  out.println("</queue>");
  out.println("<queue name=\"queueG\">");
  out.println("<fairSharePreemptionTimeout>120</fairSharePreemptionTimeout>");
  out.println("<minSharePreemptionTimeout>50</minSharePreemptionTimeout>");
  out.println("<fairSharePreemptionThreshold>0.6</fairSharePreemptionThreshold>");
  out.println("   <queue name=\"queueH\">");
  out.println("   <fairSharePreemptionTimeout>180</fairSharePreemptionTimeout>");
  out.println("   <minSharePreemptionTimeout>40</minSharePreemptionTimeout>");
  out.println("   <fairSharePreemptionThreshold>0.7</fairSharePreemptionThreshold>");
  out.println("   </queue>");
  out.println("</queue>");
  out.println("<queueMaxAppsDefault>15</queueMaxAppsDefault>");
  out.println("<userMaxAppsDefault>5</userMaxAppsDefault>");
  out.println("<queueMaxAMShareDefault>0.5f</queueMaxAMShareDefault>");
  out.println("<user name=\"user1\">");
  out.println("<maxRunningApps>10</maxRunningApps>");
  out.println("</user>");
  out.println("<defaultMinSharePreemptionTimeout>120" + "</defaultMinSharePreemptionTimeout>");
  out.println("<defaultFairSharePreemptionTimeout>300</defaultFairSharePreemptionTimeout>");
  out.println("<defaultFairSharePreemptionThreshold>0.4</defaultFairSharePreemptionThreshold>");
  out.println("<defaultQueueSchedulingPolicy>drf</defaultQueueSchedulingPolicy>");
  out.println("</allocations>");
  out.close();
  allocLoader.init(conf);
  ReloadListener confHolder=new ReloadListener();
  allocLoader.setReloadListener(confHolder);
  allocLoader.reloadAllocations();
  AllocationConfiguration queueConf=confHolder.allocConf;
  assertEquals(6,queueConf.getConfiguredQueues().get(FSQueueType.LEAF).size());
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(Resources.createResource(1024,0),queueConf.getMinResources("root.queueA"));
  assertEquals(Resources.createResource(2048,0),queueConf.getMinResources("root.queueB"));
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root.queueC"));
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root.queueD"));
  assertEquals(Resources.createResource(0),queueConf.getMinResources("root.queueE"));
  assertEquals(15,queueConf.getQueueMaxApps("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(15,queueConf.getQueueMaxApps("root.queueA"));
  assertEquals(15,queueConf.getQueueMaxApps("root.queueB"));
  assertEquals(15,queueConf.getQueueMaxApps("root.queueC"));
  assertEquals(3,queueConf.getQueueMaxApps("root.queueD"));
  assertEquals(15,queueConf.getQueueMaxApps("root.queueE"));
  assertEquals(10,queueConf.getUserMaxApps("user1"));
  assertEquals(5,queueConf.getUserMaxApps("user2"));
  assertEquals(.5f,queueConf.getQueueMaxAMShare("root." + YarnConfiguration.DEFAULT_QUEUE_NAME),0.01);
  assertEquals(.5f,queueConf.getQueueMaxAMShare("root.queueA"),0.01);
  assertEquals(.5f,queueConf.getQueueMaxAMShare("root.queueB"),0.01);
  assertEquals(.5f,queueConf.getQueueMaxAMShare("root.queueC"),0.01);
  assertEquals(.4f,queueConf.getQueueMaxAMShare("root.queueD"),0.01);
  assertEquals(.5f,queueConf.getQueueMaxAMShare("root.queueE"),0.01);
  assertEquals("*",queueConf.getQueueAcl("root",QueueACL.ADMINISTER_QUEUE).getAclString());
  assertEquals("*",queueConf.getQueueAcl("root",QueueACL.SUBMIT_APPLICATIONS).getAclString());
  assertEquals(" ",queueConf.getQueueAcl("root.queueA",QueueACL.ADMINISTER_QUEUE).getAclString());
  assertEquals(" ",queueConf.getQueueAcl("root.queueA",QueueACL.SUBMIT_APPLICATIONS).getAclString());
  assertEquals("alice,bob admins",queueConf.getQueueAcl("root.queueB",QueueACL.ADMINISTER_QUEUE).getAclString());
  assertEquals("alice,bob admins",queueConf.getQueueAcl("root.queueC",QueueACL.SUBMIT_APPLICATIONS).getAclString());
  assertEquals(120000,queueConf.getMinSharePreemptionTimeout("root"));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root.queueA"));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root.queueB"));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root.queueC"));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root.queueD"));
  assertEquals(60000,queueConf.getMinSharePreemptionTimeout("root.queueE"));
  assertEquals(-1,queueConf.getMinSharePreemptionTimeout("root.queueF"));
  assertEquals(50000,queueConf.getMinSharePreemptionTimeout("root.queueG"));
  assertEquals(40000,queueConf.getMinSharePreemptionTimeout("root.queueG.queueH"));
  assertEquals(300000,queueConf.getFairSharePreemptionTimeout("root"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root." + YarnConfiguration.DEFAULT_QUEUE_NAME));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueA"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueB"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueC"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueD"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueE"));
  assertEquals(-1,queueConf.getFairSharePreemptionTimeout("root.queueF"));
  assertEquals(120000,queueConf.getFairSharePreemptionTimeout("root.queueG"));
  assertEquals(180000,queueConf.getFairSharePreemptionTimeout("root.queueG.queueH"));
  assertEquals(.4f,queueConf.getFairSharePreemptionThreshold("root"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root." + YarnConfiguration.DEFAULT_QUEUE_NAME),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueA"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueB"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueC"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueD"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueE"),0.01);
  assertEquals(-1,queueConf.getFairSharePreemptionThreshold("root.queueF"),0.01);
  assertEquals(.6f,queueConf.getFairSharePreemptionThreshold("root.queueG"),0.01);
  assertEquals(.7f,queueConf.getFairSharePreemptionThreshold("root.queueG.queueH"),0.01);
  assertTrue(queueConf.getConfiguredQueues().get(FSQueueType.PARENT).contains("root.queueF"));
  assertTrue(queueConf.getConfiguredQueues().get(FSQueueType.PARENT).contains("root.queueG"));
  assertTrue(queueConf.getConfiguredQueues().get(FSQueueType.LEAF).contains("root.queueG.queueH"));
  assertEquals(DominantResourceFairnessPolicy.NAME,queueConf.getSchedulingPolicy("root").getName());
  assertEquals(DominantResourceFairnessPolicy.NAME,queueConf.getSchedulingPolicy("root.queueA").getName());
  assertEquals(FairSharePolicy.NAME,queueConf.getSchedulingPolicy("root.queueB").getName());
  assertEquals(DominantResourceFairnessPolicy.NAME,queueConf.getSchedulingPolicy("root.newqueue").getName());
}
