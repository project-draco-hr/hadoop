{
  if (allocFile == null) {
    return;
  }
  reloadThread=new Thread(){
    public void run(){
      while (running) {
        long time=clock.getTime();
        long lastModified=allocFile.lastModified();
        if (lastModified > lastSuccessfulReload && time > lastModified + ALLOC_RELOAD_WAIT_MS) {
          try {
            reloadAllocations();
          }
 catch (          Exception ex) {
            if (!lastReloadAttemptFailed) {
              LOG.error("Failed to reload fair scheduler config file - " + "will use existing allocations.",ex);
            }
            lastReloadAttemptFailed=true;
          }
        }
 else         if (lastModified == 0l) {
          if (!lastReloadAttemptFailed) {
            LOG.warn("Failed to reload fair scheduler config file because" + " last modified returned 0. File exists: " + allocFile.exists());
          }
          lastReloadAttemptFailed=true;
        }
        try {
          Thread.sleep(reloadIntervalMs);
        }
 catch (        InterruptedException ex) {
          LOG.info("Interrupted while waiting to reload alloc configuration");
        }
      }
    }
  }
;
  reloadThread.setName("AllocationFileReloader");
  reloadThread.setDaemon(true);
  reloadThread.start();
  super.start();
}
