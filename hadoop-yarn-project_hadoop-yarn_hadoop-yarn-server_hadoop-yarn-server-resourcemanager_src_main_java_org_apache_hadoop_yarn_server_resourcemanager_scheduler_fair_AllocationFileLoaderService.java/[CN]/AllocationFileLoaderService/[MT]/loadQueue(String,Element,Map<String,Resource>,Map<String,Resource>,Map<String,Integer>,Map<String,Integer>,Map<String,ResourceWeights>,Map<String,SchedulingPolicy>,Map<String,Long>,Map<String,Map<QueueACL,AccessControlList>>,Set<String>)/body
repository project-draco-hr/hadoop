{
  String queueName=element.getAttribute("name");
  if (parentName != null) {
    queueName=parentName + "." + queueName;
  }
  Map<QueueACL,AccessControlList> acls=new HashMap<QueueACL,AccessControlList>();
  NodeList fields=element.getChildNodes();
  boolean isLeaf=true;
  for (int j=0; j < fields.getLength(); j++) {
    Node fieldNode=fields.item(j);
    if (!(fieldNode instanceof Element))     continue;
    Element field=(Element)fieldNode;
    if ("minResources".equals(field.getTagName())) {
      String text=((Text)field.getFirstChild()).getData().trim();
      Resource val=FairSchedulerConfiguration.parseResourceConfigValue(text);
      minQueueResources.put(queueName,val);
    }
 else     if ("maxResources".equals(field.getTagName())) {
      String text=((Text)field.getFirstChild()).getData().trim();
      Resource val=FairSchedulerConfiguration.parseResourceConfigValue(text);
      maxQueueResources.put(queueName,val);
    }
 else     if ("maxRunningApps".equals(field.getTagName())) {
      String text=((Text)field.getFirstChild()).getData().trim();
      int val=Integer.parseInt(text);
      queueMaxApps.put(queueName,val);
    }
 else     if ("weight".equals(field.getTagName())) {
      String text=((Text)field.getFirstChild()).getData().trim();
      double val=Double.parseDouble(text);
      queueWeights.put(queueName,new ResourceWeights((float)val));
    }
 else     if ("minSharePreemptionTimeout".equals(field.getTagName())) {
      String text=((Text)field.getFirstChild()).getData().trim();
      long val=Long.parseLong(text) * 1000L;
      minSharePreemptionTimeouts.put(queueName,val);
    }
 else     if ("schedulingPolicy".equals(field.getTagName()) || "schedulingMode".equals(field.getTagName())) {
      String text=((Text)field.getFirstChild()).getData().trim();
      SchedulingPolicy policy=SchedulingPolicy.parse(text);
      queuePolicies.put(queueName,policy);
    }
 else     if ("aclSubmitApps".equals(field.getTagName())) {
      String text=((Text)field.getFirstChild()).getData();
      acls.put(QueueACL.SUBMIT_APPLICATIONS,new AccessControlList(text));
    }
 else     if ("aclAdministerApps".equals(field.getTagName())) {
      String text=((Text)field.getFirstChild()).getData();
      acls.put(QueueACL.ADMINISTER_QUEUE,new AccessControlList(text));
    }
 else     if ("queue".endsWith(field.getTagName()) || "pool".equals(field.getTagName())) {
      loadQueue(queueName,field,minQueueResources,maxQueueResources,queueMaxApps,userMaxApps,queueWeights,queuePolicies,minSharePreemptionTimeouts,queueAcls,queueNamesInAllocFile);
      isLeaf=false;
    }
  }
  if (isLeaf) {
    queueNamesInAllocFile.add(queueName);
  }
  queueAcls.put(queueName,acls);
  if (maxQueueResources.containsKey(queueName) && minQueueResources.containsKey(queueName) && !Resources.fitsIn(minQueueResources.get(queueName),maxQueueResources.get(queueName))) {
    LOG.warn(String.format("Queue %s has max resources %d less than min resources %d",queueName,maxQueueResources.get(queueName),minQueueResources.get(queueName)));
  }
}
