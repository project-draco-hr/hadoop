{
switch (eventType) {
case LAUNCH:
    try {
      LOG.info("Launching master" + application.getAppAttemptId());
      launch();
      handler.handle(new RMAppAttemptEvent(application.getAppAttemptId(),RMAppAttemptEventType.LAUNCHED));
    }
 catch (    Exception ie) {
      String message="Error launching " + application.getAppAttemptId() + ". Got exception: "+ StringUtils.stringifyException(ie);
      LOG.info(message);
      handler.handle(new RMAppAttemptLaunchFailedEvent(application.getAppAttemptId(),message));
    }
  break;
case CLEANUP:
try {
  LOG.info("Cleaning master " + application.getAppAttemptId());
  cleanup();
}
 catch (IOException ie) {
  LOG.info("Error cleaning master ",ie);
}
catch (YarnException e) {
  StringBuilder sb=new StringBuilder("Container ");
  sb.append(masterContainer.getId().toString());
  sb.append(" is not handled by this NodeManager");
  if (!e.getMessage().contains(sb.toString())) {
    LOG.info("Error cleaning master ",e);
  }
}
break;
default :
LOG.warn("Received unknown event-type " + eventType + ". Ignoring.");
break;
}
}
