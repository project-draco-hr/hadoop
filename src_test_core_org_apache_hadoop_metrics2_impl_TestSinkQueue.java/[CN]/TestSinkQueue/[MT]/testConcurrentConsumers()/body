{
  final SinkQueue<Integer> q=newSleepingConsumerQueue(2,1);
  assertTrue("should enqueue",q.enqueue(2));
  assertEquals("queue back",2,(int)q.back());
  assertTrue("should drop",!q.enqueue(3));
  shouldThrowCME(new Fun(){
    @Override public void run(){
      q.clear();
    }
  }
);
  shouldThrowCME(new Fun(){
    @Override public void run() throws Exception {
      q.consume(null);
    }
  }
);
  shouldThrowCME(new Fun(){
    @Override public void run() throws Exception {
      q.consumeAll(null);
    }
  }
);
  shouldThrowCME(new Fun(){
    @Override public void run() throws Exception {
      q.dequeue();
    }
  }
);
  assertEquals("queue size",2,q.size());
  assertEquals("queue front",1,(int)q.front());
  assertEquals("queue back",2,(int)q.back());
}
