{
  super("NFS3","localhost",config.getInt(Nfs3Constant.NFS3_SERVER_PORT,Nfs3Constant.NFS3_SERVER_PORT_DEFAULT),Nfs3Constant.PROGRAM,Nfs3Constant.VERSION,Nfs3Constant.VERSION,registrationSocket);
  config.set(FsPermission.UMASK_LABEL,"000");
  iug=new IdUserGroup();
  exports=NfsExports.getInstance(config);
  writeManager=new WriteManager(iug,config);
  clientCache=new DFSClientCache(config);
  superUserClient=new DFSClient(NameNode.getAddress(config),config);
  replication=(short)config.getInt(DFSConfigKeys.DFS_REPLICATION_KEY,DFSConfigKeys.DFS_REPLICATION_DEFAULT);
  blockSize=config.getLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY,DFSConfigKeys.DFS_BLOCK_SIZE_DEFAULT);
  bufferSize=config.getInt(CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_KEY,CommonConfigurationKeysPublic.IO_FILE_BUFFER_SIZE_DEFAULT);
  writeDumpDir=config.get(Nfs3Constant.FILE_DUMP_DIR_KEY,Nfs3Constant.FILE_DUMP_DIR_DEFAULT);
  boolean enableDump=config.getBoolean(Nfs3Constant.ENABLE_FILE_DUMP_KEY,Nfs3Constant.ENABLE_FILE_DUMP_DEFAULT);
  UserGroupInformation.setConfiguration(config);
  SecurityUtil.login(config,DFS_NFS_KEYTAB_FILE_KEY,DFS_NFS_KERBEROS_PRINCIPAL_KEY);
  if (!enableDump) {
    writeDumpDir=null;
  }
 else {
    clearDirectory(writeDumpDir);
  }
  rpcCallCache=new RpcCallCache("NFS3",256);
}
