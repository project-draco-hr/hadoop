{
  PATHCONF3Response response=new PATHCONF3Response(Nfs3Status.NFS3_OK);
  if (!checkAccessPrivilege(client,AccessPrivilege.READ_ONLY)) {
    response.setStatus(Nfs3Status.NFS3ERR_ACCES);
    return response;
  }
  DFSClient dfsClient=clientCache.getDfsClient(securityHandler.getUser());
  if (dfsClient == null) {
    response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);
    return response;
  }
  PATHCONF3Request request=null;
  try {
    request=new PATHCONF3Request(xdr);
  }
 catch (  IOException e) {
    LOG.error("Invalid PATHCONF request");
    return new PATHCONF3Response(Nfs3Status.NFS3ERR_INVAL);
  }
  FileHandle handle=request.getHandle();
  Nfs3FileAttributes attrs;
  if (LOG.isDebugEnabled()) {
    LOG.debug("NFS PATHCONF fileId: " + handle.getFileId());
  }
  try {
    attrs=Nfs3Utils.getFileAttr(dfsClient,Nfs3Utils.getFileIdPath(handle),iug);
    if (attrs == null) {
      LOG.info("Can't get path for fileId:" + handle.getFileId());
      return new PATHCONF3Response(Nfs3Status.NFS3ERR_STALE);
    }
    return new PATHCONF3Response(Nfs3Status.NFS3_OK,attrs,0,HdfsConstants.MAX_PATH_LENGTH,true,false,false,true);
  }
 catch (  IOException e) {
    LOG.warn("Exception ",e);
    return new PATHCONF3Response(Nfs3Status.NFS3ERR_IO);
  }
}
