{
  SYMLINK3Response response=new SYMLINK3Response(Nfs3Status.NFS3_OK);
  if (!checkAccessPrivilege(client,AccessPrivilege.READ_WRITE)) {
    response.setStatus(Nfs3Status.NFS3ERR_ACCES);
    return response;
  }
  DFSClient dfsClient=clientCache.getDfsClient(securityHandler.getUser());
  if (dfsClient == null) {
    response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);
    return response;
  }
  SYMLINK3Request request=null;
  try {
    request=new SYMLINK3Request(xdr);
  }
 catch (  IOException e) {
    LOG.error("Invalid SYMLINK request");
    response.setStatus(Nfs3Status.NFS3ERR_INVAL);
    return response;
  }
  FileHandle dirHandle=request.getHandle();
  String name=request.getName();
  String symData=request.getSymData();
  String linkDirIdPath=Nfs3Utils.getFileIdPath(dirHandle);
  String linkIdPath=linkDirIdPath + "/" + name;
  if (LOG.isDebugEnabled()) {
    LOG.debug("NFS SYMLINK, target: " + symData + " link: "+ linkIdPath);
  }
  try {
    WccData dirWcc=response.getDirWcc();
    WccAttr preOpAttr=Nfs3Utils.getWccAttr(dfsClient,linkDirIdPath);
    dirWcc.setPreOpAttr(preOpAttr);
    dfsClient.createSymlink(symData,linkIdPath,false);
    HdfsFileStatus linkstat=dfsClient.getFileLinkInfo(linkIdPath);
    Nfs3FileAttributes objAttr=Nfs3Utils.getNfs3FileAttrFromFileStatus(linkstat,iug);
    dirWcc.setPostOpAttr(Nfs3Utils.getFileAttr(dfsClient,linkDirIdPath,iug));
    return new SYMLINK3Response(Nfs3Status.NFS3_OK,new FileHandle(objAttr.getFileid()),objAttr,dirWcc);
  }
 catch (  IOException e) {
    LOG.warn("Exception:" + e);
    response.setStatus(Nfs3Status.NFS3ERR_IO);
    return response;
  }
}
