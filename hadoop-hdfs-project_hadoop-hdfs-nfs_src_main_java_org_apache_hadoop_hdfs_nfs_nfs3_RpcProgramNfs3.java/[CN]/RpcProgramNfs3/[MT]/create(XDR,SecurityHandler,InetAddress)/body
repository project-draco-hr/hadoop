{
  CREATE3Response response=new CREATE3Response(Nfs3Status.NFS3_OK);
  DFSClient dfsClient=clientCache.get(securityHandler.getUser());
  if (dfsClient == null) {
    response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);
    return response;
  }
  CREATE3Request request=null;
  try {
    request=new CREATE3Request(xdr);
  }
 catch (  IOException e) {
    LOG.error("Invalid CREATE request");
    return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);
  }
  FileHandle dirHandle=request.getHandle();
  String fileName=request.getName();
  if (LOG.isDebugEnabled()) {
    LOG.debug("NFS CREATE dir fileId: " + dirHandle.getFileId() + " filename: "+ fileName);
  }
  int createMode=request.getMode();
  if ((createMode != Nfs3Constant.CREATE_EXCLUSIVE) && request.getObjAttr().getUpdateFields().contains(SetAttrField.SIZE)) {
    LOG.error("Setting file size is not supported when creating file: " + fileName + " dir fileId:"+ dirHandle.getFileId());
    return new CREATE3Response(Nfs3Status.NFS3ERR_INVAL);
  }
  HdfsDataOutputStream fos=null;
  String dirFileIdPath=Nfs3Utils.getFileIdPath(dirHandle);
  Nfs3FileAttributes preOpDirAttr=null;
  Nfs3FileAttributes postOpObjAttr=null;
  FileHandle fileHandle=null;
  WccData dirWcc=null;
  try {
    preOpDirAttr=Nfs3Utils.getFileAttr(dfsClient,dirFileIdPath,iug);
    if (preOpDirAttr == null) {
      LOG.error("Can't get path for dirHandle:" + dirHandle);
      return new CREATE3Response(Nfs3Status.NFS3ERR_STALE);
    }
    if (!checkAccessPrivilege(client,AccessPrivilege.READ_WRITE)) {
      return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES,null,preOpDirAttr,new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),preOpDirAttr));
    }
    String fileIdPath=Nfs3Utils.getFileIdPath(dirHandle) + "/" + fileName;
    SetAttr3 setAttr3=request.getObjAttr();
    assert(setAttr3 != null);
    FsPermission permission=setAttr3.getUpdateFields().contains(SetAttrField.MODE) ? new FsPermission((short)setAttr3.getMode()) : FsPermission.getDefault().applyUMask(umask);
    EnumSet<CreateFlag> flag=(createMode != Nfs3Constant.CREATE_EXCLUSIVE) ? EnumSet.of(CreateFlag.CREATE,CreateFlag.OVERWRITE) : EnumSet.of(CreateFlag.CREATE);
    fos=new HdfsDataOutputStream(dfsClient.create(fileIdPath,permission,flag,false,replication,blockSize,null,bufferSize,null),statistics);
    if ((createMode == Nfs3Constant.CREATE_UNCHECKED) || (createMode == Nfs3Constant.CREATE_GUARDED)) {
      if (!setAttr3.getUpdateFields().contains(SetAttrField.GID)) {
        setAttr3.getUpdateFields().add(SetAttrField.GID);
        setAttr3.setGid(securityHandler.getGid());
      }
      setattrInternal(dfsClient,fileIdPath,setAttr3,false);
    }
    postOpObjAttr=Nfs3Utils.getFileAttr(dfsClient,fileIdPath,iug);
    dirWcc=Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),dfsClient,dirFileIdPath,iug);
  }
 catch (  IOException e) {
    LOG.error("Exception",e);
    if (fos != null) {
      try {
        fos.close();
      }
 catch (      IOException e1) {
        LOG.error("Can't close stream for dirFileId:" + dirHandle.getFileId() + " filename: "+ fileName);
      }
    }
    if (dirWcc == null) {
      try {
        dirWcc=Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),dfsClient,dirFileIdPath,iug);
      }
 catch (      IOException e1) {
        LOG.error("Can't get postOpDirAttr for dirFileId:" + dirHandle.getFileId());
      }
    }
    if (e instanceof AccessControlException) {
      return new CREATE3Response(Nfs3Status.NFS3ERR_ACCES,fileHandle,postOpObjAttr,dirWcc);
    }
 else {
      return new CREATE3Response(Nfs3Status.NFS3ERR_IO,fileHandle,postOpObjAttr,dirWcc);
    }
  }
  OpenFileCtx openFileCtx=new OpenFileCtx(fos,postOpObjAttr,writeDumpDir + "/" + postOpObjAttr.getFileId());
  fileHandle=new FileHandle(postOpObjAttr.getFileId());
  writeManager.addOpenFileStream(fileHandle,openFileCtx);
  if (LOG.isDebugEnabled()) {
    LOG.debug("open stream for file:" + fileName + ", fileId:"+ fileHandle.getFileId());
  }
  return new CREATE3Response(Nfs3Status.NFS3_OK,fileHandle,postOpObjAttr,dirWcc);
}
