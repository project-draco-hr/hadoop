{
  REMOVE3Response response=new REMOVE3Response(Nfs3Status.NFS3_OK);
  DFSClient dfsClient=clientCache.getDfsClient(securityHandler.getUser());
  if (dfsClient == null) {
    response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);
    return response;
  }
  REMOVE3Request request=null;
  try {
    request=new REMOVE3Request(xdr);
  }
 catch (  IOException e) {
    LOG.error("Invalid REMOVE request");
    return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);
  }
  FileHandle dirHandle=request.getHandle();
  String fileName=request.getName();
  if (LOG.isDebugEnabled()) {
    LOG.debug("NFS REMOVE dir fileId: " + dirHandle.getFileId() + " fileName: "+ fileName);
  }
  String dirFileIdPath=Nfs3Utils.getFileIdPath(dirHandle);
  Nfs3FileAttributes preOpDirAttr=null;
  Nfs3FileAttributes postOpDirAttr=null;
  try {
    preOpDirAttr=Nfs3Utils.getFileAttr(dfsClient,dirFileIdPath,iug);
    if (preOpDirAttr == null) {
      LOG.info("Can't get path for dir fileId:" + dirHandle.getFileId());
      return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);
    }
    String fileIdPath=dirFileIdPath + "/" + fileName;
    HdfsFileStatus fstat=Nfs3Utils.getFileStatus(dfsClient,fileIdPath);
    if (fstat == null) {
      WccData dirWcc=new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),preOpDirAttr);
      return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT,dirWcc);
    }
    if (fstat.isDir()) {
      WccData dirWcc=new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),preOpDirAttr);
      return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR,dirWcc);
    }
    boolean result=dfsClient.delete(fileIdPath,false);
    WccData dirWcc=Nfs3Utils.createWccData(Nfs3Utils.getWccAttr(preOpDirAttr),dfsClient,dirFileIdPath,iug);
    if (!result) {
      return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES,dirWcc);
    }
    return new REMOVE3Response(Nfs3Status.NFS3_OK,dirWcc);
  }
 catch (  IOException e) {
    LOG.warn("Exception ",e);
    if (postOpDirAttr == null) {
      try {
        postOpDirAttr=Nfs3Utils.getFileAttr(dfsClient,dirFileIdPath,iug);
      }
 catch (      IOException e1) {
        LOG.info("Can't get postOpDirAttr for " + dirFileIdPath);
      }
    }
    WccData dirWcc=new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),postOpDirAttr);
    if (e instanceof AccessControlException) {
      return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM,dirWcc);
    }
 else {
      return new REMOVE3Response(Nfs3Status.NFS3ERR_IO,dirWcc);
    }
  }
}
