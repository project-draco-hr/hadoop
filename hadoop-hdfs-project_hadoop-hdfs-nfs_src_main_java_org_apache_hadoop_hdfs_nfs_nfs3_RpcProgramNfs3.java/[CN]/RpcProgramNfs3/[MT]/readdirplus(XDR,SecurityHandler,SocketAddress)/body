{
  if (!checkAccessPrivilege(remoteAddress,AccessPrivilege.READ_ONLY)) {
    return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_ACCES);
  }
  DFSClient dfsClient=clientCache.getDfsClient(securityHandler.getUser());
  if (dfsClient == null) {
    return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_SERVERFAULT);
  }
  READDIRPLUS3Request request=null;
  try {
    request=new READDIRPLUS3Request(xdr);
  }
 catch (  IOException e) {
    LOG.error("Invalid READDIRPLUS request");
    return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_INVAL);
  }
  FileHandle handle=request.getHandle();
  long cookie=request.getCookie();
  if (cookie < 0) {
    LOG.error("Invalid READDIRPLUS request, with negitve cookie:" + cookie);
    return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_INVAL);
  }
  long dirCount=request.getDirCount();
  if (dirCount <= 0) {
    LOG.info("Nonpositive dircount in invalid READDIRPLUS request:" + dirCount);
    return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_INVAL);
  }
  int maxCount=request.getMaxCount();
  if (maxCount <= 0) {
    LOG.info("Nonpositive maxcount in invalid READDIRPLUS request:" + maxCount);
    return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_INVAL);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("NFS READDIRPLUS fileId: " + handle.getFileId() + " cookie: "+ cookie+ " dirCount: "+ dirCount+ " maxCount: "+ maxCount);
  }
  HdfsFileStatus dirStatus;
  DirectoryListing dlisting=null;
  Nfs3FileAttributes postOpDirAttr=null;
  long dotdotFileId=0;
  try {
    String dirFileIdPath=Nfs3Utils.getFileIdPath(handle);
    dirStatus=dfsClient.getFileInfo(dirFileIdPath);
    if (dirStatus == null) {
      LOG.info("Can't get path for fileId:" + handle.getFileId());
      return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_STALE);
    }
    if (!dirStatus.isDir()) {
      LOG.error("Can't readdirplus for regular file, fileId:" + handle.getFileId());
      return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_NOTDIR);
    }
    long cookieVerf=request.getCookieVerf();
    if ((cookieVerf != 0) && (cookieVerf != dirStatus.getModificationTime())) {
      LOG.error("CookierVerf mismatch. request cookierVerf:" + cookieVerf + " dir cookieVerf:"+ dirStatus.getModificationTime());
      return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_BAD_COOKIE);
    }
    if (cookie == 0) {
      String dotdotFileIdPath=dirFileIdPath + "/..";
      HdfsFileStatus dotdotStatus=dfsClient.getFileInfo(dotdotFileIdPath);
      if (dotdotStatus == null) {
        throw new IOException("Can't get path for handle path:" + dotdotFileIdPath);
      }
      dotdotFileId=dotdotStatus.getFileId();
    }
    byte[] startAfter;
    if (cookie == 0) {
      startAfter=HdfsFileStatus.EMPTY_NAME;
    }
 else {
      String inodeIdPath=Nfs3Utils.getFileIdPath(cookie);
      startAfter=inodeIdPath.getBytes();
    }
    dlisting=listPaths(dfsClient,dirFileIdPath,startAfter);
    postOpDirAttr=Nfs3Utils.getFileAttr(dfsClient,dirFileIdPath,iug);
    if (postOpDirAttr == null) {
      LOG.info("Can't get path for fileId:" + handle.getFileId());
      return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_STALE);
    }
  }
 catch (  IOException e) {
    LOG.warn("Exception ",e);
    return new READDIRPLUS3Response(Nfs3Status.NFS3ERR_IO);
  }
  HdfsFileStatus[] fstatus=dlisting.getPartialListing();
  int n=(int)Math.min(fstatus.length,dirCount - 2);
  boolean eof=(n < fstatus.length) ? false : (dlisting.getRemainingEntries() == 0);
  READDIRPLUS3Response.EntryPlus3[] entries;
  if (cookie == 0) {
    entries=new READDIRPLUS3Response.EntryPlus3[n + 2];
    entries[0]=new READDIRPLUS3Response.EntryPlus3(postOpDirAttr.getFileId(),".",0,postOpDirAttr,new FileHandle(postOpDirAttr.getFileId()));
    entries[1]=new READDIRPLUS3Response.EntryPlus3(dotdotFileId,"..",dotdotFileId,postOpDirAttr,new FileHandle(dotdotFileId));
    for (int i=2; i < n + 2; i++) {
      long fileId=fstatus[i - 2].getFileId();
      FileHandle childHandle=new FileHandle(fileId);
      Nfs3FileAttributes attr;
      try {
        attr=writeManager.getFileAttr(dfsClient,childHandle,iug);
      }
 catch (      IOException e) {
        LOG.error("Can't get file attributes for fileId:" + fileId,e);
        continue;
      }
      entries[i]=new READDIRPLUS3Response.EntryPlus3(fileId,fstatus[i - 2].getLocalName(),fileId,attr,childHandle);
    }
  }
 else {
    entries=new READDIRPLUS3Response.EntryPlus3[n];
    for (int i=0; i < n; i++) {
      long fileId=fstatus[i].getFileId();
      FileHandle childHandle=new FileHandle(fileId);
      Nfs3FileAttributes attr;
      try {
        attr=writeManager.getFileAttr(dfsClient,childHandle,iug);
      }
 catch (      IOException e) {
        LOG.error("Can't get file attributes for fileId:" + fileId,e);
        continue;
      }
      entries[i]=new READDIRPLUS3Response.EntryPlus3(fileId,fstatus[i].getLocalName(),fileId,attr,childHandle);
    }
  }
  DirListPlus3 dirListPlus=new READDIRPLUS3Response.DirListPlus3(entries,eof);
  return new READDIRPLUS3Response(Nfs3Status.NFS3_OK,postOpDirAttr,dirStatus.getModificationTime(),dirListPlus);
}
