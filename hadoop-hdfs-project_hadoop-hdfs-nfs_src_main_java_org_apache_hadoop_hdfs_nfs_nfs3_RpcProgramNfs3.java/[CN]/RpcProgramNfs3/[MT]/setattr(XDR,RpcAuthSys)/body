{
  SETATTR3Response response=new SETATTR3Response(Nfs3Status.NFS3_OK);
  String uname=authSysCheck(authSys);
  DFSClient dfsClient=clientCache.get(uname);
  if (dfsClient == null) {
    response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);
    return response;
  }
  SETATTR3Request request=null;
  try {
    request=new SETATTR3Request(xdr);
  }
 catch (  IOException e) {
    LOG.error("Invalid SETATTR request");
    response.setStatus(Nfs3Status.NFS3ERR_INVAL);
    return response;
  }
  FileHandle handle=request.getHandle();
  if (LOG.isDebugEnabled()) {
    LOG.debug("NFS SETATTR fileId: " + handle.getFileId());
  }
  if (request.getAttr().getUpdateFields().contains(SetAttrField.SIZE)) {
    LOG.error("Setting file size is not supported when setattr, fileId: " + handle.getFileId());
    response.setStatus(Nfs3Status.NFS3ERR_INVAL);
    return response;
  }
  String fileIdPath=Nfs3Utils.getFileIdPath(handle);
  WccAttr preOpAttr=null;
  try {
    preOpAttr=Nfs3Utils.getWccAttr(dfsClient,fileIdPath);
    if (preOpAttr == null) {
      LOG.info("Can't get path for fileId:" + handle.getFileId());
      response.setStatus(Nfs3Status.NFS3ERR_STALE);
      return response;
    }
    if (request.isCheck()) {
      if (!preOpAttr.getCtime().equals(request.getCtime())) {
        WccData wccData=Nfs3Utils.createWccData(preOpAttr,dfsClient,fileIdPath,iug);
        return new SETATTR3Response(Nfs3Status.NFS3ERR_NOT_SYNC,wccData);
      }
    }
    setattrInternal(dfsClient,fileIdPath,request.getAttr(),true);
    Nfs3FileAttributes postOpAttr=Nfs3Utils.getFileAttr(dfsClient,fileIdPath,iug);
    WccData wccData=new WccData(preOpAttr,postOpAttr);
    return new SETATTR3Response(Nfs3Status.NFS3_OK,wccData);
  }
 catch (  IOException e) {
    LOG.warn("Exception ",e);
    WccData wccData=null;
    try {
      wccData=Nfs3Utils.createWccData(preOpAttr,dfsClient,fileIdPath,iug);
    }
 catch (    IOException e1) {
      LOG.info("Can't get postOpAttr for fileIdPath: " + fileIdPath);
    }
    if (e instanceof AccessControlException) {
      return new SETATTR3Response(Nfs3Status.NFS3ERR_ACCES,wccData);
    }
 else {
      return new SETATTR3Response(Nfs3Status.NFS3ERR_IO,wccData);
    }
  }
}
