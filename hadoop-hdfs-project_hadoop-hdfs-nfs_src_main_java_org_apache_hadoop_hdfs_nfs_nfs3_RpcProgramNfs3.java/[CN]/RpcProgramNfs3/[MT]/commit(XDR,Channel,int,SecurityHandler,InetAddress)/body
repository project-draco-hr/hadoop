{
  COMMIT3Response response=new COMMIT3Response(Nfs3Status.NFS3_OK);
  DFSClient dfsClient=clientCache.get(securityHandler.getUser());
  if (dfsClient == null) {
    response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);
    return response;
  }
  COMMIT3Request request=null;
  try {
    request=new COMMIT3Request(xdr);
  }
 catch (  IOException e) {
    LOG.error("Invalid COMMIT request");
    response.setStatus(Nfs3Status.NFS3ERR_INVAL);
    return response;
  }
  FileHandle handle=request.getHandle();
  if (LOG.isDebugEnabled()) {
    LOG.debug("NFS COMMIT fileId: " + handle.getFileId() + " offset="+ request.getOffset()+ " count="+ request.getCount());
  }
  String fileIdPath=Nfs3Utils.getFileIdPath(handle);
  Nfs3FileAttributes preOpAttr=null;
  try {
    preOpAttr=Nfs3Utils.getFileAttr(dfsClient,fileIdPath,iug);
    if (preOpAttr == null) {
      LOG.info("Can't get path for fileId:" + handle.getFileId());
      return new COMMIT3Response(Nfs3Status.NFS3ERR_STALE);
    }
    if (!checkAccessPrivilege(client,AccessPrivilege.READ_WRITE)) {
      return new COMMIT3Response(Nfs3Status.NFS3ERR_ACCES,new WccData(Nfs3Utils.getWccAttr(preOpAttr),preOpAttr),Nfs3Constant.WRITE_COMMIT_VERF);
    }
    long commitOffset=(request.getCount() == 0) ? 0 : (request.getOffset() + request.getCount());
    writeManager.handleCommit(dfsClient,handle,commitOffset,channel,xid,preOpAttr);
    return null;
  }
 catch (  IOException e) {
    LOG.warn("Exception ",e);
    Nfs3FileAttributes postOpAttr=null;
    try {
      postOpAttr=writeManager.getFileAttr(dfsClient,handle,iug);
    }
 catch (    IOException e1) {
      LOG.info("Can't get postOpAttr for fileId: " + handle.getFileId());
    }
    WccData fileWcc=new WccData(Nfs3Utils.getWccAttr(preOpAttr),postOpAttr);
    return new COMMIT3Response(Nfs3Status.NFS3ERR_IO,fileWcc,Nfs3Constant.WRITE_COMMIT_VERF);
  }
}
