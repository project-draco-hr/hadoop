{
  RpcCall rpcCall=(RpcCall)info.header();
  final NFSPROC3 nfsproc3=NFSPROC3.fromValue(rpcCall.getProcedure());
  int xid=rpcCall.getXid();
  byte[] data=new byte[info.data().readableBytes()];
  info.data().readBytes(data);
  XDR xdr=new XDR(data);
  XDR out=new XDR();
  InetAddress client=((InetSocketAddress)info.remoteAddress()).getAddress();
  Credentials credentials=rpcCall.getCredential();
  if (nfsproc3 != NFSPROC3.NULL) {
    if (credentials.getFlavor() != AuthFlavor.AUTH_SYS && credentials.getFlavor() != AuthFlavor.RPCSEC_GSS) {
      LOG.info("Wrong RPC AUTH flavor, " + credentials.getFlavor() + " is not AUTH_SYS or RPCSEC_GSS.");
      XDR reply=new XDR();
      RpcDeniedReply rdr=new RpcDeniedReply(xid,RpcReply.ReplyState.MSG_ACCEPTED,RpcDeniedReply.RejectState.AUTH_ERROR,new VerifierNone());
      rdr.write(reply);
      ChannelBuffer buf=ChannelBuffers.wrappedBuffer(reply.asReadOnlyWrap().buffer());
      RpcResponse rsp=new RpcResponse(buf,info.remoteAddress());
      RpcUtil.sendRpcResponse(ctx,rsp);
      return;
    }
  }
  if (!isIdempotent(rpcCall)) {
    RpcCallCache.CacheEntry entry=rpcCallCache.checkOrAddToCache(client,xid);
    if (entry != null) {
      if (entry.isCompleted()) {
        LOG.info("Sending the cached reply to retransmitted request " + xid);
        RpcUtil.sendRpcResponse(ctx,entry.getResponse());
        return;
      }
 else {
        LOG.info("Retransmitted request, transaction still in progress " + xid);
        return;
      }
    }
  }
  final long startTime=System.nanoTime();
  NFS3Response response=null;
  if (nfsproc3 == NFSPROC3.NULL) {
    response=nullProcedure();
  }
 else   if (nfsproc3 == NFSPROC3.GETATTR) {
    response=getattr(xdr,info);
    metrics.addGetattr(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.SETATTR) {
    response=setattr(xdr,info);
    metrics.addSetattr(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.LOOKUP) {
    response=lookup(xdr,info);
    metrics.addLookup(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.ACCESS) {
    response=access(xdr,info);
    metrics.addAccess(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.READLINK) {
    response=readlink(xdr,info);
    metrics.addReadlink(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.READ) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Nfs3Utils.READ_RPC_START + xid);
    }
    response=read(xdr,info);
    if (LOG.isDebugEnabled() && (nfsproc3 == NFSPROC3.READ)) {
      LOG.debug(Nfs3Utils.READ_RPC_END + xid);
    }
    metrics.addRead(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.WRITE) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(Nfs3Utils.WRITE_RPC_START + xid);
    }
    response=write(xdr,info);
  }
 else   if (nfsproc3 == NFSPROC3.CREATE) {
    response=create(xdr,info);
    metrics.addCreate(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.MKDIR) {
    response=mkdir(xdr,info);
    metrics.addMkdir(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.SYMLINK) {
    response=symlink(xdr,info);
    metrics.addSymlink(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.MKNOD) {
    response=mknod(xdr,info);
    metrics.addMknod(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.REMOVE) {
    response=remove(xdr,info);
    metrics.addRemove(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.RMDIR) {
    response=rmdir(xdr,info);
    metrics.addRmdir(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.RENAME) {
    response=rename(xdr,info);
    metrics.addRename(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.LINK) {
    response=link(xdr,info);
    metrics.addLink(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.READDIR) {
    response=readdir(xdr,info);
    metrics.addReaddir(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.READDIRPLUS) {
    response=readdirplus(xdr,info);
    metrics.addReaddirplus(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.FSSTAT) {
    response=fsstat(xdr,info);
    metrics.addFsstat(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.FSINFO) {
    response=fsinfo(xdr,info);
    metrics.addFsinfo(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.PATHCONF) {
    response=pathconf(xdr,info);
    metrics.addPathconf(Nfs3Utils.getElapsedTime(startTime));
  }
 else   if (nfsproc3 == NFSPROC3.COMMIT) {
    response=commit(xdr,info);
  }
 else {
    RpcAcceptedReply.getInstance(xid,RpcAcceptedReply.AcceptState.PROC_UNAVAIL,new VerifierNone()).write(out);
  }
  if (response == null) {
    if (LOG.isDebugEnabled()) {
      LOG.debug("No sync response, expect an async response for request XID=" + rpcCall.getXid());
    }
    return;
  }
  out=response.serialize(out,xid,new VerifierNone());
  ChannelBuffer buf=ChannelBuffers.wrappedBuffer(out.asReadOnlyWrap().buffer());
  RpcResponse rsp=new RpcResponse(buf,info.remoteAddress());
  if (!isIdempotent(rpcCall)) {
    rpcCallCache.callCompleted(client,xid,rsp);
  }
  RpcUtil.sendRpcResponse(ctx,rsp);
}
