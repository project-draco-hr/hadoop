{
  authenticationMethod=SecurityUtil.getAuthenticationMethod(conf);
  if (overrideNameRules || !HadoopKerberosName.hasRulesBeenSet()) {
    try {
      HadoopKerberosName.setConfiguration(conf);
    }
 catch (    IOException ioe) {
      throw new RuntimeException("Problem with Kerberos auth_to_local name configuration",ioe);
    }
  }
  try {
    kerberosMinSecondsBeforeRelogin=1000L * conf.getLong(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN,HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN_DEFAULT);
  }
 catch (  NumberFormatException nfe) {
    throw new IllegalArgumentException("Invalid attribute value for " + HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN + " of "+ conf.get(HADOOP_KERBEROS_MIN_SECONDS_BEFORE_RELOGIN));
  }
  if (!(groups instanceof TestingGroups)) {
    groups=Groups.getUserToGroupsMappingService(conf);
  }
  UserGroupInformation.conf=conf;
  if (metrics.getGroupsQuantiles == null) {
    int[] intervals=conf.getInts(HADOOP_USER_GROUP_METRICS_PERCENTILES_INTERVALS);
    if (intervals != null && intervals.length > 0) {
      final int length=intervals.length;
      MutableQuantiles[] getGroupsQuantiles=new MutableQuantiles[length];
      for (int i=0; i < length; i++) {
        getGroupsQuantiles[i]=metrics.registry.newQuantiles("getGroups" + intervals[i] + "s","Get groups","ops","latency",intervals[i]);
      }
      metrics.getGroupsQuantiles=getGroupsQuantiles;
    }
  }
}
