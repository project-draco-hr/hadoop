{
  DatanodeStorageInfo s1=DFSTestUtil.createDatanodeStorageInfo("10.10.1.1","s1");
  DatanodeDescriptor dd1=s1.getDatanodeDescriptor();
  DatanodeStorageInfo s2=DFSTestUtil.createDatanodeStorageInfo("10.10.1.2","s2");
  DatanodeDescriptor dd2=s2.getDatanodeDescriptor();
  DatanodeStorageInfo s3=DFSTestUtil.createDatanodeStorageInfo("10.10.1.3","s3");
  DatanodeDescriptor dd3=s3.getDatanodeDescriptor();
  dd1.isAlive=dd2.isAlive=dd3.isAlive=true;
  BlockInfoUnderConstructionContiguous blockInfo=new BlockInfoUnderConstructionContiguous(new Block(0,0,GenerationStamp.LAST_RESERVED_STAMP),(short)3,BlockUCState.UNDER_CONSTRUCTION,new DatanodeStorageInfo[]{s1,s2,s3});
  DFSTestUtil.resetLastUpdatesWithOffset(dd1,-3 * 1000);
  DFSTestUtil.resetLastUpdatesWithOffset(dd2,-1 * 1000);
  DFSTestUtil.resetLastUpdatesWithOffset(dd3,-2 * 1000);
  blockInfo.initializeBlockRecovery(1);
  BlockInfoUnderConstruction[] blockInfoRecovery=dd2.getLeaseRecoveryCommand(1);
  assertEquals(blockInfoRecovery[0],blockInfo);
  DFSTestUtil.resetLastUpdatesWithOffset(dd1,-2 * 1000);
  DFSTestUtil.resetLastUpdatesWithOffset(dd2,-1 * 1000);
  DFSTestUtil.resetLastUpdatesWithOffset(dd3,-3 * 1000);
  blockInfo.initializeBlockRecovery(2);
  blockInfoRecovery=dd1.getLeaseRecoveryCommand(1);
  assertEquals(blockInfoRecovery[0],blockInfo);
  DFSTestUtil.resetLastUpdatesWithOffset(dd1,-2 * 1000);
  DFSTestUtil.resetLastUpdatesWithOffset(dd2,-1 * 1000);
  DFSTestUtil.resetLastUpdatesWithOffset(dd3,-3 * 1000);
  blockInfo.initializeBlockRecovery(3);
  blockInfoRecovery=dd3.getLeaseRecoveryCommand(1);
  assertEquals(blockInfoRecovery[0],blockInfo);
  DFSTestUtil.resetLastUpdatesWithOffset(dd1,-2 * 1000);
  DFSTestUtil.resetLastUpdatesWithOffset(dd2,-1 * 1000);
  DFSTestUtil.resetLastUpdatesWithOffset(dd3,0);
  blockInfo.initializeBlockRecovery(3);
  blockInfoRecovery=dd3.getLeaseRecoveryCommand(1);
  assertEquals(blockInfoRecovery[0],blockInfo);
}
