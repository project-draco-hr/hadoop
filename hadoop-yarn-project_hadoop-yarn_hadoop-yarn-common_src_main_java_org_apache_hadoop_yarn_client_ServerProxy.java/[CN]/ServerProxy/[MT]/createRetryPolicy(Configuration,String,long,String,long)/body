{
  long maxWaitTime=conf.getLong(maxWaitTimeStr,defMaxWaitTime);
  long retryIntervalMS=conf.getLong(connectRetryIntervalStr,defRetryInterval);
  if (maxWaitTime == -1) {
    return RetryPolicies.RETRY_FOREVER;
  }
  Preconditions.checkArgument(maxWaitTime > 0,"Invalid Configuration. " + maxWaitTimeStr + " should be a positive value.");
  Preconditions.checkArgument(retryIntervalMS > 0,"Invalid Configuration. " + connectRetryIntervalStr + "should be a positive value.");
  RetryPolicy retryPolicy=RetryPolicies.retryUpToMaximumTimeWithFixedSleep(maxWaitTime,retryIntervalMS,TimeUnit.MILLISECONDS);
  Map<Class<? extends Exception>,RetryPolicy> exceptionToPolicyMap=new HashMap<Class<? extends Exception>,RetryPolicy>();
  exceptionToPolicyMap.put(EOFException.class,retryPolicy);
  exceptionToPolicyMap.put(ConnectException.class,retryPolicy);
  exceptionToPolicyMap.put(NoRouteToHostException.class,retryPolicy);
  exceptionToPolicyMap.put(UnknownHostException.class,retryPolicy);
  exceptionToPolicyMap.put(RetriableException.class,retryPolicy);
  exceptionToPolicyMap.put(SocketException.class,retryPolicy);
  exceptionToPolicyMap.put(NMNotYetReadyException.class,retryPolicy);
  return RetryPolicies.retryByException(RetryPolicies.TRY_ONCE_THEN_FAIL,exceptionToPolicyMap);
}
