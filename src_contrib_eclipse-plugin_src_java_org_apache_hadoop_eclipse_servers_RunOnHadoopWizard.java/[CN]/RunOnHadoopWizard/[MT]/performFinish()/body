{
  HadoopServer location=null;
  if (mainPage.createNew.getSelection()) {
    location=createNewPage.performFinish();
  }
 else   if (mainPage.table.getSelection().length == 1) {
    location=(HadoopServer)mainPage.table.getSelection()[0].getData();
  }
  if (location == null)   return false;
  File baseDir=Activator.getDefault().getStateLocation().toFile();
  File jarFile=JarModule.createJarPackage(resource);
  if (jarFile == null) {
    ErrorMessageDialog.display("Run on Hadoop","Unable to create or locate the JAR file for the Job");
    return false;
  }
  File confDir;
  try {
    confDir=File.createTempFile("hadoop-conf-","",baseDir);
    confDir.delete();
    confDir.mkdirs();
    if (!confDir.isDirectory()) {
      ErrorMessageDialog.display("Run on Hadoop","Cannot create temporary directory: " + confDir);
      return false;
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    return false;
  }
  JobConf conf=new JobConf(location.getConfiguration());
  conf.setJar(jarFile.getAbsolutePath());
  try {
    File confFile=new File(confDir,"hadoop-site.xml");
    FileOutputStream fos=new FileOutputStream(confFile);
    conf.writeXml(fos);
    fos.close();
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    return false;
  }
  List<String> classPath;
  try {
    classPath=iConf.getAttribute(IJavaLaunchConfigurationConstants.ATTR_CLASSPATH,new ArrayList());
    IPath confIPath=new Path(confDir.getAbsolutePath());
    IRuntimeClasspathEntry cpEntry=JavaRuntime.newArchiveRuntimeClasspathEntry(confIPath);
    classPath.add(0,cpEntry.getMemento());
    iConf.setAttribute(IJavaLaunchConfigurationConstants.ATTR_CLASSPATH,classPath);
  }
 catch (  CoreException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}
