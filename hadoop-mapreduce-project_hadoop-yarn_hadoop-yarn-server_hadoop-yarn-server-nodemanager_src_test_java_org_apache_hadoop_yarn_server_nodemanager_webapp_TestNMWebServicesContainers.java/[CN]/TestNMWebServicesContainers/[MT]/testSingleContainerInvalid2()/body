{
  WebResource r=resource();
  Application app=new MockApp(1);
  nmContext.getApplications().put(app.getAppId(),app);
  addAppContainers(app);
  Application app2=new MockApp(2);
  nmContext.getApplications().put(app2.getAppId(),app2);
  addAppContainers(app2);
  try {
    r.path("ws").path("v1").path("node").path("containers").path("container_1234_0001").accept(MediaType.APPLICATION_JSON).get(JSONObject.class);
    fail("should have thrown exception on invalid user query");
  }
 catch (  UniformInterfaceException ue) {
    ClientResponse response=ue.getResponse();
    assertEquals(Status.BAD_REQUEST,response.getClientResponseStatus());
    assertEquals(MediaType.APPLICATION_JSON_TYPE,response.getType());
    JSONObject msg=response.getEntity(JSONObject.class);
    JSONObject exception=msg.getJSONObject("RemoteException");
    assertEquals("incorrect number of elements",3,exception.length());
    String message=exception.getString("message");
    String type=exception.getString("exception");
    String classname=exception.getString("javaClassName");
    WebServicesTestUtils.checkStringMatch("exception message","java.lang.Exception: invalid container id, container_1234_0001",message);
    WebServicesTestUtils.checkStringMatch("exception type","BadRequestException",type);
    WebServicesTestUtils.checkStringMatch("exception classname","org.apache.hadoop.yarn.webapp.BadRequestException",classname);
  }
}
