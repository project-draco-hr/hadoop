{
  JobConf job;
  if (conf == null) {
    job=mr.createJobConf();
  }
 else {
    job=new JobConf(conf);
  }
  job.setInputFormat(WordCountInputFormat.class);
  FileSystem local=FileSystem.getLocal(job);
  Path testDir=new Path("file:" + System.getProperty("test.build.data"),"pipes");
  Path inDir=new Path(testDir,"input");
  nonPipedOutDir=new Path(testDir,"output");
  Path wordExec=new Path("testing/bin/application");
  Path jobXml=new Path(testDir,"job.xml");
{
    FileSystem fs=dfs.getFileSystem();
    fs.delete(wordExec.getParent(),true);
    fs.copyFromLocalFile(program,wordExec);
  }
  DataOutputStream out=local.create(new Path(inDir,"part0"));
  out.writeBytes("i am a silly test\n");
  out.writeBytes("you are silly\n");
  out.writeBytes("i am a cat test\n");
  out.writeBytes("you is silly\n");
  out.writeBytes("i am a billy test\n");
  out.writeBytes("hello are silly\n");
  out.close();
  out=local.create(new Path(inDir,"part1"));
  out.writeBytes("mall world things drink java\n");
  out.writeBytes("hall silly cats drink java\n");
  out.writeBytes("all dogs bow wow\n");
  out.writeBytes("hello drink java\n");
  out.close();
  local.delete(nonPipedOutDir,true);
  local.mkdirs(nonPipedOutDir,new FsPermission(FsAction.ALL,FsAction.ALL,FsAction.ALL));
  out=local.create(jobXml);
  job.writeXml(out);
  out.close();
  System.err.println("About to run: Submitter -conf " + jobXml + " -input "+ inDir+ " -output "+ nonPipedOutDir+ " -program "+ dfs.getFileSystem().makeQualified(wordExec));
  try {
    int ret=ToolRunner.run(new Submitter(),new String[]{"-conf",jobXml.toString(),"-input",inDir.toString(),"-output",nonPipedOutDir.toString(),"-program",dfs.getFileSystem().makeQualified(wordExec).toString(),"-reduces","2"});
    assertEquals(0,ret);
  }
 catch (  Exception e) {
    assertTrue("got exception: " + StringUtils.stringifyException(e),false);
  }
}
