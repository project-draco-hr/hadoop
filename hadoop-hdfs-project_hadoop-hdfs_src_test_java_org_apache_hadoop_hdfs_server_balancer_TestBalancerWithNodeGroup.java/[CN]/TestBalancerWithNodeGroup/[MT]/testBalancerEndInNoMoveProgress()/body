{
  Configuration conf=createConf();
  long[] capacities=new long[]{CAPACITY,CAPACITY,CAPACITY,CAPACITY};
  String[] racks=new String[]{RACK0,RACK0,RACK1,RACK1};
  String[] nodeGroups=new String[]{NODEGROUP0,NODEGROUP0,NODEGROUP1,NODEGROUP2};
  int numOfDatanodes=capacities.length;
  assertEquals(numOfDatanodes,racks.length);
  assertEquals(numOfDatanodes,nodeGroups.length);
  MiniDFSCluster.Builder builder=new MiniDFSCluster.Builder(conf).numDataNodes(capacities.length).racks(racks).simulatedCapacities(capacities);
  MiniDFSClusterWithNodeGroup.setNodeGroups(nodeGroups);
  cluster=new MiniDFSClusterWithNodeGroup(builder);
  try {
    cluster.waitActive();
    client=NameNodeProxies.createProxy(conf,cluster.getFileSystem(0).getUri(),ClientProtocol.class).getProxy();
    long totalCapacity=TestBalancer.sum(capacities);
    long totalUsedSpace=totalCapacity * 6 / 10;
    TestBalancer.createFile(cluster,filePath,totalUsedSpace / 3,(short)(3),0);
    runBalancerCanFinish(conf,totalUsedSpace,totalCapacity);
  }
  finally {
    cluster.shutdown();
  }
}
