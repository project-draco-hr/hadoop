{
  Configuration conf=createConf();
  long[] capacities=new long[]{CAPACITY,CAPACITY};
  String[] racks=new String[]{RACK0,RACK1};
  String[] nodeGroups=new String[]{NODEGROUP0,NODEGROUP1};
  int numOfDatanodes=capacities.length;
  assertEquals(numOfDatanodes,racks.length);
  MiniDFSCluster.Builder builder=new MiniDFSCluster.Builder(conf).numDataNodes(capacities.length).racks(racks).simulatedCapacities(capacities);
  MiniDFSClusterWithNodeGroup.setNodeGroups(nodeGroups);
  cluster=new MiniDFSClusterWithNodeGroup(builder);
  try {
    cluster.waitActive();
    client=NameNodeProxies.createProxy(conf,cluster.getFileSystem(0).getUri(),ClientProtocol.class).getProxy();
    long totalCapacity=TestBalancer.sum(capacities);
    long totalUsedSpace=totalCapacity * 3 / 10;
    long length=totalUsedSpace / numOfDatanodes;
    TestBalancer.createFile(cluster,filePath,length,(short)numOfDatanodes,0);
    LocatedBlocks lbs=client.getBlockLocations(filePath.toUri().getPath(),0,length);
    Set<ExtendedBlock> before=getBlocksOnRack(lbs.getLocatedBlocks(),RACK0);
    long newCapacity=CAPACITY;
    String newRack=RACK1;
    String newNodeGroup=NODEGROUP2;
    cluster.startDataNodes(conf,1,true,null,new String[]{newRack},new long[]{newCapacity},new String[]{newNodeGroup});
    totalCapacity+=newCapacity;
    runBalancerCanFinish(conf,totalUsedSpace,totalCapacity);
    lbs=client.getBlockLocations(filePath.toUri().getPath(),0,length);
    Set<ExtendedBlock> after=getBlocksOnRack(lbs.getLocatedBlocks(),RACK0);
    assertEquals(before,after);
  }
  finally {
    cluster.shutdown();
  }
}
