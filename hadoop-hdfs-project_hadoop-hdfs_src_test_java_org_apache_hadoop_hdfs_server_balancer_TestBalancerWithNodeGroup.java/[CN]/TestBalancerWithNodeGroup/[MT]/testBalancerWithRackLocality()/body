{
  Configuration conf=createConf();
  long[] capacities=new long[]{CAPACITY,CAPACITY};
  String[] racks=new String[]{RACK0,RACK1};
  String[] nodeGroups=new String[]{NODEGROUP0,NODEGROUP1};
  int numOfDatanodes=capacities.length;
  assertEquals(numOfDatanodes,racks.length);
  MiniDFSCluster.Builder builder=new MiniDFSCluster.Builder(conf).numDataNodes(capacities.length).racks(racks).simulatedCapacities(capacities);
  MiniDFSClusterWithNodeGroup.setNodeGroups(nodeGroups);
  cluster=new MiniDFSClusterWithNodeGroup(builder);
  try {
    cluster.waitActive();
    client=NameNodeProxies.createProxy(conf,cluster.getFileSystem(0).getUri(),ClientProtocol.class).getProxy();
    long totalCapacity=TestBalancer.sum(capacities);
    long totalUsedSpace=totalCapacity * 3 / 10;
    TestBalancer.createFile(cluster,filePath,totalUsedSpace / numOfDatanodes,(short)numOfDatanodes,0);
    long newCapacity=CAPACITY;
    String newRack=RACK1;
    String newNodeGroup=NODEGROUP2;
    cluster.startDataNodes(conf,1,true,null,new String[]{newRack},new long[]{newCapacity},new String[]{newNodeGroup});
    totalCapacity+=newCapacity;
    runBalancerCanFinish(conf,totalUsedSpace,totalCapacity);
    DatanodeInfo[] datanodeReport=client.getDatanodeReport(DatanodeReportType.ALL);
    Map<String,Integer> rackToUsedCapacity=new HashMap<String,Integer>();
    for (    DatanodeInfo datanode : datanodeReport) {
      String rack=NetworkTopology.getFirstHalf(datanode.getNetworkLocation());
      int usedCapacity=(int)datanode.getDfsUsed();
      if (rackToUsedCapacity.get(rack) != null) {
        rackToUsedCapacity.put(rack,usedCapacity + rackToUsedCapacity.get(rack));
      }
 else {
        rackToUsedCapacity.put(rack,usedCapacity);
      }
    }
    assertEquals(rackToUsedCapacity.size(),2);
    assertEquals(rackToUsedCapacity.get(RACK0),rackToUsedCapacity.get(RACK1));
  }
  finally {
    cluster.shutdown();
  }
}
