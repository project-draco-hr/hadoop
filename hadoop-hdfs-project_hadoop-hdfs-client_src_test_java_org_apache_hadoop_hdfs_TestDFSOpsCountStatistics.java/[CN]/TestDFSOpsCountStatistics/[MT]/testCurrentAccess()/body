{
  final int numThreads=10;
  final ExecutorService threadPool=newFixedThreadPool(numThreads);
  try {
    final CountDownLatch allReady=new CountDownLatch(numThreads);
    final CountDownLatch startBlocker=new CountDownLatch(1);
    final CountDownLatch allDone=new CountDownLatch(numThreads);
    final AtomicReference<Throwable> childError=new AtomicReference<>();
    for (int i=0; i < numThreads; i++) {
      threadPool.submit(new Runnable(){
        @Override public void run(){
          allReady.countDown();
          try {
            startBlocker.await();
            incrementOpsCountByRandomNumbers();
          }
 catch (          Throwable t) {
            LOG.error("Child failed when calling mkdir",t);
            childError.compareAndSet(null,t);
          }
 finally {
            allDone.countDown();
          }
        }
      }
);
    }
    allReady.await();
    startBlocker.countDown();
    allDone.await();
    assertNull("Child failed with exception.",childError.get());
    verifyStatistics();
  }
  finally {
    threadPool.shutdownNow();
  }
}
