{
  if (args.length - i < COUNT)   throw new IllegalArgumentException("args.length - i < COUNT = " + COUNT + ", args.length="+ args.length+ ", i="+ i+ ", args="+ Arrays.asList(args));
  final int nThreads=Integer.parseInt(args[i++]);
  final int nJobs=Integer.parseInt(args[i++]);
  final String type=args[i++];
  final int nParts=Integer.parseInt(args[i++]);
  final String remoteDir=args[i++];
  final File localDir=new File(args[i++]);
  if (!"m".equals(type) && !"r".equals(type) && !"x".equals(type)) {
    throw new IllegalArgumentException("type=" + type + " is not equal to m, r or x");
  }
 else   if (nParts <= 0) {
    throw new IllegalArgumentException("nParts = " + nParts + " <= 0");
  }
 else   if (nJobs <= 0) {
    throw new IllegalArgumentException("nJobs = " + nJobs + " <= 0");
  }
 else   if (nThreads <= 0) {
    throw new IllegalArgumentException("nThreads = " + nThreads + " <= 0");
  }
  Util.checkDirectory(localDir);
  return new Parameters("m".equals(type) ? MapSide.INSTANCE : "r".equals(type) ? ReduceSide.INSTANCE : MixMachine.INSTANCE,nThreads,nJobs,nParts,remoteDir,localDir);
}
