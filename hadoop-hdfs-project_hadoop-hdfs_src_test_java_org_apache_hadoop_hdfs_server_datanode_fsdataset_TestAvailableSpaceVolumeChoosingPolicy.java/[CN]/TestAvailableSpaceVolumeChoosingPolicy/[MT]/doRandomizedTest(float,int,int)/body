{
  @SuppressWarnings("unchecked") final AvailableSpaceVolumeChoosingPolicy<FsVolumeSpi> policy=ReflectionUtils.newInstance(AvailableSpaceVolumeChoosingPolicy.class,null);
  List<FsVolumeSpi> volumes=new ArrayList<FsVolumeSpi>();
  for (int i=0; i < lowSpaceVolumes; i++) {
    FsVolumeSpi volume=Mockito.mock(FsVolumeSpi.class);
    Mockito.when(volume.getAvailable()).thenReturn(1024L * 1024L);
    volumes.add(volume);
  }
  for (int i=0; i < highSpaceVolumes; i++) {
    FsVolumeSpi volume=Mockito.mock(FsVolumeSpi.class);
    Mockito.when(volume.getAvailable()).thenReturn(1024L * 1024L * 3);
    volumes.add(volume);
  }
  initPolicy(policy,preferencePercent);
  long lowAvailableSpaceVolumeSelected=0;
  long highAvailableSpaceVolumeSelected=0;
  for (int i=0; i < RANDOMIZED_ITERATIONS; i++) {
    FsVolumeSpi volume=policy.chooseVolume(volumes,100);
    for (int j=0; j < volumes.size(); j++) {
      if (volume == volumes.get(j) && j == 0) {
        lowAvailableSpaceVolumeSelected++;
      }
      if (volume == volumes.get(j) && j == lowSpaceVolumes) {
        highAvailableSpaceVolumeSelected++;
        break;
      }
    }
  }
  float expectedSelectionRatio=preferencePercent / (1 - preferencePercent);
  GenericTestUtils.assertValueNear((long)(lowAvailableSpaceVolumeSelected * expectedSelectionRatio),highAvailableSpaceVolumeSelected,RANDOMIZED_ALLOWED_ERROR);
}
