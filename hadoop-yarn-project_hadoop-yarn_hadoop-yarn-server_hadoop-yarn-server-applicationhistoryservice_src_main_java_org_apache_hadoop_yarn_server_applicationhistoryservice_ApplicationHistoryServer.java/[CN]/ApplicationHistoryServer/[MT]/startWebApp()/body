{
  Configuration conf=getConfig();
  TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(secretManagerService.getTimelineDelegationTokenSecretManager());
  String initializers=conf.get("hadoop.http.filter.initializers");
  boolean modifiedInitializers=false;
  initializers=initializers == null || initializers.length() == 0 ? "" : initializers;
  if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {
    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED,YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {
      if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {
        initializers=initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),CrossOriginFilterInitializer.class.getName());
      }
 else {
        if (initializers.length() != 0) {
          initializers+=",";
        }
        initializers+=CrossOriginFilterInitializer.class.getName();
      }
      modifiedInitializers=true;
    }
  }
  if (!initializers.contains(TimelineAuthenticationFilterInitializer.class.getName())) {
    if (initializers.length() != 0) {
      initializers+=",";
    }
    initializers+=TimelineAuthenticationFilterInitializer.class.getName();
    modifiedInitializers=true;
  }
  String[] parts=initializers.split(",");
  ArrayList<String> target=new ArrayList<String>();
  for (  String filterInitializer : parts) {
    filterInitializer=filterInitializer.trim();
    if (filterInitializer.equals(AuthenticationFilterInitializer.class.getName())) {
      modifiedInitializers=true;
      continue;
    }
    target.add(filterInitializer);
  }
  String actualInitializers=org.apache.commons.lang.StringUtils.join(target,",");
  if (modifiedInitializers) {
    conf.set("hadoop.http.filter.initializers",actualInitializers);
  }
  String bindAddress=WebAppUtils.getWebAppBindURL(conf,YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,WebAppUtils.getAHSWebAppURLWithoutScheme(conf));
  try {
    AHSWebApp ahsWebApp=new AHSWebApp(timelineDataManager,ahsClientService);
    webApp=WebApps.$for("applicationhistory",ApplicationHistoryClientService.class,ahsClientService,"ws").with(conf).withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS)).withCSRFProtection(YarnConfiguration.TIMELINE_CSRF_PREFIX).at(bindAddress).build(ahsWebApp);
    HttpServer2 httpServer=webApp.httpServer();
    String[] names=conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);
    WebAppContext webAppContext=httpServer.getWebAppContext();
    for (    String name : names) {
      String webPath=conf.get(YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);
      String onDiskPath=conf.get(YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);
      WebAppContext uiWebAppContext=new WebAppContext();
      uiWebAppContext.setContextPath(webPath);
      uiWebAppContext.setWar(onDiskPath);
      final String[] ALL_URLS={"/*"};
      FilterHolder[] filterHolders=webAppContext.getServletHandler().getFilters();
      for (      FilterHolder filterHolder : filterHolders) {
        if (!"guice".equals(filterHolder.getName())) {
          HttpServer2.defineFilter(uiWebAppContext,filterHolder.getName(),filterHolder.getClassName(),filterHolder.getInitParameters(),ALL_URLS);
        }
      }
      LOG.info("Hosting " + name + " from "+ onDiskPath+ " at "+ webPath);
      httpServer.addContext(uiWebAppContext,true);
    }
    httpServer.start();
    conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,this.getListenerAddress());
    LOG.info("Instantiating AHSWebApp at " + getPort());
  }
 catch (  Exception e) {
    String msg="AHSWebApp failed to start.";
    LOG.error(msg,e);
    throw new YarnRuntimeException(msg,e);
  }
}
