{
  Configuration conf=getConfig();
  TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(secretManagerService.getTimelineDelegationTokenSecretManager());
  String initializers=conf.get("hadoop.http.filter.initializers");
  boolean modifiedInitializers=false;
  initializers=initializers == null || initializers.length() == 0 ? "" : initializers;
  if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {
    if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED,YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {
      initializers=CrossOriginFilterInitializer.class.getName() + "," + initializers;
      modifiedInitializers=true;
    }
  }
  if (!initializers.contains(TimelineAuthenticationFilterInitializer.class.getName())) {
    initializers=TimelineAuthenticationFilterInitializer.class.getName() + "," + initializers;
    modifiedInitializers=true;
  }
  String[] parts=initializers.split(",");
  ArrayList<String> target=new ArrayList<String>();
  for (  String filterInitializer : parts) {
    filterInitializer=filterInitializer.trim();
    if (filterInitializer.equals(AuthenticationFilterInitializer.class.getName())) {
      modifiedInitializers=true;
      continue;
    }
    target.add(filterInitializer);
  }
  String actualInitializers=org.apache.commons.lang.StringUtils.join(target,",");
  if (modifiedInitializers) {
    conf.set("hadoop.http.filter.initializers",actualInitializers);
  }
  String bindAddress=WebAppUtils.getWebAppBindURL(conf,YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,WebAppUtils.getAHSWebAppURLWithoutScheme(conf));
  LOG.info("Instantiating AHSWebApp at " + bindAddress);
  try {
    webApp=WebApps.$for("applicationhistory",ApplicationHistoryClientService.class,ahsClientService,"ws").with(conf).at(bindAddress).start(new AHSWebApp(timelineDataManager,historyManager));
  }
 catch (  Exception e) {
    String msg="AHSWebApp failed to start.";
    LOG.error(msg,e);
    throw new YarnRuntimeException(msg,e);
  }
}
