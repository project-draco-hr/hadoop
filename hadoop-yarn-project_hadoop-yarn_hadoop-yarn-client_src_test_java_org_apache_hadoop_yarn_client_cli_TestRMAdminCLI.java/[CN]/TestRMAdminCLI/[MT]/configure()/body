{
  remoteAdminServiceAccessed=false;
  dummyNodeLabelsManager=new DummyCommonNodeLabelsManager();
  admin=mock(ResourceManagerAdministrationProtocol.class);
  when(admin.addToClusterNodeLabels(any(AddToClusterNodeLabelsRequest.class))).thenAnswer(new Answer<AddToClusterNodeLabelsResponse>(){
    @Override public AddToClusterNodeLabelsResponse answer(    InvocationOnMock invocation) throws Throwable {
      remoteAdminServiceAccessed=true;
      return AddToClusterNodeLabelsResponse.newInstance();
    }
  }
);
  haadmin=mock(HAServiceProtocol.class);
  when(haadmin.getServiceStatus()).thenReturn(new HAServiceStatus(HAServiceProtocol.HAServiceState.INITIALIZING));
  final HAServiceTarget haServiceTarget=mock(HAServiceTarget.class);
  when(haServiceTarget.getProxy(any(Configuration.class),anyInt())).thenReturn(haadmin);
  rmAdminCLI=new RMAdminCLI(new Configuration()){
    @Override protected ResourceManagerAdministrationProtocol createAdminProtocol() throws IOException {
      return admin;
    }
    @Override protected HAServiceTarget resolveTarget(    String rmId){
      return haServiceTarget;
    }
  }
;
  rmAdminCLI.localNodeLabelsManager=dummyNodeLabelsManager;
  YarnConfiguration conf=new YarnConfiguration();
  conf.setBoolean(YarnConfiguration.RM_HA_ENABLED,true);
  rmAdminCLIWithHAEnabled=new RMAdminCLI(conf){
    @Override protected ResourceManagerAdministrationProtocol createAdminProtocol() throws IOException {
      return admin;
    }
    @Override protected HAServiceTarget resolveTarget(    String rmId){
      return haServiceTarget;
    }
  }
;
}
