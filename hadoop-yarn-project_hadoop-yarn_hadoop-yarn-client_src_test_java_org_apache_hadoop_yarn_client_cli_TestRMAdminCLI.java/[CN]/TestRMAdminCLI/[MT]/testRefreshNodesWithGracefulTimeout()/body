{
  String[] args={"-refreshNodes","-g","1"};
  CheckForDecommissioningNodesResponse response=Records.newRecord(CheckForDecommissioningNodesResponse.class);
  HashSet<NodeId> decomNodes=new HashSet<NodeId>();
  response.setDecommissioningNodes(decomNodes);
  when(admin.checkForDecommissioningNodes(any(CheckForDecommissioningNodesRequest.class))).thenReturn(response);
  assertEquals(0,rmAdminCLI.run(args));
  verify(admin).refreshNodes(RefreshNodesRequest.newInstance(DecommissionType.GRACEFUL));
  String[] focefulDecomArgs={"-refreshNodes","-g","1"};
  decomNodes=new HashSet<NodeId>();
  response.setDecommissioningNodes(decomNodes);
  decomNodes.add(NodeId.newInstance("node1",100));
  response.setDecommissioningNodes(decomNodes);
  when(admin.checkForDecommissioningNodes(any(CheckForDecommissioningNodesRequest.class))).thenReturn(response);
  assertEquals(0,rmAdminCLI.run(focefulDecomArgs));
  verify(admin).refreshNodes(RefreshNodesRequest.newInstance(DecommissionType.FORCEFUL));
  String[] invalidArgs={"-refreshNodes","-ginvalid","invalid"};
  assertEquals(-1,rmAdminCLI.run(invalidArgs));
  String[] invalidTimeoutArgs={"-refreshNodes","-g","invalid"};
  assertEquals(-1,rmAdminCLI.run(invalidTimeoutArgs));
  String[] negativeTimeoutArgs={"-refreshNodes","-g","-1000"};
  assertEquals(-1,rmAdminCLI.run(negativeTimeoutArgs));
}
