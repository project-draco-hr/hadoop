{
  PrintStream oldOutPrintStream=System.out;
  PrintStream oldErrPrintStream=System.err;
  ByteArrayOutputStream dataOut=new ByteArrayOutputStream();
  ByteArrayOutputStream dataErr=new ByteArrayOutputStream();
  System.setOut(new PrintStream(dataOut));
  System.setErr(new PrintStream(dataErr));
  try {
    String[] args={"-help"};
    assertEquals(0,rmAdminCLI.run(args));
    oldOutPrintStream.println(dataOut);
    assertTrue(dataOut.toString().contains("rmadmin is the command to execute YARN administrative commands."));
    assertTrue(dataOut.toString().contains("yarn rmadmin [-refreshQueues] [-refreshNodes [-g [timeout in " + "seconds]]] [-refreshNodesResources] [-refreshSuperUserGroups" + "Configuration] [-refreshUserToGroupsMappings] "+ "[-refreshAdminAcls] [-refreshServiceAcl] [-getGroup "+ "[username]] [-addToClusterNodeLabels "+ "<\"label1(exclusive=true),label2(exclusive=false),label3\">] "+ "[-removeFromClusterNodeLabels <label1,label2,label3>] "+ "[-replaceLabelsOnNode "+ "<\"node1[:port]=label1,label2 node2[:port]=label1\">] "+ "[-directlyAccessNodeLabelStore]] [-updateNodeResource "+ "[NodeID] [MemSize] [vCores] ([OvercommitTimeout]) "+ "[-help [cmd]]"));
    assertTrue(dataOut.toString().contains("-refreshQueues: Reload the queues' acls, states and scheduler " + "specific properties."));
    assertTrue(dataOut.toString().contains("-refreshNodes [-g [timeout in seconds]]: Refresh the hosts information at the " + "ResourceManager."));
    assertTrue(dataOut.toString().contains("-refreshNodesResources: Refresh resources of NodeManagers at the " + "ResourceManager."));
    assertTrue(dataOut.toString().contains("-refreshUserToGroupsMappings: Refresh user-to-groups mappings"));
    assertTrue(dataOut.toString().contains("-refreshSuperUserGroupsConfiguration: Refresh superuser proxy" + " groups mappings"));
    assertTrue(dataOut.toString().contains("-refreshAdminAcls: Refresh acls for administration of " + "ResourceManager"));
    assertTrue(dataOut.toString().contains("-refreshServiceAcl: Reload the service-level authorization" + " policy file"));
    assertTrue(dataOut.toString().contains("-help [cmd]: Displays help for the given command or all " + "commands if none"));
    testError(new String[]{"-help","-refreshQueues"},"Usage: yarn rmadmin [-refreshQueues]",dataErr,0);
    testError(new String[]{"-help","-refreshNodes"},"Usage: yarn rmadmin [-refreshNodes [-g [timeout in seconds]]]",dataErr,0);
    testError(new String[]{"-help","-refreshNodesResources"},"Usage: yarn rmadmin [-refreshNodesResources]",dataErr,0);
    testError(new String[]{"-help","-refreshUserToGroupsMappings"},"Usage: yarn rmadmin [-refreshUserToGroupsMappings]",dataErr,0);
    testError(new String[]{"-help","-refreshSuperUserGroupsConfiguration"},"Usage: yarn rmadmin [-refreshSuperUserGroupsConfiguration]",dataErr,0);
    testError(new String[]{"-help","-refreshAdminAcls"},"Usage: yarn rmadmin [-refreshAdminAcls]",dataErr,0);
    testError(new String[]{"-help","-refreshServiceAcl"},"Usage: yarn rmadmin [-refreshServiceAcl]",dataErr,0);
    testError(new String[]{"-help","-getGroups"},"Usage: yarn rmadmin [-getGroups [username]]",dataErr,0);
    testError(new String[]{"-help","-transitionToActive"},"Usage: yarn rmadmin [-transitionToActive [--forceactive]" + " <serviceId>]",dataErr,0);
    testError(new String[]{"-help","-transitionToStandby"},"Usage: yarn rmadmin [-transitionToStandby <serviceId>]",dataErr,0);
    testError(new String[]{"-help","-getServiceState"},"Usage: yarn rmadmin [-getServiceState <serviceId>]",dataErr,0);
    testError(new String[]{"-help","-checkHealth"},"Usage: yarn rmadmin [-checkHealth <serviceId>]",dataErr,0);
    testError(new String[]{"-help","-failover"},"Usage: yarn rmadmin " + "[-failover [--forcefence] [--forceactive] " + "<serviceId> <serviceId>]",dataErr,0);
    testError(new String[]{"-help","-badParameter"},"Usage: yarn rmadmin",dataErr,0);
    testError(new String[]{"-badParameter"},"badParameter: Unknown command",dataErr,-1);
    assertEquals(0,rmAdminCLIWithHAEnabled.run(args));
    oldOutPrintStream.println(dataOut);
    String expectedHelpMsg="yarn rmadmin [-refreshQueues] [-refreshNodes [-g [timeout in seconds]]] " + "[-refreshNodesResources] [-refreshSuperUserGroupsConfiguration] " + "[-refreshUserToGroupsMappings] "+ "[-refreshAdminAcls] [-refreshServiceAcl] [-getGroup"+ " [username]] [-addToClusterNodeLabels <\"label1(exclusive=true),"+ "label2(exclusive=false),label3\">]"+ " [-removeFromClusterNodeLabels <label1,label2,label3>] [-replaceLabelsOnNode "+ "<\"node1[:port]=label1,label2 node2[:port]=label1\">] [-directlyAccessNodeLabelStore]] "+ "[-updateNodeResource [NodeID] [MemSize] [vCores] ([OvercommitTimeout]) "+ "[-transitionToActive [--forceactive] <serviceId>] "+ "[-transitionToStandby <serviceId>] "+ "[-getServiceState <serviceId>] [-checkHealth <serviceId>] [-help [cmd]]";
    String actualHelpMsg=dataOut.toString();
    assertTrue(String.format("Help messages: %n " + actualHelpMsg + " %n doesn't include expected "+ "messages: %n"+ expectedHelpMsg),actualHelpMsg.contains(expectedHelpMsg));
  }
  finally {
    System.setOut(oldOutPrintStream);
    System.setErr(oldErrPrintStream);
  }
}
