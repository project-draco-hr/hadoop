{
  when(admin.checkForDecommissioningNodes(any(CheckForDecommissioningNodesRequest.class))).thenAnswer(new Answer<CheckForDecommissioningNodesResponse>(){
    private int count=5;
    @Override public CheckForDecommissioningNodesResponse answer(    InvocationOnMock invocationOnMock) throws Throwable {
      CheckForDecommissioningNodesResponse response=Records.newRecord(CheckForDecommissioningNodesResponse.class);
      HashSet<NodeId> decomNodes=new HashSet<NodeId>();
      count--;
      if (count <= 0) {
        response.setDecommissioningNodes(decomNodes);
        return response;
      }
 else {
        decomNodes.add(NodeId.newInstance("node1",100));
        response.setDecommissioningNodes(decomNodes);
        return response;
      }
    }
  }
);
  assertEquals(0,rmAdminCLI.run(args));
  verify(admin,atLeastOnce()).refreshNodes(RefreshNodesRequest.newInstance(DecommissionType.GRACEFUL,-1));
  verify(admin,never()).refreshNodes(RefreshNodesRequest.newInstance(DecommissionType.FORCEFUL));
}
