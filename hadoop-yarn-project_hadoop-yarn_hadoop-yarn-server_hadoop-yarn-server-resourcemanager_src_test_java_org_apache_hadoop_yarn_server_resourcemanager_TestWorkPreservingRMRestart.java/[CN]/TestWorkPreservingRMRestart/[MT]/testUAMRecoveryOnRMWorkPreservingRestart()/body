{
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,1);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",15120,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app0=rm1.submitApp(200,true);
  MockAM am0=MockRM.launchUAM(app0,rm1,nm1);
  am0.registerAppAttempt();
  int numContainers=2;
  am0.allocate("127.0.0.1",1000,numContainers,new ArrayList<ContainerId>());
  nm1.nodeHeartbeat(true);
  List<Container> conts=am0.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers();
  Assert.assertTrue(conts.isEmpty());
  while (conts.size() == 0) {
    nm1.nodeHeartbeat(true);
    conts.addAll(am0.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
    Thread.sleep(500);
  }
  Assert.assertFalse(conts.isEmpty());
  rm2=new MockRM(conf,memStore);
  rm2.start();
  rm2.waitForState(app0.getApplicationId(),RMAppState.ACCEPTED);
  rm2.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.LAUNCHED);
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  RMApp recoveredApp=rm2.getRMContext().getRMApps().get(app0.getApplicationId());
  NMContainerStatus container1=TestRMRestart.createNMContainerStatus(am0.getApplicationAttemptId(),1,ContainerState.RUNNING);
  NMContainerStatus container2=TestRMRestart.createNMContainerStatus(am0.getApplicationAttemptId(),2,ContainerState.RUNNING);
  nm1.registerNode(Arrays.asList(container1,container2),null);
  waitForNumContainersToRecover(2,rm2,am0.getApplicationAttemptId());
  am0.setAMRMProtocol(rm2.getApplicationMasterService(),rm2.getRMContext());
  am0.registerAppAttempt(true);
  rm2.waitForState(app0.getApplicationId(),RMAppState.RUNNING);
  rm2.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.RUNNING);
  Map<ApplicationId,SchedulerApplication> schedulerApps=((AbstractYarnScheduler)rm2.getResourceScheduler()).getSchedulerApplications();
  SchedulerApplication schedulerApp=schedulerApps.get(recoveredApp.getApplicationId());
  SchedulerApplicationAttempt schedulerAttempt=schedulerApp.getCurrentAppAttempt();
  Assert.assertEquals(numContainers,schedulerAttempt.getLiveContainers().size());
  Assert.assertNotNull(am0.doHeartbeat());
  am0.unregisterAppAttempt(false);
  rm2.waitForState(am0.getApplicationAttemptId(),RMAppAttemptState.FINISHED);
  rm2.waitForState(app0.getApplicationId(),RMAppState.FINISHED);
  Assert.assertEquals(FinalApplicationStatus.SUCCEEDED,recoveredApp.getFinalApplicationStatus());
  MockRM rm3=new MockRM(conf,memStore);
  rm3.start();
  recoveredApp=rm3.getRMContext().getRMApps().get(app0.getApplicationId());
  Assert.assertEquals(RMAppState.FINISHED,recoveredApp.getState());
}
