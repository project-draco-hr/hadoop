{
  if (!schedulerClass.equals(CapacityScheduler.class)) {
    throw new QueueNotFoundException("Dummy");
  }
  conf.setBoolean(CapacitySchedulerConfiguration.ENABLE_USER_METRICS,true);
  conf.set(CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,DominantResourceCalculator.class.getName());
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration(conf);
  setupQueueConfiguration(csConf);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(csConf);
  rm1=new MockRM(csConf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",8192,rm1.getResourceTrackerService());
  MockNM nm2=new MockNM("127.1.1.1:4321",8192,rm1.getResourceTrackerService());
  nm1.registerNode();
  nm2.registerNode();
  RMApp app1_1=rm1.submitApp(1024,"app1_1",USER_1,null,A);
  MockAM am1_1=MockRM.launchAndRegisterAM(app1_1,rm1,nm1);
  RMApp app1_2=rm1.submitApp(1024,"app1_2",USER_1,null,A);
  MockAM am1_2=MockRM.launchAndRegisterAM(app1_2,rm1,nm2);
  RMApp app2=rm1.submitApp(1024,"app2",USER_2,null,B);
  MockAM am2=MockRM.launchAndRegisterAM(app2,rm1,nm2);
  RMApp appNA=rm1.submitApp(1024,"app1_2",USER_1,null,QUEUE_DOESNT_EXIST,false);
  rm1.clearQueueMetrics(app1_1);
  rm1.clearQueueMetrics(app1_2);
  rm1.clearQueueMetrics(app2);
  csConf=new CapacitySchedulerConfiguration(conf);
  setupQueueConfigurationOnlyA(csConf);
  rm2=new MockRM(csConf,memStore);
  rm2.start();
}
