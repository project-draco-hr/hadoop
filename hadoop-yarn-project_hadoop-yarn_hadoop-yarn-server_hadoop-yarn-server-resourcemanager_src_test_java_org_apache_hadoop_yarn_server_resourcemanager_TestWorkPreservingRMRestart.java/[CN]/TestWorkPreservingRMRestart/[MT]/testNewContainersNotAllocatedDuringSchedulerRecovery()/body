{
  conf.setLong(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_SCHEDULING_WAIT_MS,4000);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",8192,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app1=rm1.submitApp(200);
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  rm2=new MockRM(conf,memStore);
  rm2.start();
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  nm1.registerNode();
  ControlledClock clock=new ControlledClock();
  long startTime=System.currentTimeMillis();
  ((RMContextImpl)rm2.getRMContext()).setSystemClock(clock);
  am1.setAMRMProtocol(rm2.getApplicationMasterService(),rm2.getRMContext());
  am1.registerAppAttempt(true);
  rm2.waitForState(app1.getApplicationId(),RMAppState.RUNNING);
  am1.allocate("127.0.0.1",1000,1,new ArrayList<ContainerId>());
  List<Container> containers=new ArrayList<Container>();
  clock.setTime(startTime + 2000);
  nm1.nodeHeartbeat(true);
  Thread.sleep(3000);
  containers.addAll(am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
  Assert.assertTrue(containers.isEmpty());
  clock.setTime(startTime + 8000);
  nm1.nodeHeartbeat(true);
  while (containers.isEmpty()) {
    containers.addAll(am1.allocate(new ArrayList<ResourceRequest>(),new ArrayList<ContainerId>()).getAllocatedContainers());
    Thread.sleep(500);
  }
}
