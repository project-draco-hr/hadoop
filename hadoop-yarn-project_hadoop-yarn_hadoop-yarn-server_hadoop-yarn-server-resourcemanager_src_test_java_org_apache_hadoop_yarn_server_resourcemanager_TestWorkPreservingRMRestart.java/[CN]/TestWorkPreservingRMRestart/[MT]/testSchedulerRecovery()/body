{
  conf.setBoolean(CapacitySchedulerConfiguration.ENABLE_USER_METRICS,true);
  conf.set(CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS,DominantResourceCalculator.class.getName());
  int containerMemory=1024;
  Resource containerResource=Resource.newInstance(containerMemory,1);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",8192,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app1=rm1.submitApp(200);
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  rm1.clearQueueMetrics(app1);
  rm2=new MockRM(conf,memStore);
  rm2.start();
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  RMApp recoveredApp1=rm2.getRMContext().getRMApps().get(app1.getApplicationId());
  RMAppAttempt loadedAttempt1=recoveredApp1.getCurrentAppAttempt();
  NMContainerStatus amContainer=TestRMRestart.createNMContainerStatus(am1.getApplicationAttemptId(),1,ContainerState.RUNNING);
  NMContainerStatus runningContainer=TestRMRestart.createNMContainerStatus(am1.getApplicationAttemptId(),2,ContainerState.RUNNING);
  NMContainerStatus completedContainer=TestRMRestart.createNMContainerStatus(am1.getApplicationAttemptId(),3,ContainerState.COMPLETE);
  nm1.registerNode(Arrays.asList(amContainer,runningContainer,completedContainer),null);
  waitForNumContainersToRecover(2,rm2,am1.getApplicationAttemptId());
  Set<ContainerId> launchedContainers=((RMNodeImpl)rm2.getRMContext().getRMNodes().get(nm1.getNodeId())).getLaunchedContainers();
  assertTrue(launchedContainers.contains(amContainer.getContainerId()));
  assertTrue(launchedContainers.contains(runningContainer.getContainerId()));
  rm2.waitForState(nm1,amContainer.getContainerId(),RMContainerState.RUNNING);
  rm2.waitForState(nm1,runningContainer.getContainerId(),RMContainerState.RUNNING);
  rm2.waitForContainerToComplete(loadedAttempt1,completedContainer);
  AbstractYarnScheduler scheduler=(AbstractYarnScheduler)rm2.getResourceScheduler();
  SchedulerNode schedulerNode1=scheduler.getSchedulerNode(nm1.getNodeId());
  Resource usedResources=Resources.multiply(containerResource,2);
  Resource nmResource=Resource.newInstance(nm1.getMemory(),nm1.getvCores());
  assertTrue(schedulerNode1.isValidContainer(amContainer.getContainerId()));
  assertTrue(schedulerNode1.isValidContainer(runningContainer.getContainerId()));
  assertFalse(schedulerNode1.isValidContainer(completedContainer.getContainerId()));
  assertEquals(2,schedulerNode1.getNumContainers());
  assertEquals(Resources.subtract(nmResource,usedResources),schedulerNode1.getAvailableResource());
  assertEquals(usedResources,schedulerNode1.getUsedResource());
  Resource availableResources=Resources.subtract(nmResource,usedResources);
  Map<ApplicationId,SchedulerApplication> schedulerApps=((AbstractYarnScheduler)rm2.getResourceScheduler()).getSchedulerApplications();
  SchedulerApplication schedulerApp=schedulerApps.get(recoveredApp1.getApplicationId());
  if (schedulerClass.equals(CapacityScheduler.class)) {
    checkCSQueue(rm2,schedulerApp,nmResource,nmResource,usedResources,2);
  }
 else   if (schedulerClass.equals(FifoScheduler.class)) {
    checkFifoQueue(schedulerApp,usedResources,availableResources);
  }
  SchedulerApplicationAttempt schedulerAttempt=schedulerApp.getCurrentAppAttempt();
  assertTrue(schedulerAttempt.getLiveContainers().contains(scheduler.getRMContainer(amContainer.getContainerId())));
  assertTrue(schedulerAttempt.getLiveContainers().contains(scheduler.getRMContainer(runningContainer.getContainerId())));
  assertEquals(schedulerAttempt.getCurrentConsumption(),usedResources);
  assertEquals(availableResources,schedulerAttempt.getHeadroom());
  assertEquals((1 << 22) + 1,schedulerAttempt.getNewContainerId());
}
