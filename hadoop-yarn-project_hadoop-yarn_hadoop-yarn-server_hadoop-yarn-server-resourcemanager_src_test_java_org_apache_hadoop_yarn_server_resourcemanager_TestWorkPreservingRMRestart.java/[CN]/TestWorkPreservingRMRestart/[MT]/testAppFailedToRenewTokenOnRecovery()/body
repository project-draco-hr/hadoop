{
  conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,"kerberos");
  conf.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS,1);
  UserGroupInformation.setConfiguration(conf);
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  MockRM rm1=new TestSecurityMockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",8192,rm1.getResourceTrackerService());
  nm1.registerNode();
  RMApp app1=rm1.submitApp(200);
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  MockRM rm2=new TestSecurityMockRM(conf,memStore){
    protected DelegationTokenRenewer createDelegationTokenRenewer(){
      return new DelegationTokenRenewer(){
        @Override public void addApplicationSync(        ApplicationId applicationId,        Credentials ts,        boolean shouldCancelAtEnd,        String user) throws IOException {
          throw new IOException("Token renew failed !!");
        }
      }
;
    }
  }
;
  nm1.setResourceTrackerService(rm2.getResourceTrackerService());
  rm2.start();
  NMContainerStatus containerStatus=TestRMRestart.createNMContainerStatus(am1.getApplicationAttemptId(),1,ContainerState.RUNNING);
  nm1.registerNode(Arrays.asList(containerStatus),null);
  rm2.waitForState(app1.getApplicationId(),RMAppState.ACCEPTED);
  am1.setAMRMProtocol(rm2.getApplicationMasterService(),rm2.getRMContext());
  am1.registerAppAttempt(true);
  rm2.waitForState(app1.getApplicationId(),RMAppState.RUNNING);
  nm1.nodeHeartbeat(am1.getApplicationAttemptId(),1,ContainerState.COMPLETE);
  rm2.waitForState(am1.getApplicationAttemptId(),RMAppAttemptState.FAILED);
  rm2.waitForState(app1.getApplicationId(),RMAppState.FAILED);
}
