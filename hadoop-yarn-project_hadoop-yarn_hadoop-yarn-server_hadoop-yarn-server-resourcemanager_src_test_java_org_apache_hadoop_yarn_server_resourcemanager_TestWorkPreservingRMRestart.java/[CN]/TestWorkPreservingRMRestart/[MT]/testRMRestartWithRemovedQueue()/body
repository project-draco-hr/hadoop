{
  conf.setBoolean(YarnConfiguration.YARN_ACL_ENABLE,true);
  conf.set(YarnConfiguration.YARN_ADMIN_ACL,"");
  MemoryRMStateStore memStore=new MemoryRMStateStore();
  memStore.init(conf);
  rm1=new MockRM(conf,memStore);
  rm1.start();
  MockNM nm1=new MockNM("127.0.0.1:1234",8192,rm1.getResourceTrackerService());
  nm1.registerNode();
  final RMApp app1=rm1.submitApp(1024,"app1",USER_1,null);
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  MockRM.finishAMAndVerifyAppState(app1,rm1,nm1,am1);
  CapacitySchedulerConfiguration csConf=new CapacitySchedulerConfiguration(conf);
  csConf.setQueues(CapacitySchedulerConfiguration.ROOT,new String[]{QUEUE_DOESNT_EXIST});
  final String noQueue=CapacitySchedulerConfiguration.ROOT + "." + QUEUE_DOESNT_EXIST;
  csConf.setCapacity(noQueue,100);
  rm2=new MockRM(csConf,memStore);
  rm2.start();
  UserGroupInformation user2=UserGroupInformation.createRemoteUser("user2");
  ApplicationReport report=user2.doAs(new PrivilegedExceptionAction<ApplicationReport>(){
    @Override public ApplicationReport run() throws Exception {
      return rm2.getApplicationReport(app1.getApplicationId());
    }
  }
);
  Assert.assertNotNull(report);
}
