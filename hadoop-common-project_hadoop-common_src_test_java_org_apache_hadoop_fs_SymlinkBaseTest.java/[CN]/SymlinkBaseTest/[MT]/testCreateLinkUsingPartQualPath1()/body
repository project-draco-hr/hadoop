{
  assumeTrue(!"file".equals(getScheme()));
  Path schemeAuth=new Path(testURI().toString());
  Path fileWoHost=new Path(getScheme() + "://" + testBaseDir1()+ "/file");
  Path link=new Path(testBaseDir1() + "/linkToFile");
  Path linkQual=new Path(schemeAuth,testBaseDir1() + "/linkToFile");
  FSTestWrapper localWrapper=wrapper.getLocalFSWrapper();
  wrapper.createSymlink(fileWoHost,link,false);
  assertEquals(fileWoHost,wrapper.getLinkTarget(linkQual));
  assertEquals(fileWoHost.toString(),wrapper.getFileLinkStatus(link).getSymlink().toString());
  assertEquals(fileWoHost.toString(),wrapper.getFileLinkStatus(linkQual).getSymlink().toString());
  if (wrapper instanceof FileContextTestWrapper) {
    assertEquals(fileWoHost.toString(),localWrapper.getFileLinkStatus(linkQual).getSymlink().toString());
  }
  try {
    readFile(link);
    fail("DFS requires URIs with schemes have an authority");
  }
 catch (  java.lang.RuntimeException e) {
    assertTrue(wrapper instanceof FileContextTestWrapper);
  }
catch (  FileNotFoundException e) {
    assertTrue(wrapper instanceof FileSystemTestWrapper);
    GenericTestUtils.assertExceptionContains("File does not exist: /test1/file",e);
  }
}
