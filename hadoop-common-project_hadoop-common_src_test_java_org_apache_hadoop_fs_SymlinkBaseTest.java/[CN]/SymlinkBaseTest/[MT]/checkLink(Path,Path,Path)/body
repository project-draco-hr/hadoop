{
  Path dir=new Path(testBaseDir1());
  assertTrue(wrapper.isFile(linkAbs));
  assertFalse(wrapper.isDir(linkAbs));
  assertFalse(wrapper.getFileStatus(linkAbs).isSymlink());
  assertFalse(wrapper.getFileStatus(linkAbs).isDirectory());
  assertEquals(fileSize,wrapper.getFileStatus(linkAbs).getLen());
  assertTrue(wrapper.isSymlink(linkAbs));
  assertFalse(wrapper.getFileLinkStatus(linkAbs).isDirectory());
  assertEquals(targetQual.toString(),wrapper.getFileLinkStatus(linkAbs).getSymlink().toString());
  assertEquals(targetQual,wrapper.getFileLinkStatus(linkAbs).getSymlink());
  if (!"file".equals(getScheme())) {
    FileContext localFc=FileContext.getLocalFSFileContext();
    Path linkQual=new Path(testURI().toString(),linkAbs);
    assertEquals(targetQual,localFc.getFileLinkStatus(linkQual).getSymlink());
  }
  assertEquals(expectedTarget,wrapper.getLinkTarget(linkAbs));
  wrapper.setWorkingDirectory(dir);
  readFile(new Path("linkToFile"));
  readFile(linkAbs);
  readFile(new Path(testURI().toString(),linkAbs));
  boolean failureExpected=true;
  if ("file".equals(getScheme())) {
    failureExpected=false;
  }
 else   if (wrapper instanceof FileSystemTestWrapper) {
    failureExpected=false;
  }
  try {
    readFile(new Path(getScheme() + "://" + testBaseDir1()+ "/linkToFile"));
    assertFalse(failureExpected);
  }
 catch (  Exception e) {
    if (!failureExpected) {
      throw new IOException(e);
    }
  }
  if (wrapper instanceof FileContextTestWrapper && !"file".equals(getScheme())) {
    FSTestWrapper localWrapper=wrapper.getLocalFSWrapper();
    localWrapper.readFile(new Path(testURI().toString(),linkAbs),fileSize);
  }
}
