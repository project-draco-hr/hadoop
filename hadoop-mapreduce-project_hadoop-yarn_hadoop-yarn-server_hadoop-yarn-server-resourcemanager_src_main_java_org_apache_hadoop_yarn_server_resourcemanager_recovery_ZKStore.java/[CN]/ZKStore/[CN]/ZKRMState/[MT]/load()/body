{
  List<NodeReport> nodeInfos=listStoredNodes();
  final Pattern trackerPattern=Pattern.compile(".*:.*");
  final Matcher m=trackerPattern.matcher("");
  for (  NodeReport node : nodeInfos) {
    m.reset(node.getNodeId().getHost());
    if (!m.find()) {
      LOG.info("Skipping node, bad node-address " + node.getNodeId().getHost());
      continue;
    }
    String hostName=m.group(0);
    int cmPort=Integer.valueOf(m.group(1));
    m.reset(node.getHttpAddress());
    if (!m.find()) {
      LOG.info("Skipping node, bad http-address " + node.getHttpAddress());
      continue;
    }
    int httpPort=Integer.valueOf(m.group(1));
  }
  readLastNodeId();
  List<String> apps=null;
  try {
    apps=zkClient.getChildren(APPS,false);
  }
 catch (  InterruptedException ie) {
    LOG.info("Interrupted",ie);
    throw new InterruptedIOException(ie.getMessage());
  }
catch (  KeeperException ke) {
    throw convertToIOException(ke);
  }
  for (  String app : apps) {
    ApplicationInfo info=getAppInfo(app);
    applications.put(info.getApplicationMaster().getApplicationId(),info);
  }
}
