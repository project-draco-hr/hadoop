{
  Set<URI> ret=new HashSet<URI>();
  Set<URI> nonPreferredUris=new HashSet<URI>();
  for (  String nsId : nameServices) {
    URI nsUri=createUri(HdfsConstants.HDFS_URI_SCHEME,nsId,-1);
    boolean useLogicalUri=false;
    try {
      useLogicalUri=HAUtil.useLogicalUri(conf,nsUri);
    }
 catch (    IOException e) {
      LOG.warn("Getting exception  while trying to determine if nameservice " + nsId + " can use logical URI: "+ e);
    }
    if (HAUtil.isHAEnabled(conf,nsId) && useLogicalUri) {
      ret.add(nsUri);
    }
 else {
      boolean uriFound=false;
      for (      String key : keys) {
        String addr=conf.get(DFSUtilClient.concatSuffixes(key,nsId));
        if (addr != null) {
          URI uri=createUri(HdfsConstants.HDFS_URI_SCHEME,NetUtils.createSocketAddr(addr));
          if (!uriFound) {
            uriFound=true;
            ret.add(uri);
          }
 else {
            nonPreferredUris.add(uri);
          }
        }
      }
    }
  }
  boolean uriFound=false;
  for (  String key : keys) {
    String addr=conf.get(key);
    if (addr != null) {
      URI uri=createUri(HdfsConstants.HDFS_URI_SCHEME,NetUtils.createSocketAddr(addr));
      if (!uriFound) {
        uriFound=true;
        ret.add(uri);
      }
 else {
        nonPreferredUris.add(uri);
      }
    }
  }
  if (!uriFound) {
    URI defaultUri=FileSystem.getDefaultUri(conf);
    if (defaultUri != null) {
      if (defaultUri.getPort() != -1) {
        defaultUri=createUri(defaultUri.getScheme(),NetUtils.createSocketAddr(defaultUri.getHost(),defaultUri.getPort()));
      }
      defaultUri=trimUri(defaultUri);
      if (HdfsConstants.HDFS_URI_SCHEME.equals(defaultUri.getScheme()) && !nonPreferredUris.contains(defaultUri)) {
        ret.add(defaultUri);
      }
    }
  }
  return ret;
}
