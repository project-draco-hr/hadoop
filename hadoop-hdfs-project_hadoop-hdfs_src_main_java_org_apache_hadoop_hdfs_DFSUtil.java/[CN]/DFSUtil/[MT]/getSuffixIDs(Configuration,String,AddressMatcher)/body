{
  Collection<String> nsIds=getNameServiceIds(conf);
  boolean federationEnabled=true;
  if (nsIds == null || nsIds.size() == 0) {
    federationEnabled=false;
    nsIds=new ArrayList<String>();
    nsIds.add(null);
  }
  boolean haEnabled=true;
  Collection<String> nnIds=getNameNodeIds(conf);
  if (nnIds == null || nnIds.size() == 0) {
    haEnabled=false;
    nnIds=new ArrayList<String>();
    nnIds.add(null);
  }
  String nameserviceId=null;
  String namenodeId=null;
  int found=0;
  for (  String nsId : nsIds) {
    for (    String nnId : nnIds) {
      String key=addKeySuffixes(addressKey,nsId,nnId);
      String addr=conf.get(key);
      InetSocketAddress s=null;
      try {
        s=NetUtils.createSocketAddr(addr);
      }
 catch (      Exception e) {
        continue;
      }
      if (matcher.match(s)) {
        nameserviceId=nsId;
        namenodeId=nnId;
        found++;
      }
    }
  }
  if (found > 1) {
    String msg="Configuration has multiple addresses that match " + "local node's address. Please configure the system with " + (federationEnabled ? DFS_FEDERATION_NAMESERVICE_ID : "") + (haEnabled ? (" and " + DFS_HA_NAMENODE_ID_KEY) : "");
    throw new HadoopIllegalArgumentException(msg);
  }
  return new String[]{nameserviceId,namenodeId};
}
