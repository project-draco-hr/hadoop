{
  String nameserviceId=null;
  String namenodeId=null;
  int found=0;
  Collection<String> nsIds=getNameServiceIds(conf);
  for (  String nsId : emptyAsSingletonNull(nsIds)) {
    if (knownNsId != null && !knownNsId.equals(nsId)) {
      continue;
    }
    Collection<String> nnIds=getNameNodeIds(conf,nsId);
    for (    String nnId : emptyAsSingletonNull(nnIds)) {
      if (LOG.isTraceEnabled()) {
        LOG.trace(String.format("addressKey: %s nsId: %s nnId: %s",addressKey,nsId,nnId));
      }
      if (knownNNId != null && !knownNNId.equals(nnId)) {
        continue;
      }
      String key=addKeySuffixes(addressKey,nsId,nnId);
      String addr=conf.get(key);
      if (addr == null) {
        continue;
      }
      InetSocketAddress s=null;
      try {
        s=NetUtils.createSocketAddr(addr);
      }
 catch (      Exception e) {
        LOG.warn("Exception in creating socket address " + addr,e);
        continue;
      }
      if (!s.isUnresolved() && matcher.match(s)) {
        nameserviceId=nsId;
        namenodeId=nnId;
        found++;
      }
    }
  }
  if (found > 1) {
    String msg="Configuration has multiple addresses that match " + "local node's address. Please configure the system with " + DFS_FEDERATION_NAMESERVICE_ID + " and "+ DFS_HA_NAMENODE_ID_KEY;
    throw new HadoopIllegalArgumentException(msg);
  }
  return new String[]{nameserviceId,namenodeId};
}
