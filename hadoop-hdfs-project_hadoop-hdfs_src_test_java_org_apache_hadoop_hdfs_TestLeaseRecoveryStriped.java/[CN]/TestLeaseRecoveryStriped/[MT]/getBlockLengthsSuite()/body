{
  final int groups=4;
  final int minNumCell=3;
  final int maxNumCell=11;
  final int minNumDelta=-4;
  final int maxNumDelta=2;
  int delta=0;
  int[][][] blkLenSuite=new int[groups][][];
  Random random=ThreadLocalRandom.current();
  for (int i=0; i < blkLenSuite.length; i++) {
    if (i == blkLenSuite.length - 1) {
      delta=bytesPerChecksum;
    }
    int[][] suite=new int[2][];
    int[] lens=new int[NUM_DATA_BLOCKS + NUM_PARITY_BLOCKS];
    long[] lenInLong=new long[lens.length];
    for (int j=0; j < lens.length; j++) {
      int numCell=random.nextInt(maxNumCell - minNumCell + 1) + minNumCell;
      int numDelta=j < NUM_DATA_BLOCKS ? random.nextInt(maxNumDelta - minNumDelta + 1) + minNumDelta : 0;
      lens[j]=CELL_SIZE * numCell + delta * numDelta;
      lenInLong[j]=lens[j];
    }
    suite[0]=lens;
    suite[1]=new int[]{(int)StripedBlockUtil.getSafeLength(ecPolicy,lenInLong)};
    blkLenSuite[i]=suite;
  }
  return blkLenSuite;
}
