{
  InetSocketAddress targetAddr=null;
  ExtendedBlock block=testBlock.getBlock();
  DatanodeInfo[] nodes=testBlock.getLocations();
  targetAddr=NetUtils.createSocketAddr(nodes[0].getXferAddr());
  return new BlockReaderFactory(fs.getClient().getConf()).setInetSocketAddress(targetAddr).setBlock(block).setFileName(targetAddr.toString() + ":" + block.getBlockId()).setBlockToken(testBlock.getBlockToken()).setStartOffset(offset).setLength(lenToRead).setVerifyChecksum(true).setClientName("BlockReaderTestUtil").setDatanodeInfo(nodes[0]).setClientCacheContext(ClientContext.getFromConf(fs.getConf())).setCachingStrategy(CachingStrategy.newDefaultStrategy()).setConfiguration(fs.getConf()).setAllowShortCircuitLocalReads(true).setRemotePeerFactory(new RemotePeerFactory(){
    @Override public Peer newConnectedPeer(    InetSocketAddress addr,    Token<BlockTokenIdentifier> blockToken,    DatanodeID datanodeId) throws IOException {
      Peer peer=null;
      Socket sock=NetUtils.getDefaultSocketFactory(fs.getConf()).createSocket();
      try {
        sock.connect(addr,HdfsServerConstants.READ_TIMEOUT);
        sock.setSoTimeout(HdfsServerConstants.READ_TIMEOUT);
        peer=TcpPeerServer.peerFromSocket(sock);
      }
  finally {
        if (peer == null) {
          IOUtils.closeQuietly(sock);
        }
      }
      return peer;
    }
  }
).build();
}
