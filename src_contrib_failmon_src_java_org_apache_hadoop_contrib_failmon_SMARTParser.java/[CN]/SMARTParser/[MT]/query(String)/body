{
  String conf=Environment.getProperty("disks." + device + ".source");
  CharSequence sb;
  if (conf == null)   sb=Environment.runCommandGeneric("sudo smartctl --all " + device);
 else   sb=Environment.runCommandGeneric("cat " + conf);
  EventRecord retval=new EventRecord(InetAddress.getLocalHost().getCanonicalHostName(),InetAddress.getAllByName(InetAddress.getLocalHost().getHostName()),Calendar.getInstance(),"SMART","Unknown",(conf == null ? "sudo smartctl --all " + device : "file " + conf),"-");
  retval.set("model",findPattern("Device\\s*:\\s*(.*)",sb.toString(),1));
  retval.set("serial",findPattern("Serial\\s+Number\\s*:\\s*(.*)",sb.toString(),1));
  retval.set("firmware",findPattern("Firmware\\s+Version\\s*:\\s*(.*)",sb.toString(),1));
  retval.set("capacity",findPattern("User\\s+Capacity\\s*:\\s*(.*)",sb.toString(),1));
  retval.set("status",findPattern("SMART\\s*Health\\s*Status:\\s*(.*)",sb.toString(),1));
  retval.set("current_temperature",findPattern("Current\\s+Drive\\s+Temperature\\s*:\\s*(.*)",sb.toString(),1));
  retval.set("trip_temperature",findPattern("Drive\\s+Trip\\s+Temperature\\s*:\\s*(.*)",sb.toString(),1));
  retval.set("start_stop_count",findPattern("start\\s+stop\\s+count\\s*:\\s*(\\d*)",sb.toString(),1));
  String[] var={"read","write","verify"};
  for (  String s : var) {
    retval.set(s + "_ecc_fast",findPattern(s + "\\s*:\\s*(\\d*)",sb.toString(),1));
    retval.set(s + "_ecc_delayed",findPattern(s + "\\s*:\\s*(\\d+\\s+){1}(\\d+)",sb.toString(),2));
    retval.set(s + "_rereads",findPattern(s + "\\s*:\\s*(\\d+\\s+){2}(\\d+)",sb.toString(),2));
    retval.set(s + "_GBs",findPattern(s + "\\s*:\\s*(\\d+\\s+){5}(\\d+.?\\d*)",sb.toString(),2));
    retval.set(s + "_uncorrected",findPattern(s + "\\s*:\\s*(\\d+\\s+){5}(\\d+.?\\d*){1}\\s+(\\d+)",sb.toString(),3));
  }
  retval.set("model",findPattern("Device\\s*Model\\s*:\\s*(.*)",sb.toString(),1));
  retval.set("serial",findPattern("Serial\\s+number\\s*:\\s*(.*)",sb.toString(),1));
  retval.set("protocol",findPattern("Transport\\s+protocol\\s*:\\s*(.*)",sb.toString(),1));
  retval.set("status","PASSED".equalsIgnoreCase(findPattern("test\\s*result\\s*:\\s*(.*)",sb.toString(),1)) ? "OK" : "FAILED");
  readColumns(retval,sb);
  return retval;
}
