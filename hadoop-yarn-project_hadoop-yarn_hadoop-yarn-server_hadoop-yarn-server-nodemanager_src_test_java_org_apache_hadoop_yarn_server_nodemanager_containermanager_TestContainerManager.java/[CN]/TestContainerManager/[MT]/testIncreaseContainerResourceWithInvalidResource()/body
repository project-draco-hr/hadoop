{
  containerManager.start();
  File scriptFile=Shell.appendScriptExtension(tmpDir,"scriptFile");
  PrintWriter fileWriter=new PrintWriter(scriptFile);
  ContainerId cId=createContainerId(0);
  if (Shell.WINDOWS) {
    fileWriter.println("@ping -n 100 127.0.0.1 >nul");
  }
 else {
    fileWriter.write("\numask 0");
    fileWriter.write("\nexec sleep 100");
  }
  fileWriter.close();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  URL resource_alpha=ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));
  LocalResource rsrc_alpha=recordFactory.newRecordInstance(LocalResource.class);
  rsrc_alpha.setResource(resource_alpha);
  rsrc_alpha.setSize(-1);
  rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);
  rsrc_alpha.setType(LocalResourceType.FILE);
  rsrc_alpha.setTimestamp(scriptFile.lastModified());
  String destinationFile="dest_file";
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  localResources.put(destinationFile,rsrc_alpha);
  containerLaunchContext.setLocalResources(localResources);
  List<String> commands=Arrays.asList(Shell.getRunScriptCommand(scriptFile));
  containerLaunchContext.setCommands(commands);
  StartContainerRequest scRequest=StartContainerRequest.newInstance(containerLaunchContext,createContainerToken(cId,DUMMY_RM_IDENTIFIER,context.getNodeId(),user,context.getContainerTokenSecretManager()));
  List<StartContainerRequest> list=new ArrayList<StartContainerRequest>();
  list.add(scRequest);
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  BaseContainerManagerTest.waitForNMContainerState(containerManager,cId,org.apache.hadoop.yarn.server.nodemanager.containermanager.container.ContainerState.RUNNING);
  List<Token> increaseTokens=new ArrayList<Token>();
  Token containerToken=createContainerToken(cId,DUMMY_RM_IDENTIFIER,context.getNodeId(),user,Resource.newInstance(512,1),context.getContainerTokenSecretManager(),null);
  increaseTokens.add(containerToken);
  IncreaseContainersResourceRequest increaseRequest=IncreaseContainersResourceRequest.newInstance(increaseTokens);
  IncreaseContainersResourceResponse increaseResponse=containerManager.increaseContainersResource(increaseRequest);
  Assert.assertEquals(0,increaseResponse.getSuccessfullyIncreasedContainers().size());
  Assert.assertEquals(1,increaseResponse.getFailedRequests().size());
  for (  Map.Entry<ContainerId,SerializedException> entry : increaseResponse.getFailedRequests().entrySet()) {
    if (cId.equals(entry.getKey())) {
      Assert.assertNotNull("Failed message",entry.getValue().getMessage());
      Assert.assertTrue(entry.getValue().getMessage().contains("The target resource " + Resource.newInstance(512,1).toString() + " is smaller than the current resource "+ Resource.newInstance(1024,1)));
    }
 else {
      throw new YarnException("Received failed request from wrong" + " container: " + entry.getKey().toString());
    }
  }
}
