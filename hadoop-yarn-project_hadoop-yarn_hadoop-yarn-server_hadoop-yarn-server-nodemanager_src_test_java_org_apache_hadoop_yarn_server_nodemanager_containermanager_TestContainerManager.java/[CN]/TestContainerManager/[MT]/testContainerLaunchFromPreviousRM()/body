{
  containerManager.start();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  String host="127.0.0.1";
  int port=1234;
  ContainerId cId1=createContainerId();
  ContainerId cId2=createContainerId();
  containerLaunchContext.setLocalResources(new HashMap<String,LocalResource>());
  Resource mockResource=BuilderUtils.newResource(1024,1);
  StartContainerRequest startRequest1=recordFactory.newRecordInstance(StartContainerRequest.class);
  startRequest1.setContainerLaunchContext(containerLaunchContext);
  ContainerToken containerToken1=BuilderUtils.newContainerToken(cId1,host,port,user,mockResource,System.currentTimeMillis() + 10000,123,"password".getBytes(),(long)ResourceManagerConstants.RM_INVALID_IDENTIFIER);
  startRequest1.setContainerToken(containerToken1);
  boolean catchException=false;
  try {
    containerManager.startContainer(startRequest1);
  }
 catch (  YarnRemoteException e) {
    catchException=true;
    Assert.assertTrue(e.getMessage().contains("Container " + cId1 + " rejected as it is allocated by a previous RM"));
    Assert.assertTrue(e.getMessage().contains(InvalidContainerException.class.getName()));
  }
  Assert.assertTrue(catchException);
  StartContainerRequest startRequest2=recordFactory.newRecordInstance(StartContainerRequest.class);
  startRequest2.setContainerLaunchContext(containerLaunchContext);
  ContainerToken containerToken2=BuilderUtils.newContainerToken(cId1,host,port,user,mockResource,System.currentTimeMillis() + 10000,123,"password".getBytes(),super.DUMMY_RM_IDENTIFIER);
  startRequest2.setContainerToken(containerToken2);
  boolean noException=true;
  try {
    containerManager.startContainer(startRequest2);
  }
 catch (  YarnRemoteException e) {
    noException=false;
  }
  Assert.assertTrue(noException);
}
