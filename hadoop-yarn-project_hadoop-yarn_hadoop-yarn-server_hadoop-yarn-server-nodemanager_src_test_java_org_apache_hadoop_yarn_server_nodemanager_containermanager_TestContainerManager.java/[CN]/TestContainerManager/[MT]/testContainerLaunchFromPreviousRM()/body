{
  containerManager.start();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  ContainerId cId1=createContainerId(0);
  ContainerId cId2=createContainerId(0);
  containerLaunchContext.setLocalResources(new HashMap<String,LocalResource>());
  StartContainerRequest startRequest1=StartContainerRequest.newInstance(containerLaunchContext,createContainerToken(cId1,ResourceManagerConstants.RM_INVALID_IDENTIFIER,context.getNodeId(),user,context.getContainerTokenSecretManager()));
  List<StartContainerRequest> list=new ArrayList<StartContainerRequest>();
  list.add(startRequest1);
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  boolean catchException=false;
  try {
    StartContainersResponse response=containerManager.startContainers(allRequests);
    if (response.getFailedRequests().containsKey(cId1)) {
      throw response.getFailedRequests().get(cId1).deSerialize();
    }
  }
 catch (  Throwable e) {
    e.printStackTrace();
    catchException=true;
    Assert.assertTrue(e.getMessage().contains("Container " + cId1 + " rejected as it is allocated by a previous RM"));
    Assert.assertTrue(e.getClass().getName().equalsIgnoreCase(InvalidContainerException.class.getName()));
  }
  Assert.assertTrue(catchException);
  StartContainerRequest startRequest2=StartContainerRequest.newInstance(containerLaunchContext,createContainerToken(cId2,DUMMY_RM_IDENTIFIER,context.getNodeId(),user,context.getContainerTokenSecretManager()));
  List<StartContainerRequest> list2=new ArrayList<StartContainerRequest>();
  list.add(startRequest2);
  StartContainersRequest allRequests2=StartContainersRequest.newInstance(list2);
  containerManager.startContainers(allRequests2);
  boolean noException=true;
  try {
    containerManager.startContainers(allRequests2);
  }
 catch (  YarnException e) {
    noException=false;
  }
  Assert.assertTrue(noException);
}
