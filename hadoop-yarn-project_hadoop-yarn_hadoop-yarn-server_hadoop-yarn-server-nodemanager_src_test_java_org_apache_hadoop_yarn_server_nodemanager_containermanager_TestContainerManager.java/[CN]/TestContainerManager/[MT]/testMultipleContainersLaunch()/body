{
  containerManager.start();
  List<StartContainerRequest> list=new ArrayList<StartContainerRequest>();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  for (int i=0; i < 10; i++) {
    ContainerId cId=createContainerId(i);
    long identifier=0;
    if ((i & 1) == 0)     identifier=ResourceManagerConstants.RM_INVALID_IDENTIFIER;
 else     identifier=DUMMY_RM_IDENTIFIER;
    Token containerToken=createContainerToken(cId,identifier,context.getNodeId(),user,context.getContainerTokenSecretManager());
    StartContainerRequest request=StartContainerRequest.newInstance(containerLaunchContext,containerToken);
    list.add(request);
  }
  StartContainersRequest requestList=StartContainersRequest.newInstance(list);
  StartContainersResponse response=containerManager.startContainers(requestList);
  Assert.assertEquals(5,response.getSuccessfullyStartedContainers().size());
  for (  ContainerId id : response.getSuccessfullyStartedContainers()) {
    Assert.assertEquals(1,id.getId() & 1);
  }
  Assert.assertEquals(5,response.getFailedRequests().size());
  for (  Map.Entry<ContainerId,SerializedException> entry : response.getFailedRequests().entrySet()) {
    Assert.assertEquals(0,entry.getKey().getId() & 1);
    Assert.assertTrue(entry.getValue().getMessage().contains("Container " + entry.getKey() + " rejected as it is allocated by a previous RM"));
  }
}
