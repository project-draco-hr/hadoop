{
  containerManager.start();
  List<StartContainerRequest> list=new ArrayList<>();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  for (int i=0; i < 4; i++) {
    ContainerId cId=createContainerId(i);
    long identifier=DUMMY_RM_IDENTIFIER;
    Token containerToken=createContainerToken(cId,identifier,context.getNodeId(),user,context.getContainerTokenSecretManager());
    StartContainerRequest request=StartContainerRequest.newInstance(containerLaunchContext,containerToken);
    list.add(request);
  }
  StartContainersRequest requestList=StartContainersRequest.newInstance(list);
  StartContainersResponse response=containerManager.startContainers(requestList);
  Assert.assertEquals(4,response.getSuccessfullyStartedContainers().size());
  int i=0;
  for (  ContainerId id : response.getSuccessfullyStartedContainers()) {
    Assert.assertEquals(i,id.getContainerId());
    i++;
  }
  Thread.sleep(2000);
  List<Token> increaseTokens=new ArrayList<>();
  ContainerId cId0=createContainerId(0);
  Token containerToken=createContainerToken(cId0,DUMMY_RM_IDENTIFIER,context.getNodeId(),user,Resource.newInstance(1234,3),context.getContainerTokenSecretManager(),null);
  increaseTokens.add(containerToken);
  ContainerId cId7=createContainerId(7);
  containerToken=createContainerToken(cId7,DUMMY_RM_IDENTIFIER,context.getNodeId(),user,Resource.newInstance(1234,3),context.getContainerTokenSecretManager(),null);
  increaseTokens.add(containerToken);
  IncreaseContainersResourceRequest increaseRequest=IncreaseContainersResourceRequest.newInstance(increaseTokens);
  IncreaseContainersResourceResponse increaseResponse=containerManager.increaseContainersResource(increaseRequest);
  Assert.assertEquals(0,increaseResponse.getSuccessfullyIncreasedContainers().size());
  Assert.assertEquals(2,increaseResponse.getFailedRequests().size());
  for (  Map.Entry<ContainerId,SerializedException> entry : increaseResponse.getFailedRequests().entrySet()) {
    Assert.assertNotNull("Failed message",entry.getValue().getMessage());
    if (cId0.equals(entry.getKey())) {
      Assert.assertTrue(entry.getValue().getMessage().contains("Resource can only be changed when a " + "container is in RUNNING state"));
    }
 else     if (cId7.equals(entry.getKey())) {
      Assert.assertTrue(entry.getValue().getMessage().contains("Container " + cId7.toString() + " is not handled by this NodeManager"));
    }
 else {
      throw new YarnException("Received failed request from wrong" + " container: " + entry.getKey().toString());
    }
  }
}
