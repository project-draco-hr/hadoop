{
  File scriptFile=Shell.appendScriptExtension(tmpDir,"scriptFile");
  PrintWriter fileWriter=new PrintWriter(scriptFile);
  File processStartFile=new File(tmpDir,"start_file.txt").getAbsoluteFile();
  ContainerId cId=createContainerId(0);
  if (Shell.WINDOWS) {
    fileWriter.println("@echo Hello World!> " + processStartFile);
    fileWriter.println("@echo " + cId + ">> "+ processStartFile);
    if (exitCode != 0) {
      fileWriter.println("@exit " + exitCode);
    }
  }
 else {
    fileWriter.write("\numask 0");
    fileWriter.write("\necho Hello World! > " + processStartFile);
    fileWriter.write("\necho $$ >> " + processStartFile);
    if (exitCode != 0) {
      fileWriter.write("\nexit " + exitCode);
    }
  }
  fileWriter.close();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  URL resource_alpha=ConverterUtils.getYarnUrlFromPath(localFS.makeQualified(new Path(scriptFile.getAbsolutePath())));
  LocalResource rsrc_alpha=recordFactory.newRecordInstance(LocalResource.class);
  rsrc_alpha.setResource(resource_alpha);
  rsrc_alpha.setSize(-1);
  rsrc_alpha.setVisibility(LocalResourceVisibility.APPLICATION);
  rsrc_alpha.setType(LocalResourceType.FILE);
  rsrc_alpha.setTimestamp(scriptFile.lastModified());
  String destinationFile="dest_file";
  Map<String,LocalResource> localResources=new HashMap<String,LocalResource>();
  localResources.put(destinationFile,rsrc_alpha);
  containerLaunchContext.setLocalResources(localResources);
  List<String> commands=Arrays.asList(Shell.getRunScriptCommand(scriptFile));
  containerLaunchContext.setCommands(commands);
  StartContainerRequest scRequest=StartContainerRequest.newInstance(containerLaunchContext,createContainerToken(cId,DUMMY_RM_IDENTIFIER,context.getNodeId(),user,context.getContainerTokenSecretManager()));
  List<StartContainerRequest> list=new ArrayList<>();
  list.add(scRequest);
  StartContainersRequest allRequests=StartContainersRequest.newInstance(list);
  containerManager.startContainers(allRequests);
  BaseContainerManagerTest.waitForContainerState(containerManager,cId,ContainerState.COMPLETE);
  List<ContainerId> containerIds=new ArrayList<>();
  containerIds.add(cId);
  GetContainerStatusesRequest gcsRequest=GetContainerStatusesRequest.newInstance(containerIds);
  ContainerStatus containerStatus=containerManager.getContainerStatuses(gcsRequest).getContainerStatuses().get(0);
  Assert.assertEquals(exitCode,containerStatus.getExitStatus());
}
