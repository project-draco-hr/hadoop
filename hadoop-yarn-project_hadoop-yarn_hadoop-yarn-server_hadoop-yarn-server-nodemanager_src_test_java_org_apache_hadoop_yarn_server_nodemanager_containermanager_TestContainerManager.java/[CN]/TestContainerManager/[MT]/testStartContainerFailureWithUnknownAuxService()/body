{
  conf.setStrings(YarnConfiguration.NM_AUX_SERVICES,new String[]{"existService"});
  conf.setClass(String.format(YarnConfiguration.NM_AUX_SERVICE_FMT,"existService"),ServiceA.class,Service.class);
  containerManager.start();
  List<StartContainerRequest> startRequest=new ArrayList<StartContainerRequest>();
  ContainerLaunchContext containerLaunchContext=recordFactory.newRecordInstance(ContainerLaunchContext.class);
  Map<String,ByteBuffer> serviceData=new HashMap<String,ByteBuffer>();
  String serviceName="non_exist_auxService";
  serviceData.put(serviceName,ByteBuffer.wrap(serviceName.getBytes()));
  containerLaunchContext.setServiceData(serviceData);
  ContainerId cId=createContainerId(0);
  String user="start_container_fail";
  Token containerToken=createContainerToken(cId,DUMMY_RM_IDENTIFIER,context.getNodeId(),user,context.getContainerTokenSecretManager());
  StartContainerRequest request=StartContainerRequest.newInstance(containerLaunchContext,containerToken);
  startRequest.add(request);
  StartContainersRequest requestList=StartContainersRequest.newInstance(startRequest);
  StartContainersResponse response=containerManager.startContainers(requestList);
  Assert.assertTrue(response.getFailedRequests().size() == 1);
  Assert.assertTrue(response.getSuccessfullyStartedContainers().size() == 0);
  Assert.assertTrue(response.getFailedRequests().containsKey(cId));
  Assert.assertTrue(response.getFailedRequests().get(cId).getMessage().contains("The auxService:" + serviceName + " does not exist"));
}
