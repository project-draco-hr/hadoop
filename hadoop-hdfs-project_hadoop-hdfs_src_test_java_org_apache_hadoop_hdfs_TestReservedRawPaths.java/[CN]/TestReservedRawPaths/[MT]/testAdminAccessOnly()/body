{
  final Path zone=new Path("zone");
  final Path slashZone=new Path("/",zone);
  fs.mkdirs(slashZone);
  dfsAdmin.createEncryptionZone(slashZone,null);
  final Path base=new Path("base");
  final Path reservedRaw=new Path("/.reserved/raw");
  final int len=8192;
  final UserGroupInformation user=UserGroupInformation.createUserForTesting("user",new String[]{"mygroup"});
  user.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      final DistributedFileSystem fs=cluster.getFileSystem();
      try {
        final Path ezRawEncFile=new Path(new Path(reservedRaw,zone),base);
        DFSTestUtil.createFile(fs,ezRawEncFile,len,(short)1,0xFEED);
        fail("access to /.reserved/raw is superuser-only operation");
      }
 catch (      AccessControlException e) {
        assertExceptionContains("Superuser privilege is required",e);
      }
      return null;
    }
  }
);
  final Path ezRawEncFile=new Path(new Path(reservedRaw,zone),base);
  DFSTestUtil.createFile(fs,ezRawEncFile,len,(short)1,0xFEED);
  user.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      final DistributedFileSystem fs=cluster.getFileSystem();
      try {
        fs.getFileStatus(ezRawEncFile);
        fail("access to /.reserved/raw is superuser-only operation");
      }
 catch (      AccessControlException e) {
        assertExceptionContains("Superuser privilege is required",e);
      }
      return null;
    }
  }
);
  user.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      final DistributedFileSystem fs=cluster.getFileSystem();
      try {
        fs.listStatus(ezRawEncFile);
        fail("access to /.reserved/raw is superuser-only operation");
      }
 catch (      AccessControlException e) {
        assertExceptionContains("Superuser privilege is required",e);
      }
      return null;
    }
  }
);
  fs.setPermission(new Path("/"),new FsPermission((short)0777));
  user.doAs(new PrivilegedExceptionAction<Object>(){
    @Override public Object run() throws Exception {
      final DistributedFileSystem fs=cluster.getFileSystem();
      final Path d1=new Path(reservedRaw,"dir1");
      try {
        fs.mkdirs(d1);
        fail("access to /.reserved/raw is superuser-only operation");
      }
 catch (      AccessControlException e) {
        assertExceptionContains("Superuser privilege is required",e);
      }
      return null;
    }
  }
);
}
