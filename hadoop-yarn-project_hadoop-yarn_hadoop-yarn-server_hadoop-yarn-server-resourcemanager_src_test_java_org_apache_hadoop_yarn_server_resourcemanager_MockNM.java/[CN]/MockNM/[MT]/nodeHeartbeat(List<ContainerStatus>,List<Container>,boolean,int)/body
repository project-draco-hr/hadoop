{
  NodeHeartbeatRequest req=Records.newRecord(NodeHeartbeatRequest.class);
  NodeStatus status=Records.newRecord(NodeStatus.class);
  status.setResponseId(resId);
  status.setNodeId(nodeId);
  ArrayList<ContainerId> completedContainers=new ArrayList<ContainerId>();
  for (  ContainerStatus stat : updatedStats) {
    if (stat.getState() == ContainerState.COMPLETE) {
      completedContainers.add(stat.getContainerId());
    }
    containerStats.put(stat.getContainerId(),stat);
  }
  status.setContainersStatuses(new ArrayList<ContainerStatus>(containerStats.values()));
  for (  ContainerId cid : completedContainers) {
    containerStats.remove(cid);
  }
  status.setIncreasedContainers(increasedConts);
  NodeHealthStatus healthStatus=Records.newRecord(NodeHealthStatus.class);
  healthStatus.setHealthReport("");
  healthStatus.setIsNodeHealthy(isHealthy);
  healthStatus.setLastHealthReportTime(1);
  status.setNodeHealthStatus(healthStatus);
  req.setNodeStatus(status);
  req.setLastKnownContainerTokenMasterKey(this.currentContainerTokenMasterKey);
  req.setLastKnownNMTokenMasterKey(this.currentNMTokenMasterKey);
  NodeHeartbeatResponse heartbeatResponse=resourceTracker.nodeHeartbeat(req);
  MasterKey masterKeyFromRM=heartbeatResponse.getContainerTokenMasterKey();
  if (masterKeyFromRM != null && masterKeyFromRM.getKeyId() != this.currentContainerTokenMasterKey.getKeyId()) {
    this.currentContainerTokenMasterKey=masterKeyFromRM;
  }
  masterKeyFromRM=heartbeatResponse.getNMTokenMasterKey();
  if (masterKeyFromRM != null && masterKeyFromRM.getKeyId() != this.currentNMTokenMasterKey.getKeyId()) {
    this.currentNMTokenMasterKey=masterKeyFromRM;
  }
  Resource newResource=heartbeatResponse.getResource();
  if (newResource != null) {
    memory=newResource.getMemorySize();
    vCores=newResource.getVirtualCores();
  }
  return heartbeatResponse;
}
