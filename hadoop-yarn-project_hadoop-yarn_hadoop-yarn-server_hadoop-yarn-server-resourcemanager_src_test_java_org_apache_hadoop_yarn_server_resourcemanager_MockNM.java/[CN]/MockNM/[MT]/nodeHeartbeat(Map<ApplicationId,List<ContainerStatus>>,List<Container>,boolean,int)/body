{
  NodeHeartbeatRequest req=Records.newRecord(NodeHeartbeatRequest.class);
  NodeStatus status=Records.newRecord(NodeStatus.class);
  status.setResponseId(resId);
  status.setNodeId(nodeId);
  for (  Map.Entry<ApplicationId,List<ContainerStatus>> entry : conts.entrySet()) {
    Log.info("entry.getValue() " + entry.getValue());
    status.setContainersStatuses(entry.getValue());
  }
  status.setIncreasedContainers(increasedConts);
  NodeHealthStatus healthStatus=Records.newRecord(NodeHealthStatus.class);
  healthStatus.setHealthReport("");
  healthStatus.setIsNodeHealthy(isHealthy);
  healthStatus.setLastHealthReportTime(1);
  status.setNodeHealthStatus(healthStatus);
  req.setNodeStatus(status);
  req.setLastKnownContainerTokenMasterKey(this.currentContainerTokenMasterKey);
  req.setLastKnownNMTokenMasterKey(this.currentNMTokenMasterKey);
  NodeHeartbeatResponse heartbeatResponse=resourceTracker.nodeHeartbeat(req);
  MasterKey masterKeyFromRM=heartbeatResponse.getContainerTokenMasterKey();
  if (masterKeyFromRM != null && masterKeyFromRM.getKeyId() != this.currentContainerTokenMasterKey.getKeyId()) {
    this.currentContainerTokenMasterKey=masterKeyFromRM;
  }
  masterKeyFromRM=heartbeatResponse.getNMTokenMasterKey();
  if (masterKeyFromRM != null && masterKeyFromRM.getKeyId() != this.currentNMTokenMasterKey.getKeyId()) {
    this.currentNMTokenMasterKey=masterKeyFromRM;
  }
  Resource newResource=heartbeatResponse.getResource();
  if (newResource != null) {
    memory=newResource.getMemory();
    vCores=newResource.getVirtualCores();
  }
  return heartbeatResponse;
}
