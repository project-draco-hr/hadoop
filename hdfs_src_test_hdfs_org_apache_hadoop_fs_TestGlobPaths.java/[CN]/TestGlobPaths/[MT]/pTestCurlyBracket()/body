{
  Path[] matchedPath;
  String[] files;
  try {
    files=new String[]{USER_DIR + "/a.abcxx",USER_DIR + "/a.abxy",USER_DIR + "/a.hlp",USER_DIR + "/a.jhyy"};
    matchedPath=prepareTesting(USER_DIR + "/a.{abc,jh}??",files);
    assertEquals(matchedPath.length,2);
    assertEquals(matchedPath[0],path[0]);
    assertEquals(matchedPath[1],path[3]);
  }
  finally {
    cleanupDFS();
  }
  try {
    files=new String[]{USER_DIR + "/a.abcxx",USER_DIR + "/a.abdxy",USER_DIR + "/a.hlp",USER_DIR + "/a.jhyy"};
    matchedPath=prepareTesting(USER_DIR + "/a.{ab{c,d},jh}??",files);
    assertEquals(matchedPath.length,3);
    assertEquals(matchedPath[0],path[0]);
    assertEquals(matchedPath[1],path[1]);
    assertEquals(matchedPath[2],path[3]);
  }
  finally {
    cleanupDFS();
  }
  try {
    files=new String[]{USER_DIR + "/a/b",USER_DIR + "/a/d",USER_DIR + "/c/b",USER_DIR + "/c/d"};
    matchedPath=prepareTesting(USER_DIR + "/{a/b,c/d}",files);
    assertEquals(matchedPath.length,2);
    assertEquals(matchedPath[0],path[0]);
    assertEquals(matchedPath[1],path[3]);
  }
  finally {
    cleanupDFS();
  }
  try {
    files=new String[]{"/a/b","/a/d","/c/b","/c/d"};
    matchedPath=prepareTesting("{/a/b,/c/d}",files);
    assertEquals(matchedPath.length,2);
    assertEquals(matchedPath[0],path[0]);
    assertEquals(matchedPath[1],path[3]);
  }
  finally {
    cleanupDFS();
  }
  try {
    files=new String[]{USER_DIR + "/}bc",USER_DIR + "/}c"};
    matchedPath=prepareTesting(USER_DIR + "/}{a,b}c",files);
    assertEquals(matchedPath.length,1);
    assertEquals(matchedPath[0],path[0]);
    matchedPath=prepareTesting(USER_DIR + "/}{b}c",files);
    assertEquals(matchedPath.length,1);
    assertEquals(matchedPath[0],path[0]);
    matchedPath=prepareTesting(USER_DIR + "/}{}bc",files);
    assertEquals(matchedPath.length,1);
    assertEquals(matchedPath[0],path[0]);
    matchedPath=prepareTesting(USER_DIR + "/}{,}bc",files);
    assertEquals(matchedPath.length,1);
    assertEquals(matchedPath[0],path[0]);
    matchedPath=prepareTesting(USER_DIR + "/}{b,}c",files);
    assertEquals(matchedPath.length,2);
    assertEquals(matchedPath[0],path[0]);
    assertEquals(matchedPath[1],path[1]);
    matchedPath=prepareTesting(USER_DIR + "/}{,b}c",files);
    assertEquals(matchedPath.length,2);
    assertEquals(matchedPath[0],path[0]);
    assertEquals(matchedPath[1],path[1]);
    matchedPath=prepareTesting(USER_DIR + "/}{ac,?}",files);
    assertEquals(matchedPath.length,1);
    assertEquals(matchedPath[0],path[1]);
    boolean hasException=false;
    try {
      prepareTesting(USER_DIR + "}{bc",files);
    }
 catch (    IOException e) {
      assertTrue(e.getMessage().startsWith("Illegal file pattern:"));
      hasException=true;
    }
    assertTrue(hasException);
  }
  finally {
    cleanupDFS();
  }
}
