{
  if (closed) {
    return;
  }
  backupStream.close();
  LOG.debug("OutputStream for key '{}' closed. Now beginning upload",key);
  LOG.debug("Minimum upload part size: {} threshold {}",partSize,partSizeThreshold);
  try {
    final ObjectMetadata om=new ObjectMetadata();
    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {
      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);
    }
    PutObjectRequest putObjectRequest=new PutObjectRequest(bucket,key,backupFile);
    putObjectRequest.setCannedAcl(cannedACL);
    putObjectRequest.setMetadata(om);
    Upload upload=transfers.upload(putObjectRequest);
    ProgressableProgressListener listener=new ProgressableProgressListener(upload,progress,statistics);
    upload.addProgressListener(listener);
    upload.waitForUploadResult();
    long delta=upload.getProgress().getBytesTransferred() - listener.getLastBytesTransferred();
    if (statistics != null && delta != 0) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("S3A write delta changed after finished: " + delta + " bytes");
      }
      statistics.incrementBytesWritten(delta);
    }
    fs.finishedWrite(key);
  }
 catch (  InterruptedException e) {
    throw new IOException(e);
  }
 finally {
    if (!backupFile.delete()) {
      LOG.warn("Could not delete temporary s3a file: {}",backupFile);
    }
    super.close();
    closed=true;
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug("OutputStream for key '" + key + "' upload complete");
  }
}
