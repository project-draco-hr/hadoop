{
  this.bucket=bucket;
  this.key=key;
  this.transfers=transfers;
  this.progress=progress;
  this.fs=fs;
  this.cannedACL=cannedACL;
  this.statistics=statistics;
  this.serverSideEncryptionAlgorithm=serverSideEncryptionAlgorithm;
  partSize=conf.getLong(MULTIPART_SIZE,DEFAULT_MULTIPART_SIZE);
  partSizeThreshold=conf.getInt(MIN_MULTIPART_THRESHOLD,DEFAULT_MIN_MULTIPART_THRESHOLD);
  if (conf.get(BUFFER_DIR,null) != null) {
    lDirAlloc=new LocalDirAllocator(BUFFER_DIR);
  }
 else {
    lDirAlloc=new LocalDirAllocator("${hadoop.tmp.dir}/s3a");
  }
  backupFile=lDirAlloc.createTmpFileForWrite("output-",LocalDirAllocator.SIZE_UNKNOWN,conf);
  closed=false;
  if (LOG.isDebugEnabled()) {
    LOG.debug("OutputStream for key '" + key + "' writing to tempfile: "+ this.backupFile);
  }
  this.backupStream=new BufferedOutputStream(new FileOutputStream(backupFile));
}
