{
  if (shouldCloseConnection.get()) {
    return;
  }
  RpcRequestHeaderProto header=ProtoUtil.makeRpcRequestHeader(call.rpcKind,OperationProto.RPC_FINAL_PACKET,call.id,call.retry,clientId);
  final ResponseBuffer buf=new ResponseBuffer();
  header.writeDelimitedTo(buf);
  RpcWritable.wrap(call.rpcRequest).writeTo(buf);
synchronized (sendRpcRequestLock) {
    Future<?> senderFuture=sendParamsExecutor.submit(new Runnable(){
      @Override public void run(){
        try {
synchronized (Connection.this.out) {
            if (shouldCloseConnection.get()) {
              return;
            }
            if (LOG.isDebugEnabled()) {
              LOG.debug(getName() + " sending #" + call.id);
            }
            buf.writeTo(out);
            out.flush();
          }
        }
 catch (        IOException e) {
          markClosed(e);
        }
 finally {
          IOUtils.closeStream(buf);
        }
      }
    }
);
    try {
      senderFuture.get();
    }
 catch (    ExecutionException e) {
      Throwable cause=e.getCause();
      if (cause instanceof RuntimeException) {
        throw (RuntimeException)cause;
      }
 else {
        throw new RuntimeException("unexpected checked exception",cause);
      }
    }
  }
}
