{
  if (shouldCloseConnection.get()) {
    return;
  }
  touch();
  try {
    int totalLen=in.readInt();
    RpcResponseHeaderProto header=RpcResponseHeaderProto.parseDelimitedFrom(in);
    checkResponse(header);
    int headerLen=header.getSerializedSize();
    headerLen+=CodedOutputStream.computeRawVarint32Size(headerLen);
    int callId=header.getCallId();
    if (LOG.isDebugEnabled())     LOG.debug(getName() + " got value #" + callId);
    RpcStatusProto status=header.getStatus();
    if (status == RpcStatusProto.SUCCESS) {
      Writable value=ReflectionUtils.newInstance(valueClass,conf);
      value.readFields(in);
      final Call call=calls.remove(callId);
      call.setRpcResponse(value);
      if (call.getRpcResponse() instanceof ProtobufRpcEngine.RpcWrapper) {
        ProtobufRpcEngine.RpcWrapper resWrapper=(ProtobufRpcEngine.RpcWrapper)call.getRpcResponse();
        if (totalLen != headerLen + resWrapper.getLength()) {
          throw new RpcClientException("RPC response length mismatch on rpc success");
        }
      }
    }
 else {
      if (totalLen != headerLen) {
        throw new RpcClientException("RPC response length mismatch on rpc error");
      }
      final String exceptionClassName=header.hasExceptionClassName() ? header.getExceptionClassName() : "ServerDidNotSetExceptionClassName";
      final String errorMsg=header.hasErrorMsg() ? header.getErrorMsg() : "ServerDidNotSetErrorMsg";
      final RpcErrorCodeProto erCode=(header.hasErrorDetail() ? header.getErrorDetail() : null);
      if (erCode == null) {
        LOG.warn("Detailed error code not set by server on rpc error");
      }
      RemoteException re=new RemoteException(exceptionClassName,errorMsg,erCode);
      if (status == RpcStatusProto.ERROR) {
        final Call call=calls.remove(callId);
        call.setException(re);
      }
 else       if (status == RpcStatusProto.FATAL) {
        markClosed(re);
      }
    }
  }
 catch (  IOException e) {
    markClosed(e);
  }
}
