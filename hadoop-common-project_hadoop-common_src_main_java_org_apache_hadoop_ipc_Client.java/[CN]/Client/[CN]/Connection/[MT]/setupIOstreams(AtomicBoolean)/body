{
  if (socket != null || shouldCloseConnection.get()) {
    return;
  }
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Connecting to " + server);
    }
    Span span=Tracer.getCurrentSpan();
    if (span != null) {
      span.addTimelineAnnotation("IPC client connecting to " + server);
    }
    short numRetries=0;
    Random rand=null;
    while (true) {
      setupConnection();
      ipcStreams=new IpcStreams(socket,maxResponseLength);
      writeConnectionHeader(ipcStreams);
      if (authProtocol == AuthProtocol.SASL) {
        UserGroupInformation ticket=remoteId.getTicket();
        if (ticket.getRealUser() != null) {
          ticket=ticket.getRealUser();
        }
        try {
          authMethod=ticket.doAs(new PrivilegedExceptionAction<AuthMethod>(){
            @Override public AuthMethod run() throws IOException, InterruptedException {
              return setupSaslConnection(ipcStreams);
            }
          }
);
        }
 catch (        IOException ex) {
          if (saslRpcClient == null) {
            throw ex;
          }
          authMethod=saslRpcClient.getAuthMethod();
          if (rand == null) {
            rand=new Random();
          }
          handleSaslConnectionFailure(numRetries++,maxRetriesOnSasl,ex,rand,ticket);
          continue;
        }
        if (authMethod != AuthMethod.SIMPLE) {
          ipcStreams.setSaslClient(saslRpcClient);
          remoteId.saslQop=(String)saslRpcClient.getNegotiatedProperty(Sasl.QOP);
          LOG.debug("Negotiated QOP is :" + remoteId.saslQop);
          if (fallbackToSimpleAuth != null) {
            fallbackToSimpleAuth.set(false);
          }
        }
 else         if (UserGroupInformation.isSecurityEnabled()) {
          if (!fallbackAllowed) {
            throw new IOException("Server asks us to fall back to SIMPLE " + "auth, but this client is configured to only allow secure " + "connections.");
          }
          if (fallbackToSimpleAuth != null) {
            fallbackToSimpleAuth.set(true);
          }
        }
      }
      if (doPing) {
        ipcStreams.setInputStream(new PingInputStream(ipcStreams.in));
      }
      writeConnectionContext(remoteId,authMethod);
      touch();
      span=Tracer.getCurrentSpan();
      if (span != null) {
        span.addTimelineAnnotation("IPC client connected to " + server);
      }
      start();
      return;
    }
  }
 catch (  Throwable t) {
    if (t instanceof IOException) {
      markClosed((IOException)t);
    }
 else {
      markClosed(new IOException("Couldn't set up IO streams: " + t,t));
    }
    close();
  }
}
