{
  if (socket != null || shouldCloseConnection.get()) {
    return;
  }
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Connecting to " + server);
    }
    short numRetries=0;
    final short MAX_RETRIES=5;
    Random rand=null;
    while (true) {
      setupConnection();
      InputStream inStream=NetUtils.getInputStream(socket);
      OutputStream outStream=NetUtils.getOutputStream(socket);
      writeConnectionHeader(outStream);
      if (authProtocol == AuthProtocol.SASL) {
        final InputStream in2=inStream;
        final OutputStream out2=outStream;
        UserGroupInformation ticket=remoteId.getTicket();
        if (ticket.getRealUser() != null) {
          ticket=ticket.getRealUser();
        }
        try {
          authMethod=ticket.doAs(new PrivilegedExceptionAction<AuthMethod>(){
            @Override public AuthMethod run() throws IOException, InterruptedException {
              return setupSaslConnection(in2,out2);
            }
          }
);
        }
 catch (        Exception ex) {
          if (rand == null) {
            rand=new Random();
          }
          handleSaslConnectionFailure(numRetries++,MAX_RETRIES,ex,rand,ticket);
          continue;
        }
        if (authMethod != AuthMethod.SIMPLE) {
          inStream=saslRpcClient.getInputStream(inStream);
          outStream=saslRpcClient.getOutputStream(outStream);
          remoteId.saslQop=(String)saslRpcClient.getNegotiatedProperty(Sasl.QOP);
        }
 else         if (UserGroupInformation.isSecurityEnabled() && !fallbackAllowed) {
          throw new IOException("Server asks us to fall back to SIMPLE " + "auth, but this client is configured to only allow secure " + "connections.");
        }
      }
      if (doPing) {
        this.in=new DataInputStream(new BufferedInputStream(new PingInputStream(inStream)));
      }
 else {
        this.in=new DataInputStream(new BufferedInputStream(inStream));
      }
      this.out=new DataOutputStream(new BufferedOutputStream(outStream));
      writeConnectionContext(remoteId,authMethod);
      touch();
      start();
      return;
    }
  }
 catch (  Throwable t) {
    if (t instanceof IOException) {
      markClosed((IOException)t);
    }
 else {
      markClosed(new IOException("Couldn't set up IO streams",t));
    }
    close();
  }
}
