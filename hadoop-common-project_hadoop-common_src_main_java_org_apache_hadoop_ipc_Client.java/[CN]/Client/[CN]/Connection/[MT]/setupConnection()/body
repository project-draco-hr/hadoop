{
  short ioFailures=0;
  short timeoutFailures=0;
  while (true) {
    try {
      this.socket=socketFactory.createSocket();
      this.socket.setTcpNoDelay(tcpNoDelay);
      this.socket.setKeepAlive(true);
      if (tcpLowLatency) {
        this.socket.setTrafficClass(0x04 | 0x10);
        this.socket.setPerformancePreferences(1,2,0);
      }
      UserGroupInformation ticket=remoteId.getTicket();
      if (ticket != null && ticket.hasKerberosCredentials()) {
        KerberosInfo krbInfo=remoteId.getProtocol().getAnnotation(KerberosInfo.class);
        if (krbInfo != null && krbInfo.clientPrincipal() != null) {
          String host=SecurityUtil.getHostFromPrincipal(remoteId.getTicket().getUserName());
          InetAddress localAddr=NetUtils.getLocalInetAddress(host);
          if (localAddr != null) {
            this.socket.bind(new InetSocketAddress(localAddr,0));
          }
        }
      }
      NetUtils.connect(this.socket,server,connectionTimeout);
      if (rpcTimeout > 0) {
        pingInterval=rpcTimeout;
      }
      this.socket.setSoTimeout(pingInterval);
      return;
    }
 catch (    ConnectTimeoutException toe) {
      if (updateAddress()) {
        timeoutFailures=ioFailures=0;
      }
      handleConnectionTimeout(timeoutFailures++,maxRetriesOnSocketTimeouts,toe);
    }
catch (    IOException ie) {
      if (updateAddress()) {
        timeoutFailures=ioFailures=0;
      }
      handleConnectionFailure(ioFailures++,ie);
    }
  }
}
