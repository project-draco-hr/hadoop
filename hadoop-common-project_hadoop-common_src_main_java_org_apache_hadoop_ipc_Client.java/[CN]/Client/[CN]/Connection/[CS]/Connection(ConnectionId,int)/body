{
  this.remoteId=remoteId;
  this.server=remoteId.getAddress();
  if (server.isUnresolved()) {
    throw NetUtils.wrapException(server.getHostName(),server.getPort(),null,0,new UnknownHostException());
  }
  this.rpcTimeout=remoteId.getRpcTimeout();
  this.maxIdleTime=remoteId.getMaxIdleTime();
  this.connectionRetryPolicy=remoteId.connectionRetryPolicy;
  this.maxRetriesOnSocketTimeouts=remoteId.getMaxRetriesOnSocketTimeouts();
  this.tcpNoDelay=remoteId.getTcpNoDelay();
  this.doPing=remoteId.getDoPing();
  this.pingInterval=remoteId.getPingInterval();
  this.serviceClass=serviceClass;
  if (LOG.isDebugEnabled()) {
    LOG.debug("The ping interval is " + this.pingInterval + " ms.");
  }
  UserGroupInformation ticket=remoteId.getTicket();
  Class<?> protocol=remoteId.getProtocol();
  if (protocol != null) {
    TokenInfo tokenInfo=SecurityUtil.getTokenInfo(protocol,conf);
    if (tokenInfo != null) {
      TokenSelector<? extends TokenIdentifier> tokenSelector=null;
      try {
        tokenSelector=tokenInfo.value().newInstance();
      }
 catch (      InstantiationException e) {
        throw new IOException(e.toString());
      }
catch (      IllegalAccessException e) {
        throw new IOException(e.toString());
      }
      token=tokenSelector.selectToken(SecurityUtil.buildTokenService(server),ticket.getTokens());
    }
    KerberosInfo krbInfo=SecurityUtil.getKerberosInfo(protocol,conf);
    if (krbInfo != null) {
      serverPrincipal=remoteId.getServerPrincipal();
      if (LOG.isDebugEnabled()) {
        LOG.debug("RPC Server's Kerberos principal name for protocol=" + protocol.getCanonicalName() + " is "+ serverPrincipal);
      }
    }
  }
  AuthenticationMethod authentication;
  if (token != null) {
    authentication=AuthenticationMethod.TOKEN;
  }
 else   if (ticket != null) {
    authentication=ticket.getRealAuthenticationMethod();
  }
 else {
    authentication=AuthenticationMethod.SIMPLE;
  }
  authMethod=authentication.getAuthMethod();
  if (LOG.isDebugEnabled())   LOG.debug("Use " + authMethod + " authentication for protocol "+ (protocol == null ? null : protocol.getSimpleName()));
  this.setName("IPC Client (" + socketFactory.hashCode() + ") connection to "+ server.toString()+ " from "+ ((ticket == null) ? "an unknown user" : ticket.getUserName()));
  this.setDaemon(true);
}
