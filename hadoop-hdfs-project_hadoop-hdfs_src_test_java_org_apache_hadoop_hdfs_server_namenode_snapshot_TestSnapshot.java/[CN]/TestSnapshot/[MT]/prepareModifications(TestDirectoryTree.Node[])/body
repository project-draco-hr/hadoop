{
  ArrayList<Modification> mList=new ArrayList<Modification>();
  for (  TestDirectoryTree.Node node : nodes) {
    if (node.fileList == null) {
      node.initFileList(hdfs,node.nodePath.getName(),BLOCKSIZE,REPLICATION,seed,6);
    }
    Modification create=new FileCreation(node.fileList.get(node.nullFileIndex),hdfs,(int)BLOCKSIZE);
    Modification delete=new FileDeletion(node.fileList.get((node.nullFileIndex + 1) % node.fileList.size()),hdfs);
    Modification append=new FileAppend(node.fileList.get((node.nullFileIndex + 2) % node.fileList.size()),hdfs,(int)BLOCKSIZE);
    Modification chmod=new FileChangePermission(node.fileList.get((node.nullFileIndex + 3) % node.fileList.size()),hdfs,genRandomPermission());
    String[] userGroup=genRandomOwner();
    Modification chown=new FileChown(node.fileList.get((node.nullFileIndex + 4) % node.fileList.size()),hdfs,userGroup[0],userGroup[1]);
    Modification replication=new FileChangeReplication(node.fileList.get((node.nullFileIndex + 5) % node.fileList.size()),hdfs,(short)(random.nextInt(REPLICATION) + 1));
    node.nullFileIndex=(node.nullFileIndex + 1) % node.fileList.size();
    Modification dirChange=new DirCreationOrDeletion(node.nodePath,hdfs,node,random.nextBoolean());
    mList.add(create);
    mList.add(delete);
    mList.add(append);
    mList.add(chmod);
    mList.add(chown);
    mList.add(replication);
    mList.add(dirChange);
  }
  return mList.toArray(new Modification[0]);
}
