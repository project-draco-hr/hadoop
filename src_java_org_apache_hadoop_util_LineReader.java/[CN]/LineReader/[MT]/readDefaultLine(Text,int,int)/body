{
  str.clear();
  int txtLength=0;
  int newlineLength=0;
  boolean prevCharCR=false;
  long bytesConsumed=0;
  do {
    int startPosn=bufferPosn;
    if (bufferPosn >= bufferLength) {
      startPosn=bufferPosn=0;
      if (prevCharCR)       ++bytesConsumed;
      bufferLength=in.read(buffer);
      if (bufferLength <= 0)       break;
    }
    for (; bufferPosn < bufferLength; ++bufferPosn) {
      if (buffer[bufferPosn] == LF) {
        newlineLength=(prevCharCR) ? 2 : 1;
        ++bufferPosn;
        break;
      }
      if (prevCharCR) {
        newlineLength=1;
        break;
      }
      prevCharCR=(buffer[bufferPosn] == CR);
    }
    int readLength=bufferPosn - startPosn;
    if (prevCharCR && newlineLength == 0)     --readLength;
    bytesConsumed+=readLength;
    int appendLength=readLength - newlineLength;
    if (appendLength > maxLineLength - txtLength) {
      appendLength=maxLineLength - txtLength;
    }
    if (appendLength > 0) {
      str.append(buffer,startPosn,appendLength);
      txtLength+=appendLength;
    }
  }
 while (newlineLength == 0 && bytesConsumed < maxBytesToConsume);
  if (bytesConsumed > (long)Integer.MAX_VALUE)   throw new IOException("Too many bytes before newline: " + bytesConsumed);
  return (int)bytesConsumed;
}
