{
  int numInputs=inputs.length;
  int numOutputs=outputs.length;
  int dataLen=inputs[0].remaining();
  int l, i, j, iPos, oPos;
  ByteBuffer input, output;
  byte s;
  final int times=dataLen / 8;
  final int extra=dataLen - dataLen % 8;
  byte[] tableLine;
  for (l=0; l < numOutputs; l++) {
    output=outputs[l];
    for (j=0; j < numInputs; j++) {
      input=inputs[j];
      iPos=input.position();
      oPos=output.position();
      s=gfTables[j * 32 + l * numInputs * 32 + 1];
      tableLine=GF256.gfMulTab()[s & 0xff];
      for (i=0; i < times; i++, iPos+=8, oPos+=8) {
        output.put(oPos + 0,(byte)(output.get(oPos + 0) ^ tableLine[0xff & input.get(iPos + 0)]));
        output.put(oPos + 1,(byte)(output.get(oPos + 1) ^ tableLine[0xff & input.get(iPos + 1)]));
        output.put(oPos + 2,(byte)(output.get(oPos + 2) ^ tableLine[0xff & input.get(iPos + 2)]));
        output.put(oPos + 3,(byte)(output.get(oPos + 3) ^ tableLine[0xff & input.get(iPos + 3)]));
        output.put(oPos + 4,(byte)(output.get(oPos + 4) ^ tableLine[0xff & input.get(iPos + 4)]));
        output.put(oPos + 5,(byte)(output.get(oPos + 5) ^ tableLine[0xff & input.get(iPos + 5)]));
        output.put(oPos + 6,(byte)(output.get(oPos + 6) ^ tableLine[0xff & input.get(iPos + 6)]));
        output.put(oPos + 7,(byte)(output.get(oPos + 7) ^ tableLine[0xff & input.get(iPos + 7)]));
      }
      for (i=extra; i < dataLen; i++, iPos++, oPos++) {
        output.put(oPos,(byte)(output.get(oPos) ^ tableLine[0xff & input.get(iPos)]));
      }
    }
  }
}
