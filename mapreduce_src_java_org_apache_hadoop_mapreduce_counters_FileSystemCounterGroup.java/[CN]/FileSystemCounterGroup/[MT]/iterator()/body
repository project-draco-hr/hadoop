{
  return new AbstractIterator<C>(){
    Iterator<Object[]> it=map.values().iterator();
    Object[] counters=it.hasNext() ? it.next() : null;
    int i=0;
    @Override protected C computeNext(){
      while (counters != null) {
        while (i < counters.length) {
          @SuppressWarnings("unchecked") C counter=(C)counters[i++];
          if (counter != null)           return counter;
        }
        i=0;
        counters=it.hasNext() ? it.next() : null;
      }
      return endOfData();
    }
  }
;
}
