{
  FileSystem inFs=inDir.getFileSystem(conf);
  FileSystem outFs=outDir.getFileSystem(conf);
  outFs.delete(outDir,true);
  if (!inFs.mkdirs(inDir)) {
    throw new IOException("Mkdirs failed to create " + inDir.toString());
  }
{
    DataOutputStream file=inFs.create(new Path(inDir,"part-0"));
    file.writeBytes(input);
    file.close();
  }
  conf.setJobName("wordcount");
  conf.setInputFormat(TextInputFormat.class);
  conf.setOutputKeyClass(Text.class);
  conf.setOutputValueClass(IntWritable.class);
  conf.setMapperClass(WordCount.MapClass.class);
  conf.setCombinerClass(WordCount.Reduce.class);
  conf.setReducerClass(WordCount.Reduce.class);
  FileInputFormat.setInputPaths(conf,inDir);
  FileOutputFormat.setOutputPath(conf,outDir);
  conf.setNumMapTasks(numMaps);
  conf.setNumReduceTasks(numReduces);
  conf.set(JTConfig.JT_SYSTEM_DIR,"/tmp/subru/mapred/system");
  JobClient jobClient=new JobClient(conf);
  RunningJob job=jobClient.runJob(conf);
  assertFalse(FileSystem.get(conf).exists(new Path(conf.get(JTConfig.JT_SYSTEM_DIR))));
  assertFalse(sysDir.contains("/tmp/subru/mapred/system"));
  assertTrue(sysDir.contains("custom"));
  return new TestResult(job,MapReduceTestUtil.readOutput(outDir,conf));
}
