{
  MockRM rm=new MockRM(){
    @Override public ResourceScheduler createScheduler(){
      CapacityScheduler cs=new MyScheduler();
      cs.setConf(conf);
      return cs;
    }
  }
;
  rm.start();
  MockNM nm=rm.registerNode("h1:1234",20 * GB);
  RMApp app1=rm.submitApp(3 * GB,"app","user",null,"default");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm,nm);
  checkUsedResource(rm,"default",3 * GB,null);
  FiCaSchedulerApp app=TestUtils.getFiCaSchedulerApp(rm,app1.getApplicationId());
  Assert.assertEquals(3 * GB,app.getAppAttemptResourceUsage().getUsed().getMemorySize());
  ContainerId containerId1=ContainerId.newContainerId(am1.getApplicationAttemptId(),1);
  sentRMContainerLaunched(rm,containerId1);
  am1.allocate(Collections.singletonList(ResourceRequest.newInstance(Priority.newInstance(1),"*",Resources.createResource(2 * GB),1)),null);
  nm.nodeHeartbeat(true);
  AllocateResponse response=am1.sendContainerResizingRequest(null,Collections.singletonList(ContainerResourceChangeRequest.newInstance(containerId1,Resources.createResource(GB))));
  verifyContainerDecreased(response,containerId1,GB);
  rm.close();
}
