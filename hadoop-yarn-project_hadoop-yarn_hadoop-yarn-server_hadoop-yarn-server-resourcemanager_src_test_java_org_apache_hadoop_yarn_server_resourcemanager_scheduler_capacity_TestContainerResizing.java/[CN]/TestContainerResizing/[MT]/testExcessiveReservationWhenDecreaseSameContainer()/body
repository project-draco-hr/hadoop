{
  MockRM rm1=new MockRM(){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",8 * GB);
  MockNM nm2=rm1.registerNode("h2:1234",8 * GB);
  RMApp app1=rm1.submitApp(2 * GB,"app","user",null,"default");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  FiCaSchedulerApp app=getFiCaSchedulerApp(rm1,app1.getApplicationId());
  am1.allocate(Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(1),"*",Resources.createResource(2 * GB),1)),null);
  ContainerId containerId2=ContainerId.newContainerId(am1.getApplicationAttemptId(),2);
  Assert.assertTrue(rm1.waitForState(nm1,containerId2,RMContainerState.ALLOCATED,10 * 1000));
  am1.allocate(null,null);
  sentRMContainerLaunched(rm1,containerId2);
  ContainerId containerId1=ContainerId.newContainerId(am1.getApplicationAttemptId(),1);
  sentRMContainerLaunched(rm1,containerId1);
  am1.sendContainerResizingRequest(Arrays.asList(ContainerResourceChangeRequest.newInstance(containerId1,Resources.createResource(8 * GB))),null);
  checkPendingResource(rm1,"default",6 * GB,null);
  Assert.assertEquals(6 * GB,app.getAppAttemptResourceUsage().getPending().getMemory());
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  RMContainer rmContainer1=app.getLiveContainersMap().get(containerId1);
  Assert.assertTrue(rmContainer1.hasIncreaseReservation());
  Assert.assertEquals(6 * GB,rmContainer1.getReservedResource().getMemory());
  Assert.assertFalse(app.getReservedContainers().isEmpty());
  Assert.assertNotNull(cs.getNode(nm1.getNodeId()).getReservedContainer());
  checkPendingResource(rm1,"default",6 * GB,null);
  Assert.assertEquals(6 * GB,app.getAppAttemptResourceUsage().getPending().getMemory());
  checkUsedResource(rm1,"default",10 * GB,null);
  Assert.assertEquals(10 * GB,((LeafQueue)cs.getQueue("default")).getUser("user").getUsed().getMemory());
  Assert.assertEquals(4 * GB,app.getAppAttemptResourceUsage().getUsed().getMemory());
  Assert.assertEquals(6 * GB,app.getAppAttemptResourceUsage().getReserved().getMemory());
  am1.allocate(null,Arrays.asList(containerId2));
  am1.sendContainerResizingRequest(null,Arrays.asList(ContainerResourceChangeRequest.newInstance(containerId1,Resources.createResource(1 * GB))));
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  Assert.assertTrue(app.getReservedContainers().isEmpty());
  Assert.assertNull(cs.getNode(nm1.getNodeId()).getReservedContainer());
  Assert.assertFalse(rmContainer1.hasIncreaseReservation());
  checkPendingResource(rm1,"default",0 * GB,null);
  Assert.assertEquals(0 * GB,app.getAppAttemptResourceUsage().getPending().getMemory());
  checkUsedResource(rm1,"default",1 * GB,null);
  Assert.assertEquals(1 * GB,((LeafQueue)cs.getQueue("default")).getUser("user").getUsed().getMemory());
  Assert.assertEquals(0 * GB,app.getAppAttemptResourceUsage().getReserved().getMemory());
  Assert.assertEquals(1 * GB,app.getAppAttemptResourceUsage().getUsed().getMemory());
  rm1.close();
}
