{
  MockRM rm1=new MockRM(){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",20 * GB);
  RMApp app1=rm1.submitApp(1 * GB,"app","user",null,"default");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  ContainerId containerId1=ContainerId.newContainerId(am1.getApplicationAttemptId(),1);
  sentRMContainerLaunched(rm1,containerId1);
  am1.sendContainerResizingRequest(Arrays.asList(UpdateContainerRequest.newInstance(0,containerId1,ContainerUpdateType.INCREASE_RESOURCE,Resources.createResource(3 * GB),null)));
  FiCaSchedulerApp app=TestUtils.getFiCaSchedulerApp(rm1,app1.getApplicationId());
  checkPendingResource(rm1,"default",2 * GB,null);
  Assert.assertEquals(2 * GB,app.getAppAttemptResourceUsage().getPending().getMemorySize());
  CapacityScheduler cs=(CapacityScheduler)rm1.getResourceScheduler();
  RMNode rmNode1=rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  cs.handle(new NodeUpdateSchedulerEvent(rmNode1));
  checkPendingResource(rm1,"default",0 * GB,null);
  Assert.assertEquals(0 * GB,app.getAppAttemptResourceUsage().getPending().getMemorySize());
  verifyContainerIncreased(am1.allocate(null,null),containerId1,3 * GB);
  verifyAvailableResourceOfSchedulerNode(rm1,nm1.getNodeId(),17 * GB);
  rm1.close();
}
