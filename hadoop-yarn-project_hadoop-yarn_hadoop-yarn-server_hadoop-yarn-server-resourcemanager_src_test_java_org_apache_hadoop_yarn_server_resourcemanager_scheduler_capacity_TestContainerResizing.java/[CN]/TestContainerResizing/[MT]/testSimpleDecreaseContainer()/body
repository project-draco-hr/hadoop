{
  MockRM rm1=new MockRM(){
    @Override public RMNodeLabelsManager createNodeLabelManager(){
      return mgr;
    }
  }
;
  rm1.start();
  MockNM nm1=rm1.registerNode("h1:1234",20 * GB);
  RMApp app1=rm1.submitApp(3 * GB,"app","user",null,"default");
  MockAM am1=MockRM.launchAndRegisterAM(app1,rm1,nm1);
  FiCaSchedulerApp app=TestUtils.getFiCaSchedulerApp(rm1,app1.getApplicationId());
  checkUsedResource(rm1,"default",3 * GB,null);
  Assert.assertEquals(3 * GB,app.getAppAttemptResourceUsage().getUsed().getMemorySize());
  ContainerId containerId1=ContainerId.newContainerId(am1.getApplicationAttemptId(),1);
  sentRMContainerLaunched(rm1,containerId1);
  AllocateResponse response=am1.sendContainerResizingRequest(Arrays.asList(UpdateContainerRequest.newInstance(0,containerId1,ContainerUpdateType.DECREASE_RESOURCE,Resources.createResource(1 * GB),null)));
  verifyContainerDecreased(response,containerId1,1 * GB);
  checkUsedResource(rm1,"default",1 * GB,null);
  Assert.assertEquals(1 * GB,app.getAppAttemptResourceUsage().getUsed().getMemorySize());
  RMNodeImpl rmNode=(RMNodeImpl)rm1.getRMContext().getRMNodes().get(nm1.getNodeId());
  Collection<Container> decreasedContainers=rmNode.getToBeDecreasedContainers();
  boolean rmNodeReceivedDecreaseContainer=false;
  for (  Container c : decreasedContainers) {
    if (c.getId().equals(containerId1) && c.getResource().equals(Resources.createResource(1 * GB))) {
      rmNodeReceivedDecreaseContainer=true;
    }
  }
  Assert.assertTrue(rmNodeReceivedDecreaseContainer);
  rm1.close();
}
