{
  Configuration conf=new Configuration();
  conf.set("fs.trash.interval","10");
  conf.set("fs.default.name",fs.getUri().toString());
  FsShell shell=new FsShell();
  shell.setConf(conf);
  Path trashRoot=null;
  Path myPath=new Path(base,"test/mkdirs");
  mkdir(fs,myPath);
  Path myFile=new Path(base,"test/mkdirs/myFile");
  writeFile(fs,myFile);
{
    String[] args=new String[1];
    args[0]="-expunge";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
{
    String[] args=new String[2];
    args[0]="-rm";
    args[1]=myFile.toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
    trashRoot=shell.getCurrentTrashDir();
    checkTrash(fs,trashRoot,myFile);
  }
  writeFile(fs,myFile);
{
    String[] args=new String[2];
    args[0]="-rm";
    args[1]=new Path(base,"test/mkdirs/myFile").toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
  writeFile(fs,myFile);
{
    String[] args=new String[2];
    args[0]="-rmr";
    args[1]=new Path(base,"test/mkdirs").toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
  mkdir(fs,myPath);
{
    String[] args=new String[2];
    args[0]="-rmr";
    args[1]=new Path(base,"test/mkdirs").toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
{
    Path toErase=new Path(trashRoot,"toErase");
    int retVal=-1;
    writeFile(fs,toErase);
    try {
      retVal=shell.run(new String[]{"-rm",toErase.toString()});
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(retVal == 0);
    checkNotInTrash(fs,trashRoot,toErase.toString());
    checkNotInTrash(fs,trashRoot,toErase.toString() + ".1");
  }
{
    String[] args=new String[1];
    args[0]="-expunge";
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
  }
  checkNotInTrash(fs,trashRoot,new Path(base,"test/mkdirs/myFile").toString());
  mkdir(fs,myPath);
  writeFile(fs,myFile);
{
    String[] args=new String[2];
    args[0]="-rm";
    args[1]=myFile.toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
    checkTrash(fs,trashRoot,myFile);
    args=new String[2];
    args[0]="-rmr";
    args[1]=myPath.toString();
    val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == 0);
    checkTrash(fs,trashRoot,myPath);
  }
{
    String[] args=new String[2];
    args[0]="-rmr";
    args[1]=trashRoot.getParent().getParent().toString();
    int val=-1;
    try {
      val=shell.run(args);
    }
 catch (    Exception e) {
      System.err.println("Exception raised from Trash.run " + e.getLocalizedMessage());
    }
    assertTrue(val == -1);
    assertTrue(fs.exists(trashRoot));
  }
}
